begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.exceptions
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|UserArgs
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_CONFLICT
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_UNAUTHORIZED
import|;
end_import

begin_comment
comment|/**  * Error Table represents the Errors from Ozone Rest API layer.  *  * Please note : The errors in this table are sorted by the HTTP_ERROR codes  * if you add new error codes to this table please follow the same convention.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ErrorTable
specifier|public
specifier|final
class|class
name|ErrorTable
block|{
comment|/* Error 400 */
DECL|field|MISSING_VERSION
specifier|public
specifier|static
specifier|final
name|OzoneException
name|MISSING_VERSION
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"missingVersion"
argument_list|,
literal|"x-ozone-version header is required."
argument_list|)
decl_stmt|;
DECL|field|MISSING_DATE
specifier|public
specifier|static
specifier|final
name|OzoneException
name|MISSING_DATE
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"missingDate"
argument_list|,
literal|"Date header is required."
argument_list|)
decl_stmt|;
DECL|field|BAD_DATE
specifier|public
specifier|static
specifier|final
name|OzoneException
name|BAD_DATE
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"badDate"
argument_list|,
literal|"Unable to parse date format."
argument_list|)
decl_stmt|;
DECL|field|MALFORMED_QUOTA
specifier|public
specifier|static
specifier|final
name|OzoneException
name|MALFORMED_QUOTA
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"malformedQuota"
argument_list|,
literal|"Invalid quota specified."
argument_list|)
decl_stmt|;
DECL|field|MALFORMED_ACL
specifier|public
specifier|static
specifier|final
name|OzoneException
name|MALFORMED_ACL
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"malformedACL"
argument_list|,
literal|"Invalid ACL specified."
argument_list|)
decl_stmt|;
DECL|field|INVALID_VOLUME_NAME
specifier|public
specifier|static
specifier|final
name|OzoneException
name|INVALID_VOLUME_NAME
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"invalidVolumeName"
argument_list|,
literal|"Invalid volume name."
argument_list|)
decl_stmt|;
DECL|field|INVALID_QUERY_PARAM
specifier|public
specifier|static
specifier|final
name|OzoneException
name|INVALID_QUERY_PARAM
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"invalidQueryParam"
argument_list|,
literal|"Invalid query parameter."
argument_list|)
decl_stmt|;
DECL|field|INVALID_BUCKET_NAME
specifier|public
specifier|static
specifier|final
name|OzoneException
name|INVALID_BUCKET_NAME
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"invalidBucketName"
argument_list|,
literal|"Invalid bucket name."
argument_list|)
decl_stmt|;
DECL|field|INVALID_KEY
specifier|public
specifier|static
specifier|final
name|OzoneException
name|INVALID_KEY
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"invalidKey"
argument_list|,
literal|"Invalid key."
argument_list|)
decl_stmt|;
DECL|field|INVALID_REQUEST
specifier|public
specifier|static
specifier|final
name|OzoneException
name|INVALID_REQUEST
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"invalidRequest"
argument_list|,
literal|"Error in request."
argument_list|)
decl_stmt|;
DECL|field|MALFORMED_BUCKET_VERSION
specifier|public
specifier|static
specifier|final
name|OzoneException
name|MALFORMED_BUCKET_VERSION
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"malformedBucketVersion"
argument_list|,
literal|"Malformed bucket version or version not unique."
argument_list|)
decl_stmt|;
DECL|field|MALFORMED_STORAGE_TYPE
specifier|public
specifier|static
specifier|final
name|OzoneException
name|MALFORMED_STORAGE_TYPE
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"malformedStorageType"
argument_list|,
literal|"Invalid storage Type specified."
argument_list|)
decl_stmt|;
DECL|field|MALFORMED_STORAGE_CLASS
specifier|public
specifier|static
specifier|final
name|OzoneException
name|MALFORMED_STORAGE_CLASS
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"malformedStorageClass"
argument_list|,
literal|"Invalid storage class specified."
argument_list|)
decl_stmt|;
DECL|field|BAD_DIGEST
specifier|public
specifier|static
specifier|final
name|OzoneException
name|BAD_DIGEST
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"badDigest"
argument_list|,
literal|"Content MD5 does not match."
argument_list|)
decl_stmt|;
DECL|field|INCOMPLETE_BODY
specifier|public
specifier|static
specifier|final
name|OzoneException
name|INCOMPLETE_BODY
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"incompleteBody"
argument_list|,
literal|"Content length does not match stream size."
argument_list|)
decl_stmt|;
DECL|field|BAD_AUTHORIZATION
specifier|public
specifier|static
specifier|final
name|OzoneException
name|BAD_AUTHORIZATION
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"badAuthorization"
argument_list|,
literal|"Missing authorization or authorization has to be "
operator|+
literal|"unique."
argument_list|)
decl_stmt|;
DECL|field|BAD_PROPERTY
specifier|public
specifier|static
specifier|final
name|OzoneException
name|BAD_PROPERTY
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_BAD_REQUEST
argument_list|,
literal|"unknownProperty"
argument_list|,
literal|"This property is not supported by this server."
argument_list|)
decl_stmt|;
comment|/* Error 401 */
DECL|field|UNAUTHORIZED
specifier|public
specifier|static
specifier|final
name|OzoneException
name|UNAUTHORIZED
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_UNAUTHORIZED
argument_list|,
literal|"Unauthorized"
argument_list|,
literal|"Access token is missing or invalid token."
argument_list|)
decl_stmt|;
comment|/* Error 403 */
DECL|field|ACCESS_DENIED
specifier|public
specifier|static
specifier|final
name|OzoneException
name|ACCESS_DENIED
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_FORBIDDEN
argument_list|,
literal|"accessDenied"
argument_list|,
literal|"Access denied."
argument_list|)
decl_stmt|;
comment|/* Error 404 */
DECL|field|USER_NOT_FOUND
specifier|public
specifier|static
specifier|final
name|OzoneException
name|USER_NOT_FOUND
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_NOT_FOUND
argument_list|,
literal|"userNotFound"
argument_list|,
literal|"Invalid user name."
argument_list|)
decl_stmt|;
DECL|field|VOLUME_NOT_FOUND
specifier|public
specifier|static
specifier|final
name|OzoneException
name|VOLUME_NOT_FOUND
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_NOT_FOUND
argument_list|,
literal|"volumeNotFound"
argument_list|,
literal|"No such volume."
argument_list|)
decl_stmt|;
comment|/* Error 409 */
DECL|field|VOLUME_ALREADY_EXISTS
specifier|public
specifier|static
specifier|final
name|OzoneException
name|VOLUME_ALREADY_EXISTS
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_CONFLICT
argument_list|,
literal|"volumeAlreadyExists"
argument_list|,
literal|"Duplicate volume name."
argument_list|)
decl_stmt|;
DECL|field|BUCKET_ALREADY_EXISTS
specifier|public
specifier|static
specifier|final
name|OzoneException
name|BUCKET_ALREADY_EXISTS
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_CONFLICT
argument_list|,
literal|"bucketAlreadyExists"
argument_list|,
literal|"Duplicate bucket name."
argument_list|)
decl_stmt|;
DECL|field|VOLUME_NOT_EMPTY
specifier|public
specifier|static
specifier|final
name|OzoneException
name|VOLUME_NOT_EMPTY
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_CONFLICT
argument_list|,
literal|"volumeNotEmpty"
argument_list|,
literal|"Volume must not have any buckets."
argument_list|)
decl_stmt|;
DECL|field|BUCKET_NOT_EMPTY
specifier|public
specifier|static
specifier|final
name|OzoneException
name|BUCKET_NOT_EMPTY
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_CONFLICT
argument_list|,
literal|"bucketNotEmpty"
argument_list|,
literal|"Bucket must not have any keys."
argument_list|)
decl_stmt|;
DECL|field|KEY_OPERATION_CONFLICT
specifier|public
specifier|static
specifier|final
name|OzoneException
name|KEY_OPERATION_CONFLICT
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_CONFLICT
argument_list|,
literal|"keyOperationConflict"
argument_list|,
literal|"Conflicting operation on the specified key is going"
operator|+
literal|" on."
argument_list|)
decl_stmt|;
comment|/* Error 500 */
DECL|field|SERVER_ERROR
specifier|public
specifier|static
specifier|final
name|OzoneException
name|SERVER_ERROR
init|=
operator|new
name|OzoneException
argument_list|(
name|HTTP_INTERNAL_ERROR
argument_list|,
literal|"internalServerError"
argument_list|,
literal|"Internal server error."
argument_list|)
decl_stmt|;
comment|/**    * Create a new instance of Error.    *    * @param e Error Template    * @param requestID Request ID    * @param resource Resource Name    * @param hostID hostID    *    * @return creates a new instance of error based on the template    */
DECL|method|newError (OzoneException e, String requestID, String resource, String hostID)
specifier|public
specifier|static
name|OzoneException
name|newError
parameter_list|(
name|OzoneException
name|e
parameter_list|,
name|String
name|requestID
parameter_list|,
name|String
name|resource
parameter_list|,
name|String
name|hostID
parameter_list|)
block|{
name|OzoneException
name|err
init|=
operator|new
name|OzoneException
argument_list|(
name|e
operator|.
name|getHttpCode
argument_list|()
argument_list|,
name|e
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|err
operator|.
name|setRequestId
argument_list|(
name|requestID
argument_list|)
expr_stmt|;
name|err
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|err
operator|.
name|setHostID
argument_list|(
name|hostID
argument_list|)
expr_stmt|;
return|return
name|err
return|;
block|}
comment|/**    * Create new instance of Error.    *    * @param e - Error Template    * @param args - Args    *    * @return Ozone Exception    */
DECL|method|newError (OzoneException e, UserArgs args)
specifier|public
specifier|static
name|OzoneException
name|newError
parameter_list|(
name|OzoneException
name|e
parameter_list|,
name|UserArgs
name|args
parameter_list|)
block|{
name|OzoneException
name|err
init|=
operator|new
name|OzoneException
argument_list|(
name|e
operator|.
name|getHttpCode
argument_list|()
argument_list|,
name|e
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|err
operator|.
name|setRequestId
argument_list|(
name|args
operator|.
name|getRequestID
argument_list|()
argument_list|)
expr_stmt|;
name|err
operator|.
name|setResource
argument_list|(
name|args
operator|.
name|getResourceName
argument_list|()
argument_list|)
expr_stmt|;
name|err
operator|.
name|setHostID
argument_list|(
name|args
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|err
return|;
block|}
comment|/**    * Create new instance of Error.    *    * @param e - Error Template    * @param args - Args    * @param ex Exception    *    * @return Ozone Exception    */
DECL|method|newError (OzoneException e, UserArgs args, Exception ex)
specifier|public
specifier|static
name|OzoneException
name|newError
parameter_list|(
name|OzoneException
name|e
parameter_list|,
name|UserArgs
name|args
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
name|OzoneException
name|err
init|=
operator|new
name|OzoneException
argument_list|(
name|e
operator|.
name|getHttpCode
argument_list|()
argument_list|,
name|e
operator|.
name|getShortMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|err
operator|.
name|setRequestId
argument_list|(
name|args
operator|.
name|getRequestID
argument_list|()
argument_list|)
expr_stmt|;
name|err
operator|.
name|setResource
argument_list|(
name|args
operator|.
name|getResourceName
argument_list|()
argument_list|)
expr_stmt|;
name|err
operator|.
name|setHostID
argument_list|(
name|args
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|err
operator|.
name|setMessage
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|err
return|;
block|}
DECL|method|ErrorTable ()
specifier|private
name|ErrorTable
parameter_list|()
block|{
comment|// Never constructed.
block|}
block|}
end_class

end_unit

