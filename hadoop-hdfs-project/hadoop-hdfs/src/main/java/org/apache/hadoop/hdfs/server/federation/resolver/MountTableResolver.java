begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_DEFAULT_NAMESERVICE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|DestinationOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|Router
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|MountTableStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreUnavailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Mount table to map between global paths and remote locations. This allows the  * {@link org.apache.hadoop.hdfs.server.federation.router.Router Router} to map  * the global HDFS view to the remote namespaces. This is similar to  * {@link org.apache.hadoop.fs.viewfs.ViewFs ViewFs}.  * This is implemented as a tree.  */
end_comment

begin_class
DECL|class|MountTableResolver
specifier|public
class|class
name|MountTableResolver
implements|implements
name|FileSubclusterResolver
implements|,
name|StateStoreCache
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MountTableResolver
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Reference to Router. */
DECL|field|router
specifier|private
specifier|final
name|Router
name|router
decl_stmt|;
comment|/** Reference to the State Store. */
DECL|field|stateStore
specifier|private
specifier|final
name|StateStoreService
name|stateStore
decl_stmt|;
comment|/** Interface to the mount table store. */
DECL|field|mountTableStore
specifier|private
name|MountTableStore
name|mountTableStore
decl_stmt|;
comment|/** If the tree has been initialized. */
DECL|field|init
specifier|private
name|boolean
name|init
init|=
literal|false
decl_stmt|;
comment|/** Path -> Remote HDFS location. */
DECL|field|tree
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|MountTable
argument_list|>
name|tree
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Path -> Remote location. */
DECL|field|locationCache
specifier|private
specifier|final
name|ConcurrentNavigableMap
argument_list|<
name|String
argument_list|,
name|PathLocation
argument_list|>
name|locationCache
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Default nameservice when no mount matches the math. */
DECL|field|defaultNameService
specifier|private
name|String
name|defaultNameService
init|=
literal|""
decl_stmt|;
comment|/** Synchronization for both the tree and the cache. */
DECL|field|readWriteLock
specifier|private
specifier|final
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
init|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
init|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|MountTableResolver (Configuration conf)
specifier|public
name|MountTableResolver
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|(
name|StateStoreService
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MountTableResolver (Configuration conf, Router routerService)
specifier|public
name|MountTableResolver
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Router
name|routerService
parameter_list|)
block|{
name|this
operator|.
name|router
operator|=
name|routerService
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|router
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|stateStore
operator|=
name|this
operator|.
name|router
operator|.
name|getStateStore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|stateStore
operator|=
literal|null
expr_stmt|;
block|}
name|registerCacheExternal
argument_list|()
expr_stmt|;
name|initDefaultNameService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|MountTableResolver (Configuration conf, StateStoreService store)
specifier|public
name|MountTableResolver
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|StateStoreService
name|store
parameter_list|)
block|{
name|this
operator|.
name|router
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|stateStore
operator|=
name|store
expr_stmt|;
name|registerCacheExternal
argument_list|()
expr_stmt|;
name|initDefaultNameService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Request cache updates from the State Store for this resolver.    */
DECL|method|registerCacheExternal ()
specifier|private
name|void
name|registerCacheExternal
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|stateStore
operator|.
name|registerCacheExternal
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Nameservice for APIs that cannot be resolved to a specific one.    *    * @param conf Configuration for this resolver.    */
DECL|method|initDefaultNameService (Configuration conf)
specifier|private
name|void
name|initDefaultNameService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|defaultNameService
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_ROUTER_DEFAULT_NAMESERVICE
argument_list|,
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HadoopIllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot find default name service, setting it to the first"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|nsIds
init|=
name|DFSUtilClient
operator|.
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|defaultNameService
operator|=
name|nsIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Default name service: {}"
argument_list|,
name|this
operator|.
name|defaultNameService
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a reference for the Router for this resolver.    *    * @return Router for this resolver.    */
DECL|method|getRouter ()
specifier|protected
name|Router
name|getRouter
parameter_list|()
block|{
return|return
name|this
operator|.
name|router
return|;
block|}
comment|/**    * Get the mount table store for this resolver.    *    * @return Mount table store.    * @throws IOException If it cannot connect to the State Store.    */
DECL|method|getMountTableStore ()
specifier|protected
name|MountTableStore
name|getMountTableStore
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|mountTableStore
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mountTableStore
operator|=
name|this
operator|.
name|stateStore
operator|.
name|getRegisteredRecordStore
argument_list|(
name|MountTableStore
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mountTableStore
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"State Store does not have an interface for "
operator|+
name|MountTableStore
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
return|return
name|this
operator|.
name|mountTableStore
return|;
block|}
comment|/**    * Add a mount entry to the table.    *    * @param entry The mount table record to add from the state store.    */
DECL|method|addEntry (final MountTable entry)
specifier|public
name|void
name|addEntry
parameter_list|(
specifier|final
name|MountTable
name|entry
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|srcPath
init|=
name|entry
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
name|this
operator|.
name|tree
operator|.
name|put
argument_list|(
name|srcPath
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|invalidateLocationCache
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|init
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Remove a mount table entry.    *    * @param srcPath Source path for the entry to remove.    */
DECL|method|removeEntry (final String srcPath)
specifier|public
name|void
name|removeEntry
parameter_list|(
specifier|final
name|String
name|srcPath
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|tree
operator|.
name|remove
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|invalidateLocationCache
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Invalidates all cache entries below this path. It requires the write lock.    *    * @param path Source path.    */
DECL|method|invalidateLocationCache (final String path)
specifier|private
name|void
name|invalidateLocationCache
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|locationCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Determine next lexicographic entry after source path
name|String
name|nextSrc
init|=
name|path
operator|+
name|Character
operator|.
name|MAX_VALUE
decl_stmt|;
name|ConcurrentNavigableMap
argument_list|<
name|String
argument_list|,
name|PathLocation
argument_list|>
name|subMap
init|=
name|locationCache
operator|.
name|subMap
argument_list|(
name|path
argument_list|,
name|nextSrc
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|key
range|:
name|subMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|locationCache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Updates the mount path tree with a new set of mount table entries. It also    * updates the needed caches.    *    * @param entries Full set of mount table entries to update.    */
annotation|@
name|VisibleForTesting
DECL|method|refreshEntries (final Collection<MountTable> entries)
specifier|public
name|void
name|refreshEntries
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|MountTable
argument_list|>
name|entries
parameter_list|)
block|{
comment|// The tree read/write must be atomic
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// New entries
name|Map
argument_list|<
name|String
argument_list|,
name|MountTable
argument_list|>
name|newEntries
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MountTable
name|entry
range|:
name|entries
control|)
block|{
name|String
name|srcPath
init|=
name|entry
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
name|newEntries
operator|.
name|put
argument_list|(
name|srcPath
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// Old entries (reversed to sort from the leaves to the root)
name|Set
argument_list|<
name|String
argument_list|>
name|oldEntries
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MountTable
name|entry
range|:
name|getTreeValues
argument_list|(
literal|"/"
argument_list|)
control|)
block|{
name|String
name|srcPath
init|=
name|entry
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
name|oldEntries
operator|.
name|add
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
block|}
comment|// Entries that need to be removed
for|for
control|(
name|String
name|srcPath
range|:
name|oldEntries
control|)
block|{
if|if
condition|(
operator|!
name|newEntries
operator|.
name|containsKey
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
name|this
operator|.
name|tree
operator|.
name|remove
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|invalidateLocationCache
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removed stale mount point {} from resolver"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Entries that need to be added
for|for
control|(
name|MountTable
name|entry
range|:
name|entries
control|)
block|{
name|String
name|srcPath
init|=
name|entry
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldEntries
operator|.
name|contains
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
comment|// Add node, it does not exist
name|this
operator|.
name|tree
operator|.
name|put
argument_list|(
name|srcPath
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added new mount point {} to resolver"
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Node exists, check for updates
name|MountTable
name|existingEntry
init|=
name|this
operator|.
name|tree
operator|.
name|get
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingEntry
operator|!=
literal|null
operator|&&
operator|!
name|existingEntry
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Entry has changed from \"{}\" to \"{}\""
argument_list|,
name|existingEntry
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|this
operator|.
name|tree
operator|.
name|put
argument_list|(
name|srcPath
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|invalidateLocationCache
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated mount point {} in resolver"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|init
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Replaces the current in-memory cached of the mount table with a new    * version fetched from the data store.    */
annotation|@
name|Override
DECL|method|loadCache (boolean force)
specifier|public
name|boolean
name|loadCache
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
try|try
block|{
comment|// Our cache depends on the store, update it first
name|MountTableStore
name|mountTable
init|=
name|this
operator|.
name|getMountTableStore
argument_list|()
decl_stmt|;
name|mountTable
operator|.
name|loadCache
argument_list|(
name|force
argument_list|)
expr_stmt|;
name|GetMountTableEntriesRequest
name|request
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|response
init|=
name|mountTable
operator|.
name|getMountTableEntries
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|records
init|=
name|response
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|refreshEntries
argument_list|(
name|records
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot fetch mount table entries from State Store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Clears all data.    */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Clearing all mount location caches"
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|locationCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|tree
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDestinationForPath (final String path)
specifier|public
name|PathLocation
name|getDestinationForPath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyMountTable
argument_list|()
expr_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|locationCache
operator|.
name|computeIfAbsent
argument_list|(
name|path
argument_list|,
name|this
operator|::
name|lookupLocation
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Build the path location to insert into the cache atomically. It must hold    * the read lock.    * @param path Path to check/insert.    * @return New remote location.    */
DECL|method|lookupLocation (final String path)
specifier|public
name|PathLocation
name|lookupLocation
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
name|PathLocation
name|ret
init|=
literal|null
decl_stmt|;
name|MountTable
name|entry
init|=
name|findDeepest
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|buildLocation
argument_list|(
name|path
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not found, use default location
name|RemoteLocation
name|remoteLocation
init|=
operator|new
name|RemoteLocation
argument_list|(
name|defaultNameService
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|remoteLocation
argument_list|)
decl_stmt|;
name|ret
operator|=
operator|new
name|PathLocation
argument_list|(
literal|null
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Get the mount table entry for a path.    *    * @param path Path to look for.    * @return Mount table entry the path belongs.    * @throws IOException If the State Store could not be reached.    */
DECL|method|getMountPoint (final String path)
specifier|public
name|MountTable
name|getMountPoint
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyMountTable
argument_list|()
expr_stmt|;
return|return
name|findDeepest
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMountPoints (final String path)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMountPoints
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyMountTable
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|children
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|from
init|=
name|path
decl_stmt|;
name|String
name|to
init|=
name|path
operator|+
name|Character
operator|.
name|MAX_VALUE
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|MountTable
argument_list|>
name|subMap
init|=
name|this
operator|.
name|tree
operator|.
name|subMap
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|subPath
range|:
name|subMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|child
init|=
name|subPath
decl_stmt|;
comment|// Special case for /
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
comment|// Get the children
name|int
name|ini
init|=
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
name|child
operator|=
name|subPath
operator|.
name|substring
argument_list|(
name|ini
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|child
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// This is a mount point but without children
name|exists
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|.
name|startsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
comment|// This is a mount point with children
name|exists
operator|=
literal|true
expr_stmt|;
name|child
operator|=
name|child
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// We only return immediate children
name|int
name|fin
init|=
name|child
operator|.
name|indexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|fin
operator|>
operator|-
literal|1
condition|)
block|{
name|child
operator|=
name|child
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|child
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|exists
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|children
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get all the mount records at or beneath a given path.    * @param path Path to get the mount points from.    * @return List of mount table records under the path or null if the path is    *         not found.    * @throws IOException If it's not connected to the State Store.    */
DECL|method|getMounts (final String path)
specifier|public
name|List
argument_list|<
name|MountTable
argument_list|>
name|getMounts
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyMountTable
argument_list|()
expr_stmt|;
return|return
name|getTreeValues
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Check if the Mount Table is ready to be used.    * @throws StateStoreUnavailableException If it cannot connect to the store.    */
DECL|method|verifyMountTable ()
specifier|private
name|void
name|verifyMountTable
parameter_list|()
throws|throws
name|StateStoreUnavailableException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|init
condition|)
block|{
throw|throw
operator|new
name|StateStoreUnavailableException
argument_list|(
literal|"Mount Table not initialized"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|tree
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Build a location for this result beneath the discovered mount point.    *    * @param path Path to build for.    * @param entry Mount table entry.    * @return PathLocation containing the namespace, local path.    */
DECL|method|buildLocation ( final String path, final MountTable entry)
specifier|private
specifier|static
name|PathLocation
name|buildLocation
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|MountTable
name|entry
parameter_list|)
block|{
name|String
name|srcPath
init|=
name|entry
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot build location, {} not a child of {}"
argument_list|,
name|path
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|remainingPath
init|=
name|path
operator|.
name|substring
argument_list|(
name|srcPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|remainingPath
operator|.
name|startsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|remainingPath
operator|=
name|remainingPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RemoteLocation
argument_list|>
name|locations
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteLocation
name|oneDst
range|:
name|entry
operator|.
name|getDestinations
argument_list|()
control|)
block|{
name|String
name|nsId
init|=
name|oneDst
operator|.
name|getNameserviceId
argument_list|()
decl_stmt|;
name|String
name|dest
init|=
name|oneDst
operator|.
name|getDest
argument_list|()
decl_stmt|;
name|String
name|newPath
init|=
name|dest
decl_stmt|;
if|if
condition|(
operator|!
name|newPath
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|newPath
operator|+=
name|Path
operator|.
name|SEPARATOR
expr_stmt|;
block|}
name|newPath
operator|+=
name|remainingPath
expr_stmt|;
name|RemoteLocation
name|remoteLocation
init|=
operator|new
name|RemoteLocation
argument_list|(
name|nsId
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|remoteLocation
argument_list|)
expr_stmt|;
block|}
name|DestinationOrder
name|order
init|=
name|entry
operator|.
name|getDestOrder
argument_list|()
decl_stmt|;
return|return
operator|new
name|PathLocation
argument_list|(
name|srcPath
argument_list|,
name|locations
argument_list|,
name|order
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultNamespace ()
specifier|public
name|String
name|getDefaultNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultNameService
return|;
block|}
comment|/**    * Find the deepest mount point for a path.    * @param path Path to look for.    * @return Mount table entry.    */
DECL|method|findDeepest (final String path)
specifier|private
name|MountTable
name|findDeepest
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|MountTable
argument_list|>
name|entry
init|=
name|this
operator|.
name|tree
operator|.
name|floorEntry
argument_list|(
name|path
argument_list|)
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|entry
operator|=
name|this
operator|.
name|tree
operator|.
name|lowerEntry
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the mount table entries under a path.    * @param path Path to search from.    * @return Mount Table entries.    */
DECL|method|getTreeValues (final String path)
specifier|private
name|List
argument_list|<
name|MountTable
argument_list|>
name|getTreeValues
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
return|return
name|getTreeValues
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Get the mount table entries under a path.    * @param path Path to search from.    * @param reverse If the order should be reversed.    * @return Mount Table entries.    */
DECL|method|getTreeValues (final String path, boolean reverse)
specifier|private
name|List
argument_list|<
name|MountTable
argument_list|>
name|getTreeValues
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|MountTable
argument_list|>
name|ret
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|from
init|=
name|path
decl_stmt|;
name|String
name|to
init|=
name|path
operator|+
name|Character
operator|.
name|MAX_VALUE
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|MountTable
argument_list|>
name|subMap
init|=
name|this
operator|.
name|tree
operator|.
name|subMap
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
for|for
control|(
name|MountTable
name|entry
range|:
name|subMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|reverse
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|addFirst
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

