begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.sps
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|StoragePolicySatisfier
operator|.
name|AttemptedItemInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|StoragePolicySatisfier
operator|.
name|ItemInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A monitor class for checking whether block storage movements attempt  * completed or not. If this receives block storage movement attempt  * status(either success or failure) from DN then it will just remove the  * entries from tracking. If there is no DN reports about movement attempt  * finished for a longer time period, then such items will retries automatically  * after timeout. The default timeout would be 5 minutes.  */
end_comment

begin_class
DECL|class|BlockStorageMovementAttemptedItems
specifier|public
class|class
name|BlockStorageMovementAttemptedItems
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockStorageMovementAttemptedItems
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * A map holds the items which are already taken for blocks movements    * processing and sent to DNs.    */
DECL|field|storageMovementAttemptedItems
specifier|private
specifier|final
name|List
argument_list|<
name|AttemptedItemInfo
argument_list|>
name|storageMovementAttemptedItems
decl_stmt|;
DECL|field|movementFinishedBlocks
specifier|private
specifier|final
name|List
argument_list|<
name|Block
argument_list|>
name|movementFinishedBlocks
decl_stmt|;
DECL|field|monitorRunning
specifier|private
specifier|volatile
name|boolean
name|monitorRunning
init|=
literal|true
decl_stmt|;
DECL|field|timerThread
specifier|private
name|Daemon
name|timerThread
init|=
literal|null
decl_stmt|;
comment|//
comment|// It might take anywhere between 5 to 10 minutes before
comment|// a request is timed out.
comment|//
DECL|field|selfRetryTimeout
specifier|private
name|long
name|selfRetryTimeout
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|//
comment|// It might take anywhere between 1 to 2 minutes before
comment|// a request is timed out.
comment|//
DECL|field|minCheckTimeout
specifier|private
name|long
name|minCheckTimeout
init|=
literal|1
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// minimum value
DECL|field|blockStorageMovementNeeded
specifier|private
name|BlockStorageMovementNeeded
name|blockStorageMovementNeeded
decl_stmt|;
DECL|field|ctxt
specifier|private
specifier|final
name|Context
name|ctxt
decl_stmt|;
DECL|method|BlockStorageMovementAttemptedItems (Context context, BlockStorageMovementNeeded unsatisfiedStorageMovementFiles)
specifier|public
name|BlockStorageMovementAttemptedItems
parameter_list|(
name|Context
name|context
parameter_list|,
name|BlockStorageMovementNeeded
name|unsatisfiedStorageMovementFiles
parameter_list|)
block|{
name|this
operator|.
name|ctxt
operator|=
name|context
expr_stmt|;
name|long
name|recheckTimeout
init|=
name|ctxt
operator|.
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
argument_list|,
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|recheckTimeout
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|minCheckTimeout
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minCheckTimeout
argument_list|,
name|recheckTimeout
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|selfRetryTimeout
operator|=
name|ctxt
operator|.
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_KEY
argument_list|,
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockStorageMovementNeeded
operator|=
name|unsatisfiedStorageMovementFiles
expr_stmt|;
name|storageMovementAttemptedItems
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|movementFinishedBlocks
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add item to block storage movement attempted items map which holds the    * tracking/blockCollection id versus time stamp.    *    * @param itemInfo    *          - tracking info    */
DECL|method|add (AttemptedItemInfo itemInfo)
specifier|public
name|void
name|add
parameter_list|(
name|AttemptedItemInfo
name|itemInfo
parameter_list|)
block|{
synchronized|synchronized
init|(
name|storageMovementAttemptedItems
init|)
block|{
name|storageMovementAttemptedItems
operator|.
name|add
argument_list|(
name|itemInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add the storage movement attempt finished blocks to    * storageMovementFinishedBlocks.    *    * @param moveAttemptFinishedBlks    *          storage movement attempt finished blocks    */
DECL|method|addReportedMovedBlocks (Block[] moveAttemptFinishedBlks)
specifier|public
name|void
name|addReportedMovedBlocks
parameter_list|(
name|Block
index|[]
name|moveAttemptFinishedBlks
parameter_list|)
block|{
if|if
condition|(
name|moveAttemptFinishedBlks
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|movementFinishedBlocks
init|)
block|{
name|movementFinishedBlocks
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|moveAttemptFinishedBlks
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Starts the monitor thread.    */
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|monitorRunning
operator|=
literal|true
expr_stmt|;
name|timerThread
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|BlocksStorageMovementAttemptMonitor
argument_list|()
argument_list|)
expr_stmt|;
name|timerThread
operator|.
name|setName
argument_list|(
literal|"BlocksStorageMovementAttemptMonitor"
argument_list|)
expr_stmt|;
name|timerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Sets running flag to false. Also, this will interrupt monitor thread and    * clear all the queued up tasks.    */
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|monitorRunning
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|timerThread
operator|!=
literal|null
condition|)
block|{
name|timerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|clearQueues
argument_list|()
expr_stmt|;
block|}
comment|/**    * Timed wait to stop monitor thread.    */
DECL|method|stopGracefully ()
specifier|synchronized
name|void
name|stopGracefully
parameter_list|()
block|{
if|if
condition|(
name|timerThread
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|monitorRunning
condition|)
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|timerThread
operator|.
name|join
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{     }
block|}
comment|/**    * A monitor class for checking block storage movement attempt status and long    * waiting items periodically.    */
DECL|class|BlocksStorageMovementAttemptMonitor
specifier|private
class|class
name|BlocksStorageMovementAttemptMonitor
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|monitorRunning
condition|)
block|{
try|try
block|{
name|blockStorageMovementReportedItemsCheck
argument_list|()
expr_stmt|;
name|blocksStorageMovementUnReportedItemsCheck
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|minCheckTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"BlocksStorageMovementAttemptMonitor thread "
operator|+
literal|"is interrupted."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"BlocksStorageMovementAttemptMonitor thread "
operator|+
literal|"received exception and exiting."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|blocksStorageMovementUnReportedItemsCheck ()
name|void
name|blocksStorageMovementUnReportedItemsCheck
parameter_list|()
block|{
synchronized|synchronized
init|(
name|storageMovementAttemptedItems
init|)
block|{
name|Iterator
argument_list|<
name|AttemptedItemInfo
argument_list|>
name|iter
init|=
name|storageMovementAttemptedItems
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AttemptedItemInfo
name|itemInfo
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|itemInfo
operator|.
name|getLastAttemptedOrReportedTime
argument_list|()
operator|+
name|selfRetryTimeout
condition|)
block|{
name|Long
name|blockCollectionID
init|=
name|itemInfo
operator|.
name|getTrackId
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|movementFinishedBlocks
init|)
block|{
name|ItemInfo
name|candidate
init|=
operator|new
name|ItemInfo
argument_list|(
name|itemInfo
operator|.
name|getStartId
argument_list|()
argument_list|,
name|blockCollectionID
argument_list|,
name|itemInfo
operator|.
name|getRetryCount
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|blockStorageMovementNeeded
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TrackID: {} becomes timed out and moved to needed "
operator|+
literal|"retries queue for next iteration."
argument_list|,
name|blockCollectionID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|blockStorageMovementReportedItemsCheck ()
name|void
name|blockStorageMovementReportedItemsCheck
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|movementFinishedBlocks
init|)
block|{
name|Iterator
argument_list|<
name|Block
argument_list|>
name|finishedBlksIter
init|=
name|movementFinishedBlocks
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|finishedBlksIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Block
name|blk
init|=
name|finishedBlksIter
operator|.
name|next
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|storageMovementAttemptedItems
init|)
block|{
name|Iterator
argument_list|<
name|AttemptedItemInfo
argument_list|>
name|iterator
init|=
name|storageMovementAttemptedItems
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AttemptedItemInfo
name|attemptedItemInfo
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|attemptedItemInfo
operator|.
name|getBlocks
argument_list|()
operator|.
name|remove
argument_list|(
name|blk
argument_list|)
expr_stmt|;
if|if
condition|(
name|attemptedItemInfo
operator|.
name|getBlocks
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: try add this at front of the Queue, so that this element
comment|// gets the chance first and can be cleaned from queue quickly as
comment|// all movements already done.
name|blockStorageMovementNeeded
operator|.
name|add
argument_list|(
operator|new
name|ItemInfo
argument_list|(
name|attemptedItemInfo
operator|.
name|getStartId
argument_list|()
argument_list|,
name|attemptedItemInfo
operator|.
name|getTrackId
argument_list|()
argument_list|,
name|attemptedItemInfo
operator|.
name|getRetryCount
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Remove attempted blocks from movementFinishedBlocks list.
name|finishedBlksIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMovementFinishedBlocksCount ()
specifier|public
name|int
name|getMovementFinishedBlocksCount
parameter_list|()
block|{
return|return
name|movementFinishedBlocks
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAttemptedItemsCount ()
specifier|public
name|int
name|getAttemptedItemsCount
parameter_list|()
block|{
return|return
name|storageMovementAttemptedItems
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|clearQueues ()
specifier|public
name|void
name|clearQueues
parameter_list|()
block|{
name|movementFinishedBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|storageMovementAttemptedItems
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

