begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_PERCENTAGE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_CALCULATOR_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_CALCULATOR_KEY
import|;
end_import

begin_comment
comment|/**  * Used for calculating file system space reserved for non-HDFS data.  */
end_comment

begin_class
DECL|class|ReservedSpaceCalculator
specifier|public
specifier|abstract
class|class
name|ReservedSpaceCalculator
block|{
comment|/**    * Used for creating instances of ReservedSpaceCalculator.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|usage
specifier|private
name|DF
name|usage
decl_stmt|;
DECL|field|storageType
specifier|private
name|StorageType
name|storageType
decl_stmt|;
DECL|method|Builder (Configuration conf)
specifier|public
name|Builder
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|setUsage (DF newUsage)
specifier|public
name|Builder
name|setUsage
parameter_list|(
name|DF
name|newUsage
parameter_list|)
block|{
name|this
operator|.
name|usage
operator|=
name|newUsage
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setStorageType ( StorageType newStorageType)
specifier|public
name|Builder
name|setStorageType
parameter_list|(
name|StorageType
name|newStorageType
parameter_list|)
block|{
name|this
operator|.
name|storageType
operator|=
name|newStorageType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
name|ReservedSpaceCalculator
name|build
parameter_list|()
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ReservedSpaceCalculator
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFS_DATANODE_DU_RESERVED_CALCULATOR_KEY
argument_list|,
name|DFS_DATANODE_DU_RESERVED_CALCULATOR_DEFAULT
argument_list|,
name|ReservedSpaceCalculator
operator|.
name|class
argument_list|)
decl_stmt|;
name|Constructor
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|,
name|DF
operator|.
name|class
argument_list|,
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|ReservedSpaceCalculator
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|,
name|usage
argument_list|,
name|storageType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error instantiating ReservedSpaceCalculator"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|usage
specifier|private
specifier|final
name|DF
name|usage
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|storageType
specifier|private
specifier|final
name|StorageType
name|storageType
decl_stmt|;
DECL|method|ReservedSpaceCalculator (Configuration conf, DF usage, StorageType storageType)
name|ReservedSpaceCalculator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|DF
name|usage
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
block|{
name|this
operator|.
name|usage
operator|=
name|usage
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|storageType
operator|=
name|storageType
expr_stmt|;
block|}
DECL|method|getUsage ()
name|DF
name|getUsage
parameter_list|()
block|{
return|return
name|usage
return|;
block|}
DECL|method|getReservedFromConf (String key, long defaultValue)
name|long
name|getReservedFromConf
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|key
operator|+
literal|"."
operator|+
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|storageType
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|conf
operator|.
name|getLongBytes
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Return the capacity of the file system space reserved for non-HDFS.    *    * @return the number of bytes reserved for non-HDFS.    */
DECL|method|getReserved ()
specifier|abstract
name|long
name|getReserved
parameter_list|()
function_decl|;
comment|/**    * Based on absolute number of reserved bytes.    */
DECL|class|ReservedSpaceCalculatorAbsolute
specifier|public
specifier|static
class|class
name|ReservedSpaceCalculatorAbsolute
extends|extends
name|ReservedSpaceCalculator
block|{
DECL|field|reservedBytes
specifier|private
specifier|final
name|long
name|reservedBytes
decl_stmt|;
DECL|method|ReservedSpaceCalculatorAbsolute (Configuration conf, DF usage, StorageType storageType)
specifier|public
name|ReservedSpaceCalculatorAbsolute
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|DF
name|usage
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|usage
argument_list|,
name|storageType
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservedBytes
operator|=
name|getReservedFromConf
argument_list|(
name|DFS_DATANODE_DU_RESERVED_KEY
argument_list|,
name|DFS_DATANODE_DU_RESERVED_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReserved ()
name|long
name|getReserved
parameter_list|()
block|{
return|return
name|reservedBytes
return|;
block|}
block|}
comment|/**    * Based on percentage of total capacity in the storage.    */
DECL|class|ReservedSpaceCalculatorPercentage
specifier|public
specifier|static
class|class
name|ReservedSpaceCalculatorPercentage
extends|extends
name|ReservedSpaceCalculator
block|{
DECL|field|reservedPct
specifier|private
specifier|final
name|long
name|reservedPct
decl_stmt|;
DECL|method|ReservedSpaceCalculatorPercentage (Configuration conf, DF usage, StorageType storageType)
specifier|public
name|ReservedSpaceCalculatorPercentage
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|DF
name|usage
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|usage
argument_list|,
name|storageType
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservedPct
operator|=
name|getReservedFromConf
argument_list|(
name|DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY
argument_list|,
name|DFS_DATANODE_DU_RESERVED_PERCENTAGE_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReserved ()
name|long
name|getReserved
parameter_list|()
block|{
return|return
name|getPercentage
argument_list|(
name|getUsage
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|reservedPct
argument_list|)
return|;
block|}
block|}
comment|/**    * Calculates absolute and percentage based reserved space and    * picks the one that will yield more reserved space.    */
DECL|class|ReservedSpaceCalculatorConservative
specifier|public
specifier|static
class|class
name|ReservedSpaceCalculatorConservative
extends|extends
name|ReservedSpaceCalculator
block|{
DECL|field|reservedBytes
specifier|private
specifier|final
name|long
name|reservedBytes
decl_stmt|;
DECL|field|reservedPct
specifier|private
specifier|final
name|long
name|reservedPct
decl_stmt|;
DECL|method|ReservedSpaceCalculatorConservative (Configuration conf, DF usage, StorageType storageType)
specifier|public
name|ReservedSpaceCalculatorConservative
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|DF
name|usage
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|usage
argument_list|,
name|storageType
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservedBytes
operator|=
name|getReservedFromConf
argument_list|(
name|DFS_DATANODE_DU_RESERVED_KEY
argument_list|,
name|DFS_DATANODE_DU_RESERVED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservedPct
operator|=
name|getReservedFromConf
argument_list|(
name|DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY
argument_list|,
name|DFS_DATANODE_DU_RESERVED_PERCENTAGE_DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|getReservedBytes ()
name|long
name|getReservedBytes
parameter_list|()
block|{
return|return
name|reservedBytes
return|;
block|}
DECL|method|getReservedPct ()
name|long
name|getReservedPct
parameter_list|()
block|{
return|return
name|reservedPct
return|;
block|}
annotation|@
name|Override
DECL|method|getReserved ()
name|long
name|getReserved
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|getReservedBytes
argument_list|()
argument_list|,
name|getPercentage
argument_list|(
name|getUsage
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|getReservedPct
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Calculates absolute and percentage based reserved space and    * picks the one that will yield less reserved space.    */
DECL|class|ReservedSpaceCalculatorAggressive
specifier|public
specifier|static
class|class
name|ReservedSpaceCalculatorAggressive
extends|extends
name|ReservedSpaceCalculator
block|{
DECL|field|reservedBytes
specifier|private
specifier|final
name|long
name|reservedBytes
decl_stmt|;
DECL|field|reservedPct
specifier|private
specifier|final
name|long
name|reservedPct
decl_stmt|;
DECL|method|ReservedSpaceCalculatorAggressive (Configuration conf, DF usage, StorageType storageType)
specifier|public
name|ReservedSpaceCalculatorAggressive
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|DF
name|usage
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|usage
argument_list|,
name|storageType
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservedBytes
operator|=
name|getReservedFromConf
argument_list|(
name|DFS_DATANODE_DU_RESERVED_KEY
argument_list|,
name|DFS_DATANODE_DU_RESERVED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservedPct
operator|=
name|getReservedFromConf
argument_list|(
name|DFS_DATANODE_DU_RESERVED_PERCENTAGE_KEY
argument_list|,
name|DFS_DATANODE_DU_RESERVED_PERCENTAGE_DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|getReservedBytes ()
name|long
name|getReservedBytes
parameter_list|()
block|{
return|return
name|reservedBytes
return|;
block|}
DECL|method|getReservedPct ()
name|long
name|getReservedPct
parameter_list|()
block|{
return|return
name|reservedPct
return|;
block|}
annotation|@
name|Override
DECL|method|getReserved ()
name|long
name|getReserved
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|getReservedBytes
argument_list|()
argument_list|,
name|getPercentage
argument_list|(
name|getUsage
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|getReservedPct
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|getPercentage (long total, long percentage)
specifier|private
specifier|static
name|long
name|getPercentage
parameter_list|(
name|long
name|total
parameter_list|,
name|long
name|percentage
parameter_list|)
block|{
return|return
operator|(
name|total
operator|*
name|percentage
operator|)
operator|/
literal|100
return|;
block|}
block|}
end_class

end_unit

