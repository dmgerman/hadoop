begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|XAttrHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_comment
comment|/**  * Class to pack XAttrs into byte[].<br>  * For each XAttr:<br>  *   The first 4 bytes represents XAttr namespace and name<br>  *     [0:3)  - XAttr namespace<br>  *     [3:32) - The name of the entry, which is an ID that points to a  *              string in map<br>  *   The following two bytes represents the length of XAttr value<br>  *   The remaining bytes is the XAttr value<br>  */
end_comment

begin_class
DECL|class|XAttrFormat
class|class
name|XAttrFormat
block|{
DECL|field|XATTR_NAMESPACE_MASK
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_NAMESPACE_MASK
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
operator|-
literal|1
decl_stmt|;
DECL|field|XATTR_NAMESPACE_OFFSET
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_NAMESPACE_OFFSET
init|=
literal|29
decl_stmt|;
DECL|field|XATTR_NAME_MASK
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_NAME_MASK
init|=
operator|(
literal|1
operator|<<
literal|29
operator|)
operator|-
literal|1
decl_stmt|;
DECL|field|XATTR_NAME_ID_MAX
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_NAME_ID_MAX
init|=
literal|1
operator|<<
literal|29
decl_stmt|;
DECL|field|XATTR_VALUE_LEN_MAX
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_VALUE_LEN_MAX
init|=
literal|1
operator|<<
literal|16
decl_stmt|;
DECL|field|XATTR_NAMESPACE_VALUES
specifier|private
specifier|static
specifier|final
name|XAttr
operator|.
name|NameSpace
index|[]
name|XATTR_NAMESPACE_VALUES
init|=
name|XAttr
operator|.
name|NameSpace
operator|.
name|values
argument_list|()
decl_stmt|;
comment|/**    * Unpack byte[] to XAttrs.    *     * @param attrs the packed bytes of XAttrs    * @return XAttrs list    */
DECL|method|toXAttrs (byte[] attrs)
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|toXAttrs
parameter_list|(
name|byte
index|[]
name|attrs
parameter_list|)
block|{
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|attrs
operator|==
literal|null
operator|||
name|attrs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|xAttrs
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|length
condition|;
control|)
block|{
name|XAttr
operator|.
name|Builder
name|builder
init|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
decl_stmt|;
comment|// big-endian
name|int
name|v
init|=
name|Ints
operator|.
name|fromBytes
argument_list|(
name|attrs
index|[
name|i
index|]
argument_list|,
name|attrs
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|attrs
index|[
name|i
operator|+
literal|2
index|]
argument_list|,
name|attrs
index|[
name|i
operator|+
literal|3
index|]
argument_list|)
decl_stmt|;
name|i
operator|+=
literal|4
expr_stmt|;
name|int
name|ns
init|=
operator|(
name|v
operator|>>
name|XATTR_NAMESPACE_OFFSET
operator|)
operator|&
name|XATTR_NAMESPACE_MASK
decl_stmt|;
name|int
name|nid
init|=
name|v
operator|&
name|XATTR_NAME_MASK
decl_stmt|;
name|builder
operator|.
name|setNameSpace
argument_list|(
name|XATTR_NAMESPACE_VALUES
index|[
name|ns
index|]
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|XAttrStorage
operator|.
name|getName
argument_list|(
name|nid
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|vlen
init|=
operator|(
operator|(
literal|0xff
operator|&
name|attrs
index|[
name|i
index|]
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
literal|0xff
operator|&
name|attrs
index|[
name|i
operator|+
literal|1
index|]
operator|)
decl_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|vlen
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|vlen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|attrs
argument_list|,
name|i
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|vlen
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|i
operator|+=
name|vlen
expr_stmt|;
block|}
name|xAttrs
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|xAttrs
return|;
block|}
comment|/**    * Get XAttr by name with prefix.    * Will unpack the byte[] until find the specific XAttr    *     * @param attrs the packed bytes of XAttrs    * @param prefixedName the XAttr name with prefix    * @return the XAttr    */
DECL|method|getXAttr (byte[] attrs, String prefixedName)
specifier|static
name|XAttr
name|getXAttr
parameter_list|(
name|byte
index|[]
name|attrs
parameter_list|,
name|String
name|prefixedName
parameter_list|)
block|{
if|if
condition|(
name|prefixedName
operator|==
literal|null
operator|||
name|attrs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|XAttr
name|xAttr
init|=
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|prefixedName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|length
condition|;
control|)
block|{
comment|// big-endian
name|int
name|v
init|=
name|Ints
operator|.
name|fromBytes
argument_list|(
name|attrs
index|[
name|i
index|]
argument_list|,
name|attrs
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|attrs
index|[
name|i
operator|+
literal|2
index|]
argument_list|,
name|attrs
index|[
name|i
operator|+
literal|3
index|]
argument_list|)
decl_stmt|;
name|i
operator|+=
literal|4
expr_stmt|;
name|int
name|ns
init|=
operator|(
name|v
operator|>>
name|XATTR_NAMESPACE_OFFSET
operator|)
operator|&
name|XATTR_NAMESPACE_MASK
decl_stmt|;
name|int
name|nid
init|=
name|v
operator|&
name|XATTR_NAME_MASK
decl_stmt|;
name|XAttr
operator|.
name|NameSpace
name|namespace
init|=
name|XATTR_NAMESPACE_VALUES
index|[
name|ns
index|]
decl_stmt|;
name|String
name|name
init|=
name|XAttrStorage
operator|.
name|getName
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|int
name|vlen
init|=
operator|(
operator|(
literal|0xff
operator|&
name|attrs
index|[
name|i
index|]
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
literal|0xff
operator|&
name|attrs
index|[
name|i
operator|+
literal|1
index|]
operator|)
decl_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|xAttr
operator|.
name|getNameSpace
argument_list|()
operator|==
name|namespace
operator|&&
name|xAttr
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|vlen
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|vlen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|attrs
argument_list|,
name|i
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|vlen
argument_list|)
expr_stmt|;
return|return
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setNameSpace
argument_list|(
name|namespace
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|xAttr
return|;
block|}
name|i
operator|+=
name|vlen
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Pack the XAttrs to byte[].    *     * @param xAttrs the XAttrs    * @return the packed bytes    */
DECL|method|toBytes (List<XAttr> xAttrs)
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|)
block|{
if|if
condition|(
name|xAttrs
operator|==
literal|null
operator|||
name|xAttrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|XAttr
name|a
range|:
name|xAttrs
control|)
block|{
name|int
name|nsOrd
init|=
name|a
operator|.
name|getNameSpace
argument_list|()
operator|.
name|ordinal
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nsOrd
operator|<
literal|8
argument_list|,
literal|"Too many namespaces."
argument_list|)
expr_stmt|;
name|int
name|nid
init|=
name|XAttrStorage
operator|.
name|getNameSerialNumber
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nid
operator|<
name|XATTR_NAME_ID_MAX
argument_list|,
literal|"Too large serial number of the xattr name"
argument_list|)
expr_stmt|;
comment|// big-endian
name|int
name|v
init|=
operator|(
operator|(
name|nsOrd
operator|&
name|XATTR_NAMESPACE_MASK
operator|)
operator|<<
name|XATTR_NAMESPACE_OFFSET
operator|)
operator||
operator|(
name|nid
operator|&
name|XATTR_NAME_MASK
operator|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|Ints
operator|.
name|toByteArray
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|vlen
init|=
name|a
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|a
operator|.
name|getValue
argument_list|()
operator|.
name|length
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|vlen
operator|<
name|XATTR_VALUE_LEN_MAX
argument_list|,
literal|"The length of xAttr values is too long."
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|vlen
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|vlen
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|vlen
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// in fact, no exception
block|}
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

