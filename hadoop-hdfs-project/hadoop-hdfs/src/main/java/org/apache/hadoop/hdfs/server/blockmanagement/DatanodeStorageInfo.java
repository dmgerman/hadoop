begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_comment
comment|/**  * A Datanode has one or more storages. A storage in the Datanode is represented  * by this class.  */
end_comment

begin_class
DECL|class|DatanodeStorageInfo
specifier|public
class|class
name|DatanodeStorageInfo
block|{
comment|/**    * Iterates over the list of blocks belonging to the data-node.    */
DECL|class|BlockIterator
specifier|static
class|class
name|BlockIterator
implements|implements
name|Iterator
argument_list|<
name|BlockInfo
argument_list|>
block|{
DECL|field|current
specifier|private
name|BlockInfo
name|current
decl_stmt|;
DECL|field|node
specifier|private
name|DatanodeStorageInfo
name|node
decl_stmt|;
DECL|method|BlockIterator (BlockInfo head, DatanodeStorageInfo dn)
name|BlockIterator
parameter_list|(
name|BlockInfo
name|head
parameter_list|,
name|DatanodeStorageInfo
name|dn
parameter_list|)
block|{
name|this
operator|.
name|current
operator|=
name|head
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|dn
expr_stmt|;
block|}
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|current
operator|!=
literal|null
return|;
block|}
DECL|method|next ()
specifier|public
name|BlockInfo
name|next
parameter_list|()
block|{
name|BlockInfo
name|res
init|=
name|current
decl_stmt|;
name|current
operator|=
name|current
operator|.
name|getNext
argument_list|(
name|current
operator|.
name|findStorageInfo
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Sorry. can't remove."
argument_list|)
throw|;
block|}
block|}
DECL|field|dn
specifier|private
specifier|final
name|DatanodeDescriptor
name|dn
decl_stmt|;
DECL|field|storageID
specifier|private
specifier|final
name|String
name|storageID
decl_stmt|;
DECL|field|storageType
specifier|private
specifier|final
name|StorageType
name|storageType
decl_stmt|;
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|field|capacity
specifier|private
name|long
name|capacity
decl_stmt|;
DECL|field|dfsUsed
specifier|private
name|long
name|dfsUsed
decl_stmt|;
DECL|field|remaining
specifier|private
name|long
name|remaining
decl_stmt|;
DECL|field|blockList
specifier|private
specifier|volatile
name|BlockInfo
name|blockList
init|=
literal|null
decl_stmt|;
DECL|method|DatanodeStorageInfo (DatanodeDescriptor dn, DatanodeStorage s)
name|DatanodeStorageInfo
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|DatanodeStorage
name|s
parameter_list|)
block|{
name|this
operator|.
name|dn
operator|=
name|dn
expr_stmt|;
name|this
operator|.
name|storageID
operator|=
name|s
operator|.
name|getStorageID
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageType
operator|=
name|s
operator|.
name|getStorageType
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|s
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
DECL|method|setUtilization (long capacity, long dfsUsed, long remaining)
specifier|public
name|void
name|setUtilization
parameter_list|(
name|long
name|capacity
parameter_list|,
name|long
name|dfsUsed
parameter_list|,
name|long
name|remaining
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|dfsUsed
operator|=
name|dfsUsed
expr_stmt|;
name|this
operator|.
name|remaining
operator|=
name|remaining
expr_stmt|;
block|}
DECL|method|setState (State s)
specifier|public
name|void
name|setState
parameter_list|(
name|State
name|s
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|s
expr_stmt|;
comment|// TODO: if goes to failed state cleanup the block list
block|}
DECL|method|getState ()
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
DECL|method|getStorageID ()
specifier|public
name|String
name|getStorageID
parameter_list|()
block|{
return|return
name|storageID
return|;
block|}
DECL|method|getCapacity ()
specifier|public
name|long
name|getCapacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
DECL|method|getDfsUsed ()
specifier|public
name|long
name|getDfsUsed
parameter_list|()
block|{
return|return
name|dfsUsed
return|;
block|}
DECL|method|getRemaining ()
specifier|public
name|long
name|getRemaining
parameter_list|()
block|{
return|return
name|remaining
return|;
block|}
DECL|method|addBlock (BlockInfo b)
specifier|public
name|boolean
name|addBlock
parameter_list|(
name|BlockInfo
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|b
operator|.
name|addStorage
argument_list|(
name|this
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// add to the head of the data-node list
name|blockList
operator|=
name|b
operator|.
name|listInsert
argument_list|(
name|blockList
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|removeBlock (BlockInfo b)
specifier|public
name|boolean
name|removeBlock
parameter_list|(
name|BlockInfo
name|b
parameter_list|)
block|{
name|blockList
operator|=
name|b
operator|.
name|listRemove
argument_list|(
name|blockList
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|removeStorage
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|numBlocks ()
specifier|public
name|int
name|numBlocks
parameter_list|()
block|{
return|return
name|blockList
operator|==
literal|null
condition|?
literal|0
else|:
name|blockList
operator|.
name|listCount
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getBlockIterator ()
name|Iterator
argument_list|<
name|BlockInfo
argument_list|>
name|getBlockIterator
parameter_list|()
block|{
return|return
operator|new
name|BlockIterator
argument_list|(
name|this
operator|.
name|blockList
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|updateState (StorageReport r)
specifier|public
name|void
name|updateState
parameter_list|(
name|StorageReport
name|r
parameter_list|)
block|{
name|capacity
operator|=
name|r
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|dfsUsed
operator|=
name|r
operator|.
name|getDfsUsed
argument_list|()
expr_stmt|;
name|remaining
operator|=
name|r
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
block|}
DECL|method|getDatanodeDescriptor ()
specifier|public
name|DatanodeDescriptor
name|getDatanodeDescriptor
parameter_list|()
block|{
return|return
name|dn
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|storageType
operator|+
literal|"]"
operator|+
name|storageID
operator|+
literal|":"
operator|+
name|state
return|;
block|}
block|}
end_class

end_unit

