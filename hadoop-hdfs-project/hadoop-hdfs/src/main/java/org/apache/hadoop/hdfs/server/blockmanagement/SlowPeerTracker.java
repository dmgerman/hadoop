begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowPeerReports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This class aggregates information from {@link SlowPeerReports} received via  * heartbeats.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|SlowPeerTracker
specifier|public
class|class
name|SlowPeerTracker
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SlowPeerTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Time duration after which a report is considered stale. This is    * set to DFS_DATANODE_OUTLIERS_REPORT_INTERVAL_KEY * 3 i.e.    * maintained for at least two successive reports.    */
DECL|field|reportValidityMs
specifier|private
specifier|final
name|long
name|reportValidityMs
decl_stmt|;
comment|/**    * Timer object for querying the current time. Separated out for    * unit testing.    */
DECL|field|timer
specifier|private
specifier|final
name|Timer
name|timer
decl_stmt|;
comment|/**    * ObjectWriter to convert JSON reports to String.    */
DECL|field|WRITER
specifier|private
specifier|static
specifier|final
name|ObjectWriter
name|WRITER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writer
argument_list|()
decl_stmt|;
comment|/**    * Number of nodes to include in JSON report. We will return nodes with    * the highest number of votes from peers.    */
DECL|field|MAX_NODES_TO_REPORT
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NODES_TO_REPORT
init|=
literal|5
decl_stmt|;
comment|/**    * Information about peers that have reported a node as being slow.    * Each outer map entry is a map of (DatanodeId) {@literal ->} (timestamp),    * mapping reporting nodes to the timestamp of the last report from    * that node.    *    * DatanodeId could be the DataNodeId or its address. We    * don't care as long as the caller uses it consistently.    *    * Stale reports are not evicted proactively and can potentially    * hang around forever.    */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
DECL|field|allReports
name|allReports
decl_stmt|;
DECL|method|SlowPeerTracker (Configuration conf, Timer timer)
specifier|public
name|SlowPeerTracker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Timer
name|timer
parameter_list|)
block|{
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
name|this
operator|.
name|allReports
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|reportValidityMs
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_OUTLIERS_REPORT_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_OUTLIERS_REPORT_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|*
literal|3
expr_stmt|;
block|}
comment|/**    * Add a new report. DatanodeIds can be the DataNodeIds or addresses    * We don't care as long as the caller is consistent.    *    * @param reportingNode DataNodeId of the node reporting on its peer.    * @param slowNode DataNodeId of the peer suspected to be slow.    */
DECL|method|addReport (String slowNode, String reportingNode)
specifier|public
name|void
name|addReport
parameter_list|(
name|String
name|slowNode
parameter_list|,
name|String
name|reportingNode
parameter_list|)
block|{
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nodeEntries
init|=
name|allReports
operator|.
name|get
argument_list|(
name|slowNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeEntries
operator|==
literal|null
condition|)
block|{
comment|// putIfAbsent guards against multiple writers.
name|allReports
operator|.
name|putIfAbsent
argument_list|(
name|slowNode
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|nodeEntries
operator|=
name|allReports
operator|.
name|get
argument_list|(
name|slowNode
argument_list|)
expr_stmt|;
block|}
comment|// Replace the existing entry from this node, if any.
name|nodeEntries
operator|.
name|put
argument_list|(
name|reportingNode
argument_list|,
name|timer
operator|.
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Retrieve the non-expired reports that mark a given DataNode    * as slow. Stale reports are excluded.    *    * @param slowNode target node Id.    * @return set of reports which implicate the target node as being slow.    */
DECL|method|getReportsForNode (String slowNode)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getReportsForNode
parameter_list|(
name|String
name|slowNode
parameter_list|)
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nodeEntries
init|=
name|allReports
operator|.
name|get
argument_list|(
name|slowNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeEntries
operator|==
literal|null
operator|||
name|nodeEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
return|return
name|filterNodeReports
argument_list|(
name|nodeEntries
argument_list|,
name|timer
operator|.
name|monotonicNow
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Retrieve all reports for all nodes. Stale reports are excluded.    *    * @return map from SlowNodeId {@literal ->} (set of nodes reporting peers).    */
DECL|method|getReportsForAllDataNodes ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|getReportsForAllDataNodes
parameter_list|()
block|{
if|if
condition|(
name|allReports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|allNodesValidReports
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|timer
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|allReports
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|validReports
init|=
name|filterNodeReports
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|now
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validReports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|allNodesValidReports
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|validReports
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allNodesValidReports
return|;
block|}
comment|/**    * Filter the given reports to return just the valid ones.    *    * @param reports    * @param now    * @return    */
DECL|method|filterNodeReports ( ConcurrentMap<String, Long> reports, long now)
specifier|private
name|SortedSet
argument_list|<
name|String
argument_list|>
name|filterNodeReports
parameter_list|(
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|reports
parameter_list|,
name|long
name|now
parameter_list|)
block|{
specifier|final
name|SortedSet
argument_list|<
name|String
argument_list|>
name|validReports
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|reports
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|now
operator|-
name|entry
operator|.
name|getValue
argument_list|()
operator|<
name|reportValidityMs
condition|)
block|{
name|validReports
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|validReports
return|;
block|}
comment|/**    * Retrieve all valid reports as a JSON string.    * @return serialized representation of valid reports. null if    *         serialization failed.    */
DECL|method|getJson ()
specifier|public
name|String
name|getJson
parameter_list|()
block|{
name|Collection
argument_list|<
name|ReportForJson
argument_list|>
name|validReports
init|=
name|getJsonReports
argument_list|(
name|MAX_NODES_TO_REPORT
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|WRITER
operator|.
name|writeValueAsString
argument_list|(
name|validReports
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
comment|// Failed to serialize. Don't log the exception call stack.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to serialize statistics"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * This structure is a thin wrapper over reports to make Json    * [de]serialization easy.    */
DECL|class|ReportForJson
specifier|public
specifier|static
class|class
name|ReportForJson
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"SlowNode"
argument_list|)
DECL|field|slowNode
specifier|final
specifier|private
name|String
name|slowNode
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"ReportingNodes"
argument_list|)
DECL|field|reportingNodes
specifier|final
specifier|private
name|SortedSet
argument_list|<
name|String
argument_list|>
name|reportingNodes
decl_stmt|;
DECL|method|ReportForJson ( @sonPropertyR) String slowNode, @JsonProperty(R) SortedSet<String> reportingNodes)
specifier|public
name|ReportForJson
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"SlowNode"
argument_list|)
name|String
name|slowNode
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"ReportingNodes"
argument_list|)
name|SortedSet
argument_list|<
name|String
argument_list|>
name|reportingNodes
parameter_list|)
block|{
name|this
operator|.
name|slowNode
operator|=
name|slowNode
expr_stmt|;
name|this
operator|.
name|reportingNodes
operator|=
name|reportingNodes
expr_stmt|;
block|}
DECL|method|getSlowNode ()
specifier|public
name|String
name|getSlowNode
parameter_list|()
block|{
return|return
name|slowNode
return|;
block|}
DECL|method|getReportingNodes ()
specifier|public
name|SortedSet
argument_list|<
name|String
argument_list|>
name|getReportingNodes
parameter_list|()
block|{
return|return
name|reportingNodes
return|;
block|}
block|}
comment|/**    * Retrieve reports in a structure for generating JSON, limiting the    * output to the top numNodes nodes i.e nodes with the most reports.    * @param numNodes number of nodes to return. This is to limit the    *                 size of the generated JSON.    */
DECL|method|getJsonReports (int numNodes)
specifier|private
name|Collection
argument_list|<
name|ReportForJson
argument_list|>
name|getJsonReports
parameter_list|(
name|int
name|numNodes
parameter_list|)
block|{
if|if
condition|(
name|allReports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|final
name|PriorityQueue
argument_list|<
name|ReportForJson
argument_list|>
name|topNReports
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
name|allReports
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReportForJson
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReportForJson
name|o1
parameter_list|,
name|ReportForJson
name|o2
parameter_list|)
block|{
return|return
name|Ints
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|reportingNodes
operator|.
name|size
argument_list|()
argument_list|,
name|o2
operator|.
name|reportingNodes
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|timer
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|allReports
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|validReports
init|=
name|filterNodeReports
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|now
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validReports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|topNReports
operator|.
name|size
argument_list|()
operator|<
name|numNodes
condition|)
block|{
name|topNReports
operator|.
name|add
argument_list|(
operator|new
name|ReportForJson
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|validReports
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topNReports
operator|.
name|peek
argument_list|()
operator|.
name|getReportingNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|validReports
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Remove the lowest element
name|topNReports
operator|.
name|poll
argument_list|()
expr_stmt|;
name|topNReports
operator|.
name|add
argument_list|(
operator|new
name|ReportForJson
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|validReports
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|topNReports
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getReportValidityMs ()
name|long
name|getReportValidityMs
parameter_list|()
block|{
return|return
name|reportValidityMs
return|;
block|}
block|}
end_class

end_unit

