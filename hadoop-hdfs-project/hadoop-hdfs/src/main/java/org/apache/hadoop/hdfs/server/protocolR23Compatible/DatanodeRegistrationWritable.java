begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|DatanodeIDWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ExportedBlockKeysWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|StorageInfoWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_comment
comment|/**   * DatanodeRegistration class contains all information the name-node needs  * to identify and verify a data-node when it contacts the name-node.  * This information is sent by data-node with each communication request.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DatanodeRegistrationWritable
specifier|public
class|class
name|DatanodeRegistrationWritable
implements|implements
name|Writable
block|{
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|DatanodeRegistrationWritable
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|DatanodeRegistrationWritable
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|field|datanodeId
specifier|private
name|DatanodeIDWritable
name|datanodeId
decl_stmt|;
DECL|field|storageInfo
specifier|private
name|StorageInfoWritable
name|storageInfo
decl_stmt|;
DECL|field|exportedKeys
specifier|private
name|ExportedBlockKeysWritable
name|exportedKeys
decl_stmt|;
comment|/**    * Default constructor.    */
DECL|method|DatanodeRegistrationWritable ()
specifier|public
name|DatanodeRegistrationWritable
parameter_list|()
block|{
name|this
argument_list|(
literal|""
argument_list|,
operator|new
name|StorageInfo
argument_list|()
argument_list|,
operator|new
name|ExportedBlockKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create DatanodeRegistration    */
DECL|method|DatanodeRegistrationWritable (String nodeName, StorageInfo info, ExportedBlockKeys keys)
specifier|public
name|DatanodeRegistrationWritable
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|StorageInfo
name|info
parameter_list|,
name|ExportedBlockKeys
name|keys
parameter_list|)
block|{
name|this
operator|.
name|datanodeId
operator|=
operator|new
name|DatanodeIDWritable
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|this
operator|.
name|storageInfo
operator|=
name|StorageInfoWritable
operator|.
name|convert
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|exportedKeys
operator|=
name|ExportedBlockKeysWritable
operator|.
name|convert
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
comment|/////////////////////////////////////////////////
comment|// Writable
comment|/////////////////////////////////////////////////
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|datanodeId
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//TODO: move it to DatanodeID once HADOOP-2797 has been committed
name|out
operator|.
name|writeShort
argument_list|(
name|datanodeId
operator|.
name|ipcPort
argument_list|)
expr_stmt|;
name|storageInfo
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|exportedKeys
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|datanodeId
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|//TODO: move it to DatanodeID once HADOOP-2797 has been committed
name|datanodeId
operator|.
name|ipcPort
operator|=
name|in
operator|.
name|readShort
argument_list|()
operator|&
literal|0x0000ffff
expr_stmt|;
name|storageInfo
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|exportedKeys
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|convert ()
specifier|public
name|DatanodeRegistration
name|convert
parameter_list|()
block|{
name|DatanodeRegistration
name|dnReg
init|=
operator|new
name|DatanodeRegistration
argument_list|(
name|datanodeId
operator|.
name|name
argument_list|,
name|storageInfo
operator|.
name|convert
argument_list|()
argument_list|,
name|exportedKeys
operator|.
name|convert
argument_list|()
argument_list|)
decl_stmt|;
name|dnReg
operator|.
name|setIpcPort
argument_list|(
name|datanodeId
operator|.
name|ipcPort
argument_list|)
expr_stmt|;
return|return
name|dnReg
return|;
block|}
DECL|method|convert (DatanodeRegistration dnReg)
specifier|public
specifier|static
name|DatanodeRegistrationWritable
name|convert
parameter_list|(
name|DatanodeRegistration
name|dnReg
parameter_list|)
block|{
if|if
condition|(
name|dnReg
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DatanodeRegistrationWritable
name|ret
init|=
operator|new
name|DatanodeRegistrationWritable
argument_list|(
name|dnReg
operator|.
name|getName
argument_list|()
argument_list|,
name|dnReg
operator|.
name|storageInfo
argument_list|,
name|dnReg
operator|.
name|exportedKeys
argument_list|)
decl_stmt|;
name|ret
operator|.
name|datanodeId
operator|.
name|ipcPort
operator|=
name|dnReg
operator|.
name|ipcPort
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

