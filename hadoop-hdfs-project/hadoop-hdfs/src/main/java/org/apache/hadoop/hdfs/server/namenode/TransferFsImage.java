begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageErrorReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Canceler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|DataTransferThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|URLConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|io
operator|.
name|EofException
import|;
end_import

begin_comment
comment|/**  * This class provides fetching a specified file from the NameNode.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TransferFsImage
specifier|public
class|class
name|TransferFsImage
block|{
DECL|enum|TransferResult
specifier|public
enum|enum
name|TransferResult
block|{
DECL|enumConstant|SUCCESS
name|SUCCESS
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|,
literal|false
argument_list|)
block|,
DECL|enumConstant|AUTHENTICATION_FAILURE
name|AUTHENTICATION_FAILURE
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|true
argument_list|)
block|,
DECL|enumConstant|NOT_ACTIVE_NAMENODE_FAILURE
name|NOT_ACTIVE_NAMENODE_FAILURE
argument_list|(
name|HttpServletResponse
operator|.
name|SC_EXPECTATION_FAILED
argument_list|,
literal|false
argument_list|)
block|,
DECL|enumConstant|OLD_TRANSACTION_ID_FAILURE
name|OLD_TRANSACTION_ID_FAILURE
argument_list|(
name|HttpServletResponse
operator|.
name|SC_CONFLICT
argument_list|,
literal|false
argument_list|)
block|,
DECL|enumConstant|UNEXPECTED_FAILURE
name|UNEXPECTED_FAILURE
argument_list|(
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
block|;
DECL|field|response
specifier|private
specifier|final
name|int
name|response
decl_stmt|;
DECL|field|shouldReThrowException
specifier|private
specifier|final
name|boolean
name|shouldReThrowException
decl_stmt|;
DECL|method|TransferResult (int response, boolean rethrow)
specifier|private
name|TransferResult
parameter_list|(
name|int
name|response
parameter_list|,
name|boolean
name|rethrow
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|shouldReThrowException
operator|=
name|rethrow
expr_stmt|;
block|}
DECL|method|getResultForCode (int code)
specifier|public
specifier|static
name|TransferResult
name|getResultForCode
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|TransferResult
name|ret
init|=
name|UNEXPECTED_FAILURE
decl_stmt|;
for|for
control|(
name|TransferResult
name|result
range|:
name|TransferResult
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|result
operator|.
name|response
operator|==
name|code
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
DECL|field|CONTENT_LENGTH
specifier|public
specifier|final
specifier|static
name|String
name|CONTENT_LENGTH
init|=
literal|"Content-Length"
decl_stmt|;
DECL|field|FILE_LENGTH
specifier|public
specifier|final
specifier|static
name|String
name|FILE_LENGTH
init|=
literal|"File-Length"
decl_stmt|;
DECL|field|MD5_HEADER
specifier|public
specifier|final
specifier|static
name|String
name|MD5_HEADER
init|=
literal|"X-MD5-Digest"
decl_stmt|;
DECL|field|CONTENT_TYPE
specifier|private
specifier|final
specifier|static
name|String
name|CONTENT_TYPE
init|=
literal|"Content-Type"
decl_stmt|;
DECL|field|CONTENT_TRANSFER_ENCODING
specifier|private
specifier|final
specifier|static
name|String
name|CONTENT_TRANSFER_ENCODING
init|=
literal|"Content-Transfer-Encoding"
decl_stmt|;
DECL|field|IO_FILE_BUFFER_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|IO_FILE_BUFFER_SIZE
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|timeout
specifier|static
name|int
name|timeout
init|=
literal|0
decl_stmt|;
DECL|field|connectionFactory
specifier|private
specifier|static
specifier|final
name|URLConnectionFactory
name|connectionFactory
decl_stmt|;
DECL|field|isSpnegoEnabled
specifier|private
specifier|static
specifier|final
name|boolean
name|isSpnegoEnabled
decl_stmt|;
static|static
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|connectionFactory
operator|=
name|URLConnectionFactory
operator|.
name|newDefaultURLConnectionFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|isSpnegoEnabled
operator|=
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
expr_stmt|;
name|IO_FILE_BUFFER_SIZE
operator|=
name|DFSUtilClient
operator|.
name|getIoFileBufferSize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TransferFsImage
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|downloadMostRecentImageToDirectory (URL infoServer, File dir)
specifier|public
specifier|static
name|void
name|downloadMostRecentImageToDirectory
parameter_list|(
name|URL
name|infoServer
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileId
init|=
name|ImageServlet
operator|.
name|getParamStringForMostRecentImage
argument_list|()
decl_stmt|;
name|getFileClient
argument_list|(
name|infoServer
argument_list|,
name|fileId
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|dir
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|downloadImageToStorage (URL fsName, long imageTxId, Storage dstStorage, boolean needDigest, boolean isBootstrapStandby)
specifier|public
specifier|static
name|MD5Hash
name|downloadImageToStorage
parameter_list|(
name|URL
name|fsName
parameter_list|,
name|long
name|imageTxId
parameter_list|,
name|Storage
name|dstStorage
parameter_list|,
name|boolean
name|needDigest
parameter_list|,
name|boolean
name|isBootstrapStandby
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileid
init|=
name|ImageServlet
operator|.
name|getParamStringForImage
argument_list|(
literal|null
argument_list|,
name|imageTxId
argument_list|,
name|dstStorage
argument_list|,
name|isBootstrapStandby
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|NNStorage
operator|.
name|getCheckpointImageFileName
argument_list|(
name|imageTxId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dstFiles
init|=
name|dstStorage
operator|.
name|getFiles
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No targets in destination storage!"
argument_list|)
throw|;
block|}
name|MD5Hash
name|hash
init|=
name|getFileClient
argument_list|(
name|fsName
argument_list|,
name|fileid
argument_list|,
name|dstFiles
argument_list|,
name|dstStorage
argument_list|,
name|needDigest
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Downloaded file "
operator|+
name|dstFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|" size "
operator|+
name|dstFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|()
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
DECL|method|handleUploadImageRequest (HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler)
specifier|static
name|MD5Hash
name|handleUploadImageRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|long
name|imageTxId
parameter_list|,
name|Storage
name|dstStorage
parameter_list|,
name|InputStream
name|stream
parameter_list|,
name|long
name|advertisedSize
parameter_list|,
name|DataTransferThrottler
name|throttler
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|NNStorage
operator|.
name|getCheckpointImageFileName
argument_list|(
name|imageTxId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dstFiles
init|=
name|dstStorage
operator|.
name|getFiles
argument_list|(
name|NameNodeDirType
operator|.
name|IMAGE
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No targets in destination storage!"
argument_list|)
throw|;
block|}
name|MD5Hash
name|advertisedDigest
init|=
name|parseMD5Header
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|MD5Hash
name|hash
init|=
name|receiveFile
argument_list|(
name|fileName
argument_list|,
name|dstFiles
argument_list|,
name|dstStorage
argument_list|,
literal|true
argument_list|,
name|advertisedSize
argument_list|,
name|advertisedDigest
argument_list|,
name|fileName
argument_list|,
name|stream
argument_list|,
name|throttler
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Downloaded file "
operator|+
name|dstFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|" size "
operator|+
name|dstFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|()
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
DECL|method|downloadEditsToStorage (URL fsName, RemoteEditLog log, NNStorage dstStorage)
specifier|static
name|void
name|downloadEditsToStorage
parameter_list|(
name|URL
name|fsName
parameter_list|,
name|RemoteEditLog
name|log
parameter_list|,
name|NNStorage
name|dstStorage
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|log
operator|.
name|getStartTxId
argument_list|()
operator|>
literal|0
operator|&&
name|log
operator|.
name|getEndTxId
argument_list|()
operator|>
literal|0
operator|:
literal|"bad log: "
operator|+
name|log
assert|;
name|String
name|fileid
init|=
name|ImageServlet
operator|.
name|getParamStringForLog
argument_list|(
name|log
argument_list|,
name|dstStorage
argument_list|)
decl_stmt|;
name|String
name|finalFileName
init|=
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
name|log
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|log
operator|.
name|getEndTxId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|finalFiles
init|=
name|dstStorage
operator|.
name|getFiles
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|,
name|finalFileName
argument_list|)
decl_stmt|;
assert|assert
operator|!
name|finalFiles
operator|.
name|isEmpty
argument_list|()
operator|:
literal|"No checkpoint targets."
assert|;
for|for
control|(
name|File
name|f
range|:
name|finalFiles
control|)
block|{
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|FileUtil
operator|.
name|canRead
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping download of remote edit log "
operator|+
name|log
operator|+
literal|" since it already is stored locally at "
operator|+
name|f
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dest file: "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|long
name|milliTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|String
name|tmpFileName
init|=
name|NNStorage
operator|.
name|getTemporaryEditsFileName
argument_list|(
name|log
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|log
operator|.
name|getEndTxId
argument_list|()
argument_list|,
name|milliTime
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|tmpFiles
init|=
name|dstStorage
operator|.
name|getFiles
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|,
name|tmpFileName
argument_list|)
decl_stmt|;
name|getFileClient
argument_list|(
name|fsName
argument_list|,
name|fileid
argument_list|,
name|tmpFiles
argument_list|,
name|dstStorage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Downloaded file "
operator|+
name|tmpFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|+
literal|" size "
operator|+
name|finalFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|()
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
name|CheckpointFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|beforeEditsRename
argument_list|()
expr_stmt|;
for|for
control|(
name|StorageDirectory
name|sd
range|:
name|dstStorage
operator|.
name|dirIterable
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|)
control|)
block|{
name|File
name|tmpFile
init|=
name|NNStorage
operator|.
name|getTemporaryEditsFile
argument_list|(
name|sd
argument_list|,
name|log
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|log
operator|.
name|getEndTxId
argument_list|()
argument_list|,
name|milliTime
argument_list|)
decl_stmt|;
name|File
name|finalizedFile
init|=
name|NNStorage
operator|.
name|getFinalizedEditsFile
argument_list|(
name|sd
argument_list|,
name|log
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|log
operator|.
name|getEndTxId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming "
operator|+
name|tmpFile
operator|+
literal|" to "
operator|+
name|finalizedFile
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
name|tmpFile
operator|.
name|renameTo
argument_list|(
name|finalizedFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to rename edits file from "
operator|+
name|tmpFile
operator|+
literal|" to "
operator|+
name|finalizedFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Requests that the NameNode download an image from this node.    *    * @param fsName the http address for the remote NN    * @param conf Configuration    * @param storage the storage directory to transfer the image from    * @param nnf the NameNodeFile type of the image    * @param txid the transaction ID of the image to be uploaded    * @throws IOException if there is an I/O error    */
DECL|method|uploadImageFromStorage (URL fsName, Configuration conf, NNStorage storage, NameNodeFile nnf, long txid)
specifier|public
specifier|static
name|TransferResult
name|uploadImageFromStorage
parameter_list|(
name|URL
name|fsName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|NNStorage
name|storage
parameter_list|,
name|NameNodeFile
name|nnf
parameter_list|,
name|long
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|uploadImageFromStorage
argument_list|(
name|fsName
argument_list|,
name|conf
argument_list|,
name|storage
argument_list|,
name|nnf
argument_list|,
name|txid
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Requests that the NameNode download an image from this node.  Allows for    * optional external cancelation.    *    * @param fsName the http address for the remote NN    * @param conf Configuration    * @param storage the storage directory to transfer the image from    * @param nnf the NameNodeFile type of the image    * @param txid the transaction ID of the image to be uploaded    * @param canceler optional canceler to check for abort of upload    * @throws IOException if there is an I/O error or cancellation    */
DECL|method|uploadImageFromStorage (URL fsName, Configuration conf, NNStorage storage, NameNodeFile nnf, long txid, Canceler canceler)
specifier|public
specifier|static
name|TransferResult
name|uploadImageFromStorage
parameter_list|(
name|URL
name|fsName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|NNStorage
name|storage
parameter_list|,
name|NameNodeFile
name|nnf
parameter_list|,
name|long
name|txid
parameter_list|,
name|Canceler
name|canceler
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|fsName
argument_list|,
name|ImageServlet
operator|.
name|PATH_SPEC
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
try|try
block|{
name|uploadImage
argument_list|(
name|url
argument_list|,
name|conf
argument_list|,
name|storage
argument_list|,
name|nnf
argument_list|,
name|txid
argument_list|,
name|canceler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpPutFailedException
name|e
parameter_list|)
block|{
comment|// translate the error code to a result, which is a bit more obvious in usage
name|TransferResult
name|result
init|=
name|TransferResult
operator|.
name|getResultForCode
argument_list|(
name|e
operator|.
name|getResponseCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|shouldReThrowException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
name|result
return|;
block|}
name|double
name|xferSec
init|=
name|Math
operator|.
name|max
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
operator|)
operator|/
literal|1000.0
argument_list|,
literal|0.001
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Uploaded image with txid "
operator|+
name|txid
operator|+
literal|" to namenode at "
operator|+
name|fsName
operator|+
literal|" in "
operator|+
name|xferSec
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
return|return
name|TransferResult
operator|.
name|SUCCESS
return|;
block|}
comment|/*    * Uploads the imagefile using HTTP PUT method    */
DECL|method|uploadImage (URL url, Configuration conf, NNStorage storage, NameNodeFile nnf, long txId, Canceler canceler)
specifier|private
specifier|static
name|void
name|uploadImage
parameter_list|(
name|URL
name|url
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|NNStorage
name|storage
parameter_list|,
name|NameNodeFile
name|nnf
parameter_list|,
name|long
name|txId
parameter_list|,
name|Canceler
name|canceler
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|imageFile
init|=
name|storage
operator|.
name|findImageFile
argument_list|(
name|nnf
argument_list|,
name|txId
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not find image with txid "
operator|+
name|txId
argument_list|)
throw|;
block|}
name|HttpURLConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URIBuilder
name|uriBuilder
init|=
operator|new
name|URIBuilder
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
comment|// write all params for image upload request as query itself.
comment|// Request body contains the image to be uploaded.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|ImageServlet
operator|.
name|getParamsForPutImage
argument_list|(
name|storage
argument_list|,
name|txId
argument_list|,
name|imageFile
operator|.
name|length
argument_list|()
argument_list|,
name|nnf
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|uriBuilder
operator|.
name|addParameter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|URL
name|urlWithParams
init|=
name|uriBuilder
operator|.
name|build
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|connection
operator|=
operator|(
name|HttpURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
name|urlWithParams
argument_list|,
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the request to PUT
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|chunkSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_TRANSFER_CHUNKSIZE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_TRANSFER_CHUNKSIZE_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageFile
operator|.
name|length
argument_list|()
operator|>
name|chunkSize
condition|)
block|{
comment|// using chunked streaming mode to support upload of 2GB+ files and to
comment|// avoid internal buffering.
comment|// this mode should be used only if more than chunkSize data is present
comment|// to upload. otherwise upload may not happen sometimes.
name|connection
operator|.
name|setChunkedStreamingMode
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
block|}
name|setTimeout
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// set headers for verification
name|ImageServlet
operator|.
name|setVerificationHeadersForPut
argument_list|(
name|connection
argument_list|,
name|imageFile
argument_list|)
expr_stmt|;
comment|// Write the file to output stream.
name|writeFileToPutRequest
argument_list|(
name|conf
argument_list|,
name|connection
argument_list|,
name|imageFile
argument_list|,
name|canceler
argument_list|)
expr_stmt|;
name|int
name|responseCode
init|=
name|connection
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseCode
operator|!=
name|HttpURLConnection
operator|.
name|HTTP_OK
condition|)
block|{
throw|throw
operator|new
name|HttpPutFailedException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Image uploading failed, status: %d, url: %s, message: %s"
argument_list|,
name|responseCode
argument_list|,
name|urlWithParams
argument_list|,
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
argument_list|,
name|responseCode
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeFileToPutRequest (Configuration conf, HttpURLConnection connection, File imageFile, Canceler canceler)
specifier|private
specifier|static
name|void
name|writeFileToPutRequest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HttpURLConnection
name|connection
parameter_list|,
name|File
name|imageFile
parameter_list|,
name|Canceler
name|canceler
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|connection
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TYPE
argument_list|,
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setRequestProperty
argument_list|(
name|CONTENT_TRANSFER_ENCODING
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
name|OutputStream
name|output
init|=
name|connection
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|imageFile
argument_list|)
decl_stmt|;
try|try
block|{
name|copyFileToStream
argument_list|(
name|output
argument_list|,
name|imageFile
argument_list|,
name|input
argument_list|,
name|ImageServlet
operator|.
name|getThrottler
argument_list|(
name|conf
argument_list|)
argument_list|,
name|canceler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A server-side method to respond to a getfile http request    * Copies the contents of the local file into the output stream.    */
DECL|method|copyFileToStream (OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler)
specifier|public
specifier|static
name|void
name|copyFileToStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|File
name|localfile
parameter_list|,
name|FileInputStream
name|infile
parameter_list|,
name|DataTransferThrottler
name|throttler
parameter_list|)
throws|throws
name|IOException
block|{
name|copyFileToStream
argument_list|(
name|out
argument_list|,
name|localfile
argument_list|,
name|infile
argument_list|,
name|throttler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|copyFileToStream (OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler)
specifier|private
specifier|static
name|void
name|copyFileToStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|File
name|localfile
parameter_list|,
name|FileInputStream
name|infile
parameter_list|,
name|DataTransferThrottler
name|throttler
parameter_list|,
name|Canceler
name|canceler
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
name|IO_FILE_BUFFER_SIZE
index|]
decl_stmt|;
try|try
block|{
name|CheckpointFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|aboutToSendFile
argument_list|(
name|localfile
argument_list|)
expr_stmt|;
if|if
condition|(
name|CheckpointFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|shouldSendShortFile
argument_list|(
name|localfile
argument_list|)
condition|)
block|{
comment|// Test sending image shorter than localfile
name|long
name|len
init|=
name|localfile
operator|.
name|length
argument_list|()
decl_stmt|;
name|buf
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|len
operator|/
literal|2
argument_list|,
name|IO_FILE_BUFFER_SIZE
argument_list|)
index|]
expr_stmt|;
comment|// This will read at most half of the image
comment|// and the rest of the image will be sent over the wire
name|infile
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|int
name|num
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|num
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|canceler
operator|!=
literal|null
operator|&&
name|canceler
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SaveNamespaceCancelledException
argument_list|(
name|canceler
operator|.
name|getCancellationReason
argument_list|()
argument_list|)
throw|;
block|}
name|num
operator|=
name|infile
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|num
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|CheckpointFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|shouldCorruptAByte
argument_list|(
name|localfile
argument_list|)
condition|)
block|{
comment|// Simulate a corrupted byte on the wire
name|LOG
operator|.
name|warn
argument_list|(
literal|"SIMULATING A CORRUPT BYTE IN IMAGE TRANSFER!"
argument_list|)
expr_stmt|;
name|buf
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|num
argument_list|)
expr_stmt|;
if|if
condition|(
name|throttler
operator|!=
literal|null
condition|)
block|{
name|throttler
operator|.
name|throttle
argument_list|(
name|num
argument_list|,
name|canceler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EofException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Connection closed by client"
argument_list|)
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
comment|// so we don't close in the finally
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Client-side Method to fetch file from a server    * Copies the response from the URL to a list of local files.    * @param dstStorage if an error occurs writing to one of the files,    *                   this storage object will be notified.     * @Return a digest of the received file if getChecksum is true    */
DECL|method|getFileClient (URL infoServer, String queryString, List<File> localPaths, Storage dstStorage, boolean getChecksum)
specifier|static
name|MD5Hash
name|getFileClient
parameter_list|(
name|URL
name|infoServer
parameter_list|,
name|String
name|queryString
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|localPaths
parameter_list|,
name|Storage
name|dstStorage
parameter_list|,
name|boolean
name|getChecksum
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|infoServer
argument_list|,
name|ImageServlet
operator|.
name|PATH_SPEC
operator|+
literal|"?"
operator|+
name|queryString
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Opening connection to "
operator|+
name|url
argument_list|)
expr_stmt|;
return|return
name|doGetUrl
argument_list|(
name|url
argument_list|,
name|localPaths
argument_list|,
name|dstStorage
argument_list|,
name|getChecksum
argument_list|)
return|;
block|}
DECL|method|doGetUrl (URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum)
specifier|public
specifier|static
name|MD5Hash
name|doGetUrl
parameter_list|(
name|URL
name|url
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|localPaths
parameter_list|,
name|Storage
name|dstStorage
parameter_list|,
name|boolean
name|getChecksum
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connection
decl_stmt|;
try|try
block|{
name|connection
operator|=
operator|(
name|HttpURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|isSpnegoEnabled
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|setTimeout
argument_list|(
name|connection
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
name|HttpURLConnection
operator|.
name|HTTP_OK
condition|)
block|{
throw|throw
operator|new
name|HttpGetFailedException
argument_list|(
literal|"Image transfer servlet at "
operator|+
name|url
operator|+
literal|" failed with status code "
operator|+
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|"\nResponse message:\n"
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|,
name|connection
argument_list|)
throw|;
block|}
name|long
name|advertisedSize
decl_stmt|;
name|String
name|contentLength
init|=
name|connection
operator|.
name|getHeaderField
argument_list|(
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentLength
operator|!=
literal|null
condition|)
block|{
name|advertisedSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|contentLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|CONTENT_LENGTH
operator|+
literal|" header is not provided "
operator|+
literal|"by the namenode when trying to fetch "
operator|+
name|url
argument_list|)
throw|;
block|}
name|MD5Hash
name|advertisedDigest
init|=
name|parseMD5Header
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|String
name|fsImageName
init|=
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ImageServlet
operator|.
name|HADOOP_IMAGE_EDITS_HEADER
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
return|return
name|receiveFile
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|localPaths
argument_list|,
name|dstStorage
argument_list|,
name|getChecksum
argument_list|,
name|advertisedSize
argument_list|,
name|advertisedDigest
argument_list|,
name|fsImageName
argument_list|,
name|stream
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|setTimeout (HttpURLConnection connection)
specifier|private
specifier|static
name|void
name|setTimeout
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
if|if
condition|(
name|timeout
operator|<=
literal|0
condition|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|timeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_TRANSFER_TIMEOUT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_IMAGE_TRANSFER_TIMEOUT_DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Image Transfer timeout configured to "
operator|+
name|timeout
operator|+
literal|" milliseconds"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|connection
operator|.
name|setConnectTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setReadTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|receiveFile (String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler)
specifier|private
specifier|static
name|MD5Hash
name|receiveFile
parameter_list|(
name|String
name|url
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|localPaths
parameter_list|,
name|Storage
name|dstStorage
parameter_list|,
name|boolean
name|getChecksum
parameter_list|,
name|long
name|advertisedSize
parameter_list|,
name|MD5Hash
name|advertisedDigest
parameter_list|,
name|String
name|fsImageName
parameter_list|,
name|InputStream
name|stream
parameter_list|,
name|DataTransferThrottler
name|throttler
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FileOutputStream
argument_list|,
name|File
argument_list|>
name|streamPathMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|xferStats
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|double
name|xferCombined
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|localPaths
operator|!=
literal|null
condition|)
block|{
comment|// If the local paths refer to directories, use the server-provided header
comment|// as the filename within that directory
name|List
argument_list|<
name|File
argument_list|>
name|newLocalPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|localPath
range|:
name|localPaths
control|)
block|{
if|if
condition|(
name|localPath
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|fsImageName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No filename header provided by server"
argument_list|)
throw|;
block|}
name|newLocalPaths
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|localPath
argument_list|,
name|fsImageName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newLocalPaths
operator|.
name|add
argument_list|(
name|localPath
argument_list|)
expr_stmt|;
block|}
block|}
name|localPaths
operator|=
name|newLocalPaths
expr_stmt|;
block|}
name|long
name|received
init|=
literal|0
decl_stmt|;
name|MessageDigest
name|digester
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getChecksum
condition|)
block|{
name|digester
operator|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
expr_stmt|;
name|stream
operator|=
operator|new
name|DigestInputStream
argument_list|(
name|stream
argument_list|,
name|digester
argument_list|)
expr_stmt|;
block|}
name|boolean
name|finishedReceiving
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|FileOutputStream
argument_list|>
name|outputStreams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|localPaths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|f
range|:
name|localPaths
control|)
block|{
try|try
block|{
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Overwriting existing file "
operator|+
name|f
operator|+
literal|" with file downloaded from "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|outputStreams
operator|.
name|add
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|streamPathMap
operator|.
name|put
argument_list|(
name|fos
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to download file "
operator|+
name|f
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
comment|// This will be null if we're downloading the fsimage to a file
comment|// outside of an NNStorage directory.
if|if
condition|(
name|dstStorage
operator|!=
literal|null
operator|&&
operator|(
name|dstStorage
operator|instanceof
name|StorageErrorReporter
operator|)
condition|)
block|{
operator|(
operator|(
name|StorageErrorReporter
operator|)
name|dstStorage
operator|)
operator|.
name|reportErrorOnFile
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|outputStreams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to download to any storage directory"
argument_list|)
throw|;
block|}
block|}
name|int
name|num
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|IO_FILE_BUFFER_SIZE
index|]
decl_stmt|;
while|while
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|num
operator|=
name|stream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|received
operator|+=
name|num
expr_stmt|;
for|for
control|(
name|FileOutputStream
name|fos
range|:
name|outputStreams
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|throttler
operator|!=
literal|null
condition|)
block|{
name|throttler
operator|.
name|throttle
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|finishedReceiving
operator|=
literal|true
expr_stmt|;
name|double
name|xferSec
init|=
name|Math
operator|.
name|max
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
operator|)
operator|/
literal|1000.0
argument_list|,
literal|0.001
argument_list|)
decl_stmt|;
name|long
name|xferKb
init|=
name|received
operator|/
literal|1024
decl_stmt|;
name|xferCombined
operator|+=
name|xferSec
expr_stmt|;
name|xferStats
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" The fsimage download took %.2fs at %.2f KB/s."
argument_list|,
name|xferSec
argument_list|,
name|xferKb
operator|/
name|xferSec
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|FileOutputStream
name|fos
range|:
name|outputStreams
control|)
block|{
name|long
name|flushStartTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|fos
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|double
name|writeSec
init|=
name|Math
operator|.
name|max
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|flushStartTime
operator|-
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
operator|)
operator|/
literal|1000.0
argument_list|,
literal|0.001
argument_list|)
decl_stmt|;
name|xferCombined
operator|+=
name|writeSec
expr_stmt|;
name|xferStats
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" Synchronous (fsync) write to disk of "
operator|+
name|streamPathMap
operator|.
name|get
argument_list|(
name|fos
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" took %.2fs."
argument_list|,
name|writeSec
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Something went wrong and did not finish reading.
comment|// Remove the temporary files.
if|if
condition|(
operator|!
name|finishedReceiving
condition|)
block|{
name|deleteTmpFiles
argument_list|(
name|localPaths
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|finishedReceiving
operator|&&
name|received
operator|!=
name|advertisedSize
condition|)
block|{
comment|// only throw this exception if we think we read all of it on our end
comment|// -- otherwise a client-side IOException would be masked by this
comment|// exception that makes it look like a server-side problem!
name|deleteTmpFiles
argument_list|(
name|localPaths
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File "
operator|+
name|url
operator|+
literal|" received length "
operator|+
name|received
operator|+
literal|" is not of the advertised size "
operator|+
name|advertisedSize
argument_list|)
throw|;
block|}
block|}
name|xferStats
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Combined time for fsimage download and fsync "
operator|+
literal|"to all disks took %.2fs."
argument_list|,
name|xferCombined
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|xferStats
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|digester
operator|!=
literal|null
condition|)
block|{
name|MD5Hash
name|computedDigest
init|=
operator|new
name|MD5Hash
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|advertisedDigest
operator|!=
literal|null
operator|&&
operator|!
name|computedDigest
operator|.
name|equals
argument_list|(
name|advertisedDigest
argument_list|)
condition|)
block|{
name|deleteTmpFiles
argument_list|(
name|localPaths
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File "
operator|+
name|url
operator|+
literal|" computed digest "
operator|+
name|computedDigest
operator|+
literal|" does not match advertised digest "
operator|+
name|advertisedDigest
argument_list|)
throw|;
block|}
return|return
name|computedDigest
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|deleteTmpFiles (List<File> files)
specifier|private
specifier|static
name|void
name|deleteTmpFiles
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|)
block|{
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting temporary files: "
operator|+
name|files
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deleting "
operator|+
name|file
operator|+
literal|" has failed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseMD5Header (HttpURLConnection connection)
specifier|private
specifier|static
name|MD5Hash
name|parseMD5Header
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
name|String
name|header
init|=
name|connection
operator|.
name|getHeaderField
argument_list|(
name|MD5_HEADER
argument_list|)
decl_stmt|;
return|return
operator|(
name|header
operator|!=
literal|null
operator|)
condition|?
operator|new
name|MD5Hash
argument_list|(
name|header
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|parseMD5Header (HttpServletRequest request)
specifier|private
specifier|static
name|MD5Hash
name|parseMD5Header
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|header
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|MD5_HEADER
argument_list|)
decl_stmt|;
return|return
operator|(
name|header
operator|!=
literal|null
operator|)
condition|?
operator|new
name|MD5Hash
argument_list|(
name|header
argument_list|)
else|:
literal|null
return|;
block|}
DECL|class|HttpGetFailedException
specifier|public
specifier|static
class|class
name|HttpGetFailedException
extends|extends
name|IOException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|responseCode
specifier|private
specifier|final
name|int
name|responseCode
decl_stmt|;
DECL|method|HttpGetFailedException (String msg, HttpURLConnection connection)
name|HttpGetFailedException
parameter_list|(
name|String
name|msg
parameter_list|,
name|HttpURLConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|responseCode
operator|=
name|connection
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
block|}
DECL|method|getResponseCode ()
specifier|public
name|int
name|getResponseCode
parameter_list|()
block|{
return|return
name|responseCode
return|;
block|}
block|}
DECL|class|HttpPutFailedException
specifier|public
specifier|static
class|class
name|HttpPutFailedException
extends|extends
name|IOException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|responseCode
specifier|private
specifier|final
name|int
name|responseCode
decl_stmt|;
DECL|method|HttpPutFailedException (String msg, int responseCode)
name|HttpPutFailedException
parameter_list|(
name|String
name|msg
parameter_list|,
name|int
name|responseCode
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|responseCode
operator|=
name|responseCode
expr_stmt|;
block|}
DECL|method|getResponseCode ()
specifier|public
name|int
name|getResponseCode
parameter_list|()
block|{
return|return
name|responseCode
return|;
block|}
block|}
block|}
end_class

end_unit

