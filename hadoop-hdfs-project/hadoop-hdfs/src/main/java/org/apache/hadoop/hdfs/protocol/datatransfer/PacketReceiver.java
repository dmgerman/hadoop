begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|DirectBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_comment
comment|/**  * Class to handle reading packets one-at-a-time from the wire.  * These packets are used both for reading and writing data to/from  * DataNodes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|PacketReceiver
specifier|public
class|class
name|PacketReceiver
implements|implements
name|Closeable
block|{
comment|/**    * The max size of any single packet. This prevents OOMEs when    * invalid data is sent.    */
DECL|field|MAX_PACKET_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_PACKET_SIZE
init|=
literal|16
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PacketReceiver
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|bufferPool
specifier|private
specifier|static
specifier|final
name|DirectBufferPool
name|bufferPool
init|=
operator|new
name|DirectBufferPool
argument_list|()
decl_stmt|;
DECL|field|useDirectBuffers
specifier|private
specifier|final
name|boolean
name|useDirectBuffers
decl_stmt|;
comment|/**    * The entirety of the most recently read packet.    * The first PKT_LENGTHS_LEN bytes of this buffer are the    * length prefixes.    */
DECL|field|curPacketBuf
specifier|private
name|ByteBuffer
name|curPacketBuf
init|=
literal|null
decl_stmt|;
comment|/**    * A slice of {@link #curPacketBuf} which contains just the checksums.    */
DECL|field|curChecksumSlice
specifier|private
name|ByteBuffer
name|curChecksumSlice
init|=
literal|null
decl_stmt|;
comment|/**    * A slice of {@link #curPacketBuf} which contains just the data.    */
DECL|field|curDataSlice
specifier|private
name|ByteBuffer
name|curDataSlice
init|=
literal|null
decl_stmt|;
comment|/**    * The packet header of the most recently read packet.    */
DECL|field|curHeader
specifier|private
name|PacketHeader
name|curHeader
decl_stmt|;
DECL|method|PacketReceiver (boolean useDirectBuffers)
specifier|public
name|PacketReceiver
parameter_list|(
name|boolean
name|useDirectBuffers
parameter_list|)
block|{
name|this
operator|.
name|useDirectBuffers
operator|=
name|useDirectBuffers
expr_stmt|;
name|reallocPacketBuf
argument_list|(
name|PacketHeader
operator|.
name|PKT_LENGTHS_LEN
argument_list|)
expr_stmt|;
block|}
DECL|method|getHeader ()
specifier|public
name|PacketHeader
name|getHeader
parameter_list|()
block|{
return|return
name|curHeader
return|;
block|}
DECL|method|getDataSlice ()
specifier|public
name|ByteBuffer
name|getDataSlice
parameter_list|()
block|{
return|return
name|curDataSlice
return|;
block|}
DECL|method|getChecksumSlice ()
specifier|public
name|ByteBuffer
name|getChecksumSlice
parameter_list|()
block|{
return|return
name|curChecksumSlice
return|;
block|}
comment|/**    * Reads all of the data for the next packet into the appropriate buffers.    *     * The data slice and checksum slice members will be set to point to the    * user data and corresponding checksums. The header will be parsed and    * set.    */
DECL|method|receiveNextPacket (ReadableByteChannel in)
specifier|public
name|void
name|receiveNextPacket
parameter_list|(
name|ReadableByteChannel
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|doRead
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see #receiveNextPacket(ReadableByteChannel)    */
DECL|method|receiveNextPacket (InputStream in)
specifier|public
name|void
name|receiveNextPacket
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|doRead
argument_list|(
literal|null
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|doRead (ReadableByteChannel ch, InputStream in)
specifier|private
name|void
name|doRead
parameter_list|(
name|ReadableByteChannel
name|ch
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Each packet looks like:
comment|//   PLEN    HLEN      HEADER     CHECKSUMS  DATA
comment|//   32-bit  16-bit<protobuf><variable length>
comment|//
comment|// PLEN:      Payload length
comment|//            = length(PLEN) + length(CHECKSUMS) + length(DATA)
comment|//            This length includes its own encoded length in
comment|//            the sum for historical reasons.
comment|//
comment|// HLEN:      Header length
comment|//            = length(HEADER)
comment|//
comment|// HEADER:    the actual packet header fields, encoded in protobuf
comment|// CHECKSUMS: the crcs for the data chunk. May be missing if
comment|//            checksums were not requested
comment|// DATA       the actual block data
name|Preconditions
operator|.
name|checkState
argument_list|(
name|curHeader
operator|==
literal|null
operator|||
operator|!
name|curHeader
operator|.
name|isLastPacketInBlock
argument_list|()
argument_list|)
expr_stmt|;
name|curPacketBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|curPacketBuf
operator|.
name|limit
argument_list|(
name|PacketHeader
operator|.
name|PKT_LENGTHS_LEN
argument_list|)
expr_stmt|;
name|doReadFully
argument_list|(
name|ch
argument_list|,
name|in
argument_list|,
name|curPacketBuf
argument_list|)
expr_stmt|;
name|curPacketBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|int
name|payloadLen
init|=
name|curPacketBuf
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|payloadLen
operator|<
name|Ints
operator|.
name|BYTES
condition|)
block|{
comment|// The "payload length" includes its own length. Therefore it
comment|// should never be less than 4 bytes
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid payload length "
operator|+
name|payloadLen
argument_list|)
throw|;
block|}
name|int
name|dataPlusChecksumLen
init|=
name|payloadLen
operator|-
name|Ints
operator|.
name|BYTES
decl_stmt|;
name|int
name|headerLen
init|=
name|curPacketBuf
operator|.
name|getShort
argument_list|()
decl_stmt|;
if|if
condition|(
name|headerLen
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid header length "
operator|+
name|headerLen
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"readNextPacket: dataPlusChecksumLen = "
operator|+
name|dataPlusChecksumLen
operator|+
literal|" headerLen = "
operator|+
name|headerLen
argument_list|)
expr_stmt|;
block|}
comment|// Sanity check the buffer size so we don't allocate too much memory
comment|// and OOME.
name|int
name|totalLen
init|=
name|payloadLen
operator|+
name|headerLen
decl_stmt|;
if|if
condition|(
name|totalLen
argument_list|<
literal|0
operator|||
name|totalLen
argument_list|>
name|MAX_PACKET_SIZE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect value for packet payload size: "
operator|+
name|payloadLen
argument_list|)
throw|;
block|}
comment|// Make sure we have space for the whole packet, and
comment|// read it.
name|reallocPacketBuf
argument_list|(
name|PacketHeader
operator|.
name|PKT_LENGTHS_LEN
operator|+
name|dataPlusChecksumLen
operator|+
name|headerLen
argument_list|)
expr_stmt|;
name|curPacketBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|curPacketBuf
operator|.
name|position
argument_list|(
name|PacketHeader
operator|.
name|PKT_LENGTHS_LEN
argument_list|)
expr_stmt|;
name|curPacketBuf
operator|.
name|limit
argument_list|(
name|PacketHeader
operator|.
name|PKT_LENGTHS_LEN
operator|+
name|dataPlusChecksumLen
operator|+
name|headerLen
argument_list|)
expr_stmt|;
name|doReadFully
argument_list|(
name|ch
argument_list|,
name|in
argument_list|,
name|curPacketBuf
argument_list|)
expr_stmt|;
name|curPacketBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|curPacketBuf
operator|.
name|position
argument_list|(
name|PacketHeader
operator|.
name|PKT_LENGTHS_LEN
argument_list|)
expr_stmt|;
comment|// Extract the header from the front of the buffer (after the length prefixes)
name|byte
index|[]
name|headerBuf
init|=
operator|new
name|byte
index|[
name|headerLen
index|]
decl_stmt|;
name|curPacketBuf
operator|.
name|get
argument_list|(
name|headerBuf
argument_list|)
expr_stmt|;
if|if
condition|(
name|curHeader
operator|==
literal|null
condition|)
block|{
name|curHeader
operator|=
operator|new
name|PacketHeader
argument_list|()
expr_stmt|;
block|}
name|curHeader
operator|.
name|setFieldsFromData
argument_list|(
name|dataPlusChecksumLen
argument_list|,
name|headerBuf
argument_list|)
expr_stmt|;
comment|// Compute the sub-slices of the packet
name|int
name|checksumLen
init|=
name|dataPlusChecksumLen
operator|-
name|curHeader
operator|.
name|getDataLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|checksumLen
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid packet: data length in packet header "
operator|+
literal|"exceeds data length received. dataPlusChecksumLen="
operator|+
name|dataPlusChecksumLen
operator|+
literal|" header: "
operator|+
name|curHeader
argument_list|)
throw|;
block|}
name|reslicePacket
argument_list|(
name|headerLen
argument_list|,
name|checksumLen
argument_list|,
name|curHeader
operator|.
name|getDataLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rewrite the last-read packet on the wire to the given output stream.    */
DECL|method|mirrorPacketTo (DataOutputStream mirrorOut)
specifier|public
name|void
name|mirrorPacketTo
parameter_list|(
name|DataOutputStream
name|mirrorOut
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|useDirectBuffers
argument_list|,
literal|"Currently only supported for non-direct buffers"
argument_list|)
expr_stmt|;
name|mirrorOut
operator|.
name|write
argument_list|(
name|curPacketBuf
operator|.
name|array
argument_list|()
argument_list|,
name|curPacketBuf
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|curPacketBuf
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doReadFully (ReadableByteChannel ch, InputStream in, ByteBuffer buf)
specifier|private
specifier|static
name|void
name|doReadFully
parameter_list|(
name|ReadableByteChannel
name|ch
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
block|{
name|readChannelFully
argument_list|(
name|ch
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|buf
operator|.
name|isDirect
argument_list|()
argument_list|,
literal|"Must not use direct buffers with InputStream API"
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|buf
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buf
operator|.
name|position
argument_list|()
argument_list|,
name|buf
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|position
argument_list|(
name|buf
operator|.
name|position
argument_list|()
operator|+
name|buf
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reslicePacket ( int headerLen, int checksumsLen, int dataLen)
specifier|private
name|void
name|reslicePacket
parameter_list|(
name|int
name|headerLen
parameter_list|,
name|int
name|checksumsLen
parameter_list|,
name|int
name|dataLen
parameter_list|)
block|{
comment|// Packet structure (refer to doRead() for details):
comment|//   PLEN    HLEN      HEADER     CHECKSUMS  DATA
comment|//   32-bit  16-bit<protobuf><variable length>
comment|//   |--- lenThroughHeader ----|
comment|//   |----------- lenThroughChecksums   ----|
comment|//   |------------------- lenThroughData    ------|
name|int
name|lenThroughHeader
init|=
name|PacketHeader
operator|.
name|PKT_LENGTHS_LEN
operator|+
name|headerLen
decl_stmt|;
name|int
name|lenThroughChecksums
init|=
name|lenThroughHeader
operator|+
name|checksumsLen
decl_stmt|;
name|int
name|lenThroughData
init|=
name|lenThroughChecksums
operator|+
name|dataLen
decl_stmt|;
assert|assert
name|dataLen
operator|>=
literal|0
operator|:
literal|"invalid datalen: "
operator|+
name|dataLen
assert|;
assert|assert
name|curPacketBuf
operator|.
name|position
argument_list|()
operator|==
name|lenThroughHeader
assert|;
assert|assert
name|curPacketBuf
operator|.
name|limit
argument_list|()
operator|==
name|lenThroughData
operator|:
literal|"headerLen= "
operator|+
name|headerLen
operator|+
literal|" clen="
operator|+
name|checksumsLen
operator|+
literal|" dlen="
operator|+
name|dataLen
operator|+
literal|" rem="
operator|+
name|curPacketBuf
operator|.
name|remaining
argument_list|()
assert|;
comment|// Slice the checksums.
name|curPacketBuf
operator|.
name|position
argument_list|(
name|lenThroughHeader
argument_list|)
expr_stmt|;
name|curPacketBuf
operator|.
name|limit
argument_list|(
name|lenThroughChecksums
argument_list|)
expr_stmt|;
name|curChecksumSlice
operator|=
name|curPacketBuf
operator|.
name|slice
argument_list|()
expr_stmt|;
comment|// Slice the data.
name|curPacketBuf
operator|.
name|position
argument_list|(
name|lenThroughChecksums
argument_list|)
expr_stmt|;
name|curPacketBuf
operator|.
name|limit
argument_list|(
name|lenThroughData
argument_list|)
expr_stmt|;
name|curDataSlice
operator|=
name|curPacketBuf
operator|.
name|slice
argument_list|()
expr_stmt|;
comment|// Reset buffer to point to the entirety of the packet (including
comment|// length prefixes)
name|curPacketBuf
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|curPacketBuf
operator|.
name|limit
argument_list|(
name|lenThroughData
argument_list|)
expr_stmt|;
block|}
DECL|method|readChannelFully (ReadableByteChannel ch, ByteBuffer buf)
specifier|private
specifier|static
name|void
name|readChannelFully
parameter_list|(
name|ReadableByteChannel
name|ch
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|buf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|n
init|=
name|ch
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Premature EOF reading from "
operator|+
name|ch
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|reallocPacketBuf (int atLeastCapacity)
specifier|private
name|void
name|reallocPacketBuf
parameter_list|(
name|int
name|atLeastCapacity
parameter_list|)
block|{
comment|// Realloc the buffer if this packet is longer than the previous
comment|// one.
if|if
condition|(
name|curPacketBuf
operator|==
literal|null
operator|||
name|curPacketBuf
operator|.
name|capacity
argument_list|()
operator|<
name|atLeastCapacity
condition|)
block|{
name|ByteBuffer
name|newBuf
decl_stmt|;
if|if
condition|(
name|useDirectBuffers
condition|)
block|{
name|newBuf
operator|=
name|bufferPool
operator|.
name|getBuffer
argument_list|(
name|atLeastCapacity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newBuf
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|atLeastCapacity
argument_list|)
expr_stmt|;
block|}
comment|// If reallocing an existing buffer, copy the old packet length
comment|// prefixes over
if|if
condition|(
name|curPacketBuf
operator|!=
literal|null
condition|)
block|{
name|curPacketBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|newBuf
operator|.
name|put
argument_list|(
name|curPacketBuf
argument_list|)
expr_stmt|;
block|}
name|returnPacketBufToPool
argument_list|()
expr_stmt|;
name|curPacketBuf
operator|=
name|newBuf
expr_stmt|;
block|}
block|}
DECL|method|returnPacketBufToPool ()
specifier|private
name|void
name|returnPacketBufToPool
parameter_list|()
block|{
if|if
condition|(
name|curPacketBuf
operator|!=
literal|null
operator|&&
name|curPacketBuf
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
name|curPacketBuf
argument_list|)
expr_stmt|;
name|curPacketBuf
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// Closeable
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|returnPacketBufToPool
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// just in case it didn't get closed, we
comment|// may as well still try to return the buffer
name|returnPacketBufToPool
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

