begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DeprecatedUTF8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * NamespaceInfo is returned by the name-node in reply   * to a data-node handshake.  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|NamespaceInfo
specifier|public
class|class
name|NamespaceInfo
extends|extends
name|StorageInfo
block|{
DECL|field|buildVersion
name|String
name|buildVersion
decl_stmt|;
DECL|field|distributedUpgradeVersion
name|int
name|distributedUpgradeVersion
decl_stmt|;
DECL|field|blockPoolID
name|String
name|blockPoolID
init|=
literal|""
decl_stmt|;
comment|// id of the block pool
DECL|method|NamespaceInfo ()
specifier|public
name|NamespaceInfo
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|buildVersion
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|NamespaceInfo (int nsID, String clusterID, String bpID, long cT, int duVersion)
specifier|public
name|NamespaceInfo
parameter_list|(
name|int
name|nsID
parameter_list|,
name|String
name|clusterID
parameter_list|,
name|String
name|bpID
parameter_list|,
name|long
name|cT
parameter_list|,
name|int
name|duVersion
parameter_list|)
block|{
name|super
argument_list|(
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
argument_list|,
name|nsID
argument_list|,
name|clusterID
argument_list|,
name|cT
argument_list|)
expr_stmt|;
name|blockPoolID
operator|=
name|bpID
expr_stmt|;
name|buildVersion
operator|=
name|Storage
operator|.
name|getBuildVersion
argument_list|()
expr_stmt|;
name|this
operator|.
name|distributedUpgradeVersion
operator|=
name|duVersion
expr_stmt|;
block|}
DECL|method|getBuildVersion ()
specifier|public
name|String
name|getBuildVersion
parameter_list|()
block|{
return|return
name|buildVersion
return|;
block|}
DECL|method|getDistributedUpgradeVersion ()
specifier|public
name|int
name|getDistributedUpgradeVersion
parameter_list|()
block|{
return|return
name|distributedUpgradeVersion
return|;
block|}
DECL|method|getBlockPoolID ()
specifier|public
name|String
name|getBlockPoolID
parameter_list|()
block|{
return|return
name|blockPoolID
return|;
block|}
comment|/////////////////////////////////////////////////
comment|// Writable
comment|/////////////////////////////////////////////////
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|NamespaceInfo
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|NamespaceInfo
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|DeprecatedUTF8
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|getBuildVersion
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|getDistributedUpgradeVersion
argument_list|()
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|blockPoolID
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|buildVersion
operator|=
name|DeprecatedUTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|distributedUpgradeVersion
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|blockPoolID
operator|=
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|";bpid="
operator|+
name|blockPoolID
return|;
block|}
DECL|method|validateStorage (NNStorage storage)
specifier|public
name|void
name|validateStorage
parameter_list|(
name|NNStorage
name|storage
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|layoutVersion
operator|!=
name|storage
operator|.
name|getLayoutVersion
argument_list|()
operator|||
name|namespaceID
operator|!=
name|storage
operator|.
name|getNamespaceID
argument_list|()
operator|||
name|cTime
operator|!=
name|storage
operator|.
name|cTime
operator|||
operator|!
name|clusterID
operator|.
name|equals
argument_list|(
name|storage
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|||
operator|!
name|blockPoolID
operator|.
name|equals
argument_list|(
name|storage
operator|.
name|getBlockPoolID
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Inconsistent namespace information:\n"
operator|+
literal|"NamespaceInfo has:\n"
operator|+
literal|"LV="
operator|+
name|layoutVersion
operator|+
literal|";"
operator|+
literal|"NS="
operator|+
name|namespaceID
operator|+
literal|";"
operator|+
literal|"cTime="
operator|+
name|cTime
operator|+
literal|";"
operator|+
literal|"CID="
operator|+
name|clusterID
operator|+
literal|";"
operator|+
literal|"BPID="
operator|+
name|blockPoolID
operator|+
literal|".\nStorage has:\n"
operator|+
literal|"LV="
operator|+
name|storage
operator|.
name|getLayoutVersion
argument_list|()
operator|+
literal|";"
operator|+
literal|"NS="
operator|+
name|storage
operator|.
name|getNamespaceID
argument_list|()
operator|+
literal|";"
operator|+
literal|"cTime="
operator|+
name|storage
operator|.
name|getCTime
argument_list|()
operator|+
literal|";"
operator|+
literal|"CID="
operator|+
name|storage
operator|.
name|getClusterID
argument_list|()
operator|+
literal|";"
operator|+
literal|"BPID="
operator|+
name|storage
operator|.
name|getBlockPoolID
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

