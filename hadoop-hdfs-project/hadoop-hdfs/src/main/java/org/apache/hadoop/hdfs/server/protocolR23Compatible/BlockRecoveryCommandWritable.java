begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_comment
comment|/**  * BlockRecoveryCommand is an instruction to a data-node to recover the  * specified blocks.  *   * The data-node that receives this command treats itself as a primary data-node  * in the recover process.  *   * Block recovery is identified by a recoveryId, which is also the new  * generation stamp, which the block will have after the recovery succeeds.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BlockRecoveryCommandWritable
specifier|public
class|class
name|BlockRecoveryCommandWritable
extends|extends
name|DatanodeCommandWritable
block|{
DECL|field|recoveringBlocks
name|Collection
argument_list|<
name|RecoveringBlockWritable
argument_list|>
name|recoveringBlocks
decl_stmt|;
comment|/**    * Create empty BlockRecoveryCommand.    */
DECL|method|BlockRecoveryCommandWritable ()
specifier|public
name|BlockRecoveryCommandWritable
parameter_list|()
block|{ }
comment|/**    * Create BlockRecoveryCommand with the specified capacity for recovering    * blocks.    */
DECL|method|BlockRecoveryCommandWritable (int capacity)
specifier|public
name|BlockRecoveryCommandWritable
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|RecoveringBlockWritable
argument_list|>
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockRecoveryCommandWritable (Collection<RecoveringBlockWritable> blocks)
specifier|public
name|BlockRecoveryCommandWritable
parameter_list|(
name|Collection
argument_list|<
name|RecoveringBlockWritable
argument_list|>
name|blocks
parameter_list|)
block|{
name|super
argument_list|(
name|DatanodeWireProtocol
operator|.
name|DNA_RECOVERBLOCK
argument_list|)
expr_stmt|;
name|recoveringBlocks
operator|=
name|blocks
expr_stmt|;
block|}
comment|// /////////////////////////////////////////
comment|// Writable
comment|// /////////////////////////////////////////
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|BlockRecoveryCommandWritable
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|BlockRecoveryCommandWritable
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|recoveringBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RecoveringBlockWritable
name|block
range|:
name|recoveringBlocks
control|)
block|{
name|block
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|numBlocks
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|recoveringBlocks
operator|=
operator|new
name|ArrayList
argument_list|<
name|RecoveringBlockWritable
argument_list|>
argument_list|(
name|numBlocks
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|RecoveringBlockWritable
name|b
init|=
operator|new
name|RecoveringBlockWritable
argument_list|()
decl_stmt|;
name|b
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|recoveringBlocks
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|convert ()
specifier|public
name|DatanodeCommand
name|convert
parameter_list|()
block|{
name|Collection
argument_list|<
name|RecoveringBlock
argument_list|>
name|blks
init|=
operator|new
name|ArrayList
argument_list|<
name|RecoveringBlock
argument_list|>
argument_list|(
name|recoveringBlocks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RecoveringBlockWritable
name|b
range|:
name|recoveringBlocks
control|)
block|{
name|blks
operator|.
name|add
argument_list|(
name|b
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BlockRecoveryCommand
argument_list|(
name|blks
argument_list|)
return|;
block|}
DECL|method|convert (BlockRecoveryCommand cmd)
specifier|public
specifier|static
name|BlockRecoveryCommandWritable
name|convert
parameter_list|(
name|BlockRecoveryCommand
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Collection
argument_list|<
name|RecoveringBlockWritable
argument_list|>
name|blks
init|=
operator|new
name|ArrayList
argument_list|<
name|RecoveringBlockWritable
argument_list|>
argument_list|(
name|cmd
operator|.
name|getRecoveringBlocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RecoveringBlock
name|b
range|:
name|cmd
operator|.
name|getRecoveringBlocks
argument_list|()
control|)
block|{
name|blks
operator|.
name|add
argument_list|(
name|RecoveringBlockWritable
operator|.
name|convert
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BlockRecoveryCommandWritable
argument_list|(
name|blks
argument_list|)
return|;
block|}
block|}
end_class

end_unit

