begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|JournalProtocolProtos
operator|.
name|FenceRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|JournalProtocolProtos
operator|.
name|FenceResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|JournalProtocolProtos
operator|.
name|JournalRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|JournalProtocolProtos
operator|.
name|JournalResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|JournalProtocolProtos
operator|.
name|StartLogSegmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|JournalProtocolProtos
operator|.
name|StartLogSegmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|FenceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|JournalProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Implementation for protobuf service that forwards requests  * received on {@link JournalProtocolPB} to the   * {@link JournalProtocol} server implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|JournalProtocolServerSideTranslatorPB
specifier|public
class|class
name|JournalProtocolServerSideTranslatorPB
implements|implements
name|JournalProtocolPB
block|{
comment|/** Server side implementation to delegate the requests to */
DECL|field|impl
specifier|private
specifier|final
name|JournalProtocol
name|impl
decl_stmt|;
DECL|field|VOID_JOURNAL_RESPONSE
specifier|private
specifier|final
specifier|static
name|JournalResponseProto
name|VOID_JOURNAL_RESPONSE
init|=
name|JournalResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|StartLogSegmentResponseProto
DECL|field|VOID_START_LOG_SEGMENT_RESPONSE
name|VOID_START_LOG_SEGMENT_RESPONSE
init|=
name|StartLogSegmentResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|JournalProtocolServerSideTranslatorPB (JournalProtocol impl)
specifier|public
name|JournalProtocolServerSideTranslatorPB
parameter_list|(
name|JournalProtocol
name|impl
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
block|}
comment|/** @see JournalProtocol#journal */
annotation|@
name|Override
DECL|method|journal (RpcController unused, JournalRequestProto req)
specifier|public
name|JournalResponseProto
name|journal
parameter_list|(
name|RpcController
name|unused
parameter_list|,
name|JournalRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|journal
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|req
operator|.
name|getJournalInfo
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getEpoch
argument_list|()
argument_list|,
name|req
operator|.
name|getFirstTxnId
argument_list|()
argument_list|,
name|req
operator|.
name|getNumTxns
argument_list|()
argument_list|,
name|req
operator|.
name|getRecords
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|VOID_JOURNAL_RESPONSE
return|;
block|}
comment|/** @see JournalProtocol#startLogSegment */
annotation|@
name|Override
DECL|method|startLogSegment (RpcController controller, StartLogSegmentRequestProto req)
specifier|public
name|StartLogSegmentResponseProto
name|startLogSegment
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|StartLogSegmentRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|startLogSegment
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|req
operator|.
name|getJournalInfo
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getEpoch
argument_list|()
argument_list|,
name|req
operator|.
name|getTxid
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|VOID_START_LOG_SEGMENT_RESPONSE
return|;
block|}
annotation|@
name|Override
DECL|method|fence (RpcController controller, FenceRequestProto req)
specifier|public
name|FenceResponseProto
name|fence
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|FenceRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|FenceResponse
name|resp
init|=
name|impl
operator|.
name|fence
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|req
operator|.
name|getJournalInfo
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getEpoch
argument_list|()
argument_list|,
name|req
operator|.
name|getFencerInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|FenceResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setInSync
argument_list|(
name|resp
operator|.
name|isInSync
argument_list|()
argument_list|)
operator|.
name|setLastTransactionId
argument_list|(
name|resp
operator|.
name|getLastTransactionId
argument_list|()
argument_list|)
operator|.
name|setPreviousEpoch
argument_list|(
name|resp
operator|.
name|getPreviousEpoch
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

