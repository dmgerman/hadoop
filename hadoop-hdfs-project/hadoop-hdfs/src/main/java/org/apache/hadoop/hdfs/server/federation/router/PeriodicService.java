begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * Service to periodically execute a runnable.  */
end_comment

begin_class
DECL|class|PeriodicService
specifier|public
specifier|abstract
class|class
name|PeriodicService
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PeriodicService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Default interval in milliseconds for the periodic service. */
DECL|field|DEFAULT_INTERVAL_MS
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_INTERVAL_MS
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/** Interval for running the periodic service in milliseconds. */
DECL|field|intervalMs
specifier|private
name|long
name|intervalMs
decl_stmt|;
comment|/** Name of the service. */
DECL|field|serviceName
specifier|private
specifier|final
name|String
name|serviceName
decl_stmt|;
comment|/** Scheduler for the periodic service. */
DECL|field|scheduler
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
comment|/** If the service is running. */
DECL|field|isRunning
specifier|private
specifier|volatile
name|boolean
name|isRunning
init|=
literal|false
decl_stmt|;
comment|/** How many times we run. */
DECL|field|runCount
specifier|private
name|long
name|runCount
decl_stmt|;
comment|/** How many errors we got. */
DECL|field|errorCount
specifier|private
name|long
name|errorCount
decl_stmt|;
comment|/** When was the last time we executed this service successfully. */
DECL|field|lastRun
specifier|private
name|long
name|lastRun
decl_stmt|;
comment|/**    * Create a new periodic update service.    *    * @param name Name of the service.    */
DECL|method|PeriodicService (String name)
specifier|public
name|PeriodicService
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|DEFAULT_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new periodic update service.    *    * @param name Name of the service.    * @param interval Interval for the periodic service in milliseconds.    */
DECL|method|PeriodicService (String name, long interval)
specifier|public
name|PeriodicService
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|serviceName
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|intervalMs
operator|=
name|interval
expr_stmt|;
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"-%d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the interval for the periodic service.    *    * @param interval Interval in milliseconds.    */
DECL|method|setIntervalMs (long interval)
specifier|protected
name|void
name|setIntervalMs
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
if|if
condition|(
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
throw|throw
operator|new
name|ServiceStateException
argument_list|(
literal|"Periodic service already started"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|intervalMs
operator|=
name|interval
expr_stmt|;
block|}
block|}
comment|/**    * Get the interval for the periodic service.    *    * @return Interval in milliseconds.    */
DECL|method|getIntervalMs ()
specifier|protected
name|long
name|getIntervalMs
parameter_list|()
block|{
return|return
name|this
operator|.
name|intervalMs
return|;
block|}
comment|/**    * Get how many times we failed to run the periodic service.    *    * @return Times we failed to run the periodic service.    */
DECL|method|getErrorCount ()
specifier|protected
name|long
name|getErrorCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorCount
return|;
block|}
comment|/**    * Get how many times we run the periodic service.    *    * @return Times we run the periodic service.    */
DECL|method|getRunCount ()
specifier|protected
name|long
name|getRunCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|runCount
return|;
block|}
comment|/**    * Get the last time the periodic service was executed.    *    * @return Last time the periodic service was executed.    */
DECL|method|getLastUpdate ()
specifier|protected
name|long
name|getLastUpdate
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastRun
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting periodic service {}"
argument_list|,
name|this
operator|.
name|serviceName
argument_list|)
expr_stmt|;
name|startPeriodic
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|stopPeriodic
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping periodic service {}"
argument_list|,
name|this
operator|.
name|serviceName
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop the periodic task.    */
DECL|method|stopPeriodic ()
specifier|protected
specifier|synchronized
name|void
name|stopPeriodic
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isRunning
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} is shutting down"
argument_list|,
name|this
operator|.
name|serviceName
argument_list|)
expr_stmt|;
name|this
operator|.
name|isRunning
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Start the periodic execution.    */
DECL|method|startPeriodic ()
specifier|protected
specifier|synchronized
name|void
name|startPeriodic
parameter_list|()
block|{
name|stopPeriodic
argument_list|()
expr_stmt|;
comment|// Create the runnable service
name|Runnable
name|updateRunnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running {} update task"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isRunning
condition|)
block|{
return|return;
block|}
name|periodicInvoke
argument_list|()
expr_stmt|;
name|runCount
operator|++
expr_stmt|;
name|lastRun
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|errorCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|serviceName
operator|+
literal|" service threw an exception"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
comment|// Start the execution of the periodic service
name|this
operator|.
name|isRunning
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|updateRunnable
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|intervalMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Method that the service will run periodically.    */
DECL|method|periodicInvoke ()
specifier|protected
specifier|abstract
name|void
name|periodicInvoke
parameter_list|()
function_decl|;
block|}
end_class

end_unit

