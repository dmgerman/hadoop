begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_class
DECL|class|RemoteEditLog
specifier|public
class|class
name|RemoteEditLog
implements|implements
name|Comparable
argument_list|<
name|RemoteEditLog
argument_list|>
block|{
DECL|field|startTxId
specifier|private
name|long
name|startTxId
init|=
name|HdfsConstants
operator|.
name|INVALID_TXID
decl_stmt|;
DECL|field|endTxId
specifier|private
name|long
name|endTxId
init|=
name|HdfsConstants
operator|.
name|INVALID_TXID
decl_stmt|;
DECL|field|isInProgress
specifier|private
name|boolean
name|isInProgress
init|=
literal|false
decl_stmt|;
DECL|method|RemoteEditLog ()
specifier|public
name|RemoteEditLog
parameter_list|()
block|{   }
DECL|method|RemoteEditLog (long startTxId, long endTxId)
specifier|public
name|RemoteEditLog
parameter_list|(
name|long
name|startTxId
parameter_list|,
name|long
name|endTxId
parameter_list|)
block|{
name|this
operator|.
name|startTxId
operator|=
name|startTxId
expr_stmt|;
name|this
operator|.
name|endTxId
operator|=
name|endTxId
expr_stmt|;
name|this
operator|.
name|isInProgress
operator|=
operator|(
name|endTxId
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
operator|)
expr_stmt|;
block|}
DECL|method|RemoteEditLog (long startTxId, long endTxId, boolean inProgress)
specifier|public
name|RemoteEditLog
parameter_list|(
name|long
name|startTxId
parameter_list|,
name|long
name|endTxId
parameter_list|,
name|boolean
name|inProgress
parameter_list|)
block|{
name|this
operator|.
name|startTxId
operator|=
name|startTxId
expr_stmt|;
name|this
operator|.
name|endTxId
operator|=
name|endTxId
expr_stmt|;
name|this
operator|.
name|isInProgress
operator|=
name|inProgress
expr_stmt|;
block|}
DECL|method|getStartTxId ()
specifier|public
name|long
name|getStartTxId
parameter_list|()
block|{
return|return
name|startTxId
return|;
block|}
DECL|method|getEndTxId ()
specifier|public
name|long
name|getEndTxId
parameter_list|()
block|{
return|return
name|endTxId
return|;
block|}
DECL|method|isInProgress ()
specifier|public
name|boolean
name|isInProgress
parameter_list|()
block|{
return|return
name|isInProgress
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isInProgress
condition|)
block|{
return|return
literal|"["
operator|+
name|startTxId
operator|+
literal|","
operator|+
name|endTxId
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
literal|"["
operator|+
name|startTxId
operator|+
literal|"-? (in-progress)]"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareTo (RemoteEditLog log)
specifier|public
name|int
name|compareTo
parameter_list|(
name|RemoteEditLog
name|log
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|startTxId
argument_list|,
name|log
operator|.
name|startTxId
argument_list|)
operator|.
name|compare
argument_list|(
name|endTxId
argument_list|,
name|log
operator|.
name|endTxId
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|RemoteEditLog
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|this
operator|.
name|compareTo
argument_list|(
operator|(
name|RemoteEditLog
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|startTxId
operator|*
name|endTxId
argument_list|)
return|;
block|}
comment|/**    * Guava<code>Function</code> which applies {@link #getStartTxId()}     */
DECL|field|GET_START_TXID
specifier|public
specifier|static
specifier|final
name|Function
argument_list|<
name|RemoteEditLog
argument_list|,
name|Long
argument_list|>
name|GET_START_TXID
init|=
operator|new
name|Function
argument_list|<
name|RemoteEditLog
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|apply
parameter_list|(
name|RemoteEditLog
name|log
parameter_list|)
block|{
return|return
name|log
operator|.
name|getStartTxId
argument_list|()
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

