begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * Class that represents a file on disk which persistently stores  * a single<code>long</code> value. The file is updated atomically  * and durably (i.e fsynced).   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|PersistentLongFile
specifier|public
class|class
name|PersistentLongFile
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PersistentLongFile
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|file
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
DECL|field|defaultVal
specifier|private
specifier|final
name|long
name|defaultVal
decl_stmt|;
DECL|field|value
specifier|private
name|long
name|value
decl_stmt|;
DECL|field|loaded
specifier|private
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
DECL|method|PersistentLongFile (File file, long defaultVal)
specifier|public
name|PersistentLongFile
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|defaultVal
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|defaultVal
operator|=
name|defaultVal
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|long
name|get
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|loaded
condition|)
block|{
name|value
operator|=
name|readFile
argument_list|(
name|file
argument_list|,
name|defaultVal
argument_list|)
expr_stmt|;
name|loaded
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|set (long newVal)
specifier|public
name|void
name|set
parameter_list|(
name|long
name|newVal
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|!=
name|newVal
operator|||
operator|!
name|loaded
condition|)
block|{
name|writeFile
argument_list|(
name|file
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
name|value
operator|=
name|newVal
expr_stmt|;
name|loaded
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Atomically write the given value to the given file, including fsyncing.    *    * @param file destination file    * @param val value to write    * @throws IOException if the file cannot be written    */
DECL|method|writeFile (File file, long val)
specifier|public
specifier|static
name|void
name|writeFile
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|AtomicFileOutputStream
name|fos
init|=
operator|new
name|AtomicFileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|fos
operator|.
name|write
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
name|fos
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|readFile (File file, long defaultVal)
specifier|public
specifier|static
name|long
name|readFile
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|defaultVal
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|val
init|=
name|defaultVal
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|val
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|br
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|br
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|val
return|;
block|}
block|}
end_class

end_unit

