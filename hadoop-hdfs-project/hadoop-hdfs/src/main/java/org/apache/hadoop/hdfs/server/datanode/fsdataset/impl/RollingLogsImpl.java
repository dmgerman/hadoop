begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataBlockScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|RollingLogs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_class
DECL|class|RollingLogsImpl
class|class
name|RollingLogsImpl
implements|implements
name|RollingLogs
block|{
DECL|field|CURR_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|CURR_SUFFIX
init|=
literal|".curr"
decl_stmt|;
DECL|field|PREV_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|PREV_SUFFIX
init|=
literal|".prev"
decl_stmt|;
DECL|method|isFilePresent (String dir, String filePrefix)
specifier|static
name|boolean
name|isFilePresent
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|filePrefix
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|filePrefix
operator|+
name|CURR_SUFFIX
argument_list|)
operator|.
name|exists
argument_list|()
operator|||
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|filePrefix
operator|+
name|PREV_SUFFIX
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
DECL|field|curr
specifier|private
specifier|final
name|File
name|curr
decl_stmt|;
DECL|field|prev
specifier|private
specifier|final
name|File
name|prev
decl_stmt|;
DECL|field|out
specifier|private
name|PrintWriter
name|out
decl_stmt|;
comment|//require synchronized access
DECL|field|appender
specifier|private
name|Appender
name|appender
init|=
operator|new
name|Appender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|)
block|{
synchronized|synchronized
init|(
name|RollingLogsImpl
operator|.
name|this
init|)
block|{
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|RollingLogsImpl
operator|.
name|this
operator|+
literal|" is not yet opened."
argument_list|)
throw|;
block|}
name|out
operator|.
name|print
argument_list|(
name|csq
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Appendable
name|append
parameter_list|(
name|char
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
synchronized|synchronized
init|(
name|RollingLogsImpl
operator|.
name|this
init|)
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
DECL|field|numReaders
specifier|private
specifier|final
name|AtomicInteger
name|numReaders
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|RollingLogsImpl (String dir, String filePrefix)
name|RollingLogsImpl
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|filePrefix
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|curr
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|filePrefix
operator|+
name|CURR_SUFFIX
argument_list|)
expr_stmt|;
name|prev
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|filePrefix
operator|+
name|PREV_SUFFIX
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|curr
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator (boolean skipPrevFile)
specifier|public
name|Reader
name|iterator
parameter_list|(
name|boolean
name|skipPrevFile
parameter_list|)
throws|throws
name|IOException
block|{
name|numReaders
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|Reader
argument_list|(
name|skipPrevFile
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|appender ()
specifier|public
name|Appender
name|appender
parameter_list|()
block|{
return|return
name|appender
return|;
block|}
annotation|@
name|Override
DECL|method|roll ()
specifier|public
name|boolean
name|roll
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|numReaders
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|prev
operator|.
name|delete
argument_list|()
operator|&&
name|prev
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|prev
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|appender
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|renamed
init|=
name|curr
operator|.
name|renameTo
argument_list|(
name|prev
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|curr
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|renamed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to rename "
operator|+
name|curr
operator|+
literal|" to "
operator|+
name|prev
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|curr
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * This is used to read the lines in order.    * If the data is not read completely (i.e, untill hasNext() returns    * false), it needs to be explicitly     */
DECL|class|Reader
specifier|private
class|class
name|Reader
implements|implements
name|RollingLogs
operator|.
name|LineIterator
block|{
DECL|field|file
specifier|private
name|File
name|file
decl_stmt|;
DECL|field|reader
specifier|private
name|BufferedReader
name|reader
decl_stmt|;
DECL|field|line
specifier|private
name|String
name|line
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|Reader (boolean skipPrevFile)
specifier|private
name|Reader
parameter_list|(
name|boolean
name|skipPrevFile
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|=
literal|null
expr_stmt|;
name|file
operator|=
name|skipPrevFile
condition|?
name|curr
else|:
name|prev
expr_stmt|;
name|readNext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isPrevious ()
specifier|public
name|boolean
name|isPrevious
parameter_list|()
block|{
return|return
name|file
operator|==
name|prev
return|;
block|}
DECL|method|openFile ()
specifier|private
name|boolean
name|openFile
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
operator|||
name|i
operator|>
literal|0
condition|)
block|{
comment|// move to next file
name|file
operator|=
name|isPrevious
argument_list|()
condition|?
name|curr
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// read next line if possible.
DECL|method|readNext ()
specifier|private
name|void
name|readNext
parameter_list|()
throws|throws
name|IOException
block|{
name|line
operator|=
literal|null
expr_stmt|;
try|try
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
operator|&&
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
comment|// move to the next file.
if|if
condition|(
name|openFile
argument_list|()
condition|)
block|{
name|readNext
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|line
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|String
name|next
parameter_list|()
block|{
name|String
name|curLine
init|=
name|line
decl_stmt|;
try|try
block|{
name|readNext
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DataBlockScanner
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to read next line."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|curLine
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|file
operator|=
literal|null
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
specifier|final
name|int
name|n
init|=
name|numReaders
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|n
operator|>=
literal|0
operator|)
assert|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

