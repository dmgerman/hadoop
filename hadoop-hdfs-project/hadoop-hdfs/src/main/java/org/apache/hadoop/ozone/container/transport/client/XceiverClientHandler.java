begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.transport.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|transport
operator|.
name|client
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_comment
comment|/**  * Netty client handler.  */
end_comment

begin_class
DECL|class|XceiverClientHandler
specifier|public
class|class
name|XceiverClientHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XceiverClientHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
DECL|field|responses
name|responses
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|pipeline
specifier|private
specifier|final
name|Pipeline
name|pipeline
decl_stmt|;
DECL|field|channel
specifier|private
specifier|volatile
name|Channel
name|channel
decl_stmt|;
comment|/**    * Constructs a client that can communicate to a container server.    */
DECL|method|XceiverClientHandler (Pipeline pipeline)
specifier|public
name|XceiverClientHandler
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|pipeline
operator|=
name|pipeline
expr_stmt|;
block|}
comment|/**    *<strong>Please keep in mind that this method will be renamed to {@code    * messageReceived(ChannelHandlerContext, I)} in 5.0.</strong>    *<p>    * Is called for each message of type {@link ContainerProtos    * .ContainerCommandResponseProto}.    *    * @param ctx the {@link ChannelHandlerContext} which this {@link    *            SimpleChannelInboundHandler} belongs to    * @param msg the message to handle    * @throws Exception is thrown if an error occurred    */
annotation|@
name|Override
DECL|method|channelRead0 (ChannelHandlerContext ctx, ContainerProtos.ContainerCommandResponseProto msg)
specifier|public
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|responses
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|channelRegistered (ChannelHandlerContext ctx)
specifier|public
name|void
name|channelRegistered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"channelRegistered: Connected to ctx"
argument_list|)
expr_stmt|;
name|channel
operator|=
name|ctx
operator|.
name|channel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exceptionCaught (ChannelHandlerContext ctx, Throwable cause)
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in client "
operator|+
name|cause
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Since netty is async, we send a work request and then wait until a response    * appears in the reply queue. This is simple sync interface for clients. we    * should consider building async interfaces for client if this turns out to    * be a performance bottleneck.    *    * @param request - request.    * @return -- response    */
specifier|public
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
DECL|method|sendCommand (ContainerProtos.ContainerCommandRequestProto request)
name|sendCommand
parameter_list|(
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|request
parameter_list|)
block|{
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
decl_stmt|;
name|channel
operator|.
name|writeAndFlush
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|boolean
name|interrupted
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|response
operator|=
name|responses
operator|.
name|take
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{
name|interrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|interrupted
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

