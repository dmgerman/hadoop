begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReportListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReportListing
operator|.
name|DiffReportListingEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectoryWithSnapshotFeature
operator|.
name|ChildrenDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Diff
operator|.
name|ListType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ChunkedArrayList
import|;
end_import

begin_comment
comment|/**  * A class describing the difference between snapshots of a snapshottable  * directory where the difference is limited by dfs.snapshotDiff-report.limit.  */
end_comment

begin_class
DECL|class|SnapshotDiffListingInfo
class|class
name|SnapshotDiffListingInfo
block|{
DECL|field|maxEntries
specifier|private
specifier|final
name|int
name|maxEntries
decl_stmt|;
comment|/** The root directory of the snapshots. */
DECL|field|snapshotRoot
specifier|private
specifier|final
name|INodeDirectory
name|snapshotRoot
decl_stmt|;
comment|/**    *  The scope directory under which snapshot diff is calculated.    */
DECL|field|snapshotDiffScopeDir
specifier|private
specifier|final
name|INodeDirectory
name|snapshotDiffScopeDir
decl_stmt|;
comment|/** The starting point of the difference. */
DECL|field|from
specifier|private
specifier|final
name|Snapshot
name|from
decl_stmt|;
comment|/** The end point of the difference. */
DECL|field|to
specifier|private
specifier|final
name|Snapshot
name|to
decl_stmt|;
comment|/** The path of the file to start for computing the snapshot diff. */
DECL|field|lastPath
specifier|private
name|byte
index|[]
name|lastPath
init|=
name|DFSUtilClient
operator|.
name|EMPTY_BYTES
decl_stmt|;
DECL|field|lastIndex
specifier|private
name|int
name|lastIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|/*    * A list containing all the modified entries between the given snapshots    * within a single rpc call.    */
DECL|field|modifiedList
specifier|private
specifier|final
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|modifiedList
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|createdList
specifier|private
specifier|final
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|createdList
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|deletedList
specifier|private
specifier|final
name|List
argument_list|<
name|DiffReportListingEntry
argument_list|>
name|deletedList
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|SnapshotDiffListingInfo (INodeDirectory snapshotRootDir, INodeDirectory snapshotDiffScopeDir, Snapshot start, Snapshot end, int snapshotDiffReportLimit)
name|SnapshotDiffListingInfo
parameter_list|(
name|INodeDirectory
name|snapshotRootDir
parameter_list|,
name|INodeDirectory
name|snapshotDiffScopeDir
parameter_list|,
name|Snapshot
name|start
parameter_list|,
name|Snapshot
name|end
parameter_list|,
name|int
name|snapshotDiffReportLimit
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|snapshotRootDir
operator|.
name|isSnapshottable
argument_list|()
operator|&&
name|snapshotDiffScopeDir
operator|.
name|isDescendantOfSnapshotRoot
argument_list|(
name|snapshotRootDir
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotRoot
operator|=
name|snapshotRootDir
expr_stmt|;
name|this
operator|.
name|snapshotDiffScopeDir
operator|=
name|snapshotDiffScopeDir
expr_stmt|;
name|this
operator|.
name|from
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|maxEntries
operator|=
name|snapshotDiffReportLimit
expr_stmt|;
block|}
DECL|method|addDirDiff (long dirId, byte[][] parent, ChildrenDiff diff)
name|boolean
name|addDirDiff
parameter_list|(
name|long
name|dirId
parameter_list|,
name|byte
index|[]
index|[]
name|parent
parameter_list|,
name|ChildrenDiff
name|diff
parameter_list|)
block|{
specifier|final
name|Snapshot
name|laterSnapshot
init|=
name|getLater
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastIndex
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|getTotalEntries
argument_list|()
operator|<
name|maxEntries
condition|)
block|{
name|modifiedList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportListingEntry
argument_list|(
name|dirId
argument_list|,
name|dirId
argument_list|,
name|parent
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setLastPath
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setLastIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|lastIndex
operator|==
operator|-
literal|1
operator|||
name|lastIndex
operator|<
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|ListIterator
argument_list|<
name|INode
argument_list|>
name|iterator
init|=
name|lastIndex
operator|!=
operator|-
literal|1
condition|?
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|listIterator
argument_list|(
name|lastIndex
argument_list|)
else|:
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|getTotalEntries
argument_list|()
operator|<
name|maxEntries
condition|)
block|{
name|INode
name|created
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|path
init|=
name|newPath
argument_list|(
name|parent
argument_list|,
name|created
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
name|createdList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportListingEntry
argument_list|(
name|dirId
argument_list|,
name|created
operator|.
name|getId
argument_list|()
argument_list|,
name|path
argument_list|,
name|created
operator|.
name|isReference
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setLastPath
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setLastIndex
argument_list|(
name|iterator
operator|.
name|nextIndex
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|setLastIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastIndex
operator|==
operator|-
literal|1
operator|||
name|lastIndex
operator|>=
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|ListIterator
argument_list|<
name|INode
argument_list|>
name|iterator
init|=
name|lastIndex
operator|!=
operator|-
literal|1
condition|?
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|listIterator
argument_list|(
name|lastIndex
operator|-
name|size
argument_list|)
else|:
name|diff
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|getTotalEntries
argument_list|()
operator|<
name|maxEntries
condition|)
block|{
specifier|final
name|INode
name|d
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|path
init|=
name|newPath
argument_list|(
name|parent
argument_list|,
name|d
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|target
init|=
name|findRenameTargetPath
argument_list|(
name|d
argument_list|,
name|laterSnapshot
argument_list|)
decl_stmt|;
specifier|final
name|DiffReportListingEntry
name|e
init|=
name|target
operator|!=
literal|null
condition|?
operator|new
name|DiffReportListingEntry
argument_list|(
name|dirId
argument_list|,
name|d
operator|.
name|getId
argument_list|()
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
name|target
argument_list|)
else|:
operator|new
name|DiffReportListingEntry
argument_list|(
name|dirId
argument_list|,
name|d
operator|.
name|getId
argument_list|()
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|deletedList
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setLastPath
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setLastIndex
argument_list|(
name|size
operator|+
name|iterator
operator|.
name|nextIndex
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|setLastIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|findRenameTargetPath (INode deleted, Snapshot laterSnapshot)
specifier|private
name|byte
index|[]
index|[]
name|findRenameTargetPath
parameter_list|(
name|INode
name|deleted
parameter_list|,
name|Snapshot
name|laterSnapshot
parameter_list|)
block|{
if|if
condition|(
name|deleted
operator|instanceof
name|INodeReference
operator|.
name|WithName
condition|)
block|{
return|return
name|snapshotRoot
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|findRenameTargetPath
argument_list|(
name|snapshotDiffScopeDir
argument_list|,
operator|(
name|INodeReference
operator|.
name|WithName
operator|)
name|deleted
argument_list|,
name|Snapshot
operator|.
name|getSnapshotId
argument_list|(
name|laterSnapshot
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|newPath (byte[][] parent, byte[] name)
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|newPath
parameter_list|(
name|byte
index|[]
index|[]
name|parent
parameter_list|,
name|byte
index|[]
name|name
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|fullPath
init|=
operator|new
name|byte
index|[
name|parent
operator|.
name|length
operator|+
literal|1
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|parent
argument_list|,
literal|0
argument_list|,
name|fullPath
argument_list|,
literal|0
argument_list|,
name|parent
operator|.
name|length
argument_list|)
expr_stmt|;
name|fullPath
index|[
name|fullPath
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|name
expr_stmt|;
return|return
name|fullPath
return|;
block|}
DECL|method|getEarlier ()
name|Snapshot
name|getEarlier
parameter_list|()
block|{
return|return
name|isFromEarlier
argument_list|()
condition|?
name|from
else|:
name|to
return|;
block|}
DECL|method|getLater ()
name|Snapshot
name|getLater
parameter_list|()
block|{
return|return
name|isFromEarlier
argument_list|()
condition|?
name|to
else|:
name|from
return|;
block|}
DECL|method|setLastPath (byte[][] lastPath)
specifier|public
name|void
name|setLastPath
parameter_list|(
name|byte
index|[]
index|[]
name|lastPath
parameter_list|)
block|{
name|this
operator|.
name|lastPath
operator|=
name|DFSUtilClient
operator|.
name|byteArray2bytes
argument_list|(
name|lastPath
argument_list|)
expr_stmt|;
block|}
DECL|method|setLastIndex (int idx)
specifier|public
name|void
name|setLastIndex
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|this
operator|.
name|lastIndex
operator|=
name|idx
expr_stmt|;
block|}
DECL|method|addFileDiff (INodeFile file, byte[][] relativePath)
name|boolean
name|addFileDiff
parameter_list|(
name|INodeFile
name|file
parameter_list|,
name|byte
index|[]
index|[]
name|relativePath
parameter_list|)
block|{
if|if
condition|(
name|getTotalEntries
argument_list|()
operator|<
name|maxEntries
condition|)
block|{
name|modifiedList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportListingEntry
argument_list|(
name|file
operator|.
name|getId
argument_list|()
argument_list|,
name|file
operator|.
name|getId
argument_list|()
argument_list|,
name|relativePath
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setLastPath
argument_list|(
name|relativePath
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** @return True if {@link #from} is earlier than {@link #to} */
DECL|method|isFromEarlier ()
name|boolean
name|isFromEarlier
parameter_list|()
block|{
return|return
name|Snapshot
operator|.
name|ID_COMPARATOR
operator|.
name|compare
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
operator|<
literal|0
return|;
block|}
DECL|method|getTotalEntries ()
specifier|private
name|int
name|getTotalEntries
parameter_list|()
block|{
return|return
name|createdList
operator|.
name|size
argument_list|()
operator|+
name|modifiedList
operator|.
name|size
argument_list|()
operator|+
name|deletedList
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Generate a {@link SnapshotDiffReportListing} based on detailed diff    * information.    *    * @return A {@link SnapshotDiffReportListing} describing the difference    */
DECL|method|generateReport ()
specifier|public
name|SnapshotDiffReportListing
name|generateReport
parameter_list|()
block|{
return|return
operator|new
name|SnapshotDiffReportListing
argument_list|(
name|lastPath
argument_list|,
name|modifiedList
argument_list|,
name|createdList
argument_list|,
name|deletedList
argument_list|,
name|lastIndex
argument_list|,
name|isFromEarlier
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

