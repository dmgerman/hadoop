begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.mover
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|mover
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Dispatcher
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Dispatcher
operator|.
name|DDatanode
operator|.
name|StorageGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|ExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|NameNodeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ErasureCodingPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Mover
specifier|public
class|class
name|Mover
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Mover
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|StorageMap
specifier|private
specifier|static
class|class
name|StorageMap
block|{
DECL|field|sources
specifier|private
specifier|final
name|StorageGroupMap
argument_list|<
name|Source
argument_list|>
name|sources
init|=
operator|new
name|StorageGroupMap
argument_list|<
name|Source
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|targets
specifier|private
specifier|final
name|StorageGroupMap
argument_list|<
name|StorageGroup
argument_list|>
name|targets
init|=
operator|new
name|StorageGroupMap
argument_list|<
name|StorageGroup
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|targetStorageTypeMap
specifier|private
specifier|final
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|StorageGroup
argument_list|>
argument_list|>
name|targetStorageTypeMap
init|=
operator|new
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|StorageGroup
argument_list|>
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|StorageMap ()
specifier|private
name|StorageMap
parameter_list|()
block|{
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getMovableTypes
argument_list|()
control|)
block|{
name|targetStorageTypeMap
operator|.
name|put
argument_list|(
name|t
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|StorageGroup
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add (Source source, StorageGroup target)
specifier|private
name|void
name|add
parameter_list|(
name|Source
name|source
parameter_list|,
name|StorageGroup
name|target
parameter_list|)
block|{
name|sources
operator|.
name|put
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|targets
operator|.
name|put
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|getTargetStorages
argument_list|(
name|target
operator|.
name|getStorageType
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSource (MLocation ml)
specifier|private
name|Source
name|getSource
parameter_list|(
name|MLocation
name|ml
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|sources
argument_list|,
name|ml
argument_list|)
return|;
block|}
DECL|method|getTarget (String uuid, StorageType storageType)
specifier|private
name|StorageGroup
name|getTarget
parameter_list|(
name|String
name|uuid
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
block|{
return|return
name|targets
operator|.
name|get
argument_list|(
name|uuid
argument_list|,
name|storageType
argument_list|)
return|;
block|}
DECL|method|get (StorageGroupMap<G> map, MLocation ml)
specifier|private
specifier|static
parameter_list|<
name|G
extends|extends
name|StorageGroup
parameter_list|>
name|G
name|get
parameter_list|(
name|StorageGroupMap
argument_list|<
name|G
argument_list|>
name|map
parameter_list|,
name|MLocation
name|ml
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|ml
operator|.
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|ml
operator|.
name|storageType
argument_list|)
return|;
block|}
DECL|method|getTargetStorages (StorageType t)
specifier|private
name|List
argument_list|<
name|StorageGroup
argument_list|>
name|getTargetStorages
parameter_list|(
name|StorageType
name|t
parameter_list|)
block|{
return|return
name|targetStorageTypeMap
operator|.
name|get
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
DECL|field|dispatcher
specifier|private
specifier|final
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|storages
specifier|private
specifier|final
name|StorageMap
name|storages
decl_stmt|;
DECL|field|targetPaths
specifier|private
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|targetPaths
decl_stmt|;
DECL|field|retryMaxAttempts
specifier|private
specifier|final
name|int
name|retryMaxAttempts
decl_stmt|;
DECL|field|retryCount
specifier|private
specifier|final
name|AtomicInteger
name|retryCount
decl_stmt|;
DECL|field|excludedPinnedBlocks
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|excludedPinnedBlocks
decl_stmt|;
DECL|field|blockStoragePolicies
specifier|private
specifier|final
name|BlockStoragePolicy
index|[]
name|blockStoragePolicies
decl_stmt|;
DECL|method|Mover (NameNodeConnector nnc, Configuration conf, AtomicInteger retryCount, Map<Long, Set<DatanodeInfo>> excludedPinnedBlocks)
name|Mover
parameter_list|(
name|NameNodeConnector
name|nnc
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|AtomicInteger
name|retryCount
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|excludedPinnedBlocks
parameter_list|)
block|{
specifier|final
name|long
name|movedWinWidth
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MOVEDWINWIDTH_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MOVEDWINWIDTH_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|moverThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MOVERTHREADS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MOVERTHREADS_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxConcurrentMovesPerNode
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxNoMoveInterval
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MAX_NO_MOVE_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MAX_NO_MOVE_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|retryMaxAttempts
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_RETRY_MAX_ATTEMPTS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MOVER_RETRY_MAX_ATTEMPTS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|retryCount
operator|=
name|retryCount
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
operator|new
name|Dispatcher
argument_list|(
name|nnc
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
name|movedWinWidth
argument_list|,
name|moverThreads
argument_list|,
literal|0
argument_list|,
name|maxConcurrentMovesPerNode
argument_list|,
name|maxNoMoveInterval
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|storages
operator|=
operator|new
name|StorageMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|targetPaths
operator|=
name|nnc
operator|.
name|getTargetPaths
argument_list|()
expr_stmt|;
name|this
operator|.
name|blockStoragePolicies
operator|=
operator|new
name|BlockStoragePolicy
index|[
literal|1
operator|<<
name|BlockStoragePolicySuite
operator|.
name|ID_BIT_LENGTH
index|]
expr_stmt|;
name|this
operator|.
name|excludedPinnedBlocks
operator|=
name|excludedPinnedBlocks
expr_stmt|;
block|}
DECL|method|init ()
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|initStoragePolicies
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeStorageReport
argument_list|>
name|reports
init|=
name|dispatcher
operator|.
name|init
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageReport
name|r
range|:
name|reports
control|)
block|{
specifier|final
name|DDatanode
name|dn
init|=
name|dispatcher
operator|.
name|newDatanode
argument_list|(
name|r
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getMovableTypes
argument_list|()
control|)
block|{
specifier|final
name|Source
name|source
init|=
name|dn
operator|.
name|addSource
argument_list|(
name|t
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
specifier|final
name|long
name|maxRemaining
init|=
name|getMaxRemaining
argument_list|(
name|r
argument_list|,
name|t
argument_list|)
decl_stmt|;
specifier|final
name|StorageGroup
name|target
init|=
name|maxRemaining
operator|>
literal|0L
condition|?
name|dn
operator|.
name|addTarget
argument_list|(
name|t
argument_list|,
name|maxRemaining
argument_list|)
else|:
literal|null
decl_stmt|;
name|storages
operator|.
name|add
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|initStoragePolicies ()
specifier|private
name|void
name|initStoragePolicies
parameter_list|()
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|BlockStoragePolicy
argument_list|>
name|policies
init|=
name|dispatcher
operator|.
name|getDistributedFileSystem
argument_list|()
operator|.
name|getAllStoragePolicies
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockStoragePolicy
name|policy
range|:
name|policies
control|)
block|{
name|this
operator|.
name|blockStoragePolicies
index|[
name|policy
operator|.
name|getId
argument_list|()
index|]
operator|=
name|policy
expr_stmt|;
block|}
block|}
DECL|method|run ()
specifier|private
name|ExitStatus
name|run
parameter_list|()
block|{
try|try
block|{
name|init
argument_list|()
expr_stmt|;
return|return
operator|new
name|Processor
argument_list|()
operator|.
name|processNamespace
argument_list|()
operator|.
name|getExitStatus
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|+
literal|".  Exiting ..."
argument_list|)
expr_stmt|;
return|return
name|ExitStatus
operator|.
name|ILLEGAL_ARGUMENTS
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|+
literal|".  Exiting ..."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|+
literal|".  Exiting ..."
argument_list|)
expr_stmt|;
return|return
name|ExitStatus
operator|.
name|IO_EXCEPTION
return|;
block|}
finally|finally
block|{
name|dispatcher
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|newDBlock (LocatedBlock lb, List<MLocation> locations, ErasureCodingPolicy ecPolicy)
name|DBlock
name|newDBlock
parameter_list|(
name|LocatedBlock
name|lb
parameter_list|,
name|List
argument_list|<
name|MLocation
argument_list|>
name|locations
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|)
block|{
name|Block
name|blk
init|=
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
decl_stmt|;
name|DBlock
name|db
decl_stmt|;
if|if
condition|(
name|lb
operator|.
name|isStriped
argument_list|()
condition|)
block|{
name|LocatedStripedBlock
name|lsb
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|lb
decl_stmt|;
name|byte
index|[]
name|indices
init|=
operator|new
name|byte
index|[
name|lsb
operator|.
name|getBlockIndices
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indices
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|lsb
operator|.
name|getBlockIndices
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|db
operator|=
operator|new
name|DBlockStriped
argument_list|(
name|blk
argument_list|,
name|indices
argument_list|,
operator|(
name|short
operator|)
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
argument_list|,
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db
operator|=
operator|new
name|DBlock
argument_list|(
name|blk
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MLocation
name|ml
range|:
name|locations
control|)
block|{
name|StorageGroup
name|source
init|=
name|storages
operator|.
name|getSource
argument_list|(
name|ml
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|addLocation
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|db
return|;
block|}
DECL|method|getMaxRemaining (DatanodeStorageReport report, StorageType t)
specifier|private
specifier|static
name|long
name|getMaxRemaining
parameter_list|(
name|DatanodeStorageReport
name|report
parameter_list|,
name|StorageType
name|t
parameter_list|)
block|{
name|long
name|max
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|StorageReport
name|r
range|:
name|report
operator|.
name|getStorageReports
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageType
argument_list|()
operator|==
name|t
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getRemaining
argument_list|()
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|r
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|max
return|;
block|}
comment|/**    * convert a snapshot path to non-snapshot path. E.g.,    * /foo/.snapshot/snapshot-name/bar --> /foo/bar    */
DECL|method|convertSnapshotPath (String[] pathComponents)
specifier|private
specifier|static
name|String
name|convertSnapshotPath
parameter_list|(
name|String
index|[]
name|pathComponents
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathComponents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pathComponents
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|pathComponents
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|Processor
class|class
name|Processor
block|{
DECL|field|dfs
specifier|private
specifier|final
name|DFSClient
name|dfs
decl_stmt|;
DECL|field|snapshottableDirs
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|snapshottableDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|Processor ()
name|Processor
parameter_list|()
block|{
name|dfs
operator|=
name|dispatcher
operator|.
name|getDistributedFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
expr_stmt|;
block|}
DECL|method|getSnapshottableDirs ()
specifier|private
name|void
name|getSnapshottableDirs
parameter_list|()
block|{
name|SnapshottableDirectoryStatus
index|[]
name|dirs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dirs
operator|=
name|dfs
operator|.
name|getSnapshottableDirListing
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get snapshottable directories."
operator|+
literal|" Ignore and continue."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SnapshottableDirectoryStatus
name|dir
range|:
name|dirs
control|)
block|{
name|snapshottableDirs
operator|.
name|add
argument_list|(
name|dir
operator|.
name|getFullPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return true if the given path is a snapshot path and the corresponding      * INode is still in the current fsdirectory.      */
DECL|method|isSnapshotPathInCurrent (String path)
specifier|private
name|boolean
name|isSnapshotPathInCurrent
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if the parent path contains "/.snapshot/", this is a snapshot path
if|if
condition|(
name|path
operator|.
name|contains
argument_list|(
name|HdfsConstants
operator|.
name|SEPARATOR_DOT_SNAPSHOT_DIR_SEPARATOR
argument_list|)
condition|)
block|{
name|String
index|[]
name|pathComponents
init|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|.
name|equals
argument_list|(
name|pathComponents
index|[
name|pathComponents
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
condition|)
block|{
comment|// this is a path for a specific snapshot (e.g., /foo/.snapshot/s1)
return|return
literal|false
return|;
block|}
name|String
name|nonSnapshotPath
init|=
name|convertSnapshotPath
argument_list|(
name|pathComponents
argument_list|)
decl_stmt|;
return|return
name|dfs
operator|.
name|getFileInfo
argument_list|(
name|nonSnapshotPath
argument_list|)
operator|!=
literal|null
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * @return whether there is still remaining migration work for the next      *         round      */
DECL|method|processNamespace ()
specifier|private
name|Result
name|processNamespace
parameter_list|()
throws|throws
name|IOException
block|{
name|getSnapshottableDirs
argument_list|()
expr_stmt|;
name|Result
name|result
init|=
operator|new
name|Result
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|target
range|:
name|targetPaths
control|)
block|{
name|processPath
argument_list|(
name|target
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|// wait for pending move to finish and retry the failed migration
name|boolean
name|hasFailed
init|=
name|Dispatcher
operator|.
name|waitForMoveCompletion
argument_list|(
name|storages
operator|.
name|targets
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Dispatcher
operator|.
name|checkForBlockPinningFailures
argument_list|(
name|excludedPinnedBlocks
argument_list|,
name|storages
operator|.
name|targets
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasSuccess
init|=
name|Dispatcher
operator|.
name|checkForSuccess
argument_list|(
name|storages
operator|.
name|targets
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasFailed
operator|&&
operator|!
name|hasSuccess
condition|)
block|{
if|if
condition|(
name|retryCount
operator|.
name|get
argument_list|()
operator|==
name|retryMaxAttempts
condition|)
block|{
name|result
operator|.
name|setRetryFailed
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to move some block's after "
operator|+
name|retryMaxAttempts
operator|+
literal|" retries."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
name|retryCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Reset retry count if no failure.
name|retryCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|updateHasRemaining
argument_list|(
name|hasFailed
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * @return whether there is still remaing migration work for the next      *         round      */
DECL|method|processPath (String fullPath, Result result)
specifier|private
name|void
name|processPath
parameter_list|(
name|String
name|fullPath
parameter_list|,
name|Result
name|result
parameter_list|)
block|{
for|for
control|(
name|byte
index|[]
name|lastReturnedName
init|=
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
init|;
condition|;
control|)
block|{
specifier|final
name|DirectoryListing
name|children
decl_stmt|;
try|try
block|{
name|children
operator|=
name|dfs
operator|.
name|listPaths
argument_list|(
name|fullPath
argument_list|,
name|lastReturnedName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to list directory "
operator|+
name|fullPath
operator|+
literal|". Ignore the directory and continue."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|HdfsFileStatus
name|child
range|:
name|children
operator|.
name|getPartialListing
argument_list|()
control|)
block|{
name|processRecursively
argument_list|(
name|fullPath
argument_list|,
name|child
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|children
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|lastReturnedName
operator|=
name|children
operator|.
name|getLastName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
block|}
comment|/** @return whether the migration requires next round */
DECL|method|processRecursively (String parent, HdfsFileStatus status, Result result)
specifier|private
name|void
name|processRecursively
parameter_list|(
name|String
name|parent
parameter_list|,
name|HdfsFileStatus
name|status
parameter_list|,
name|Result
name|result
parameter_list|)
block|{
name|String
name|fullPath
init|=
name|status
operator|.
name|getFullName
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|fullPath
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|fullPath
operator|=
name|fullPath
operator|+
name|Path
operator|.
name|SEPARATOR
expr_stmt|;
block|}
name|processPath
argument_list|(
name|fullPath
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// process snapshots if this is a snapshottable directory
if|if
condition|(
name|snapshottableDirs
operator|.
name|contains
argument_list|(
name|fullPath
argument_list|)
condition|)
block|{
specifier|final
name|String
name|dirSnapshot
init|=
name|fullPath
operator|+
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
decl_stmt|;
name|processPath
argument_list|(
name|dirSnapshot
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|status
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
comment|// file
try|try
block|{
if|if
condition|(
operator|!
name|isSnapshotPathInCurrent
argument_list|(
name|fullPath
argument_list|)
condition|)
block|{
comment|// the full path is a snapshot path but it is also included in the
comment|// current directory tree, thus ignore it.
name|processFile
argument_list|(
name|fullPath
argument_list|,
operator|(
name|HdfsLocatedFileStatus
operator|)
name|status
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to check the status of "
operator|+
name|parent
operator|+
literal|". Ignore it and continue."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** @return true if it is necessary to run another round of migration */
DECL|method|processFile (String fullPath, HdfsLocatedFileStatus status, Result result)
specifier|private
name|void
name|processFile
parameter_list|(
name|String
name|fullPath
parameter_list|,
name|HdfsLocatedFileStatus
name|status
parameter_list|,
name|Result
name|result
parameter_list|)
block|{
name|byte
name|policyId
init|=
name|status
operator|.
name|getStoragePolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|policyId
operator|==
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
condition|)
block|{
try|try
block|{
comment|// get default policy from namenode
name|policyId
operator|=
name|dfs
operator|.
name|getServerDefaults
argument_list|()
operator|.
name|getDefaultStoragePolicyId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get default policy for "
operator|+
name|fullPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|final
name|BlockStoragePolicy
name|policy
init|=
name|blockStoragePolicies
index|[
name|policyId
index|]
decl_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get the storage policy of file "
operator|+
name|fullPath
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
init|=
name|policy
operator|.
name|chooseStorageTypes
argument_list|(
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|status
operator|.
name|getErasureCodingPolicy
argument_list|()
decl_stmt|;
specifier|final
name|LocatedBlocks
name|locatedBlocks
init|=
name|status
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|lastBlkComplete
init|=
name|locatedBlocks
operator|.
name|isLastBlockComplete
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lbs
init|=
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lbs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|lbs
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
operator|!
name|lastBlkComplete
condition|)
block|{
comment|// last block is incomplete, skip it
continue|continue;
block|}
name|LocatedBlock
name|lb
init|=
name|lbs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lb
operator|.
name|isStriped
argument_list|()
condition|)
block|{
if|if
condition|(
name|ErasureCodingPolicyManager
operator|.
name|checkStoragePolicySuitableForECStripedMode
argument_list|(
name|policyId
argument_list|)
condition|)
block|{
name|types
operator|=
name|policy
operator|.
name|chooseStorageTypes
argument_list|(
operator|(
name|short
operator|)
name|lb
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Currently we support only limited policies (HOT, COLD, ALLSSD)
comment|// for EC striped mode files.
comment|// Mover tool will ignore to move the blocks if the storage policy
comment|// is not in EC Striped mode supported policies
name|LOG
operator|.
name|warn
argument_list|(
literal|"The storage policy "
operator|+
name|policy
operator|.
name|getName
argument_list|()
operator|+
literal|" is not suitable for Striped EC files. "
operator|+
literal|"So, Ignoring to move the blocks"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|final
name|StorageTypeDiff
name|diff
init|=
operator|new
name|StorageTypeDiff
argument_list|(
name|types
argument_list|,
name|lb
operator|.
name|getStorageTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|diff
operator|.
name|removeOverlap
argument_list|(
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|scheduleMoves4Block
argument_list|(
name|diff
argument_list|,
name|lb
argument_list|,
name|ecPolicy
argument_list|)
condition|)
block|{
name|result
operator|.
name|updateHasRemaining
argument_list|(
name|diff
operator|.
name|existing
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|diff
operator|.
name|expected
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// One block scheduled successfully, set noBlockMoved to false
name|result
operator|.
name|setNoBlockMoved
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|updateHasRemaining
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|scheduleMoves4Block (StorageTypeDiff diff, LocatedBlock lb, ErasureCodingPolicy ecPolicy)
name|boolean
name|scheduleMoves4Block
parameter_list|(
name|StorageTypeDiff
name|diff
parameter_list|,
name|LocatedBlock
name|lb
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|MLocation
argument_list|>
name|locations
init|=
name|MLocation
operator|.
name|toLocations
argument_list|(
name|lb
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|lb
operator|instanceof
name|LocatedStripedBlock
operator|)
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|locations
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DBlock
name|db
init|=
name|newDBlock
argument_list|(
name|lb
argument_list|,
name|locations
argument_list|,
name|ecPolicy
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|StorageType
name|t
range|:
name|diff
operator|.
name|existing
control|)
block|{
for|for
control|(
specifier|final
name|MLocation
name|ml
range|:
name|locations
control|)
block|{
specifier|final
name|Source
name|source
init|=
name|storages
operator|.
name|getSource
argument_list|(
name|ml
argument_list|)
decl_stmt|;
if|if
condition|(
name|ml
operator|.
name|storageType
operator|==
name|t
operator|&&
name|source
operator|!=
literal|null
condition|)
block|{
comment|// try to schedule one replica move.
if|if
condition|(
name|scheduleMoveReplica
argument_list|(
name|db
argument_list|,
name|source
argument_list|,
name|diff
operator|.
name|expected
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|scheduleMoveReplica (DBlock db, MLocation ml, List<StorageType> targetTypes)
name|boolean
name|scheduleMoveReplica
parameter_list|(
name|DBlock
name|db
parameter_list|,
name|MLocation
name|ml
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetTypes
parameter_list|)
block|{
specifier|final
name|Source
name|source
init|=
name|storages
operator|.
name|getSource
argument_list|(
name|ml
argument_list|)
decl_stmt|;
return|return
name|source
operator|==
literal|null
condition|?
literal|false
else|:
name|scheduleMoveReplica
argument_list|(
name|db
argument_list|,
name|source
argument_list|,
name|targetTypes
argument_list|)
return|;
block|}
DECL|method|scheduleMoveReplica (DBlock db, Source source, List<StorageType> targetTypes)
name|boolean
name|scheduleMoveReplica
parameter_list|(
name|DBlock
name|db
parameter_list|,
name|Source
name|source
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetTypes
parameter_list|)
block|{
comment|// Match storage on the same node
if|if
condition|(
name|chooseTargetInSameNode
argument_list|(
name|db
argument_list|,
name|source
argument_list|,
name|targetTypes
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Check the given block is pinned in the source datanode. A pinned block
comment|// can't be moved to a different datanode. So we can skip adding these
comment|// blocks to different nodes.
name|long
name|blockId
init|=
name|db
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludedPinnedBlocks
operator|.
name|containsKey
argument_list|(
name|blockId
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|locs
init|=
name|excludedPinnedBlocks
operator|.
name|get
argument_list|(
name|blockId
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|locs
control|)
block|{
if|if
condition|(
name|source
operator|.
name|getDatanodeInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|dn
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|dispatcher
operator|.
name|getCluster
argument_list|()
operator|.
name|isNodeGroupAware
argument_list|()
condition|)
block|{
if|if
condition|(
name|chooseTarget
argument_list|(
name|db
argument_list|,
name|source
argument_list|,
name|targetTypes
argument_list|,
name|Matcher
operator|.
name|SAME_NODE_GROUP
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// Then, match nodes on the same rack
if|if
condition|(
name|chooseTarget
argument_list|(
name|db
argument_list|,
name|source
argument_list|,
name|targetTypes
argument_list|,
name|Matcher
operator|.
name|SAME_RACK
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// At last, match all remaining nodes
return|return
name|chooseTarget
argument_list|(
name|db
argument_list|,
name|source
argument_list|,
name|targetTypes
argument_list|,
name|Matcher
operator|.
name|ANY_OTHER
argument_list|)
return|;
block|}
comment|/**      * Choose the target storage within same Datanode if possible.      */
DECL|method|chooseTargetInSameNode (DBlock db, Source source, List<StorageType> targetTypes)
name|boolean
name|chooseTargetInSameNode
parameter_list|(
name|DBlock
name|db
parameter_list|,
name|Source
name|source
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetTypes
parameter_list|)
block|{
for|for
control|(
name|StorageType
name|t
range|:
name|targetTypes
control|)
block|{
name|StorageGroup
name|target
init|=
name|storages
operator|.
name|getTarget
argument_list|(
name|source
operator|.
name|getDatanodeInfo
argument_list|()
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
specifier|final
name|PendingMove
name|pm
init|=
name|source
operator|.
name|addPendingMove
argument_list|(
name|db
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|pm
operator|!=
literal|null
condition|)
block|{
name|dispatcher
operator|.
name|executePendingMove
argument_list|(
name|pm
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|chooseTarget (DBlock db, Source source, List<StorageType> targetTypes, Matcher matcher)
name|boolean
name|chooseTarget
parameter_list|(
name|DBlock
name|db
parameter_list|,
name|Source
name|source
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetTypes
parameter_list|,
name|Matcher
name|matcher
parameter_list|)
block|{
specifier|final
name|NetworkTopology
name|cluster
init|=
name|dispatcher
operator|.
name|getCluster
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|targetTypes
control|)
block|{
specifier|final
name|List
argument_list|<
name|StorageGroup
argument_list|>
name|targets
init|=
name|storages
operator|.
name|getTargetStorages
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|targets
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageGroup
name|target
range|:
name|targets
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|cluster
argument_list|,
name|source
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|,
name|target
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|PendingMove
name|pm
init|=
name|source
operator|.
name|addPendingMove
argument_list|(
name|db
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|pm
operator|!=
literal|null
condition|)
block|{
name|dispatcher
operator|.
name|executePendingMove
argument_list|(
name|pm
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|class|MLocation
specifier|static
class|class
name|MLocation
block|{
DECL|field|datanode
specifier|final
name|DatanodeInfo
name|datanode
decl_stmt|;
DECL|field|storageType
specifier|final
name|StorageType
name|storageType
decl_stmt|;
DECL|field|size
specifier|final
name|long
name|size
decl_stmt|;
DECL|method|MLocation (DatanodeInfo datanode, StorageType storageType, long size)
name|MLocation
parameter_list|(
name|DatanodeInfo
name|datanode
parameter_list|,
name|StorageType
name|storageType
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|datanode
operator|=
name|datanode
expr_stmt|;
name|this
operator|.
name|storageType
operator|=
name|storageType
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
DECL|method|toLocations (LocatedBlock lb)
specifier|static
name|List
argument_list|<
name|MLocation
argument_list|>
name|toLocations
parameter_list|(
name|LocatedBlock
name|lb
parameter_list|)
block|{
specifier|final
name|DatanodeInfo
index|[]
name|datanodeInfos
init|=
name|lb
operator|.
name|getLocations
argument_list|()
decl_stmt|;
specifier|final
name|StorageType
index|[]
name|storageTypes
init|=
name|lb
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
specifier|final
name|long
name|size
init|=
name|lb
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MLocation
argument_list|>
name|locations
init|=
operator|new
name|LinkedList
argument_list|<
name|MLocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|datanodeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
operator|new
name|MLocation
argument_list|(
name|datanodeInfos
index|[
name|i
index|]
argument_list|,
name|storageTypes
index|[
name|i
index|]
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|class|StorageTypeDiff
specifier|static
class|class
name|StorageTypeDiff
block|{
DECL|field|expected
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|expected
decl_stmt|;
DECL|field|existing
specifier|final
name|List
argument_list|<
name|StorageType
argument_list|>
name|existing
decl_stmt|;
DECL|method|StorageTypeDiff (List<StorageType> expected, StorageType[] existing)
name|StorageTypeDiff
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|expected
parameter_list|,
name|StorageType
index|[]
name|existing
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
operator|new
name|LinkedList
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|this
operator|.
name|existing
operator|=
operator|new
name|LinkedList
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|existing
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove the overlap between the expected types and the existing types.      * @param  ignoreNonMovable ignore non-movable storage types      *         by removing them from both expected and existing storage type list      *         to prevent non-movable storage from being moved.      * @returns if the existing types or the expected types is empty after      *         removing the overlap.      */
DECL|method|removeOverlap (boolean ignoreNonMovable)
name|boolean
name|removeOverlap
parameter_list|(
name|boolean
name|ignoreNonMovable
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|StorageType
argument_list|>
name|i
init|=
name|existing
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|StorageType
name|t
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|remove
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ignoreNonMovable
condition|)
block|{
name|removeNonMovable
argument_list|(
name|existing
argument_list|)
expr_stmt|;
name|removeNonMovable
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
return|return
name|expected
operator|.
name|isEmpty
argument_list|()
operator|||
name|existing
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|removeNonMovable (List<StorageType> types)
name|void
name|removeNonMovable
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|types
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|StorageType
argument_list|>
name|i
init|=
name|types
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|StorageType
name|t
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|isMovable
argument_list|()
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"{expected="
operator|+
name|expected
operator|+
literal|", existing="
operator|+
name|existing
operator|+
literal|"}"
return|;
block|}
block|}
DECL|method|checkKeytabAndInit (Configuration conf)
specifier|private
specifier|static
name|void
name|checkKeytabAndInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_KEYTAB_ENABLED_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MOVER_KEYTAB_ENABLED_DEFAULT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Keytab is configured, will login using keytab."
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_ADDRESS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MOVER_ADDRESS_DEFAULT
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|socAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|,
literal|0
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MOVER_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|login
argument_list|(
name|conf
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MOVER_KEYTAB_FILE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MOVER_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|socAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|run (Map<URI, List<Path>> namenodes, Configuration conf)
specifier|static
name|int
name|run
parameter_list|(
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|namenodes
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|long
name|sleeptime
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HEARTBEAT_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|*
literal|2000
operator|+
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|*
literal|1000
decl_stmt|;
name|AtomicInteger
name|retryCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// TODO: Need to limit the size of the pinned blocks to limit memory usage
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|excludedPinnedBlocks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"namenodes = "
operator|+
name|namenodes
argument_list|)
expr_stmt|;
name|checkKeytabAndInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NameNodeConnector
argument_list|>
name|connectors
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
try|try
block|{
name|connectors
operator|=
name|NameNodeConnector
operator|.
name|newNameNodeConnectors
argument_list|(
name|namenodes
argument_list|,
name|Mover
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
argument_list|,
name|conf
argument_list|,
name|NameNodeConnector
operator|.
name|DEFAULT_MAX_IDLE_ITERATIONS
argument_list|)
expr_stmt|;
while|while
condition|(
name|connectors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|connectors
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|NameNodeConnector
argument_list|>
name|iter
init|=
name|connectors
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NameNodeConnector
name|nnc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Mover
name|m
init|=
operator|new
name|Mover
argument_list|(
name|nnc
argument_list|,
name|conf
argument_list|,
name|retryCount
argument_list|,
name|excludedPinnedBlocks
argument_list|)
decl_stmt|;
specifier|final
name|ExitStatus
name|r
init|=
name|m
operator|.
name|run
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|ExitStatus
operator|.
name|SUCCESS
condition|)
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|nnc
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|!=
name|ExitStatus
operator|.
name|IN_PROGRESS
condition|)
block|{
if|if
condition|(
name|r
operator|==
name|ExitStatus
operator|.
name|NO_MOVE_PROGRESS
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to move some blocks after "
operator|+
name|m
operator|.
name|retryMaxAttempts
operator|+
literal|" retries. Exiting..."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|==
name|ExitStatus
operator|.
name|NO_MOVE_BLOCK
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Some blocks can't be moved. Exiting..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Mover failed. Exiting with status "
operator|+
name|r
operator|+
literal|"... "
argument_list|)
expr_stmt|;
block|}
comment|// must be an error statue, return
return|return
name|r
operator|.
name|getExitCode
argument_list|()
return|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleeptime
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mover Successful: all blocks satisfy"
operator|+
literal|" the specified storage policy. Exiting..."
argument_list|)
expr_stmt|;
return|return
name|ExitStatus
operator|.
name|SUCCESS
operator|.
name|getExitCode
argument_list|()
return|;
block|}
finally|finally
block|{
for|for
control|(
name|NameNodeConnector
name|nnc
range|:
name|connectors
control|)
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|nnc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Cli
specifier|public
specifier|static
class|class
name|Cli
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"Usage: hdfs mover "
operator|+
literal|"[-p<files/dirs> | -f<local file>]"
operator|+
literal|"\n\t-p<files/dirs>\ta space separated list of HDFS files/dirs to migrate."
operator|+
literal|"\n\t-f<local file>\ta local file containing a list of HDFS files/dirs to migrate."
decl_stmt|;
DECL|method|buildCliOptions ()
specifier|private
specifier|static
name|Options
name|buildCliOptions
parameter_list|()
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|Option
name|file
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"pathsFile"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"a local file containing files/dirs to migrate"
argument_list|)
operator|.
name|create
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|Option
name|paths
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"paths"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"specify space separated files/dirs to migrate"
argument_list|)
operator|.
name|create
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|OptionGroup
name|group
init|=
operator|new
name|OptionGroup
argument_list|()
decl_stmt|;
name|group
operator|.
name|addOption
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|group
operator|.
name|addOption
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOptionGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
return|return
name|opts
return|;
block|}
DECL|method|readPathFile (String file)
specifier|private
specifier|static
name|String
index|[]
name|readPathFile
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getNameNodePaths (CommandLine line, Configuration conf)
specifier|private
specifier|static
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|getNameNodePaths
parameter_list|(
name|CommandLine
name|line
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|String
index|[]
name|paths
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"f"
argument_list|)
condition|)
block|{
name|paths
operator|=
name|readPathFile
argument_list|(
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"p"
argument_list|)
condition|)
block|{
name|paths
operator|=
name|line
operator|.
name|getOptionValues
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|URI
argument_list|>
name|namenodes
init|=
name|DFSUtil
operator|.
name|getInternalNsRpcUris
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|==
literal|null
operator|||
name|paths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|URI
name|namenode
range|:
name|namenodes
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|namenode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|final
name|URI
name|singleNs
init|=
name|namenodes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|namenodes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
else|:
literal|null
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|isUriPathAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The path "
operator|+
name|target
operator|+
literal|" is not absolute"
argument_list|)
throw|;
block|}
name|URI
name|targetUri
init|=
name|target
operator|.
name|toUri
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|targetUri
operator|.
name|getAuthority
argument_list|()
operator|==
literal|null
operator|||
name|targetUri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|)
operator|&&
name|singleNs
operator|==
literal|null
condition|)
block|{
comment|// each path must contains both scheme and authority information
comment|// unless there is only one name service specified in the
comment|// configuration
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The path "
operator|+
name|target
operator|+
literal|" does not contain scheme and authority thus cannot identify"
operator|+
literal|" its name service"
argument_list|)
throw|;
block|}
name|URI
name|key
init|=
name|singleNs
decl_stmt|;
if|if
condition|(
name|singleNs
operator|==
literal|null
condition|)
block|{
name|key
operator|=
operator|new
name|URI
argument_list|(
name|targetUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|targetUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|namenodes
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot resolve the path "
operator|+
name|target
operator|+
literal|". The namenode services specified in the "
operator|+
literal|"configuration: "
operator|+
name|namenodes
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|targets
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|targets
operator|==
literal|null
condition|)
block|{
name|targets
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|targets
argument_list|)
expr_stmt|;
block|}
name|targets
operator|.
name|add
argument_list|(
name|Path
operator|.
name|getPathWithoutSchemeAndAuthority
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNameNodePathsToMove (Configuration conf, String... args)
specifier|static
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|getNameNodePathsToMove
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Options
name|opts
init|=
name|buildCliOptions
argument_list|()
decl_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|commandLine
init|=
name|parser
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|getNameNodePaths
argument_list|(
name|commandLine
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|URI
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|map
init|=
name|getNameNodePathsToMove
argument_list|(
name|conf
argument_list|,
name|args
argument_list|)
decl_stmt|;
return|return
name|Mover
operator|.
name|run
argument_list|(
name|map
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|+
literal|".  Exiting ..."
argument_list|)
expr_stmt|;
return|return
name|ExitStatus
operator|.
name|IO_EXCEPTION
operator|.
name|getExitCode
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|+
literal|".  Exiting ..."
argument_list|)
expr_stmt|;
return|return
name|ExitStatus
operator|.
name|INTERRUPTED
operator|.
name|getExitCode
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|+
literal|".  Exiting ..."
argument_list|)
expr_stmt|;
return|return
name|ExitStatus
operator|.
name|ILLEGAL_ARGUMENTS
operator|.
name|getExitCode
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|+
literal|".  Exiting ..."
argument_list|)
expr_stmt|;
return|return
name|ExitStatus
operator|.
name|ILLEGAL_ARGUMENTS
operator|.
name|getExitCode
argument_list|()
return|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%-24s "
argument_list|,
name|DateFormat
operator|.
name|getDateTimeInstance
argument_list|()
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mover took "
operator|+
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Result
specifier|private
specifier|static
class|class
name|Result
block|{
DECL|field|hasRemaining
specifier|private
name|boolean
name|hasRemaining
decl_stmt|;
DECL|field|noBlockMoved
specifier|private
name|boolean
name|noBlockMoved
decl_stmt|;
DECL|field|retryFailed
specifier|private
name|boolean
name|retryFailed
decl_stmt|;
DECL|method|Result ()
name|Result
parameter_list|()
block|{
name|hasRemaining
operator|=
literal|false
expr_stmt|;
name|noBlockMoved
operator|=
literal|true
expr_stmt|;
name|retryFailed
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|isHasRemaining ()
name|boolean
name|isHasRemaining
parameter_list|()
block|{
return|return
name|hasRemaining
return|;
block|}
DECL|method|isNoBlockMoved ()
name|boolean
name|isNoBlockMoved
parameter_list|()
block|{
return|return
name|noBlockMoved
return|;
block|}
DECL|method|updateHasRemaining (boolean hasRemaining)
name|void
name|updateHasRemaining
parameter_list|(
name|boolean
name|hasRemaining
parameter_list|)
block|{
name|this
operator|.
name|hasRemaining
operator||=
name|hasRemaining
expr_stmt|;
block|}
DECL|method|setNoBlockMoved (boolean noBlockMoved)
name|void
name|setNoBlockMoved
parameter_list|(
name|boolean
name|noBlockMoved
parameter_list|)
block|{
name|this
operator|.
name|noBlockMoved
operator|=
name|noBlockMoved
expr_stmt|;
block|}
DECL|method|setRetryFailed ()
name|void
name|setRetryFailed
parameter_list|()
block|{
name|this
operator|.
name|retryFailed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * @return NO_MOVE_PROGRESS if no progress in move after some retry. Return      *         SUCCESS if all moves are success and there is no remaining move.      *         Return NO_MOVE_BLOCK if there moves available but all the moves      *         cannot be scheduled. Otherwise, return IN_PROGRESS since there      *         must be some remaining moves.      */
DECL|method|getExitStatus ()
name|ExitStatus
name|getExitStatus
parameter_list|()
block|{
if|if
condition|(
name|retryFailed
condition|)
block|{
return|return
name|ExitStatus
operator|.
name|NO_MOVE_PROGRESS
return|;
block|}
else|else
block|{
return|return
operator|!
name|isHasRemaining
argument_list|()
condition|?
name|ExitStatus
operator|.
name|SUCCESS
else|:
name|isNoBlockMoved
argument_list|()
condition|?
name|ExitStatus
operator|.
name|NO_MOVE_BLOCK
else|:
name|ExitStatus
operator|.
name|IN_PROGRESS
return|;
block|}
block|}
block|}
comment|/**    * Run a Mover in command line.    *    * @param args Command line arguments    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|DFSUtil
operator|.
name|parseHelpArgument
argument_list|(
name|args
argument_list|,
name|Cli
operator|.
name|USAGE
argument_list|,
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|,
operator|new
name|Cli
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exiting "
operator|+
name|Mover
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" due to an exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

