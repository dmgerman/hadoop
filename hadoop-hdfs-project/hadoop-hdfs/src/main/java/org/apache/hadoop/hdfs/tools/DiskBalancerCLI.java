begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|BasicParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|command
operator|.
name|CancelCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|command
operator|.
name|ExecuteCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|command
operator|.
name|HelpCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|command
operator|.
name|PlanCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|command
operator|.
name|QueryCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|command
operator|.
name|ReportCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_comment
comment|/**  * DiskBalancer is a tool that can be used to ensure that data is spread evenly  * across volumes of same storage type.  *<p>  * For example, if you have 3 disks, with 100 GB , 600 GB and 200 GB on each  * disk, this tool will ensure that each disk will have 300 GB.  *<p>  * This tool can be run while data nodes are fully functional.  *<p>  * At very high level diskbalancer computes a set of moves that will make disk  * utilization equal and then those moves are executed by the datanode.  */
end_comment

begin_class
DECL|class|DiskBalancerCLI
specifier|public
class|class
name|DiskBalancerCLI
extends|extends
name|Configured
implements|implements
name|Tool
block|{
comment|/**    * Computes a plan for a given set of nodes.    */
DECL|field|PLAN
specifier|public
specifier|static
specifier|final
name|String
name|PLAN
init|=
literal|"plan"
decl_stmt|;
comment|/**    * Output file name, for commands like report, plan etc. This is an optional    * argument, by default diskbalancer will write all its output to    * /system/reports/diskbalancer of the current cluster it is operating    * against.    */
DECL|field|OUTFILE
specifier|public
specifier|static
specifier|final
name|String
name|OUTFILE
init|=
literal|"out"
decl_stmt|;
comment|/**    * Help for the program.    */
DECL|field|HELP
specifier|public
specifier|static
specifier|final
name|String
name|HELP
init|=
literal|"help"
decl_stmt|;
comment|/**    * Percentage of data unevenness that we are willing to live with. For example    * - a value like 10 indicates that we are okay with 10 % +/- from    * idealStorage Target.    */
DECL|field|THRESHOLD
specifier|public
specifier|static
specifier|final
name|String
name|THRESHOLD
init|=
literal|"thresholdPercentage"
decl_stmt|;
comment|/**    * Specifies the maximum disk bandwidth to use per second.    */
DECL|field|BANDWIDTH
specifier|public
specifier|static
specifier|final
name|String
name|BANDWIDTH
init|=
literal|"bandwidth"
decl_stmt|;
comment|/**    * Specifies the maximum errors to tolerate.    */
DECL|field|MAXERROR
specifier|public
specifier|static
specifier|final
name|String
name|MAXERROR
init|=
literal|"maxerror"
decl_stmt|;
comment|/**    * Executes a given plan file on the target datanode.    */
DECL|field|EXECUTE
specifier|public
specifier|static
specifier|final
name|String
name|EXECUTE
init|=
literal|"execute"
decl_stmt|;
comment|/**    * Skips date check(now by default the plan is valid for 24 hours), and force    * execute the plan.    */
DECL|field|SKIPDATECHECK
specifier|public
specifier|static
specifier|final
name|String
name|SKIPDATECHECK
init|=
literal|"skipDateCheck"
decl_stmt|;
comment|/**    * The report command prints out a disk fragmentation report about the data    * cluster. By default it prints the DEFAULT_TOP machines names with high    * nodeDataDensity {DiskBalancerDataNode#getNodeDataDensity} values. This    * means that these are the nodes that deviates from the ideal data    * distribution.    */
DECL|field|REPORT
specifier|public
specifier|static
specifier|final
name|String
name|REPORT
init|=
literal|"report"
decl_stmt|;
comment|/**    * specify top number of nodes to be processed.    */
DECL|field|TOP
specifier|public
specifier|static
specifier|final
name|String
name|TOP
init|=
literal|"top"
decl_stmt|;
comment|/**    * specify default top number of nodes to be processed.    */
DECL|field|DEFAULT_TOP
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TOP
init|=
literal|100
decl_stmt|;
comment|/**    * Name or address of the node to execute against.    */
DECL|field|NODE
specifier|public
specifier|static
specifier|final
name|String
name|NODE
init|=
literal|"node"
decl_stmt|;
comment|/**    * Runs the command in verbose mode.    */
DECL|field|VERBOSE
specifier|public
specifier|static
specifier|final
name|String
name|VERBOSE
init|=
literal|"v"
decl_stmt|;
DECL|field|PLAN_VERSION
specifier|public
specifier|static
specifier|final
name|int
name|PLAN_VERSION
init|=
literal|1
decl_stmt|;
comment|/**    * Reports the status of disk balancer operation.    */
DECL|field|QUERY
specifier|public
specifier|static
specifier|final
name|String
name|QUERY
init|=
literal|"query"
decl_stmt|;
comment|/**    * Cancels a running plan.    */
DECL|field|CANCEL
specifier|public
specifier|static
specifier|final
name|String
name|CANCEL
init|=
literal|"cancel"
decl_stmt|;
comment|/**    * Template for the Before File. It is node.before.json.    */
DECL|field|BEFORE_TEMPLATE
specifier|public
specifier|static
specifier|final
name|String
name|BEFORE_TEMPLATE
init|=
literal|"%s.before.json"
decl_stmt|;
comment|/**    * Template for the plan file. it is node.plan.json.    */
DECL|field|PLAN_TEMPLATE
specifier|public
specifier|static
specifier|final
name|String
name|PLAN_TEMPLATE
init|=
literal|"%s.plan.json"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DiskBalancerCLI
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PLAN_OPTIONS
specifier|private
specifier|static
specifier|final
name|Options
name|PLAN_OPTIONS
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
DECL|field|EXECUTE_OPTIONS
specifier|private
specifier|static
specifier|final
name|Options
name|EXECUTE_OPTIONS
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
DECL|field|QUERY_OPTIONS
specifier|private
specifier|static
specifier|final
name|Options
name|QUERY_OPTIONS
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
DECL|field|HELP_OPTIONS
specifier|private
specifier|static
specifier|final
name|Options
name|HELP_OPTIONS
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
DECL|field|CANCEL_OPTIONS
specifier|private
specifier|static
specifier|final
name|Options
name|CANCEL_OPTIONS
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
DECL|field|REPORT_OPTIONS
specifier|private
specifier|static
specifier|final
name|Options
name|REPORT_OPTIONS
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
DECL|field|printStream
specifier|private
specifier|final
name|PrintStream
name|printStream
decl_stmt|;
DECL|field|currentCommand
specifier|private
name|Command
name|currentCommand
init|=
literal|null
decl_stmt|;
comment|/**    * Construct a DiskBalancer.    *    * @param conf    */
DECL|method|DiskBalancerCLI (Configuration conf)
specifier|public
name|DiskBalancerCLI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|DiskBalancerCLI (Configuration conf, final PrintStream printStream)
specifier|public
name|DiskBalancerCLI
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|PrintStream
name|printStream
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|printStream
operator|=
name|printStream
expr_stmt|;
block|}
comment|/**    * Main for the  DiskBalancer Command handling.    *    * @param argv - System Args Strings[]    * @throws Exception    */
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|DiskBalancerCLI
name|shell
init|=
operator|new
name|DiskBalancerCLI
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|res
init|=
literal|0
decl_stmt|;
try|try
block|{
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
literal|1
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute the command with the given arguments.    *    * @param args command specific arguments.    * @return exit code.    * @throws Exception    */
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|opts
init|=
name|getOpts
argument_list|()
decl_stmt|;
name|CommandLine
name|cmd
init|=
name|parseArgs
argument_list|(
name|args
argument_list|,
name|opts
argument_list|)
decl_stmt|;
return|return
name|dispatch
argument_list|(
name|cmd
argument_list|,
name|opts
argument_list|)
return|;
block|}
comment|/**    * returns the Command Line Options.    *    * @return Options    */
DECL|method|getOpts ()
specifier|private
name|Options
name|getOpts
parameter_list|()
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|addPlanCommands
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|addHelpCommands
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|addExecuteCommands
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|addQueryCommands
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|addCancelCommands
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|addReportCommands
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
name|opts
return|;
block|}
comment|/**    * Returns Plan options.    *    * @return Options.    */
DECL|method|getPlanOptions ()
specifier|public
specifier|static
name|Options
name|getPlanOptions
parameter_list|()
block|{
return|return
name|PLAN_OPTIONS
return|;
block|}
comment|/**    * Returns help options.    *    * @return - help options.    */
DECL|method|getHelpOptions ()
specifier|public
specifier|static
name|Options
name|getHelpOptions
parameter_list|()
block|{
return|return
name|HELP_OPTIONS
return|;
block|}
comment|/**    * Retuns execute options.    *    * @return - execute options.    */
DECL|method|getExecuteOptions ()
specifier|public
specifier|static
name|Options
name|getExecuteOptions
parameter_list|()
block|{
return|return
name|EXECUTE_OPTIONS
return|;
block|}
comment|/**    * Returns Query Options.    *    * @return query Options    */
DECL|method|getQueryOptions ()
specifier|public
specifier|static
name|Options
name|getQueryOptions
parameter_list|()
block|{
return|return
name|QUERY_OPTIONS
return|;
block|}
comment|/**    * Returns Cancel Options.    *    * @return Options    */
DECL|method|getCancelOptions ()
specifier|public
specifier|static
name|Options
name|getCancelOptions
parameter_list|()
block|{
return|return
name|CANCEL_OPTIONS
return|;
block|}
comment|/**    * Returns Report Options.    *    * @return Options    */
DECL|method|getReportOptions ()
specifier|public
specifier|static
name|Options
name|getReportOptions
parameter_list|()
block|{
return|return
name|REPORT_OPTIONS
return|;
block|}
comment|/**    * Adds commands for plan command.    *    * @return Options.    */
DECL|method|addPlanCommands (Options opt)
specifier|private
name|void
name|addPlanCommands
parameter_list|(
name|Options
name|opt
parameter_list|)
block|{
name|Option
name|plan
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|PLAN
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Hostname, IP address or UUID of datanode "
operator|+
literal|"for which a plan is created."
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
name|getPlanOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|Option
name|outFile
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OUTFILE
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Local path of file to write output to, if not specified "
operator|+
literal|"defaults will be used."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getPlanOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|outFile
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|outFile
argument_list|)
expr_stmt|;
name|Option
name|bandwidth
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|BANDWIDTH
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Maximum disk bandwidth (MB/s) in integer to be consumed by "
operator|+
literal|"diskBalancer. e.g. 10 MB/s."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getPlanOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
name|Option
name|threshold
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|THRESHOLD
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Percentage of data skew that is tolerated before"
operator|+
literal|" disk balancer starts working. For example, if"
operator|+
literal|" total data on a 2 disk node is 100 GB then disk"
operator|+
literal|" balancer calculates the expected value on each disk,"
operator|+
literal|" which is 50 GB. If the tolerance is 10% then data"
operator|+
literal|" on a single disk needs to be more than 60 GB"
operator|+
literal|" (50 GB + 10% tolerance value) for Disk balancer to"
operator|+
literal|" balance the disks."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getPlanOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|threshold
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|threshold
argument_list|)
expr_stmt|;
name|Option
name|maxError
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|MAXERROR
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Describes how many errors "
operator|+
literal|"can be tolerated while copying between a pair of disks."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getPlanOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|maxError
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|maxError
argument_list|)
expr_stmt|;
name|Option
name|verbose
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|VERBOSE
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Print out the summary of the plan on console"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getPlanOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|verbose
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|verbose
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds Help to the options.    */
DECL|method|addHelpCommands (Options opt)
specifier|private
name|void
name|addHelpCommands
parameter_list|(
name|Options
name|opt
parameter_list|)
block|{
name|Option
name|help
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|HELP
argument_list|)
operator|.
name|hasOptionalArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"valid commands are plan | execute | query | cancel"
operator|+
literal|" | report"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getHelpOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|help
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds execute command options.    *    * @param opt Options    */
DECL|method|addExecuteCommands (Options opt)
specifier|private
name|void
name|addExecuteCommands
parameter_list|(
name|Options
name|opt
parameter_list|)
block|{
name|Option
name|execute
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|EXECUTE
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Takes a plan file and "
operator|+
literal|"submits it for execution by the datanode."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getExecuteOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|execute
argument_list|)
expr_stmt|;
name|Option
name|skipDateCheck
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|SKIPDATECHECK
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"skips the date check and force execute the plan"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getExecuteOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|skipDateCheck
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|execute
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|skipDateCheck
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds query command options.    *    * @param opt Options    */
DECL|method|addQueryCommands (Options opt)
specifier|private
name|void
name|addQueryCommands
parameter_list|(
name|Options
name|opt
parameter_list|)
block|{
name|Option
name|query
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|QUERY
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Queries the disk balancer "
operator|+
literal|"status of a given datanode."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getQueryOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|// Please note: Adding this only to Query options since -v is already
comment|// added to global table.
name|Option
name|verbose
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|VERBOSE
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Prints details of the plan that is being executed "
operator|+
literal|"on the node."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getQueryOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|verbose
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds cancel command options.    *    * @param opt Options    */
DECL|method|addCancelCommands (Options opt)
specifier|private
name|void
name|addCancelCommands
parameter_list|(
name|Options
name|opt
parameter_list|)
block|{
name|Option
name|cancel
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|CANCEL
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Cancels a running plan using a plan file."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getCancelOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
name|Option
name|node
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|NODE
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Cancels a running plan using a plan ID and hostName"
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getCancelOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds report command options.    *    * @param opt Options    */
DECL|method|addReportCommands (Options opt)
specifier|private
name|void
name|addReportCommands
parameter_list|(
name|Options
name|opt
parameter_list|)
block|{
name|Option
name|report
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|REPORT
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"List nodes that will benefit from running "
operator|+
literal|"DiskBalancer."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getReportOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|Option
name|top
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|TOP
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"specify the number of nodes to be listed which has"
operator|+
literal|" data imbalance."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getReportOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|Option
name|node
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|NODE
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Datanode address, "
operator|+
literal|"it can be DataNodeID, IP or hostname."
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getReportOptions
argument_list|()
operator|.
name|addOption
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|opt
operator|.
name|addOption
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**    * This function parses all command line arguments and returns the appropriate    * values.    *    * @param argv - Argv from main    * @return CommandLine    */
DECL|method|parseArgs (String[] argv, Options opts)
specifier|private
name|CommandLine
name|parseArgs
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|Options
name|opts
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
block|{
name|BasicParser
name|parser
init|=
operator|new
name|BasicParser
argument_list|()
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|argv
argument_list|)
return|;
block|}
comment|/**    * Gets current command associated with this instance of DiskBalancer.    */
DECL|method|getCurrentCommand ()
specifier|public
name|Command
name|getCurrentCommand
parameter_list|()
block|{
return|return
name|currentCommand
return|;
block|}
comment|/**    * Dispatches calls to the right command Handler classes.    *    * @param cmd  - CommandLine    * @param opts options of command line    * @param out  the output stream used for printing    */
DECL|method|dispatch (CommandLine cmd, Options opts)
specifier|private
name|int
name|dispatch
parameter_list|(
name|CommandLine
name|cmd
parameter_list|,
name|Options
name|opts
parameter_list|)
throws|throws
name|Exception
block|{
name|Command
name|dbCmd
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DiskBalancerCLI
operator|.
name|PLAN
argument_list|)
condition|)
block|{
name|dbCmd
operator|=
operator|new
name|PlanCommand
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|printStream
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DiskBalancerCLI
operator|.
name|EXECUTE
argument_list|)
condition|)
block|{
name|dbCmd
operator|=
operator|new
name|ExecuteCommand
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DiskBalancerCLI
operator|.
name|QUERY
argument_list|)
condition|)
block|{
name|dbCmd
operator|=
operator|new
name|QueryCommand
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DiskBalancerCLI
operator|.
name|CANCEL
argument_list|)
condition|)
block|{
name|dbCmd
operator|=
operator|new
name|CancelCommand
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DiskBalancerCLI
operator|.
name|REPORT
argument_list|)
condition|)
block|{
name|dbCmd
operator|=
operator|new
name|ReportCommand
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|this
operator|.
name|printStream
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DiskBalancerCLI
operator|.
name|HELP
argument_list|)
condition|)
block|{
name|dbCmd
operator|=
operator|new
name|HelpCommand
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Invoke main help here.
if|if
condition|(
name|dbCmd
operator|==
literal|null
condition|)
block|{
name|dbCmd
operator|=
operator|new
name|HelpCommand
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|dbCmd
operator|.
name|execute
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|dbCmd
operator|.
name|execute
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|dbCmd
operator|!=
literal|null
condition|)
block|{
name|dbCmd
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

