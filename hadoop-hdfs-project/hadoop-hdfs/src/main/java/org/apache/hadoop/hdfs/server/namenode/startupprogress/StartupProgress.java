begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.startupprogress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * StartupProgress is used in various parts of the namenode codebase to indicate  * startup progress.  Its methods provide ways to indicate begin and end of a  * {@link Phase} or {@link Step} within a phase.  Additional methods provide ways  * to associate a step or phase with optional information, such as a file name or  * file size.  It also provides counters, which can be incremented by the  caller  * to indicate progress through a long-running task.  *   * This class is thread-safe.  Any number of threads may call any methods, even  * for the same phase or step, without risk of corrupting internal state.  For  * all begin/end methods and set methods, the last one in wins, overwriting any  * prior writes.  Instances of {@link Counter} provide an atomic increment  * operation to prevent lost updates.  *   * After startup completes, the tracked data is frozen.  Any subsequent updates  * or counter increments are no-ops.  *   * For read access, call {@link #createView()} to create a consistent view with  * a clone of the data.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StartupProgress
specifier|public
class|class
name|StartupProgress
block|{
comment|// package-private for access by StartupProgressView
DECL|field|phases
name|Map
argument_list|<
name|Phase
argument_list|,
name|PhaseTracking
argument_list|>
name|phases
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Phase
argument_list|,
name|PhaseTracking
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Allows a caller to increment a counter for tracking progress.    */
DECL|interface|Counter
specifier|public
specifier|static
interface|interface
name|Counter
block|{
comment|/**      * Atomically increments this counter, adding 1 to the current value.      */
DECL|method|increment ()
name|void
name|increment
parameter_list|()
function_decl|;
block|}
comment|/**    * Creates a new StartupProgress by initializing internal data structure for    * tracking progress of all defined phases.    */
DECL|method|StartupProgress ()
specifier|public
name|StartupProgress
parameter_list|()
block|{
for|for
control|(
name|Phase
name|phase
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Phase
operator|.
name|class
argument_list|)
control|)
block|{
name|phases
operator|.
name|put
argument_list|(
name|phase
argument_list|,
operator|new
name|PhaseTracking
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Begins execution of the specified phase.    *     * @param phase Phase to begin    */
DECL|method|beginPhase (Phase phase)
specifier|public
name|void
name|beginPhase
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
operator|.
name|beginTime
operator|=
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Begins execution of the specified step within the specified phase.    *     * @param phase Phase to begin    * @param step Step to begin    */
DECL|method|beginStep (Phase phase, Step step)
specifier|public
name|void
name|beginStep
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
name|lazyInitStep
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
operator|.
name|beginTime
operator|=
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Ends execution of the specified phase.    *     * @param phase Phase to end    */
DECL|method|endPhase (Phase phase)
specifier|public
name|void
name|endPhase
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
operator|.
name|endTime
operator|=
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Ends execution of the specified step within the specified phase.    *     * @param phase Phase to end    * @param step Step to end    */
DECL|method|endStep (Phase phase, Step step)
specifier|public
name|void
name|endStep
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
name|lazyInitStep
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
operator|.
name|endTime
operator|=
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the current run status of the specified phase.    *     * @param phase Phase to get    * @return Status run status of phase    */
DECL|method|getStatus (Phase phase)
specifier|public
name|Status
name|getStatus
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
name|PhaseTracking
name|tracking
init|=
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracking
operator|.
name|beginTime
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|Status
operator|.
name|PENDING
return|;
block|}
elseif|else
if|if
condition|(
name|tracking
operator|.
name|endTime
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|Status
operator|.
name|RUNNING
return|;
block|}
else|else
block|{
return|return
name|Status
operator|.
name|COMPLETE
return|;
block|}
block|}
comment|/**    * Returns a counter associated with the specified phase and step.  Typical    * usage is to increment a counter within a tight loop.  Callers may use this    * method to obtain a counter once and then increment that instance repeatedly    * within a loop.  This prevents redundant lookup operations and object    * creation within the tight loop.  Incrementing the counter is an atomic    * operation, so there is no risk of lost updates even if multiple threads    * increment the same counter.    *     * @param phase Phase to get    * @param step Step to get    * @return Counter associated with phase and step    */
DECL|method|getCounter (Phase phase, Step step)
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
specifier|final
name|StepTracking
name|tracking
init|=
name|lazyInitStep
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
decl_stmt|;
return|return
operator|new
name|Counter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|increment
parameter_list|()
block|{
name|tracking
operator|.
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|Counter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|increment
parameter_list|()
block|{
comment|// no-op, because startup has completed
block|}
block|}
return|;
block|}
block|}
comment|/**    * Sets counter to the specified value.    *     * @param phase Phase to set    * @param step Step to set    * @param count long to set    */
DECL|method|setCount (Phase phase, Step step, long count)
specifier|public
name|void
name|setCount
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|lazyInitStep
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
operator|.
name|count
operator|.
name|set
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the optional file name associated with the specified phase.  For    * example, this can be used while loading fsimage to indicate the full path to    * the fsimage file.    *     * @param phase Phase to set    * @param file String file name to set    */
DECL|method|setFile (Phase phase, String file)
specifier|public
name|void
name|setFile
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|String
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
block|}
comment|/**    * Sets the optional size in bytes associated with the specified phase.  For    * example, this can be used while loading fsimage to indicate the size of the    * fsimage file.    *     * @param phase Phase to set    * @param size long to set    */
DECL|method|setSize (Phase phase, long size)
specifier|public
name|void
name|setSize
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|long
name|size
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
block|}
comment|/**    * Sets the total associated with the specified phase and step.  For example,    * this can be used while loading edits to indicate the number of operations to    * be applied.    *     * @param phase Phase to set    * @param step Step to set    * @param total long to set    */
DECL|method|setTotal (Phase phase, Step step, long total)
specifier|public
name|void
name|setTotal
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|,
name|long
name|total
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
name|lazyInitStep
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
operator|.
name|total
operator|=
name|total
expr_stmt|;
block|}
block|}
comment|/**    * Creates a {@link StartupProgressView} containing data cloned from this    * StartupProgress.  Subsequent updates to this StartupProgress will not be    * shown in the view.  This gives a consistent, unchanging view for callers    * that need to perform multiple related read operations.  Calculations that    * require aggregation, such as overall percent complete, will not be impacted    * by mutations performed in other threads mid-way through the calculation.    *     * @return StartupProgressView containing cloned data    */
DECL|method|createView ()
specifier|public
name|StartupProgressView
name|createView
parameter_list|()
block|{
return|return
operator|new
name|StartupProgressView
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Returns true if the entire startup process has completed, determined by    * checking if each phase is complete.    *     * @return boolean true if the entire startup process has completed    */
DECL|method|isComplete ()
specifier|private
name|boolean
name|isComplete
parameter_list|()
block|{
for|for
control|(
name|Phase
name|phase
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Phase
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|getStatus
argument_list|(
name|phase
argument_list|)
operator|!=
name|Status
operator|.
name|COMPLETE
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Lazily initializes the internal data structure for tracking the specified    * phase and step.  Returns either the newly initialized data structure or the    * existing one.  Initialization is atomic, so there is no risk of lost updates    * even if multiple threads attempt to initialize the same step simultaneously.    *     * @param phase Phase to initialize    * @param step Step to initialize    * @return StepTracking newly initialized, or existing if found    */
DECL|method|lazyInitStep (Phase phase, Step step)
specifier|private
name|StepTracking
name|lazyInitStep
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|)
block|{
name|ConcurrentMap
argument_list|<
name|Step
argument_list|,
name|StepTracking
argument_list|>
name|steps
init|=
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
operator|.
name|steps
decl_stmt|;
if|if
condition|(
operator|!
name|steps
operator|.
name|containsKey
argument_list|(
name|step
argument_list|)
condition|)
block|{
name|steps
operator|.
name|putIfAbsent
argument_list|(
name|step
argument_list|,
operator|new
name|StepTracking
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|steps
operator|.
name|get
argument_list|(
name|step
argument_list|)
return|;
block|}
block|}
end_class

end_unit

