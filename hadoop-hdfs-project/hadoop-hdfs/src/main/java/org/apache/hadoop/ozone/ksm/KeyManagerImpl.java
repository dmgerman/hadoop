begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ksm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|exceptions
operator|.
name|KSMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|exceptions
operator|.
name|KSMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ScmBlockLocationProtocolProtos
operator|.
name|DeleteScmBlockResult
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|AllocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|DeleteBlockResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocol
operator|.
name|ScmBlockLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of keyManager.  */
end_comment

begin_class
DECL|class|KeyManagerImpl
specifier|public
class|class
name|KeyManagerImpl
implements|implements
name|KeyManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeyManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * A SCM block client, used to talk to SCM to allocate block during putKey.    */
DECL|field|scmBlockClient
specifier|private
specifier|final
name|ScmBlockLocationProtocol
name|scmBlockClient
decl_stmt|;
DECL|field|metadataManager
specifier|private
specifier|final
name|MetadataManager
name|metadataManager
decl_stmt|;
DECL|method|KeyManagerImpl (ScmBlockLocationProtocol scmBlockClient, MetadataManager metadataManager)
specifier|public
name|KeyManagerImpl
parameter_list|(
name|ScmBlockLocationProtocol
name|scmBlockClient
parameter_list|,
name|MetadataManager
name|metadataManager
parameter_list|)
block|{
name|this
operator|.
name|scmBlockClient
operator|=
name|scmBlockClient
expr_stmt|;
name|this
operator|.
name|metadataManager
operator|=
name|metadataManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocateKey (KsmKeyArgs args)
specifier|public
name|KsmKeyInfo
name|allocateKey
parameter_list|(
name|KsmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|String
name|volumeName
init|=
name|args
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|args
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|args
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|volumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bucketKey
init|=
name|metadataManager
operator|.
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|keyKey
init|=
name|metadataManager
operator|.
name|getDBKeyForKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
comment|//Check if the volume exists
if|if
condition|(
name|metadataManager
operator|.
name|get
argument_list|(
name|volumeKey
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"volume not found: {}"
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
literal|"Volume not found"
argument_list|,
name|KSMException
operator|.
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
comment|//Check if bucket already exists
if|if
condition|(
name|metadataManager
operator|.
name|get
argument_list|(
name|bucketKey
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"bucket not found: {}/{} "
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
literal|"Bucket not found"
argument_list|,
name|KSMException
operator|.
name|ResultCodes
operator|.
name|FAILED_BUCKET_NOT_FOUND
argument_list|)
throw|;
block|}
comment|// TODO: Garbage collect deleted blocks due to overwrite of a key.
comment|// FIXME: BUG: Please see HDFS-11922.
comment|// If user overwrites a key, then we are letting it pass without
comment|// corresponding process.
comment|// In reality we need to garbage collect those blocks by telling SCM to
comment|// clean up those blocks when it can. Right now making this change
comment|// allows us to pass tests that expect ozone can overwrite a key.
comment|// When we talk to SCM make sure that we ask for at least a byte in the
comment|// block. This way even if the call is for a zero length key, we back it
comment|// with a actual SCM block.
comment|// TODO : Review this decision later. We can get away with only a
comment|// metadata entry in case of 0 length key.
name|AllocatedBlock
name|allocatedBlock
init|=
name|scmBlockClient
operator|.
name|allocateBlock
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|KsmKeyInfo
name|keyBlock
init|=
operator|new
name|KsmKeyInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
operator|.
name|setBlockID
argument_list|(
name|allocatedBlock
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setContainerName
argument_list|(
name|allocatedBlock
operator|.
name|getPipeline
argument_list|()
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|setShouldCreateContainer
argument_list|(
name|allocatedBlock
operator|.
name|getCreateContainer
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|put
argument_list|(
name|keyKey
argument_list|,
name|keyBlock
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key {} allocated in volume {} bucket {}"
argument_list|,
name|keyName
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
return|return
name|keyBlock
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Key allocation failed for volume:{} bucket:{} key:{}"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|KSMException
operator|.
name|ResultCodes
operator|.
name|FAILED_INTERNAL_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|lookupKey (KsmKeyArgs args)
specifier|public
name|KsmKeyInfo
name|lookupKey
parameter_list|(
name|KsmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|String
name|volumeName
init|=
name|args
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|args
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|args
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|keyKey
init|=
name|metadataManager
operator|.
name|getDBKeyForKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|metadataManager
operator|.
name|get
argument_list|(
name|keyKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Key: {} not found"
argument_list|,
name|keyKey
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
literal|"Key not found"
argument_list|,
name|KSMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_NOT_FOUND
argument_list|)
throw|;
block|}
return|return
name|KsmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|KeyInfo
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DBException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Get key failed for volume:{} bucket:{} key:{}"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|KSMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_NOT_FOUND
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteKey (KsmKeyArgs args)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|KsmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|KsmKeyInfo
name|keyInfo
init|=
name|lookupKey
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|String
name|volumeName
init|=
name|args
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|args
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|args
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|DeleteBlockResult
argument_list|>
name|resultList
init|=
name|scmBlockClient
operator|.
name|deleteBlocks
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|keyInfo
operator|.
name|getBlockID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultList
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|KSMException
argument_list|(
literal|"Delete result size from SCM is wrong"
argument_list|,
name|ResultCodes
operator|.
name|FAILED_INTERNAL_ERROR
argument_list|)
throw|;
block|}
if|if
condition|(
name|resultList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResult
argument_list|()
operator|==
name|Result
operator|.
name|success
condition|)
block|{
name|byte
index|[]
name|objectKey
init|=
name|metadataManager
operator|.
name|getDBKeyForKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|metadataManager
operator|.
name|deleteKey
argument_list|(
name|objectKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|KSMException
argument_list|(
literal|"Cannot delete key from SCM"
argument_list|,
name|ResultCodes
operator|.
name|FAILED_INTERNAL_ERROR
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Delete key failed for volume:%s "
operator|+
literal|"bucket:%s key:%s"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|,
name|ResultCodes
operator|.
name|FAILED_INTERNAL_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

