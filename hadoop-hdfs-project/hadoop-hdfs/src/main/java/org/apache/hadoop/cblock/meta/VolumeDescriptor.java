begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.meta
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|meta
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * The internal representation maintained by CBlock server as the info for  * a volume. Contains the list of containers belonging to this volume.  *  * Many methods of this class is made such that the volume information (  * including container list) can be easily transformed into a Json string  * that can be stored/parsed from a persistent store for cblock server  * persistence.  *  * This class is still work-in-progress.  */
end_comment

begin_class
DECL|class|VolumeDescriptor
specifier|public
class|class
name|VolumeDescriptor
block|{
comment|// The main data structure is the container location map
comment|// other thing are mainly just information
comment|// since only one operation at a time is allowed, no
comment|// need to consider concurrency control here
comment|// key is container id
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VolumeDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerMap
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|ContainerDescriptor
argument_list|>
name|containerMap
decl_stmt|;
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|blockSize
specifier|private
name|int
name|blockSize
decl_stmt|;
DECL|field|volumeSize
specifier|private
name|long
name|volumeSize
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
comment|// this is essentially the ordered keys of containerMap
comment|// which is kind of redundant information. But since we
comment|// are likely to access it frequently based on ordering.
comment|// keeping this copy to avoid having to sort the key every
comment|// time
DECL|field|containerIdOrdered
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|containerIdOrdered
decl_stmt|;
comment|/**    * This is not being called explicitly, but this is necessary as    * it will be called by the parse method implicitly when    * reconstructing the object from json string. The get*() methods    * and set*() methods are for the same purpose also.    */
DECL|method|VolumeDescriptor ()
specifier|public
name|VolumeDescriptor
parameter_list|()
block|{
name|containerMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|containerIdOrdered
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|VolumeDescriptor (String userName, String volumeName, long volumeSize, int blockSize)
specifier|public
name|VolumeDescriptor
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|volumeName
parameter_list|,
name|long
name|volumeSize
parameter_list|,
name|int
name|blockSize
parameter_list|)
block|{
name|this
operator|.
name|containerMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|volumeName
operator|=
name|volumeName
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|volumeSize
operator|=
name|volumeSize
expr_stmt|;
name|this
operator|.
name|containerIdOrdered
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
DECL|method|getVolumeName ()
specifier|public
name|String
name|getVolumeName
parameter_list|()
block|{
return|return
name|volumeName
return|;
block|}
DECL|method|setVolumeName (String volumeName)
specifier|public
name|void
name|setVolumeName
parameter_list|(
name|String
name|volumeName
parameter_list|)
block|{
name|this
operator|.
name|volumeName
operator|=
name|volumeName
expr_stmt|;
block|}
DECL|method|getVolumeSize ()
specifier|public
name|long
name|getVolumeSize
parameter_list|()
block|{
return|return
name|volumeSize
return|;
block|}
DECL|method|setVolumeSize (long volumeSize)
specifier|public
name|void
name|setVolumeSize
parameter_list|(
name|long
name|volumeSize
parameter_list|)
block|{
name|this
operator|.
name|volumeSize
operator|=
name|volumeSize
expr_stmt|;
block|}
DECL|method|getBlockSize ()
specifier|public
name|int
name|getBlockSize
parameter_list|()
block|{
return|return
name|blockSize
return|;
block|}
DECL|method|setBlockSize (int blockSize)
specifier|public
name|void
name|setBlockSize
parameter_list|(
name|int
name|blockSize
parameter_list|)
block|{
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
block|}
DECL|method|setContainerIDs (ArrayList<String> containerIDs)
specifier|public
name|void
name|setContainerIDs
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|containerIDs
parameter_list|)
block|{
name|containerIdOrdered
operator|.
name|addAll
argument_list|(
name|containerIDs
argument_list|)
expr_stmt|;
block|}
DECL|method|addContainer (ContainerDescriptor containerDescriptor)
specifier|public
name|void
name|addContainer
parameter_list|(
name|ContainerDescriptor
name|containerDescriptor
parameter_list|)
block|{
name|containerMap
operator|.
name|put
argument_list|(
name|containerDescriptor
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|containerDescriptor
argument_list|)
expr_stmt|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
name|VolumeInfo
name|info
init|=
name|getInfo
argument_list|()
decl_stmt|;
return|return
name|info
operator|.
name|getUsage
argument_list|()
operator|==
literal|0
return|;
block|}
DECL|method|getInfo ()
specifier|public
name|VolumeInfo
name|getInfo
parameter_list|()
block|{
comment|// TODO : need to actually go through all containers of this volume and
comment|// ask for their utilization.
name|long
name|utilization
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ContainerDescriptor
argument_list|>
name|entry
range|:
name|containerMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|utilization
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getUtilization
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|VolumeInfo
argument_list|(
name|this
operator|.
name|userName
argument_list|,
name|this
operator|.
name|volumeName
argument_list|,
name|this
operator|.
name|volumeSize
argument_list|,
name|this
operator|.
name|blockSize
argument_list|,
name|utilization
operator|*
name|blockSize
argument_list|)
return|;
block|}
DECL|method|getContainerIDs ()
specifier|public
name|String
index|[]
name|getContainerIDs
parameter_list|()
block|{
comment|//ArrayList<Long> ids = new ArrayList(containerMap.keySet());
comment|//return ids.toArray(new Long[ids.size()]);
return|return
name|containerIdOrdered
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|containerIdOrdered
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getContainerIDsList ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getContainerIDsList
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|containerIdOrdered
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|string
init|=
literal|""
decl_stmt|;
name|string
operator|+=
literal|"Username:"
operator|+
name|userName
operator|+
literal|"\n"
expr_stmt|;
name|string
operator|+=
literal|"VolumeName:"
operator|+
name|volumeName
operator|+
literal|"\n"
expr_stmt|;
name|string
operator|+=
literal|"VolumeSize:"
operator|+
name|volumeSize
operator|+
literal|"\n"
expr_stmt|;
name|string
operator|+=
literal|"blockSize:"
operator|+
name|blockSize
operator|+
literal|"\n"
expr_stmt|;
name|string
operator|+=
literal|"containerIds:"
operator|+
name|containerIdOrdered
operator|+
literal|"\n"
expr_stmt|;
name|string
operator|+=
literal|"containerIdsWithObject:"
operator|+
name|containerMap
operator|.
name|keySet
argument_list|()
expr_stmt|;
return|return
name|string
return|;
block|}
block|}
end_class

end_unit

