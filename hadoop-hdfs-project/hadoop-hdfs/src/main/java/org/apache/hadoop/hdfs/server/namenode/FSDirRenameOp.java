begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|BlocksMapUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ChunkedArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSLimitException
operator|.
name|MaxDirectoryItemsExceededException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSLimitException
operator|.
name|PathComponentTooLongException
import|;
end_import

begin_class
DECL|class|FSDirRenameOp
class|class
name|FSDirRenameOp
block|{
annotation|@
name|Deprecated
DECL|method|renameToInt ( FSDirectory fsd, final String srcArg, final String dstArg, boolean logRetryCache)
specifier|static
name|RenameOldResult
name|renameToInt
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|String
name|srcArg
parameter_list|,
specifier|final
name|String
name|dstArg
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|src
init|=
name|srcArg
decl_stmt|;
name|String
name|dst
init|=
name|dstArg
decl_stmt|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* NameSystem.renameTo: "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid name: "
operator|+
name|dst
argument_list|)
throw|;
block|}
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|srcComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|dstComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|HdfsFileStatus
name|resultingStat
init|=
literal|null
decl_stmt|;
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|srcComponents
argument_list|)
expr_stmt|;
name|dst
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|dst
argument_list|,
name|dstComponents
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|final
name|boolean
name|status
init|=
name|renameTo
argument_list|(
name|fsd
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|logRetryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
condition|)
block|{
name|resultingStat
operator|=
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RenameOldResult
argument_list|(
name|status
argument_list|,
name|resultingStat
argument_list|)
return|;
block|}
comment|/**    * Verify quota for rename operation where srcInodes[srcInodes.length-1] moves    * dstInodes[dstInodes.length-1]    */
DECL|method|verifyQuotaForRename (FSDirectory fsd, INodesInPath src, INodesInPath dst)
specifier|private
specifier|static
name|void
name|verifyQuotaForRename
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|src
parameter_list|,
name|INodesInPath
name|dst
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
if|if
condition|(
operator|!
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|isImageLoaded
argument_list|()
operator|||
name|fsd
operator|.
name|shouldSkipQuotaChecks
argument_list|()
condition|)
block|{
comment|// Do not check quota if edits log is still being processed
return|return;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|src
operator|.
name|getINode
argument_list|(
name|i
argument_list|)
operator|==
name|dst
operator|.
name|getINode
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
comment|// src[i - 1] is the last common ancestor.
specifier|final
name|Quota
operator|.
name|Counts
name|delta
init|=
name|src
operator|.
name|getLastINode
argument_list|()
operator|.
name|computeQuotaUsage
argument_list|()
decl_stmt|;
comment|// Reduce the required quota by dst that is being removed
specifier|final
name|INode
name|dstINode
init|=
name|dst
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|dstINode
operator|!=
literal|null
condition|)
block|{
name|delta
operator|.
name|subtract
argument_list|(
name|dstINode
operator|.
name|computeQuotaUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FSDirectory
operator|.
name|verifyQuota
argument_list|(
name|dst
argument_list|,
name|dst
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
name|delta
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
argument_list|,
name|delta
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
argument_list|,
name|src
operator|.
name|getINode
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks file system limits (max component length and max directory items)    * during a rename operation.    */
DECL|method|verifyFsLimitsForRename (FSDirectory fsd, INodesInPath srcIIP, INodesInPath dstIIP)
specifier|static
name|void
name|verifyFsLimitsForRename
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|srcIIP
parameter_list|,
name|INodesInPath
name|dstIIP
parameter_list|)
throws|throws
name|PathComponentTooLongException
throws|,
name|MaxDirectoryItemsExceededException
block|{
name|byte
index|[]
name|dstChildName
init|=
name|dstIIP
operator|.
name|getLastLocalName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|parentPath
init|=
name|dstIIP
operator|.
name|getParentPath
argument_list|()
decl_stmt|;
name|fsd
operator|.
name|verifyMaxComponentLength
argument_list|(
name|dstChildName
argument_list|,
name|parentPath
argument_list|)
expr_stmt|;
comment|// Do not enforce max directory items if renaming within same directory.
if|if
condition|(
name|srcIIP
operator|.
name|getINode
argument_list|(
operator|-
literal|2
argument_list|)
operator|!=
name|dstIIP
operator|.
name|getINode
argument_list|(
operator|-
literal|2
argument_list|)
condition|)
block|{
name|fsd
operator|.
name|verifyMaxDirItems
argument_list|(
name|dstIIP
operator|.
name|getINode
argument_list|(
operator|-
literal|2
argument_list|)
operator|.
name|asDirectory
argument_list|()
argument_list|,
name|parentPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *<br>    * Note: This is to be used by {@link FSEditLogLoader} only.    *<br>    */
annotation|@
name|Deprecated
DECL|method|unprotectedRenameTo (FSDirectory fsd, String src, String dst, long timestamp)
specifier|static
name|boolean
name|unprotectedRenameTo
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fsd
operator|.
name|isDir
argument_list|(
name|dst
argument_list|)
condition|)
block|{
name|dst
operator|+=
name|Path
operator|.
name|SEPARATOR
operator|+
operator|new
name|Path
argument_list|(
name|src
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
specifier|final
name|INodesInPath
name|srcIIP
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|INodesInPath
name|dstIIP
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|unprotectedRenameTo
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|srcIIP
argument_list|,
name|dstIIP
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
comment|/**    * Change a path name    *    * @param fsd FSDirectory    * @param src source path    * @param dst destination path    * @return true if rename succeeds; false otherwise    * @deprecated See {@link #renameToInt(FSDirectory, String, String,    * boolean, Options.Rename...)}    */
annotation|@
name|Deprecated
DECL|method|unprotectedRenameTo (FSDirectory fsd, String src, String dst, final INodesInPath srcIIP, final INodesInPath dstIIP, long timestamp)
specifier|static
name|boolean
name|unprotectedRenameTo
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
specifier|final
name|INodesInPath
name|srcIIP
parameter_list|,
specifier|final
name|INodesInPath
name|dstIIP
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INode
name|srcInode
init|=
name|srcIIP
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
try|try
block|{
name|validateRenameSource
argument_list|(
name|srcIIP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|// validate the destination
if|if
condition|(
name|dst
operator|.
name|equals
argument_list|(
name|src
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|validateDestination
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|srcInode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|dstIIP
operator|.
name|getLastINode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
literal|"failed to rename "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|" because destination "
operator|+
literal|"exists"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|INode
name|dstParent
init|=
name|dstIIP
operator|.
name|getINode
argument_list|(
operator|-
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstParent
operator|==
literal|null
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
literal|"failed to rename "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|" because destination's "
operator|+
literal|"parent does not exist"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|fsd
operator|.
name|ezManager
operator|.
name|checkMoveValidity
argument_list|(
name|srcIIP
argument_list|,
name|dstIIP
argument_list|,
name|src
argument_list|)
expr_stmt|;
comment|// Ensure dst has quota to accommodate rename
name|verifyFsLimitsForRename
argument_list|(
name|fsd
argument_list|,
name|srcIIP
argument_list|,
name|dstIIP
argument_list|)
expr_stmt|;
name|verifyQuotaForRename
argument_list|(
name|fsd
argument_list|,
name|srcIIP
argument_list|,
name|dstIIP
argument_list|)
expr_stmt|;
name|RenameOperation
name|tx
init|=
operator|new
name|RenameOperation
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|srcIIP
argument_list|,
name|dstIIP
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// remove src
specifier|final
name|long
name|removedSrc
init|=
name|fsd
operator|.
name|removeLastINode
argument_list|(
name|tx
operator|.
name|srcIIP
argument_list|)
decl_stmt|;
if|if
condition|(
name|removedSrc
operator|==
operator|-
literal|1
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
literal|"failed to rename "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|" because the source"
operator|+
literal|" can not be removed"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|added
operator|=
name|tx
operator|.
name|addSourceToDestination
argument_list|()
expr_stmt|;
if|if
condition|(
name|added
condition|)
block|{
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* FSDirectory"
operator|+
literal|".unprotectedRenameTo: "
operator|+
name|src
operator|+
literal|" is renamed to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|updateMtimeAndLease
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|tx
operator|.
name|updateQuotasInSourceTree
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|added
condition|)
block|{
name|tx
operator|.
name|restoreSource
argument_list|()
expr_stmt|;
block|}
block|}
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
literal|"failed to rename "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * The new rename which has the POSIX semantic.    */
DECL|method|renameToInt ( FSDirectory fsd, final String srcArg, final String dstArg, boolean logRetryCache, Options.Rename... options)
specifier|static
name|Map
operator|.
name|Entry
argument_list|<
name|BlocksMapUpdateInfo
argument_list|,
name|HdfsFileStatus
argument_list|>
name|renameToInt
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|String
name|srcArg
parameter_list|,
specifier|final
name|String
name|dstArg
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|,
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|src
init|=
name|srcArg
decl_stmt|;
name|String
name|dst
init|=
name|dstArg
decl_stmt|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* NameSystem.renameTo: with options -"
operator|+
literal|" "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPathException
argument_list|(
literal|"Invalid name: "
operator|+
name|dst
argument_list|)
throw|;
block|}
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|srcComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|dstComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|dst
argument_list|)
decl_stmt|;
name|BlocksMapUpdateInfo
name|collectedBlocks
init|=
operator|new
name|BlocksMapUpdateInfo
argument_list|()
decl_stmt|;
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|srcComponents
argument_list|)
expr_stmt|;
name|dst
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|dst
argument_list|,
name|dstComponents
argument_list|)
expr_stmt|;
name|renameTo
argument_list|(
name|fsd
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|collectedBlocks
argument_list|,
name|logRetryCache
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|HdfsFileStatus
name|resultingStat
init|=
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleImmutableEntry
argument_list|<
name|BlocksMapUpdateInfo
argument_list|,
name|HdfsFileStatus
argument_list|>
argument_list|(
name|collectedBlocks
argument_list|,
name|resultingStat
argument_list|)
return|;
block|}
comment|/**    * @see #unprotectedRenameTo(FSDirectory, String, String, long,    * org.apache.hadoop.fs.Options.Rename...)    */
DECL|method|renameTo (FSDirectory fsd, FSPermissionChecker pc, String src, String dst, BlocksMapUpdateInfo collectedBlocks, boolean logRetryCache, Options.Rename... options)
specifier|static
name|void
name|renameTo
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|,
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|INodesInPath
name|srcIIP
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|INodesInPath
name|dstIIP
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
comment|// Rename does not operate on link targets
comment|// Do not resolveLink when checking permissions of src and dst
comment|// Check write access to parent of src
name|fsd
operator|.
name|checkPermission
argument_list|(
name|pc
argument_list|,
name|srcIIP
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check write access to ancestor of dst
name|fsd
operator|.
name|checkPermission
argument_list|(
name|pc
argument_list|,
name|dstIIP
argument_list|,
literal|false
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* FSDirectory.renameTo: "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|mtime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|unprotectedRenameTo
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|srcIIP
argument_list|,
name|dstIIP
argument_list|,
name|mtime
argument_list|,
name|collectedBlocks
argument_list|,
name|options
argument_list|)
condition|)
block|{
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|incrDeletedFileCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logRename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|mtime
argument_list|,
name|logRetryCache
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rename src to dst.    *<br>    * Note: This is to be used by {@link org.apache.hadoop.hdfs.server    * .namenode.FSEditLogLoader} only.    *<br>    *    * @param fsd       FSDirectory    * @param src       source path    * @param dst       destination path    * @param timestamp modification time    * @param options   Rename options    */
DECL|method|unprotectedRenameTo ( FSDirectory fsd, String src, String dst, long timestamp, Options.Rename... options)
specifier|static
name|boolean
name|unprotectedRenameTo
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|BlocksMapUpdateInfo
name|collectedBlocks
init|=
operator|new
name|BlocksMapUpdateInfo
argument_list|()
decl_stmt|;
specifier|final
name|INodesInPath
name|srcIIP
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|INodesInPath
name|dstIIP
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|ret
init|=
name|unprotectedRenameTo
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|srcIIP
argument_list|,
name|dstIIP
argument_list|,
name|timestamp
argument_list|,
name|collectedBlocks
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|collectedBlocks
operator|.
name|getToDeleteList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|removeBlocksAndUpdateSafemodeTotal
argument_list|(
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Rename src to dst.    * See {@link DistributedFileSystem#rename(Path, Path, Options.Rename...)}    * for details related to rename semantics and exceptions.    *    * @param fsd             FSDirectory    * @param src             source path    * @param dst             destination path    * @param timestamp       modification time    * @param collectedBlocks blocks to be removed    * @param options         Rename options    */
DECL|method|unprotectedRenameTo (FSDirectory fsd, String src, String dst, final INodesInPath srcIIP, final INodesInPath dstIIP, long timestamp, BlocksMapUpdateInfo collectedBlocks, Options.Rename... options)
specifier|static
name|boolean
name|unprotectedRenameTo
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
specifier|final
name|INodesInPath
name|srcIIP
parameter_list|,
specifier|final
name|INodesInPath
name|dstIIP
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|boolean
name|overwrite
init|=
name|options
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|asList
argument_list|(
name|options
argument_list|)
operator|.
name|contains
argument_list|(
name|Options
operator|.
name|Rename
operator|.
name|OVERWRITE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|error
decl_stmt|;
specifier|final
name|INode
name|srcInode
init|=
name|srcIIP
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
name|validateRenameSource
argument_list|(
name|srcIIP
argument_list|)
expr_stmt|;
comment|// validate the destination
if|if
condition|(
name|dst
operator|.
name|equals
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"The source "
operator|+
name|src
operator|+
literal|" and destination "
operator|+
name|dst
operator|+
literal|" are the same"
argument_list|)
throw|;
block|}
name|validateDestination
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|srcInode
argument_list|)
expr_stmt|;
if|if
condition|(
name|dstIIP
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|error
operator|=
literal|"rename destination cannot be the root"
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
name|fsd
operator|.
name|ezManager
operator|.
name|checkMoveValidity
argument_list|(
name|srcIIP
argument_list|,
name|dstIIP
argument_list|,
name|src
argument_list|)
expr_stmt|;
specifier|final
name|INode
name|dstInode
init|=
name|dstIIP
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|snapshottableDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|INodeDirectory
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dstInode
operator|!=
literal|null
condition|)
block|{
comment|// Destination exists
name|validateOverwrite
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|overwrite
argument_list|,
name|srcInode
argument_list|,
name|dstInode
argument_list|)
expr_stmt|;
name|FSDirSnapshotOp
operator|.
name|checkSnapshot
argument_list|(
name|dstInode
argument_list|,
name|snapshottableDirs
argument_list|)
expr_stmt|;
block|}
name|INode
name|dstParent
init|=
name|dstIIP
operator|.
name|getINode
argument_list|(
operator|-
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstParent
operator|==
literal|null
condition|)
block|{
name|error
operator|=
literal|"rename destination parent "
operator|+
name|dst
operator|+
literal|" not found."
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|error
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dstParent
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|error
operator|=
literal|"rename destination parent "
operator|+
name|dst
operator|+
literal|" is a file."
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParentNotDirectoryException
argument_list|(
name|error
argument_list|)
throw|;
block|}
comment|// Ensure dst has quota to accommodate rename
name|verifyFsLimitsForRename
argument_list|(
name|fsd
argument_list|,
name|srcIIP
argument_list|,
name|dstIIP
argument_list|)
expr_stmt|;
name|verifyQuotaForRename
argument_list|(
name|fsd
argument_list|,
name|srcIIP
argument_list|,
name|dstIIP
argument_list|)
expr_stmt|;
name|RenameOperation
name|tx
init|=
operator|new
name|RenameOperation
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|srcIIP
argument_list|,
name|dstIIP
argument_list|)
decl_stmt|;
name|boolean
name|undoRemoveSrc
init|=
literal|true
decl_stmt|;
specifier|final
name|long
name|removedSrc
init|=
name|fsd
operator|.
name|removeLastINode
argument_list|(
name|tx
operator|.
name|srcIIP
argument_list|)
decl_stmt|;
if|if
condition|(
name|removedSrc
operator|==
operator|-
literal|1
condition|)
block|{
name|error
operator|=
literal|"Failed to rename "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|" because the source can not be removed"
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
name|boolean
name|undoRemoveDst
init|=
literal|false
decl_stmt|;
name|INode
name|removedDst
init|=
literal|null
decl_stmt|;
name|long
name|removedNum
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dstInode
operator|!=
literal|null
condition|)
block|{
comment|// dst exists remove it
if|if
condition|(
operator|(
name|removedNum
operator|=
name|fsd
operator|.
name|removeLastINode
argument_list|(
name|tx
operator|.
name|dstIIP
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|removedDst
operator|=
name|tx
operator|.
name|dstIIP
operator|.
name|getLastINode
argument_list|()
expr_stmt|;
name|undoRemoveDst
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// add src as dst to complete rename
if|if
condition|(
name|tx
operator|.
name|addSourceToDestination
argument_list|()
condition|)
block|{
name|undoRemoveSrc
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|src
operator|+
literal|" is renamed to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|updateMtimeAndLease
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
comment|// Collect the blocks and remove the lease for previous dst
name|boolean
name|filesDeleted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|removedDst
operator|!=
literal|null
condition|)
block|{
name|undoRemoveDst
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|removedNum
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
init|=
operator|new
name|ChunkedArrayList
argument_list|<
name|INode
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|removedDst
operator|.
name|isInLatestSnapshot
argument_list|(
name|tx
operator|.
name|dstIIP
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
condition|)
block|{
name|removedDst
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
expr_stmt|;
name|filesDeleted
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|filesDeleted
operator|=
name|removedDst
operator|.
name|cleanSubtree
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|,
name|tx
operator|.
name|dstIIP
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|,
literal|true
argument_list|)
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
operator|>=
literal|0
expr_stmt|;
block|}
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|removePathAndBlocks
argument_list|(
name|src
argument_list|,
literal|null
argument_list|,
name|removedINodes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|snapshottableDirs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// There are snapshottable directories (without snapshots) to be
comment|// deleted. Need to update the SnapshotManager.
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|removeSnapshottableDirs
argument_list|(
name|snapshottableDirs
argument_list|)
expr_stmt|;
block|}
name|tx
operator|.
name|updateQuotasInSourceTree
argument_list|()
expr_stmt|;
return|return
name|filesDeleted
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|undoRemoveSrc
condition|)
block|{
name|tx
operator|.
name|restoreSource
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|undoRemoveDst
condition|)
block|{
comment|// Rename failed - restore dst
if|if
condition|(
name|dstParent
operator|.
name|isDirectory
argument_list|()
operator|&&
name|dstParent
operator|.
name|asDirectory
argument_list|()
operator|.
name|isWithSnapshot
argument_list|()
condition|)
block|{
name|dstParent
operator|.
name|asDirectory
argument_list|()
operator|.
name|undoRename4DstParent
argument_list|(
name|removedDst
argument_list|,
name|dstIIP
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fsd
operator|.
name|addLastINodeNoQuotaCheck
argument_list|(
name|tx
operator|.
name|dstIIP
argument_list|,
name|removedDst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|removedDst
operator|.
name|isReference
argument_list|()
condition|)
block|{
specifier|final
name|INodeReference
name|removedDstRef
init|=
name|removedDst
operator|.
name|asReference
argument_list|()
decl_stmt|;
specifier|final
name|INodeReference
operator|.
name|WithCount
name|wc
init|=
operator|(
name|INodeReference
operator|.
name|WithCount
operator|)
name|removedDstRef
operator|.
name|getReferredINode
argument_list|()
operator|.
name|asReference
argument_list|()
decl_stmt|;
name|wc
operator|.
name|addReference
argument_list|(
name|removedDstRef
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
literal|"failed to rename "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"rename from "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|" failed."
argument_list|)
throw|;
block|}
comment|/**    * @deprecated Use {@link #renameToInt(FSDirectory, String, String,    * boolean, Options.Rename...)}    */
annotation|@
name|Deprecated
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|renameTo (FSDirectory fsd, FSPermissionChecker pc, String src, String dst, boolean logRetryCache)
specifier|private
specifier|static
name|boolean
name|renameTo
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Rename does not operate on link targets
comment|// Do not resolveLink when checking permissions of src and dst
comment|// Check write access to parent of src
specifier|final
name|INodesInPath
name|srcIIP
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Note: We should not be doing this.  This is move() not renameTo().
specifier|final
name|String
name|actualDst
init|=
name|fsd
operator|.
name|isDir
argument_list|(
name|dst
argument_list|)
condition|?
name|dst
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
operator|new
name|Path
argument_list|(
name|src
argument_list|)
operator|.
name|getName
argument_list|()
else|:
name|dst
decl_stmt|;
specifier|final
name|INodesInPath
name|dstIIP
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|actualDst
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPermission
argument_list|(
name|pc
argument_list|,
name|srcIIP
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check write access to ancestor of dst
name|fsd
operator|.
name|checkPermission
argument_list|(
name|pc
argument_list|,
name|dstIIP
argument_list|,
literal|false
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* FSDirectory.renameTo: "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|mtime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|boolean
name|stat
init|=
literal|false
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|stat
operator|=
name|unprotectedRenameTo
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|actualDst
argument_list|,
name|srcIIP
argument_list|,
name|dstIIP
argument_list|,
name|mtime
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|stat
condition|)
block|{
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logRename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|mtime
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|validateDestination ( String src, String dst, INode srcInode)
specifier|private
specifier|static
name|void
name|validateDestination
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|INode
name|srcInode
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|error
decl_stmt|;
if|if
condition|(
name|srcInode
operator|.
name|isSymlink
argument_list|()
operator|&&
name|dst
operator|.
name|equals
argument_list|(
name|srcInode
operator|.
name|asSymlink
argument_list|()
operator|.
name|getSymlinkString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Cannot rename symlink "
operator|+
name|src
operator|+
literal|" to its target "
operator|+
name|dst
argument_list|)
throw|;
block|}
comment|// dst cannot be a directory or a file under src
if|if
condition|(
name|dst
operator|.
name|startsWith
argument_list|(
name|src
argument_list|)
operator|&&
name|dst
operator|.
name|charAt
argument_list|(
name|src
operator|.
name|length
argument_list|()
argument_list|)
operator|==
name|Path
operator|.
name|SEPARATOR_CHAR
condition|)
block|{
name|error
operator|=
literal|"Rename destination "
operator|+
name|dst
operator|+
literal|" is a directory or file under source "
operator|+
name|src
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
DECL|method|validateOverwrite ( String src, String dst, boolean overwrite, INode srcInode, INode dstInode)
specifier|private
specifier|static
name|void
name|validateOverwrite
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|INode
name|srcInode
parameter_list|,
name|INode
name|dstInode
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|error
decl_stmt|;
comment|// It's OK to rename a file to a symlink and vice versa
if|if
condition|(
name|dstInode
operator|.
name|isDirectory
argument_list|()
operator|!=
name|srcInode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|error
operator|=
literal|"Source "
operator|+
name|src
operator|+
literal|" and destination "
operator|+
name|dst
operator|+
literal|" must both be directories"
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
comment|// If destination exists, overwrite flag must be true
name|error
operator|=
literal|"rename destination "
operator|+
name|dst
operator|+
literal|" already exists"
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|error
argument_list|)
throw|;
block|}
if|if
condition|(
name|dstInode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
specifier|final
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|dstInode
operator|.
name|asDirectory
argument_list|()
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|error
operator|=
literal|"rename destination directory is not empty: "
operator|+
name|dst
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|validateRenameSource (INodesInPath srcIIP)
specifier|private
specifier|static
name|void
name|validateRenameSource
parameter_list|(
name|INodesInPath
name|srcIIP
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|error
decl_stmt|;
specifier|final
name|INode
name|srcInode
init|=
name|srcIIP
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
comment|// validate source
if|if
condition|(
name|srcInode
operator|==
literal|null
condition|)
block|{
name|error
operator|=
literal|"rename source "
operator|+
name|srcIIP
operator|.
name|getPath
argument_list|()
operator|+
literal|" is not found."
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|error
argument_list|)
throw|;
block|}
if|if
condition|(
name|srcIIP
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|error
operator|=
literal|"rename source cannot be the root"
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedRenameTo: "
operator|+
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
comment|// srcInode and its subtree cannot contain snapshottable directories with
comment|// snapshots
name|FSDirSnapshotOp
operator|.
name|checkSnapshot
argument_list|(
name|srcInode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|class|RenameOperation
specifier|private
specifier|static
class|class
name|RenameOperation
block|{
DECL|field|fsd
specifier|private
specifier|final
name|FSDirectory
name|fsd
decl_stmt|;
DECL|field|srcIIP
specifier|private
specifier|final
name|INodesInPath
name|srcIIP
decl_stmt|;
DECL|field|dstIIP
specifier|private
specifier|final
name|INodesInPath
name|dstIIP
decl_stmt|;
DECL|field|src
specifier|private
specifier|final
name|String
name|src
decl_stmt|;
DECL|field|dst
specifier|private
specifier|final
name|String
name|dst
decl_stmt|;
DECL|field|withCount
specifier|private
specifier|final
name|INodeReference
operator|.
name|WithCount
name|withCount
decl_stmt|;
DECL|field|srcRefDstSnapshot
specifier|private
specifier|final
name|int
name|srcRefDstSnapshot
decl_stmt|;
DECL|field|srcParent
specifier|private
specifier|final
name|INodeDirectory
name|srcParent
decl_stmt|;
DECL|field|srcChildName
specifier|private
specifier|final
name|byte
index|[]
name|srcChildName
decl_stmt|;
DECL|field|isSrcInSnapshot
specifier|private
specifier|final
name|boolean
name|isSrcInSnapshot
decl_stmt|;
DECL|field|srcChildIsReference
specifier|private
specifier|final
name|boolean
name|srcChildIsReference
decl_stmt|;
DECL|field|oldSrcCounts
specifier|private
specifier|final
name|Quota
operator|.
name|Counts
name|oldSrcCounts
decl_stmt|;
DECL|field|srcChild
specifier|private
name|INode
name|srcChild
decl_stmt|;
DECL|method|RenameOperation (FSDirectory fsd, String src, String dst, INodesInPath srcIIP, INodesInPath dstIIP)
name|RenameOperation
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|INodesInPath
name|srcIIP
parameter_list|,
name|INodesInPath
name|dstIIP
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|this
operator|.
name|fsd
operator|=
name|fsd
expr_stmt|;
name|this
operator|.
name|dstIIP
operator|=
name|dstIIP
expr_stmt|;
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
name|this
operator|.
name|dst
operator|=
name|dst
expr_stmt|;
name|srcChild
operator|=
name|srcIIP
operator|.
name|getLastINode
argument_list|()
expr_stmt|;
name|srcChildName
operator|=
name|srcChild
operator|.
name|getLocalNameBytes
argument_list|()
expr_stmt|;
name|isSrcInSnapshot
operator|=
name|srcChild
operator|.
name|isInLatestSnapshot
argument_list|(
name|srcIIP
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
name|srcChildIsReference
operator|=
name|srcChild
operator|.
name|isReference
argument_list|()
expr_stmt|;
name|srcParent
operator|=
name|srcIIP
operator|.
name|getINode
argument_list|(
operator|-
literal|2
argument_list|)
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
comment|// Record the snapshot on srcChild. After the rename, before any new
comment|// snapshot is taken on the dst tree, changes will be recorded in the
comment|// latest snapshot of the src tree.
if|if
condition|(
name|isSrcInSnapshot
condition|)
block|{
name|srcChild
operator|.
name|recordModification
argument_list|(
name|srcIIP
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check srcChild for reference
name|srcRefDstSnapshot
operator|=
name|srcChildIsReference
condition|?
name|srcChild
operator|.
name|asReference
argument_list|()
operator|.
name|getDstSnapshotId
argument_list|()
else|:
name|Snapshot
operator|.
name|CURRENT_STATE_ID
expr_stmt|;
name|oldSrcCounts
operator|=
name|Quota
operator|.
name|Counts
operator|.
name|newInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|isSrcInSnapshot
condition|)
block|{
specifier|final
name|INodeReference
operator|.
name|WithName
name|withName
init|=
name|srcIIP
operator|.
name|getINode
argument_list|(
operator|-
literal|2
argument_list|)
operator|.
name|asDirectory
argument_list|()
operator|.
name|replaceChild4ReferenceWithName
argument_list|(
name|srcChild
argument_list|,
name|srcIIP
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
decl_stmt|;
name|withCount
operator|=
operator|(
name|INodeReference
operator|.
name|WithCount
operator|)
name|withName
operator|.
name|getReferredINode
argument_list|()
expr_stmt|;
name|srcChild
operator|=
name|withName
expr_stmt|;
name|srcIIP
operator|=
name|INodesInPath
operator|.
name|replace
argument_list|(
name|srcIIP
argument_list|,
name|srcIIP
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
name|srcChild
argument_list|)
expr_stmt|;
comment|// get the counts before rename
name|withCount
operator|.
name|getReferredINode
argument_list|()
operator|.
name|computeQuotaUsage
argument_list|(
name|oldSrcCounts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|srcChildIsReference
condition|)
block|{
comment|// srcChild is reference but srcChild is not in latest snapshot
name|withCount
operator|=
operator|(
name|INodeReference
operator|.
name|WithCount
operator|)
name|srcChild
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|withCount
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|srcIIP
operator|=
name|srcIIP
expr_stmt|;
block|}
DECL|method|addSourceToDestination ()
name|boolean
name|addSourceToDestination
parameter_list|()
block|{
specifier|final
name|INode
name|dstParent
init|=
name|dstIIP
operator|.
name|getINode
argument_list|(
operator|-
literal|2
argument_list|)
decl_stmt|;
name|srcChild
operator|=
name|srcIIP
operator|.
name|getLastINode
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|dstChildName
init|=
name|dstIIP
operator|.
name|getLastLocalName
argument_list|()
decl_stmt|;
specifier|final
name|INode
name|toDst
decl_stmt|;
if|if
condition|(
name|withCount
operator|==
literal|null
condition|)
block|{
name|srcChild
operator|.
name|setLocalName
argument_list|(
name|dstChildName
argument_list|)
expr_stmt|;
name|toDst
operator|=
name|srcChild
expr_stmt|;
block|}
else|else
block|{
name|withCount
operator|.
name|getReferredINode
argument_list|()
operator|.
name|setLocalName
argument_list|(
name|dstChildName
argument_list|)
expr_stmt|;
name|int
name|dstSnapshotId
init|=
name|dstIIP
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
name|toDst
operator|=
operator|new
name|INodeReference
operator|.
name|DstReference
argument_list|(
name|dstParent
operator|.
name|asDirectory
argument_list|()
argument_list|,
name|withCount
argument_list|,
name|dstSnapshotId
argument_list|)
expr_stmt|;
block|}
return|return
name|fsd
operator|.
name|addLastINodeNoQuotaCheck
argument_list|(
name|dstIIP
argument_list|,
name|toDst
argument_list|)
return|;
block|}
DECL|method|updateMtimeAndLease (long timestamp)
name|void
name|updateMtimeAndLease
parameter_list|(
name|long
name|timestamp
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|srcParent
operator|.
name|updateModificationTime
argument_list|(
name|timestamp
argument_list|,
name|srcIIP
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|INode
name|dstParent
init|=
name|dstIIP
operator|.
name|getINode
argument_list|(
operator|-
literal|2
argument_list|)
decl_stmt|;
name|dstParent
operator|.
name|updateModificationTime
argument_list|(
name|timestamp
argument_list|,
name|dstIIP
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
comment|// update moved lease with new filename
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|unprotectedChangeLease
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
DECL|method|restoreSource ()
name|void
name|restoreSource
parameter_list|()
throws|throws
name|QuotaExceededException
block|{
comment|// Rename failed - restore src
specifier|final
name|INode
name|oldSrcChild
init|=
name|srcChild
decl_stmt|;
comment|// put it back
if|if
condition|(
name|withCount
operator|==
literal|null
condition|)
block|{
name|srcChild
operator|.
name|setLocalName
argument_list|(
name|srcChildName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|srcChildIsReference
condition|)
block|{
comment|// src must be in snapshot
comment|// the withCount node will no longer be used thus no need to update
comment|// its reference number here
name|srcChild
operator|=
name|withCount
operator|.
name|getReferredINode
argument_list|()
expr_stmt|;
name|srcChild
operator|.
name|setLocalName
argument_list|(
name|srcChildName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|withCount
operator|.
name|removeReference
argument_list|(
name|oldSrcChild
operator|.
name|asReference
argument_list|()
argument_list|)
expr_stmt|;
name|srcChild
operator|=
operator|new
name|INodeReference
operator|.
name|DstReference
argument_list|(
name|srcParent
argument_list|,
name|withCount
argument_list|,
name|srcRefDstSnapshot
argument_list|)
expr_stmt|;
name|withCount
operator|.
name|getReferredINode
argument_list|()
operator|.
name|setLocalName
argument_list|(
name|srcChildName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSrcInSnapshot
condition|)
block|{
name|srcParent
operator|.
name|undoRename4ScrParent
argument_list|(
name|oldSrcChild
operator|.
name|asReference
argument_list|()
argument_list|,
name|srcChild
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// srcParent is not an INodeDirectoryWithSnapshot, we only need to add
comment|// the srcChild back
name|fsd
operator|.
name|addLastINodeNoQuotaCheck
argument_list|(
name|srcIIP
argument_list|,
name|srcChild
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateQuotasInSourceTree ()
name|void
name|updateQuotasInSourceTree
parameter_list|()
throws|throws
name|QuotaExceededException
block|{
comment|// update the quota usage in src tree
if|if
condition|(
name|isSrcInSnapshot
condition|)
block|{
comment|// get the counts after rename
name|Quota
operator|.
name|Counts
name|newSrcCounts
init|=
name|srcChild
operator|.
name|computeQuotaUsage
argument_list|(
name|Quota
operator|.
name|Counts
operator|.
name|newInstance
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|newSrcCounts
operator|.
name|subtract
argument_list|(
name|oldSrcCounts
argument_list|)
expr_stmt|;
name|srcParent
operator|.
name|addSpaceConsumed
argument_list|(
name|newSrcCounts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
argument_list|,
name|newSrcCounts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|RenameOldResult
specifier|static
class|class
name|RenameOldResult
block|{
DECL|field|success
specifier|final
name|boolean
name|success
decl_stmt|;
DECL|field|auditStat
specifier|final
name|HdfsFileStatus
name|auditStat
decl_stmt|;
DECL|method|RenameOldResult (boolean success, HdfsFileStatus auditStat)
name|RenameOldResult
parameter_list|(
name|boolean
name|success
parameter_list|,
name|HdfsFileStatus
name|auditStat
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|auditStat
operator|=
name|auditStat
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

