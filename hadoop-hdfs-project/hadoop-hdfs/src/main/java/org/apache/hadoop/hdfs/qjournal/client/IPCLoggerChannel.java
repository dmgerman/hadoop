begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|JournalOutOfSyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|GetEditLogManifestResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|GetJournalStateResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|NewEpochResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|PrepareRecoveryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|SegmentStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|RequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocolPB
operator|.
name|QJournalProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocolPB
operator|.
name|QJournalProtocolTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
operator|.
name|GetJournalEditServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InetAddresses
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|UncaughtExceptionHandlers
import|;
end_import

begin_comment
comment|/**  * Channel to a remote JournalNode using Hadoop IPC.  * All of the calls are run on a separate thread, and return  * {@link ListenableFuture} instances to wait for their result.  * This allows calls to be bound together using the {@link QuorumCall}  * class.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|IPCLoggerChannel
specifier|public
class|class
name|IPCLoggerChannel
implements|implements
name|AsyncLogger
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|addr
specifier|protected
specifier|final
name|InetSocketAddress
name|addr
decl_stmt|;
DECL|field|proxy
specifier|private
name|QJournalProtocol
name|proxy
decl_stmt|;
comment|/**    * Executes tasks submitted to it serially, on a single thread, in FIFO order    * (generally used for write tasks that should not be reordered).    */
DECL|field|singleThreadExecutor
specifier|private
specifier|final
name|ListeningExecutorService
name|singleThreadExecutor
decl_stmt|;
comment|/**    * Executes tasks submitted to it in parallel with each other and with those    * submitted to singleThreadExecutor (generally used for read tasks that can    * be safely reordered and interleaved with writes).    */
DECL|field|parallelExecutor
specifier|private
specifier|final
name|ListeningExecutorService
name|parallelExecutor
decl_stmt|;
DECL|field|ipcSerial
specifier|private
name|long
name|ipcSerial
init|=
literal|0
decl_stmt|;
DECL|field|epoch
specifier|private
name|long
name|epoch
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|committedTxId
specifier|private
name|long
name|committedTxId
init|=
name|HdfsServerConstants
operator|.
name|INVALID_TXID
decl_stmt|;
DECL|field|journalId
specifier|private
specifier|final
name|String
name|journalId
decl_stmt|;
DECL|field|nameServiceId
specifier|private
specifier|final
name|String
name|nameServiceId
decl_stmt|;
DECL|field|nsInfo
specifier|private
specifier|final
name|NamespaceInfo
name|nsInfo
decl_stmt|;
DECL|field|httpServerURL
specifier|private
name|URL
name|httpServerURL
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|IPCLoggerChannelMetrics
name|metrics
decl_stmt|;
comment|/**    * The number of bytes of edits data still in the queue.    */
DECL|field|queuedEditsSizeBytes
specifier|private
name|int
name|queuedEditsSizeBytes
init|=
literal|0
decl_stmt|;
comment|/**    * The highest txid that has been successfully logged on the remote JN.    */
DECL|field|highestAckedTxId
specifier|private
name|long
name|highestAckedTxId
init|=
literal|0
decl_stmt|;
comment|/**    * Nanotime of the last time we successfully journaled some edits    * to the remote node.    */
DECL|field|lastAckNanos
specifier|private
name|long
name|lastAckNanos
init|=
literal|0
decl_stmt|;
comment|/**    * Nanotime of the last time that committedTxId was update. Used    * to calculate the lag in terms of time, rather than just a number    * of txns.    */
DECL|field|lastCommitNanos
specifier|private
name|long
name|lastCommitNanos
init|=
literal|0
decl_stmt|;
comment|/**    * The maximum number of bytes that can be pending in the queue.    * This keeps the writer from hitting OOME if one of the loggers    * starts responding really slowly. Eventually, the queue    * overflows and it starts to treat the logger as having errored.    */
DECL|field|queueSizeLimitBytes
specifier|private
specifier|final
name|int
name|queueSizeLimitBytes
decl_stmt|;
comment|/**    * If this logger misses some edits, or restarts in the middle of    * a segment, the writer won't be able to write any more edits until    * the beginning of the next segment. Upon detecting this situation,    * the writer sets this flag to true to avoid sending useless RPCs.    */
DECL|field|outOfSync
specifier|private
name|boolean
name|outOfSync
init|=
literal|false
decl_stmt|;
comment|/**    * Stopwatch which starts counting on each heartbeat that is sent    */
DECL|field|lastHeartbeatStopwatch
specifier|private
specifier|final
name|StopWatch
name|lastHeartbeatStopwatch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
DECL|field|HEARTBEAT_INTERVAL_MILLIS
specifier|private
specifier|static
specifier|final
name|long
name|HEARTBEAT_INTERVAL_MILLIS
init|=
literal|1000
decl_stmt|;
DECL|field|WARN_JOURNAL_MILLIS_THRESHOLD
specifier|private
specifier|static
specifier|final
name|long
name|WARN_JOURNAL_MILLIS_THRESHOLD
init|=
literal|1000
decl_stmt|;
DECL|field|FACTORY
specifier|static
specifier|final
name|Factory
name|FACTORY
init|=
operator|new
name|AsyncLogger
operator|.
name|Factory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AsyncLogger
name|createLogger
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|,
name|String
name|journalId
parameter_list|,
name|String
name|nameServiceId
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
return|return
operator|new
name|IPCLoggerChannel
argument_list|(
name|conf
argument_list|,
name|nsInfo
argument_list|,
name|journalId
argument_list|,
name|nameServiceId
argument_list|,
name|addr
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|IPCLoggerChannel (Configuration conf, NamespaceInfo nsInfo, String journalId, InetSocketAddress addr)
specifier|public
name|IPCLoggerChannel
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|,
name|String
name|journalId
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|nsInfo
argument_list|,
name|journalId
argument_list|,
literal|null
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
DECL|method|IPCLoggerChannel (Configuration conf, NamespaceInfo nsInfo, String journalId, String nameServiceId, InetSocketAddress addr)
specifier|public
name|IPCLoggerChannel
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|,
name|String
name|journalId
parameter_list|,
name|String
name|nameServiceId
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|nsInfo
operator|=
name|nsInfo
expr_stmt|;
name|this
operator|.
name|journalId
operator|=
name|journalId
expr_stmt|;
name|this
operator|.
name|nameServiceId
operator|=
name|nameServiceId
expr_stmt|;
name|this
operator|.
name|addr
operator|=
name|addr
expr_stmt|;
name|this
operator|.
name|queueSizeLimitBytes
operator|=
literal|1024
operator|*
literal|1024
operator|*
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_QUEUE_SIZE_LIMIT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_QUEUE_SIZE_LIMIT_DEFAULT
argument_list|)
expr_stmt|;
name|singleThreadExecutor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|createSingleThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|parallelExecutor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|createParallelExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|IPCLoggerChannelMetrics
operator|.
name|create
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setEpoch (long epoch)
specifier|public
specifier|synchronized
name|void
name|setEpoch
parameter_list|(
name|long
name|epoch
parameter_list|)
block|{
name|this
operator|.
name|epoch
operator|=
name|epoch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setCommittedTxId (long txid)
specifier|public
specifier|synchronized
name|void
name|setCommittedTxId
parameter_list|(
name|long
name|txid
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|txid
operator|>=
name|committedTxId
argument_list|,
literal|"Trying to move committed txid backwards in client "
operator|+
literal|"old: %s new: %s"
argument_list|,
name|committedTxId
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|this
operator|.
name|committedTxId
operator|=
name|txid
expr_stmt|;
name|this
operator|.
name|lastCommitNanos
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// No more tasks may be submitted after this point.
name|singleThreadExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|parallelExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
comment|// TODO: this can hang for quite some time if the client
comment|// is currently in the middle of a call to a downed JN.
comment|// We should instead do this asynchronously, and just stop
comment|// making any more calls after this point (eg clear the queue)
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getProxy ()
specifier|protected
name|QJournalProtocol
name|getProxy
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
return|return
name|proxy
return|;
name|proxy
operator|=
name|createProxy
argument_list|()
expr_stmt|;
return|return
name|proxy
return|;
block|}
DECL|method|createProxy ()
specifier|protected
name|QJournalProtocol
name|createProxy
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|confCopy
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Need to set NODELAY or else batches larger than MTU can trigger
comment|// 40ms nagling delays.
name|confCopy
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_TCPNODELAY_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|confCopy
argument_list|,
name|QJournalProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|SecurityUtil
operator|.
name|doAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|QJournalProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|QJournalProtocol
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|confCopy
argument_list|,
name|QJournalProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|QJournalProtocolPB
name|pbproxy
init|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|QJournalProtocolPB
operator|.
name|class
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|QJournalProtocolPB
operator|.
name|class
argument_list|)
argument_list|,
name|addr
argument_list|,
name|confCopy
argument_list|)
decl_stmt|;
return|return
operator|new
name|QJournalProtocolTranslatorPB
argument_list|(
name|pbproxy
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Separated out for easy overriding in tests.    */
annotation|@
name|VisibleForTesting
DECL|method|createSingleThreadExecutor ()
specifier|protected
name|ExecutorService
name|createSingleThreadExecutor
parameter_list|()
block|{
return|return
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Logger channel (from single-thread executor) to "
operator|+
name|addr
argument_list|)
operator|.
name|setUncaughtExceptionHandler
argument_list|(
name|UncaughtExceptionHandlers
operator|.
name|systemExit
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Separated out for easy overriding in tests.    */
annotation|@
name|VisibleForTesting
DECL|method|createParallelExecutor ()
specifier|protected
name|ExecutorService
name|createParallelExecutor
parameter_list|()
block|{
return|return
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Logger channel (from parallel executor) to "
operator|+
name|addr
argument_list|)
operator|.
name|setUncaughtExceptionHandler
argument_list|(
name|UncaughtExceptionHandlers
operator|.
name|systemExit
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|buildURLToFetchLogs (long segmentTxId)
specifier|public
name|URL
name|buildURLToFetchLogs
parameter_list|(
name|long
name|segmentTxId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|segmentTxId
operator|>
literal|0
argument_list|,
literal|"Invalid segment: %s"
argument_list|,
name|segmentTxId
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|hasHttpServerEndPoint
argument_list|()
argument_list|,
literal|"No HTTP/HTTPS endpoint"
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|path
init|=
name|GetJournalEditServlet
operator|.
name|buildPath
argument_list|(
name|journalId
argument_list|,
name|segmentTxId
argument_list|,
name|nsInfo
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|URL
argument_list|(
name|httpServerURL
argument_list|,
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// should never get here.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createReqInfo ()
specifier|private
specifier|synchronized
name|RequestInfo
name|createReqInfo
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|epoch
operator|>
literal|0
argument_list|,
literal|"bad epoch: "
operator|+
name|epoch
argument_list|)
expr_stmt|;
return|return
operator|new
name|RequestInfo
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|,
name|epoch
argument_list|,
name|ipcSerial
operator|++
argument_list|,
name|committedTxId
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNextIpcSerial ()
specifier|synchronized
name|long
name|getNextIpcSerial
parameter_list|()
block|{
return|return
name|ipcSerial
return|;
block|}
DECL|method|getQueuedEditsSize ()
specifier|public
specifier|synchronized
name|int
name|getQueuedEditsSize
parameter_list|()
block|{
return|return
name|queuedEditsSizeBytes
return|;
block|}
DECL|method|getRemoteAddress ()
specifier|public
name|InetSocketAddress
name|getRemoteAddress
parameter_list|()
block|{
return|return
name|addr
return|;
block|}
comment|/**    * @return true if the server has gotten out of sync from the client,    * and thus a log roll is required for this logger to successfully start    * logging more edits.    */
DECL|method|isOutOfSync ()
specifier|public
specifier|synchronized
name|boolean
name|isOutOfSync
parameter_list|()
block|{
return|return
name|outOfSync
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|waitForAllPendingCalls ()
name|void
name|waitForAllPendingCalls
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{         }
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// This can't happen!
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|isFormatted ()
specifier|public
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|isFormatted
parameter_list|()
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|()
operator|.
name|isFormatted
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJournalState ()
specifier|public
name|ListenableFuture
argument_list|<
name|GetJournalStateResponseProto
argument_list|>
name|getJournalState
parameter_list|()
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|GetJournalStateResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GetJournalStateResponseProto
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|GetJournalStateResponseProto
name|ret
init|=
name|getProxy
argument_list|()
operator|.
name|getJournalState
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|)
decl_stmt|;
name|constructHttpServerURI
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newEpoch ( final long epoch)
specifier|public
name|ListenableFuture
argument_list|<
name|NewEpochResponseProto
argument_list|>
name|newEpoch
parameter_list|(
specifier|final
name|long
name|epoch
parameter_list|)
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|NewEpochResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NewEpochResponseProto
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|()
operator|.
name|newEpoch
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|,
name|nsInfo
argument_list|,
name|epoch
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|sendEdits ( final long segmentTxId, final long firstTxnId, final int numTxns, final byte[] data)
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|sendEdits
parameter_list|(
specifier|final
name|long
name|segmentTxId
parameter_list|,
specifier|final
name|long
name|firstTxnId
parameter_list|,
specifier|final
name|int
name|numTxns
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|)
block|{
try|try
block|{
name|reserveQueueSpace
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoggerTooFarBehindException
name|e
parameter_list|)
block|{
return|return
name|Futures
operator|.
name|immediateFailedFuture
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|// When this batch is acked, we use its submission time in order
comment|// to calculate how far we are lagging.
specifier|final
name|long
name|submitNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|throwIfOutOfSync
argument_list|()
expr_stmt|;
name|long
name|rpcSendTimeNanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|getProxy
argument_list|()
operator|.
name|journal
argument_list|(
name|createReqInfo
argument_list|()
argument_list|,
name|segmentTxId
argument_list|,
name|firstTxnId
argument_list|,
name|numTxns
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|QuorumJournalManager
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Remote journal "
operator|+
name|IPCLoggerChannel
operator|.
name|this
operator|+
literal|" failed to "
operator|+
literal|"write txns "
operator|+
name|firstTxnId
operator|+
literal|"-"
operator|+
operator|(
name|firstTxnId
operator|+
name|numTxns
operator|-
literal|1
operator|)
operator|+
literal|". Will try to write to this JN again after the next "
operator|+
literal|"log roll."
argument_list|,
name|e
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|IPCLoggerChannel
operator|.
name|this
init|)
block|{
name|outOfSync
operator|=
literal|true
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|rpcTime
init|=
name|TimeUnit
operator|.
name|MICROSECONDS
operator|.
name|convert
argument_list|(
name|now
operator|-
name|rpcSendTimeNanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|long
name|endToEndTime
init|=
name|TimeUnit
operator|.
name|MICROSECONDS
operator|.
name|convert
argument_list|(
name|now
operator|-
name|submitNanos
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|addWriteEndToEndLatency
argument_list|(
name|endToEndTime
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|addWriteRpcLatency
argument_list|(
name|rpcTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|rpcTime
operator|/
literal|1000
operator|>
name|WARN_JOURNAL_MILLIS_THRESHOLD
condition|)
block|{
name|QuorumJournalManager
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Took "
operator|+
operator|(
name|rpcTime
operator|/
literal|1000
operator|)
operator|+
literal|"ms to send a batch of "
operator|+
name|numTxns
operator|+
literal|" edits ("
operator|+
name|data
operator|.
name|length
operator|+
literal|" bytes) to "
operator|+
literal|"remote journal "
operator|+
name|IPCLoggerChannel
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|IPCLoggerChannel
operator|.
name|this
init|)
block|{
name|highestAckedTxId
operator|=
name|firstTxnId
operator|+
name|numTxns
operator|-
literal|1
expr_stmt|;
name|lastAckNanos
operator|=
name|submitNanos
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
comment|// it didn't successfully get submitted,
comment|// so adjust the queue size back down.
name|unreserveQueueSpace
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It was submitted to the queue, so adjust the length
comment|// once the call completes, regardless of whether it
comment|// succeeds or fails.
name|Futures
operator|.
name|addCallback
argument_list|(
name|ret
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|unreserveQueueSpace
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|t
parameter_list|)
block|{
name|unreserveQueueSpace
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|throwIfOutOfSync ()
specifier|private
name|void
name|throwIfOutOfSync
parameter_list|()
throws|throws
name|JournalOutOfSyncException
throws|,
name|IOException
block|{
if|if
condition|(
name|isOutOfSync
argument_list|()
condition|)
block|{
comment|// Even if we're out of sync, it's useful to send an RPC
comment|// to the remote node in order to update its lag metrics, etc.
name|heartbeatIfNecessary
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|JournalOutOfSyncException
argument_list|(
literal|"Journal disabled until next roll"
argument_list|)
throw|;
block|}
block|}
comment|/**    * When we've entered an out-of-sync state, it's still useful to periodically    * send an empty RPC to the server, such that it has the up to date    * committedTxId. This acts as a sanity check during recovery, and also allows    * that node's metrics to be up-to-date about its lag.    *     * In the future, this method may also be used in order to check that the    * current node is still the current writer, even if no edits are being    * written.    */
DECL|method|heartbeatIfNecessary ()
specifier|private
name|void
name|heartbeatIfNecessary
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lastHeartbeatStopwatch
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|>
name|HEARTBEAT_INTERVAL_MILLIS
operator|||
operator|!
name|lastHeartbeatStopwatch
operator|.
name|isRunning
argument_list|()
condition|)
block|{
try|try
block|{
name|getProxy
argument_list|()
operator|.
name|heartbeat
argument_list|(
name|createReqInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Don't send heartbeats more often than the configured interval,
comment|// even if they fail.
name|lastHeartbeatStopwatch
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|reserveQueueSpace (int size)
specifier|private
specifier|synchronized
name|void
name|reserveQueueSpace
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|LoggerTooFarBehindException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|size
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|queuedEditsSizeBytes
operator|+
name|size
operator|>
name|queueSizeLimitBytes
operator|&&
name|queuedEditsSizeBytes
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|LoggerTooFarBehindException
argument_list|()
throw|;
block|}
name|queuedEditsSizeBytes
operator|+=
name|size
expr_stmt|;
block|}
DECL|method|unreserveQueueSpace (int size)
specifier|private
specifier|synchronized
name|void
name|unreserveQueueSpace
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|size
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|queuedEditsSizeBytes
operator|-=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|format (final NamespaceInfo nsInfo)
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|format
parameter_list|(
specifier|final
name|NamespaceInfo
name|nsInfo
parameter_list|)
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|getProxy
argument_list|()
operator|.
name|format
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|,
name|nsInfo
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|startLogSegment (final long txid, final int layoutVersion)
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|startLogSegment
parameter_list|(
specifier|final
name|long
name|txid
parameter_list|,
specifier|final
name|int
name|layoutVersion
parameter_list|)
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|startLogSegment
argument_list|(
name|createReqInfo
argument_list|()
argument_list|,
name|txid
argument_list|,
name|layoutVersion
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|IPCLoggerChannel
operator|.
name|this
init|)
block|{
if|if
condition|(
name|outOfSync
condition|)
block|{
name|outOfSync
operator|=
literal|false
expr_stmt|;
name|QuorumJournalManager
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting previously-stopped writes to "
operator|+
name|IPCLoggerChannel
operator|.
name|this
operator|+
literal|" in segment starting at txid "
operator|+
name|txid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|finalizeLogSegment ( final long startTxId, final long endTxId)
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|finalizeLogSegment
parameter_list|(
specifier|final
name|long
name|startTxId
parameter_list|,
specifier|final
name|long
name|endTxId
parameter_list|)
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|throwIfOutOfSync
argument_list|()
expr_stmt|;
name|getProxy
argument_list|()
operator|.
name|finalizeLogSegment
argument_list|(
name|createReqInfo
argument_list|()
argument_list|,
name|startTxId
argument_list|,
name|endTxId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|purgeLogsOlderThan (final long minTxIdToKeep)
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|purgeLogsOlderThan
parameter_list|(
specifier|final
name|long
name|minTxIdToKeep
parameter_list|)
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|getProxy
argument_list|()
operator|.
name|purgeLogsOlderThan
argument_list|(
name|createReqInfo
argument_list|()
argument_list|,
name|minTxIdToKeep
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getEditLogManifest ( final long fromTxnId, final boolean inProgressOk)
specifier|public
name|ListenableFuture
argument_list|<
name|RemoteEditLogManifest
argument_list|>
name|getEditLogManifest
parameter_list|(
specifier|final
name|long
name|fromTxnId
parameter_list|,
specifier|final
name|boolean
name|inProgressOk
parameter_list|)
block|{
return|return
name|parallelExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|RemoteEditLogManifest
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RemoteEditLogManifest
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|GetEditLogManifestResponseProto
name|ret
init|=
name|getProxy
argument_list|()
operator|.
name|getEditLogManifest
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|,
name|fromTxnId
argument_list|,
name|inProgressOk
argument_list|)
decl_stmt|;
comment|// Update the http port, since we need this to build URLs to any of the
comment|// returned logs.
name|constructHttpServerURI
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|ret
operator|.
name|getManifest
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|prepareRecovery ( final long segmentTxId)
specifier|public
name|ListenableFuture
argument_list|<
name|PrepareRecoveryResponseProto
argument_list|>
name|prepareRecovery
parameter_list|(
specifier|final
name|long
name|segmentTxId
parameter_list|)
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|PrepareRecoveryResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PrepareRecoveryResponseProto
name|call
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hasHttpServerEndPoint
argument_list|()
condition|)
block|{
comment|// force an RPC call so we know what the HTTP port should be if it
comment|// haven't done so.
name|GetJournalStateResponseProto
name|ret
init|=
name|getProxy
argument_list|()
operator|.
name|getJournalState
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|)
decl_stmt|;
name|constructHttpServerURI
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|getProxy
argument_list|()
operator|.
name|prepareRecovery
argument_list|(
name|createReqInfo
argument_list|()
argument_list|,
name|segmentTxId
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|acceptRecovery ( final SegmentStateProto log, final URL url)
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|acceptRecovery
parameter_list|(
specifier|final
name|SegmentStateProto
name|log
parameter_list|,
specifier|final
name|URL
name|url
parameter_list|)
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|acceptRecovery
argument_list|(
name|createReqInfo
argument_list|()
argument_list|,
name|log
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doPreUpgrade ()
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|doPreUpgrade
parameter_list|()
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|doPreUpgrade
argument_list|(
name|journalId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doUpgrade (final StorageInfo sInfo)
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|doUpgrade
parameter_list|(
specifier|final
name|StorageInfo
name|sInfo
parameter_list|)
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|doUpgrade
argument_list|(
name|journalId
argument_list|,
name|sInfo
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doFinalize ()
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|doFinalize
parameter_list|()
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|doFinalize
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|canRollBack (final StorageInfo storage, final StorageInfo prevStorage, final int targetLayoutVersion)
specifier|public
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|canRollBack
parameter_list|(
specifier|final
name|StorageInfo
name|storage
parameter_list|,
specifier|final
name|StorageInfo
name|prevStorage
parameter_list|,
specifier|final
name|int
name|targetLayoutVersion
parameter_list|)
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|()
operator|.
name|canRollBack
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|,
name|storage
argument_list|,
name|prevStorage
argument_list|,
name|targetLayoutVersion
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doRollback ()
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|doRollback
parameter_list|()
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|doRollback
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|discardSegments (final long startTxId)
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|discardSegments
parameter_list|(
specifier|final
name|long
name|startTxId
parameter_list|)
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|discardSegments
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|,
name|startTxId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJournalCTime ()
specifier|public
name|ListenableFuture
argument_list|<
name|Long
argument_list|>
name|getJournalCTime
parameter_list|()
block|{
return|return
name|singleThreadExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|()
operator|.
name|getJournalCTime
argument_list|(
name|journalId
argument_list|,
name|nameServiceId
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|InetAddresses
operator|.
name|toAddrString
argument_list|(
name|addr
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|+
literal|':'
operator|+
name|addr
operator|.
name|getPort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|appendReport (StringBuilder sb)
specifier|public
specifier|synchronized
name|void
name|appendReport
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Written txid "
argument_list|)
operator|.
name|append
argument_list|(
name|highestAckedTxId
argument_list|)
expr_stmt|;
name|long
name|behind
init|=
name|getLagTxns
argument_list|()
decl_stmt|;
if|if
condition|(
name|behind
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|lastAckNanos
operator|!=
literal|0
condition|)
block|{
name|long
name|lagMillis
init|=
name|getLagTimeMillis
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" ("
operator|+
name|behind
operator|+
literal|" txns/"
operator|+
name|lagMillis
operator|+
literal|"ms behind)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (never written"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|outOfSync
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (will try to re-sync on next segment)"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLagTxns ()
specifier|public
specifier|synchronized
name|long
name|getLagTxns
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|committedTxId
operator|-
name|highestAckedTxId
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|getLagTimeMillis ()
specifier|public
specifier|synchronized
name|long
name|getLagTimeMillis
parameter_list|()
block|{
return|return
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|lastCommitNanos
operator|-
name|lastAckNanos
argument_list|,
literal|0
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
return|;
block|}
DECL|method|constructHttpServerURI (GetEditLogManifestResponseProto ret)
specifier|private
name|void
name|constructHttpServerURI
parameter_list|(
name|GetEditLogManifestResponseProto
name|ret
parameter_list|)
block|{
if|if
condition|(
name|ret
operator|.
name|hasFromURL
argument_list|()
condition|)
block|{
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|ret
operator|.
name|getFromURL
argument_list|()
argument_list|)
decl_stmt|;
name|httpServerURL
operator|=
name|getHttpServerURI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|httpServerURL
operator|=
name|getHttpServerURI
argument_list|(
literal|"http"
argument_list|,
name|ret
operator|.
name|getHttpPort
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
DECL|method|constructHttpServerURI (GetJournalStateResponseProto ret)
specifier|private
name|void
name|constructHttpServerURI
parameter_list|(
name|GetJournalStateResponseProto
name|ret
parameter_list|)
block|{
if|if
condition|(
name|ret
operator|.
name|hasFromURL
argument_list|()
condition|)
block|{
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|ret
operator|.
name|getFromURL
argument_list|()
argument_list|)
decl_stmt|;
name|httpServerURL
operator|=
name|getHttpServerURI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|httpServerURL
operator|=
name|getHttpServerURI
argument_list|(
literal|"http"
argument_list|,
name|ret
operator|.
name|getHttpPort
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
comment|/**    * Construct the http server based on the response.    *    * The fromURL field in the response specifies the endpoint of the http    * server. However, the address might not be accurate since the server can    * bind to multiple interfaces. Here the client plugs in the address specified    * in the configuration and generates the URI.    */
DECL|method|getHttpServerURI (String scheme, int port)
specifier|private
name|URL
name|getHttpServerURI
parameter_list|(
name|String
name|scheme
parameter_list|,
name|int
name|port
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|scheme
argument_list|,
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|port
argument_list|,
literal|""
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// Unreachable
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|hasHttpServerEndPoint ()
specifier|private
name|boolean
name|hasHttpServerEndPoint
parameter_list|()
block|{
return|return
name|httpServerURL
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

