begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|JournalNotFormattedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|JournalOutOfSyncException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|NewEpochResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|PersistedRecoveryPaxosData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|PrepareRecoveryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|SegmentStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|RequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageErrorReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
operator|.
name|EditLogFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|JournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|TransferFsImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|AtomicFileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|BestEffortLongFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|PersistentLongFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Ranges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_comment
comment|/**  * A JournalNode can manage journals for several clusters at once.  * Each such journal is entirely independent despite being hosted by  * the same JVM.  */
end_comment

begin_class
DECL|class|Journal
class|class
name|Journal
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Journal
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Current writing state
DECL|field|curSegment
specifier|private
name|EditLogOutputStream
name|curSegment
decl_stmt|;
DECL|field|curSegmentTxId
specifier|private
name|long
name|curSegmentTxId
init|=
name|HdfsConstants
operator|.
name|INVALID_TXID
decl_stmt|;
DECL|field|nextTxId
specifier|private
name|long
name|nextTxId
init|=
name|HdfsConstants
operator|.
name|INVALID_TXID
decl_stmt|;
DECL|field|journalId
specifier|private
specifier|final
name|String
name|journalId
decl_stmt|;
DECL|field|storage
specifier|private
specifier|final
name|JNStorage
name|storage
decl_stmt|;
comment|/**    * When a new writer comes along, it asks each node to promise    * to ignore requests from any previous writer, as identified    * by epoch number. In order to make such a promise, the epoch    * number of that writer is stored persistently on disk.    */
DECL|field|lastPromisedEpoch
specifier|private
name|PersistentLongFile
name|lastPromisedEpoch
decl_stmt|;
comment|/**    * The epoch number of the last writer to actually write a transaction.    * This is used to differentiate log segments after a crash at the very    * beginning of a segment. See the the 'testNewerVersionOfSegmentWins'    * test case.    */
DECL|field|lastWriterEpoch
specifier|private
name|PersistentLongFile
name|lastWriterEpoch
decl_stmt|;
comment|/**    * Lower-bound on the last committed transaction ID. This is not    * depended upon for correctness, but acts as a sanity check    * during the recovery procedures, and as a visibility mark    * for clients reading in-progress logs.    */
DECL|field|committedTxnId
specifier|private
name|BestEffortLongFile
name|committedTxnId
decl_stmt|;
DECL|field|LAST_PROMISED_FILENAME
specifier|private
specifier|static
specifier|final
name|String
name|LAST_PROMISED_FILENAME
init|=
literal|"last-promised-epoch"
decl_stmt|;
DECL|field|LAST_WRITER_EPOCH
specifier|private
specifier|static
specifier|final
name|String
name|LAST_WRITER_EPOCH
init|=
literal|"last-writer-epoch"
decl_stmt|;
DECL|field|COMMITTED_TXID_FILENAME
specifier|private
specifier|static
specifier|final
name|String
name|COMMITTED_TXID_FILENAME
init|=
literal|"committed-txid"
decl_stmt|;
DECL|field|fjm
specifier|private
specifier|final
name|FileJournalManager
name|fjm
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|JournalMetrics
name|metrics
decl_stmt|;
DECL|method|Journal (File logDir, String journalId, StorageErrorReporter errorReporter)
name|Journal
parameter_list|(
name|File
name|logDir
parameter_list|,
name|String
name|journalId
parameter_list|,
name|StorageErrorReporter
name|errorReporter
parameter_list|)
throws|throws
name|IOException
block|{
name|storage
operator|=
operator|new
name|JNStorage
argument_list|(
name|logDir
argument_list|,
name|errorReporter
argument_list|)
expr_stmt|;
name|this
operator|.
name|journalId
operator|=
name|journalId
expr_stmt|;
name|refreshCachedData
argument_list|()
expr_stmt|;
name|this
operator|.
name|fjm
operator|=
name|storage
operator|.
name|getJournalManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|JournalMetrics
operator|.
name|create
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reload any data that may have been cached. This is necessary    * when we first load the Journal, but also after any formatting    * operation, since the cached data is no longer relevant.    */
DECL|method|refreshCachedData ()
specifier|private
specifier|synchronized
name|void
name|refreshCachedData
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|committedTxnId
argument_list|)
expr_stmt|;
name|File
name|currentDir
init|=
name|storage
operator|.
name|getSingularStorageDir
argument_list|()
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|this
operator|.
name|lastPromisedEpoch
operator|=
operator|new
name|PersistentLongFile
argument_list|(
operator|new
name|File
argument_list|(
name|currentDir
argument_list|,
name|LAST_PROMISED_FILENAME
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastWriterEpoch
operator|=
operator|new
name|PersistentLongFile
argument_list|(
operator|new
name|File
argument_list|(
name|currentDir
argument_list|,
name|LAST_WRITER_EPOCH
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|committedTxnId
operator|=
operator|new
name|BestEffortLongFile
argument_list|(
operator|new
name|File
argument_list|(
name|currentDir
argument_list|,
name|COMMITTED_TXID_FILENAME
argument_list|)
argument_list|,
name|HdfsConstants
operator|.
name|INVALID_TXID
argument_list|)
expr_stmt|;
block|}
comment|/**    * Iterate over the edit logs stored locally, and set    * {@link #curSegmentTxId} to refer to the most recently written    * one.    */
DECL|method|scanStorage ()
specifier|private
specifier|synchronized
name|void
name|scanStorage
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fjm
operator|.
name|getStorageDirectory
argument_list|()
operator|.
name|getCurrentDir
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanning storage "
operator|+
name|fjm
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EditLogFile
argument_list|>
name|files
init|=
name|fjm
operator|.
name|getLogFiles
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|curSegmentTxId
operator|=
name|HdfsConstants
operator|.
name|INVALID_TXID
expr_stmt|;
while|while
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|EditLogFile
name|latestLog
init|=
name|files
operator|.
name|remove
argument_list|(
name|files
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|latestLog
operator|.
name|validateLog
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Latest log is "
operator|+
name|latestLog
argument_list|)
expr_stmt|;
if|if
condition|(
name|latestLog
operator|.
name|getLastTxId
argument_list|()
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
condition|)
block|{
comment|// the log contains no transactions
name|LOG
operator|.
name|warn
argument_list|(
literal|"Latest log "
operator|+
name|latestLog
operator|+
literal|" has no transactions. "
operator|+
literal|"moving it aside and looking for previous log"
argument_list|)
expr_stmt|;
name|latestLog
operator|.
name|moveAsideEmptyFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|curSegmentTxId
operator|=
name|latestLog
operator|.
name|getFirstTxId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Format the local storage with the given namespace.    */
DECL|method|format (NamespaceInfo nsInfo)
name|void
name|format
parameter_list|(
name|NamespaceInfo
name|nsInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nsInfo
operator|.
name|getNamespaceID
argument_list|()
operator|!=
literal|0
argument_list|,
literal|"can't format with uninitialized namespace info: %s"
argument_list|,
name|nsInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Formatting "
operator|+
name|this
operator|+
literal|" with namespace info: "
operator|+
name|nsInfo
argument_list|)
expr_stmt|;
name|storage
operator|.
name|format
argument_list|(
name|nsInfo
argument_list|)
expr_stmt|;
name|refreshCachedData
argument_list|()
expr_stmt|;
block|}
comment|/**    * Unlock and release resources.    */
annotation|@
name|Override
comment|// Closeable
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|committedTxnId
argument_list|)
expr_stmt|;
block|}
DECL|method|getStorage ()
name|JNStorage
name|getStorage
parameter_list|()
block|{
return|return
name|storage
return|;
block|}
DECL|method|getJournalId ()
name|String
name|getJournalId
parameter_list|()
block|{
return|return
name|journalId
return|;
block|}
comment|/**    * @return the last epoch which this node has promised not to accept    * any lower epoch, or 0 if no promises have been made.    */
DECL|method|getLastPromisedEpoch ()
specifier|synchronized
name|long
name|getLastPromisedEpoch
parameter_list|()
throws|throws
name|IOException
block|{
name|checkFormatted
argument_list|()
expr_stmt|;
return|return
name|lastPromisedEpoch
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getLastWriterEpoch ()
specifier|synchronized
specifier|public
name|long
name|getLastWriterEpoch
parameter_list|()
throws|throws
name|IOException
block|{
name|checkFormatted
argument_list|()
expr_stmt|;
return|return
name|lastWriterEpoch
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getCommittedTxnIdForTests ()
specifier|synchronized
name|long
name|getCommittedTxnIdForTests
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|committedTxnId
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMetricsForTests ()
name|JournalMetrics
name|getMetricsForTests
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
comment|/**    * Try to create a new epoch for this journal.    * @param nsInfo the namespace, which is verified for consistency or used to    * format, if the Journal has not yet been written to.    * @param epoch the epoch to start    * @return the status information necessary to begin recovery    * @throws IOException if the node has already made a promise to another    * writer with a higher epoch number, if the namespace is inconsistent,    * or if a disk error occurs.    */
DECL|method|newEpoch ( NamespaceInfo nsInfo, long epoch)
specifier|synchronized
name|NewEpochResponseProto
name|newEpoch
parameter_list|(
name|NamespaceInfo
name|nsInfo
parameter_list|,
name|long
name|epoch
parameter_list|)
throws|throws
name|IOException
block|{
name|checkFormatted
argument_list|()
expr_stmt|;
name|storage
operator|.
name|checkConsistentNamespace
argument_list|(
name|nsInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|epoch
operator|<=
name|getLastPromisedEpoch
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Proposed epoch "
operator|+
name|epoch
operator|+
literal|"<= last promise "
operator|+
name|getLastPromisedEpoch
argument_list|()
argument_list|)
throw|;
block|}
name|lastPromisedEpoch
operator|.
name|set
argument_list|(
name|epoch
argument_list|)
expr_stmt|;
if|if
condition|(
name|curSegment
operator|!=
literal|null
condition|)
block|{
name|curSegment
operator|.
name|close
argument_list|()
expr_stmt|;
name|curSegment
operator|=
literal|null
expr_stmt|;
name|curSegmentTxId
operator|=
name|HdfsConstants
operator|.
name|INVALID_TXID
expr_stmt|;
block|}
name|NewEpochResponseProto
operator|.
name|Builder
name|builder
init|=
name|NewEpochResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// TODO: we only need to do this once, not on writer switchover.
name|scanStorage
argument_list|()
expr_stmt|;
if|if
condition|(
name|curSegmentTxId
operator|!=
name|HdfsConstants
operator|.
name|INVALID_TXID
condition|)
block|{
name|builder
operator|.
name|setLastSegmentTxId
argument_list|(
name|curSegmentTxId
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Write a batch of edits to the journal.    * {@see QJournalProtocol#journal(RequestInfo, long, long, int, byte[])}    */
DECL|method|journal (RequestInfo reqInfo, long segmentTxId, long firstTxnId, int numTxns, byte[] records)
specifier|synchronized
name|void
name|journal
parameter_list|(
name|RequestInfo
name|reqInfo
parameter_list|,
name|long
name|segmentTxId
parameter_list|,
name|long
name|firstTxnId
parameter_list|,
name|int
name|numTxns
parameter_list|,
name|byte
index|[]
name|records
parameter_list|)
throws|throws
name|IOException
block|{
name|checkFormatted
argument_list|()
expr_stmt|;
name|checkWriteRequest
argument_list|(
name|reqInfo
argument_list|)
expr_stmt|;
name|checkSync
argument_list|(
name|curSegment
operator|!=
literal|null
argument_list|,
literal|"Can't write, no segment open"
argument_list|)
expr_stmt|;
if|if
condition|(
name|curSegmentTxId
operator|!=
name|segmentTxId
condition|)
block|{
comment|// Sanity check: it is possible that the writer will fail IPCs
comment|// on both the finalize() and then the start() of the next segment.
comment|// This could cause us to continue writing to an old segment
comment|// instead of rolling to a new one, which breaks one of the
comment|// invariants in the design. If it happens, abort the segment
comment|// and throw an exception.
name|curSegment
operator|.
name|abort
argument_list|()
expr_stmt|;
name|curSegment
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Writer out of sync: it thinks it is writing segment "
operator|+
name|segmentTxId
operator|+
literal|" but current segment is "
operator|+
name|curSegmentTxId
argument_list|)
throw|;
block|}
name|checkSync
argument_list|(
name|nextTxId
operator|==
name|firstTxnId
argument_list|,
literal|"Can't write txid "
operator|+
name|firstTxnId
operator|+
literal|" expecting nextTxId="
operator|+
name|nextTxId
argument_list|)
expr_stmt|;
name|long
name|lastTxnId
init|=
name|firstTxnId
operator|+
name|numTxns
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Writing txid "
operator|+
name|firstTxnId
operator|+
literal|"-"
operator|+
name|lastTxnId
argument_list|)
expr_stmt|;
block|}
comment|// If the edit has already been marked as committed, we know
comment|// it has been fsynced on a quorum of other nodes, and we are
comment|// "catching up" with the rest. Hence we do not need to fsync.
name|boolean
name|isLagging
init|=
name|lastTxnId
operator|<=
name|committedTxnId
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|shouldFsync
init|=
operator|!
name|isLagging
decl_stmt|;
name|curSegment
operator|.
name|writeRaw
argument_list|(
name|records
argument_list|,
literal|0
argument_list|,
name|records
operator|.
name|length
argument_list|)
expr_stmt|;
name|curSegment
operator|.
name|setReadyToFlush
argument_list|()
expr_stmt|;
name|Stopwatch
name|sw
init|=
operator|new
name|Stopwatch
argument_list|()
decl_stmt|;
name|sw
operator|.
name|start
argument_list|()
expr_stmt|;
name|curSegment
operator|.
name|flush
argument_list|(
name|shouldFsync
argument_list|)
expr_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|addSync
argument_list|(
name|sw
operator|.
name|elapsedTime
argument_list|(
name|TimeUnit
operator|.
name|MICROSECONDS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLagging
condition|)
block|{
comment|// This batch of edits has already been committed on a quorum of other
comment|// nodes. So, we are in "catch up" mode. This gets its own metric.
name|metrics
operator|.
name|batchesWrittenWhileLagging
operator|.
name|incr
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|currentLagTxns
operator|.
name|set
argument_list|(
name|committedTxnId
operator|.
name|get
argument_list|()
operator|-
name|lastTxnId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metrics
operator|.
name|currentLagTxns
operator|.
name|set
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|batchesWritten
operator|.
name|incr
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|bytesWritten
operator|.
name|incr
argument_list|(
name|records
operator|.
name|length
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|txnsWritten
operator|.
name|incr
argument_list|(
name|numTxns
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|lastWrittenTxId
operator|.
name|set
argument_list|(
name|lastTxnId
argument_list|)
expr_stmt|;
name|nextTxId
operator|+=
name|numTxns
expr_stmt|;
block|}
comment|/**    * Ensure that the given request is coming from the correct writer and in-order.    * @param reqInfo the request info    * @throws IOException if the request is invalid.    */
DECL|method|checkRequest (RequestInfo reqInfo)
specifier|private
specifier|synchronized
name|void
name|checkRequest
parameter_list|(
name|RequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Invariant 25 from ZAB paper
if|if
condition|(
name|reqInfo
operator|.
name|getEpoch
argument_list|()
operator|<
name|lastPromisedEpoch
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"IPC's epoch "
operator|+
name|reqInfo
operator|.
name|getEpoch
argument_list|()
operator|+
literal|" is less than the last promised epoch "
operator|+
name|lastPromisedEpoch
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
comment|// TODO: should other requests check the _exact_ epoch instead of
comment|// the<= check?<= should probably only be necessary for the
comment|// first calls
comment|// TODO: some check on serial number that they only increase from a given
comment|// client
if|if
condition|(
name|reqInfo
operator|.
name|hasCommittedTxId
argument_list|()
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|reqInfo
operator|.
name|getCommittedTxId
argument_list|()
operator|>=
name|committedTxnId
operator|.
name|get
argument_list|()
argument_list|,
literal|"Client trying to move committed txid backward from "
operator|+
name|committedTxnId
operator|.
name|get
argument_list|()
operator|+
literal|" to "
operator|+
name|reqInfo
operator|.
name|getCommittedTxId
argument_list|()
argument_list|)
expr_stmt|;
name|committedTxnId
operator|.
name|set
argument_list|(
name|reqInfo
operator|.
name|getCommittedTxId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkWriteRequest (RequestInfo reqInfo)
specifier|private
specifier|synchronized
name|void
name|checkWriteRequest
parameter_list|(
name|RequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRequest
argument_list|(
name|reqInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|reqInfo
operator|.
name|getEpoch
argument_list|()
operator|!=
name|lastWriterEpoch
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"IPC's epoch "
operator|+
name|reqInfo
operator|.
name|getEpoch
argument_list|()
operator|+
literal|" is not the current writer epoch  "
operator|+
name|lastWriterEpoch
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|checkFormatted ()
specifier|private
name|void
name|checkFormatted
parameter_list|()
throws|throws
name|JournalNotFormattedException
block|{
if|if
condition|(
operator|!
name|storage
operator|.
name|isFormatted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|JournalNotFormattedException
argument_list|(
literal|"Journal "
operator|+
name|storage
operator|+
literal|" not formatted"
argument_list|)
throw|;
block|}
block|}
comment|/**    * @throws JournalOutOfSyncException if the given expression is not true.    * The message of the exception is formatted using the 'msg' and    * 'formatArgs' parameters.    */
DECL|method|checkSync (boolean expression, String msg, Object... formatArgs)
specifier|private
name|void
name|checkSync
parameter_list|(
name|boolean
name|expression
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
modifier|...
name|formatArgs
parameter_list|)
throws|throws
name|JournalOutOfSyncException
block|{
if|if
condition|(
operator|!
name|expression
condition|)
block|{
throw|throw
operator|new
name|JournalOutOfSyncException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|msg
argument_list|,
name|formatArgs
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Start a new segment at the given txid. The previous segment    * must have already been finalized.    */
DECL|method|startLogSegment (RequestInfo reqInfo, long txid)
specifier|public
specifier|synchronized
name|void
name|startLogSegment
parameter_list|(
name|RequestInfo
name|reqInfo
parameter_list|,
name|long
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fjm
operator|!=
literal|null
assert|;
name|checkFormatted
argument_list|()
expr_stmt|;
name|checkRequest
argument_list|(
name|reqInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|curSegment
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Client is requesting a new log segment "
operator|+
name|txid
operator|+
literal|" though we are already writing "
operator|+
name|curSegment
operator|+
literal|". "
operator|+
literal|"Aborting the current segment in order to begin the new one."
argument_list|)
expr_stmt|;
comment|// The writer may have lost a connection to us and is now
comment|// re-connecting after the connection came back.
comment|// We should abort our own old segment.
name|curSegment
operator|.
name|abort
argument_list|()
expr_stmt|;
name|curSegment
operator|=
literal|null
expr_stmt|;
block|}
comment|// Paranoid sanity check: we should never overwrite a finalized log file.
comment|// Additionally, if it's in-progress, it should have at most 1 transaction.
comment|// This can happen if the writer crashes exactly at the start of a segment.
name|EditLogFile
name|existing
init|=
name|fjm
operator|.
name|getLogFile
argument_list|(
name|txid
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|existing
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already have a finalized segment "
operator|+
name|existing
operator|+
literal|" beginning at "
operator|+
name|txid
argument_list|)
throw|;
block|}
comment|// If it's in-progress, it should only contain one transaction,
comment|// because the "startLogSegment" transaction is written alone at the
comment|// start of each segment.
name|existing
operator|.
name|validateLog
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|.
name|getLastTxId
argument_list|()
operator|!=
name|existing
operator|.
name|getFirstTxId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The log file "
operator|+
name|existing
operator|+
literal|" seems to contain valid transactions"
argument_list|)
throw|;
block|}
block|}
name|long
name|curLastWriterEpoch
init|=
name|lastWriterEpoch
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|curLastWriterEpoch
operator|!=
name|reqInfo
operator|.
name|getEpoch
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recording lastWriterEpoch = "
operator|+
name|reqInfo
operator|.
name|getEpoch
argument_list|()
argument_list|)
expr_stmt|;
name|lastWriterEpoch
operator|.
name|set
argument_list|(
name|reqInfo
operator|.
name|getEpoch
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The fact that we are starting a segment at this txid indicates
comment|// that any previous recovery for this same segment was aborted.
comment|// Otherwise, no writer would have started writing. So, we can
comment|// remove the record of the older segment here.
name|purgePaxosDecision
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|curSegment
operator|=
name|fjm
operator|.
name|startLogSegment
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|curSegmentTxId
operator|=
name|txid
expr_stmt|;
name|nextTxId
operator|=
name|txid
expr_stmt|;
block|}
comment|/**    * Finalize the log segment at the given transaction ID.    */
DECL|method|finalizeLogSegment (RequestInfo reqInfo, long startTxId, long endTxId)
specifier|public
specifier|synchronized
name|void
name|finalizeLogSegment
parameter_list|(
name|RequestInfo
name|reqInfo
parameter_list|,
name|long
name|startTxId
parameter_list|,
name|long
name|endTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkFormatted
argument_list|()
expr_stmt|;
name|checkRequest
argument_list|(
name|reqInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|startTxId
operator|==
name|curSegmentTxId
condition|)
block|{
if|if
condition|(
name|curSegment
operator|!=
literal|null
condition|)
block|{
name|curSegment
operator|.
name|close
argument_list|()
expr_stmt|;
name|curSegment
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|FileJournalManager
operator|.
name|EditLogFile
name|elf
init|=
name|fjm
operator|.
name|getLogFile
argument_list|(
name|startTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|elf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JournalOutOfSyncException
argument_list|(
literal|"No log file to finalize at "
operator|+
literal|"transaction ID "
operator|+
name|startTxId
argument_list|)
throw|;
block|}
if|if
condition|(
name|elf
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
comment|// TODO: this is slow to validate when in non-recovery cases
comment|// we already know the length here!
name|LOG
operator|.
name|info
argument_list|(
literal|"Validating log about to be finalized: "
operator|+
name|elf
argument_list|)
expr_stmt|;
name|elf
operator|.
name|validateLog
argument_list|()
expr_stmt|;
name|checkSync
argument_list|(
name|elf
operator|.
name|getLastTxId
argument_list|()
operator|==
name|endTxId
argument_list|,
literal|"Trying to finalize log %s-%s, but current state of log "
operator|+
literal|"is %s"
argument_list|,
name|startTxId
argument_list|,
name|endTxId
argument_list|,
name|elf
argument_list|)
expr_stmt|;
name|fjm
operator|.
name|finalizeLogSegment
argument_list|(
name|startTxId
argument_list|,
name|endTxId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|endTxId
operator|==
name|elf
operator|.
name|getLastTxId
argument_list|()
argument_list|,
literal|"Trying to re-finalize already finalized log "
operator|+
name|elf
operator|+
literal|" with different endTxId "
operator|+
name|endTxId
argument_list|)
expr_stmt|;
block|}
comment|// Once logs are finalized, a different length will never be decided.
comment|// During recovery, we treat a finalized segment the same as an accepted
comment|// recovery. Thus, we no longer need to keep track of the previously-
comment|// accepted decision. The existence of the finalized log segment is enough.
name|purgePaxosDecision
argument_list|(
name|elf
operator|.
name|getFirstTxId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see JournalManager#purgeLogsOlderThan(long)    */
DECL|method|purgeLogsOlderThan (RequestInfo reqInfo, long minTxIdToKeep)
specifier|public
specifier|synchronized
name|void
name|purgeLogsOlderThan
parameter_list|(
name|RequestInfo
name|reqInfo
parameter_list|,
name|long
name|minTxIdToKeep
parameter_list|)
throws|throws
name|IOException
block|{
name|checkFormatted
argument_list|()
expr_stmt|;
name|checkRequest
argument_list|(
name|reqInfo
argument_list|)
expr_stmt|;
name|fjm
operator|.
name|purgeLogsOlderThan
argument_list|(
name|minTxIdToKeep
argument_list|)
expr_stmt|;
name|purgePaxosDecisionsOlderThan
argument_list|(
name|minTxIdToKeep
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove the previously-recorded 'accepted recovery' information    * for a given log segment, once it is no longer necessary.     * @param segmentTxId the transaction ID to purge    * @throws IOException if the file could not be deleted    */
DECL|method|purgePaxosDecision (long segmentTxId)
specifier|private
name|void
name|purgePaxosDecision
parameter_list|(
name|long
name|segmentTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|paxosFile
init|=
name|storage
operator|.
name|getPaxosFile
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|paxosFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|paxosFile
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete paxos file "
operator|+
name|paxosFile
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|purgePaxosDecisionsOlderThan (long minTxIdToKeep)
specifier|private
name|void
name|purgePaxosDecisionsOlderThan
parameter_list|(
name|long
name|minTxIdToKeep
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
name|storage
operator|.
name|getPaxosDir
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|isFile
argument_list|()
condition|)
continue|continue;
name|long
name|txid
decl_stmt|;
try|try
block|{
name|txid
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected non-numeric file name for "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|txid
operator|<
name|minTxIdToKeep
condition|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete no-longer-needed paxos decision record "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * @see QJournalProtocol#getEditLogManifest(String, long)    */
DECL|method|getEditLogManifest (long sinceTxId)
specifier|public
name|RemoteEditLogManifest
name|getEditLogManifest
parameter_list|(
name|long
name|sinceTxId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// No need to checkRequest() here - anyone may ask for the list
comment|// of segments.
name|checkFormatted
argument_list|()
expr_stmt|;
name|RemoteEditLogManifest
name|manifest
init|=
operator|new
name|RemoteEditLogManifest
argument_list|(
name|fjm
operator|.
name|getRemoteEditLogs
argument_list|(
name|sinceTxId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|manifest
return|;
block|}
comment|/**    * @return the current state of the given segment, or null if the    * segment does not exist.    */
DECL|method|getSegmentInfo (long segmentTxId)
specifier|private
name|SegmentStateProto
name|getSegmentInfo
parameter_list|(
name|long
name|segmentTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|EditLogFile
name|elf
init|=
name|fjm
operator|.
name|getLogFile
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|elf
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|elf
operator|.
name|isInProgress
argument_list|()
condition|)
block|{
name|elf
operator|.
name|validateLog
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|elf
operator|.
name|getLastTxId
argument_list|()
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Edit log file "
operator|+
name|elf
operator|+
literal|" appears to be empty. "
operator|+
literal|"Moving it aside..."
argument_list|)
expr_stmt|;
name|elf
operator|.
name|moveAsideEmptyFile
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|SegmentStateProto
name|ret
init|=
name|SegmentStateProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStartTxId
argument_list|(
name|segmentTxId
argument_list|)
operator|.
name|setEndTxId
argument_list|(
name|elf
operator|.
name|getLastTxId
argument_list|()
argument_list|)
operator|.
name|setIsInProgress
argument_list|(
name|elf
operator|.
name|isInProgress
argument_list|()
argument_list|)
operator|.
name|setMd5Sum
argument_list|(
name|ByteString
operator|.
name|EMPTY
argument_list|)
comment|// TODO
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"getSegmentInfo("
operator|+
name|segmentTxId
operator|+
literal|"): "
operator|+
name|elf
operator|+
literal|" -> "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * @see QJournalProtocol#prepareRecovery(RequestInfo, long)    */
DECL|method|prepareRecovery ( RequestInfo reqInfo, long segmentTxId)
specifier|public
specifier|synchronized
name|PrepareRecoveryResponseProto
name|prepareRecovery
parameter_list|(
name|RequestInfo
name|reqInfo
parameter_list|,
name|long
name|segmentTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkFormatted
argument_list|()
expr_stmt|;
name|checkRequest
argument_list|(
name|reqInfo
argument_list|)
expr_stmt|;
name|PrepareRecoveryResponseProto
operator|.
name|Builder
name|builder
init|=
name|PrepareRecoveryResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|SegmentStateProto
name|segInfo
init|=
name|getSegmentInfo
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
name|boolean
name|hasFinalizedSegment
init|=
name|segInfo
operator|!=
literal|null
operator|&&
operator|!
name|segInfo
operator|.
name|getIsInProgress
argument_list|()
decl_stmt|;
name|PersistedRecoveryPaxosData
name|previouslyAccepted
init|=
name|getPersistedPaxosData
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|previouslyAccepted
operator|!=
literal|null
operator|&&
operator|!
name|hasFinalizedSegment
condition|)
block|{
name|SegmentStateProto
name|acceptedState
init|=
name|previouslyAccepted
operator|.
name|getSegmentState
argument_list|()
decl_stmt|;
assert|assert
name|acceptedState
operator|.
name|getEndTxId
argument_list|()
operator|==
name|segInfo
operator|.
name|getEndTxId
argument_list|()
operator|&&
name|acceptedState
operator|.
name|getMd5Sum
argument_list|()
operator|.
name|equals
argument_list|(
name|segInfo
operator|.
name|getMd5Sum
argument_list|()
argument_list|)
operator|:
literal|"prev accepted: "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|previouslyAccepted
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"on disk:       "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|segInfo
argument_list|)
assert|;
name|builder
operator|.
name|setAcceptedInEpoch
argument_list|(
name|previouslyAccepted
operator|.
name|getAcceptedInEpoch
argument_list|()
argument_list|)
operator|.
name|setSegmentState
argument_list|(
name|previouslyAccepted
operator|.
name|getSegmentState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|segInfo
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setSegmentState
argument_list|(
name|segInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|setLastWriterEpoch
argument_list|(
name|lastWriterEpoch
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|committedTxnId
operator|.
name|get
argument_list|()
operator|!=
name|HdfsConstants
operator|.
name|INVALID_TXID
condition|)
block|{
name|builder
operator|.
name|setLastCommittedTxId
argument_list|(
name|committedTxnId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PrepareRecoveryResponseProto
name|resp
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Prepared recovery for segment "
operator|+
name|segmentTxId
operator|+
literal|": "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resp
return|;
block|}
comment|/**    * @see QJournalProtocol#acceptRecovery(RequestInfo, SegmentStateProto, URL)    */
DECL|method|acceptRecovery (RequestInfo reqInfo, SegmentStateProto segment, URL fromUrl)
specifier|public
specifier|synchronized
name|void
name|acceptRecovery
parameter_list|(
name|RequestInfo
name|reqInfo
parameter_list|,
name|SegmentStateProto
name|segment
parameter_list|,
name|URL
name|fromUrl
parameter_list|)
throws|throws
name|IOException
block|{
name|checkFormatted
argument_list|()
expr_stmt|;
name|checkRequest
argument_list|(
name|reqInfo
argument_list|)
expr_stmt|;
name|long
name|segmentTxId
init|=
name|segment
operator|.
name|getStartTxId
argument_list|()
decl_stmt|;
comment|// TODO: right now, a recovery of a segment when the log is
comment|// completely emtpy (ie startLogSegment() but no txns)
comment|// will fail this assertion here, since endTxId< startTxId
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|segment
operator|.
name|getEndTxId
argument_list|()
operator|>
literal|0
operator|&&
name|segment
operator|.
name|getEndTxId
argument_list|()
operator|>=
name|segmentTxId
argument_list|,
literal|"bad recovery state for segment %s: %s"
argument_list|,
name|segmentTxId
argument_list|,
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|segment
argument_list|)
argument_list|)
expr_stmt|;
name|PersistedRecoveryPaxosData
name|oldData
init|=
name|getPersistedPaxosData
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
name|PersistedRecoveryPaxosData
name|newData
init|=
name|PersistedRecoveryPaxosData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAcceptedInEpoch
argument_list|(
name|reqInfo
operator|.
name|getEpoch
argument_list|()
argument_list|)
operator|.
name|setSegmentState
argument_list|(
name|segment
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldData
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|oldData
operator|.
name|getAcceptedInEpoch
argument_list|()
operator|<=
name|reqInfo
operator|.
name|getEpoch
argument_list|()
argument_list|,
literal|"Bad paxos transition, out-of-order epochs.\nOld: %s\nNew: %s\n"
argument_list|,
name|oldData
argument_list|,
name|newData
argument_list|)
expr_stmt|;
block|}
name|SegmentStateProto
name|currentSegment
init|=
name|getSegmentInfo
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSegment
operator|==
literal|null
operator|||
name|currentSegment
operator|.
name|getEndTxId
argument_list|()
operator|!=
name|segment
operator|.
name|getEndTxId
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentSegment
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Synchronizing log "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|segment
argument_list|)
operator|+
literal|": no current segment in place"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Synchronizing log "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|segment
argument_list|)
operator|+
literal|": old segment "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|currentSegment
argument_list|)
operator|+
literal|" is not the right length"
argument_list|)
expr_stmt|;
comment|// Paranoid sanity check: if the new log is shorter than the log we
comment|// currently have, we should not end up discarding any transactions
comment|// which are already Committed.
if|if
condition|(
name|txnRange
argument_list|(
name|currentSegment
argument_list|)
operator|.
name|contains
argument_list|(
name|committedTxnId
operator|.
name|get
argument_list|()
argument_list|)
operator|&&
operator|!
name|txnRange
argument_list|(
name|segment
argument_list|)
operator|.
name|contains
argument_list|(
name|committedTxnId
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cannot replace segment "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|currentSegment
argument_list|)
operator|+
literal|" with new segment "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|segment
argument_list|)
operator|+
literal|": would discard already-committed txn "
operator|+
name|committedTxnId
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|syncLog
argument_list|(
name|reqInfo
argument_list|,
name|segment
argument_list|,
name|fromUrl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping download of log "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|segment
argument_list|)
operator|+
literal|": already have up-to-date logs"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: is it OK that this is non-atomic?
comment|// we might be left with an older epoch recorded, but a newer log
name|persistPaxosData
argument_list|(
name|segmentTxId
argument_list|,
name|newData
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Accepted recovery for segment "
operator|+
name|segmentTxId
operator|+
literal|": "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|newData
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|txnRange (SegmentStateProto seg)
specifier|private
name|Range
argument_list|<
name|Long
argument_list|>
name|txnRange
parameter_list|(
name|SegmentStateProto
name|seg
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|seg
operator|.
name|hasEndTxId
argument_list|()
argument_list|,
literal|"invalid segment: %s"
argument_list|,
name|seg
argument_list|)
expr_stmt|;
return|return
name|Ranges
operator|.
name|closed
argument_list|(
name|seg
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|seg
operator|.
name|getEndTxId
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Synchronize a log segment from another JournalNode.    * @param reqInfo the request info for the recovery IPC    * @param segment     * @param url    * @throws IOException    */
DECL|method|syncLog (RequestInfo reqInfo, final SegmentStateProto segment, final URL url)
specifier|private
name|void
name|syncLog
parameter_list|(
name|RequestInfo
name|reqInfo
parameter_list|,
specifier|final
name|SegmentStateProto
name|segment
parameter_list|,
specifier|final
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tmpFileName
init|=
literal|"synclog_"
operator|+
name|segment
operator|.
name|getStartTxId
argument_list|()
operator|+
literal|"_"
operator|+
name|reqInfo
operator|.
name|getEpoch
argument_list|()
operator|+
literal|"."
operator|+
name|reqInfo
operator|.
name|getIpcSerialNumber
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|localPaths
init|=
name|storage
operator|.
name|getFiles
argument_list|(
literal|null
argument_list|,
name|tmpFileName
argument_list|)
decl_stmt|;
assert|assert
name|localPaths
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
specifier|final
name|File
name|tmpFile
init|=
name|localPaths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Synchronizing log "
operator|+
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|segment
argument_list|)
operator|+
literal|" from "
operator|+
name|url
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|doAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|TransferFsImage
operator|.
name|doGetUrl
argument_list|(
name|url
argument_list|,
name|localPaths
argument_list|,
name|storage
argument_list|,
literal|true
argument_list|)
expr_stmt|;
assert|assert
name|tmpFile
operator|.
name|exists
argument_list|()
assert|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|success
operator|=
name|tmpFile
operator|.
name|renameTo
argument_list|(
name|storage
operator|.
name|getInProgressEditLog
argument_list|(
name|segment
operator|.
name|getStartTxId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
operator|!
name|tmpFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete temporary file "
operator|+
name|tmpFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Retrieve the persisted data for recovering the given segment from disk.    */
DECL|method|getPersistedPaxosData (long segmentTxId)
specifier|private
name|PersistedRecoveryPaxosData
name|getPersistedPaxosData
parameter_list|(
name|long
name|segmentTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|storage
operator|.
name|getPaxosFile
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Default instance has no fields filled in (they're optional)
return|return
literal|null
return|;
block|}
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|PersistedRecoveryPaxosData
name|ret
init|=
name|PersistedRecoveryPaxosData
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|ret
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|getSegmentState
argument_list|()
operator|.
name|getStartTxId
argument_list|()
operator|==
name|segmentTxId
argument_list|,
literal|"Bad persisted data for segment %s: %s"
argument_list|,
name|segmentTxId
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Persist data for recovering the given segment from disk.    */
DECL|method|persistPaxosData (long segmentTxId, PersistedRecoveryPaxosData newData)
specifier|private
name|void
name|persistPaxosData
parameter_list|(
name|long
name|segmentTxId
parameter_list|,
name|PersistedRecoveryPaxosData
name|newData
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|storage
operator|.
name|getPaxosFile
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|AtomicFileOutputStream
name|fos
init|=
operator|new
name|AtomicFileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|newData
operator|.
name|writeDelimitedTo
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
comment|// Write human-readable data after the protobuf. This is only
comment|// to assist in debugging -- it's not parsed at all.
name|OutputStreamWriter
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|fos
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|newData
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fos
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

