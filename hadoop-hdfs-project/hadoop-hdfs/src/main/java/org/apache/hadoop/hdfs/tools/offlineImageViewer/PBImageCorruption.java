begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_comment
comment|/**  * Class representing a corruption in the PBImageCorruptionDetector processor.  */
end_comment

begin_class
DECL|class|PBImageCorruption
specifier|public
class|class
name|PBImageCorruption
block|{
DECL|field|WITH
specifier|private
specifier|static
specifier|final
name|String
name|WITH
init|=
literal|"With"
decl_stmt|;
comment|/**    * PBImageCorruptionType is a wrapper for getting a string output for    * different types of corruption. Could be added more cases if    * other types are revealed. Currently hasMissingChild and    * isCorruptNode are the relevant cases.    */
DECL|enum|PBImageCorruptionType
specifier|private
enum|enum
name|PBImageCorruptionType
block|{
DECL|enumConstant|CORRUPT_NODE
name|CORRUPT_NODE
argument_list|(
literal|"CorruptNode"
argument_list|)
block|,
DECL|enumConstant|MISSING_CHILD
name|MISSING_CHILD
argument_list|(
literal|"MissingChild"
argument_list|)
block|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|PBImageCorruptionType (String s)
name|PBImageCorruptionType
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|name
operator|=
name|s
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
block|}
DECL|field|id
specifier|private
name|long
name|id
decl_stmt|;
DECL|field|type
specifier|private
name|EnumSet
argument_list|<
name|PBImageCorruptionType
argument_list|>
name|type
decl_stmt|;
DECL|field|numOfCorruptChildren
specifier|private
name|int
name|numOfCorruptChildren
decl_stmt|;
DECL|method|PBImageCorruption (long id, boolean missingChild, boolean corruptNode, int numOfCorruptChildren)
name|PBImageCorruption
parameter_list|(
name|long
name|id
parameter_list|,
name|boolean
name|missingChild
parameter_list|,
name|boolean
name|corruptNode
parameter_list|,
name|int
name|numOfCorruptChildren
parameter_list|)
block|{
if|if
condition|(
operator|!
name|missingChild
operator|&&
operator|!
name|corruptNode
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Corruption must have at least one aspect!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|PBImageCorruptionType
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|missingChild
condition|)
block|{
name|type
operator|.
name|add
argument_list|(
name|PBImageCorruptionType
operator|.
name|MISSING_CHILD
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|corruptNode
condition|)
block|{
name|type
operator|.
name|add
argument_list|(
name|PBImageCorruptionType
operator|.
name|CORRUPT_NODE
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|numOfCorruptChildren
operator|=
name|numOfCorruptChildren
expr_stmt|;
block|}
DECL|method|addMissingChildCorruption ()
name|void
name|addMissingChildCorruption
parameter_list|()
block|{
name|type
operator|.
name|add
argument_list|(
name|PBImageCorruptionType
operator|.
name|MISSING_CHILD
argument_list|)
expr_stmt|;
block|}
DECL|method|addCorruptNodeCorruption ()
name|void
name|addCorruptNodeCorruption
parameter_list|()
block|{
name|type
operator|.
name|add
argument_list|(
name|PBImageCorruptionType
operator|.
name|CORRUPT_NODE
argument_list|)
expr_stmt|;
block|}
DECL|method|setNumberOfCorruption (int numOfCorruption)
name|void
name|setNumberOfCorruption
parameter_list|(
name|int
name|numOfCorruption
parameter_list|)
block|{
name|this
operator|.
name|numOfCorruptChildren
operator|=
name|numOfCorruption
expr_stmt|;
block|}
DECL|method|getId ()
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getType ()
name|String
name|getType
parameter_list|()
block|{
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|contains
argument_list|(
name|PBImageCorruptionType
operator|.
name|CORRUPT_NODE
argument_list|)
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|PBImageCorruptionType
operator|.
name|CORRUPT_NODE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|contains
argument_list|(
name|PBImageCorruptionType
operator|.
name|CORRUPT_NODE
argument_list|)
operator|&&
name|type
operator|.
name|contains
argument_list|(
name|PBImageCorruptionType
operator|.
name|MISSING_CHILD
argument_list|)
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|WITH
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|contains
argument_list|(
name|PBImageCorruptionType
operator|.
name|MISSING_CHILD
argument_list|)
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|PBImageCorruptionType
operator|.
name|MISSING_CHILD
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getNumOfCorruptChildren ()
name|int
name|getNumOfCorruptChildren
parameter_list|()
block|{
return|return
name|numOfCorruptChildren
return|;
block|}
block|}
end_class

end_unit

