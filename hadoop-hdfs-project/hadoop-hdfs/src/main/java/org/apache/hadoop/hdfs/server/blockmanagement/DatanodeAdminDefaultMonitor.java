begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|CyclicIteration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|LightWeightHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|LightWeightLinkedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ChunkedArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Checks to see if datanodes have finished DECOMMISSION_INPROGRESS or  * ENTERING_MAINTENANCE state.  *<p/>  * Since this is done while holding the namesystem lock,  * the amount of work per monitor tick is limited.  */
end_comment

begin_class
DECL|class|DatanodeAdminDefaultMonitor
specifier|public
class|class
name|DatanodeAdminDefaultMonitor
extends|extends
name|DatanodeAdminMonitorBase
implements|implements
name|DatanodeAdminMonitorInterface
block|{
comment|/**    * Map containing the DECOMMISSION_INPROGRESS or ENTERING_MAINTENANCE    * datanodes that are being tracked so they can be be marked as    * DECOMMISSIONED or IN_MAINTENANCE. Even after the node is marked as    * IN_MAINTENANCE, the node remains in the map until    * maintenance expires checked during a monitor tick.    *<p/>    * This holds a set of references to the under-replicated blocks on the DN    * at the time the DN is added to the map, i.e. the blocks that are    * preventing the node from being marked as decommissioned. During a monitor    * tick, this list is pruned as blocks becomes replicated.    *<p/>    * Note also that the reference to the list of under-replicated blocks    * will be null on initial add    *<p/>    * However, this map can become out-of-date since it is not updated by block    * reports or other events. Before being finally marking as decommissioned,    * another check is done with the actual block map.    */
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
argument_list|>
DECL|field|outOfServiceNodeBlocks
name|outOfServiceNodeBlocks
decl_stmt|;
comment|/**    * The maximum number of blocks to check per tick.    */
DECL|field|numBlocksPerCheck
specifier|private
name|int
name|numBlocksPerCheck
decl_stmt|;
comment|/**    * The number of blocks that have been checked on this tick.    */
DECL|field|numBlocksChecked
specifier|private
name|int
name|numBlocksChecked
init|=
literal|0
decl_stmt|;
comment|/**    * The number of blocks checked after (re)holding lock.    */
DECL|field|numBlocksCheckedPerLock
specifier|private
name|int
name|numBlocksCheckedPerLock
init|=
literal|0
decl_stmt|;
comment|/**    * The number of nodes that have been checked on this tick. Used for    * statistics.    */
DECL|field|numNodesChecked
specifier|private
name|int
name|numNodesChecked
init|=
literal|0
decl_stmt|;
comment|/**    * The last datanode in outOfServiceNodeBlocks that we've processed.    */
DECL|field|iterkey
specifier|private
name|DatanodeDescriptor
name|iterkey
init|=
operator|new
name|DatanodeDescriptor
argument_list|(
operator|new
name|DatanodeID
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DatanodeAdminDefaultMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DatanodeAdminDefaultMonitor ()
name|DatanodeAdminDefaultMonitor
parameter_list|()
block|{
name|this
operator|.
name|outOfServiceNodeBlocks
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processConf ()
specifier|protected
name|void
name|processConf
parameter_list|()
block|{
name|numBlocksPerCheck
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|numBlocksPerCheck
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} must be greater than zero. Defaulting to {}"
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT
argument_list|)
expr_stmt|;
name|numBlocksPerCheck
operator|=
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized the Default Decommission and Maintenance monitor"
argument_list|)
expr_stmt|;
block|}
DECL|method|exceededNumBlocksPerCheck ()
specifier|private
name|boolean
name|exceededNumBlocksPerCheck
parameter_list|()
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processed {} blocks so far this tick"
argument_list|,
name|numBlocksChecked
argument_list|)
expr_stmt|;
return|return
name|numBlocksChecked
operator|>=
name|numBlocksPerCheck
return|;
block|}
annotation|@
name|Override
DECL|method|stopTrackingNode (DatanodeDescriptor dn)
specifier|public
name|void
name|stopTrackingNode
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|pendingNodes
operator|.
name|remove
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|outOfServiceNodeBlocks
operator|.
name|remove
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTrackedNodeCount ()
specifier|public
name|int
name|getTrackedNodeCount
parameter_list|()
block|{
return|return
name|outOfServiceNodeBlocks
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNumNodesChecked ()
specifier|public
name|int
name|getNumNodesChecked
parameter_list|()
block|{
return|return
name|numNodesChecked
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DatanodeAdminMonitor is running."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|namesystem
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Namesystem is not running, skipping "
operator|+
literal|"decommissioning/maintenance checks."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Reset the checked count at beginning of each iteration
name|numBlocksChecked
operator|=
literal|0
expr_stmt|;
name|numBlocksCheckedPerLock
operator|=
literal|0
expr_stmt|;
name|numNodesChecked
operator|=
literal|0
expr_stmt|;
comment|// Check decommission or maintenance progress.
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|processPendingNodes
argument_list|()
expr_stmt|;
name|check
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DatanodeAdminMonitor caught exception when processing node."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numBlocksChecked
operator|+
name|numNodesChecked
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checked {} blocks and {} nodes this tick. {} nodes are now "
operator|+
literal|"in maintenance or transitioning state. {} nodes pending."
argument_list|,
name|numBlocksChecked
argument_list|,
name|numNodesChecked
argument_list|,
name|outOfServiceNodeBlocks
operator|.
name|size
argument_list|()
argument_list|,
name|pendingNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Pop datanodes off the pending list and into decomNodeBlocks,    * subject to the maxConcurrentTrackedNodes limit.    */
DECL|method|processPendingNodes ()
specifier|private
name|void
name|processPendingNodes
parameter_list|()
block|{
while|while
condition|(
operator|!
name|pendingNodes
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|maxConcurrentTrackedNodes
operator|==
literal|0
operator|||
name|outOfServiceNodeBlocks
operator|.
name|size
argument_list|()
operator|<
name|maxConcurrentTrackedNodes
operator|)
condition|)
block|{
name|outOfServiceNodeBlocks
operator|.
name|put
argument_list|(
name|pendingNodes
operator|.
name|poll
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|check ()
specifier|private
name|void
name|check
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
argument_list|>
argument_list|>
name|it
init|=
operator|new
name|CyclicIteration
argument_list|<>
argument_list|(
name|outOfServiceNodeBlocks
argument_list|,
name|iterkey
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|exceededNumBlocksPerCheck
argument_list|()
operator|&&
name|namesystem
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|numNodesChecked
operator|++
expr_stmt|;
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDescriptor
name|dn
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
block|{
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
name|blocks
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|fullScan
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dn
operator|.
name|isMaintenance
argument_list|()
operator|&&
name|dn
operator|.
name|maintenanceExpired
argument_list|()
condition|)
block|{
comment|// If maintenance expires, stop tracking it.
name|dnAdmin
operator|.
name|stopMaintenance
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|dn
operator|.
name|isInMaintenance
argument_list|()
condition|)
block|{
comment|// The dn is IN_MAINTENANCE and the maintenance hasn't expired yet.
continue|continue;
block|}
if|if
condition|(
name|blocks
operator|==
literal|null
condition|)
block|{
comment|// This is a newly added datanode, run through its list to schedule
comment|// under-replicated blocks for replication and collect the blocks
comment|// that are insufficiently replicated for further tracking
name|LOG
operator|.
name|debug
argument_list|(
literal|"Newly-added node {}, doing full scan to find "
operator|+
literal|"insufficiently-replicated blocks."
argument_list|,
name|dn
argument_list|)
expr_stmt|;
name|blocks
operator|=
name|handleInsufficientlyStored
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|outOfServiceNodeBlocks
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
name|fullScan
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// This is a known datanode, check if its # of insufficiently
comment|// replicated blocks has dropped to zero and if it can move
comment|// to the next state.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing {} node {}"
argument_list|,
name|dn
operator|.
name|getAdminState
argument_list|()
argument_list|,
name|dn
argument_list|)
expr_stmt|;
name|pruneReliableBlocks
argument_list|(
name|dn
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blocks
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|fullScan
condition|)
block|{
comment|// If we didn't just do a full scan, need to re-check with the
comment|// full block map.
comment|//
comment|// We've replicated all the known insufficiently replicated
comment|// blocks. Re-check with the full block map before finally
comment|// marking the datanode as DECOMMISSIONED or IN_MAINTENANCE.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node {} has finished replicating current set of "
operator|+
literal|"blocks, checking with the full block map."
argument_list|,
name|dn
argument_list|)
expr_stmt|;
name|blocks
operator|=
name|handleInsufficientlyStored
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|outOfServiceNodeBlocks
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
block|}
comment|// If the full scan is clean AND the node liveness is okay,
comment|// we can finally mark as DECOMMISSIONED or IN_MAINTENANCE.
specifier|final
name|boolean
name|isHealthy
init|=
name|blockManager
operator|.
name|isNodeHealthyForDecommissionOrMaintenance
argument_list|(
name|dn
argument_list|)
decl_stmt|;
if|if
condition|(
name|blocks
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|isHealthy
condition|)
block|{
if|if
condition|(
name|dn
operator|.
name|isDecommissionInProgress
argument_list|()
condition|)
block|{
name|dnAdmin
operator|.
name|setDecommissioned
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dn
operator|.
name|isEnteringMaintenance
argument_list|()
condition|)
block|{
comment|// IN_MAINTENANCE node remains in the outOfServiceNodeBlocks to
comment|// to track maintenance expiration.
name|dnAdmin
operator|.
name|setInMaintenance
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|false
argument_list|,
literal|"Node %s is in an invalid state! "
operator|+
literal|"Invalid state: %s %s blocks are on this dn."
argument_list|,
name|dn
argument_list|,
name|dn
operator|.
name|getAdminState
argument_list|()
argument_list|,
name|blocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node {} is sufficiently replicated and healthy, "
operator|+
literal|"marked as {}."
argument_list|,
name|dn
argument_list|,
name|dn
operator|.
name|getAdminState
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Node {} {} healthy."
operator|+
literal|" It needs to replicate {} more blocks."
operator|+
literal|" {} is still in progress."
argument_list|,
name|dn
argument_list|,
name|isHealthy
condition|?
literal|"is"
else|:
literal|"isn't"
argument_list|,
name|blocks
operator|.
name|size
argument_list|()
argument_list|,
name|dn
operator|.
name|getAdminState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Node {} still has {} blocks to replicate "
operator|+
literal|"before it is a candidate to finish {}."
argument_list|,
name|dn
argument_list|,
name|blocks
operator|.
name|size
argument_list|()
argument_list|,
name|dn
operator|.
name|getAdminState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Log and postpone to process node when meet exception since it is in
comment|// an invalid state.
name|LOG
operator|.
name|warn
argument_list|(
literal|"DatanodeAdminMonitor caught exception when processing node "
operator|+
literal|"{}."
argument_list|,
name|dn
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|pendingNodes
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iterkey
operator|=
name|dn
expr_stmt|;
block|}
block|}
comment|// Remove the datanodes that are DECOMMISSIONED or in service after
comment|// maintenance expiration.
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|toRemove
control|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|dn
operator|.
name|isDecommissioned
argument_list|()
operator|||
name|dn
operator|.
name|isInService
argument_list|()
argument_list|,
literal|"Removing node %s that is not yet decommissioned or in service!"
argument_list|,
name|dn
argument_list|)
expr_stmt|;
name|outOfServiceNodeBlocks
operator|.
name|remove
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Removes reliable blocks from the block list of a datanode.    */
DECL|method|pruneReliableBlocks (final DatanodeDescriptor datanode, AbstractList<BlockInfo> blocks)
specifier|private
name|void
name|pruneReliableBlocks
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|datanode
parameter_list|,
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
name|blocks
parameter_list|)
block|{
name|processBlocksInternal
argument_list|(
name|datanode
argument_list|,
name|blocks
operator|.
name|iterator
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a list of blocks on a datanode that are insufficiently    * replicated or require recovery, i.e. requiring recovery and    * should prevent decommission or maintenance.    *<p/>    * As part of this, it also schedules replication/recovery work.    *    * @return List of blocks requiring recovery    */
DECL|method|handleInsufficientlyStored ( final DatanodeDescriptor datanode)
specifier|private
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
name|handleInsufficientlyStored
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|datanode
parameter_list|)
block|{
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
name|insufficient
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|processBlocksInternal
argument_list|(
name|datanode
argument_list|,
name|datanode
operator|.
name|getBlockIterator
argument_list|()
argument_list|,
name|insufficient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|insufficient
return|;
block|}
comment|/**    * Used while checking if DECOMMISSION_INPROGRESS datanodes can be    * marked as DECOMMISSIONED or ENTERING_MAINTENANCE datanodes can be    * marked as IN_MAINTENANCE. Combines shared logic of pruneReliableBlocks    * and handleInsufficientlyStored.    *    * @param datanode                    Datanode    * @param it                          Iterator over the blocks on the    *                                    datanode    * @param insufficientList            Return parameter. If it's not null,    *                                    will contain the insufficiently    *                                    replicated-blocks from the list.    * @param pruneReliableBlocks         whether to remove blocks reliable    *                                    enough from the iterator    */
DECL|method|processBlocksInternal ( final DatanodeDescriptor datanode, final Iterator<BlockInfo> it, final List<BlockInfo> insufficientList, boolean pruneReliableBlocks)
specifier|private
name|void
name|processBlocksInternal
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|datanode
parameter_list|,
specifier|final
name|Iterator
argument_list|<
name|BlockInfo
argument_list|>
name|it
parameter_list|,
specifier|final
name|List
argument_list|<
name|BlockInfo
argument_list|>
name|insufficientList
parameter_list|,
name|boolean
name|pruneReliableBlocks
parameter_list|)
block|{
name|boolean
name|firstReplicationLog
init|=
literal|true
decl_stmt|;
comment|// Low redundancy in UC Blocks only
name|int
name|lowRedundancyBlocksInOpenFiles
init|=
literal|0
decl_stmt|;
name|LightWeightHashSet
argument_list|<
name|Long
argument_list|>
name|lowRedundancyOpenFiles
init|=
operator|new
name|LightWeightLinkedSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// All low redundancy blocks. Includes lowRedundancyOpenFiles.
name|int
name|lowRedundancyBlocks
init|=
literal|0
decl_stmt|;
comment|// All maintenance and decommission replicas.
name|int
name|outOfServiceOnlyReplicas
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|insufficientList
operator|==
literal|null
operator|&&
name|numBlocksCheckedPerLock
operator|>=
name|numBlocksPerCheck
condition|)
block|{
comment|// During fullscan insufficientlyReplicated will NOT be null, iterator
comment|// will be DN's iterator. So should not yield lock, otherwise
comment|// ConcurrentModificationException could occur.
comment|// Once the fullscan done, iterator will be a copy. So can yield the
comment|// lock.
comment|// Yielding is required in case of block number is greater than the
comment|// configured per-iteration-limit.
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Yielded lock during decommission/maintenance check"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|0
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
return|return;
block|}
comment|// reset
name|numBlocksCheckedPerLock
operator|=
literal|0
expr_stmt|;
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
name|numBlocksChecked
operator|++
expr_stmt|;
name|numBlocksCheckedPerLock
operator|++
expr_stmt|;
specifier|final
name|BlockInfo
name|block
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Remove the block from the list if it's no longer in the block map,
comment|// e.g. the containing file has been deleted
if|if
condition|(
name|blockManager
operator|.
name|blocksMap
operator|.
name|getStoredBlock
argument_list|(
name|block
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing unknown block {}"
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|long
name|bcId
init|=
name|block
operator|.
name|getBlockCollectionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|bcId
operator|==
name|INodeId
operator|.
name|INVALID_INODE_ID
condition|)
block|{
comment|// Orphan block, will be invalidated eventually. Skip.
continue|continue;
block|}
specifier|final
name|BlockCollection
name|bc
init|=
name|blockManager
operator|.
name|getBlockCollection
argument_list|(
name|block
argument_list|)
decl_stmt|;
specifier|final
name|NumberReplicas
name|num
init|=
name|blockManager
operator|.
name|countNodes
argument_list|(
name|block
argument_list|)
decl_stmt|;
specifier|final
name|int
name|liveReplicas
init|=
name|num
operator|.
name|liveReplicas
argument_list|()
decl_stmt|;
comment|// Schedule low redundancy blocks for reconstruction
comment|// if not already pending.
name|boolean
name|isDecommission
init|=
name|datanode
operator|.
name|isDecommissionInProgress
argument_list|()
decl_stmt|;
name|boolean
name|isMaintenance
init|=
name|datanode
operator|.
name|isEnteringMaintenance
argument_list|()
decl_stmt|;
name|boolean
name|neededReconstruction
init|=
name|isDecommission
condition|?
name|blockManager
operator|.
name|isNeededReconstruction
argument_list|(
name|block
argument_list|,
name|num
argument_list|)
else|:
name|blockManager
operator|.
name|isNeededReconstructionForMaintenance
argument_list|(
name|block
argument_list|,
name|num
argument_list|)
decl_stmt|;
if|if
condition|(
name|neededReconstruction
condition|)
block|{
if|if
condition|(
operator|!
name|blockManager
operator|.
name|neededReconstruction
operator|.
name|contains
argument_list|(
name|block
argument_list|)
operator|&&
name|blockManager
operator|.
name|pendingReconstruction
operator|.
name|getNumReplicas
argument_list|(
name|block
argument_list|)
operator|==
literal|0
operator|&&
name|blockManager
operator|.
name|isPopulatingReplQueues
argument_list|()
condition|)
block|{
comment|// Process these blocks only when active NN is out of safe mode.
name|blockManager
operator|.
name|neededReconstruction
operator|.
name|add
argument_list|(
name|block
argument_list|,
name|liveReplicas
argument_list|,
name|num
operator|.
name|readOnlyReplicas
argument_list|()
argument_list|,
name|num
operator|.
name|outOfServiceReplicas
argument_list|()
argument_list|,
name|blockManager
operator|.
name|getExpectedRedundancyNum
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Even if the block is without sufficient redundancy,
comment|// it might not block decommission/maintenance if it
comment|// has sufficient redundancy.
if|if
condition|(
name|dnAdmin
operator|.
name|isSufficient
argument_list|(
name|block
argument_list|,
name|bc
argument_list|,
name|num
argument_list|,
name|isDecommission
argument_list|,
name|isMaintenance
argument_list|)
condition|)
block|{
if|if
condition|(
name|pruneReliableBlocks
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
comment|// We've found a block without sufficient redundancy.
if|if
condition|(
name|insufficientList
operator|!=
literal|null
condition|)
block|{
name|insufficientList
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
comment|// Log if this is our first time through
if|if
condition|(
name|firstReplicationLog
condition|)
block|{
name|dnAdmin
operator|.
name|logBlockReplicationInfo
argument_list|(
name|block
argument_list|,
name|bc
argument_list|,
name|datanode
argument_list|,
name|num
argument_list|,
name|blockManager
operator|.
name|blocksMap
operator|.
name|getStorages
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
name|firstReplicationLog
operator|=
literal|false
expr_stmt|;
block|}
comment|// Update various counts
name|lowRedundancyBlocks
operator|++
expr_stmt|;
if|if
condition|(
name|bc
operator|.
name|isUnderConstruction
argument_list|()
condition|)
block|{
name|INode
name|ucFile
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getInode
argument_list|(
name|bc
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ucFile
operator|instanceof
name|INodeFile
operator|)
operator|||
operator|!
name|ucFile
operator|.
name|asFile
argument_list|()
operator|.
name|isUnderConstruction
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} is not under construction. Skipping add to "
operator|+
literal|"low redundancy open files!"
argument_list|,
name|ucFile
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lowRedundancyBlocksInOpenFiles
operator|++
expr_stmt|;
name|lowRedundancyOpenFiles
operator|.
name|add
argument_list|(
name|ucFile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|liveReplicas
operator|==
literal|0
operator|)
operator|&&
operator|(
name|num
operator|.
name|outOfServiceReplicas
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|outOfServiceOnlyReplicas
operator|++
expr_stmt|;
block|}
block|}
name|datanode
operator|.
name|getLeavingServiceStatus
argument_list|()
operator|.
name|set
argument_list|(
name|lowRedundancyBlocksInOpenFiles
argument_list|,
name|lowRedundancyOpenFiles
argument_list|,
name|lowRedundancyBlocks
argument_list|,
name|outOfServiceOnlyReplicas
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

