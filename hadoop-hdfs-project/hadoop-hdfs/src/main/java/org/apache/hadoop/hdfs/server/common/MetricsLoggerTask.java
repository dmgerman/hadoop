begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanAttributeInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AsyncAppender
import|;
end_import

begin_comment
comment|/**  * MetricsLoggerTask can be used as utility to dump metrics to log.  */
end_comment

begin_class
DECL|class|MetricsLoggerTask
specifier|public
class|class
name|MetricsLoggerTask
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetricsLoggerTask
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|objectName
specifier|private
specifier|static
name|ObjectName
name|objectName
init|=
literal|null
decl_stmt|;
static|static
block|{
try|try
block|{
name|objectName
operator|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:*"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|m
parameter_list|)
block|{
comment|// This should not occur in practice since we pass
comment|// a valid pattern to the constructor above.
block|}
block|}
DECL|field|metricsLog
specifier|private
name|Log
name|metricsLog
decl_stmt|;
DECL|field|nodeName
specifier|private
name|String
name|nodeName
decl_stmt|;
DECL|field|maxLogLineLength
specifier|private
name|short
name|maxLogLineLength
decl_stmt|;
DECL|method|MetricsLoggerTask (Log metricsLog, String nodeName, short maxLogLineLength)
specifier|public
name|MetricsLoggerTask
parameter_list|(
name|Log
name|metricsLog
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|short
name|maxLogLineLength
parameter_list|)
block|{
name|this
operator|.
name|metricsLog
operator|=
name|metricsLog
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|maxLogLineLength
operator|=
name|maxLogLineLength
expr_stmt|;
block|}
comment|/**    * Write metrics to the metrics appender when invoked.    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Skip querying metrics if there are no known appenders.
if|if
condition|(
operator|!
name|metricsLog
operator|.
name|isInfoEnabled
argument_list|()
operator|||
operator|!
name|hasAppenders
argument_list|(
name|metricsLog
argument_list|)
operator|||
name|objectName
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|metricsLog
operator|.
name|info
argument_list|(
literal|">> Begin "
operator|+
name|nodeName
operator|+
literal|" metrics dump"
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|server
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
comment|// Iterate over each MBean.
for|for
control|(
specifier|final
name|ObjectName
name|mbeanName
range|:
name|server
operator|.
name|queryNames
argument_list|(
name|objectName
argument_list|,
literal|null
argument_list|)
control|)
block|{
try|try
block|{
name|MBeanInfo
name|mBeanInfo
init|=
name|server
operator|.
name|getMBeanInfo
argument_list|(
name|mbeanName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|mBeanNameName
init|=
name|MBeans
operator|.
name|getMbeanNameName
argument_list|(
name|mbeanName
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|attributeNames
init|=
name|getFilteredAttributes
argument_list|(
name|mBeanInfo
argument_list|)
decl_stmt|;
specifier|final
name|AttributeList
name|attributes
init|=
name|server
operator|.
name|getAttributes
argument_list|(
name|mbeanName
argument_list|,
name|attributeNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|attributeNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|attributes
control|)
block|{
specifier|final
name|Attribute
name|attribute
init|=
operator|(
name|Attribute
operator|)
name|o
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|attribute
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|valueStr
init|=
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|"null"
decl_stmt|;
comment|// Truncate the value if it is too long
name|metricsLog
operator|.
name|info
argument_list|(
name|mBeanNameName
operator|+
literal|":"
operator|+
name|attribute
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|trimLine
argument_list|(
name|valueStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|metricsLog
operator|.
name|error
argument_list|(
literal|"Failed to get "
operator|+
name|nodeName
operator|+
literal|" metrics for mbean "
operator|+
name|mbeanName
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|metricsLog
operator|.
name|info
argument_list|(
literal|"<< End "
operator|+
name|nodeName
operator|+
literal|" metrics dump"
argument_list|)
expr_stmt|;
block|}
DECL|method|trimLine (String valueStr)
specifier|private
name|String
name|trimLine
parameter_list|(
name|String
name|valueStr
parameter_list|)
block|{
if|if
condition|(
name|maxLogLineLength
operator|<=
literal|0
condition|)
block|{
return|return
name|valueStr
return|;
block|}
return|return
operator|(
name|valueStr
operator|.
name|length
argument_list|()
operator|<
name|maxLogLineLength
condition|?
name|valueStr
else|:
name|valueStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLogLineLength
argument_list|)
operator|+
literal|"..."
operator|)
return|;
block|}
DECL|method|hasAppenders (Log logger)
specifier|private
specifier|static
name|boolean
name|hasAppenders
parameter_list|(
name|Log
name|logger
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|logger
operator|instanceof
name|Log4JLogger
operator|)
condition|)
block|{
comment|// Don't bother trying to determine the presence of appenders.
return|return
literal|true
return|;
block|}
name|Log4JLogger
name|log4JLogger
init|=
operator|(
operator|(
name|Log4JLogger
operator|)
name|logger
operator|)
decl_stmt|;
return|return
name|log4JLogger
operator|.
name|getLogger
argument_list|()
operator|.
name|getAllAppenders
argument_list|()
operator|.
name|hasMoreElements
argument_list|()
return|;
block|}
comment|/**    * Get the list of attributes for the MBean, filtering out a few attribute    * types.    */
DECL|method|getFilteredAttributes (MBeanInfo mBeanInfo)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getFilteredAttributes
parameter_list|(
name|MBeanInfo
name|mBeanInfo
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|attributeNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MBeanAttributeInfo
name|attributeInfo
range|:
name|mBeanInfo
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|attributeInfo
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"javax.management.openmbean.TabularData"
argument_list|)
operator|&&
operator|!
name|attributeInfo
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"javax.management.openmbean.CompositeData"
argument_list|)
operator|&&
operator|!
name|attributeInfo
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"[Ljavax.management.openmbean.CompositeData;"
argument_list|)
condition|)
block|{
name|attributeNames
operator|.
name|add
argument_list|(
name|attributeInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attributeNames
return|;
block|}
comment|/**    * Make the metrics logger async and add all pre-existing appenders to the    * async appender.    */
DECL|method|makeMetricsLoggerAsync (Log metricsLog)
specifier|public
specifier|static
name|void
name|makeMetricsLoggerAsync
parameter_list|(
name|Log
name|metricsLog
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|metricsLog
operator|instanceof
name|Log4JLogger
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metrics logging will not be async since "
operator|+
literal|"the logger is not log4j"
argument_list|)
expr_stmt|;
return|return;
block|}
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|logger
init|=
operator|(
operator|(
name|Log4JLogger
operator|)
name|metricsLog
operator|)
operator|.
name|getLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|setAdditivity
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Don't pollute actual logs with metrics dump
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Appender
argument_list|>
name|appenders
init|=
name|Collections
operator|.
name|list
argument_list|(
name|logger
operator|.
name|getAllAppenders
argument_list|()
argument_list|)
decl_stmt|;
comment|// failsafe against trying to async it more than once
if|if
condition|(
operator|!
name|appenders
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|appenders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|AsyncAppender
operator|)
condition|)
block|{
name|AsyncAppender
name|asyncAppender
init|=
operator|new
name|AsyncAppender
argument_list|()
decl_stmt|;
comment|// change logger to have an async appender containing all the
comment|// previously configured appenders
for|for
control|(
name|Appender
name|appender
range|:
name|appenders
control|)
block|{
name|logger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|asyncAppender
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|addAppender
argument_list|(
name|asyncAppender
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

