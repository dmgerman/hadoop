begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Describes a path-based cache directive.  */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|InterfaceAudience
operator|.
name|Public
DECL|class|CacheDirectiveInfo
specifier|public
class|class
name|CacheDirectiveInfo
block|{
comment|/**    * A builder for creating new CacheDirectiveInfo instances.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|id
specifier|private
name|Long
name|id
decl_stmt|;
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|replication
specifier|private
name|Short
name|replication
decl_stmt|;
DECL|field|pool
specifier|private
name|String
name|pool
decl_stmt|;
DECL|field|expiration
specifier|private
name|Expiration
name|expiration
decl_stmt|;
comment|/**      * Builds a new CacheDirectiveInfo populated with the set properties.      *       * @return New CacheDirectiveInfo.      */
DECL|method|build ()
specifier|public
name|CacheDirectiveInfo
name|build
parameter_list|()
block|{
return|return
operator|new
name|CacheDirectiveInfo
argument_list|(
name|id
argument_list|,
name|path
argument_list|,
name|replication
argument_list|,
name|pool
argument_list|,
name|expiration
argument_list|)
return|;
block|}
comment|/**      * Creates an empty builder.      */
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{     }
comment|/**      * Creates a builder with all elements set to the same values as the      * given CacheDirectiveInfo.      */
DECL|method|Builder (CacheDirectiveInfo directive)
specifier|public
name|Builder
parameter_list|(
name|CacheDirectiveInfo
name|directive
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|directive
operator|.
name|getId
argument_list|()
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|directive
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|directive
operator|.
name|getReplication
argument_list|()
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|directive
operator|.
name|getPool
argument_list|()
expr_stmt|;
name|this
operator|.
name|expiration
operator|=
name|directive
operator|.
name|getExpiration
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the id used in this request.      *       * @param id The id used in this request.      * @return This builder, for call chaining.      */
DECL|method|setId (Long id)
specifier|public
name|Builder
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the path used in this request.      *       * @param path The path used in this request.      * @return This builder, for call chaining.      */
DECL|method|setPath (Path path)
specifier|public
name|Builder
name|setPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the replication used in this request.      *       * @param replication The replication used in this request.      * @return This builder, for call chaining.      */
DECL|method|setReplication (Short replication)
specifier|public
name|Builder
name|setReplication
parameter_list|(
name|Short
name|replication
parameter_list|)
block|{
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the pool used in this request.      *       * @param pool The pool used in this request.      * @return This builder, for call chaining.      */
DECL|method|setPool (String pool)
specifier|public
name|Builder
name|setPool
parameter_list|(
name|String
name|pool
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets when the CacheDirective should expire. A      * {@link CacheDirectiveInfo.Expiration} can specify either an absolute or      * relative expiration time.      *       * @param expiration when this CacheDirective should expire      * @return This builder, for call chaining      */
DECL|method|setExpiration (Expiration expiration)
specifier|public
name|Builder
name|setExpiration
parameter_list|(
name|Expiration
name|expiration
parameter_list|)
block|{
name|this
operator|.
name|expiration
operator|=
name|expiration
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**    * Denotes a relative or absolute expiration time for a CacheDirective. Use    * factory methods {@link CacheDirectiveInfo.Expiration#newAbsolute(Date)} and    * {@link CacheDirectiveInfo.Expiration#newRelative(long)} to create an    * Expiration.    *<p>    * In either case, the server-side clock is used to determine when a    * CacheDirective expires.    */
DECL|class|Expiration
specifier|public
specifier|static
class|class
name|Expiration
block|{
comment|/**      * The maximum value we accept for a relative expiry.      */
DECL|field|MAX_RELATIVE_EXPIRY_MS
specifier|public
specifier|static
specifier|final
name|long
name|MAX_RELATIVE_EXPIRY_MS
init|=
name|Long
operator|.
name|MAX_VALUE
operator|/
literal|4
decl_stmt|;
comment|// This helps prevent weird overflow bugs
comment|/**      * An relative Expiration that never expires.      */
DECL|field|NEVER
specifier|public
specifier|static
specifier|final
name|Expiration
name|NEVER
init|=
name|newRelative
argument_list|(
name|MAX_RELATIVE_EXPIRY_MS
argument_list|)
decl_stmt|;
comment|/**      * Create a new relative Expiration.      *<p>      * Use {@link Expiration#NEVER} to indicate an Expiration that never      * expires.      *       * @param ms how long until the CacheDirective expires, in milliseconds      * @return A relative Expiration      */
DECL|method|newRelative (long ms)
specifier|public
specifier|static
name|Expiration
name|newRelative
parameter_list|(
name|long
name|ms
parameter_list|)
block|{
return|return
operator|new
name|Expiration
argument_list|(
name|ms
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Create a new absolute Expiration.      *<p>      * Use {@link Expiration#NEVER} to indicate an Expiration that never      * expires.      *       * @param date when the CacheDirective expires      * @return An absolute Expiration      */
DECL|method|newAbsolute (Date date)
specifier|public
specifier|static
name|Expiration
name|newAbsolute
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
operator|new
name|Expiration
argument_list|(
name|date
operator|.
name|getTime
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a new absolute Expiration.      *<p>      * Use {@link Expiration#NEVER} to indicate an Expiration that never      * expires.      *       * @param ms when the CacheDirective expires, in milliseconds since the Unix      *          epoch.      * @return An absolute Expiration      */
DECL|method|newAbsolute (long ms)
specifier|public
specifier|static
name|Expiration
name|newAbsolute
parameter_list|(
name|long
name|ms
parameter_list|)
block|{
return|return
operator|new
name|Expiration
argument_list|(
name|ms
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|field|ms
specifier|private
specifier|final
name|long
name|ms
decl_stmt|;
DECL|field|isRelative
specifier|private
specifier|final
name|boolean
name|isRelative
decl_stmt|;
DECL|method|Expiration (long ms, boolean isRelative)
specifier|private
name|Expiration
parameter_list|(
name|long
name|ms
parameter_list|,
name|boolean
name|isRelative
parameter_list|)
block|{
if|if
condition|(
name|isRelative
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|ms
operator|<=
name|MAX_RELATIVE_EXPIRY_MS
argument_list|,
literal|"Expiration time is too far in the future!"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|ms
operator|=
name|ms
expr_stmt|;
name|this
operator|.
name|isRelative
operator|=
name|isRelative
expr_stmt|;
block|}
comment|/**      * @return true if Expiration was specified as a relative duration, false if      *         specified as an absolute time.      */
DECL|method|isRelative ()
specifier|public
name|boolean
name|isRelative
parameter_list|()
block|{
return|return
name|isRelative
return|;
block|}
comment|/**      * @return The raw underlying millisecond value, either a relative duration      *         or an absolute time as milliseconds since the Unix epoch.      */
DECL|method|getMillis ()
specifier|public
name|long
name|getMillis
parameter_list|()
block|{
return|return
name|ms
return|;
block|}
comment|/**      * @return Expiration time as a {@link Date} object. This converts a      *         relative Expiration into an absolute Date based on the local      *         clock.      */
DECL|method|getAbsoluteDate ()
specifier|public
name|Date
name|getAbsoluteDate
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|(
name|getAbsoluteMillis
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return Expiration time in milliseconds from the Unix epoch. This      *         converts a relative Expiration into an absolute time based on the      *         local clock.      */
DECL|method|getAbsoluteMillis ()
specifier|public
name|long
name|getAbsoluteMillis
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isRelative
condition|)
block|{
return|return
name|ms
return|;
block|}
else|else
block|{
return|return
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
name|ms
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|isRelative
condition|)
block|{
return|return
name|DFSUtil
operator|.
name|durationToString
argument_list|(
name|ms
argument_list|)
return|;
block|}
return|return
name|DFSUtil
operator|.
name|dateToIso8601String
argument_list|(
operator|new
name|Date
argument_list|(
name|ms
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|field|id
specifier|private
specifier|final
name|Long
name|id
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|replication
specifier|private
specifier|final
name|Short
name|replication
decl_stmt|;
DECL|field|pool
specifier|private
specifier|final
name|String
name|pool
decl_stmt|;
DECL|field|expiration
specifier|private
specifier|final
name|Expiration
name|expiration
decl_stmt|;
DECL|method|CacheDirectiveInfo (Long id, Path path, Short replication, String pool, Expiration expiration)
name|CacheDirectiveInfo
parameter_list|(
name|Long
name|id
parameter_list|,
name|Path
name|path
parameter_list|,
name|Short
name|replication
parameter_list|,
name|String
name|pool
parameter_list|,
name|Expiration
name|expiration
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|expiration
operator|=
name|expiration
expr_stmt|;
block|}
comment|/**    * @return The ID of this directive.    */
DECL|method|getId ()
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**    * @return The path used in this request.    */
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**    * @return The number of times the block should be cached.    */
DECL|method|getReplication ()
specifier|public
name|Short
name|getReplication
parameter_list|()
block|{
return|return
name|replication
return|;
block|}
comment|/**    * @return The pool used in this request.    */
DECL|method|getPool ()
specifier|public
name|String
name|getPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
comment|/**    * @return When this directive expires.    */
DECL|method|getExpiration ()
specifier|public
name|Expiration
name|getExpiration
parameter_list|()
block|{
return|return
name|expiration
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CacheDirectiveInfo
name|other
init|=
operator|(
name|CacheDirectiveInfo
operator|)
name|o
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|getId
argument_list|()
argument_list|,
name|other
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|other
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|getReplication
argument_list|()
argument_list|,
name|other
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|getPool
argument_list|()
argument_list|,
name|other
operator|.
name|getPool
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|getExpiration
argument_list|()
argument_list|,
name|other
operator|.
name|getExpiration
argument_list|()
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
name|replication
argument_list|)
operator|.
name|append
argument_list|(
name|pool
argument_list|)
operator|.
name|append
argument_list|(
name|expiration
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"id: "
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"path: "
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
if|if
condition|(
name|replication
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"replication: "
argument_list|)
operator|.
name|append
argument_list|(
name|replication
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"pool: "
argument_list|)
operator|.
name|append
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
if|if
condition|(
name|expiration
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"expiration: "
argument_list|)
operator|.
name|append
argument_list|(
name|expiration
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

