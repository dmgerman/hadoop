begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.balancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_comment
comment|/** A matcher interface for matching nodes. */
end_comment

begin_interface
DECL|interface|Matcher
specifier|public
interface|interface
name|Matcher
block|{
comment|/** Given the cluster topology, does the left node match the right node? */
DECL|method|match (NetworkTopology cluster, Node left, Node right)
specifier|public
name|boolean
name|match
parameter_list|(
name|NetworkTopology
name|cluster
parameter_list|,
name|Node
name|left
parameter_list|,
name|Node
name|right
parameter_list|)
function_decl|;
comment|/** Match datanodes in the same node group. */
DECL|field|SAME_NODE_GROUP
specifier|public
specifier|static
specifier|final
name|Matcher
name|SAME_NODE_GROUP
init|=
operator|new
name|Matcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|NetworkTopology
name|cluster
parameter_list|,
name|Node
name|left
parameter_list|,
name|Node
name|right
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|isOnSameNodeGroup
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SAME_NODE_GROUP"
return|;
block|}
block|}
decl_stmt|;
comment|/** Match datanodes in the same rack. */
DECL|field|SAME_RACK
specifier|public
specifier|static
specifier|final
name|Matcher
name|SAME_RACK
init|=
operator|new
name|Matcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|NetworkTopology
name|cluster
parameter_list|,
name|Node
name|left
parameter_list|,
name|Node
name|right
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|isOnSameRack
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SAME_RACK"
return|;
block|}
block|}
decl_stmt|;
comment|/** Match any datanode with any other datanode. */
DECL|field|ANY_OTHER
specifier|public
specifier|static
specifier|final
name|Matcher
name|ANY_OTHER
init|=
operator|new
name|Matcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|NetworkTopology
name|cluster
parameter_list|,
name|Node
name|left
parameter_list|,
name|Node
name|right
parameter_list|)
block|{
return|return
name|left
operator|!=
name|right
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ANY_OTHER"
return|;
block|}
block|}
decl_stmt|;
block|}
end_interface

end_unit

