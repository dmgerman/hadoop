begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DelegationTokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ByteRangeInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|SafeModeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|AccessTimeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|BlockSizeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|BufferSizeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ConcatSourcesParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|CreateParentParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DelegationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DeleteOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DestinationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DoAsParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|GetOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|GroupParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|HttpOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|LengthParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ModificationTimeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OffsetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OverwriteParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OwnerParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PermissionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PostOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PutOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|RecursiveParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|RenameOptionSetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|RenewerParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ReplicationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|TokenArgumentParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|UserParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|AbstractDelegationTokenSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/** A FileSystem for HDFS over the web. */
end_comment

begin_class
DECL|class|WebHdfsFileSystem
specifier|public
class|class
name|WebHdfsFileSystem
extends|extends
name|FileSystem
implements|implements
name|DelegationTokenRenewer
operator|.
name|Renewable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WebHdfsFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** File System URI: {SCHEME}://namenode:port/path/to/file */
DECL|field|SCHEME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME
init|=
literal|"webhdfs"
decl_stmt|;
comment|/** WebHdfs version. */
DECL|field|VERSION
specifier|public
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
comment|/** Http URI: http://namenode:port/{PATH_PREFIX}/path/to/file */
DECL|field|PATH_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
literal|"/"
operator|+
name|SCHEME
operator|+
literal|"/v"
operator|+
name|VERSION
decl_stmt|;
comment|/** Default connection factory may be overridden in tests to use smaller timeout values */
DECL|field|connectionFactory
name|URLConnectionFactory
name|connectionFactory
init|=
name|URLConnectionFactory
operator|.
name|DEFAULT_CONNECTION_FACTORY
decl_stmt|;
comment|/** Delegation token kind */
DECL|field|TOKEN_KIND
specifier|public
specifier|static
specifier|final
name|Text
name|TOKEN_KIND
init|=
operator|new
name|Text
argument_list|(
literal|"WEBHDFS delegation"
argument_list|)
decl_stmt|;
comment|/** Token selector */
DECL|field|DT_SELECTOR
specifier|public
specifier|static
specifier|final
name|WebHdfsDelegationTokenSelector
name|DT_SELECTOR
init|=
operator|new
name|WebHdfsDelegationTokenSelector
argument_list|()
decl_stmt|;
DECL|field|dtRenewer
specifier|private
name|DelegationTokenRenewer
name|dtRenewer
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|action
name|DelegationTokenRenewer
operator|.
name|RenewAction
argument_list|<
name|?
argument_list|>
name|action
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|addRenewAction (final WebHdfsFileSystem webhdfs)
specifier|protected
specifier|synchronized
name|void
name|addRenewAction
parameter_list|(
specifier|final
name|WebHdfsFileSystem
name|webhdfs
parameter_list|)
block|{
if|if
condition|(
name|dtRenewer
operator|==
literal|null
condition|)
block|{
name|dtRenewer
operator|=
name|DelegationTokenRenewer
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
name|action
operator|=
name|dtRenewer
operator|.
name|addRenewAction
argument_list|(
name|webhdfs
argument_list|)
expr_stmt|;
block|}
comment|/** Is WebHDFS enabled in conf? */
DECL|method|isEnabled (final Configuration conf, final Log log)
specifier|public
specifier|static
name|boolean
name|isEnabled
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Log
name|log
parameter_list|)
block|{
specifier|final
name|boolean
name|b
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEBHDFS_ENABLED_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_WEBHDFS_ENABLED_DEFAULT
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEBHDFS_ENABLED_KEY
operator|+
literal|" = "
operator|+
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
DECL|field|ugi
specifier|private
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|hasInitedToken
specifier|private
name|boolean
name|hasInitedToken
decl_stmt|;
DECL|field|delegationToken
specifier|private
name|Token
argument_list|<
name|?
argument_list|>
name|delegationToken
decl_stmt|;
DECL|field|retryPolicy
specifier|private
name|RetryPolicy
name|retryPolicy
init|=
literal|null
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|nnAddrs
specifier|private
name|InetSocketAddress
name|nnAddrs
index|[]
decl_stmt|;
DECL|field|currentNNAddrIndex
specifier|private
name|int
name|currentNNAddrIndex
decl_stmt|;
comment|/**    * Return the protocol scheme for the FileSystem.    *<p/>    *    * @return<code>webhdfs</code>    */
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|SCHEME
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf )
specifier|public
specifier|synchronized
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|nnAddrs
operator|=
name|DFSUtil
operator|.
name|resolve
argument_list|(
name|this
operator|.
name|uri
argument_list|,
name|getDefaultPort
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|uri
argument_list|)
condition|)
block|{
name|this
operator|.
name|retryPolicy
operator|=
name|RetryUtils
operator|.
name|getDefaultRetryPolicy
argument_list|(
name|conf
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HTTP_CLIENT_RETRY_POLICY_ENABLED_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HTTP_CLIENT_RETRY_POLICY_ENABLED_DEFAULT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HTTP_CLIENT_RETRY_POLICY_SPEC_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HTTP_CLIENT_RETRY_POLICY_SPEC_DEFAULT
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|maxFailoverAttempts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HTTP_CLIENT_FAILOVER_MAX_ATTEMPTS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HTTP_CLIENT_FAILOVER_MAX_ATTEMPTS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|failoverSleepBaseMillis
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HTTP_CLIENT_FAILOVER_SLEEPTIME_BASE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HTTP_CLIENT_FAILOVER_SLEEPTIME_BASE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|failoverSleepMaxMillis
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HTTP_CLIENT_FAILOVER_SLEEPTIME_MAX_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HTTP_CLIENT_FAILOVER_SLEEPTIME_MAX_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|retryPolicy
operator|=
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|maxFailoverAttempts
argument_list|,
name|failoverSleepBaseMillis
argument_list|,
name|failoverSleepMaxMillis
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|workingDir
operator|=
name|getHomeDirectory
argument_list|()
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|initDelegationToken
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|initDelegationToken ()
specifier|protected
name|void
name|initDelegationToken
parameter_list|()
throws|throws
name|IOException
block|{
comment|// look for webhdfs token, then try hdfs
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|selectDelegationToken
argument_list|(
name|ugi
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found existing DT for "
operator|+
name|token
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|hasInitedToken
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|getDelegationToken ()
specifier|protected
specifier|synchronized
name|Token
argument_list|<
name|?
argument_list|>
name|getDelegationToken
parameter_list|()
throws|throws
name|IOException
block|{
comment|// we haven't inited yet, or we used to have a token but it expired
if|if
condition|(
operator|!
name|hasInitedToken
operator|||
operator|(
name|action
operator|!=
literal|null
operator|&&
operator|!
name|action
operator|.
name|isValid
argument_list|()
operator|)
condition|)
block|{
comment|//since we don't already have a token, go get one
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|getDelegationToken
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// security might be disabled
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|addRenewAction
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new DT for "
operator|+
name|token
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hasInitedToken
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|delegationToken
return|;
block|}
DECL|method|selectDelegationToken ( UserGroupInformation ugi)
specifier|protected
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|selectDelegationToken
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
return|return
name|DT_SELECTOR
operator|.
name|selectToken
argument_list|(
name|getCanonicalUri
argument_list|()
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|,
name|getConf
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultPort ()
specifier|protected
name|int
name|getDefaultPort
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_PORT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_PORT_DEFAULT
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|canonicalizeUri (URI uri)
specifier|protected
name|URI
name|canonicalizeUri
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|uri
argument_list|,
name|getDefaultPort
argument_list|()
argument_list|)
return|;
block|}
comment|/** @return the home directory. */
DECL|method|getHomeDirectoryString (final UserGroupInformation ugi)
specifier|public
specifier|static
name|String
name|getHomeDirectoryString
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
return|return
literal|"/user/"
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|getHomeDirectoryString
argument_list|(
name|ugi
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
specifier|synchronized
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (final Path dir)
specifier|public
specifier|synchronized
name|void
name|setWorkingDirectory
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|)
block|{
name|String
name|result
init|=
name|makeAbsolute
argument_list|(
name|dir
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|result
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid DFS directory name "
operator|+
name|result
argument_list|)
throw|;
block|}
name|workingDir
operator|=
name|makeAbsolute
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|makeAbsolute (Path f)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
return|return
name|f
operator|.
name|isAbsolute
argument_list|()
condition|?
name|f
else|:
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|f
argument_list|)
return|;
block|}
DECL|method|jsonParse (final HttpURLConnection c, final boolean useErrorStream )
specifier|static
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|jsonParse
parameter_list|(
specifier|final
name|HttpURLConnection
name|c
parameter_list|,
specifier|final
name|boolean
name|useErrorStream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|c
operator|.
name|getContentLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|InputStream
name|in
init|=
name|useErrorStream
condition|?
name|c
operator|.
name|getErrorStream
argument_list|()
else|:
name|c
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The "
operator|+
operator|(
name|useErrorStream
condition|?
literal|"error"
else|:
literal|"input"
operator|)
operator|+
literal|" stream is null."
argument_list|)
throw|;
block|}
specifier|final
name|String
name|contentType
init|=
name|c
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
specifier|final
name|MediaType
name|parsed
init|=
name|MediaType
operator|.
name|valueOf
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|.
name|isCompatible
argument_list|(
name|parsed
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Content-Type \""
operator|+
name|contentType
operator|+
literal|"\" is incompatible with \""
operator|+
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"\" (parsed=\""
operator|+
name|parsed
operator|+
literal|"\")"
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
DECL|method|validateResponse (final HttpOpParam.Op op, final HttpURLConnection conn, boolean unwrapException)
specifier|private
specifier|static
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|validateResponse
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|HttpURLConnection
name|conn
parameter_list|,
name|boolean
name|unwrapException
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|code
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|code
operator|!=
name|op
operator|.
name|getExpectedHttpResponseCode
argument_list|()
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
decl_stmt|;
try|try
block|{
name|m
operator|=
name|jsonParse
argument_list|(
name|conn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected HTTP response: code="
operator|+
name|code
operator|+
literal|" != "
operator|+
name|op
operator|.
name|getExpectedHttpResponseCode
argument_list|()
operator|+
literal|", "
operator|+
name|op
operator|.
name|toQueryString
argument_list|()
operator|+
literal|", message="
operator|+
name|conn
operator|.
name|getResponseMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected HTTP response: code="
operator|+
name|code
operator|+
literal|" != "
operator|+
name|op
operator|.
name|getExpectedHttpResponseCode
argument_list|()
operator|+
literal|", "
operator|+
name|op
operator|.
name|toQueryString
argument_list|()
operator|+
literal|", message="
operator|+
name|conn
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|m
operator|.
name|get
argument_list|(
name|RemoteException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
specifier|final
name|RemoteException
name|re
init|=
name|JsonUtil
operator|.
name|toRemoteException
argument_list|(
name|m
argument_list|)
decl_stmt|;
throw|throw
name|unwrapException
condition|?
name|toIOException
argument_list|(
name|re
argument_list|)
else|:
name|re
throw|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Covert an exception to an IOException.    *     * For a non-IOException, wrap it with IOException.    * For a RemoteException, unwrap it.    * For an IOException which is not a RemoteException, return it.     */
DECL|method|toIOException (Exception e)
specifier|private
specifier|static
name|IOException
name|toIOException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|IOException
operator|)
condition|)
block|{
return|return
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
return|;
block|}
specifier|final
name|IOException
name|ioe
init|=
operator|(
name|IOException
operator|)
name|e
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ioe
operator|instanceof
name|RemoteException
operator|)
condition|)
block|{
return|return
name|ioe
return|;
block|}
return|return
operator|(
operator|(
name|RemoteException
operator|)
name|ioe
operator|)
operator|.
name|unwrapRemoteException
argument_list|()
return|;
block|}
DECL|method|getCurrentNNAddr ()
specifier|private
specifier|synchronized
name|InetSocketAddress
name|getCurrentNNAddr
parameter_list|()
block|{
return|return
name|nnAddrs
index|[
name|currentNNAddrIndex
index|]
return|;
block|}
comment|/**    * Reset the appropriate state to gracefully fail over to another name node    */
DECL|method|resetStateToFailOver ()
specifier|private
specifier|synchronized
name|void
name|resetStateToFailOver
parameter_list|()
block|{
name|currentNNAddrIndex
operator|=
operator|(
name|currentNNAddrIndex
operator|+
literal|1
operator|)
operator|%
name|nnAddrs
operator|.
name|length
expr_stmt|;
name|delegationToken
operator|=
literal|null
expr_stmt|;
name|hasInitedToken
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Return a URL pointing to given path on the namenode.    *    * @param path to obtain the URL for    * @param query string to append to the path    * @return namenode URL referring to the given path    * @throws IOException on error constructing the URL    */
DECL|method|getNamenodeURL (String path, String query)
specifier|private
name|URL
name|getNamenodeURL
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|nnAddr
init|=
name|getCurrentNNAddr
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|nnAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|nnAddr
operator|.
name|getPort
argument_list|()
argument_list|,
name|path
operator|+
literal|'?'
operator|+
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"url="
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
DECL|method|getAuthParameters (final HttpOpParam.Op op)
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|getAuthParameters
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|authParams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Skip adding delegation token for token operations because these
comment|// operations require authentication.
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
operator|!
name|op
operator|.
name|getRequireAuth
argument_list|()
condition|)
block|{
name|token
operator|=
name|getDelegationToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|authParams
operator|.
name|add
argument_list|(
operator|new
name|DelegationParam
argument_list|(
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UserGroupInformation
name|userUgi
init|=
name|ugi
decl_stmt|;
name|UserGroupInformation
name|realUgi
init|=
name|userUgi
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|realUgi
operator|!=
literal|null
condition|)
block|{
comment|// proxy user
name|authParams
operator|.
name|add
argument_list|(
operator|new
name|DoAsParam
argument_list|(
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|userUgi
operator|=
name|realUgi
expr_stmt|;
block|}
name|authParams
operator|.
name|add
argument_list|(
operator|new
name|UserParam
argument_list|(
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|authParams
operator|.
name|toArray
argument_list|(
operator|new
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|toUrl (final HttpOpParam.Op op, final Path fspath, final Param<?,?>... parameters)
name|URL
name|toUrl
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|Path
name|fspath
parameter_list|,
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
comment|//initialize URI path and query
specifier|final
name|String
name|path
init|=
name|PATH_PREFIX
operator|+
operator|(
name|fspath
operator|==
literal|null
condition|?
literal|"/"
else|:
name|makeQualified
argument_list|(
name|fspath
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
operator|)
decl_stmt|;
specifier|final
name|String
name|query
init|=
name|op
operator|.
name|toQueryString
argument_list|()
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
name|getAuthParameters
argument_list|(
name|op
argument_list|)
argument_list|)
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|getNamenodeURL
argument_list|(
name|path
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"url="
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
comment|/**    * Run a http operation.    * Connect to the http server, validate response, and obtain the JSON output.    *     * @param op http operation    * @param fspath file system path    * @param parameters parameters for the operation    * @return a JSON object, e.g. Object[], Map<?, ?>, etc.    * @throws IOException    */
DECL|method|run (final HttpOpParam.Op op, final Path fspath, final Param<?,?>... parameters)
specifier|private
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|run
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|Path
name|fspath
parameter_list|,
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|fspath
argument_list|,
name|parameters
argument_list|)
operator|.
name|run
argument_list|()
operator|.
name|json
return|;
block|}
comment|/**    * This class is for initialing a HTTP connection, connecting to server,    * obtaining a response, and also handling retry on failures.    */
DECL|class|AbstractRunner
specifier|abstract
class|class
name|AbstractRunner
block|{
DECL|method|getUrl ()
specifier|abstract
specifier|protected
name|URL
name|getUrl
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|field|op
specifier|protected
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
decl_stmt|;
DECL|field|redirected
specifier|private
specifier|final
name|boolean
name|redirected
decl_stmt|;
DECL|field|checkRetry
specifier|private
name|boolean
name|checkRetry
decl_stmt|;
DECL|field|conn
specifier|protected
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
DECL|field|json
specifier|private
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
init|=
literal|null
decl_stmt|;
DECL|method|AbstractRunner (final HttpOpParam.Op op, boolean redirected)
specifier|protected
name|AbstractRunner
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
name|boolean
name|redirected
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|redirected
operator|=
name|redirected
expr_stmt|;
block|}
DECL|method|getHttpUrlConnection (final URL url)
specifier|private
name|HttpURLConnection
name|getHttpUrlConnection
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|UserGroupInformation
name|connectUgi
init|=
name|ugi
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectUgi
operator|==
literal|null
condition|)
block|{
name|connectUgi
operator|=
name|ugi
expr_stmt|;
block|}
try|try
block|{
return|return
name|connectUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|HttpURLConnection
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HttpURLConnection
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|openHttpUrlConnection
argument_list|(
name|url
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ioe
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|AuthenticationException
condition|)
block|{
throw|throw
operator|(
name|AuthenticationException
operator|)
name|cause
throw|;
block|}
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|openHttpUrlConnection (final URL url)
specifier|private
name|HttpURLConnection
name|openHttpUrlConnection
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpURLConnection
name|conn
decl_stmt|;
try|try
block|{
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
name|op
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|conn
return|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|checkRetry
operator|=
operator|!
name|redirected
expr_stmt|;
name|URL
name|url
init|=
name|getUrl
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getHttpUrlConnection
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ae
parameter_list|)
block|{
name|checkRetry
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Authentication failed, url="
operator|+
name|url
argument_list|,
name|ae
argument_list|)
throw|;
block|}
block|}
DECL|method|connect ()
specifier|private
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
name|connect
argument_list|(
name|op
operator|.
name|getDoOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|connect (boolean doOutput)
specifier|private
name|void
name|connect
parameter_list|(
name|boolean
name|doOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|conn
operator|.
name|setRequestMethod
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setDoOutput
argument_list|(
name|doOutput
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setInstanceFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
DECL|method|disconnect ()
specifier|private
name|void
name|disconnect
parameter_list|()
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|conn
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|run ()
name|AbstractRunner
name|run
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**        * Do the real work.        *        * There are three cases that the code inside the loop can throw an        * IOException:        *        *<ul>        *<li>The connection has failed (e.g., ConnectException,        * @see FailoverOnNetworkExceptionRetry for more details)</li>        *<li>The namenode enters the standby state (i.e., StandbyException).</li>        *<li>The server returns errors for the command (i.e., RemoteException)</li>        *</ul>        *        * The call to shouldRetry() will conduct the retry policy. The policy        * examines the exception and swallows it if it decides to rerun the work.        */
for|for
control|(
name|int
name|retry
init|=
literal|0
init|;
condition|;
name|retry
operator|++
control|)
block|{
try|try
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|getDoOutput
argument_list|()
condition|)
block|{
name|twoStepWrite
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getResponse
argument_list|(
name|op
operator|!=
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|shouldRetry
argument_list|(
name|ioe
argument_list|,
name|retry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|shouldRetry (final IOException ioe, final int retry )
specifier|private
name|void
name|shouldRetry
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|,
specifier|final
name|int
name|retry
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|nnAddr
init|=
name|getCurrentNNAddr
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkRetry
condition|)
block|{
try|try
block|{
specifier|final
name|RetryPolicy
operator|.
name|RetryAction
name|a
init|=
name|retryPolicy
operator|.
name|shouldRetry
argument_list|(
name|ioe
argument_list|,
name|retry
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|isRetry
init|=
name|a
operator|.
name|action
operator|==
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|RETRY
decl_stmt|;
name|boolean
name|isFailoverAndRetry
init|=
name|a
operator|.
name|action
operator|==
name|RetryPolicy
operator|.
name|RetryAction
operator|.
name|RetryDecision
operator|.
name|FAILOVER_AND_RETRY
decl_stmt|;
if|if
condition|(
name|isRetry
operator|||
name|isFailoverAndRetry
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrying connect to namenode: "
operator|+
name|nnAddr
operator|+
literal|". Already tried "
operator|+
name|retry
operator|+
literal|" time(s); retry policy is "
operator|+
name|retryPolicy
operator|+
literal|", delay "
operator|+
name|a
operator|.
name|delayMillis
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFailoverAndRetry
condition|)
block|{
name|resetStateToFailOver
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|a
operator|.
name|delayMillis
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Original exception is "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|toIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
throw|throw
name|toIOException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
comment|/**      * Two-step Create/Append:      * Step 1) Submit a Http request with neither auto-redirect nor data.       * Step 2) Submit another Http request with the URL from the Location header with data.      *       * The reason of having two-step create/append is for preventing clients to      * send out the data before the redirect. This issue is addressed by the      * "Expect: 100-continue" header in HTTP/1.1; see RFC 2616, Section 8.2.3.      * Unfortunately, there are software library bugs (e.g. Jetty 6 http server      * and Java 6 http client), which do not correctly implement "Expect:      * 100-continue". The two-step create/append is a temporary workaround for      * the software library bugs.      */
DECL|method|twoStepWrite ()
name|HttpURLConnection
name|twoStepWrite
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Step 1) Submit a Http request with neither auto-redirect nor data.
name|connect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|validateResponse
argument_list|(
name|HttpOpParam
operator|.
name|TemporaryRedirectOp
operator|.
name|valueOf
argument_list|(
name|op
argument_list|)
argument_list|,
name|conn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|redirect
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|disconnect
argument_list|()
expr_stmt|;
name|checkRetry
operator|=
literal|false
expr_stmt|;
comment|//Step 2) Submit another Http request with the URL from the Location header with data.
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
operator|new
name|URL
argument_list|(
name|redirect
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setChunkedStreamingMode
argument_list|(
literal|32
operator|<<
literal|10
argument_list|)
expr_stmt|;
comment|//32kB-chunk
name|connect
argument_list|()
expr_stmt|;
return|return
name|conn
return|;
block|}
DECL|method|write (final int bufferSize)
name|FSDataOutputStream
name|write
parameter_list|(
specifier|final
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|WebHdfsFileSystem
operator|.
name|this
operator|.
name|write
argument_list|(
name|op
argument_list|,
name|conn
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
DECL|method|getResponse (boolean getJsonAndDisconnect)
name|void
name|getResponse
parameter_list|(
name|boolean
name|getJsonAndDisconnect
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|int
name|code
init|=
name|conn
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|redirected
operator|&&
name|op
operator|.
name|getRedirect
argument_list|()
operator|&&
name|code
operator|!=
name|op
operator|.
name|getExpectedHttpResponseCode
argument_list|()
condition|)
block|{
specifier|final
name|String
name|redirect
init|=
name|conn
operator|.
name|getHeaderField
argument_list|(
literal|"Location"
argument_list|)
decl_stmt|;
name|json
operator|=
name|validateResponse
argument_list|(
name|HttpOpParam
operator|.
name|TemporaryRedirectOp
operator|.
name|valueOf
argument_list|(
name|op
argument_list|)
argument_list|,
name|conn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|disconnect
argument_list|()
expr_stmt|;
name|checkRetry
operator|=
literal|false
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
operator|new
name|URL
argument_list|(
name|redirect
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|()
expr_stmt|;
block|}
name|json
operator|=
name|validateResponse
argument_list|(
name|op
argument_list|,
name|conn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
operator|&&
name|getJsonAndDisconnect
condition|)
block|{
name|json
operator|=
name|jsonParse
argument_list|(
name|conn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|getJsonAndDisconnect
condition|)
block|{
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|FsPathRunner
specifier|final
class|class
name|FsPathRunner
extends|extends
name|AbstractRunner
block|{
DECL|field|fspath
specifier|private
specifier|final
name|Path
name|fspath
decl_stmt|;
DECL|field|parameters
specifier|private
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|parameters
decl_stmt|;
DECL|method|FsPathRunner (final HttpOpParam.Op op, final Path fspath, final Param<?,?>... parameters)
name|FsPathRunner
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|Path
name|fspath
parameter_list|,
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|fspath
operator|=
name|fspath
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUrl ()
specifier|protected
name|URL
name|getUrl
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|toUrl
argument_list|(
name|op
argument_list|,
name|fspath
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
DECL|class|URLRunner
specifier|final
class|class
name|URLRunner
extends|extends
name|AbstractRunner
block|{
DECL|field|url
specifier|private
specifier|final
name|URL
name|url
decl_stmt|;
annotation|@
name|Override
DECL|method|getUrl ()
specifier|protected
name|URL
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
DECL|method|URLRunner (final HttpOpParam.Op op, final URL url, boolean redirected)
specifier|protected
name|URLRunner
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|URL
name|url
parameter_list|,
name|boolean
name|redirected
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
name|redirected
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|class|ConnRunner
specifier|final
class|class
name|ConnRunner
extends|extends
name|AbstractRunner
block|{
DECL|method|ConnRunner (final HttpOpParam.Op op, HttpURLConnection conn)
specifier|protected
name|ConnRunner
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
name|HttpURLConnection
name|conn
parameter_list|)
block|{
name|super
argument_list|(
name|op
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUrl ()
specifier|protected
name|URL
name|getUrl
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|applyUMask (FsPermission permission)
specifier|private
name|FsPermission
name|applyUMask
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
block|{
if|if
condition|(
name|permission
operator|==
literal|null
condition|)
block|{
name|permission
operator|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
return|return
name|permission
operator|.
name|applyUMask
argument_list|(
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getHdfsFileStatus (Path f)
specifier|private
name|HdfsFileStatus
name|getHdfsFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETFILESTATUS
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
init|=
name|run
argument_list|(
name|op
argument_list|,
name|f
argument_list|)
decl_stmt|;
specifier|final
name|HdfsFileStatus
name|status
init|=
name|JsonUtil
operator|.
name|toFileStatus
argument_list|(
name|json
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|f
argument_list|)
throw|;
block|}
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|makeQualified
argument_list|(
name|getHdfsFileStatus
argument_list|(
name|f
argument_list|)
argument_list|,
name|f
argument_list|)
return|;
block|}
DECL|method|makeQualified (HdfsFileStatus f, Path parent)
specifier|private
name|FileStatus
name|makeQualified
parameter_list|(
name|HdfsFileStatus
name|f
parameter_list|,
name|Path
name|parent
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|f
operator|.
name|getLen
argument_list|()
argument_list|,
name|f
operator|.
name|isDir
argument_list|()
argument_list|,
name|f
operator|.
name|getReplication
argument_list|()
argument_list|,
name|f
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|f
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|f
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|f
operator|.
name|getPermission
argument_list|()
argument_list|,
name|f
operator|.
name|getOwner
argument_list|()
argument_list|,
name|f
operator|.
name|getGroup
argument_list|()
argument_list|,
name|f
operator|.
name|isSymlink
argument_list|()
condition|?
operator|new
name|Path
argument_list|(
name|f
operator|.
name|getSymlink
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|f
operator|.
name|getFullPath
argument_list|(
name|parent
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|MKDIRS
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
init|=
name|run
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
operator|new
name|PermissionParam
argument_list|(
name|applyUMask
argument_list|(
name|permission
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"boolean"
argument_list|)
return|;
block|}
comment|/**    * Create a symlink pointing to the destination path.    * @see org.apache.hadoop.fs.Hdfs#createSymlink(Path, Path, boolean)     */
DECL|method|createSymlink (Path destination, Path f, boolean createParent )
specifier|public
name|void
name|createSymlink
parameter_list|(
name|Path
name|destination
parameter_list|,
name|Path
name|f
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATESYMLINK
decl_stmt|;
name|run
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
operator|new
name|DestinationParam
argument_list|(
name|makeQualified
argument_list|(
name|destination
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
operator|new
name|CreateParentParam
argument_list|(
name|createParent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rename (final Path src, final Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|RENAME
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
init|=
name|run
argument_list|(
name|op
argument_list|,
name|src
argument_list|,
operator|new
name|DestinationParam
argument_list|(
name|makeQualified
argument_list|(
name|dst
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"boolean"
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|rename (final Path src, final Path dst, final Options.Rename... options)
specifier|public
name|void
name|rename
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|,
specifier|final
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|RENAME
decl_stmt|;
name|run
argument_list|(
name|op
argument_list|,
name|src
argument_list|,
operator|new
name|DestinationParam
argument_list|(
name|makeQualified
argument_list|(
name|dst
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
operator|new
name|RenameOptionSetParam
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setOwner (final Path p, final String owner, final String group )
specifier|public
name|void
name|setOwner
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|owner
operator|==
literal|null
operator|&&
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"owner == null&& group == null"
argument_list|)
throw|;
block|}
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETOWNER
decl_stmt|;
name|run
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|OwnerParam
argument_list|(
name|owner
argument_list|)
argument_list|,
operator|new
name|GroupParam
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPermission (final Path p, final FsPermission permission )
specifier|public
name|void
name|setPermission
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETPERMISSION
decl_stmt|;
name|run
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|PermissionParam
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setReplication (final Path p, final short replication )
specifier|public
name|boolean
name|setReplication
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETREPLICATION
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
init|=
name|run
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|ReplicationParam
argument_list|(
name|replication
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"boolean"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setTimes (final Path p, final long mtime, final long atime )
specifier|public
name|void
name|setTimes
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|long
name|mtime
parameter_list|,
specifier|final
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|SETTIMES
decl_stmt|;
name|run
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|ModificationTimeParam
argument_list|(
name|mtime
argument_list|)
argument_list|,
operator|new
name|AccessTimeParam
argument_list|(
name|atime
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getLongBytes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultReplication ()
specifier|public
name|short
name|getDefaultReplication
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
argument_list|)
return|;
block|}
DECL|method|write (final HttpOpParam.Op op, final HttpURLConnection conn, final int bufferSize)
name|FSDataOutputStream
name|write
parameter_list|(
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|HttpURLConnection
name|conn
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|conn
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
argument_list|,
name|statistics
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|validateResponse
argument_list|(
name|op
argument_list|,
name|conn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|concat (final Path trg, final Path [] srcs)
specifier|public
name|void
name|concat
parameter_list|(
specifier|final
name|Path
name|trg
parameter_list|,
specifier|final
name|Path
index|[]
name|srcs
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PostOpParam
operator|.
name|Op
operator|.
name|CONCAT
decl_stmt|;
name|ConcatSourcesParam
name|param
init|=
operator|new
name|ConcatSourcesParam
argument_list|(
name|srcs
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|op
argument_list|,
name|trg
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create (final Path f, final FsPermission permission, final boolean overwrite, final int bufferSize, final short replication, final long blockSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FsPermission
name|permission
parameter_list|,
specifier|final
name|boolean
name|overwrite
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|long
name|blockSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATE
decl_stmt|;
return|return
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
operator|new
name|PermissionParam
argument_list|(
name|applyUMask
argument_list|(
name|permission
argument_list|)
argument_list|)
argument_list|,
operator|new
name|OverwriteParam
argument_list|(
name|overwrite
argument_list|)
argument_list|,
operator|new
name|BufferSizeParam
argument_list|(
name|bufferSize
argument_list|)
argument_list|,
operator|new
name|ReplicationParam
argument_list|(
name|replication
argument_list|)
argument_list|,
operator|new
name|BlockSizeParam
argument_list|(
name|blockSize
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
operator|.
name|write
argument_list|(
name|bufferSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|append (final Path f, final int bufferSize, final Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PostOpParam
operator|.
name|Op
operator|.
name|APPEND
decl_stmt|;
return|return
operator|new
name|FsPathRunner
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
operator|new
name|BufferSizeParam
argument_list|(
name|bufferSize
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
operator|.
name|write
argument_list|(
name|bufferSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|DeleteOpParam
operator|.
name|Op
operator|.
name|DELETE
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
init|=
name|run
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
operator|new
name|RecursiveParam
argument_list|(
name|recursive
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"boolean"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|open (final Path f, final int buffersize )
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|int
name|buffersize
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|toUrl
argument_list|(
name|op
argument_list|,
name|f
argument_list|,
operator|new
name|BufferSizeParam
argument_list|(
name|buffersize
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|OffsetUrlInputStream
argument_list|(
operator|new
name|OffsetUrlOpener
argument_list|(
name|url
argument_list|)
argument_list|,
operator|new
name|OffsetUrlOpener
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|dtRenewer
operator|!=
literal|null
condition|)
block|{
name|dtRenewer
operator|.
name|removeRenewAction
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// blocks
block|}
block|}
DECL|class|OffsetUrlOpener
class|class
name|OffsetUrlOpener
extends|extends
name|ByteRangeInputStream
operator|.
name|URLOpener
block|{
DECL|method|OffsetUrlOpener (final URL url)
name|OffsetUrlOpener
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
block|{
name|super
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
comment|/** Setup offset url and connect. */
annotation|@
name|Override
DECL|method|connect (final long offset, final boolean resolved)
specifier|protected
name|HttpURLConnection
name|connect
parameter_list|(
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|boolean
name|resolved
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|URL
name|offsetUrl
init|=
name|offset
operator|==
literal|0L
condition|?
name|url
else|:
operator|new
name|URL
argument_list|(
name|url
operator|+
literal|"&"
operator|+
operator|new
name|OffsetParam
argument_list|(
name|offset
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|URLRunner
argument_list|(
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
argument_list|,
name|offsetUrl
argument_list|,
name|resolved
argument_list|)
operator|.
name|run
argument_list|()
operator|.
name|conn
return|;
block|}
block|}
DECL|field|OFFSET_PARAM_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|OFFSET_PARAM_PREFIX
init|=
name|OffsetParam
operator|.
name|NAME
operator|+
literal|"="
decl_stmt|;
comment|/** Remove offset parameter, if there is any, from the url */
DECL|method|removeOffsetParam (final URL url)
specifier|static
name|URL
name|removeOffsetParam
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|String
name|query
init|=
name|url
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
specifier|final
name|String
name|lower
init|=
name|query
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lower
operator|.
name|startsWith
argument_list|(
name|OFFSET_PARAM_PREFIX
argument_list|)
operator|&&
operator|!
name|lower
operator|.
name|contains
argument_list|(
literal|"&"
operator|+
name|OFFSET_PARAM_PREFIX
argument_list|)
condition|)
block|{
return|return
name|url
return|;
block|}
comment|//rebuild query
name|StringBuilder
name|b
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|"&"
argument_list|)
init|;
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|token
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|OFFSET_PARAM_PREFIX
argument_list|)
condition|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|b
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"?"
argument_list|)
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|query
operator|=
name|b
operator|==
literal|null
condition|?
literal|""
else|:
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|String
name|urlStr
init|=
name|url
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|URL
argument_list|(
name|urlStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|urlStr
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
operator|+
name|query
argument_list|)
return|;
block|}
DECL|class|OffsetUrlInputStream
specifier|static
class|class
name|OffsetUrlInputStream
extends|extends
name|ByteRangeInputStream
block|{
DECL|method|OffsetUrlInputStream (OffsetUrlOpener o, OffsetUrlOpener r)
name|OffsetUrlInputStream
parameter_list|(
name|OffsetUrlOpener
name|o
parameter_list|,
name|OffsetUrlOpener
name|r
parameter_list|)
block|{
name|super
argument_list|(
name|o
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
comment|/** Remove offset parameter before returning the resolved url. */
annotation|@
name|Override
DECL|method|getResolvedUrl (final HttpURLConnection connection )
specifier|protected
name|URL
name|getResolvedUrl
parameter_list|(
specifier|final
name|HttpURLConnection
name|connection
parameter_list|)
throws|throws
name|MalformedURLException
block|{
return|return
name|removeOffsetParam
argument_list|(
name|connection
operator|.
name|getURL
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|listStatus (final Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|LISTSTATUS
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
init|=
name|run
argument_list|(
name|op
argument_list|,
name|f
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|rootmap
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|FileStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"es"
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|array
init|=
operator|(
name|Object
index|[]
operator|)
name|rootmap
operator|.
name|get
argument_list|(
name|FileStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
comment|//convert FileStatus
specifier|final
name|FileStatus
index|[]
name|statuses
init|=
operator|new
name|FileStatus
index|[
name|array
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|array
index|[
name|i
index|]
decl_stmt|;
name|statuses
index|[
name|i
index|]
operator|=
name|makeQualified
argument_list|(
name|JsonUtil
operator|.
name|toFileStatus
argument_list|(
name|m
argument_list|,
literal|false
argument_list|)
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken ( final String renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
specifier|final
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETDELEGATIONTOKEN
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
name|run
argument_list|(
name|op
argument_list|,
literal|null
argument_list|,
operator|new
name|RenewerParam
argument_list|(
name|renewer
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|JsonUtil
operator|.
name|toDelegationToken
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|getCurrentNNAddr
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
annotation|@
name|Override
DECL|method|getRenewToken ()
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|getRenewToken
parameter_list|()
block|{
return|return
name|delegationToken
return|;
block|}
annotation|@
name|Override
DECL|method|setDelegationToken ( final Token<T> token)
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|setDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|T
argument_list|>
name|token
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|delegationToken
operator|=
name|token
expr_stmt|;
block|}
block|}
DECL|method|renewDelegationToken (final Token<?> token )
specifier|private
specifier|synchronized
name|long
name|renewDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|RENEWDELEGATIONTOKEN
decl_stmt|;
name|TokenArgumentParam
name|dtargParam
init|=
operator|new
name|TokenArgumentParam
argument_list|(
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
name|run
argument_list|(
name|op
argument_list|,
literal|null
argument_list|,
name|dtargParam
argument_list|)
decl_stmt|;
return|return
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"long"
argument_list|)
return|;
block|}
DECL|method|cancelDelegationToken (final Token<?> token )
specifier|private
specifier|synchronized
name|void
name|cancelDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|PutOpParam
operator|.
name|Op
operator|.
name|CANCELDELEGATIONTOKEN
decl_stmt|;
name|TokenArgumentParam
name|dtargParam
init|=
operator|new
name|TokenArgumentParam
argument_list|(
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|op
argument_list|,
literal|null
argument_list|,
name|dtargParam
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (final FileStatus status, final long offset, final long length)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
specifier|final
name|FileStatus
name|status
parameter_list|,
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getFileBlockLocations
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (final Path p, final long offset, final long length)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|long
name|offset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GET_BLOCK_LOCATIONS
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
name|run
argument_list|(
name|op
argument_list|,
name|p
argument_list|,
operator|new
name|OffsetParam
argument_list|(
name|offset
argument_list|)
argument_list|,
operator|new
name|LengthParam
argument_list|(
name|length
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|DFSUtil
operator|.
name|locatedBlocks2Locations
argument_list|(
name|JsonUtil
operator|.
name|toLocatedBlocks
argument_list|(
name|m
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContentSummary (final Path p)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETCONTENTSUMMARY
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
name|run
argument_list|(
name|op
argument_list|,
name|p
argument_list|)
decl_stmt|;
return|return
name|JsonUtil
operator|.
name|toContentSummary
argument_list|(
name|m
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileChecksum (final Path p )
specifier|public
name|MD5MD5CRC32FileChecksum
name|getFileChecksum
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
init|=
name|GetOpParam
operator|.
name|Op
operator|.
name|GETFILECHECKSUM
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
name|run
argument_list|(
name|op
argument_list|,
name|p
argument_list|)
decl_stmt|;
return|return
name|JsonUtil
operator|.
name|toMD5MD5CRC32FileChecksum
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Delegation token renewer. */
DECL|class|DtRenewer
specifier|public
specifier|static
class|class
name|DtRenewer
extends|extends
name|TokenRenewer
block|{
annotation|@
name|Override
DECL|method|handleKind (Text kind)
specifier|public
name|boolean
name|handleKind
parameter_list|(
name|Text
name|kind
parameter_list|)
block|{
return|return
name|kind
operator|.
name|equals
argument_list|(
name|TOKEN_KIND
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isManaged (Token<?> token)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
DECL|method|getWebHdfs ( final Token<?> token, final Configuration conf)
specifier|private
specifier|static
name|WebHdfsFileSystem
name|getWebHdfs
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|InetSocketAddress
name|nnAddr
init|=
name|SecurityUtil
operator|.
name|getTokenServiceAddr
argument_list|(
name|token
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|DFSUtil
operator|.
name|createUri
argument_list|(
name|WebHdfsFileSystem
operator|.
name|SCHEME
argument_list|,
name|nnAddr
argument_list|)
decl_stmt|;
return|return
operator|(
name|WebHdfsFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renew (final Token<?> token, final Configuration conf )
specifier|public
name|long
name|renew
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|getWebHdfs
argument_list|(
name|token
argument_list|,
name|conf
argument_list|)
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cancel (final Token<?> token, final Configuration conf )
specifier|public
name|void
name|cancel
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getWebHdfs
argument_list|(
name|token
argument_list|,
name|conf
argument_list|)
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|WebHdfsDelegationTokenSelector
specifier|private
specifier|static
class|class
name|WebHdfsDelegationTokenSelector
extends|extends
name|AbstractDelegationTokenSelector
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
block|{
DECL|field|hdfsTokenSelector
specifier|private
specifier|static
specifier|final
name|DelegationTokenSelector
name|hdfsTokenSelector
init|=
operator|new
name|DelegationTokenSelector
argument_list|()
decl_stmt|;
DECL|method|WebHdfsDelegationTokenSelector ()
specifier|public
name|WebHdfsDelegationTokenSelector
parameter_list|()
block|{
name|super
argument_list|(
name|TOKEN_KIND
argument_list|)
expr_stmt|;
block|}
DECL|method|selectToken (URI nnUri, Collection<Token<?>> tokens, Configuration conf)
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|selectToken
parameter_list|(
name|URI
name|nnUri
parameter_list|,
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokens
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|selectToken
argument_list|(
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|nnUri
argument_list|)
argument_list|,
name|tokens
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|token
operator|=
name|hdfsTokenSelector
operator|.
name|selectToken
argument_list|(
name|nnUri
argument_list|,
name|tokens
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
block|}
block|}
end_class

end_unit

