begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FileSubclusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This class is responsible for handling all of the RPC calls to the It is  * created, started, and stopped by {@link Router}. It implements the  * {@link ClientProtocol} to mimic a  * {@link org.apache.hadoop.hdfs.server.namenode.NameNode NameNode} and proxies  * the requests to the active  * {@link org.apache.hadoop.hdfs.server.namenode.NameNode NameNode}.  */
end_comment

begin_class
DECL|class|RouterRpcServer
specifier|public
class|class
name|RouterRpcServer
extends|extends
name|AbstractService
block|{
comment|/** The RPC server that listens to requests from clients. */
DECL|field|rpcServer
specifier|private
specifier|final
name|Server
name|rpcServer
decl_stmt|;
comment|/**    * Construct a router RPC server.    *    * @param configuration HDFS Configuration.    * @param nnResolver The NN resolver instance to determine active NNs in HA.    * @param fileResolver File resolver to resolve file paths to subclusters.    * @throws IOException If the RPC server could not be created.    */
DECL|method|RouterRpcServer (Configuration configuration, Router router, ActiveNamenodeResolver nnResolver, FileSubclusterResolver fileResolver)
specifier|public
name|RouterRpcServer
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|Router
name|router
parameter_list|,
name|ActiveNamenodeResolver
name|nnResolver
parameter_list|,
name|FileSubclusterResolver
name|fileResolver
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|RouterRpcServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Allow access to the client RPC server for testing.    *    * @return The RPC server.    */
annotation|@
name|VisibleForTesting
DECL|method|getServer ()
specifier|public
name|Server
name|getServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcServer
return|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration configuration)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start client and service RPC servers.    */
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Wait until the RPC servers have shutdown.    */
DECL|method|join ()
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|this
operator|.
name|rpcServer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

