begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FileIoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DirectoryScanner
operator|.
name|ReportCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
operator|.
name|Checkable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
operator|.
name|VolumeCheckResult
import|;
end_import

begin_comment
comment|/**  * This is an interface for the underlying volume.  */
end_comment

begin_interface
DECL|interface|FsVolumeSpi
specifier|public
interface|interface
name|FsVolumeSpi
extends|extends
name|Checkable
argument_list|<
name|FsVolumeSpi
operator|.
name|VolumeCheckContext
argument_list|,
name|VolumeCheckResult
argument_list|>
block|{
comment|/**    * Obtain a reference object that had increased 1 reference count of the    * volume.    *    * It is caller's responsibility to close {@link FsVolumeReference} to decrease    * the reference count on the volume.    */
DECL|method|obtainReference ()
name|FsVolumeReference
name|obtainReference
parameter_list|()
throws|throws
name|ClosedChannelException
function_decl|;
comment|/** @return the StorageUuid of the volume */
DECL|method|getStorageID ()
name|String
name|getStorageID
parameter_list|()
function_decl|;
comment|/** @return a list of block pools. */
DECL|method|getBlockPoolList ()
name|String
index|[]
name|getBlockPoolList
parameter_list|()
function_decl|;
comment|/** @return the available storage space in bytes. */
DECL|method|getAvailable ()
name|long
name|getAvailable
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/** @return the base path to the volume */
DECL|method|getBaseURI ()
name|URI
name|getBaseURI
parameter_list|()
function_decl|;
DECL|method|getUsageStats (Configuration conf)
name|DF
name|getUsageStats
parameter_list|(
name|Configuration
name|conf
parameter_list|)
function_decl|;
comment|/** @return the {@link StorageLocation} to the volume */
DECL|method|getStorageLocation ()
name|StorageLocation
name|getStorageLocation
parameter_list|()
function_decl|;
comment|/** @return the {@link StorageType} of the volume */
DECL|method|getStorageType ()
name|StorageType
name|getStorageType
parameter_list|()
function_decl|;
comment|/** Returns true if the volume is NOT backed by persistent storage. */
DECL|method|isTransientStorage ()
name|boolean
name|isTransientStorage
parameter_list|()
function_decl|;
comment|/**    * Reserve disk space for a block (RBW or Re-replicating)    * so a writer does not run out of space before the block is full.    */
DECL|method|reserveSpaceForReplica (long bytesToReserve)
name|void
name|reserveSpaceForReplica
parameter_list|(
name|long
name|bytesToReserve
parameter_list|)
function_decl|;
comment|/**    * Release disk space previously reserved for block opened for write.    */
DECL|method|releaseReservedSpace (long bytesToRelease)
name|void
name|releaseReservedSpace
parameter_list|(
name|long
name|bytesToRelease
parameter_list|)
function_decl|;
comment|/**    * Release reserved memory for an RBW block written to transient storage    * i.e. RAM.    * bytesToRelease will be rounded down to the OS page size since locked    * memory reservation must always be a multiple of the page size.    */
DECL|method|releaseLockedMemory (long bytesToRelease)
name|void
name|releaseLockedMemory
parameter_list|(
name|long
name|bytesToRelease
parameter_list|)
function_decl|;
comment|/**    * BlockIterator will return ExtendedBlock entries from a block pool in    * this volume.  The entries will be returned in sorted order.<p/>    *    * BlockIterator objects themselves do not always have internal    * synchronization, so they can only safely be used by a single thread at a    * time.<p/>    *    * Closing the iterator does not save it.  You must call save to save it.    */
DECL|interface|BlockIterator
interface|interface
name|BlockIterator
extends|extends
name|Closeable
block|{
comment|/**      * Get the next block.<p/>      *      * Note that this block may be removed in between the time we list it,      * and the time the caller tries to use it, or it may represent a stale      * entry.  Callers should handle the case where the returned block no      * longer exists.      *      * @return               The next block, or null if there are no      *                         more blocks.  Null if there was an error      *                         determining the next block.      *      * @throws IOException   If there was an error getting the next block in      *                         this volume.  In this case, EOF will be set on      *                         the iterator.      */
DECL|method|nextBlock ()
name|ExtendedBlock
name|nextBlock
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Returns true if we got to the end of the block pool.      */
DECL|method|atEnd ()
name|boolean
name|atEnd
parameter_list|()
function_decl|;
comment|/**      * Repositions the iterator at the beginning of the block pool.      */
DECL|method|rewind ()
name|void
name|rewind
parameter_list|()
function_decl|;
comment|/**      * Save this block iterator to the underlying volume.      * Any existing saved block iterator with this name will be overwritten.      * maxStalenessMs will not be saved.      *      * @throws IOException   If there was an error when saving the block      *                         iterator.      */
DECL|method|save ()
name|void
name|save
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Set the maximum staleness of entries that we will return.<p/>      *      * A maximum staleness of 0 means we will never return stale entries; a      * larger value will allow us to reduce resource consumption in exchange      * for returning more potentially stale entries.  Even with staleness set      * to 0, consumers of this API must handle race conditions where block      * disappear before they can be processed.      */
DECL|method|setMaxStalenessMs (long maxStalenessMs)
name|void
name|setMaxStalenessMs
parameter_list|(
name|long
name|maxStalenessMs
parameter_list|)
function_decl|;
comment|/**      * Get the wall-clock time, measured in milliseconds since the Epoch,      * when this iterator was created.      */
DECL|method|getIterStartMs ()
name|long
name|getIterStartMs
parameter_list|()
function_decl|;
comment|/**      * Get the wall-clock time, measured in milliseconds since the Epoch,      * when this iterator was last saved.  Returns iterStartMs if the      * iterator was never saved.      */
DECL|method|getLastSavedMs ()
name|long
name|getLastSavedMs
parameter_list|()
function_decl|;
comment|/**      * Get the id of the block pool which this iterator traverses.      */
DECL|method|getBlockPoolId ()
name|String
name|getBlockPoolId
parameter_list|()
function_decl|;
block|}
comment|/**    * Create a new block iterator.  It will start at the beginning of the    * block set.    *    * @param bpid             The block pool id to iterate over.    * @param name             The name of the block iterator to create.    *    * @return                 The new block iterator.    */
DECL|method|newBlockIterator (String bpid, String name)
name|BlockIterator
name|newBlockIterator
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
function_decl|;
comment|/**    * Load a saved block iterator.    *    * @param bpid             The block pool id to iterate over.    * @param name             The name of the block iterator to load.    *    * @return                 The saved block iterator.    * @throws IOException     If there was an IO error loading the saved    *                           block iterator.    */
DECL|method|loadBlockIterator (String bpid, String name)
name|BlockIterator
name|loadBlockIterator
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the FSDatasetSpi which this volume is a part of.    */
DECL|method|getDataset ()
name|FsDatasetSpi
name|getDataset
parameter_list|()
function_decl|;
comment|/**    * Tracks the files and other information related to a block on the disk    * Missing file is indicated by setting the corresponding member    * to null.    *    * Because millions of these structures may be created, we try to save    * memory here.  So instead of storing full paths, we store path suffixes.    * The block file, if it exists, will have a path like this:    *<volume_base_path>/<block_path>    * So we don't need to store the volume path, since we already know what the    * volume is.    *    * The metadata file, if it exists, will have a path like this:    *<volume_base_path>/<block_path>_<genstamp>.meta    * So if we have a block file, there isn't any need to store the block path    * again.    *    * The accessor functions take care of these manipulations.    */
DECL|class|ScanInfo
specifier|public
specifier|static
class|class
name|ScanInfo
implements|implements
name|Comparable
argument_list|<
name|ScanInfo
argument_list|>
block|{
DECL|field|blockId
specifier|private
specifier|final
name|long
name|blockId
decl_stmt|;
comment|/**      * The block file path, relative to the volume's base directory.      * If there was no block file found, this may be null. If 'vol'      * is null, then this is the full path of the block file.      */
DECL|field|blockSuffix
specifier|private
specifier|final
name|String
name|blockSuffix
decl_stmt|;
comment|/**      * The suffix of the meta file path relative to the block file.      * If blockSuffix is null, then this will be the entire path relative      * to the volume base directory, or an absolute path if vol is also      * null.      */
DECL|field|metaSuffix
specifier|private
specifier|final
name|String
name|metaSuffix
decl_stmt|;
DECL|field|volume
specifier|private
specifier|final
name|FsVolumeSpi
name|volume
decl_stmt|;
comment|/**      * Get the file's length in async block scan      */
DECL|field|blockFileLength
specifier|private
specifier|final
name|long
name|blockFileLength
decl_stmt|;
DECL|field|CONDENSED_PATH_REGEX
specifier|private
specifier|final
specifier|static
name|Pattern
name|CONDENSED_PATH_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?<!^)(\\\\|/){2,}"
argument_list|)
decl_stmt|;
DECL|field|QUOTED_FILE_SEPARATOR
specifier|private
specifier|final
specifier|static
name|String
name|QUOTED_FILE_SEPARATOR
init|=
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|File
operator|.
name|separator
argument_list|)
decl_stmt|;
comment|/**      * Get the most condensed version of the path.      *      * For example, the condensed version of /foo//bar is /foo/bar      * Unlike {@link File#getCanonicalPath()}, this will never perform I/O      * on the filesystem.      *      * @param path the path to condense      * @return the condensed path      */
DECL|method|getCondensedPath (String path)
specifier|private
specifier|static
name|String
name|getCondensedPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|CONDENSED_PATH_REGEX
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|QUOTED_FILE_SEPARATOR
argument_list|)
return|;
block|}
comment|/**      * Get a path suffix.      *      * @param f            The file to get the suffix for.      * @param prefix       The prefix we're stripping off.      *      * @return             A suffix such that prefix + suffix = path to f      */
DECL|method|getSuffix (File f, String prefix)
specifier|private
specifier|static
name|String
name|getSuffix
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|String
name|fullPath
init|=
name|getCondensedPath
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fullPath
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|fullPath
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|prefix
operator|+
literal|" is not a prefix of "
operator|+
name|fullPath
argument_list|)
throw|;
block|}
comment|/**      * Create a ScanInfo object for a block. This constructor will examine      * the block data and meta-data files.      *      * @param blockId the block ID      * @param blockFile the path to the block data file      * @param metaFile the path to the block meta-data file      * @param vol the volume that contains the block      */
DECL|method|ScanInfo (long blockId, File blockFile, File metaFile, FsVolumeSpi vol)
specifier|public
name|ScanInfo
parameter_list|(
name|long
name|blockId
parameter_list|,
name|File
name|blockFile
parameter_list|,
name|File
name|metaFile
parameter_list|,
name|FsVolumeSpi
name|vol
parameter_list|)
block|{
name|this
operator|.
name|blockId
operator|=
name|blockId
expr_stmt|;
name|String
name|condensedVolPath
init|=
operator|(
name|vol
operator|==
literal|null
operator|||
name|vol
operator|.
name|getBaseURI
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|getCondensedPath
argument_list|(
operator|new
name|File
argument_list|(
name|vol
operator|.
name|getBaseURI
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|blockSuffix
operator|=
name|blockFile
operator|==
literal|null
condition|?
literal|null
else|:
name|getSuffix
argument_list|(
name|blockFile
argument_list|,
name|condensedVolPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockFileLength
operator|=
operator|(
name|blockFile
operator|!=
literal|null
operator|)
condition|?
name|blockFile
operator|.
name|length
argument_list|()
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|metaFile
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|metaSuffix
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|blockFile
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|metaSuffix
operator|=
name|getSuffix
argument_list|(
name|metaFile
argument_list|,
name|condensedVolPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|metaSuffix
operator|=
name|getSuffix
argument_list|(
name|metaFile
argument_list|,
name|condensedVolPath
operator|+
name|blockSuffix
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|volume
operator|=
name|vol
expr_stmt|;
block|}
comment|/**      * Returns the block data file.      *      * @return the block data file      */
DECL|method|getBlockFile ()
specifier|public
name|File
name|getBlockFile
parameter_list|()
block|{
return|return
operator|(
name|blockSuffix
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|volume
operator|.
name|getBaseURI
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|blockSuffix
argument_list|)
return|;
block|}
comment|/**      * Return the length of the data block. The length returned is the length      * cached when this object was created.      *      * @return the length of the data block      */
DECL|method|getBlockFileLength ()
specifier|public
name|long
name|getBlockFileLength
parameter_list|()
block|{
return|return
name|blockFileLength
return|;
block|}
comment|/**      * Returns the block meta data file or null if there isn't one.      *      * @return the block meta data file      */
DECL|method|getMetaFile ()
specifier|public
name|File
name|getMetaFile
parameter_list|()
block|{
if|if
condition|(
name|metaSuffix
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|blockSuffix
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|volume
operator|.
name|getBaseURI
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|metaSuffix
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|volume
operator|.
name|getBaseURI
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|blockSuffix
operator|+
name|metaSuffix
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the block ID.      *      * @return the block ID      */
DECL|method|getBlockId ()
specifier|public
name|long
name|getBlockId
parameter_list|()
block|{
return|return
name|blockId
return|;
block|}
comment|/**      * Returns the volume that contains the block that this object describes.      *      * @return the volume      */
DECL|method|getVolume ()
specifier|public
name|FsVolumeSpi
name|getVolume
parameter_list|()
block|{
return|return
name|volume
return|;
block|}
annotation|@
name|Override
comment|// Comparable
DECL|method|compareTo (ScanInfo b)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ScanInfo
name|b
parameter_list|)
block|{
if|if
condition|(
name|blockId
operator|<
name|b
operator|.
name|blockId
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|blockId
operator|==
name|b
operator|.
name|blockId
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
annotation|@
name|Override
comment|// Object
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ScanInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|blockId
operator|==
operator|(
operator|(
name|ScanInfo
operator|)
name|o
operator|)
operator|.
name|blockId
return|;
block|}
annotation|@
name|Override
comment|// Object
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|blockId
operator|^
operator|(
name|blockId
operator|>>>
literal|32
operator|)
argument_list|)
return|;
block|}
DECL|method|getGenStamp ()
specifier|public
name|long
name|getGenStamp
parameter_list|()
block|{
return|return
name|metaSuffix
operator|!=
literal|null
condition|?
name|Block
operator|.
name|getGenerationStamp
argument_list|(
name|getMetaFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|HdfsConstants
operator|.
name|GRANDFATHER_GENERATION_STAMP
return|;
block|}
block|}
comment|/**    * Load last partial chunk checksum from checksum file.    * Need to be called with FsDataset lock acquired.    * @param blockFile    * @param metaFile    * @return the last partial checksum    * @throws IOException    */
DECL|method|loadLastPartialChunkChecksum (File blockFile, File metaFile)
name|byte
index|[]
name|loadLastPartialChunkChecksum
parameter_list|(
name|File
name|blockFile
parameter_list|,
name|File
name|metaFile
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Compile a list of {@link ScanInfo} for the blocks in    * the block pool with id {@code bpid}.    *    * @param bpid block pool id to scan    * @param report the list onto which blocks reports are placed    * @param reportCompiler    * @throws IOException    */
DECL|method|compileReport (String bpid, LinkedList<ScanInfo> report, ReportCompiler reportCompiler)
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|compileReport
parameter_list|(
name|String
name|bpid
parameter_list|,
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|report
parameter_list|,
name|ReportCompiler
name|reportCompiler
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
function_decl|;
comment|/**    * Context for the {@link #check} call.    */
DECL|class|VolumeCheckContext
class|class
name|VolumeCheckContext
block|{   }
DECL|method|getFileIoProvider ()
name|FileIoProvider
name|getFileIoProvider
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

