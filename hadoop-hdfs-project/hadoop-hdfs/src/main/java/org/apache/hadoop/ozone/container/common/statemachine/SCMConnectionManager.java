begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.statemachine
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerDatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerDatanodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * SCMConnectionManager - Acts as a class that manages the membership  * information of the SCMs that we are working with.  */
end_comment

begin_class
DECL|class|SCMConnectionManager
specifier|public
class|class
name|SCMConnectionManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMConnectionManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mapLock
specifier|private
specifier|final
name|ReadWriteLock
name|mapLock
decl_stmt|;
DECL|field|scmMachines
specifier|private
specifier|final
name|Map
argument_list|<
name|InetSocketAddress
argument_list|,
name|EndpointStateMachine
argument_list|>
name|scmMachines
decl_stmt|;
DECL|field|rpcTimeout
specifier|private
specifier|final
name|int
name|rpcTimeout
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|method|SCMConnectionManager (Configuration conf)
specifier|public
name|SCMConnectionManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|mapLock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
name|Long
name|timeOut
init|=
name|OzoneClientUtils
operator|.
name|getScmRpcTimeOutInMilliseconds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|rpcTimeout
operator|=
name|timeOut
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|scmMachines
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Returns Config.    *    * @return ozoneConfig.    */
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Get RpcTimeout.    *    * @return - Return RPC timeout.    */
DECL|method|getRpcTimeout ()
specifier|public
name|long
name|getRpcTimeout
parameter_list|()
block|{
return|return
name|rpcTimeout
return|;
block|}
comment|/**    * Takes a read lock.    */
DECL|method|readLock ()
specifier|public
name|void
name|readLock
parameter_list|()
block|{
name|this
operator|.
name|mapLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Releases the read lock.    */
DECL|method|readUnlock ()
specifier|public
name|void
name|readUnlock
parameter_list|()
block|{
name|this
operator|.
name|mapLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Takes the write lock.    */
DECL|method|writeLock ()
specifier|public
name|void
name|writeLock
parameter_list|()
block|{
name|this
operator|.
name|mapLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Releases the write lock.    */
DECL|method|writeUnlock ()
specifier|public
name|void
name|writeUnlock
parameter_list|()
block|{
name|this
operator|.
name|mapLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**    * adds a new SCM machine to the target set.    *    * @param address - Address of the SCM machine to send heatbeat to.    * @throws IOException    */
DECL|method|addSCMServer (InetSocketAddress address)
specifier|public
name|void
name|addSCMServer
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|scmMachines
operator|.
name|containsKey
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to add an existing SCM Machine to Machines group. "
operator|+
literal|"Ignoring the request."
argument_list|)
expr_stmt|;
return|return;
block|}
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|StorageContainerDatanodeProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|long
name|version
init|=
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|StorageContainerDatanodeProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|StorageContainerDatanodeProtocolPB
name|rpcProxy
init|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|StorageContainerDatanodeProtocolPB
operator|.
name|class
argument_list|,
name|version
argument_list|,
name|address
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|rpcTimeout
argument_list|)
decl_stmt|;
name|StorageContainerDatanodeProtocolClientSideTranslatorPB
name|rpcClient
init|=
operator|new
name|StorageContainerDatanodeProtocolClientSideTranslatorPB
argument_list|(
name|rpcProxy
argument_list|)
decl_stmt|;
name|EndpointStateMachine
name|endPoint
init|=
operator|new
name|EndpointStateMachine
argument_list|(
name|address
argument_list|,
name|rpcClient
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|scmMachines
operator|.
name|put
argument_list|(
name|address
argument_list|,
name|endPoint
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Removes a  SCM machine for the target set.    *    * @param address - Address of the SCM machine to send heatbeat to.    * @throws IOException    */
DECL|method|removeSCMServer (InetSocketAddress address)
specifier|public
name|void
name|removeSCMServer
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|scmMachines
operator|.
name|containsKey
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Trying to remove a non-existent SCM machine. "
operator|+
literal|"Ignoring the request."
argument_list|)
expr_stmt|;
return|return;
block|}
name|EndpointStateMachine
name|endPoint
init|=
name|scmMachines
operator|.
name|get
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|endPoint
operator|.
name|close
argument_list|()
expr_stmt|;
name|scmMachines
operator|.
name|remove
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns all known RPCEndpoints.    *    * @return - List of RPC Endpoints.    */
DECL|method|getValues ()
specifier|public
name|Collection
argument_list|<
name|EndpointStateMachine
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|scmMachines
operator|.
name|values
argument_list|()
return|;
block|}
block|}
end_class

end_unit

