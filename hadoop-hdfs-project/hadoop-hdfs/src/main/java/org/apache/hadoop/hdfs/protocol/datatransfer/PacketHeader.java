begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|PacketHeaderProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ByteBufferOutputStream
import|;
end_import

begin_comment
comment|/**  * Header data for each packet that goes through the read/write pipelines.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|PacketHeader
specifier|public
class|class
name|PacketHeader
block|{
comment|/** Header size for a packet */
DECL|field|PROTO_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|PROTO_SIZE
init|=
name|PacketHeaderProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOffsetInBlock
argument_list|(
literal|0
argument_list|)
operator|.
name|setSeqno
argument_list|(
literal|0
argument_list|)
operator|.
name|setLastPacketInBlock
argument_list|(
literal|false
argument_list|)
operator|.
name|setDataLen
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getSerializedSize
argument_list|()
decl_stmt|;
DECL|field|PKT_HEADER_LEN
specifier|public
specifier|static
specifier|final
name|int
name|PKT_HEADER_LEN
init|=
literal|6
operator|+
name|PROTO_SIZE
decl_stmt|;
DECL|field|packetLen
specifier|private
name|int
name|packetLen
decl_stmt|;
DECL|field|proto
specifier|private
name|PacketHeaderProto
name|proto
decl_stmt|;
DECL|method|PacketHeader ()
specifier|public
name|PacketHeader
parameter_list|()
block|{   }
DECL|method|PacketHeader (int packetLen, long offsetInBlock, long seqno, boolean lastPacketInBlock, int dataLen)
specifier|public
name|PacketHeader
parameter_list|(
name|int
name|packetLen
parameter_list|,
name|long
name|offsetInBlock
parameter_list|,
name|long
name|seqno
parameter_list|,
name|boolean
name|lastPacketInBlock
parameter_list|,
name|int
name|dataLen
parameter_list|)
block|{
name|this
operator|.
name|packetLen
operator|=
name|packetLen
expr_stmt|;
name|proto
operator|=
name|PacketHeaderProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOffsetInBlock
argument_list|(
name|offsetInBlock
argument_list|)
operator|.
name|setSeqno
argument_list|(
name|seqno
argument_list|)
operator|.
name|setLastPacketInBlock
argument_list|(
name|lastPacketInBlock
argument_list|)
operator|.
name|setDataLen
argument_list|(
name|dataLen
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|getDataLen ()
specifier|public
name|int
name|getDataLen
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getDataLen
argument_list|()
return|;
block|}
DECL|method|isLastPacketInBlock ()
specifier|public
name|boolean
name|isLastPacketInBlock
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getLastPacketInBlock
argument_list|()
return|;
block|}
DECL|method|getSeqno ()
specifier|public
name|long
name|getSeqno
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getSeqno
argument_list|()
return|;
block|}
DECL|method|getOffsetInBlock ()
specifier|public
name|long
name|getOffsetInBlock
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getOffsetInBlock
argument_list|()
return|;
block|}
DECL|method|getPacketLen ()
specifier|public
name|int
name|getPacketLen
parameter_list|()
block|{
return|return
name|packetLen
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PacketHeader with packetLen="
operator|+
name|packetLen
operator|+
literal|"Header data: "
operator|+
name|proto
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|readFields (ByteBuffer buf)
specifier|public
name|void
name|readFields
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|packetLen
operator|=
name|buf
operator|.
name|getInt
argument_list|()
expr_stmt|;
name|short
name|protoLen
init|=
name|buf
operator|.
name|getShort
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|protoLen
index|]
decl_stmt|;
name|buf
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|proto
operator|=
name|PacketHeaderProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInputStream in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|packetLen
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|short
name|protoLen
init|=
name|in
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|protoLen
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|proto
operator|=
name|PacketHeaderProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write the header into the buffer.    * This requires that PKT_HEADER_LEN bytes are available.    */
DECL|method|putInBuffer (final ByteBuffer buf)
specifier|public
name|void
name|putInBuffer
parameter_list|(
specifier|final
name|ByteBuffer
name|buf
parameter_list|)
block|{
assert|assert
name|proto
operator|.
name|getSerializedSize
argument_list|()
operator|==
name|PROTO_SIZE
operator|:
literal|"Expected "
operator|+
operator|(
name|PROTO_SIZE
operator|)
operator|+
literal|" got: "
operator|+
name|proto
operator|.
name|getSerializedSize
argument_list|()
assert|;
try|try
block|{
name|buf
operator|.
name|putInt
argument_list|(
name|packetLen
argument_list|)
expr_stmt|;
name|buf
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|proto
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
expr_stmt|;
name|proto
operator|.
name|writeTo
argument_list|(
operator|new
name|ByteBufferOutputStream
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|write (DataOutputStream out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|proto
operator|.
name|getSerializedSize
argument_list|()
operator|==
name|PROTO_SIZE
operator|:
literal|"Expected "
operator|+
operator|(
name|PROTO_SIZE
operator|)
operator|+
literal|" got: "
operator|+
name|proto
operator|.
name|getSerializedSize
argument_list|()
assert|;
name|out
operator|.
name|writeInt
argument_list|(
name|packetLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|proto
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
expr_stmt|;
name|proto
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**    * Perform a sanity check on the packet, returning true if it is sane.    * @param lastSeqNo the previous sequence number received - we expect the current    * sequence number to be larger by 1.    */
DECL|method|sanityCheck (long lastSeqNo)
specifier|public
name|boolean
name|sanityCheck
parameter_list|(
name|long
name|lastSeqNo
parameter_list|)
block|{
comment|// We should only have a non-positive data length for the last packet
if|if
condition|(
name|proto
operator|.
name|getDataLen
argument_list|()
operator|<=
literal|0
operator|&&
operator|!
name|proto
operator|.
name|getLastPacketInBlock
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// The last packet should not contain data
if|if
condition|(
name|proto
operator|.
name|getLastPacketInBlock
argument_list|()
operator|&&
name|proto
operator|.
name|getDataLen
argument_list|()
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
comment|// Seqnos should always increase by 1 with each packet received
if|if
condition|(
name|proto
operator|.
name|getSeqno
argument_list|()
operator|!=
name|lastSeqNo
operator|+
literal|1
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|PacketHeader
operator|)
condition|)
return|return
literal|false
return|;
name|PacketHeader
name|other
init|=
operator|(
name|PacketHeader
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|proto
operator|.
name|equals
argument_list|(
name|other
operator|.
name|proto
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|proto
operator|.
name|getSeqno
argument_list|()
return|;
block|}
block|}
end_class

end_unit

