begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_comment
comment|/**  * Class that represents a file on disk which stores a single<code>long</code>  * value, but does not make any effort to make it truly durable. This is in  * contrast to {@link PersistentLongFile} which fsync()s the value on every  * change.  *   * This should be used for values which are updated frequently (such that  * performance is important) and not required to be up-to-date for correctness.  *   * This class also differs in that it stores the value as binary data instead  * of a textual string.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BestEffortLongFile
specifier|public
class|class
name|BestEffortLongFile
implements|implements
name|Closeable
block|{
DECL|field|file
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
DECL|field|defaultVal
specifier|private
specifier|final
name|long
name|defaultVal
decl_stmt|;
DECL|field|value
specifier|private
name|long
name|value
decl_stmt|;
DECL|field|ch
specifier|private
name|FileChannel
name|ch
init|=
literal|null
decl_stmt|;
DECL|field|buf
specifier|private
specifier|final
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|Long
operator|.
name|SIZE
operator|/
literal|8
argument_list|)
decl_stmt|;
DECL|method|BestEffortLongFile (File file, long defaultVal)
specifier|public
name|BestEffortLongFile
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|defaultVal
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|defaultVal
operator|=
name|defaultVal
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|long
name|get
parameter_list|()
throws|throws
name|IOException
block|{
name|lazyOpen
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
DECL|method|set (long newVal)
specifier|public
name|void
name|set
parameter_list|(
name|long
name|newVal
parameter_list|)
throws|throws
name|IOException
block|{
name|lazyOpen
argument_list|()
expr_stmt|;
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|buf
operator|.
name|putLong
argument_list|(
name|newVal
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|writeFully
argument_list|(
name|ch
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|value
operator|=
name|newVal
expr_stmt|;
block|}
DECL|method|lazyOpen ()
specifier|private
name|void
name|lazyOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// Load current value.
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
try|try
block|{
name|data
operator|=
name|Files
operator|.
name|toByteArray
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// Expected - this will use default value.
block|}
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|length
operator|!=
name|Longs
operator|.
name|BYTES
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File "
operator|+
name|file
operator|+
literal|" had invalid length: "
operator|+
name|data
operator|.
name|length
argument_list|)
throw|;
block|}
name|value
operator|=
name|Longs
operator|.
name|fromByteArray
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|defaultVal
expr_stmt|;
block|}
comment|// Now open file for future writes.
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
try|try
block|{
name|ch
operator|=
name|raf
operator|.
name|getChannel
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ch
operator|==
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|raf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
block|{
name|ch
operator|.
name|close
argument_list|()
expr_stmt|;
name|ch
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

