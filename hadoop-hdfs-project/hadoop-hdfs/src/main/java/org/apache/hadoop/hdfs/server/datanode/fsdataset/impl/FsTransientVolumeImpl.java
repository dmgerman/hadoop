begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
import|;
end_import

begin_comment
comment|/**  * Volume for storing replicas in memory. These can be deleted at any time  * to make space for new replicas and there is no persistence guarantee.  *  * The backing store for these replicas is expected to be RAM_DISK.  * The backing store may be disk when testing.  *  * It uses the {@link FsDatasetImpl} object for synchronization.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|class|FsTransientVolumeImpl
specifier|public
class|class
name|FsTransientVolumeImpl
extends|extends
name|FsVolumeImpl
block|{
DECL|method|FsTransientVolumeImpl (FsDatasetImpl dataset, String storageID, File currentDir, Configuration conf, StorageType storageType)
name|FsTransientVolumeImpl
parameter_list|(
name|FsDatasetImpl
name|dataset
parameter_list|,
name|String
name|storageID
parameter_list|,
name|File
name|currentDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dataset
argument_list|,
name|storageID
argument_list|,
name|currentDir
argument_list|,
name|conf
argument_list|,
name|storageType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeCacheExecutor (File parent)
specifier|protected
name|ThreadPoolExecutor
name|initializeCacheExecutor
parameter_list|(
name|File
name|parent
parameter_list|)
block|{
comment|// Can't 'cache' replicas already in RAM.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isTransientStorage ()
specifier|public
name|boolean
name|isTransientStorage
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

