begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.transport.server.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|conf
operator|.
name|RaftProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftClientReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftPeerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|storage
operator|.
name|RaftStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ShadedProtoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|proto
operator|.
name|RaftProtos
operator|.
name|SMLogEntryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|BaseStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|SimpleStateMachineStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|StateMachineStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|TransactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/** A {@link org.apache.ratis.statemachine.StateMachine} for containers.  */
end_comment

begin_class
DECL|class|ContainerStateMachine
specifier|public
class|class
name|ContainerStateMachine
extends|extends
name|BaseStateMachine
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerStateMachine
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|storage
specifier|private
specifier|final
name|SimpleStateMachineStorage
name|storage
init|=
operator|new
name|SimpleStateMachineStorage
argument_list|()
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|final
name|ContainerDispatcher
name|dispatcher
decl_stmt|;
DECL|method|ContainerStateMachine (ContainerDispatcher dispatcher)
name|ContainerStateMachine
parameter_list|(
name|ContainerDispatcher
name|dispatcher
parameter_list|)
block|{
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStateMachineStorage ()
specifier|public
name|StateMachineStorage
name|getStateMachineStorage
parameter_list|()
block|{
return|return
name|storage
return|;
block|}
annotation|@
name|Override
DECL|method|initialize ( RaftPeerId id, RaftProperties properties, RaftStorage raftStorage)
specifier|public
name|void
name|initialize
parameter_list|(
name|RaftPeerId
name|id
parameter_list|,
name|RaftProperties
name|properties
parameter_list|,
name|RaftStorage
name|raftStorage
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|id
argument_list|,
name|properties
argument_list|,
name|raftStorage
argument_list|)
expr_stmt|;
name|storage
operator|.
name|init
argument_list|(
name|raftStorage
argument_list|)
expr_stmt|;
comment|//  TODO handle snapshots
comment|// TODO: Add a flag that tells you that initialize has been called.
comment|// Check with Ratis if this feature is done in Ratis.
block|}
annotation|@
name|Override
DECL|method|query (RaftClientRequest request)
specifier|public
name|CompletableFuture
argument_list|<
name|RaftClientReply
argument_list|>
name|query
parameter_list|(
name|RaftClientRequest
name|request
parameter_list|)
block|{
return|return
name|dispatch
argument_list|(
name|ShadedProtoUtil
operator|.
name|asByteString
argument_list|(
name|request
operator|.
name|getMessage
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|,
name|response
lambda|->
operator|new
name|RaftClientReply
argument_list|(
name|request
argument_list|,
parameter_list|()
lambda|->
name|ShadedProtoUtil
operator|.
name|asShadedByteString
argument_list|(
name|response
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|applyTransaction (TransactionContext trx)
specifier|public
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|applyTransaction
parameter_list|(
name|TransactionContext
name|trx
parameter_list|)
block|{
specifier|final
name|SMLogEntryProto
name|logEntry
init|=
name|trx
operator|.
name|getSMLogEntry
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|dispatch
argument_list|(
name|ShadedProtoUtil
operator|.
name|asByteString
argument_list|(
name|logEntry
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|,
name|response
lambda|->
parameter_list|()
lambda|->
name|ShadedProtoUtil
operator|.
name|asShadedByteString
argument_list|(
name|response
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|dispatch ( ByteString requestBytes, Function<ContainerCommandResponseProto, T> f)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|dispatch
parameter_list|(
name|ByteString
name|requestBytes
parameter_list|,
name|Function
argument_list|<
name|ContainerCommandResponseProto
argument_list|,
name|T
argument_list|>
name|f
parameter_list|)
block|{
specifier|final
name|ContainerCommandResponseProto
name|response
decl_stmt|;
try|try
block|{
specifier|final
name|ContainerCommandRequestProto
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|parseFrom
argument_list|(
name|requestBytes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"dispatch {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|response
operator|=
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"response {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|completeExceptionally
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|f
operator|.
name|apply
argument_list|(
name|response
argument_list|)
argument_list|)
return|;
block|}
DECL|method|completeExceptionally (Exception e)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|completeExceptionally
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|CompletableFuture
argument_list|<
name|T
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|future
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
block|}
end_class

end_unit

