begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|BlockUCState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|BlockUCState
operator|.
name|COMPLETE
import|;
end_import

begin_comment
comment|/**  * Represents the under construction feature of a Block.  * This is usually the last block of a file opened for write or append.  */
end_comment

begin_class
DECL|class|BlockUnderConstructionFeature
specifier|public
class|class
name|BlockUnderConstructionFeature
block|{
DECL|field|blockUCState
specifier|private
name|BlockUCState
name|blockUCState
decl_stmt|;
comment|/**    * Block replicas as assigned when the block was allocated.    */
DECL|field|replicas
specifier|private
name|ReplicaUnderConstruction
index|[]
name|replicas
decl_stmt|;
comment|/**    * Index of the primary data node doing the recovery. Useful for log    * messages.    */
DECL|field|primaryNodeIndex
specifier|private
name|int
name|primaryNodeIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * The new generation stamp, which this block will have    * after the recovery succeeds. Also used as a recovery id to identify    * the right recovery if any of the abandoned recoveries re-appear.    */
DECL|field|blockRecoveryId
specifier|private
name|long
name|blockRecoveryId
init|=
literal|0
decl_stmt|;
comment|/**    * The block source to use in the event of copy-on-write truncate.    */
DECL|field|truncateBlock
specifier|private
name|Block
name|truncateBlock
decl_stmt|;
DECL|method|BlockUnderConstructionFeature (Block blk, BlockUCState state, DatanodeStorageInfo[] targets, boolean isStriped)
specifier|public
name|BlockUnderConstructionFeature
parameter_list|(
name|Block
name|blk
parameter_list|,
name|BlockUCState
name|state
parameter_list|,
name|DatanodeStorageInfo
index|[]
name|targets
parameter_list|,
name|boolean
name|isStriped
parameter_list|)
block|{
assert|assert
name|getBlockUCState
argument_list|()
operator|!=
name|COMPLETE
operator|:
literal|"BlockUnderConstructionFeature cannot be in COMPLETE state"
assert|;
name|this
operator|.
name|blockUCState
operator|=
name|state
expr_stmt|;
name|setExpectedLocations
argument_list|(
name|blk
argument_list|,
name|targets
argument_list|,
name|isStriped
argument_list|)
expr_stmt|;
block|}
comment|/** Set expected locations */
DECL|method|setExpectedLocations (Block block, DatanodeStorageInfo[] targets, boolean isStriped)
specifier|public
name|void
name|setExpectedLocations
parameter_list|(
name|Block
name|block
parameter_list|,
name|DatanodeStorageInfo
index|[]
name|targets
parameter_list|,
name|boolean
name|isStriped
parameter_list|)
block|{
name|int
name|numLocations
init|=
name|targets
operator|==
literal|null
condition|?
literal|0
else|:
name|targets
operator|.
name|length
decl_stmt|;
name|this
operator|.
name|replicas
operator|=
operator|new
name|ReplicaUnderConstruction
index|[
name|numLocations
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLocations
condition|;
name|i
operator|++
control|)
block|{
comment|// when creating a new striped block we simply sequentially assign block
comment|// index to each storage
name|Block
name|replicaBlock
init|=
name|isStriped
condition|?
operator|new
name|Block
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
else|:
name|block
decl_stmt|;
name|replicas
index|[
name|i
index|]
operator|=
operator|new
name|ReplicaUnderConstruction
argument_list|(
name|replicaBlock
argument_list|,
name|targets
index|[
name|i
index|]
argument_list|,
name|ReplicaState
operator|.
name|RBW
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create array of expected replica locations    * (as has been assigned by chooseTargets()).    */
DECL|method|getExpectedStorageLocations ()
specifier|public
name|DatanodeStorageInfo
index|[]
name|getExpectedStorageLocations
parameter_list|()
block|{
name|int
name|numLocations
init|=
name|getNumExpectedLocations
argument_list|()
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|storages
init|=
operator|new
name|DatanodeStorageInfo
index|[
name|numLocations
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLocations
condition|;
name|i
operator|++
control|)
block|{
name|storages
index|[
name|i
index|]
operator|=
name|replicas
index|[
name|i
index|]
operator|.
name|getExpectedStorageLocation
argument_list|()
expr_stmt|;
block|}
return|return
name|storages
return|;
block|}
comment|/**    * @return the index array indicating the block index in each storage. Used    * only by striped blocks.    */
DECL|method|getBlockIndices ()
specifier|public
name|int
index|[]
name|getBlockIndices
parameter_list|()
block|{
name|int
name|numLocations
init|=
name|getNumExpectedLocations
argument_list|()
decl_stmt|;
name|int
index|[]
name|indices
init|=
operator|new
name|int
index|[
name|numLocations
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLocations
condition|;
name|i
operator|++
control|)
block|{
name|indices
index|[
name|i
index|]
operator|=
name|BlockIdManager
operator|.
name|getBlockIndex
argument_list|(
name|replicas
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|indices
return|;
block|}
DECL|method|getNumExpectedLocations ()
specifier|public
name|int
name|getNumExpectedLocations
parameter_list|()
block|{
return|return
name|replicas
operator|==
literal|null
condition|?
literal|0
else|:
name|replicas
operator|.
name|length
return|;
block|}
comment|/**    * Return the state of the block under construction.    * @see BlockUCState    */
DECL|method|getBlockUCState ()
specifier|public
name|BlockUCState
name|getBlockUCState
parameter_list|()
block|{
return|return
name|blockUCState
return|;
block|}
DECL|method|setBlockUCState (BlockUCState s)
name|void
name|setBlockUCState
parameter_list|(
name|BlockUCState
name|s
parameter_list|)
block|{
name|blockUCState
operator|=
name|s
expr_stmt|;
block|}
DECL|method|getBlockRecoveryId ()
specifier|public
name|long
name|getBlockRecoveryId
parameter_list|()
block|{
return|return
name|blockRecoveryId
return|;
block|}
comment|/** Get recover block */
DECL|method|getTruncateBlock ()
specifier|public
name|Block
name|getTruncateBlock
parameter_list|()
block|{
return|return
name|truncateBlock
return|;
block|}
DECL|method|setTruncateBlock (Block recoveryBlock)
specifier|public
name|void
name|setTruncateBlock
parameter_list|(
name|Block
name|recoveryBlock
parameter_list|)
block|{
name|this
operator|.
name|truncateBlock
operator|=
name|recoveryBlock
expr_stmt|;
block|}
comment|/**    * Set {@link #blockUCState} to {@link BlockUCState#COMMITTED}.    */
DECL|method|commit ()
name|void
name|commit
parameter_list|()
block|{
name|blockUCState
operator|=
name|BlockUCState
operator|.
name|COMMITTED
expr_stmt|;
block|}
DECL|method|removeStaleReplicas (BlockInfo block)
name|void
name|removeStaleReplicas
parameter_list|(
name|BlockInfo
name|block
parameter_list|)
block|{
specifier|final
name|long
name|genStamp
init|=
name|block
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicas
operator|!=
literal|null
condition|)
block|{
comment|// Remove replicas with wrong gen stamp. The replica list is unchanged.
for|for
control|(
name|ReplicaUnderConstruction
name|r
range|:
name|replicas
control|)
block|{
if|if
condition|(
name|genStamp
operator|!=
name|r
operator|.
name|getGenerationStamp
argument_list|()
condition|)
block|{
name|r
operator|.
name|getExpectedStorageLocation
argument_list|()
operator|.
name|removeBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|blockStateChangeLog
operator|.
name|debug
argument_list|(
literal|"BLOCK* Removing stale replica "
operator|+
literal|"from location: {}"
argument_list|,
name|r
operator|.
name|getExpectedStorageLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Initialize lease recovery for this block.    * Find the first alive data-node starting from the previous primary and    * make it primary.    */
DECL|method|initializeBlockRecovery (BlockInfo blockInfo, long recoveryId)
specifier|public
name|void
name|initializeBlockRecovery
parameter_list|(
name|BlockInfo
name|blockInfo
parameter_list|,
name|long
name|recoveryId
parameter_list|)
block|{
name|setBlockUCState
argument_list|(
name|BlockUCState
operator|.
name|UNDER_RECOVERY
argument_list|)
expr_stmt|;
name|blockRecoveryId
operator|=
name|recoveryId
expr_stmt|;
if|if
condition|(
name|replicas
operator|==
literal|null
operator|||
name|replicas
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|NameNode
operator|.
name|blockStateChangeLog
operator|.
name|warn
argument_list|(
literal|"BLOCK*"
operator|+
literal|" BlockUnderConstructionFeature.initLeaseRecovery:"
operator|+
literal|" No blocks found, lease removed."
argument_list|)
expr_stmt|;
comment|// sets primary node index and return.
name|primaryNodeIndex
operator|=
operator|-
literal|1
expr_stmt|;
return|return;
block|}
name|boolean
name|allLiveReplicasTriedAsPrimary
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ReplicaUnderConstruction
name|replica
range|:
name|replicas
control|)
block|{
comment|// Check if all replicas have been tried or not.
if|if
condition|(
name|replica
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|allLiveReplicasTriedAsPrimary
operator|=
operator|(
name|allLiveReplicasTriedAsPrimary
operator|&&
name|replica
operator|.
name|getChosenAsPrimary
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allLiveReplicasTriedAsPrimary
condition|)
block|{
comment|// Just set all the replicas to be chosen whether they are alive or not.
for|for
control|(
name|ReplicaUnderConstruction
name|replica
range|:
name|replicas
control|)
block|{
name|replica
operator|.
name|setChosenAsPrimary
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|mostRecentLastUpdate
init|=
literal|0
decl_stmt|;
name|ReplicaUnderConstruction
name|primary
init|=
literal|null
decl_stmt|;
name|primaryNodeIndex
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replicas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Skip alive replicas which have been chosen for recovery.
if|if
condition|(
operator|!
operator|(
name|replicas
index|[
name|i
index|]
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|replicas
index|[
name|i
index|]
operator|.
name|getChosenAsPrimary
argument_list|()
operator|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|ReplicaUnderConstruction
name|ruc
init|=
name|replicas
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|long
name|lastUpdate
init|=
name|ruc
operator|.
name|getExpectedStorageLocation
argument_list|()
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|.
name|getLastUpdateMonotonic
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastUpdate
operator|>
name|mostRecentLastUpdate
condition|)
block|{
name|primaryNodeIndex
operator|=
name|i
expr_stmt|;
name|primary
operator|=
name|ruc
expr_stmt|;
name|mostRecentLastUpdate
operator|=
name|lastUpdate
expr_stmt|;
block|}
block|}
if|if
condition|(
name|primary
operator|!=
literal|null
condition|)
block|{
name|primary
operator|.
name|getExpectedStorageLocation
argument_list|()
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|.
name|addBlockToBeRecovered
argument_list|(
name|blockInfo
argument_list|)
expr_stmt|;
name|primary
operator|.
name|setChosenAsPrimary
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|blockStateChangeLog
operator|.
name|info
argument_list|(
literal|"BLOCK* {} recovery started, primary={}"
argument_list|,
name|this
argument_list|,
name|primary
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Add the reported replica if it is not already in the replica list. */
DECL|method|addReplicaIfNotPresent (DatanodeStorageInfo storage, Block reportedBlock, ReplicaState rState)
name|void
name|addReplicaIfNotPresent
parameter_list|(
name|DatanodeStorageInfo
name|storage
parameter_list|,
name|Block
name|reportedBlock
parameter_list|,
name|ReplicaState
name|rState
parameter_list|)
block|{
if|if
condition|(
name|replicas
operator|==
literal|null
condition|)
block|{
name|replicas
operator|=
operator|new
name|ReplicaUnderConstruction
index|[
literal|1
index|]
expr_stmt|;
name|replicas
index|[
literal|0
index|]
operator|=
operator|new
name|ReplicaUnderConstruction
argument_list|(
name|reportedBlock
argument_list|,
name|storage
argument_list|,
name|rState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replicas
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeStorageInfo
name|expected
init|=
name|replicas
index|[
name|i
index|]
operator|.
name|getExpectedStorageLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
operator|==
name|storage
condition|)
block|{
name|replicas
index|[
name|i
index|]
operator|.
name|setBlockId
argument_list|(
name|reportedBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|replicas
index|[
name|i
index|]
operator|.
name|setGenerationStamp
argument_list|(
name|reportedBlock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|expected
operator|!=
literal|null
operator|&&
name|expected
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|==
name|storage
operator|.
name|getDatanodeDescriptor
argument_list|()
condition|)
block|{
comment|// The Datanode reported that the block is on a different storage
comment|// than the one chosen by BlockPlacementPolicy. This can occur as
comment|// we allow Datanodes to choose the target storage. Update our
comment|// state by removing the stale entry and adding a new one.
name|replicas
index|[
name|i
index|]
operator|=
operator|new
name|ReplicaUnderConstruction
argument_list|(
name|reportedBlock
argument_list|,
name|storage
argument_list|,
name|rState
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|ReplicaUnderConstruction
index|[]
name|newReplicas
init|=
operator|new
name|ReplicaUnderConstruction
index|[
name|replicas
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|replicas
argument_list|,
literal|0
argument_list|,
name|newReplicas
argument_list|,
literal|0
argument_list|,
name|replicas
operator|.
name|length
argument_list|)
expr_stmt|;
name|newReplicas
index|[
name|newReplicas
operator|.
name|length
operator|-
literal|1
index|]
operator|=
operator|new
name|ReplicaUnderConstruction
argument_list|(
name|reportedBlock
argument_list|,
name|storage
argument_list|,
name|rState
argument_list|)
expr_stmt|;
name|replicas
operator|=
name|newReplicas
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|appendUCParts
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|appendUCParts (StringBuilder sb)
specifier|private
name|void
name|appendUCParts
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{UCState="
argument_list|)
operator|.
name|append
argument_list|(
name|blockUCState
argument_list|)
operator|.
name|append
argument_list|(
literal|", truncateBlock="
argument_list|)
operator|.
name|append
argument_list|(
name|truncateBlock
argument_list|)
operator|.
name|append
argument_list|(
literal|", primaryNodeIndex="
argument_list|)
operator|.
name|append
argument_list|(
name|primaryNodeIndex
argument_list|)
operator|.
name|append
argument_list|(
literal|", replicas=["
argument_list|)
expr_stmt|;
if|if
condition|(
name|replicas
operator|!=
literal|null
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ReplicaUnderConstruction
name|r
range|:
name|replicas
control|)
block|{
name|r
operator|.
name|appendStringTo
argument_list|(
name|sb
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|<
name|replicas
operator|.
name|length
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]}"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

