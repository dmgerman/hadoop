begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_class
DECL|class|HAUtil
specifier|public
class|class
name|HAUtil
block|{
DECL|method|HAUtil ()
specifier|private
name|HAUtil
parameter_list|()
block|{
comment|/* Hidden constructor */
block|}
comment|/**    * Returns true if HA for namenode is configured.    *     * @param conf Configuration    * @return true if HA is configured in the configuration; else false.    */
DECL|method|isHAEnabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isHAEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|collection
init|=
name|DFSUtil
operator|.
name|getNameNodeIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|collection
operator|!=
literal|null
operator|&&
operator|!
name|collection
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * Get the namenode Id by matching the {@code addressKey}    * with the the address of the local node.    *     * If {@link DFSConfigKeys#DFS_HA_NAMENODE_ID_KEY} is not specifically    * configured, this method determines the namenode Id by matching the local    * node's address with the configured addresses. When a match is found, it    * returns the namenode Id from the corresponding configuration key.    *     * @param conf Configuration    * @return namenode Id on success, null on failure.    * @throws HadoopIllegalArgumentException on error    */
DECL|method|getNameNodeId (Configuration conf)
specifier|public
specifier|static
name|String
name|getNameNodeId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|namenodeId
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_HA_NAMENODE_ID_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|namenodeId
operator|!=
literal|null
condition|)
block|{
return|return
name|namenodeId
return|;
block|}
if|if
condition|(
operator|!
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|namenodeId
operator|=
name|DFSUtil
operator|.
name|getSuffixIDs
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|DFSUtil
operator|.
name|LOCAL_ADDRESS_MATCHER
argument_list|)
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|namenodeId
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Configuration "
operator|+
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|" must be suffixed with"
operator|+
name|namenodeId
operator|+
literal|" for HA configuration."
decl_stmt|;
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|namenodeId
return|;
block|}
comment|/**    * Similar to    * {@link DFSUtil#getNameServiceIdFromAddress(Configuration,     * InetSocketAddress, String...)}    */
DECL|method|getNameNodeIdFromAddress (final Configuration conf, final InetSocketAddress address, String... keys)
specifier|public
specifier|static
name|String
name|getNameNodeIdFromAddress
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|InetSocketAddress
name|address
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
comment|// Configuration with a single namenode and no nameserviceId
if|if
condition|(
operator|!
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|ids
init|=
name|DFSUtil
operator|.
name|getSuffixIDs
argument_list|(
name|conf
argument_list|,
name|address
argument_list|,
name|keys
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
name|ids
operator|.
name|length
operator|>
literal|1
condition|)
block|{
return|return
name|ids
index|[
literal|1
index|]
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

