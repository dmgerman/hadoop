begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.startupprogress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * StartupProgressView is an immutable, consistent, read-only view of namenode  * startup progress.  Callers obtain an instance by calling  * {@link StartupProgress#createView()} to clone current startup progress state.  * Subsequent updates to startup progress will not alter the view.  This isolates  * the reader from ongoing updates and establishes a guarantee that the values  * returned by the view are consistent and unchanging across multiple related  * read operations.  Calculations that require aggregation, such as overall  * percent complete, will not be impacted by mutations performed in other threads  * mid-way through the calculation.  *   * Methods that return primitive long may return {@link Long#MIN_VALUE} as a  * sentinel value to indicate that the property is undefined.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StartupProgressView
specifier|public
class|class
name|StartupProgressView
block|{
DECL|field|phases
specifier|private
specifier|final
name|Map
argument_list|<
name|Phase
argument_list|,
name|PhaseTracking
argument_list|>
name|phases
decl_stmt|;
comment|/**    * Returns the sum of the counter values for all steps in the specified phase.    *     * @param phase Phase to get    * @return long sum of counter values for all steps    */
DECL|method|getCount (Phase phase)
specifier|public
name|long
name|getCount
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Step
name|step
range|:
name|getSteps
argument_list|(
name|phase
argument_list|)
control|)
block|{
name|sum
operator|+=
name|getCount
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
comment|/**    * Returns the counter value for the specified phase and step.    *     * @param phase Phase to get    * @param step Step to get    * @return long counter value for phase and step    */
DECL|method|getCount (Phase phase, Step step)
specifier|public
name|long
name|getCount
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|)
block|{
name|StepTracking
name|tracking
init|=
name|getStepTracking
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
decl_stmt|;
return|return
name|tracking
operator|!=
literal|null
condition|?
name|tracking
operator|.
name|count
operator|.
name|get
argument_list|()
else|:
literal|0
return|;
block|}
comment|/**    * Returns overall elapsed time, calculated as time between start of loading    * fsimage and end of safemode.    *     * @return long elapsed time    */
DECL|method|getElapsedTime ()
specifier|public
name|long
name|getElapsedTime
parameter_list|()
block|{
return|return
name|getElapsedTime
argument_list|(
name|phases
operator|.
name|get
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|)
argument_list|,
name|phases
operator|.
name|get
argument_list|(
name|Phase
operator|.
name|SAFEMODE
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns elapsed time for the specified phase, calculated as (end - begin) if    * phase is complete or (now - begin) if phase is running or 0 if the phase is    * still pending.    *     * @param phase Phase to get    * @return long elapsed time    */
DECL|method|getElapsedTime (Phase phase)
specifier|public
name|long
name|getElapsedTime
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
return|return
name|getElapsedTime
argument_list|(
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns elapsed time for the specified phase and step, calculated as    * (end - begin) if step is complete or (now - begin) if step is running or 0    * if the step is still pending.    *     * @param phase Phase to get    * @param step Step to get    * @return long elapsed time    */
DECL|method|getElapsedTime (Phase phase, Step step)
specifier|public
name|long
name|getElapsedTime
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|)
block|{
return|return
name|getElapsedTime
argument_list|(
name|getStepTracking
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns the optional file name associated with the specified phase, possibly    * null.    *     * @param phase Phase to get    * @return String optional file name, possibly null    */
DECL|method|getFile (Phase phase)
specifier|public
name|String
name|getFile
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
return|return
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
operator|.
name|file
return|;
block|}
comment|/**    * Returns overall percent complete, calculated by aggregating percent complete    * of all phases.  This is an approximation that assumes all phases have equal    * running time.  In practice, this isn't true, but there isn't sufficient    * information available to predict proportional weights for each phase.    *     * @return float percent complete    */
DECL|method|getPercentComplete ()
specifier|public
name|float
name|getPercentComplete
parameter_list|()
block|{
if|if
condition|(
name|getStatus
argument_list|(
name|Phase
operator|.
name|SAFEMODE
argument_list|)
operator|==
name|Status
operator|.
name|COMPLETE
condition|)
block|{
return|return
literal|1.0f
return|;
block|}
else|else
block|{
name|float
name|total
init|=
literal|0.0f
decl_stmt|;
name|int
name|numPhases
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Phase
name|phase
range|:
name|phases
operator|.
name|keySet
argument_list|()
control|)
block|{
operator|++
name|numPhases
expr_stmt|;
name|total
operator|+=
name|getPercentComplete
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
return|return
name|getBoundedPercent
argument_list|(
name|total
operator|/
name|numPhases
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns percent complete for the specified phase, calculated by aggregating    * the counter values and totals for all steps within the phase.    *     * @param phase Phase to get    * @return float percent complete    */
DECL|method|getPercentComplete (Phase phase)
specifier|public
name|float
name|getPercentComplete
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
if|if
condition|(
name|getStatus
argument_list|(
name|phase
argument_list|)
operator|==
name|Status
operator|.
name|COMPLETE
condition|)
block|{
return|return
literal|1.0f
return|;
block|}
else|else
block|{
name|long
name|total
init|=
name|getTotal
argument_list|(
name|phase
argument_list|)
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Step
name|step
range|:
name|getSteps
argument_list|(
name|phase
argument_list|)
control|)
block|{
name|count
operator|+=
name|getCount
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
return|return
name|total
operator|>
literal|0
condition|?
name|getBoundedPercent
argument_list|(
literal|1.0f
operator|*
name|count
operator|/
name|total
argument_list|)
else|:
literal|0.0f
return|;
block|}
block|}
comment|/**    * Returns percent complete for the specified phase and step, calculated as    * counter value divided by total.    *     * @param phase Phase to get    * @param step Step to get    * @return float percent complete    */
DECL|method|getPercentComplete (Phase phase, Step step)
specifier|public
name|float
name|getPercentComplete
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|)
block|{
if|if
condition|(
name|getStatus
argument_list|(
name|phase
argument_list|)
operator|==
name|Status
operator|.
name|COMPLETE
condition|)
block|{
return|return
literal|1.0f
return|;
block|}
else|else
block|{
name|long
name|total
init|=
name|getTotal
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|getCount
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
decl_stmt|;
return|return
name|total
operator|>
literal|0
condition|?
name|getBoundedPercent
argument_list|(
literal|1.0f
operator|*
name|count
operator|/
name|total
argument_list|)
else|:
literal|0.0f
return|;
block|}
block|}
comment|/**    * Returns all phases.    *     * @return Iterable<Phase> containing all phases    */
DECL|method|getPhases ()
specifier|public
name|Iterable
argument_list|<
name|Phase
argument_list|>
name|getPhases
parameter_list|()
block|{
return|return
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Phase
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Returns all steps within a phase.    *     * @param phase Phase to get    * @return Iterable<Step> all steps    */
DECL|method|getSteps (Phase phase)
specifier|public
name|Iterable
argument_list|<
name|Step
argument_list|>
name|getSteps
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|Step
argument_list|>
argument_list|(
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
operator|.
name|steps
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the optional size in bytes associated with the specified phase,    * possibly Long.MIN_VALUE if undefined.    *     * @param phase Phase to get    * @return long optional size in bytes, possibly Long.MIN_VALUE    */
DECL|method|getSize (Phase phase)
specifier|public
name|long
name|getSize
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
return|return
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
operator|.
name|size
return|;
block|}
comment|/**    * Returns the current run status of the specified phase.    *     * @param phase Phase to get    * @return Status run status of phase    */
DECL|method|getStatus (Phase phase)
specifier|public
name|Status
name|getStatus
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
name|PhaseTracking
name|tracking
init|=
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracking
operator|.
name|beginTime
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|Status
operator|.
name|PENDING
return|;
block|}
elseif|else
if|if
condition|(
name|tracking
operator|.
name|endTime
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|Status
operator|.
name|RUNNING
return|;
block|}
else|else
block|{
return|return
name|Status
operator|.
name|COMPLETE
return|;
block|}
block|}
comment|/**    * Returns the sum of the totals for all steps in the specified phase.    *     * @param phase Phase to get    * @return long sum of totals for all steps    */
DECL|method|getTotal (Phase phase)
specifier|public
name|long
name|getTotal
parameter_list|(
name|Phase
name|phase
parameter_list|)
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StepTracking
name|tracking
range|:
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
operator|.
name|steps
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|tracking
operator|.
name|total
operator|!=
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
name|sum
operator|+=
name|tracking
operator|.
name|total
expr_stmt|;
block|}
block|}
return|return
name|sum
return|;
block|}
comment|/**    * Returns the total for the specified phase and step.    *     * @param phase Phase to get    * @param step Step to get    * @return long total    */
DECL|method|getTotal (Phase phase, Step step)
specifier|public
name|long
name|getTotal
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|)
block|{
name|StepTracking
name|tracking
init|=
name|getStepTracking
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
decl_stmt|;
return|return
name|tracking
operator|!=
literal|null
operator|&&
name|tracking
operator|.
name|total
operator|!=
name|Long
operator|.
name|MIN_VALUE
condition|?
name|tracking
operator|.
name|total
else|:
literal|0
return|;
block|}
comment|/**    * Creates a new StartupProgressView by cloning data from the specified    * StartupProgress.    *     * @param prog StartupProgress to clone    */
DECL|method|StartupProgressView (StartupProgress prog)
name|StartupProgressView
parameter_list|(
name|StartupProgress
name|prog
parameter_list|)
block|{
name|phases
operator|=
operator|new
name|HashMap
argument_list|<
name|Phase
argument_list|,
name|PhaseTracking
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Phase
argument_list|,
name|PhaseTracking
argument_list|>
name|entry
range|:
name|prog
operator|.
name|phases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|phases
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns elapsed time, calculated as (end - begin) if both are defined or    * (now - begin) if end is undefined or 0 if both are undefined.  Begin and end    * time come from the same AbstractTracking instance.    *     * @param tracking AbstractTracking containing begin and end time    * @return long elapsed time    */
DECL|method|getElapsedTime (AbstractTracking tracking)
specifier|private
name|long
name|getElapsedTime
parameter_list|(
name|AbstractTracking
name|tracking
parameter_list|)
block|{
return|return
name|getElapsedTime
argument_list|(
name|tracking
argument_list|,
name|tracking
argument_list|)
return|;
block|}
comment|/**    * Returns elapsed time, calculated as (end - begin) if both are defined or    * (now - begin) if end is undefined or 0 if both are undefined.  Begin and end    * time may come from different AbstractTracking instances.    *     * @param beginTracking AbstractTracking containing begin time    * @param endTracking AbstractTracking containing end time    * @return long elapsed time    */
DECL|method|getElapsedTime (AbstractTracking beginTracking, AbstractTracking endTracking)
specifier|private
name|long
name|getElapsedTime
parameter_list|(
name|AbstractTracking
name|beginTracking
parameter_list|,
name|AbstractTracking
name|endTracking
parameter_list|)
block|{
specifier|final
name|long
name|elapsed
decl_stmt|;
if|if
condition|(
name|beginTracking
operator|!=
literal|null
operator|&&
name|beginTracking
operator|.
name|beginTime
operator|!=
name|Long
operator|.
name|MIN_VALUE
operator|&&
name|endTracking
operator|!=
literal|null
operator|&&
name|endTracking
operator|.
name|endTime
operator|!=
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
name|elapsed
operator|=
name|endTracking
operator|.
name|endTime
operator|-
name|beginTracking
operator|.
name|beginTime
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|beginTracking
operator|!=
literal|null
operator|&&
name|beginTracking
operator|.
name|beginTime
operator|!=
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
name|elapsed
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|beginTracking
operator|.
name|beginTime
expr_stmt|;
block|}
else|else
block|{
name|elapsed
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|elapsed
argument_list|)
return|;
block|}
comment|/**    * Returns the StepTracking internal data structure for the specified phase    * and step, possibly null if not found.    *     * @param phase Phase to get    * @param step Step to get    * @return StepTracking for phase and step, possibly null    */
DECL|method|getStepTracking (Phase phase, Step step)
specifier|private
name|StepTracking
name|getStepTracking
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|)
block|{
name|PhaseTracking
name|phaseTracking
init|=
name|phases
operator|.
name|get
argument_list|(
name|phase
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Step
argument_list|,
name|StepTracking
argument_list|>
name|steps
init|=
name|phaseTracking
operator|!=
literal|null
condition|?
name|phaseTracking
operator|.
name|steps
else|:
literal|null
decl_stmt|;
return|return
name|steps
operator|!=
literal|null
condition|?
name|steps
operator|.
name|get
argument_list|(
name|step
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**    * Returns the given value restricted to the range [0.0, 1.0].    *     * @param percent float value to restrict    * @return float value restricted to range [0.0, 1.0]    */
DECL|method|getBoundedPercent (float percent)
specifier|private
specifier|static
name|float
name|getBoundedPercent
parameter_list|(
name|float
name|percent
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0.0f
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|1.0f
argument_list|,
name|percent
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

