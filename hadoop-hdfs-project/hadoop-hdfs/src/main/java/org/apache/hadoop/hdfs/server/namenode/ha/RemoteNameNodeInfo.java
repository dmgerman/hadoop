begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Information about a single remote NameNode  */
end_comment

begin_class
DECL|class|RemoteNameNodeInfo
specifier|public
class|class
name|RemoteNameNodeInfo
block|{
DECL|method|getRemoteNameNodes (Configuration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|RemoteNameNodeInfo
argument_list|>
name|getRemoteNameNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|nsId
init|=
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|getRemoteNameNodes
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|)
return|;
block|}
DECL|method|getRemoteNameNodes (Configuration conf, String nsId)
specifier|public
specifier|static
name|List
argument_list|<
name|RemoteNameNodeInfo
argument_list|>
name|getRemoteNameNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nsId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// there is only a single NN configured (and no federation) so we don't have any more NNs
if|if
condition|(
name|nsId
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Configuration
argument_list|>
name|otherNodes
init|=
name|HAUtil
operator|.
name|getConfForOtherNodes
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RemoteNameNodeInfo
argument_list|>
name|nns
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteNameNodeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Configuration
name|otherNode
range|:
name|otherNodes
control|)
block|{
name|String
name|otherNNId
init|=
name|HAUtil
operator|.
name|getNameNodeId
argument_list|(
name|otherNode
argument_list|,
name|nsId
argument_list|)
decl_stmt|;
comment|// don't do any validation here as in some cases, it can be overwritten later
name|InetSocketAddress
name|otherIpcAddr
init|=
name|NameNode
operator|.
name|getServiceAddress
argument_list|(
name|otherNode
argument_list|)
decl_stmt|;
specifier|final
name|String
name|scheme
init|=
name|DFSUtil
operator|.
name|getHttpClientScheme
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|URL
name|otherHttpAddr
init|=
name|DFSUtil
operator|.
name|getInfoServerWithDefaultHost
argument_list|(
name|otherIpcAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|otherNode
argument_list|,
name|scheme
argument_list|)
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|nns
operator|.
name|add
argument_list|(
operator|new
name|RemoteNameNodeInfo
argument_list|(
name|otherNode
argument_list|,
name|otherNNId
argument_list|,
name|otherIpcAddr
argument_list|,
name|otherHttpAddr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nns
return|;
block|}
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|nnId
specifier|private
specifier|final
name|String
name|nnId
decl_stmt|;
DECL|field|ipcAddress
specifier|private
name|InetSocketAddress
name|ipcAddress
decl_stmt|;
DECL|field|httpAddress
specifier|private
specifier|final
name|URL
name|httpAddress
decl_stmt|;
DECL|method|RemoteNameNodeInfo (Configuration conf, String nnId, InetSocketAddress ipcAddress, URL httpAddress)
specifier|private
name|RemoteNameNodeInfo
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nnId
parameter_list|,
name|InetSocketAddress
name|ipcAddress
parameter_list|,
name|URL
name|httpAddress
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|nnId
operator|=
name|nnId
expr_stmt|;
name|this
operator|.
name|ipcAddress
operator|=
name|ipcAddress
expr_stmt|;
name|this
operator|.
name|httpAddress
operator|=
name|httpAddress
expr_stmt|;
block|}
DECL|method|getIpcAddress ()
specifier|public
name|InetSocketAddress
name|getIpcAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|ipcAddress
return|;
block|}
DECL|method|getNameNodeID ()
specifier|public
name|String
name|getNameNodeID
parameter_list|()
block|{
return|return
name|this
operator|.
name|nnId
return|;
block|}
DECL|method|getHttpAddress ()
specifier|public
name|URL
name|getHttpAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|httpAddress
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
DECL|method|setIpcAddress (InetSocketAddress ipc)
specifier|public
name|void
name|setIpcAddress
parameter_list|(
name|InetSocketAddress
name|ipc
parameter_list|)
block|{
name|this
operator|.
name|ipcAddress
operator|=
name|ipc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RemoteNameNodeInfo [nnId="
operator|+
name|nnId
operator|+
literal|", ipcAddress="
operator|+
name|ipcAddress
operator|+
literal|", httpAddress="
operator|+
name|httpAddress
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|RemoteNameNodeInfo
name|that
init|=
operator|(
name|RemoteNameNodeInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|nnId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|nnId
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|ipcAddress
operator|.
name|equals
argument_list|(
name|that
operator|.
name|ipcAddress
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// convert to the standard strings since URL.equals does address resolution, which is a
comment|// blocking call and a a FindBugs issue.
name|String
name|httpString
init|=
name|httpAddress
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|thatHttpString
init|=
name|that
operator|.
name|httpAddress
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|httpString
operator|.
name|equals
argument_list|(
name|thatHttpString
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|nnId
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|ipcAddress
operator|.
name|hashCode
argument_list|()
expr_stmt|;
comment|// toString rather than hashCode b/c Url.hashCode is a blocking call.
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|httpAddress
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

