begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|LongAdder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LightWeightGSet
import|;
end_import

begin_comment
comment|/**  * This class maintains the map from a block to its metadata.  * block's metadata currently includes blockCollection it belongs to and  * the datanodes that store the block.  */
end_comment

begin_class
DECL|class|BlocksMap
class|class
name|BlocksMap
block|{
comment|/** Constant {@link LightWeightGSet} capacity. */
DECL|field|capacity
specifier|private
specifier|final
name|int
name|capacity
decl_stmt|;
DECL|field|blocks
specifier|private
name|GSet
argument_list|<
name|Block
argument_list|,
name|BlockInfo
argument_list|>
name|blocks
decl_stmt|;
DECL|field|totalReplicatedBlocks
specifier|private
specifier|final
name|LongAdder
name|totalReplicatedBlocks
init|=
operator|new
name|LongAdder
argument_list|()
decl_stmt|;
DECL|field|totalECBlockGroups
specifier|private
specifier|final
name|LongAdder
name|totalECBlockGroups
init|=
operator|new
name|LongAdder
argument_list|()
decl_stmt|;
DECL|method|BlocksMap (int capacity)
name|BlocksMap
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
comment|// Use 2% of total memory to size the GSet capacity
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
operator|new
name|LightWeightGSet
argument_list|<
name|Block
argument_list|,
name|BlockInfo
argument_list|>
argument_list|(
name|capacity
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|BlockInfo
argument_list|>
name|iterator
parameter_list|()
block|{
name|SetIterator
name|iterator
init|=
operator|new
name|SetIterator
argument_list|()
decl_stmt|;
comment|/*          * Not tracking any modifications to set. As this set will be used          * always under FSNameSystem lock, modifications will not cause any          * ConcurrentModificationExceptions. But there is a chance of missing          * newly added elements during iteration.          */
name|iterator
operator|.
name|setTrackModification
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|iterator
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|blocks
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|blocks
operator|!=
literal|null
condition|)
block|{
name|blocks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|totalReplicatedBlocks
operator|.
name|reset
argument_list|()
expr_stmt|;
name|totalECBlockGroups
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Add block b belonging to the specified block collection to the map.    */
DECL|method|addBlockCollection (BlockInfo b, BlockCollection bc)
name|BlockInfo
name|addBlockCollection
parameter_list|(
name|BlockInfo
name|b
parameter_list|,
name|BlockCollection
name|bc
parameter_list|)
block|{
name|BlockInfo
name|info
init|=
name|blocks
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
name|b
condition|)
block|{
name|info
operator|=
name|b
expr_stmt|;
name|blocks
operator|.
name|put
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|incrementBlockStat
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setBlockCollectionId
argument_list|(
name|bc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Remove the block from the block map;    * remove it from all data-node lists it belongs to;    * and remove all data-node locations associated with the block.    */
DECL|method|removeBlock (Block block)
name|void
name|removeBlock
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
name|BlockInfo
name|blockInfo
init|=
name|blocks
operator|.
name|remove
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|decrementBlockStat
argument_list|(
name|block
argument_list|)
expr_stmt|;
assert|assert
name|blockInfo
operator|.
name|getBlockCollectionId
argument_list|()
operator|==
name|INodeId
operator|.
name|INVALID_INODE_ID
assert|;
specifier|final
name|int
name|size
init|=
name|blockInfo
operator|.
name|isStriped
argument_list|()
condition|?
name|blockInfo
operator|.
name|getCapacity
argument_list|()
else|:
name|blockInfo
operator|.
name|numNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
name|size
operator|-
literal|1
init|;
name|idx
operator|>=
literal|0
condition|;
name|idx
operator|--
control|)
block|{
name|DatanodeDescriptor
name|dn
init|=
name|blockInfo
operator|.
name|getDatanode
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|dn
operator|!=
literal|null
condition|)
block|{
name|removeBlock
argument_list|(
name|dn
argument_list|,
name|blockInfo
argument_list|)
expr_stmt|;
comment|// remove from the list and wipe the location
block|}
block|}
block|}
comment|/**    * Check if BlocksMap contains the block.    *    * @param b Block to check    * @return true if block is in the map, otherwise false    */
DECL|method|containsBlock (Block b)
name|boolean
name|containsBlock
parameter_list|(
name|Block
name|b
parameter_list|)
block|{
return|return
name|blocks
operator|.
name|contains
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/** Returns the block object if it exists in the map. */
DECL|method|getStoredBlock (Block b)
name|BlockInfo
name|getStoredBlock
parameter_list|(
name|Block
name|b
parameter_list|)
block|{
return|return
name|blocks
operator|.
name|get
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**    * Searches for the block in the BlocksMap and     * returns {@link Iterable} of the storages the block belongs to.    */
DECL|method|getStorages (Block b)
name|Iterable
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|getStorages
parameter_list|(
name|Block
name|b
parameter_list|)
block|{
name|BlockInfo
name|block
init|=
name|blocks
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
return|return
name|block
operator|!=
literal|null
condition|?
name|getStorages
argument_list|(
name|block
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|DatanodeStorageInfo
operator|>
name|emptyList
argument_list|()
return|;
block|}
comment|/**    * For a block that has already been retrieved from the BlocksMap    * returns {@link Iterable} of the storages the block belongs to.    */
DECL|method|getStorages (final BlockInfo storedBlock)
name|Iterable
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|getStorages
parameter_list|(
specifier|final
name|BlockInfo
name|storedBlock
parameter_list|)
block|{
if|if
condition|(
name|storedBlock
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|storedBlock
operator|.
name|getStorageInfos
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
comment|/** counts number of containing nodes. Better than using iterator. */
DECL|method|numNodes (Block b)
name|int
name|numNodes
parameter_list|(
name|Block
name|b
parameter_list|)
block|{
name|BlockInfo
name|info
init|=
name|blocks
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
return|return
name|info
operator|==
literal|null
condition|?
literal|0
else|:
name|info
operator|.
name|numNodes
argument_list|()
return|;
block|}
comment|/**    * Remove data-node reference from the block.    * Remove the block from the block map    * only if it does not belong to any file and data-nodes.    */
DECL|method|removeNode (Block b, DatanodeDescriptor node)
name|boolean
name|removeNode
parameter_list|(
name|Block
name|b
parameter_list|,
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
name|BlockInfo
name|info
init|=
name|blocks
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// remove block from the data-node set and the node from the block info
name|boolean
name|removed
init|=
name|removeBlock
argument_list|(
name|node
argument_list|,
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|hasNoStorage
argument_list|()
comment|// no datanodes left
operator|&&
name|info
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
comment|// does not belong to a file
name|blocks
operator|.
name|remove
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// remove block from the map
name|decrementBlockStat
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
comment|/**    * Remove block from the set of blocks belonging to the data-node. Remove    * data-node from the block.    */
DECL|method|removeBlock (DatanodeDescriptor dn, BlockInfo b)
specifier|static
name|boolean
name|removeBlock
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockInfo
name|b
parameter_list|)
block|{
specifier|final
name|DatanodeStorageInfo
name|s
init|=
name|b
operator|.
name|findStorageInfo
argument_list|(
name|dn
argument_list|)
decl_stmt|;
comment|// if block exists on this datanode
return|return
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|removeBlock
argument_list|(
name|b
argument_list|)
return|;
block|}
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|blocks
operator|!=
literal|null
condition|)
block|{
return|return
name|blocks
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|method|getBlocks ()
name|Iterable
argument_list|<
name|BlockInfo
argument_list|>
name|getBlocks
parameter_list|()
block|{
return|return
name|blocks
return|;
block|}
comment|/** Get the capacity of the HashMap that stores blocks */
DECL|method|getCapacity ()
name|int
name|getCapacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
DECL|method|incrementBlockStat (Block block)
specifier|private
name|void
name|incrementBlockStat
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
if|if
condition|(
name|BlockIdManager
operator|.
name|isStripedBlockID
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
condition|)
block|{
name|totalECBlockGroups
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|totalReplicatedBlocks
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|decrementBlockStat (Block block)
specifier|private
name|void
name|decrementBlockStat
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
if|if
condition|(
name|BlockIdManager
operator|.
name|isStripedBlockID
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
condition|)
block|{
name|totalECBlockGroups
operator|.
name|decrement
argument_list|()
expr_stmt|;
assert|assert
name|totalECBlockGroups
operator|.
name|longValue
argument_list|()
operator|>=
literal|0
operator|:
literal|"Total number of ec block groups should be non-negative"
assert|;
block|}
else|else
block|{
name|totalReplicatedBlocks
operator|.
name|decrement
argument_list|()
expr_stmt|;
assert|assert
name|totalReplicatedBlocks
operator|.
name|longValue
argument_list|()
operator|>=
literal|0
operator|:
literal|"Total number of replicated blocks should be non-negative"
assert|;
block|}
block|}
DECL|method|getReplicatedBlocks ()
name|long
name|getReplicatedBlocks
parameter_list|()
block|{
return|return
name|totalReplicatedBlocks
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|getECBlockGroups ()
name|long
name|getECBlockGroups
parameter_list|()
block|{
return|return
name|totalECBlockGroups
operator|.
name|longValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

