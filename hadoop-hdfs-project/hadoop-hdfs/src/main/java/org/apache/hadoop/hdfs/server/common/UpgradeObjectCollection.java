begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Collection of upgrade objects.  *  * Upgrade objects should be registered here before they can be used.   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|UpgradeObjectCollection
specifier|public
class|class
name|UpgradeObjectCollection
block|{
static|static
block|{
name|initialize
argument_list|()
expr_stmt|;
comment|// Registered distributed upgrade objects here
comment|// registerUpgrade(new UpgradeObject());
block|}
DECL|class|UOSignature
specifier|static
class|class
name|UOSignature
implements|implements
name|Comparable
argument_list|<
name|UOSignature
argument_list|>
block|{
DECL|field|version
name|int
name|version
decl_stmt|;
DECL|field|type
name|HdfsConstants
operator|.
name|NodeType
name|type
decl_stmt|;
DECL|field|className
name|String
name|className
decl_stmt|;
DECL|method|UOSignature (Upgradeable uo)
name|UOSignature
parameter_list|(
name|Upgradeable
name|uo
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|uo
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|uo
operator|.
name|getType
argument_list|()
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|uo
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
block|}
DECL|method|getVersion ()
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|getType ()
name|HdfsConstants
operator|.
name|NodeType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getClassName ()
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
DECL|method|instantiate ()
name|Upgradeable
name|instantiate
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|(
name|Upgradeable
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|getClassName
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compareTo (UOSignature o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|UOSignature
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|version
operator|!=
name|o
operator|.
name|version
condition|)
return|return
operator|(
name|version
operator|<
name|o
operator|.
name|version
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
name|int
name|res
init|=
name|this
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|0
condition|)
return|return
name|res
return|;
return|return
name|className
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|className
argument_list|)
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|UOSignature
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|compareTo
argument_list|(
operator|(
name|UOSignature
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|version
operator|^
operator|(
operator|(
name|type
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|type
operator|.
name|hashCode
argument_list|()
operator|)
operator|^
operator|(
operator|(
name|className
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|className
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
block|}
comment|/**    * Static collection of upgrade objects sorted by version.    * Layout versions are negative therefore newer versions will go first.    */
DECL|field|upgradeTable
specifier|static
name|SortedSet
argument_list|<
name|UOSignature
argument_list|>
name|upgradeTable
decl_stmt|;
DECL|method|initialize ()
specifier|static
specifier|final
name|void
name|initialize
parameter_list|()
block|{
name|upgradeTable
operator|=
operator|new
name|TreeSet
argument_list|<
name|UOSignature
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|registerUpgrade (Upgradeable uo)
specifier|static
name|void
name|registerUpgrade
parameter_list|(
name|Upgradeable
name|uo
parameter_list|)
block|{
comment|// Registered distributed upgrade objects here
name|upgradeTable
operator|.
name|add
argument_list|(
operator|new
name|UOSignature
argument_list|(
name|uo
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDistributedUpgrades (int versionFrom, HdfsConstants.NodeType type )
specifier|public
specifier|static
name|SortedSet
argument_list|<
name|Upgradeable
argument_list|>
name|getDistributedUpgrades
parameter_list|(
name|int
name|versionFrom
parameter_list|,
name|HdfsConstants
operator|.
name|NodeType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|FSConstants
operator|.
name|LAYOUT_VERSION
operator|<=
name|versionFrom
operator|:
literal|"Incorrect version "
operator|+
name|versionFrom
operator|+
literal|". Expected to be<= "
operator|+
name|FSConstants
operator|.
name|LAYOUT_VERSION
assert|;
name|SortedSet
argument_list|<
name|Upgradeable
argument_list|>
name|upgradeObjects
init|=
operator|new
name|TreeSet
argument_list|<
name|Upgradeable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|UOSignature
name|sig
range|:
name|upgradeTable
control|)
block|{
if|if
condition|(
name|sig
operator|.
name|getVersion
argument_list|()
operator|<
name|FSConstants
operator|.
name|LAYOUT_VERSION
condition|)
continue|continue;
if|if
condition|(
name|sig
operator|.
name|getVersion
argument_list|()
operator|>
name|versionFrom
condition|)
break|break;
if|if
condition|(
name|sig
operator|.
name|getType
argument_list|()
operator|!=
name|type
condition|)
continue|continue;
name|upgradeObjects
operator|.
name|add
argument_list|(
name|sig
operator|.
name|instantiate
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upgradeObjects
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|upgradeObjects
return|;
block|}
block|}
end_class

end_unit

