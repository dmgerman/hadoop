begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Contains a list of paths corresponding to corrupt files and a cookie  * used for iterative calls to NameNode.listCorruptFileBlocks.  *  */
end_comment

begin_class
DECL|class|CorruptFileBlocks
specifier|public
class|class
name|CorruptFileBlocks
block|{
comment|// used for hashCode
DECL|field|PRIME
specifier|private
specifier|static
specifier|final
name|int
name|PRIME
init|=
literal|16777619
decl_stmt|;
DECL|field|files
specifier|private
name|String
index|[]
name|files
decl_stmt|;
DECL|field|cookie
specifier|private
name|String
name|cookie
decl_stmt|;
DECL|method|CorruptFileBlocks ()
specifier|public
name|CorruptFileBlocks
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|CorruptFileBlocks (String[] files, String cookie)
specifier|public
name|CorruptFileBlocks
parameter_list|(
name|String
index|[]
name|files
parameter_list|,
name|String
name|cookie
parameter_list|)
block|{
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
name|this
operator|.
name|cookie
operator|=
name|cookie
expr_stmt|;
block|}
DECL|method|getFiles ()
specifier|public
name|String
index|[]
name|getFiles
parameter_list|()
block|{
return|return
name|files
return|;
block|}
DECL|method|getCookie ()
specifier|public
name|String
name|getCookie
parameter_list|()
block|{
return|return
name|cookie
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|CorruptFileBlocks
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CorruptFileBlocks
name|other
init|=
operator|(
name|CorruptFileBlocks
operator|)
name|obj
decl_stmt|;
return|return
name|cookie
operator|.
name|equals
argument_list|(
name|other
operator|.
name|cookie
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|files
argument_list|,
name|other
operator|.
name|files
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|cookie
operator|.
name|hashCode
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|result
operator|=
name|PRIME
operator|*
name|result
operator|+
name|file
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

