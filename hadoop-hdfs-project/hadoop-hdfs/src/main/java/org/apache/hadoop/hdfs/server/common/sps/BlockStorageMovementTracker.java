begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common.sps
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class is used to track the completion of block movement future tasks.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BlockStorageMovementTracker
specifier|public
class|class
name|BlockStorageMovementTracker
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockStorageMovementTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CompletionService
argument_list|<
name|BlockMovementAttemptFinished
argument_list|>
DECL|field|moverCompletionService
name|moverCompletionService
decl_stmt|;
DECL|field|blksMovementsStatusHandler
specifier|private
specifier|final
name|BlocksMovementsStatusHandler
name|blksMovementsStatusHandler
decl_stmt|;
DECL|field|running
specifier|private
specifier|volatile
name|boolean
name|running
init|=
literal|true
decl_stmt|;
comment|/**    * BlockStorageMovementTracker constructor.    *    * @param moverCompletionService    *          completion service.    * @param handler    *          blocks movements status handler    */
DECL|method|BlockStorageMovementTracker ( CompletionService<BlockMovementAttemptFinished> moverCompletionService, BlocksMovementsStatusHandler handler)
specifier|public
name|BlockStorageMovementTracker
parameter_list|(
name|CompletionService
argument_list|<
name|BlockMovementAttemptFinished
argument_list|>
name|moverCompletionService
parameter_list|,
name|BlocksMovementsStatusHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|moverCompletionService
operator|=
name|moverCompletionService
expr_stmt|;
name|this
operator|.
name|blksMovementsStatusHandler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
name|Future
argument_list|<
name|BlockMovementAttemptFinished
argument_list|>
name|future
init|=
name|moverCompletionService
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|BlockMovementAttemptFinished
name|result
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Completed block movement. {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|running
operator|&&
name|blksMovementsStatusHandler
operator|!=
literal|null
condition|)
block|{
comment|// handle completed block movement.
name|blksMovementsStatusHandler
operator|.
name|handle
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|running
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while moving block replica to target storage"
operator|+
literal|" type"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// TODO: Do we need failure retries and implement the same if required.
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while moving block replica to target storage type"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Sets running flag to false.    */
DECL|method|stopTracking ()
specifier|public
name|void
name|stopTracking
parameter_list|()
block|{
name|running
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

