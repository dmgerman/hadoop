begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.sps
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Namesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockStorageMovementCommand
operator|.
name|BlockMovingInfo
import|;
end_import

begin_comment
comment|/**  * This class handles the internal SPS block movements. This will assign block  * movement tasks to target datanode descriptors.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|IntraSPSNameNodeBlockMoveTaskHandler
specifier|public
class|class
name|IntraSPSNameNodeBlockMoveTaskHandler
implements|implements
name|BlockMoveTaskHandler
block|{
DECL|field|blockManager
specifier|private
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|namesystem
specifier|private
name|Namesystem
name|namesystem
decl_stmt|;
DECL|method|IntraSPSNameNodeBlockMoveTaskHandler (BlockManager blockManager, Namesystem namesytem)
specifier|public
name|IntraSPSNameNodeBlockMoveTaskHandler
parameter_list|(
name|BlockManager
name|blockManager
parameter_list|,
name|Namesystem
name|namesytem
parameter_list|)
block|{
name|this
operator|.
name|blockManager
operator|=
name|blockManager
expr_stmt|;
name|this
operator|.
name|namesystem
operator|=
name|namesytem
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|submitMoveTask (BlockMovingInfo blkMovingInfo, BlockMovementListener blockMoveCompletionListener)
specifier|public
name|void
name|submitMoveTask
parameter_list|(
name|BlockMovingInfo
name|blkMovingInfo
parameter_list|,
name|BlockMovementListener
name|blockMoveCompletionListener
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|DatanodeDescriptor
name|dn
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|blkMovingInfo
operator|.
name|getTarget
argument_list|()
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to schedule block movement task:"
operator|+
name|blkMovingInfo
operator|+
literal|" as target datanode: "
operator|+
name|blkMovingInfo
operator|.
name|getTarget
argument_list|()
operator|+
literal|" doesn't exists"
argument_list|)
throw|;
block|}
name|dn
operator|.
name|incrementBlocksScheduled
argument_list|(
name|blkMovingInfo
operator|.
name|getTargetStorageType
argument_list|()
argument_list|)
expr_stmt|;
name|dn
operator|.
name|addBlocksToMoveStorage
argument_list|(
name|blkMovingInfo
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

