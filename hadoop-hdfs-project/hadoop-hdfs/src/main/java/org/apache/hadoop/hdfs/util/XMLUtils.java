begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * General xml utilities.  *     */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|XMLUtils
specifier|public
class|class
name|XMLUtils
block|{
comment|/**    * Exception that reflects an invalid XML document.    */
DECL|class|InvalidXmlException
specifier|static
specifier|public
class|class
name|InvalidXmlException
extends|extends
name|RuntimeException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|InvalidXmlException (String s)
specifier|public
name|InvalidXmlException
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Exception that reflects a string that cannot be unmangled.    */
DECL|class|UnmanglingError
specifier|public
specifier|static
class|class
name|UnmanglingError
extends|extends
name|RuntimeException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|UnmanglingError (String str, Exception e)
specifier|public
name|UnmanglingError
parameter_list|(
name|String
name|str
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|str
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|UnmanglingError (String str)
specifier|public
name|UnmanglingError
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|super
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Given a code point, determine if it should be mangled before being    * represented in an XML document.    *     * Any code point that isn't valid in XML must be mangled.    * See http://en.wikipedia.org/wiki/Valid_characters_in_XML for a    * quick reference, or the w3 standard for the authoritative reference.    *     * @param cp      The code point    * @return        True if the code point should be mangled    */
DECL|method|codePointMustBeMangled (int cp)
specifier|private
specifier|static
name|boolean
name|codePointMustBeMangled
parameter_list|(
name|int
name|cp
parameter_list|)
block|{
if|if
condition|(
name|cp
operator|<
literal|0x20
condition|)
block|{
return|return
operator|(
operator|(
name|cp
operator|!=
literal|0x9
operator|)
operator|&&
operator|(
name|cp
operator|!=
literal|0xa
operator|)
operator|&&
operator|(
name|cp
operator|!=
literal|0xd
operator|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
literal|0xd7ff
operator|<
name|cp
operator|)
operator|&&
operator|(
name|cp
operator|<
literal|0xe000
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|cp
operator|==
literal|0xfffe
operator|)
operator|||
operator|(
name|cp
operator|==
literal|0xffff
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|cp
operator|==
literal|0x5c
condition|)
block|{
comment|// we mangle backslash to simplify decoding... it's
comment|// easier if backslashes always begin mangled sequences.
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|field|NUM_SLASH_POSITIONS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SLASH_POSITIONS
init|=
literal|4
decl_stmt|;
DECL|method|mangleCodePoint (int cp)
specifier|private
specifier|static
name|String
name|mangleCodePoint
parameter_list|(
name|int
name|cp
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"\\%0"
operator|+
name|NUM_SLASH_POSITIONS
operator|+
literal|"x;"
argument_list|,
name|cp
argument_list|)
return|;
block|}
DECL|method|codePointToEntityRef (int cp)
specifier|private
specifier|static
name|String
name|codePointToEntityRef
parameter_list|(
name|int
name|cp
parameter_list|)
block|{
switch|switch
condition|(
name|cp
condition|)
block|{
case|case
literal|'&'
case|:
return|return
literal|"&amp;"
return|;
case|case
literal|'\"'
case|:
return|return
literal|"&quot;"
return|;
case|case
literal|'\''
case|:
return|return
literal|"&apos;"
return|;
case|case
literal|'<'
case|:
return|return
literal|"&lt;"
return|;
case|case
literal|'>'
case|:
return|return
literal|"&gt;"
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Mangle a string so that it can be represented in an XML document.    *     * There are three kinds of code points in XML:    * - Those that can be represented normally,    * - Those that have to be escaped (for example,&amp; must be represented    *     as {@literal&amp;})    * - Those that cannot be represented at all in XML.    *    * The built-in SAX functions will handle the first two types for us just    * fine.  However, sometimes we come across a code point of the third type.    * In this case, we have to mangle the string in order to represent it at    * all.  We also mangle backslash to avoid confusing a backslash in the    * string with part our escape sequence.    *     * The encoding used here is as follows: an illegal code point is    * represented as '\ABCD;', where ABCD is the hexadecimal value of     * the code point.    *    * @param str     The input string.    *    * @return        The mangled string.    */
DECL|method|mangleXmlString (String str, boolean createEntityRefs)
specifier|public
specifier|static
name|String
name|mangleXmlString
parameter_list|(
name|String
name|str
parameter_list|,
name|boolean
name|createEntityRefs
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|offset
init|=
literal|0
init|;
name|offset
operator|<
name|length
condition|;
control|)
block|{
specifier|final
name|int
name|cp
init|=
name|str
operator|.
name|codePointAt
argument_list|(
name|offset
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|Character
operator|.
name|charCount
argument_list|(
name|cp
argument_list|)
decl_stmt|;
if|if
condition|(
name|codePointMustBeMangled
argument_list|(
name|cp
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|mangleCodePoint
argument_list|(
name|cp
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|entityRef
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|createEntityRefs
condition|)
block|{
name|entityRef
operator|=
name|codePointToEntityRef
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityRef
operator|!=
literal|null
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|entityRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|offset
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|offset
operator|+=
name|len
expr_stmt|;
block|}
return|return
name|bld
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Demangle a string from an XML document.    * See {@link #mangleXmlString(String, boolean)} for a description of the    * mangling format.    *    * @param str    The string to be demangled.    *     * @return       The unmangled string    * @throws       UnmanglingError if the input is malformed.    */
DECL|method|unmangleXmlString (String str, boolean decodeEntityRefs)
specifier|public
specifier|static
name|String
name|unmangleXmlString
parameter_list|(
name|String
name|str
parameter_list|,
name|boolean
name|decodeEntityRefs
parameter_list|)
throws|throws
name|UnmanglingError
block|{
name|int
name|slashPosition
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|escapedCp
init|=
literal|""
decl_stmt|;
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|entityRef
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityRef
operator|!=
literal|null
condition|)
block|{
name|entityRef
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|';'
condition|)
block|{
name|String
name|e
init|=
name|entityRef
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|equals
argument_list|(
literal|"&quot;"
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|equals
argument_list|(
literal|"&apos;"
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"\'"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|equals
argument_list|(
literal|"&amp;"
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|equals
argument_list|(
literal|"&lt;"
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|equals
argument_list|(
literal|"&gt;"
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnmanglingError
argument_list|(
literal|"Unknown entity ref "
operator|+
name|e
argument_list|)
throw|;
block|}
name|entityRef
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|slashPosition
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|slashPosition
operator|<
name|NUM_SLASH_POSITIONS
operator|)
condition|)
block|{
name|escapedCp
operator|+=
name|ch
expr_stmt|;
operator|++
name|slashPosition
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|slashPosition
operator|==
name|NUM_SLASH_POSITIONS
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
literal|';'
condition|)
block|{
throw|throw
operator|new
name|UnmanglingError
argument_list|(
literal|"unterminated code point escape: "
operator|+
literal|"expected semicolon at end."
argument_list|)
throw|;
block|}
try|try
block|{
name|bld
operator|.
name|appendCodePoint
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|escapedCp
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnmanglingError
argument_list|(
literal|"error parsing unmangling escape code"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|escapedCp
operator|=
literal|""
expr_stmt|;
name|slashPosition
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'\\'
condition|)
block|{
name|slashPosition
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|startingEntityRef
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|decodeEntityRefs
condition|)
block|{
name|startingEntityRef
operator|=
operator|(
name|ch
operator|==
literal|'&'
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|startingEntityRef
condition|)
block|{
name|entityRef
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|entityRef
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bld
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|entityRef
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnmanglingError
argument_list|(
literal|"unterminated entity ref starting with "
operator|+
name|entityRef
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|slashPosition
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|UnmanglingError
argument_list|(
literal|"unterminated code point escape: string "
operator|+
literal|"broke off in the middle"
argument_list|)
throw|;
block|}
return|return
name|bld
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Add a SAX tag with a string inside.    *    * @param contentHandler     the SAX content handler    * @param tag                the element tag to use      * @param val                the string to put inside the tag    */
DECL|method|addSaxString (ContentHandler contentHandler, String tag, String val)
specifier|public
specifier|static
name|void
name|addSaxString
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|String
name|tag
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|tag
argument_list|,
operator|new
name|AttributesImpl
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|c
index|[]
init|=
name|mangleXmlString
argument_list|(
name|val
argument_list|,
literal|false
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|contentHandler
operator|.
name|characters
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|c
operator|.
name|length
argument_list|)
expr_stmt|;
name|contentHandler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
comment|/**    * Represents a bag of key-value pairs encountered during parsing an XML    * file.    */
DECL|class|Stanza
specifier|static
specifier|public
class|class
name|Stanza
block|{
DECL|field|subtrees
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
argument_list|>
name|subtrees
decl_stmt|;
comment|/** The unmangled value of this stanza. */
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
DECL|method|Stanza ()
specifier|public
name|Stanza
parameter_list|()
block|{
name|subtrees
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|value
operator|=
literal|""
expr_stmt|;
block|}
DECL|method|setValue (String value)
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
comment|/**       * Discover if a stanza has a given entry.      *      * @param name        entry to look for      *       * @return            true if the entry was found      */
DECL|method|hasChildren (String name)
specifier|public
name|boolean
name|hasChildren
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|subtrees
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**       * Pull an entry from a stanza.      *      * @param name        entry to look for      *       * @return            the entry      */
DECL|method|getChildren (String name)
specifier|public
name|List
argument_list|<
name|Stanza
argument_list|>
name|getChildren
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|InvalidXmlException
block|{
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
name|children
init|=
name|subtrees
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidXmlException
argument_list|(
literal|"no entry found for "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|children
return|;
block|}
comment|/**       * Pull a string entry from a stanza.      *      * @param name        entry to look for      *       * @return            the entry      */
DECL|method|getValue (String name)
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|InvalidXmlException
block|{
name|String
name|ret
init|=
name|getValueOrNull
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidXmlException
argument_list|(
literal|"no entry found for "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
comment|/**       * Pull a string entry from a stanza, or null.      *      * @param name        entry to look for      *       * @return            the entry, or null if it was not found.      */
DECL|method|getValueOrNull (String name)
specifier|public
name|String
name|getValueOrNull
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|InvalidXmlException
block|{
if|if
condition|(
operator|!
name|subtrees
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
name|l
init|=
name|subtrees
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|InvalidXmlException
argument_list|(
literal|"More than one value found for "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**       * Add an entry to a stanza.      *      * @param name        name of the entry to add      * @param child       the entry to add      */
DECL|method|addChild (String name, Stanza child)
specifier|public
name|void
name|addChild
parameter_list|(
name|String
name|name
parameter_list|,
name|Stanza
name|child
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
name|l
decl_stmt|;
if|if
condition|(
name|subtrees
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|l
operator|=
name|subtrees
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
operator|new
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
argument_list|()
expr_stmt|;
name|subtrees
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|/**       * Convert a stanza to a human-readable string.      */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|bld
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|String
name|prefix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
argument_list|>
name|entry
range|:
name|subtrees
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
name|ll
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Stanza
name|child
range|:
name|ll
control|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
block|}
name|bld
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|bld
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

