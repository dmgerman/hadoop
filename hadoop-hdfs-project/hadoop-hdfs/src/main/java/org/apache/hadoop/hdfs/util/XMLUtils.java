begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * General xml utilities.  *     */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|XMLUtils
specifier|public
class|class
name|XMLUtils
block|{
comment|/**    * Exception that reflects an invalid XML document.    */
DECL|class|InvalidXmlException
specifier|static
specifier|public
class|class
name|InvalidXmlException
extends|extends
name|RuntimeException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|InvalidXmlException (String s)
specifier|public
name|InvalidXmlException
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add a SAX tag with a string inside.    *    * @param contentHandler     the SAX content handler    * @param tag                the element tag to use      * @param value              the string to put inside the tag    */
DECL|method|addSaxString (ContentHandler contentHandler, String tag, String val)
specifier|public
specifier|static
name|void
name|addSaxString
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|String
name|tag
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|tag
argument_list|,
operator|new
name|AttributesImpl
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|c
index|[]
init|=
name|val
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|contentHandler
operator|.
name|characters
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|c
operator|.
name|length
argument_list|)
expr_stmt|;
name|contentHandler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
comment|/**    * Represents a bag of key-value pairs encountered during parsing an XML    * file.    */
DECL|class|Stanza
specifier|static
specifier|public
class|class
name|Stanza
block|{
DECL|field|subtrees
specifier|private
name|TreeMap
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
argument_list|>
name|subtrees
decl_stmt|;
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
DECL|method|Stanza ()
specifier|public
name|Stanza
parameter_list|()
block|{
name|subtrees
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|value
operator|=
literal|""
expr_stmt|;
block|}
DECL|method|setValue (String value)
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
comment|/**       * Discover if a stanza has a given entry.      *      * @param name        entry to look for      *       * @return            true if the entry was found      */
DECL|method|hasChildren (String name)
specifier|public
name|boolean
name|hasChildren
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|subtrees
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**       * Pull an entry from a stanza.      *      * @param name        entry to look for      *       * @return            the entry      */
DECL|method|getChildren (String name)
specifier|public
name|List
argument_list|<
name|Stanza
argument_list|>
name|getChildren
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|InvalidXmlException
block|{
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
name|children
init|=
name|subtrees
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidXmlException
argument_list|(
literal|"no entry found for "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|children
return|;
block|}
comment|/**       * Pull a string entry from a stanza.      *      * @param name        entry to look for      *       * @return            the entry      */
DECL|method|getValue (String name)
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|InvalidXmlException
block|{
if|if
condition|(
operator|!
name|subtrees
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidXmlException
argument_list|(
literal|"no entry found for "
operator|+
name|name
argument_list|)
throw|;
block|}
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
name|l
init|=
name|subtrees
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|InvalidXmlException
argument_list|(
literal|"More than one value found for "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**       * Add an entry to a stanza.      *      * @param name        name of the entry to add      * @param child       the entry to add      */
DECL|method|addChild (String name, Stanza child)
specifier|public
name|void
name|addChild
parameter_list|(
name|String
name|name
parameter_list|,
name|Stanza
name|child
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
name|l
decl_stmt|;
if|if
condition|(
name|subtrees
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|l
operator|=
name|subtrees
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
operator|new
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
argument_list|()
expr_stmt|;
name|subtrees
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
comment|/**       * Convert a stanza to a human-readable string.      */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|bld
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|String
name|prefix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
argument_list|>
name|entry
range|:
name|subtrees
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|Stanza
argument_list|>
name|ll
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Stanza
name|child
range|:
name|ll
control|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
block|}
name|bld
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|bld
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

