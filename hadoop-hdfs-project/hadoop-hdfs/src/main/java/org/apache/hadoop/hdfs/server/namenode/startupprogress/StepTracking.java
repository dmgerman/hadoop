begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.startupprogress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Internal data structure used to track progress of a {@link Step}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StepTracking
specifier|final
class|class
name|StepTracking
extends|extends
name|AbstractTracking
block|{
DECL|field|count
name|AtomicLong
name|count
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|total
name|long
name|total
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
annotation|@
name|Override
DECL|method|clone ()
specifier|public
name|StepTracking
name|clone
parameter_list|()
block|{
name|StepTracking
name|clone
init|=
operator|new
name|StepTracking
argument_list|()
decl_stmt|;
name|super
operator|.
name|copy
argument_list|(
name|clone
argument_list|)
expr_stmt|;
name|clone
operator|.
name|count
operator|=
operator|new
name|AtomicLong
argument_list|(
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|clone
operator|.
name|total
operator|=
name|total
expr_stmt|;
return|return
name|clone
return|;
block|}
block|}
end_class

end_unit

