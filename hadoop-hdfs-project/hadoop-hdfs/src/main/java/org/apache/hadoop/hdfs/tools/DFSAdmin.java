begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CommandFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
operator|.
name|ProxyAndInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeLocalInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|RollingUpgradeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RollingUpgradeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|TransferFsImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RefreshCallQueueProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|GenericRefreshProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RefreshResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|RefreshUserMappingsProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|RefreshAuthorizationPolicyProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protocolPB
operator|.
name|GenericRefreshProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protocolPB
operator|.
name|GenericRefreshProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class provides some DFS administrative access shell commands.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DFSAdmin
specifier|public
class|class
name|DFSAdmin
extends|extends
name|FsShell
block|{
static|static
block|{
name|HdfsConfiguration
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DFSAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * An abstract class for the execution of a file system command    */
DECL|class|DFSAdminCommand
specifier|abstract
specifier|private
specifier|static
class|class
name|DFSAdminCommand
extends|extends
name|Command
block|{
DECL|field|dfs
specifier|final
name|DistributedFileSystem
name|dfs
decl_stmt|;
comment|/** Constructor */
DECL|method|DFSAdminCommand (FileSystem fs)
specifier|public
name|DFSAdminCommand
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"FileSystem "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
operator|+
literal|" is not an HDFS file system"
argument_list|)
throw|;
block|}
name|this
operator|.
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
expr_stmt|;
block|}
block|}
comment|/** A class that supports command clearQuota */
DECL|class|ClearQuotaCommand
specifier|private
specifier|static
class|class
name|ClearQuotaCommand
extends|extends
name|DFSAdminCommand
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"clrQuota"
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"-"
operator|+
name|NAME
operator|+
literal|"<dirname>...<dirname>"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
name|USAGE
operator|+
literal|": "
operator|+
literal|"Clear the quota for each directory<dirName>.\n"
operator|+
literal|"\t\tFor each directory, attempt to clear the quota. An error will be reported if\n"
operator|+
literal|"\t\t1. the directory does not exist or is a file, or\n"
operator|+
literal|"\t\t2. user is not an administrator.\n"
operator|+
literal|"\t\tIt does not fault if the directory has no quota."
decl_stmt|;
comment|/** Constructor */
DECL|method|ClearQuotaCommand (String[] args, int pos, FileSystem fs)
name|ClearQuotaCommand
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|pos
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|CommandFormat
name|c
init|=
operator|new
name|CommandFormat
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|c
operator|.
name|parse
argument_list|(
name|args
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|this
operator|.
name|args
operator|=
name|parameters
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
comment|/** Check if a command is the clrQuota command      *       * @param cmd A string representation of a command starting with "-"      * @return true if this is a clrQuota command; false otherwise      */
DECL|method|matches (String cmd)
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
operator|(
literal|"-"
operator|+
name|NAME
operator|)
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCommandName ()
specifier|public
name|String
name|getCommandName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|run (Path path)
specifier|public
name|void
name|run
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** A class that supports command setQuota */
DECL|class|SetQuotaCommand
specifier|private
specifier|static
class|class
name|SetQuotaCommand
extends|extends
name|DFSAdminCommand
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"setQuota"
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"-"
operator|+
name|NAME
operator|+
literal|"<quota><dirname>...<dirname>"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"-setQuota<quota><dirname>...<dirname>: "
operator|+
literal|"Set the quota<quota> for each directory<dirName>.\n"
operator|+
literal|"\t\tThe directory quota is a long integer that puts a hard limit\n"
operator|+
literal|"\t\ton the number of names in the directory tree\n"
operator|+
literal|"\t\tFor each directory, attempt to set the quota. An error will be reported if\n"
operator|+
literal|"\t\t1. N is not a positive integer, or\n"
operator|+
literal|"\t\t2. User is not an administrator, or\n"
operator|+
literal|"\t\t3. The directory does not exist or is a file.\n"
operator|+
literal|"\t\tNote: A quota of 1 would force the directory to remain empty.\n"
decl_stmt|;
DECL|field|quota
specifier|private
specifier|final
name|long
name|quota
decl_stmt|;
comment|// the quota to be set
comment|/** Constructor */
DECL|method|SetQuotaCommand (String[] args, int pos, FileSystem fs)
name|SetQuotaCommand
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|pos
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|CommandFormat
name|c
init|=
operator|new
name|CommandFormat
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|c
operator|.
name|parse
argument_list|(
name|args
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|this
operator|.
name|quota
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|parameters
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|parameters
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
comment|/** Check if a command is the setQuota command      *       * @param cmd A string representation of a command starting with "-"      * @return true if this is a count command; false otherwise      */
DECL|method|matches (String cmd)
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
operator|(
literal|"-"
operator|+
name|NAME
operator|)
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCommandName ()
specifier|public
name|String
name|getCommandName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|run (Path path)
specifier|public
name|void
name|run
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
name|quota
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** A class that supports command clearSpaceQuota */
DECL|class|ClearSpaceQuotaCommand
specifier|private
specifier|static
class|class
name|ClearSpaceQuotaCommand
extends|extends
name|DFSAdminCommand
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"clrSpaceQuota"
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"-"
operator|+
name|NAME
operator|+
literal|"<dirname>...<dirname>"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
name|USAGE
operator|+
literal|": "
operator|+
literal|"Clear the disk space quota for each directory<dirName>.\n"
operator|+
literal|"\t\tFor each directory, attempt to clear the quota. An error will be reported if\n"
operator|+
literal|"\t\t1. the directory does not exist or is a file, or\n"
operator|+
literal|"\t\t2. user is not an administrator.\n"
operator|+
literal|"\t\tIt does not fault if the directory has no quota."
decl_stmt|;
comment|/** Constructor */
DECL|method|ClearSpaceQuotaCommand (String[] args, int pos, FileSystem fs)
name|ClearSpaceQuotaCommand
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|pos
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|CommandFormat
name|c
init|=
operator|new
name|CommandFormat
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|c
operator|.
name|parse
argument_list|(
name|args
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|this
operator|.
name|args
operator|=
name|parameters
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
comment|/** Check if a command is the clrQuota command      *       * @param cmd A string representation of a command starting with "-"      * @return true if this is a clrQuota command; false otherwise      */
DECL|method|matches (String cmd)
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
operator|(
literal|"-"
operator|+
name|NAME
operator|)
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCommandName ()
specifier|public
name|String
name|getCommandName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|run (Path path)
specifier|public
name|void
name|run
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** A class that supports command setQuota */
DECL|class|SetSpaceQuotaCommand
specifier|private
specifier|static
class|class
name|SetSpaceQuotaCommand
extends|extends
name|DFSAdminCommand
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"setSpaceQuota"
decl_stmt|;
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"-"
operator|+
name|NAME
operator|+
literal|"<quota><dirname>...<dirname>"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
name|USAGE
operator|+
literal|": "
operator|+
literal|"Set the disk space quota<quota> for each directory<dirName>.\n"
operator|+
literal|"\t\tThe space quota is a long integer that puts a hard limit\n"
operator|+
literal|"\t\ton the total size of all the files under the directory tree.\n"
operator|+
literal|"\t\tThe extra space required for replication is also counted. E.g.\n"
operator|+
literal|"\t\ta 1GB file with replication of 3 consumes 3GB of the quota.\n\n"
operator|+
literal|"\t\tQuota can also be specified with a binary prefix for terabytes,\n"
operator|+
literal|"\t\tpetabytes etc (e.g. 50t is 50TB, 5m is 5MB, 3p is 3PB).\n"
operator|+
literal|"\t\tFor each directory, attempt to set the quota. An error will be reported if\n"
operator|+
literal|"\t\t1. N is not a positive integer, or\n"
operator|+
literal|"\t\t2. user is not an administrator, or\n"
operator|+
literal|"\t\t3. the directory does not exist or is a file, or\n"
decl_stmt|;
DECL|field|quota
specifier|private
name|long
name|quota
decl_stmt|;
comment|// the quota to be set
comment|/** Constructor */
DECL|method|SetSpaceQuotaCommand (String[] args, int pos, FileSystem fs)
name|SetSpaceQuotaCommand
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|pos
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|CommandFormat
name|c
init|=
operator|new
name|CommandFormat
argument_list|(
literal|2
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|c
operator|.
name|parse
argument_list|(
name|args
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|str
init|=
name|parameters
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
try|try
block|{
name|quota
operator|=
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"\""
operator|+
name|str
operator|+
literal|"\" is not a valid value for a quota."
argument_list|)
throw|;
block|}
name|this
operator|.
name|args
operator|=
name|parameters
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
comment|/** Check if a command is the setQuota command      *       * @param cmd A string representation of a command starting with "-"      * @return true if this is a count command; false otherwise      */
DECL|method|matches (String cmd)
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
operator|(
literal|"-"
operator|+
name|NAME
operator|)
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCommandName ()
specifier|public
name|String
name|getCommandName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|run (Path path)
specifier|public
name|void
name|run
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
argument_list|,
name|quota
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RollingUpgradeCommand
specifier|private
specifier|static
class|class
name|RollingUpgradeCommand
block|{
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"rollingUpgrade"
decl_stmt|;
DECL|field|USAGE
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"-"
operator|+
name|NAME
operator|+
literal|" [<query|prepare|finalize>]"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
name|USAGE
operator|+
literal|":\n"
operator|+
literal|"     query: query the current rolling upgrade status.\n"
operator|+
literal|"   prepare: prepare a new rolling upgrade.\n"
operator|+
literal|"  finalize: finalize the current rolling upgrade."
decl_stmt|;
comment|/** Check if a command is the rollingUpgrade command      *       * @param cmd A string representation of a command starting with "-"      * @return true if this is a clrQuota command; false otherwise      */
DECL|method|matches (String cmd)
specifier|static
name|boolean
name|matches
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
operator|(
literal|"-"
operator|+
name|NAME
operator|)
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
return|;
block|}
DECL|method|printMessage (RollingUpgradeInfo info, PrintStream out)
specifier|private
specifier|static
name|void
name|printMessage
parameter_list|(
name|RollingUpgradeInfo
name|info
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|isStarted
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|info
operator|.
name|createdRollbackImages
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Preparing for upgrade. Data is being saved for rollback."
operator|+
literal|"\nRun \"dfsadmin -rollingUpgrade query\" to check the status"
operator|+
literal|"\nfor proceeding with rolling upgrade"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|info
operator|.
name|isFinalized
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Proceed with rolling upgrade:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Rolling upgrade is finalized."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"There is no rolling upgrade in progress."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|run (DistributedFileSystem dfs, String[] argv, int idx)
specifier|static
name|int
name|run
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|String
index|[]
name|argv
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RollingUpgradeAction
name|action
init|=
name|RollingUpgradeAction
operator|.
name|fromString
argument_list|(
name|argv
operator|.
name|length
operator|>=
literal|2
condition|?
name|argv
index|[
literal|1
index|]
else|:
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to covert \""
operator|+
name|argv
index|[
literal|1
index|]
operator|+
literal|"\" to "
operator|+
name|RollingUpgradeAction
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|action
operator|+
literal|" rolling upgrade ..."
argument_list|)
expr_stmt|;
specifier|final
name|RollingUpgradeInfo
name|info
init|=
name|dfs
operator|.
name|rollingUpgrade
argument_list|(
name|action
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|QUERY
case|:
break|break;
case|case
name|PREPARE
case|:
name|Preconditions
operator|.
name|checkState
argument_list|(
name|info
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FINALIZE
case|:
name|Preconditions
operator|.
name|checkState
argument_list|(
name|info
operator|.
name|isFinalized
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|printMessage
argument_list|(
name|info
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Construct a DFSAdmin object.    */
DECL|method|DFSAdmin ()
specifier|public
name|DFSAdmin
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a DFSAdmin object.    */
DECL|method|DFSAdmin (Configuration conf)
specifier|public
name|DFSAdmin
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getDFS ()
specifier|protected
name|DistributedFileSystem
name|getDFS
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|getFS
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"FileSystem "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
operator|+
literal|" is not an HDFS file system"
argument_list|)
throw|;
block|}
return|return
operator|(
name|DistributedFileSystem
operator|)
name|fs
return|;
block|}
comment|/**    * Gives a report on how the FileSystem is doing.    * @exception IOException if the filesystem does not exist.    */
DECL|method|report (String[] argv, int i)
specifier|public
name|void
name|report
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|FsStatus
name|ds
init|=
name|dfs
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|long
name|capacity
init|=
name|ds
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|long
name|used
init|=
name|ds
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|long
name|remaining
init|=
name|ds
operator|.
name|getRemaining
argument_list|()
decl_stmt|;
name|long
name|presentCapacity
init|=
name|used
operator|+
name|remaining
decl_stmt|;
name|boolean
name|mode
init|=
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Safe mode is ON"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Configured Capacity: "
operator|+
name|capacity
operator|+
literal|" ("
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|capacity
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Present Capacity: "
operator|+
name|presentCapacity
operator|+
literal|" ("
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|presentCapacity
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DFS Remaining: "
operator|+
name|remaining
operator|+
literal|" ("
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|remaining
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DFS Used: "
operator|+
name|used
operator|+
literal|" ("
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|used
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DFS Used%: "
operator|+
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|used
operator|/
operator|(
name|double
operator|)
name|presentCapacity
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|/* These counts are not always upto date. They are updated after        * iteration of an internal list. Should be updated in a few seconds to       * minutes. Use "-metaSave" to list of all such blocks and accurate       * counts.      */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Under replicated blocks: "
operator|+
name|dfs
operator|.
name|getUnderReplicatedBlocksCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Blocks with corrupt replicas: "
operator|+
name|dfs
operator|.
name|getCorruptBlocksCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Missing blocks: "
operator|+
name|dfs
operator|.
name|getMissingBlocksCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-------------------------------------------------"
argument_list|)
expr_stmt|;
comment|// Parse arguments for filtering the node list
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|argv
argument_list|)
decl_stmt|;
comment|// Truncate already handled arguments before parsing report()-specific ones
name|args
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|args
operator|.
name|subList
argument_list|(
name|i
argument_list|,
name|args
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|listLive
init|=
name|StringUtils
operator|.
name|popOption
argument_list|(
literal|"-live"
argument_list|,
name|args
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|listDead
init|=
name|StringUtils
operator|.
name|popOption
argument_list|(
literal|"-dead"
argument_list|,
name|args
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|listDecommissioning
init|=
name|StringUtils
operator|.
name|popOption
argument_list|(
literal|"-decommissioning"
argument_list|,
name|args
argument_list|)
decl_stmt|;
comment|// If no filter flags are found, then list all DN types
name|boolean
name|listAll
init|=
operator|(
operator|!
name|listLive
operator|&&
operator|!
name|listDead
operator|&&
operator|!
name|listDecommissioning
operator|)
decl_stmt|;
if|if
condition|(
name|listAll
operator|||
name|listLive
condition|)
block|{
name|DatanodeInfo
index|[]
name|live
init|=
name|dfs
operator|.
name|getDataNodeStats
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|live
operator|.
name|length
operator|>
literal|0
operator|||
name|listLive
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Live datanodes ("
operator|+
name|live
operator|.
name|length
operator|+
literal|"):\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|live
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|live
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dn
operator|.
name|getDatanodeReport
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|listAll
operator|||
name|listDead
condition|)
block|{
name|DatanodeInfo
index|[]
name|dead
init|=
name|dfs
operator|.
name|getDataNodeStats
argument_list|(
name|DatanodeReportType
operator|.
name|DEAD
argument_list|)
decl_stmt|;
if|if
condition|(
name|dead
operator|.
name|length
operator|>
literal|0
operator|||
name|listDead
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dead datanodes ("
operator|+
name|dead
operator|.
name|length
operator|+
literal|"):\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dead
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|dead
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dn
operator|.
name|getDatanodeReport
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|listAll
operator|||
name|listDecommissioning
condition|)
block|{
name|DatanodeInfo
index|[]
name|decom
init|=
name|dfs
operator|.
name|getDataNodeStats
argument_list|(
name|DatanodeReportType
operator|.
name|DECOMMISSIONING
argument_list|)
decl_stmt|;
if|if
condition|(
name|decom
operator|.
name|length
operator|>
literal|0
operator|||
name|listDecommissioning
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Decommissioning datanodes ("
operator|+
name|decom
operator|.
name|length
operator|+
literal|"):\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|decom
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|decom
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dn
operator|.
name|getDatanodeReport
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Safe mode maintenance command.    * Usage: java DFSAdmin -safemode [enter | leave | get]    * @param argv List of of command line parameters.    * @param idx The index of the command that is being processed.    * @exception IOException if the filesystem does not exist.    */
DECL|method|setSafeMode (String[] argv, int idx)
specifier|public
name|void
name|setSafeMode
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|idx
operator|!=
name|argv
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|printUsage
argument_list|(
literal|"-safemode"
argument_list|)
expr_stmt|;
return|return;
block|}
name|HdfsConstants
operator|.
name|SafeModeAction
name|action
decl_stmt|;
name|Boolean
name|waitExitSafe
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"leave"
operator|.
name|equalsIgnoreCase
argument_list|(
name|argv
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
name|action
operator|=
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"enter"
operator|.
name|equalsIgnoreCase
argument_list|(
name|argv
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
name|action
operator|=
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"get"
operator|.
name|equalsIgnoreCase
argument_list|(
name|argv
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
name|action
operator|=
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_GET
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"wait"
operator|.
name|equalsIgnoreCase
argument_list|(
name|argv
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
name|action
operator|=
name|HdfsConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_GET
expr_stmt|;
name|waitExitSafe
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|printUsage
argument_list|(
literal|"-safemode"
argument_list|)
expr_stmt|;
return|return;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|Configuration
name|dfsConf
init|=
name|dfs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaEnabled
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|dfsConf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaEnabled
condition|)
block|{
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|dfsConf
argument_list|,
name|nsId
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|ClientProtocol
name|haNn
init|=
name|proxy
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|boolean
name|inSafeMode
init|=
name|haNn
operator|.
name|setSafeMode
argument_list|(
name|action
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|waitExitSafe
condition|)
block|{
name|inSafeMode
operator|=
name|waitExitSafeMode
argument_list|(
name|haNn
argument_list|,
name|inSafeMode
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Safe mode is "
operator|+
operator|(
name|inSafeMode
condition|?
literal|"ON"
else|:
literal|"OFF"
operator|)
operator|+
literal|" in "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|inSafeMode
init|=
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|waitExitSafe
condition|)
block|{
name|inSafeMode
operator|=
name|waitExitSafeMode
argument_list|(
name|dfs
argument_list|,
name|inSafeMode
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Safe mode is "
operator|+
operator|(
name|inSafeMode
condition|?
literal|"ON"
else|:
literal|"OFF"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitExitSafeMode (DistributedFileSystem dfs, boolean inSafeMode)
specifier|private
name|boolean
name|waitExitSafeMode
parameter_list|(
name|DistributedFileSystem
name|dfs
parameter_list|,
name|boolean
name|inSafeMode
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|inSafeMode
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wait Interrupted"
argument_list|)
throw|;
block|}
name|inSafeMode
operator|=
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|inSafeMode
return|;
block|}
DECL|method|waitExitSafeMode (ClientProtocol nn, boolean inSafeMode)
specifier|private
name|boolean
name|waitExitSafeMode
parameter_list|(
name|ClientProtocol
name|nn
parameter_list|,
name|boolean
name|inSafeMode
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|inSafeMode
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wait Interrupted"
argument_list|)
throw|;
block|}
name|inSafeMode
operator|=
name|nn
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|inSafeMode
return|;
block|}
comment|/**    * Allow snapshot on a directory.    * Usage: java DFSAdmin -allowSnapshot snapshotDir    * @param argv List of of command line parameters.    * @exception IOException    */
DECL|method|allowSnapshot (String[] argv)
specifier|public
name|void
name|allowSnapshot
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|allowSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Allowing snaphot on "
operator|+
name|argv
index|[
literal|1
index|]
operator|+
literal|" succeeded"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Allow snapshot on a directory.    * Usage: java DFSAdmin -disallowSnapshot snapshotDir    * @param argv List of of command line parameters.    * @exception IOException    */
DECL|method|disallowSnapshot (String[] argv)
specifier|public
name|void
name|disallowSnapshot
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|disallowSnapshot
argument_list|(
operator|new
name|Path
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Disallowing snaphot on "
operator|+
name|argv
index|[
literal|1
index|]
operator|+
literal|" succeeded"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Command to ask the namenode to save the namespace.    * Usage: java DFSAdmin -saveNamespace    * @exception IOException     * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#saveNamespace()    */
DECL|method|saveNamespace ()
specifier|public
name|int
name|saveNamespace
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|Configuration
name|dfsConf
init|=
name|dfs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaEnabled
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|dfsConf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaEnabled
condition|)
block|{
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|dfsConf
argument_list|,
name|nsId
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|proxy
operator|.
name|getProxy
argument_list|()
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Save namespace successful for "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Save namespace successful"
argument_list|)
expr_stmt|;
block|}
name|exitCode
operator|=
literal|0
expr_stmt|;
return|return
name|exitCode
return|;
block|}
DECL|method|rollEdits ()
specifier|public
name|int
name|rollEdits
parameter_list|()
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|long
name|txid
init|=
name|dfs
operator|.
name|rollEdits
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully rolled edit logs."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"New segment starts at txid "
operator|+
name|txid
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Command to enable/disable/check restoring of failed storage replicas in the namenode.    * Usage: java DFSAdmin -restoreFailedStorage true|false|check    * @exception IOException     * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#restoreFailedStorage(String arg)    */
DECL|method|restoreFailedStorage (String arg)
specifier|public
name|int
name|restoreFailedStorage
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|arg
operator|.
name|equals
argument_list|(
literal|"check"
argument_list|)
operator|&&
operator|!
name|arg
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
operator|&&
operator|!
name|arg
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"restoreFailedStorage valid args are true|false|check"
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|Configuration
name|dfsConf
init|=
name|dfs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaEnabled
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|dfsConf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaEnabled
condition|)
block|{
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|dfsConf
argument_list|,
name|nsId
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|Boolean
name|res
init|=
name|proxy
operator|.
name|getProxy
argument_list|()
operator|.
name|restoreFailedStorage
argument_list|(
name|arg
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"restoreFailedStorage is set to "
operator|+
name|res
operator|+
literal|" for "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Boolean
name|res
init|=
name|dfs
operator|.
name|restoreFailedStorage
argument_list|(
name|arg
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"restoreFailedStorage is set to "
operator|+
name|res
argument_list|)
expr_stmt|;
block|}
name|exitCode
operator|=
literal|0
expr_stmt|;
return|return
name|exitCode
return|;
block|}
comment|/**    * Command to ask the namenode to reread the hosts and excluded hosts     * file.    * Usage: java DFSAdmin -refreshNodes    * @exception IOException     */
DECL|method|refreshNodes ()
specifier|public
name|int
name|refreshNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|Configuration
name|dfsConf
init|=
name|dfs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaEnabled
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|dfsConf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaEnabled
condition|)
block|{
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|dfsConf
argument_list|,
name|nsId
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|proxy
operator|.
name|getProxy
argument_list|()
operator|.
name|refreshNodes
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh nodes successful for "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dfs
operator|.
name|refreshNodes
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh nodes successful"
argument_list|)
expr_stmt|;
block|}
name|exitCode
operator|=
literal|0
expr_stmt|;
return|return
name|exitCode
return|;
block|}
comment|/**    * Command to ask the namenode to set the balancer bandwidth for all of the    * datanodes.    * Usage: java DFSAdmin -setBalancerBandwidth bandwidth    * @param argv List of of command line parameters.    * @param idx The index of the command that is being processed.    * @exception IOException     */
DECL|method|setBalancerBandwidth (String[] argv, int idx)
specifier|public
name|int
name|setBalancerBandwidth
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bandwidth
decl_stmt|;
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|bandwidth
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|argv
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"NumberFormatException: "
operator|+
name|nfe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-setBalancerBandwidth<bandwidth in bytes per second>]"
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|FileSystem
name|fs
init|=
name|getFS
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"FileSystem is "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|Configuration
name|dfsConf
init|=
name|dfs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaEnabled
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|dfsConf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaEnabled
condition|)
block|{
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|dfsConf
argument_list|,
name|nsId
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|proxy
operator|.
name|getProxy
argument_list|()
operator|.
name|setBalancerBandwidth
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Balancer bandwidth is set to "
operator|+
name|bandwidth
operator|+
literal|" for "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dfs
operator|.
name|setBalancerBandwidth
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Balancer bandwidth is set to "
operator|+
name|bandwidth
argument_list|)
expr_stmt|;
block|}
name|exitCode
operator|=
literal|0
expr_stmt|;
return|return
name|exitCode
return|;
block|}
comment|/**    * Download the most recent fsimage from the name node, and save it to a local    * file in the given directory.    *     * @param argv    *          List of of command line parameters.    * @param idx    *          The index of the command that is being processed.    * @return an exit code indicating success or failure.    * @throws IOException    */
DECL|method|fetchImage (final String[] argv, final int idx)
specifier|public
name|int
name|fetchImage
parameter_list|(
specifier|final
name|String
index|[]
name|argv
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|infoServer
init|=
name|DFSUtil
operator|.
name|getInfoServer
argument_list|(
name|HAUtil
operator|.
name|getAddressOfActive
argument_list|(
name|getDFS
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|,
name|DFSUtil
operator|.
name|getHttpClientScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|SecurityUtil
operator|.
name|doAsCurrentUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|TransferFsImage
operator|.
name|downloadMostRecentImageToDirectory
argument_list|(
name|infoServer
argument_list|,
operator|new
name|File
argument_list|(
name|argv
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|printHelp (String cmd)
specifier|private
name|void
name|printHelp
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|summary
init|=
literal|"hadoop dfsadmin performs DFS administrative commands.\n"
operator|+
literal|"The full syntax is: \n\n"
operator|+
literal|"hadoop dfsadmin\n"
operator|+
literal|"\t[-report [-live] [-dead] [-decommissioning]]\n"
operator|+
literal|"\t[-safemode<enter | leave | get | wait>]\n"
operator|+
literal|"\t[-saveNamespace]\n"
operator|+
literal|"\t[-rollEdits]\n"
operator|+
literal|"\t[-restoreFailedStorage true|false|check]\n"
operator|+
literal|"\t[-refreshNodes]\n"
operator|+
literal|"\t["
operator|+
name|SetQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]\n"
operator|+
literal|"\t["
operator|+
name|ClearQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]\n"
operator|+
literal|"\t["
operator|+
name|SetSpaceQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]\n"
operator|+
literal|"\t["
operator|+
name|ClearSpaceQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]\n"
operator|+
literal|"\t[-finalizeUpgrade]\n"
operator|+
literal|"\t["
operator|+
name|RollingUpgradeCommand
operator|.
name|USAGE
operator|+
literal|"]\n"
operator|+
literal|"\t[-refreshServiceAcl]\n"
operator|+
literal|"\t[-refreshUserToGroupsMappings]\n"
operator|+
literal|"\t[-refreshSuperUserGroupsConfiguration]\n"
operator|+
literal|"\t[-refreshCallQueue]\n"
operator|+
literal|"\t[-refresh<host:ipc_port><key> [arg1..argn]\n"
operator|+
literal|"\t[-printTopology]\n"
operator|+
literal|"\t[-refreshNamenodes datanodehost:port]\n"
operator|+
literal|"\t[-deleteBlockPool datanodehost:port blockpoolId [force]]\n"
operator|+
literal|"\t[-setBalancerBandwidth<bandwidth>]\n"
operator|+
literal|"\t[-fetchImage<local directory>]\n"
operator|+
literal|"\t[-allowSnapshot<snapshotDir>]\n"
operator|+
literal|"\t[-disallowSnapshot<snapshotDir>]\n"
operator|+
literal|"\t[-shutdownDatanode<datanode_host:ipc_port> [upgrade]]\n"
operator|+
literal|"\t[-getDatanodeInfo<datanode_host:ipc_port>\n"
operator|+
literal|"\t[-help [cmd]]\n"
decl_stmt|;
name|String
name|report
init|=
literal|"-report [-live] [-dead] [-decommissioning]:\n"
operator|+
literal|"\tReports basic filesystem information and statistics.\n"
operator|+
literal|"\tOptional flags may be used to filter the list of displayed DNs.\n"
decl_stmt|;
name|String
name|safemode
init|=
literal|"-safemode<enter|leave|get|wait>:  Safe mode maintenance command.\n"
operator|+
literal|"\t\tSafe mode is a Namenode state in which it\n"
operator|+
literal|"\t\t\t1.  does not accept changes to the name space (read-only)\n"
operator|+
literal|"\t\t\t2.  does not replicate or delete blocks.\n"
operator|+
literal|"\t\tSafe mode is entered automatically at Namenode startup, and\n"
operator|+
literal|"\t\tleaves safe mode automatically when the configured minimum\n"
operator|+
literal|"\t\tpercentage of blocks satisfies the minimum replication\n"
operator|+
literal|"\t\tcondition.  Safe mode can also be entered manually, but then\n"
operator|+
literal|"\t\tit can only be turned off manually as well.\n"
decl_stmt|;
name|String
name|saveNamespace
init|=
literal|"-saveNamespace:\t"
operator|+
literal|"Save current namespace into storage directories and reset edits log.\n"
operator|+
literal|"\t\tRequires superuser permissions and safe mode.\n"
decl_stmt|;
name|String
name|rollEdits
init|=
literal|"-rollEdits:\t"
operator|+
literal|"Rolls the edit log.\n"
operator|+
literal|"\t\tRequires superuser permissions.\n"
decl_stmt|;
name|String
name|restoreFailedStorage
init|=
literal|"-restoreFailedStorage:\t"
operator|+
literal|"Set/Unset/Check flag to attempt restore of failed storage replicas if they become available.\n"
operator|+
literal|"\t\tRequires superuser permissions.\n"
decl_stmt|;
name|String
name|refreshNodes
init|=
literal|"-refreshNodes: \tUpdates the namenode with the "
operator|+
literal|"set of datanodes allowed to connect to the namenode.\n\n"
operator|+
literal|"\t\tNamenode re-reads datanode hostnames from the file defined by \n"
operator|+
literal|"\t\tdfs.hosts, dfs.hosts.exclude configuration parameters.\n"
operator|+
literal|"\t\tHosts defined in dfs.hosts are the datanodes that are part of \n"
operator|+
literal|"\t\tthe cluster. If there are entries in dfs.hosts, only the hosts \n"
operator|+
literal|"\t\tin it are allowed to register with the namenode.\n\n"
operator|+
literal|"\t\tEntries in dfs.hosts.exclude are datanodes that need to be \n"
operator|+
literal|"\t\tdecommissioned. Datanodes complete decommissioning when \n"
operator|+
literal|"\t\tall the replicas from them are replicated to other datanodes.\n"
operator|+
literal|"\t\tDecommissioned nodes are not automatically shutdown and \n"
operator|+
literal|"\t\tare not chosen for writing new replicas.\n"
decl_stmt|;
name|String
name|finalizeUpgrade
init|=
literal|"-finalizeUpgrade: Finalize upgrade of HDFS.\n"
operator|+
literal|"\t\tDatanodes delete their previous version working directories,\n"
operator|+
literal|"\t\tfollowed by Namenode doing the same.\n"
operator|+
literal|"\t\tThis completes the upgrade process.\n"
decl_stmt|;
name|String
name|metaSave
init|=
literal|"-metasave<filename>: \tSave Namenode's primary data structures\n"
operator|+
literal|"\t\tto<filename> in the directory specified by hadoop.log.dir property.\n"
operator|+
literal|"\t\t<filename> is overwritten if it exists.\n"
operator|+
literal|"\t\t<filename> will contain one line for each of the following\n"
operator|+
literal|"\t\t\t1. Datanodes heart beating with Namenode\n"
operator|+
literal|"\t\t\t2. Blocks waiting to be replicated\n"
operator|+
literal|"\t\t\t3. Blocks currrently being replicated\n"
operator|+
literal|"\t\t\t4. Blocks waiting to be deleted\n"
decl_stmt|;
name|String
name|refreshServiceAcl
init|=
literal|"-refreshServiceAcl: Reload the service-level authorization policy file\n"
operator|+
literal|"\t\tNamenode will reload the authorization policy file.\n"
decl_stmt|;
name|String
name|refreshUserToGroupsMappings
init|=
literal|"-refreshUserToGroupsMappings: Refresh user-to-groups mappings\n"
decl_stmt|;
name|String
name|refreshSuperUserGroupsConfiguration
init|=
literal|"-refreshSuperUserGroupsConfiguration: Refresh superuser proxy groups mappings\n"
decl_stmt|;
name|String
name|refreshCallQueue
init|=
literal|"-refreshCallQueue: Reload the call queue from config\n"
decl_stmt|;
name|String
name|genericRefresh
init|=
literal|"-refresh: Arguments are<hostname:port><resource_identifier> [arg1..argn]\n"
operator|+
literal|"\tTriggers a runtime-refresh of the resource specified by<resource_identifier>\n"
operator|+
literal|"\ton<hostname:port>. All other args after are sent to the host."
decl_stmt|;
name|String
name|printTopology
init|=
literal|"-printTopology: Print a tree of the racks and their\n"
operator|+
literal|"\t\tnodes as reported by the Namenode\n"
decl_stmt|;
name|String
name|refreshNamenodes
init|=
literal|"-refreshNamenodes: Takes a datanodehost:port as argument,\n"
operator|+
literal|"\t\tFor the given datanode, reloads the configuration files,\n"
operator|+
literal|"\t\tstops serving the removed block-pools\n"
operator|+
literal|"\t\tand starts serving new block-pools\n"
decl_stmt|;
name|String
name|deleteBlockPool
init|=
literal|"-deleteBlockPool: Arguments are datanodehost:port, blockpool id\n"
operator|+
literal|"\t\t and an optional argument \"force\". If force is passed,\n"
operator|+
literal|"\t\t block pool directory for the given blockpool id on the given\n"
operator|+
literal|"\t\t datanode is deleted along with its contents, otherwise\n"
operator|+
literal|"\t\t the directory is deleted only if it is empty. The command\n"
operator|+
literal|"\t\t will fail if datanode is still serving the block pool.\n"
operator|+
literal|"\t\t   Refer to refreshNamenodes to shutdown a block pool\n"
operator|+
literal|"\t\t service on a datanode.\n"
decl_stmt|;
name|String
name|setBalancerBandwidth
init|=
literal|"-setBalancerBandwidth<bandwidth>:\n"
operator|+
literal|"\tChanges the network bandwidth used by each datanode during\n"
operator|+
literal|"\tHDFS block balancing.\n\n"
operator|+
literal|"\t\t<bandwidth> is the maximum number of bytes per second\n"
operator|+
literal|"\t\tthat will be used by each datanode. This value overrides\n"
operator|+
literal|"\t\tthe dfs.balance.bandwidthPerSec parameter.\n\n"
operator|+
literal|"\t\t--- NOTE: The new value is not persistent on the DataNode.---\n"
decl_stmt|;
name|String
name|fetchImage
init|=
literal|"-fetchImage<local directory>:\n"
operator|+
literal|"\tDownloads the most recent fsimage from the Name Node and saves it in"
operator|+
literal|"\tthe specified local directory.\n"
decl_stmt|;
name|String
name|allowSnapshot
init|=
literal|"-allowSnapshot<snapshotDir>:\n"
operator|+
literal|"\tAllow snapshots to be taken on a directory.\n"
decl_stmt|;
name|String
name|disallowSnapshot
init|=
literal|"-disallowSnapshot<snapshotDir>:\n"
operator|+
literal|"\tDo not allow snapshots to be taken on a directory any more.\n"
decl_stmt|;
name|String
name|shutdownDatanode
init|=
literal|"-shutdownDatanode<datanode_host:ipc_port> [upgrade]\n"
operator|+
literal|"\tSubmit a shutdown request for the given datanode. If an optional\n"
operator|+
literal|"\t\"upgrade\" argument is specified, clients accessing the datanode\n"
operator|+
literal|"\twill be advised to wait for it to restart and the fast start-up\n"
operator|+
literal|"\tmode will be enabled. When the restart does not happen in time,\n"
operator|+
literal|"\tclients will timeout and ignore the datanode. In such case, the\n"
operator|+
literal|"\tfast start-up mode will also be disabled.\n"
decl_stmt|;
name|String
name|getDatanodeInfo
init|=
literal|"-getDatanodeInfo<datanode_host:ipc_port>\n"
operator|+
literal|"\tGet the information about the given datanode. This command can\n"
operator|+
literal|"\tbe used for checking if a datanode is alive.\n"
decl_stmt|;
name|String
name|help
init|=
literal|"-help [cmd]: \tDisplays help for the given command or all commands if none\n"
operator|+
literal|"\t\tis specified.\n"
decl_stmt|;
if|if
condition|(
literal|"report"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"safemode"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|safemode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"saveNamespace"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|saveNamespace
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rollEdits"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rollEdits
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"restoreFailedStorage"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|restoreFailedStorage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshNodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshNodes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"finalizeUpgrade"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|finalizeUpgrade
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RollingUpgradeCommand
operator|.
name|matches
argument_list|(
literal|"-"
operator|+
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RollingUpgradeCommand
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"metasave"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|metaSave
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SetQuotaCommand
operator|.
name|matches
argument_list|(
literal|"-"
operator|+
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|SetQuotaCommand
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ClearQuotaCommand
operator|.
name|matches
argument_list|(
literal|"-"
operator|+
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ClearQuotaCommand
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SetSpaceQuotaCommand
operator|.
name|matches
argument_list|(
literal|"-"
operator|+
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|SetSpaceQuotaCommand
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ClearSpaceQuotaCommand
operator|.
name|matches
argument_list|(
literal|"-"
operator|+
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ClearSpaceQuotaCommand
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshServiceAcl"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshServiceAcl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshUserToGroupsMappings
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshSuperUserGroupsConfiguration
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshCallQueue"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshCallQueue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refresh"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|genericRefresh
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"printTopology"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|printTopology
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refreshNamenodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshNamenodes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"deleteBlockPool"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|deleteBlockPool
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"setBalancerBandwidth"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|setBalancerBandwidth
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fetchImage"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fetchImage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"allowSnapshot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|allowSnapshot
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"disallowSnapshot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|disallowSnapshot
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"shutdownDatanode"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|shutdownDatanode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"getDatanodeInfo"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getDatanodeInfo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|summary
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|safemode
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|saveNamespace
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rollEdits
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|restoreFailedStorage
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshNodes
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|finalizeUpgrade
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|RollingUpgradeCommand
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|metaSave
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|SetQuotaCommand
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ClearQuotaCommand
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|SetSpaceQuotaCommand
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ClearSpaceQuotaCommand
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshServiceAcl
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshUserToGroupsMappings
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshSuperUserGroupsConfiguration
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshCallQueue
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|genericRefresh
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|printTopology
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|refreshNamenodes
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|deleteBlockPool
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|setBalancerBandwidth
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fetchImage
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|allowSnapshot
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|disallowSnapshot
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|shutdownDatanode
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getDatanodeInfo
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Command to ask the namenode to finalize previously performed upgrade.    * Usage: java DFSAdmin -finalizeUpgrade    * @exception IOException     */
DECL|method|finalizeUpgrade ()
specifier|public
name|int
name|finalizeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|Configuration
name|dfsConf
init|=
name|dfs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaAndLogicalUri
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|dfsConf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaAndLogicalUri
condition|)
block|{
comment|// In the case of HA and logical URI, run finalizeUpgrade for all
comment|// NNs in this nameservice.
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ClientProtocol
argument_list|>
name|namenodes
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|dfsConf
argument_list|,
name|nsId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|HAUtil
operator|.
name|isAtLeastOneActive
argument_list|(
name|namenodes
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot finalize with no NameNode active"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|dfsConf
argument_list|,
name|nsId
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|proxy
operator|.
name|getProxy
argument_list|()
operator|.
name|finalizeUpgrade
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finalize upgrade successful for "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dfs
operator|.
name|finalizeUpgrade
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Finalize upgrade successful"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Dumps DFS data structures into specified file.    * Usage: java DFSAdmin -metasave filename    * @param argv List of of command line parameters.    * @param idx The index of the command that is being processed.    * @exception IOException if an error occurred while accessing    *            the file or path.    */
DECL|method|metaSave (String[] argv, int idx)
specifier|public
name|int
name|metaSave
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|pathname
init|=
name|argv
index|[
name|idx
index|]
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|Configuration
name|dfsConf
init|=
name|dfs
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaEnabled
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|dfsConf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaEnabled
condition|)
block|{
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|dfsConf
argument_list|,
name|nsId
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|proxy
operator|.
name|getProxy
argument_list|()
operator|.
name|metaSave
argument_list|(
name|pathname
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created metasave file "
operator|+
name|pathname
operator|+
literal|" in the log "
operator|+
literal|"directory of namenode "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dfs
operator|.
name|metaSave
argument_list|(
name|pathname
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created metasave file "
operator|+
name|pathname
operator|+
literal|" in the log "
operator|+
literal|"directory of namenode "
operator|+
name|dfs
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Display each rack and the nodes assigned to that rack, as determined    * by the NameNode, in a hierarchical manner.  The nodes and racks are    * sorted alphabetically.    *     * @throws IOException If an error while getting datanode report    */
DECL|method|printTopology ()
specifier|public
name|int
name|printTopology
parameter_list|()
throws|throws
name|IOException
block|{
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|report
init|=
name|dfs
operator|.
name|getDataNodeStats
argument_list|()
decl_stmt|;
comment|// Build a map of rack -> nodes from the datanode report
name|HashMap
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|tree
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dni
range|:
name|report
control|)
block|{
name|String
name|location
init|=
name|dni
operator|.
name|getNetworkLocation
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|dni
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tree
operator|.
name|containsKey
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|tree
operator|.
name|put
argument_list|(
name|location
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tree
operator|.
name|get
argument_list|(
name|location
argument_list|)
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Sort the racks (and nodes) alphabetically, display in order
name|ArrayList
argument_list|<
name|String
argument_list|>
name|racks
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|tree
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|racks
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|r
range|:
name|racks
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rack: "
operator|+
name|r
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|tree
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|nodes
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"   "
operator|+
name|n
argument_list|)
expr_stmt|;
name|String
name|hostname
init|=
name|NetUtils
operator|.
name|getHostNameOfIP
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostname
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" ("
operator|+
name|hostname
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|getUGI ()
specifier|private
specifier|static
name|UserGroupInformation
name|getUGI
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
comment|/**    * Refresh the authorization policy on the {@link NameNode}.    * @return exitcode 0 on success, non-zero on failure    * @throws IOException    */
DECL|method|refreshServiceAcl ()
specifier|public
name|int
name|refreshServiceAcl
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// for security authorization
comment|// server principal for this call
comment|// should be NN's one.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaEnabled
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|conf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaEnabled
condition|)
block|{
comment|// Run refreshServiceAcl for all NNs if HA is enabled
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|RefreshAuthorizationPolicyProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
name|RefreshAuthorizationPolicyProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|RefreshAuthorizationPolicyProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|proxy
operator|.
name|getProxy
argument_list|()
operator|.
name|refreshServiceAcl
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh service acl successful for "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Create the client
name|RefreshAuthorizationPolicyProtocol
name|refreshProtocol
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|RefreshAuthorizationPolicyProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
comment|// Refresh the authorization policy in-effect
name|refreshProtocol
operator|.
name|refreshServiceAcl
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh service acl successful"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Refresh the user-to-groups mappings on the {@link NameNode}.    * @return exitcode 0 on success, non-zero on failure    * @throws IOException    */
DECL|method|refreshUserToGroupsMappings ()
specifier|public
name|int
name|refreshUserToGroupsMappings
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// for security authorization
comment|// server principal for this call
comment|// should be NN's one.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaEnabled
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|conf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaEnabled
condition|)
block|{
comment|// Run refreshUserToGroupsMapings for all NNs if HA is enabled
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|RefreshUserMappingsProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|RefreshUserMappingsProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|proxy
operator|.
name|getProxy
argument_list|()
operator|.
name|refreshUserToGroupsMappings
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh user to groups mapping successful for "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Create the client
name|RefreshUserMappingsProtocol
name|refreshProtocol
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
comment|// Refresh the user-to-groups mappings
name|refreshProtocol
operator|.
name|refreshUserToGroupsMappings
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh user to groups mapping successful"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * refreshSuperUserGroupsConfiguration {@link NameNode}.    * @return exitcode 0 on success, non-zero on failure    * @throws IOException    */
DECL|method|refreshSuperUserGroupsConfiguration ()
specifier|public
name|int
name|refreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// for security authorization
comment|// server principal for this call
comment|// should be NAMENODE's one.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaEnabled
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|conf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaEnabled
condition|)
block|{
comment|// Run refreshSuperUserGroupsConfiguration for all NNs if HA is enabled
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|RefreshUserMappingsProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|RefreshUserMappingsProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|proxy
operator|.
name|getProxy
argument_list|()
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh super user groups configuration "
operator|+
literal|"successful for "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Create the client
name|RefreshUserMappingsProtocol
name|refreshProtocol
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|RefreshUserMappingsProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
comment|// Refresh the user-to-groups mappings
name|refreshProtocol
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh super user groups configuration successful"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|refreshCallQueue ()
specifier|public
name|int
name|refreshCallQueue
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// for security authorization
comment|// server principal for this call
comment|// should be NN's one.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|()
decl_stmt|;
name|URI
name|dfsUri
init|=
name|dfs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|boolean
name|isHaEnabled
init|=
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|conf
argument_list|,
name|dfsUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHaEnabled
condition|)
block|{
comment|// Run refreshCallQueue for all NNs if HA is enabled
name|String
name|nsId
init|=
name|dfsUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProxyAndInfo
argument_list|<
name|RefreshCallQueueProtocol
argument_list|>
argument_list|>
name|proxies
init|=
name|HAUtil
operator|.
name|getProxiesForAllNameNodesInNameservice
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
name|RefreshCallQueueProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProxyAndInfo
argument_list|<
name|RefreshCallQueueProtocol
argument_list|>
name|proxy
range|:
name|proxies
control|)
block|{
name|proxy
operator|.
name|getProxy
argument_list|()
operator|.
name|refreshCallQueue
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh call queue successful for "
operator|+
name|proxy
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Create the client
name|RefreshCallQueueProtocol
name|refreshProtocol
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|RefreshCallQueueProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
decl_stmt|;
comment|// Refresh the call queue
name|refreshProtocol
operator|.
name|refreshCallQueue
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh call queue successful"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|genericRefresh (String[] argv, int i)
specifier|public
name|int
name|genericRefresh
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hostport
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
name|identifier
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
index|[]
name|args
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|argv
argument_list|,
name|i
argument_list|,
name|argv
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// for security authorization
comment|// server principal for this call
comment|// should be NN's one.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the client
name|Class
argument_list|<
name|?
argument_list|>
name|xface
init|=
name|GenericRefreshProtocolPB
operator|.
name|class
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|hostport
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|xface
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|GenericRefreshProtocolPB
name|proxy
init|=
operator|(
name|GenericRefreshProtocolPB
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|xface
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|xface
argument_list|)
argument_list|,
name|address
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|GenericRefreshProtocol
name|xlator
init|=
operator|new
name|GenericRefreshProtocolClientSideTranslatorPB
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
comment|// Refresh
name|Collection
argument_list|<
name|RefreshResponse
argument_list|>
name|responses
init|=
name|xlator
operator|.
name|refresh
argument_list|(
name|identifier
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|int
name|returnCode
init|=
literal|0
decl_stmt|;
comment|// Print refresh responses
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refresh Responses:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|RefreshResponse
name|response
range|:
name|responses
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|response
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnCode
operator|==
literal|0
operator|&&
name|response
operator|.
name|getReturnCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// This is the first non-zero return code, so we should return this
name|returnCode
operator|=
name|response
operator|.
name|getReturnCode
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnCode
operator|!=
literal|0
operator|&&
name|response
operator|.
name|getReturnCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// Then now we have multiple non-zero return codes,
comment|// so we merge them into -1
name|returnCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|return
name|returnCode
return|;
block|}
comment|/**    * Displays format of commands.    * @param cmd The command that is being executed.    */
DECL|method|printUsage (String cmd)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
if|if
condition|(
literal|"-report"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-report] [-live] [-dead] [-decommissioning]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-safemode"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-safemode enter | leave | get | wait]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-allowSnapshot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-allowSnapshot<snapshotDir>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-disallowSnapshot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-disallowSnapshot<snapshotDir>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-saveNamespace"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-saveNamespace]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-rollEdits"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-rollEdits]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-restoreFailedStorage"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-restoreFailedStorage true|false|check ]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshNodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-refreshNodes]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-finalizeUpgrade"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-finalizeUpgrade]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RollingUpgradeCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" ["
operator|+
name|RollingUpgradeCommand
operator|.
name|USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-metasave"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-metasave filename]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SetQuotaCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" ["
operator|+
name|SetQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ClearQuotaCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" ["
operator|+
name|ClearQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SetSpaceQuotaCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" ["
operator|+
name|SetSpaceQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ClearSpaceQuotaCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" ["
operator|+
name|ClearSpaceQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshServiceAcl"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-refreshServiceAcl]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-refreshUserToGroupsMappings]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-refreshSuperUserGroupsConfiguration]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshCallQueue"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-refreshCallQueue]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refresh"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-refresh<hostname:port><resource_identifier> [arg1..argn]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-printTopology"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-printTopology]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshNamenodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-refreshNamenodes datanode-host:port]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-deleteBlockPool"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-deleteBlockPool datanode-host:port blockpoolId [force]]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-setBalancerBandwidth"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-setBalancerBandwidth<bandwidth in bytes per second>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-fetchImage"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-fetchImage<local directory>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-shutdownDatanode"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-shutdownDatanode<datanode_host:ipc_port> [upgrade]]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-getDatanodeInfo"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
operator|+
literal|" [-getDatanodeInfo<datanode_host:ipc_port>]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java DFSAdmin"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Note: Administrative commands can only be run as the HDFS superuser."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-report]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-safemode enter | leave | get | wait]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-allowSnapshot<snapshotDir>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-disallowSnapshot<snapshotDir>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-saveNamespace]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-rollEdits]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-restoreFailedStorage true|false|check]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshNodes]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-finalizeUpgrade]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|RollingUpgradeCommand
operator|.
name|USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-metasave filename]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshServiceAcl]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshUserToGroupsMappings]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshSuperUserGroupsConfiguration]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshCallQueue]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refresh]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-printTopology]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-refreshNamenodes datanodehost:port]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-deleteBlockPool datanode-host:port blockpoolId [force]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|SetQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|ClearQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|SetSpaceQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|ClearSpaceQuotaCommand
operator|.
name|USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-setBalancerBandwidth<bandwidth in bytes per second>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-fetchImage<local directory>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-shutdownDatanode<datanode_host:ipc_port> [upgrade]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-getDatanodeInfo<datanode_host:ipc_port>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-help [cmd]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param argv The parameters passed to this program.    * @exception Exception if the filesystem does not exist.    * @return 0 on success, non zero on error.    */
annotation|@
name|Override
DECL|method|run (String[] argv)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
comment|//
comment|// verify that we have enough command line parameters
comment|//
if|if
condition|(
literal|"-safemode"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-allowSnapshot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-disallowSnapshot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-report"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-saveNamespace"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-rollEdits"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-restoreFailedStorage"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-refreshNodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-finalizeUpgrade"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|RollingUpgradeCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
argument_list|<
literal|1
operator|||
name|argv
operator|.
name|length
argument_list|>
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-metasave"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-refreshServiceAcl"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-refresh"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-printTopology"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-refreshNamenodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-deleteBlockPool"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|argv
operator|.
name|length
operator|!=
literal|3
operator|)
operator|&&
operator|(
name|argv
operator|.
name|length
operator|!=
literal|4
operator|)
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-setBalancerBandwidth"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-fetchImage"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-shutdownDatanode"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|argv
operator|.
name|length
operator|!=
literal|2
operator|)
operator|&&
operator|(
name|argv
operator|.
name|length
operator|!=
literal|3
operator|)
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-getDatanodeInfo"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
comment|// initialize DFSAdmin
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RPC
operator|.
name|VersionMismatch
name|v
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Version Mismatch between client and server"
operator|+
literal|"... command aborted."
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bad connection to DFS... command aborted."
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|Exception
name|debugException
init|=
literal|null
decl_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|"-report"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|report
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-safemode"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|setSafeMode
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-allowSnapshot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|allowSnapshot
argument_list|(
name|argv
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-disallowSnapshot"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|disallowSnapshot
argument_list|(
name|argv
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-saveNamespace"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|saveNamespace
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-rollEdits"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|rollEdits
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-restoreFailedStorage"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|restoreFailedStorage
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshNodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshNodes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-finalizeUpgrade"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|finalizeUpgrade
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RollingUpgradeCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|RollingUpgradeCommand
operator|.
name|run
argument_list|(
name|getDFS
argument_list|()
argument_list|,
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-metasave"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|metaSave
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ClearQuotaCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
operator|new
name|ClearQuotaCommand
argument_list|(
name|argv
argument_list|,
name|i
argument_list|,
name|getDFS
argument_list|()
argument_list|)
operator|.
name|runAll
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SetQuotaCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
operator|new
name|SetQuotaCommand
argument_list|(
name|argv
argument_list|,
name|i
argument_list|,
name|getDFS
argument_list|()
argument_list|)
operator|.
name|runAll
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ClearSpaceQuotaCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
operator|new
name|ClearSpaceQuotaCommand
argument_list|(
name|argv
argument_list|,
name|i
argument_list|,
name|getDFS
argument_list|()
argument_list|)
operator|.
name|runAll
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SetSpaceQuotaCommand
operator|.
name|matches
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
operator|new
name|SetSpaceQuotaCommand
argument_list|(
name|argv
argument_list|,
name|i
argument_list|,
name|getDFS
argument_list|()
argument_list|)
operator|.
name|runAll
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshServiceAcl"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshServiceAcl
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshUserToGroupsMappings
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshCallQueue"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshCallQueue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refresh"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|genericRefresh
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-printTopology"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|printTopology
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshNamenodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshNamenodes
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-deleteBlockPool"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|deleteBlockPool
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-setBalancerBandwidth"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|setBalancerBandwidth
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-fetchImage"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|fetchImage
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-shutdownDatanode"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|shutdownDatanode
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-getDatanodeInfo"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|getDatanodeInfo
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|<
name|argv
operator|.
name|length
condition|)
block|{
name|printHelp
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printHelp
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": Unknown command"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|arge
parameter_list|)
block|{
name|debugException
operator|=
name|arge
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|arge
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
comment|//
comment|// This is a error returned by hadoop server. Print
comment|// out the first line of the error message, ignore the stack trace.
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|debugException
operator|=
name|e
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|debugException
operator|=
name|ex
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|debugException
operator|=
name|e
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception encountered:"
argument_list|,
name|debugException
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
DECL|method|getDataNodeProxy (String datanode)
specifier|private
name|ClientDatanodeProtocol
name|getDataNodeProxy
parameter_list|(
name|String
name|datanode
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|datanodeAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
comment|// Get the current configuration
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
comment|// For datanode proxy the server principal should be DN's one.
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the client
name|ClientDatanodeProtocol
name|dnProtocol
init|=
name|DFSUtil
operator|.
name|createClientDatanodeProtocolProxy
argument_list|(
name|datanodeAddr
argument_list|,
name|getUGI
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getSocketFactory
argument_list|(
name|conf
argument_list|,
name|ClientDatanodeProtocol
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|dnProtocol
return|;
block|}
DECL|method|deleteBlockPool (String[] argv, int i)
specifier|private
name|int
name|deleteBlockPool
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientDatanodeProtocol
name|dnProxy
init|=
name|getDataNodeProxy
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|boolean
name|force
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|-
literal|1
operator|==
name|i
operator|+
literal|2
condition|)
block|{
if|if
condition|(
literal|"force"
operator|.
name|equals
argument_list|(
name|argv
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
condition|)
block|{
name|force
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|printUsage
argument_list|(
literal|"-deleteBlockPool"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
name|dnProxy
operator|.
name|deleteBlockPool
argument_list|(
name|argv
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|force
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshNamenodes (String[] argv, int i)
specifier|private
name|int
name|refreshNamenodes
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|datanode
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
name|ClientDatanodeProtocol
name|refreshProtocol
init|=
name|getDataNodeProxy
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
name|refreshProtocol
operator|.
name|refreshNamenodes
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|shutdownDatanode (String[] argv, int i)
specifier|private
name|int
name|shutdownDatanode
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|dn
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
name|ClientDatanodeProtocol
name|dnProxy
init|=
name|getDataNodeProxy
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|boolean
name|upgrade
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|-
literal|1
operator|==
name|i
operator|+
literal|1
condition|)
block|{
if|if
condition|(
literal|"upgrade"
operator|.
name|equalsIgnoreCase
argument_list|(
name|argv
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
condition|)
block|{
name|upgrade
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|printUsage
argument_list|(
literal|"-shutdownDatanode"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
name|dnProxy
operator|.
name|shutdownDatanode
argument_list|(
name|upgrade
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Submitted a shutdown request to datanode "
operator|+
name|dn
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|getDatanodeInfo (String[] argv, int i)
specifier|private
name|int
name|getDatanodeInfo
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientDatanodeProtocol
name|dnProxy
init|=
name|getDataNodeProxy
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|DatanodeLocalInfo
name|dnInfo
init|=
name|dnProxy
operator|.
name|getDatanodeInfo
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dnInfo
operator|.
name|getDatanodeLocalReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Datanode unreachable."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * main() has some simple utility methods.    * @param argv Command line parameters.    * @exception Exception if the filesystem does not exist.    */
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSAdmin
argument_list|()
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

