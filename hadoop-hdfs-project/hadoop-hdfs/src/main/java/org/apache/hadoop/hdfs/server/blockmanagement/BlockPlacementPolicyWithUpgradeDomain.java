begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_comment
comment|/**  * The class is responsible for choosing the desired number of targets  * for placing block replicas that honors upgrade domain policy.  * Here is the replica placement strategy. If the writer is on a datanode,  * the 1st replica is placed on the local machine,  * otherwise a random datanode. The 2nd replica is placed on a datanode  * that is on a different rack. The 3rd replica is placed on a datanode  * which is on a different node of the rack as the second replica.  * All 3 replicas have unique upgrade domains.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BlockPlacementPolicyWithUpgradeDomain
specifier|public
class|class
name|BlockPlacementPolicyWithUpgradeDomain
extends|extends
name|BlockPlacementPolicyDefault
block|{
DECL|field|upgradeDomainFactor
specifier|private
name|int
name|upgradeDomainFactor
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (Configuration conf, FSClusterStats stats, NetworkTopology clusterMap, Host2NodesMap host2datanodeMap)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSClusterStats
name|stats
parameter_list|,
name|NetworkTopology
name|clusterMap
parameter_list|,
name|Host2NodesMap
name|host2datanodeMap
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|stats
argument_list|,
name|clusterMap
argument_list|,
name|host2datanodeMap
argument_list|)
expr_stmt|;
name|upgradeDomainFactor
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_UPGRADE_DOMAIN_FACTOR
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_UPGRADE_DOMAIN_FACTOR_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isGoodDatanode (DatanodeDescriptor node, int maxTargetPerRack, boolean considerLoad, List<DatanodeStorageInfo> results, boolean avoidStaleNodes)
specifier|protected
name|boolean
name|isGoodDatanode
parameter_list|(
name|DatanodeDescriptor
name|node
parameter_list|,
name|int
name|maxTargetPerRack
parameter_list|,
name|boolean
name|considerLoad
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|results
parameter_list|,
name|boolean
name|avoidStaleNodes
parameter_list|)
block|{
name|boolean
name|isGoodTarget
init|=
name|super
operator|.
name|isGoodDatanode
argument_list|(
name|node
argument_list|,
name|maxTargetPerRack
argument_list|,
name|considerLoad
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|isGoodTarget
condition|)
block|{
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|<
name|upgradeDomainFactor
condition|)
block|{
comment|// Each node in "results" has a different upgrade domain. Make sure
comment|// the candidate node introduces a new upgrade domain.
name|Set
argument_list|<
name|String
argument_list|>
name|upgradeDomains
init|=
name|getUpgradeDomains
argument_list|(
name|results
argument_list|)
decl_stmt|;
if|if
condition|(
name|upgradeDomains
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getUpgradeDomain
argument_list|()
argument_list|)
condition|)
block|{
name|isGoodTarget
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|isGoodTarget
return|;
block|}
comment|// If upgrade domain isn't specified, uses its XferAddr as upgrade domain.
comment|// Such fallback is useful to test the scenario where upgrade domain isn't
comment|// defined but the block placement is set to upgrade domain policy.
DECL|method|getUpgradeDomainWithDefaultValue (DatanodeInfo datanodeInfo)
specifier|public
name|String
name|getUpgradeDomainWithDefaultValue
parameter_list|(
name|DatanodeInfo
name|datanodeInfo
parameter_list|)
block|{
name|String
name|upgradeDomain
init|=
name|datanodeInfo
operator|.
name|getUpgradeDomain
argument_list|()
decl_stmt|;
if|if
condition|(
name|upgradeDomain
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Upgrade domain isn't defined for "
operator|+
name|datanodeInfo
argument_list|)
expr_stmt|;
name|upgradeDomain
operator|=
name|datanodeInfo
operator|.
name|getXferAddr
argument_list|()
expr_stmt|;
block|}
return|return
name|upgradeDomain
return|;
block|}
DECL|method|getUpgradeDomain (DatanodeStorageInfo storage)
specifier|private
name|String
name|getUpgradeDomain
parameter_list|(
name|DatanodeStorageInfo
name|storage
parameter_list|)
block|{
return|return
name|getUpgradeDomainWithDefaultValue
argument_list|(
name|storage
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getUpgradeDomains (List<DatanodeStorageInfo> results)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getUpgradeDomains
parameter_list|(
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|results
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|upgradeDomains
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
name|upgradeDomains
return|;
block|}
for|for
control|(
name|DatanodeStorageInfo
name|storageInfo
range|:
name|results
control|)
block|{
name|upgradeDomains
operator|.
name|add
argument_list|(
name|getUpgradeDomain
argument_list|(
name|storageInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|upgradeDomains
return|;
block|}
DECL|method|getUpgradeDomainsFromNodes (DatanodeInfo[] nodes)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getUpgradeDomainsFromNodes
parameter_list|(
name|DatanodeInfo
index|[]
name|nodes
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|upgradeDomains
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
return|return
name|upgradeDomains
return|;
block|}
for|for
control|(
name|DatanodeInfo
name|node
range|:
name|nodes
control|)
block|{
name|upgradeDomains
operator|.
name|add
argument_list|(
name|getUpgradeDomainWithDefaultValue
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|upgradeDomains
return|;
block|}
DECL|method|getUpgradeDomainMap ( DatanodeStorageInfo[] storageInfos)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|>
name|getUpgradeDomainMap
parameter_list|(
name|DatanodeStorageInfo
index|[]
name|storageInfos
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|>
name|upgradeDomainMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|storage
range|:
name|storageInfos
control|)
block|{
name|String
name|upgradeDomain
init|=
name|getUpgradeDomainWithDefaultValue
argument_list|(
name|storage
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|storages
init|=
name|upgradeDomainMap
operator|.
name|get
argument_list|(
name|upgradeDomain
argument_list|)
decl_stmt|;
if|if
condition|(
name|storages
operator|==
literal|null
condition|)
block|{
name|storages
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|upgradeDomainMap
operator|.
name|put
argument_list|(
name|upgradeDomain
argument_list|,
name|storages
argument_list|)
expr_stmt|;
block|}
name|storages
operator|.
name|add
argument_list|(
name|storage
argument_list|)
expr_stmt|;
block|}
return|return
name|upgradeDomainMap
return|;
block|}
annotation|@
name|Override
DECL|method|verifyBlockPlacement (String srcPath, LocatedBlock lBlk, int numberOfReplicas)
specifier|public
name|BlockPlacementStatus
name|verifyBlockPlacement
parameter_list|(
name|String
name|srcPath
parameter_list|,
name|LocatedBlock
name|lBlk
parameter_list|,
name|int
name|numberOfReplicas
parameter_list|)
block|{
name|BlockPlacementStatus
name|defaultStatus
init|=
name|super
operator|.
name|verifyBlockPlacement
argument_list|(
name|srcPath
argument_list|,
name|lBlk
argument_list|,
name|numberOfReplicas
argument_list|)
decl_stmt|;
name|BlockPlacementStatusWithUpgradeDomain
name|upgradeDomainStatus
init|=
operator|new
name|BlockPlacementStatusWithUpgradeDomain
argument_list|(
name|defaultStatus
argument_list|,
name|getUpgradeDomainsFromNodes
argument_list|(
name|lBlk
operator|.
name|getLocations
argument_list|()
argument_list|)
argument_list|,
name|numberOfReplicas
argument_list|,
name|upgradeDomainFactor
argument_list|)
decl_stmt|;
return|return
name|upgradeDomainStatus
return|;
block|}
DECL|method|getShareUDSet ( Map<String, List<T>> upgradeDomains)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getShareUDSet
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|upgradeDomains
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|getShareUDSet
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|e
range|:
name|upgradeDomains
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|getShareUDSet
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getShareUDSet
return|;
block|}
comment|/*    * The policy to pick the replica set for deleting the over-replicated    * replica which meet the rack and upgrade domain requirements.    * The algorithm:    * a. Each replica has a boolean attribute "shareRack" that defines    *    whether it shares its rack with another replica of the same block.    * b. Each replica has another boolean attribute "shareUD" that defines    *    whether it shares its upgrade domain with another replica of the same    *    block.    * c. Partition the replicas into 4 sets (some might be empty.):    *    shareRackAndUDSet: {shareRack==true, shareUD==true}    *    shareUDNotRackSet: {shareRack==false, shareUD==true}    *    shareRackNotUDSet: {shareRack==true, shareUD==false}    *    NoShareRackOrUDSet: {shareRack==false, shareUD==false}    * d. Pick the first not-empty replica set in the following order.    *    shareRackAndUDSet, shareUDNotRackSet, shareRackNotUDSet,    *    NoShareRackOrUDSet    * e. Proof this won't degrade the existing rack-based data    *    availability model under different scenarios.    *    1. shareRackAndUDSet isn't empty. Removing a node    *       from shareRackAndUDSet won't change # of racks and # of UD.    *       The followings cover empty shareUDNotRackSet scenarios.    *    2. shareUDNotRackSet isn't empty and shareRackNotUDSet isn't empty.    *       Let us proof that # of racks>= 3 before the deletion and thus    *       after deletion # of racks>= 2.    *         Given shareUDNotRackSet is empty, there won't be overlap between    *       shareUDNotRackSet and shareRackNotUDSet. It means DNs in    *       shareRackNotUDSet should be on at least a rack    *       different from any DN' rack in shareUDNotRackSet.    *         Given shareUDNotRackSet.size()>= 2 and each DN in the set    *       doesn't share rack with any other DNs, there are at least 2 racks    *       coming from shareUDNotRackSet.    *         Thus the # of racks from DNs in {shareUDNotRackSet,    *       shareRackNotUDSet}>= 3. Removing a node from shareUDNotRackSet    *       will reduce the # of racks by 1 and won't change # of upgrade    *       domains.    *         Note that this is different from BlockPlacementPolicyDefault which    *       will keep the # of racks after deletion. With upgrade domain policy,    *       given # of racks is still>= 2 after deletion, the data availability    *       model remains the same as BlockPlacementPolicyDefault (only supports    *       one rack failure).    *         For example, assume we have 4 replicas: d1(rack1, ud1),    *       d2(rack2, ud1), d3(rack3, ud3), d4(rack3, ud4). Thus we have    *       shareUDNotRackSet: {d1, d2} and shareRackNotUDSet: {d3, d4}.    *       With upgrade domain policy, the remaining replicas after deletion    *       are {d1(or d2), d3, d4} which has 2 racks.    *       With BlockPlacementPolicyDefault policy, the remaining replicas    *       after deletion are {d1, d2, d3(or d4)} which has 3 racks.    *    3. shareUDNotRackSet isn't empty and shareRackNotUDSet is empty. This    *       implies all replicas are on unique racks. Removing a node from    *       shareUDNotRackSet will reduce # of racks (no different from    *       BlockPlacementPolicyDefault) by 1 and won't change #    *       of upgrade domains.    *    4. shareUDNotRackSet is empty and shareRackNotUDSet isn't empty.    *       Removing a node from shareRackNotUDSet is no different from    *       BlockPlacementPolicyDefault.    *    5. shareUDNotRackSet is empty and shareRackNotUDSet is empty.    *       Removing a node from NoShareRackOrUDSet is no different from    *       BlockPlacementPolicyDefault.    * The implementation:    * 1. Generate set shareUDSet which includes all DatanodeStorageInfo that    *    share the same upgrade domain with another DatanodeStorageInfo,    *    e.g. {shareRackAndUDSet, shareUDNotRackSet}.    * 2. If shareUDSet is empty, it means shareRackAndUDSet is empty and    *    shareUDNotRackSet is empty. Use the default rack based policy.    * 3. If shareUDSet isn't empty, intersect it with moreThanOne(    *    {shareRackAndUDSet, shareRackNotUDSet})to generate shareRackAndUDSet.    * 4. If shareRackAndUDSet isn't empty, return    *    shareRackAndUDSet, otherwise return shareUDSet which is the same as    *    shareUDNotRackSet.    */
annotation|@
name|Override
DECL|method|pickupReplicaSet ( Collection<DatanodeStorageInfo> moreThanOne, Collection<DatanodeStorageInfo> exactlyOne)
specifier|protected
name|Collection
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|pickupReplicaSet
parameter_list|(
name|Collection
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|moreThanOne
parameter_list|,
name|Collection
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|exactlyOne
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|moreThanOne
operator|!=
literal|null
condition|)
block|{
name|all
operator|.
name|addAll
argument_list|(
name|moreThanOne
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exactlyOne
operator|!=
literal|null
condition|)
block|{
name|all
operator|.
name|addAll
argument_list|(
name|exactlyOne
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|>
name|upgradeDomains
init|=
name|getUpgradeDomainMap
argument_list|(
name|all
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeStorageInfo
index|[
name|all
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|// shareUDSet includes DatanodeStorageInfo that share same upgrade
comment|// domain with another DatanodeStorageInfo.
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|shareUDSet
init|=
name|getShareUDSet
argument_list|(
name|upgradeDomains
argument_list|)
decl_stmt|;
comment|// shareRackAndUDSet contains those DatanodeStorageInfo that
comment|// share rack and upgrade domain with another DatanodeStorageInfo.
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|shareRackAndUDSet
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|shareUDSet
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// All upgrade domains are unique, use the parent set.
return|return
name|super
operator|.
name|pickupReplicaSet
argument_list|(
name|moreThanOne
argument_list|,
name|exactlyOne
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|moreThanOne
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DatanodeStorageInfo
name|storage
range|:
name|shareUDSet
control|)
block|{
if|if
condition|(
name|moreThanOne
operator|.
name|contains
argument_list|(
name|storage
argument_list|)
condition|)
block|{
name|shareRackAndUDSet
operator|.
name|add
argument_list|(
name|storage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|shareRackAndUDSet
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|shareRackAndUDSet
else|:
name|shareUDSet
return|;
block|}
block|}
end_class

end_unit

