begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|LightWeightHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Maps a datnode to the set of excess redundancy details.  *  * This class is thread safe.  */
end_comment

begin_class
DECL|class|ExcessRedundancyMap
class|class
name|ExcessRedundancyMap
block|{
DECL|field|blockLog
specifier|public
specifier|static
specifier|final
name|Logger
name|blockLog
init|=
name|NameNode
operator|.
name|blockStateChangeLog
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LightWeightHashSet
argument_list|<
name|BlockInfo
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|AtomicLong
name|size
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
comment|/**    * @return the number of redundancies in this map.    */
DECL|method|size ()
name|long
name|size
parameter_list|()
block|{
return|return
name|size
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * @return the number of redundancies corresponding to the given datanode.    */
annotation|@
name|VisibleForTesting
DECL|method|getSize4Testing (String dnUuid)
specifier|synchronized
name|int
name|getSize4Testing
parameter_list|(
name|String
name|dnUuid
parameter_list|)
block|{
specifier|final
name|LightWeightHashSet
argument_list|<
name|BlockInfo
argument_list|>
name|set
init|=
name|map
operator|.
name|get
argument_list|(
name|dnUuid
argument_list|)
decl_stmt|;
return|return
name|set
operator|==
literal|null
condition|?
literal|0
else|:
name|set
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|clear ()
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|size
operator|.
name|set
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return does this map contains a redundancy corresponding to the given    *         datanode and the given block?    */
DECL|method|contains (DatanodeDescriptor dn, BlockInfo blk)
specifier|synchronized
name|boolean
name|contains
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockInfo
name|blk
parameter_list|)
block|{
specifier|final
name|LightWeightHashSet
argument_list|<
name|BlockInfo
argument_list|>
name|set
init|=
name|map
operator|.
name|get
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|set
operator|!=
literal|null
operator|&&
name|set
operator|.
name|contains
argument_list|(
name|blk
argument_list|)
return|;
block|}
comment|/**    * Add the redundancy of the given block stored in the given datanode to the    * map.    *    * @return true if the block is added.    */
DECL|method|add (DatanodeDescriptor dn, BlockInfo blk)
specifier|synchronized
name|boolean
name|add
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockInfo
name|blk
parameter_list|)
block|{
name|LightWeightHashSet
argument_list|<
name|BlockInfo
argument_list|>
name|set
init|=
name|map
operator|.
name|get
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|set
operator|=
operator|new
name|LightWeightHashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|added
init|=
name|set
operator|.
name|add
argument_list|(
name|blk
argument_list|)
decl_stmt|;
if|if
condition|(
name|added
condition|)
block|{
name|size
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|blockLog
operator|.
name|debug
argument_list|(
literal|"BLOCK* ExcessRedundancyMap.add({}, {})"
argument_list|,
name|dn
argument_list|,
name|blk
argument_list|)
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
comment|/**    * Remove the redundancy corresponding to the given datanode and the given    * block.    *    * @return true if the block is removed.    */
DECL|method|remove (DatanodeDescriptor dn, BlockInfo blk)
specifier|synchronized
name|boolean
name|remove
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockInfo
name|blk
parameter_list|)
block|{
specifier|final
name|LightWeightHashSet
argument_list|<
name|BlockInfo
argument_list|>
name|set
init|=
name|map
operator|.
name|get
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|boolean
name|removed
init|=
name|set
operator|.
name|remove
argument_list|(
name|blk
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
name|size
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|blockLog
operator|.
name|debug
argument_list|(
literal|"BLOCK* ExcessRedundancyMap.remove({}, {})"
argument_list|,
name|dn
argument_list|,
name|blk
argument_list|)
expr_stmt|;
if|if
condition|(
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|removed
return|;
block|}
block|}
end_class

end_unit

