begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.diskbalancer.command
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|command
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DiskBalancer
import|;
end_import

begin_comment
comment|/**  * Help Command prints out detailed help about each command.  */
end_comment

begin_class
DECL|class|HelpCommand
specifier|public
class|class
name|HelpCommand
extends|extends
name|Command
block|{
comment|/**    * Constructs a help command.    *    * @param conf - config    */
DECL|method|HelpCommand (Configuration conf)
specifier|public
name|HelpCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Executes the Client Calls.    *    * @param cmd - CommandLine    */
annotation|@
name|Override
DECL|method|execute (CommandLine cmd)
specifier|public
name|void
name|execute
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing help Command."
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|printHelp
argument_list|()
expr_stmt|;
return|return;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DiskBalancer
operator|.
name|HELP
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCommandOptions
argument_list|(
name|DiskBalancer
operator|.
name|HELP
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|String
name|helpCommand
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|DiskBalancer
operator|.
name|HELP
argument_list|)
decl_stmt|;
if|if
condition|(
name|helpCommand
operator|==
literal|null
operator|||
name|helpCommand
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|printHelp
argument_list|()
expr_stmt|;
return|return;
block|}
name|helpCommand
operator|=
name|helpCommand
operator|.
name|trim
argument_list|()
expr_stmt|;
name|helpCommand
operator|=
name|helpCommand
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|Command
name|command
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|helpCommand
condition|)
block|{
case|case
name|DiskBalancer
operator|.
name|PLAN
case|:
name|command
operator|=
operator|new
name|PlanCommand
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DiskBalancer
operator|.
name|EXECUTE
case|:
name|command
operator|=
operator|new
name|ExecuteCommand
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DiskBalancer
operator|.
name|QUERY
case|:
name|command
operator|=
operator|new
name|QueryCommand
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DiskBalancer
operator|.
name|CANCEL
case|:
name|command
operator|=
operator|new
name|CancelCommand
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DiskBalancer
operator|.
name|REPORT
case|:
name|command
operator|=
operator|new
name|ReportCommand
argument_list|(
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
default|default:
name|command
operator|=
name|this
expr_stmt|;
break|break;
block|}
name|command
operator|.
name|printHelp
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets extended help for this command.    */
annotation|@
name|Override
DECL|method|printHelp ()
specifier|public
name|void
name|printHelp
parameter_list|()
block|{
name|String
name|header
init|=
literal|"\nDiskBalancer distributes data evenly between "
operator|+
literal|"different disks on a datanode. "
operator|+
literal|"DiskBalancer operates by generating a plan, that tells datanode "
operator|+
literal|"how to move data between disks. Users can execute a plan by "
operator|+
literal|"submitting it to the datanode. \nTo get specific help on a "
operator|+
literal|"particular command please run \n\n hdfs diskbalancer -help<command>."
decl_stmt|;
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
literal|"hdfs diskbalancer [command] [options]"
argument_list|,
name|header
argument_list|,
name|DiskBalancer
operator|.
name|getHelpOptions
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

