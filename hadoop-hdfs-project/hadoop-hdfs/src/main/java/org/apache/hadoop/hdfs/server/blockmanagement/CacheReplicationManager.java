begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|BlockUCState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSClusterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Namesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|NameNodeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|LightWeightHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * Analogue of the BlockManager class for cached replicas. Maintains the mapping  * of cached blocks to datanodes via processing datanode cache reports. Based on  * these reports and addition and removal of caching directives in the  * CacheManager, the CacheReplicationManager will schedule caching and uncaching  * work.  *   * The CacheReplicationManager does not have a separate lock, so depends on  * taking the namesystem lock as appropriate.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
DECL|class|CacheReplicationManager
specifier|public
class|class
name|CacheReplicationManager
extends|extends
name|ReportProcessor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CacheReplicationManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Statistics
DECL|field|pendingCacheBlocksCount
specifier|private
specifier|volatile
name|long
name|pendingCacheBlocksCount
init|=
literal|0L
decl_stmt|;
DECL|field|underCachedBlocksCount
specifier|private
specifier|volatile
name|long
name|underCachedBlocksCount
init|=
literal|0L
decl_stmt|;
DECL|field|scheduledCacheBlocksCount
specifier|private
specifier|volatile
name|long
name|scheduledCacheBlocksCount
init|=
literal|0L
decl_stmt|;
comment|/** Used by metrics */
DECL|method|getPendingCacheBlocksCount ()
specifier|public
name|long
name|getPendingCacheBlocksCount
parameter_list|()
block|{
return|return
name|pendingCacheBlocksCount
return|;
block|}
comment|/** Used by metrics */
DECL|method|getUnderCachedBlocksCount ()
specifier|public
name|long
name|getUnderCachedBlocksCount
parameter_list|()
block|{
return|return
name|underCachedBlocksCount
return|;
block|}
comment|/** Used by metrics */
DECL|method|getScheduledCacheBlocksCount ()
specifier|public
name|long
name|getScheduledCacheBlocksCount
parameter_list|()
block|{
return|return
name|scheduledCacheBlocksCount
return|;
block|}
comment|/** Used by metrics */
DECL|method|getPendingBlocksToUncacheCount ()
specifier|public
name|long
name|getPendingBlocksToUncacheCount
parameter_list|()
block|{
return|return
name|blocksToUncache
operator|.
name|numBlocks
argument_list|()
return|;
block|}
DECL|field|namesystem
specifier|private
specifier|final
name|Namesystem
name|namesystem
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|datanodeManager
specifier|private
specifier|final
name|DatanodeManager
name|datanodeManager
decl_stmt|;
DECL|field|isCachingEnabled
specifier|private
specifier|final
name|boolean
name|isCachingEnabled
decl_stmt|;
comment|/**    * Mapping of blocks to datanodes where the block is cached    */
DECL|field|cachedBlocksMap
specifier|final
name|BlocksMap
name|cachedBlocksMap
decl_stmt|;
comment|/**    * Blocks to be uncached    */
DECL|field|blocksToUncache
specifier|private
specifier|final
name|UncacheBlocks
name|blocksToUncache
decl_stmt|;
comment|/**    * Blocks that need to be cached    */
DECL|field|neededCacheBlocks
specifier|private
specifier|final
name|LightWeightHashSet
argument_list|<
name|Block
argument_list|>
name|neededCacheBlocks
decl_stmt|;
comment|/**    * Blocks that are being cached    */
DECL|field|pendingCacheBlocks
specifier|private
specifier|final
name|PendingReplicationBlocks
name|pendingCacheBlocks
decl_stmt|;
comment|/**    * Executor for the CacheReplicationMonitor thread    */
DECL|field|monitor
specifier|private
name|ExecutorService
name|monitor
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|method|CacheReplicationManager (final Namesystem namesystem, final BlockManager blockManager, final DatanodeManager datanodeManager, final FSClusterStats stats, final Configuration conf)
specifier|public
name|CacheReplicationManager
parameter_list|(
specifier|final
name|Namesystem
name|namesystem
parameter_list|,
specifier|final
name|BlockManager
name|blockManager
parameter_list|,
specifier|final
name|DatanodeManager
name|datanodeManager
parameter_list|,
specifier|final
name|FSClusterStats
name|stats
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|blockManager
operator|=
name|blockManager
expr_stmt|;
name|this
operator|.
name|datanodeManager
operator|=
name|datanodeManager
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|isCachingEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CACHING_ENABLED_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CACHING_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCachingEnabled
condition|)
block|{
name|cachedBlocksMap
operator|=
operator|new
name|BlocksMap
argument_list|(
name|BlockManager
operator|.
name|DEFAULT_MAP_LOAD_FACTOR
argument_list|)
expr_stmt|;
name|blocksToUncache
operator|=
operator|new
name|UncacheBlocks
argument_list|()
expr_stmt|;
name|pendingCacheBlocks
operator|=
operator|new
name|PendingReplicationBlocks
argument_list|(
literal|1000
operator|*
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|neededCacheBlocks
operator|=
operator|new
name|LightWeightHashSet
argument_list|<
name|Block
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cachedBlocksMap
operator|=
literal|null
expr_stmt|;
name|blocksToUncache
operator|=
literal|null
expr_stmt|;
name|pendingCacheBlocks
operator|=
literal|null
expr_stmt|;
name|neededCacheBlocks
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|activate ()
specifier|public
name|void
name|activate
parameter_list|()
block|{
if|if
condition|(
name|isCachingEnabled
condition|)
block|{
name|pendingCacheBlocks
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|monitor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
name|CacheReplicationMonitor
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|submit
argument_list|(
operator|new
name|CacheReplicationMonitor
argument_list|(
name|namesystem
argument_list|,
name|blockManager
argument_list|,
name|datanodeManager
argument_list|,
name|this
argument_list|,
name|blocksToUncache
argument_list|,
name|neededCacheBlocks
argument_list|,
name|pendingCacheBlocks
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|isCachingEnabled
condition|)
block|{
name|monitor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
try|try
block|{
name|monitor
operator|.
name|awaitTermination
argument_list|(
literal|3000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
name|pendingCacheBlocks
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cachedBlocksMap
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clearQueues ()
specifier|public
name|void
name|clearQueues
parameter_list|()
block|{
if|if
condition|(
name|isCachingEnabled
condition|)
block|{
name|blocksToUncache
operator|.
name|clear
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|neededCacheBlocks
init|)
block|{
name|neededCacheBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|pendingCacheBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isCachingEnabled ()
specifier|public
name|boolean
name|isCachingEnabled
parameter_list|()
block|{
return|return
name|isCachingEnabled
return|;
block|}
comment|/**    * @return desired cache replication factor of the block    */
DECL|method|getCacheReplication (Block block)
name|short
name|getCacheReplication
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
specifier|final
name|BlockCollection
name|bc
init|=
name|blockManager
operator|.
name|blocksMap
operator|.
name|getBlockCollection
argument_list|(
name|block
argument_list|)
decl_stmt|;
return|return
name|bc
operator|==
literal|null
condition|?
literal|0
else|:
name|bc
operator|.
name|getCacheReplication
argument_list|()
return|;
block|}
comment|/**    * Returns the number of cached replicas of a block    */
DECL|method|getNumCached (Block block)
name|short
name|getNumCached
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|it
init|=
name|cachedBlocksMap
operator|.
name|nodeIterator
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|short
name|numCached
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|numCached
operator|++
expr_stmt|;
block|}
return|return
name|numCached
return|;
block|}
comment|/**    * The given datanode is reporting all of its cached blocks.    * Update the cache state of blocks in the block map.    */
DECL|method|processCacheReport (final DatanodeID nodeID, final String poolId, final BlockListAsLongs newReport)
specifier|public
name|void
name|processCacheReport
parameter_list|(
specifier|final
name|DatanodeID
name|nodeID
parameter_list|,
specifier|final
name|String
name|poolId
parameter_list|,
specifier|final
name|BlockListAsLongs
name|newReport
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isCachingEnabled
condition|)
block|{
name|String
name|error
init|=
literal|"cacheReport received from datanode "
operator|+
name|nodeID
operator|+
literal|" but caching is disabled on the namenode ("
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CACHING_ENABLED_KEY
operator|+
literal|")"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|error
operator|+
literal|", ignoring"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
specifier|final
name|long
name|startTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
comment|//after acquiring write lock
specifier|final
name|long
name|endTime
decl_stmt|;
try|try
block|{
specifier|final
name|DatanodeDescriptor
name|node
init|=
name|datanodeManager
operator|.
name|getDatanode
argument_list|(
name|nodeID
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
operator|||
operator|!
name|node
operator|.
name|isAlive
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"processCacheReport from dead or unregistered node: "
operator|+
name|nodeID
argument_list|)
throw|;
block|}
comment|// TODO: do an optimized initial cache report while in startup safemode
if|if
condition|(
name|namesystem
operator|.
name|isInStartupSafeMode
argument_list|()
condition|)
block|{
name|blockLogInfo
argument_list|(
literal|"#processCacheReport: "
operator|+
literal|"discarded cache report from "
operator|+
name|nodeID
operator|+
literal|" because namenode still in startup phase"
argument_list|)
expr_stmt|;
return|return;
block|}
name|processReport
argument_list|(
name|node
argument_list|,
name|newReport
argument_list|)
expr_stmt|;
comment|// TODO: process postponed blocks reported while a standby
comment|//rescanPostponedMisreplicatedBlocks();
block|}
finally|finally
block|{
name|endTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
comment|// Log the block report processing stats from Namenode perspective
specifier|final
name|NameNodeMetrics
name|metrics
init|=
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|addCacheBlockReport
argument_list|(
call|(
name|int
call|)
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|blockLogInfo
argument_list|(
literal|"#processCacheReport: from "
operator|+
name|nodeID
operator|+
literal|", blocks: "
operator|+
name|newReport
operator|.
name|getNumberOfBlocks
argument_list|()
operator|+
literal|", processing time: "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" msecs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ReportProcessor
DECL|method|markBlockAsCorrupt (BlockToMarkCorrupt b, DatanodeInfo dn)
name|void
name|markBlockAsCorrupt
parameter_list|(
name|BlockToMarkCorrupt
name|b
parameter_list|,
name|DatanodeInfo
name|dn
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Corrupt blocks should not be in"
operator|+
literal|" the cache report"
argument_list|)
throw|;
block|}
annotation|@
name|Override
comment|// ReportProcessor
DECL|method|addToInvalidates (final Block b, final DatanodeInfo node)
name|void
name|addToInvalidates
parameter_list|(
specifier|final
name|Block
name|b
parameter_list|,
specifier|final
name|DatanodeInfo
name|node
parameter_list|)
block|{
name|blocksToUncache
operator|.
name|add
argument_list|(
name|b
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ReportProcessor
DECL|method|addStoredBlockUnderConstruction ( BlockInfoUnderConstruction storedBlock, DatanodeDescriptor node, ReplicaState reportedState)
name|void
name|addStoredBlockUnderConstruction
parameter_list|(
name|BlockInfoUnderConstruction
name|storedBlock
parameter_list|,
name|DatanodeDescriptor
name|node
parameter_list|,
name|ReplicaState
name|reportedState
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Under-construction blocks"
operator|+
literal|" should not be in the cache report"
argument_list|)
throw|;
block|}
annotation|@
name|Override
comment|// ReportProcessor
DECL|method|moveBlockToHead (DatanodeDescriptor dn, BlockInfo storedBlock, int curIndex, int headIndex)
name|int
name|moveBlockToHead
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockInfo
name|storedBlock
parameter_list|,
name|int
name|curIndex
parameter_list|,
name|int
name|headIndex
parameter_list|)
block|{
return|return
name|dn
operator|.
name|moveCachedBlockToHead
argument_list|(
name|storedBlock
argument_list|,
name|curIndex
argument_list|,
name|headIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ReportProcessor
DECL|method|addBlock (DatanodeDescriptor dn, BlockInfo block)
name|boolean
name|addBlock
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockInfo
name|block
parameter_list|)
block|{
return|return
name|dn
operator|.
name|addCachedBlock
argument_list|(
name|block
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ReportProcessor
DECL|method|removeBlock (DatanodeDescriptor dn, BlockInfo block)
name|boolean
name|removeBlock
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockInfo
name|block
parameter_list|)
block|{
return|return
name|dn
operator|.
name|removeCachedBlock
argument_list|(
name|block
argument_list|)
return|;
block|}
comment|/**    * Similar to processReportedBlock. Simpler since it doesn't need to worry    * about under construction and corrupt replicas.    *     * @return Updated BlockInfo for the block if it should be kept, null if    * it is to be invalidated.    */
annotation|@
name|Override
comment|// ReportProcessor
DECL|method|processReportedBlock (final DatanodeDescriptor dn, final Block block, final ReplicaState reportedState, final Collection<BlockInfo> toAdd, final Collection<Block> toInvalidate, Collection<BlockToMarkCorrupt> toCorrupt, Collection<StatefulBlockInfo> toUC)
name|BlockInfo
name|processReportedBlock
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|dn
parameter_list|,
specifier|final
name|Block
name|block
parameter_list|,
specifier|final
name|ReplicaState
name|reportedState
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|BlockInfo
argument_list|>
name|toAdd
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|Block
argument_list|>
name|toInvalidate
parameter_list|,
name|Collection
argument_list|<
name|BlockToMarkCorrupt
argument_list|>
name|toCorrupt
parameter_list|,
name|Collection
argument_list|<
name|StatefulBlockInfo
argument_list|>
name|toUC
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reported cached block "
operator|+
name|block
operator|+
literal|" on "
operator|+
name|dn
operator|+
literal|" size "
operator|+
name|block
operator|.
name|getNumBytes
argument_list|()
operator|+
literal|" replicaState = "
operator|+
name|reportedState
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|shouldPostponeBlocksFromFuture
init|=
name|blockManager
operator|.
name|shouldPostponeBlocksFromFuture
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldPostponeBlocksFromFuture
operator|&&
name|namesystem
operator|.
name|isGenStampInFuture
argument_list|(
name|block
argument_list|)
condition|)
block|{
comment|// TODO: queuing cache operations on the standby
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"processReportedBlock: block "
operator|+
name|block
operator|+
literal|" has a "
operator|+
literal|"genstamp from the future and namenode is in standby mode,"
operator|+
literal|" ignoring"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|BlockInfo
name|storedBlock
init|=
name|blockManager
operator|.
name|blocksMap
operator|.
name|getStoredBlock
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedBlock
operator|==
literal|null
condition|)
block|{
comment|// If blocksMap does not contain reported block id,
comment|// the BlockManager will take care of invalidating it, and the datanode
comment|// will automatically uncache at that point.
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"processReportedBlock: block "
operator|+
name|block
operator|+
literal|" not found "
operator|+
literal|"in blocksMap, ignoring"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|BlockUCState
name|ucState
init|=
name|storedBlock
operator|.
name|getBlockUCState
argument_list|()
decl_stmt|;
comment|// Datanodes currently only will cache completed replicas.
comment|// Let's just invalidate anything that's not completed and the right
comment|// genstamp and number of bytes.
if|if
condition|(
operator|!
name|ucState
operator|.
name|equals
argument_list|(
name|BlockUCState
operator|.
name|COMPLETE
argument_list|)
operator|||
name|block
operator|.
name|getGenerationStamp
argument_list|()
operator|!=
name|storedBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|||
name|block
operator|.
name|getNumBytes
argument_list|()
operator|!=
name|storedBlock
operator|.
name|getNumBytes
argument_list|()
condition|)
block|{
if|if
condition|(
name|shouldPostponeBlocksFromFuture
condition|)
block|{
comment|// TODO: queuing cache operations on the standby
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"processReportedBlock: block "
operator|+
name|block
operator|+
literal|" has a "
operator|+
literal|"mismatching genstamp or length and namenode is in standby"
operator|+
literal|" mode, ignoring"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|toInvalidate
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"processReportedBlock: block "
operator|+
name|block
operator|+
literal|" scheduled"
operator|+
literal|" for uncaching because it is misreplicated"
operator|+
literal|" or under construction."
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|// It's a keeper
comment|// Could be present in blocksMap and not in cachedBlocksMap, add it
name|BlockInfo
name|cachedBlock
init|=
name|cachedBlocksMap
operator|.
name|getStoredBlock
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedBlock
operator|==
literal|null
condition|)
block|{
name|cachedBlock
operator|=
operator|new
name|BlockInfo
argument_list|(
name|block
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cachedBlocksMap
operator|.
name|addBlockCollection
argument_list|(
name|cachedBlock
argument_list|,
name|storedBlock
operator|.
name|getBlockCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"In memory blockUCState = "
operator|+
name|ucState
argument_list|)
expr_stmt|;
block|}
comment|// Ignore replicas that are already scheduled for removal
if|if
condition|(
name|blocksToUncache
operator|.
name|contains
argument_list|(
name|dn
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|block
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"processReportedBlock: block "
operator|+
name|block
operator|+
literal|" is already"
operator|+
literal|" scheduled to be uncached, not adding it to the cachedBlocksMap"
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedBlock
return|;
block|}
comment|// add replica if not already present in the cached block map
if|if
condition|(
name|reportedState
operator|==
name|ReplicaState
operator|.
name|FINALIZED
operator|&&
name|cachedBlock
operator|.
name|findDatanode
argument_list|(
name|dn
argument_list|)
operator|<
literal|0
condition|)
block|{
name|toAdd
operator|.
name|add
argument_list|(
name|cachedBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"processReportedBlock: block "
operator|+
name|block
operator|+
literal|" scheduled"
operator|+
literal|" to be added to cachedBlocksMap"
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedBlock
return|;
block|}
comment|/**    * Modify (cached block-->datanode) map with a newly cached block. Remove    * block from set of needed cache replications if this takes care of the    * problem.    *     * @return the block that is stored in cachedBlockMap.    */
annotation|@
name|Override
comment|// ReportProcessor
DECL|method|addStoredBlock (final BlockInfo block, DatanodeDescriptor node, DatanodeDescriptor delNodeHint, boolean logEveryBlock)
name|Block
name|addStoredBlock
parameter_list|(
specifier|final
name|BlockInfo
name|block
parameter_list|,
name|DatanodeDescriptor
name|node
parameter_list|,
name|DatanodeDescriptor
name|delNodeHint
parameter_list|,
name|boolean
name|logEveryBlock
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|block
operator|!=
literal|null
operator|&&
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|BlockInfo
name|cachedBlock
init|=
name|block
decl_stmt|;
if|if
condition|(
name|cachedBlock
operator|==
literal|null
operator|||
name|cachedBlock
operator|.
name|getBlockCollection
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// If this block does not belong to anyfile, then we are done.
name|blockLogInfo
argument_list|(
literal|"#addStoredBlock: "
operator|+
name|block
operator|+
literal|" on "
operator|+
name|node
operator|+
literal|" size "
operator|+
name|block
operator|.
name|getNumBytes
argument_list|()
operator|+
literal|" but it does not belong to any file"
argument_list|)
expr_stmt|;
comment|// we could add this block to invalidate set of this datanode.
comment|// it will happen in next block report otherwise.
return|return
name|block
return|;
block|}
name|BlockCollection
name|bc
init|=
name|cachedBlock
operator|.
name|getBlockCollection
argument_list|()
decl_stmt|;
comment|// add block to the datanode
name|boolean
name|added
init|=
name|node
operator|.
name|addCachedBlock
argument_list|(
name|cachedBlock
argument_list|)
decl_stmt|;
name|int
name|curReplicaDelta
decl_stmt|;
if|if
condition|(
name|added
condition|)
block|{
name|curReplicaDelta
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|logEveryBlock
condition|)
block|{
name|logAddStoredBlock
argument_list|(
name|cachedBlock
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|curReplicaDelta
operator|=
literal|0
expr_stmt|;
name|blockLogWarn
argument_list|(
literal|"#addStoredBlock: "
operator|+
literal|"Redundant addCachedBlock request received for "
operator|+
name|cachedBlock
operator|+
literal|" on "
operator|+
name|node
operator|+
literal|" size "
operator|+
name|cachedBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Remove it from pending list if present
name|pendingCacheBlocks
operator|.
name|decrement
argument_list|(
name|block
argument_list|,
name|node
argument_list|)
expr_stmt|;
comment|// Now check for completion of blocks and safe block count
name|int
name|numCachedReplicas
init|=
name|getNumCached
argument_list|(
name|cachedBlock
argument_list|)
decl_stmt|;
name|int
name|numEffectiveCachedReplica
init|=
name|numCachedReplicas
operator|+
name|pendingCacheBlocks
operator|.
name|getNumReplicas
argument_list|(
name|cachedBlock
argument_list|)
decl_stmt|;
comment|// if file is under construction, then done for now
if|if
condition|(
name|bc
operator|instanceof
name|MutableBlockCollection
condition|)
block|{
return|return
name|cachedBlock
return|;
block|}
comment|// do not try to handle over/under-replicated blocks during first safe mode
if|if
condition|(
operator|!
name|namesystem
operator|.
name|isPopulatingReplQueues
argument_list|()
condition|)
block|{
return|return
name|cachedBlock
return|;
block|}
comment|// Under-replicated
name|short
name|cacheReplication
init|=
name|bc
operator|.
name|getCacheReplication
argument_list|()
decl_stmt|;
if|if
condition|(
name|numEffectiveCachedReplica
operator|>=
name|cacheReplication
condition|)
block|{
synchronized|synchronized
init|(
name|neededCacheBlocks
init|)
block|{
name|neededCacheBlocks
operator|.
name|remove
argument_list|(
name|cachedBlock
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|updateNeededCaching
argument_list|(
name|cachedBlock
argument_list|,
name|curReplicaDelta
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Over-replicated, we don't need this new replica
if|if
condition|(
name|numEffectiveCachedReplica
operator|>
name|cacheReplication
condition|)
block|{
name|blocksToUncache
operator|.
name|add
argument_list|(
name|cachedBlock
argument_list|,
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedBlock
return|;
block|}
comment|/**    * Modify (cached block-->datanode) map. Possibly generate replication tasks,    * if the removed block is still valid.    */
annotation|@
name|Override
comment|// ReportProcessor
DECL|method|removeStoredBlock (Block block, DatanodeDescriptor node)
name|void
name|removeStoredBlock
parameter_list|(
name|Block
name|block
parameter_list|,
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
name|blockLogDebug
argument_list|(
literal|"#removeStoredBlock: "
operator|+
name|block
operator|+
literal|" from "
operator|+
name|node
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
operator|)
assert|;
block|{
if|if
condition|(
operator|!
name|cachedBlocksMap
operator|.
name|removeNode
argument_list|(
name|block
argument_list|,
name|node
argument_list|)
condition|)
block|{
name|blockLogDebug
argument_list|(
literal|"#removeStoredBlock: "
operator|+
name|block
operator|+
literal|" has already been removed from node "
operator|+
name|node
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Prune the block from the map if it's the last cache replica
if|if
condition|(
name|cachedBlocksMap
operator|.
name|getStoredBlock
argument_list|(
name|block
argument_list|)
operator|.
name|numNodes
argument_list|()
operator|==
literal|0
condition|)
block|{
name|cachedBlocksMap
operator|.
name|removeBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// It's possible that the block was removed because of a datanode
comment|// failure. If the block is still valid, check if replication is
comment|// necessary. In that case, put block on a possibly-will-
comment|// be-replicated list.
comment|//
name|BlockCollection
name|bc
init|=
name|blockManager
operator|.
name|blocksMap
operator|.
name|getBlockCollection
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|bc
operator|!=
literal|null
condition|)
block|{
name|updateNeededCaching
argument_list|(
name|block
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Reduce cache replication factor to the new replication by randomly    * choosing replicas to invalidate.    */
DECL|method|processOverCachedBlock (final Block block, final short replication)
specifier|private
name|void
name|processOverCachedBlock
parameter_list|(
specifier|final
name|Block
name|block
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
init|=
name|getSafeReplicas
argument_list|(
name|cachedBlocksMap
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|targets
init|=
name|CacheReplicationPolicy
operator|.
name|chooseTargetsToUncache
argument_list|(
name|nodes
argument_list|,
name|replication
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|targets
control|)
block|{
name|blocksToUncache
operator|.
name|add
argument_list|(
name|block
argument_list|,
name|dn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Set replication for the blocks. */
DECL|method|setCacheReplication (final short oldRepl, final short newRepl, final String src, final Block... blocks)
specifier|public
name|void
name|setCacheReplication
parameter_list|(
specifier|final
name|short
name|oldRepl
parameter_list|,
specifier|final
name|short
name|newRepl
parameter_list|,
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|Block
modifier|...
name|blocks
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isCachingEnabled
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempted to set cache replication for "
operator|+
name|src
operator|+
literal|" but caching"
operator|+
literal|" is disabled ("
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CACHING_ENABLED_KEY
operator|+
literal|"), ignoring"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|newRepl
operator|==
name|oldRepl
condition|)
block|{
return|return;
block|}
comment|// update needReplication priority queues
for|for
control|(
name|Block
name|b
range|:
name|blocks
control|)
block|{
name|updateNeededCaching
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|newRepl
operator|-
name|oldRepl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldRepl
operator|>
name|newRepl
condition|)
block|{
comment|// old replication> the new one; need to remove copies
name|LOG
operator|.
name|info
argument_list|(
literal|"Decreasing cache replication from "
operator|+
name|oldRepl
operator|+
literal|" to "
operator|+
name|newRepl
operator|+
literal|" for "
operator|+
name|src
argument_list|)
expr_stmt|;
for|for
control|(
name|Block
name|b
range|:
name|blocks
control|)
block|{
name|processOverCachedBlock
argument_list|(
name|b
argument_list|,
name|newRepl
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// replication factor is increased
name|LOG
operator|.
name|info
argument_list|(
literal|"Increasing cache replication from "
operator|+
name|oldRepl
operator|+
literal|" to "
operator|+
name|newRepl
operator|+
literal|" for "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** updates a block in under replicated queue */
DECL|method|updateNeededCaching (final Block block, final int curReplicasDelta, int expectedReplicasDelta)
specifier|private
name|void
name|updateNeededCaching
parameter_list|(
specifier|final
name|Block
name|block
parameter_list|,
specifier|final
name|int
name|curReplicasDelta
parameter_list|,
name|int
name|expectedReplicasDelta
parameter_list|)
block|{
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|namesystem
operator|.
name|isPopulatingReplQueues
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|numCached
init|=
name|getNumCached
argument_list|(
name|block
argument_list|)
decl_stmt|;
specifier|final
name|int
name|curExpectedReplicas
init|=
name|getCacheReplication
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|numCached
operator|<
name|curExpectedReplicas
condition|)
block|{
name|neededCacheBlocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|neededCacheBlocks
init|)
block|{
name|neededCacheBlocks
operator|.
name|remove
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return the safe replicas (not corrupt or decomissioning/decommissioned) of    * a block in a BlocksMap    */
DECL|method|getSafeReplicas (BlocksMap map, Block block)
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|getSafeReplicas
parameter_list|(
name|BlocksMap
name|map
parameter_list|,
name|Block
name|block
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|corrupted
init|=
name|blockManager
operator|.
name|corruptReplicas
operator|.
name|getNodes
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|it
init|=
name|map
operator|.
name|nodeIterator
argument_list|(
name|block
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeDescriptor
name|dn
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Don't count a decommissioned or decommissioning nodes
if|if
condition|(
name|dn
operator|.
name|isDecommissioned
argument_list|()
operator|||
name|dn
operator|.
name|isDecommissionInProgress
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// Don't count a corrupted node
if|if
condition|(
name|corrupted
operator|!=
literal|null
operator|&&
name|corrupted
operator|.
name|contains
argument_list|(
name|dn
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|nodes
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
block|}
end_class

end_unit

