begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInboundHandlerAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultFullHttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequestEncoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONNECTION
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
operator|.
name|Values
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
operator|.
name|HTTP_1_1
import|;
end_import

begin_comment
comment|/**  * Dead simple session-layer HTTP proxy. It gets the HTTP responses  * inside the context, assuming that the remote peer is reasonable fast and  * the response is small. The upper layer should be filtering out malicious  * inputs.  */
end_comment

begin_class
DECL|class|SimpleHttpProxyHandler
class|class
name|SimpleHttpProxyHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|HttpRequest
argument_list|>
block|{
DECL|field|uri
specifier|private
name|String
name|uri
decl_stmt|;
DECL|field|proxiedChannel
specifier|private
name|Channel
name|proxiedChannel
decl_stmt|;
DECL|field|host
specifier|private
specifier|final
name|InetSocketAddress
name|host
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|DatanodeHttpServer
operator|.
name|LOG
decl_stmt|;
DECL|method|SimpleHttpProxyHandler (InetSocketAddress host)
name|SimpleHttpProxyHandler
parameter_list|(
name|InetSocketAddress
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|class|Forwarder
specifier|private
specifier|static
class|class
name|Forwarder
extends|extends
name|ChannelInboundHandlerAdapter
block|{
DECL|field|uri
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Channel
name|client
decl_stmt|;
DECL|method|Forwarder (String uri, Channel client)
specifier|private
name|Forwarder
parameter_list|(
name|String
name|uri
parameter_list|,
name|Channel
name|client
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|channelInactive (ChannelHandlerContext ctx)
specifier|public
name|void
name|channelInactive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
block|{
name|closeOnFlush
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|channelRead (final ChannelHandlerContext ctx, Object msg)
specifier|public
name|void
name|channelRead
parameter_list|(
specifier|final
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
name|client
operator|.
name|writeAndFlush
argument_list|(
name|msg
argument_list|)
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
block|{
if|if
condition|(
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Proxy failed. Cause: "
argument_list|,
name|future
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exceptionCaught (ChannelHandlerContext ctx, Throwable cause)
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Proxy for "
operator|+
name|uri
operator|+
literal|" failed. cause: "
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|closeOnFlush
argument_list|(
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|channelRead0 (final ChannelHandlerContext ctx, final HttpRequest req)
specifier|public
name|void
name|channelRead0
parameter_list|(
specifier|final
name|ChannelHandlerContext
name|ctx
parameter_list|,
specifier|final
name|HttpRequest
name|req
parameter_list|)
block|{
name|uri
operator|=
name|req
operator|.
name|getUri
argument_list|()
expr_stmt|;
specifier|final
name|Channel
name|client
init|=
name|ctx
operator|.
name|channel
argument_list|()
decl_stmt|;
name|Bootstrap
name|proxiedServer
init|=
operator|new
name|Bootstrap
argument_list|()
operator|.
name|group
argument_list|(
name|client
operator|.
name|eventLoop
argument_list|()
argument_list|)
operator|.
name|channel
argument_list|(
name|NioSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|handler
argument_list|(
operator|new
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|p
init|=
name|ch
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|p
operator|.
name|addLast
argument_list|(
operator|new
name|HttpRequestEncoder
argument_list|()
argument_list|,
operator|new
name|Forwarder
argument_list|(
name|uri
argument_list|,
name|client
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ChannelFuture
name|f
init|=
name|proxiedServer
operator|.
name|connect
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|proxiedChannel
operator|=
name|f
operator|.
name|channel
argument_list|()
expr_stmt|;
name|f
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|pipeline
argument_list|()
operator|.
name|remove
argument_list|(
name|HttpResponseEncoder
operator|.
name|class
argument_list|)
expr_stmt|;
name|HttpRequest
name|newReq
init|=
operator|new
name|DefaultFullHttpRequest
argument_list|(
name|HTTP_1_1
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|,
name|req
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|newReq
operator|.
name|headers
argument_list|()
operator|.
name|add
argument_list|(
name|req
operator|.
name|headers
argument_list|()
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|CONNECTION
argument_list|,
name|Values
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|future
operator|.
name|channel
argument_list|()
operator|.
name|writeAndFlush
argument_list|(
name|newReq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DefaultHttpResponse
name|resp
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
decl_stmt|;
name|resp
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|CONNECTION
argument_list|,
name|Values
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Proxy "
operator|+
name|uri
operator|+
literal|" failed. Cause: "
argument_list|,
name|future
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|writeAndFlush
argument_list|(
name|resp
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|channelInactive (ChannelHandlerContext ctx)
specifier|public
name|void
name|channelInactive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|proxiedChannel
operator|!=
literal|null
condition|)
block|{
name|proxiedChannel
operator|.
name|close
argument_list|()
expr_stmt|;
name|proxiedChannel
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|exceptionCaught (ChannelHandlerContext ctx, Throwable cause)
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Proxy for "
operator|+
name|uri
operator|+
literal|" failed. cause: "
argument_list|,
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxiedChannel
operator|!=
literal|null
condition|)
block|{
name|proxiedChannel
operator|.
name|close
argument_list|()
expr_stmt|;
name|proxiedChannel
operator|=
literal|null
expr_stmt|;
block|}
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|closeOnFlush (Channel ch)
specifier|private
specifier|static
name|void
name|closeOnFlush
parameter_list|(
name|Channel
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ch
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|ch
operator|.
name|writeAndFlush
argument_list|(
name|Unpooled
operator|.
name|EMPTY_BUFFER
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

