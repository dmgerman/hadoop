begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
operator|.
name|webhdfs
operator|.
name|WebHdfsHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
operator|.
name|webhdfs
operator|.
name|WebHdfsHandler
operator|.
name|WEBHDFS_PREFIX
import|;
end_import

begin_class
DECL|class|URLDispatcher
class|class
name|URLDispatcher
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|HttpRequest
argument_list|>
block|{
DECL|field|proxyHost
specifier|private
specifier|final
name|InetSocketAddress
name|proxyHost
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|confForCreate
specifier|private
specifier|final
name|Configuration
name|confForCreate
decl_stmt|;
DECL|method|URLDispatcher (InetSocketAddress proxyHost, Configuration conf, Configuration confForCreate)
name|URLDispatcher
parameter_list|(
name|InetSocketAddress
name|proxyHost
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Configuration
name|confForCreate
parameter_list|)
block|{
name|this
operator|.
name|proxyHost
operator|=
name|proxyHost
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|confForCreate
operator|=
name|confForCreate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|channelRead0 (ChannelHandlerContext ctx, HttpRequest req)
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|req
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|req
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|ChannelPipeline
name|p
init|=
name|ctx
operator|.
name|pipeline
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|WEBHDFS_PREFIX
argument_list|)
condition|)
block|{
name|WebHdfsHandler
name|h
init|=
operator|new
name|WebHdfsHandler
argument_list|(
name|conf
argument_list|,
name|confForCreate
argument_list|)
decl_stmt|;
name|p
operator|.
name|replace
argument_list|(
name|this
argument_list|,
name|WebHdfsHandler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|h
operator|.
name|channelRead0
argument_list|(
name|ctx
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SimpleHttpProxyHandler
name|h
init|=
operator|new
name|SimpleHttpProxyHandler
argument_list|(
name|proxyHost
argument_list|)
decl_stmt|;
name|p
operator|.
name|replace
argument_list|(
name|this
argument_list|,
name|SimpleHttpProxyHandler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|h
operator|.
name|channelRead0
argument_list|(
name|ctx
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

