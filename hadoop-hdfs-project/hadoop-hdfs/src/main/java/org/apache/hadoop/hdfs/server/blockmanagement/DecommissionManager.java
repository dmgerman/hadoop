begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Namesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|CyclicIteration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ChunkedArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_comment
comment|/**  * Manages datanode decommissioning. A background monitor thread   * periodically checks the status of datanodes that are in-progress of   * decommissioning.  *<p/>  * A datanode can be decommissioned in a few situations:  *<ul>  *<li>If a DN is dead, it is decommissioned immediately.</li>  *<li>If a DN is alive, it is decommissioned after all of its blocks   * are sufficiently replicated. Merely under-replicated blocks do not   * block decommissioning as long as they are above a replication   * threshold.</li>  *</ul>  * In the second case, the datanode transitions to a   * decommission-in-progress state and is tracked by the monitor thread. The   * monitor periodically scans through the list of insufficiently replicated  * blocks on these datanodes to   * determine if they can be decommissioned. The monitor also prunes this list   * as blocks become replicated, so monitor scans will become more efficient   * over time.  *<p/>  * Decommission-in-progress nodes that become dead do not progress to   * decommissioned until they become live again. This prevents potential   * durability loss for singly-replicated blocks (see HDFS-6791).  *<p/>  * This class depends on the FSNamesystem lock for synchronization.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DecommissionManager
specifier|public
class|class
name|DecommissionManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DecommissionManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|namesystem
specifier|private
specifier|final
name|Namesystem
name|namesystem
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|hbManager
specifier|private
specifier|final
name|HeartbeatManager
name|hbManager
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ScheduledExecutorService
name|executor
decl_stmt|;
comment|/**    * Map containing the decommission-in-progress datanodes that are being    * tracked so they can be be marked as decommissioned.    *<p/>    * This holds a set of references to the under-replicated blocks on the DN at    * the time the DN is added to the map, i.e. the blocks that are preventing    * the node from being marked as decommissioned. During a monitor tick, this    * list is pruned as blocks becomes replicated.    *<p/>    * Note also that the reference to the list of under-replicated blocks     * will be null on initial add    *<p/>    * However, this map can become out-of-date since it is not updated by block    * reports or other events. Before being finally marking as decommissioned,    * another check is done with the actual block map.    */
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
argument_list|>
DECL|field|decomNodeBlocks
name|decomNodeBlocks
decl_stmt|;
comment|/**    * Tracking a node in decomNodeBlocks consumes additional memory. To limit    * the impact on NN memory consumption, we limit the number of nodes in     * decomNodeBlocks. Additional nodes wait in pendingNodes.    */
DECL|field|pendingNodes
specifier|private
specifier|final
name|Queue
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pendingNodes
decl_stmt|;
DECL|field|monitor
specifier|private
name|Monitor
name|monitor
init|=
literal|null
decl_stmt|;
DECL|method|DecommissionManager (final Namesystem namesystem, final BlockManager blockManager, final HeartbeatManager hbManager)
name|DecommissionManager
parameter_list|(
specifier|final
name|Namesystem
name|namesystem
parameter_list|,
specifier|final
name|BlockManager
name|blockManager
parameter_list|,
specifier|final
name|HeartbeatManager
name|hbManager
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|blockManager
operator|=
name|blockManager
expr_stmt|;
name|this
operator|.
name|hbManager
operator|=
name|hbManager
expr_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"DecommissionMonitor-%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|decomNodeBlocks
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|pendingNodes
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Start the decommission monitor thread.    * @param conf    */
DECL|method|activate (Configuration conf)
name|void
name|activate
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|int
name|intervalSecs
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|intervalSecs
operator|>=
literal|0
argument_list|,
literal|"Cannot set a negative "
operator|+
literal|"value for "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY
argument_list|)
expr_stmt|;
name|int
name|blocksPerInterval
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|String
name|deprecatedKey
init|=
literal|"dfs.namenode.decommission.nodes.per.interval"
decl_stmt|;
specifier|final
name|String
name|strNodes
init|=
name|conf
operator|.
name|get
argument_list|(
name|deprecatedKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|strNodes
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deprecated configuration key {} will be ignored."
argument_list|,
name|deprecatedKey
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Please update your configuration to use {} instead."
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY
argument_list|)
expr_stmt|;
block|}
name|checkArgument
argument_list|(
name|blocksPerInterval
operator|>
literal|0
argument_list|,
literal|"Must set a positive value for "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxConcurrentTrackedNodes
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT
argument_list|)
decl_stmt|;
name|checkArgument
argument_list|(
name|maxConcurrentTrackedNodes
operator|>=
literal|0
argument_list|,
literal|"Cannot set a negative "
operator|+
literal|"value for "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES
argument_list|)
expr_stmt|;
name|monitor
operator|=
operator|new
name|Monitor
argument_list|(
name|blocksPerInterval
argument_list|,
name|maxConcurrentTrackedNodes
argument_list|)
expr_stmt|;
name|executor
operator|.
name|scheduleAtFixedRate
argument_list|(
name|monitor
argument_list|,
name|intervalSecs
argument_list|,
name|intervalSecs
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Activating DecommissionManager with interval {} seconds, "
operator|+
literal|"{} max blocks per interval, "
operator|+
literal|"{} max concurrently tracked nodes."
argument_list|,
name|intervalSecs
argument_list|,
name|blocksPerInterval
argument_list|,
name|maxConcurrentTrackedNodes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stop the decommission monitor thread, waiting briefly for it to terminate.    */
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|3000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
comment|/**    * Start decommissioning the specified datanode.     * @param node    */
annotation|@
name|VisibleForTesting
DECL|method|startDecommission (DatanodeDescriptor node)
specifier|public
name|void
name|startDecommission
parameter_list|(
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|isDecommissionInProgress
argument_list|()
operator|&&
operator|!
name|node
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
comment|// Update DN stats maintained by HeartbeatManager
name|hbManager
operator|.
name|startDecommission
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// hbManager.startDecommission will set dead node to decommissioned.
if|if
condition|(
name|node
operator|.
name|isDecommissionInProgress
argument_list|()
condition|)
block|{
for|for
control|(
name|DatanodeStorageInfo
name|storage
range|:
name|node
operator|.
name|getStorageInfos
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting decommission of {} {} with {} blocks"
argument_list|,
name|node
argument_list|,
name|storage
argument_list|,
name|storage
operator|.
name|numBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|decommissioningStatus
operator|.
name|setStartTime
argument_list|(
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
name|pendingNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"startDecommission: Node {} in {}, nothing to do."
operator|+
name|node
argument_list|,
name|node
operator|.
name|getAdminState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Stop decommissioning the specified datanode.     * @param node    */
annotation|@
name|VisibleForTesting
DECL|method|stopDecommission (DatanodeDescriptor node)
specifier|public
name|void
name|stopDecommission
parameter_list|(
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|isDecommissionInProgress
argument_list|()
operator|||
name|node
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
comment|// Update DN stats maintained by HeartbeatManager
name|hbManager
operator|.
name|stopDecommission
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// Over-replicated blocks will be detected and processed when
comment|// the dead node comes back and send in its full block report.
if|if
condition|(
name|node
operator|.
name|isAlive
condition|)
block|{
name|blockManager
operator|.
name|processOverReplicatedBlocksOnReCommission
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|// Remove from tracking in DecommissionManager
name|pendingNodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|decomNodeBlocks
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"stopDecommission: Node {} in {}, nothing to do."
operator|+
name|node
argument_list|,
name|node
operator|.
name|getAdminState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setDecommissioned (DatanodeDescriptor dn)
specifier|private
name|void
name|setDecommissioned
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|dn
operator|.
name|setDecommissioned
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Decommissioning complete for node {}"
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks whether a block is sufficiently replicated/stored for    * decommissioning. For replicated blocks or striped blocks, full-strength    * replication or storage is not always necessary, hence "sufficient".    * @return true if sufficient, else false.    */
DECL|method|isSufficient (BlockInfo block, BlockCollection bc, NumberReplicas numberReplicas)
specifier|private
name|boolean
name|isSufficient
parameter_list|(
name|BlockInfo
name|block
parameter_list|,
name|BlockCollection
name|bc
parameter_list|,
name|NumberReplicas
name|numberReplicas
parameter_list|)
block|{
specifier|final
name|int
name|numExpected
init|=
name|blockManager
operator|.
name|getExpectedReplicaNum
argument_list|(
name|block
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numLive
init|=
name|numberReplicas
operator|.
name|liveReplicas
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|blockManager
operator|.
name|isNeededReplication
argument_list|(
name|block
argument_list|,
name|numLive
argument_list|)
condition|)
block|{
comment|// Block doesn't need replication. Skip.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Block {} does not need replication."
argument_list|,
name|block
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Block is under-replicated
name|LOG
operator|.
name|trace
argument_list|(
literal|"Block {} numExpected={}, numLive={}"
argument_list|,
name|block
argument_list|,
name|numExpected
argument_list|,
name|numLive
argument_list|)
expr_stmt|;
if|if
condition|(
name|numExpected
operator|>
name|numLive
condition|)
block|{
if|if
condition|(
name|bc
operator|.
name|isUnderConstruction
argument_list|()
operator|&&
name|block
operator|.
name|equals
argument_list|(
name|bc
operator|.
name|getLastBlock
argument_list|()
argument_list|)
condition|)
block|{
comment|// Can decom a UC block as long as there will still be minReplicas
if|if
condition|(
name|blockManager
operator|.
name|hasMinStorage
argument_list|(
name|block
argument_list|,
name|numLive
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"UC block {} sufficiently-replicated since numLive ({}) "
operator|+
literal|">= minR ({})"
argument_list|,
name|block
argument_list|,
name|numLive
argument_list|,
name|blockManager
operator|.
name|getMinStorageNum
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"UC block {} insufficiently-replicated since numLive "
operator|+
literal|"({})< minR ({})"
argument_list|,
name|block
argument_list|,
name|numLive
argument_list|,
name|blockManager
operator|.
name|getMinStorageNum
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Can decom a non-UC as long as the default replication is met
if|if
condition|(
name|numLive
operator|>=
name|blockManager
operator|.
name|getDefaultStorageNum
argument_list|(
name|block
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|logBlockReplicationInfo (BlockInfo block, BlockCollection bc, DatanodeDescriptor srcNode, NumberReplicas num, Iterable<DatanodeStorageInfo> storages)
specifier|private
name|void
name|logBlockReplicationInfo
parameter_list|(
name|BlockInfo
name|block
parameter_list|,
name|BlockCollection
name|bc
parameter_list|,
name|DatanodeDescriptor
name|srcNode
parameter_list|,
name|NumberReplicas
name|num
parameter_list|,
name|Iterable
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|storages
parameter_list|)
block|{
name|int
name|curReplicas
init|=
name|num
operator|.
name|liveReplicas
argument_list|()
decl_stmt|;
name|int
name|curExpectedReplicas
init|=
name|blockManager
operator|.
name|getExpectedReplicaNum
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|StringBuilder
name|nodeList
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|storage
range|:
name|storages
control|)
block|{
specifier|final
name|DatanodeDescriptor
name|node
init|=
name|storage
operator|.
name|getDatanodeDescriptor
argument_list|()
decl_stmt|;
name|nodeList
operator|.
name|append
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|nodeList
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Block: "
operator|+
name|block
operator|+
literal|", Expected Replicas: "
operator|+
name|curExpectedReplicas
operator|+
literal|", live replicas: "
operator|+
name|curReplicas
operator|+
literal|", corrupt replicas: "
operator|+
name|num
operator|.
name|corruptReplicas
argument_list|()
operator|+
literal|", decommissioned replicas: "
operator|+
name|num
operator|.
name|decommissioned
argument_list|()
operator|+
literal|", decommissioning replicas: "
operator|+
name|num
operator|.
name|decommissioning
argument_list|()
operator|+
literal|", excess replicas: "
operator|+
name|num
operator|.
name|excessReplicas
argument_list|()
operator|+
literal|", Is Open File: "
operator|+
name|bc
operator|.
name|isUnderConstruction
argument_list|()
operator|+
literal|", Datanodes having this block: "
operator|+
name|nodeList
operator|+
literal|", Current Datanode: "
operator|+
name|srcNode
operator|+
literal|", Is current datanode decommissioning: "
operator|+
name|srcNode
operator|.
name|isDecommissionInProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumPendingNodes ()
specifier|public
name|int
name|getNumPendingNodes
parameter_list|()
block|{
return|return
name|pendingNodes
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumTrackedNodes ()
specifier|public
name|int
name|getNumTrackedNodes
parameter_list|()
block|{
return|return
name|decomNodeBlocks
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumNodesChecked ()
specifier|public
name|int
name|getNumNodesChecked
parameter_list|()
block|{
return|return
name|monitor
operator|.
name|numNodesChecked
return|;
block|}
comment|/**    * Checks to see if DNs have finished decommissioning.    *<p/>    * Since this is done while holding the namesystem lock,     * the amount of work per monitor tick is limited.    */
DECL|class|Monitor
specifier|private
class|class
name|Monitor
implements|implements
name|Runnable
block|{
comment|/**      * The maximum number of blocks to check per tick.      */
DECL|field|numBlocksPerCheck
specifier|private
specifier|final
name|int
name|numBlocksPerCheck
decl_stmt|;
comment|/**      * The maximum number of nodes to track in decomNodeBlocks. A value of 0      * means no limit.      */
DECL|field|maxConcurrentTrackedNodes
specifier|private
specifier|final
name|int
name|maxConcurrentTrackedNodes
decl_stmt|;
comment|/**      * The number of blocks that have been checked on this tick.      */
DECL|field|numBlocksChecked
specifier|private
name|int
name|numBlocksChecked
init|=
literal|0
decl_stmt|;
comment|/**      * The number of nodes that have been checked on this tick. Used for       * statistics.      */
DECL|field|numNodesChecked
specifier|private
name|int
name|numNodesChecked
init|=
literal|0
decl_stmt|;
comment|/**      * The last datanode in decomNodeBlocks that we've processed      */
DECL|field|iterkey
specifier|private
name|DatanodeDescriptor
name|iterkey
init|=
operator|new
name|DatanodeDescriptor
argument_list|(
operator|new
name|DatanodeID
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|Monitor (int numBlocksPerCheck, int maxConcurrentTrackedNodes)
name|Monitor
parameter_list|(
name|int
name|numBlocksPerCheck
parameter_list|,
name|int
name|maxConcurrentTrackedNodes
parameter_list|)
block|{
name|this
operator|.
name|numBlocksPerCheck
operator|=
name|numBlocksPerCheck
expr_stmt|;
name|this
operator|.
name|maxConcurrentTrackedNodes
operator|=
name|maxConcurrentTrackedNodes
expr_stmt|;
block|}
DECL|method|exceededNumBlocksPerCheck ()
specifier|private
name|boolean
name|exceededNumBlocksPerCheck
parameter_list|()
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processed {} blocks so far this tick"
argument_list|,
name|numBlocksChecked
argument_list|)
expr_stmt|;
return|return
name|numBlocksChecked
operator|>=
name|numBlocksPerCheck
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|namesystem
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Namesystem is not running, skipping decommissioning checks"
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Reset the checked count at beginning of each iteration
name|numBlocksChecked
operator|=
literal|0
expr_stmt|;
name|numNodesChecked
operator|=
literal|0
expr_stmt|;
comment|// Check decom progress
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|processPendingNodes
argument_list|()
expr_stmt|;
name|check
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numBlocksChecked
operator|+
name|numNodesChecked
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Checked {} blocks and {} nodes this tick"
argument_list|,
name|numBlocksChecked
argument_list|,
name|numNodesChecked
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Pop datanodes off the pending list and into decomNodeBlocks,       * subject to the maxConcurrentTrackedNodes limit.      */
DECL|method|processPendingNodes ()
specifier|private
name|void
name|processPendingNodes
parameter_list|()
block|{
while|while
condition|(
operator|!
name|pendingNodes
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|maxConcurrentTrackedNodes
operator|==
literal|0
operator|||
name|decomNodeBlocks
operator|.
name|size
argument_list|()
operator|<
name|maxConcurrentTrackedNodes
operator|)
condition|)
block|{
name|decomNodeBlocks
operator|.
name|put
argument_list|(
name|pendingNodes
operator|.
name|poll
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|check ()
specifier|private
name|void
name|check
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
argument_list|>
argument_list|>
name|it
init|=
operator|new
name|CyclicIteration
argument_list|<>
argument_list|(
name|decomNodeBlocks
argument_list|,
name|iterkey
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|toRemove
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|exceededNumBlocksPerCheck
argument_list|()
condition|)
block|{
name|numNodesChecked
operator|++
expr_stmt|;
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeDescriptor
name|dn
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
name|blocks
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|fullScan
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|blocks
operator|==
literal|null
condition|)
block|{
comment|// This is a newly added datanode, run through its list to schedule
comment|// under-replicated blocks for replication and collect the blocks
comment|// that are insufficiently replicated for further tracking
name|LOG
operator|.
name|debug
argument_list|(
literal|"Newly-added node {}, doing full scan to find "
operator|+
literal|"insufficiently-replicated blocks."
argument_list|,
name|dn
argument_list|)
expr_stmt|;
name|blocks
operator|=
name|handleInsufficientlyStored
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|decomNodeBlocks
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
name|fullScan
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// This is a known datanode, check if its # of insufficiently
comment|// replicated blocks has dropped to zero and if it can be decommed
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing decommission-in-progress node {}"
argument_list|,
name|dn
argument_list|)
expr_stmt|;
name|pruneReliableBlocks
argument_list|(
name|dn
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blocks
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|fullScan
condition|)
block|{
comment|// If we didn't just do a full scan, need to re-check with the
comment|// full block map.
comment|//
comment|// We've replicated all the known insufficiently replicated
comment|// blocks. Re-check with the full block map before finally
comment|// marking the datanode as decommissioned
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node {} has finished replicating current set of "
operator|+
literal|"blocks, checking with the full block map."
argument_list|,
name|dn
argument_list|)
expr_stmt|;
name|blocks
operator|=
name|handleInsufficientlyStored
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|decomNodeBlocks
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
block|}
comment|// If the full scan is clean AND the node liveness is okay,
comment|// we can finally mark as decommissioned.
specifier|final
name|boolean
name|isHealthy
init|=
name|blockManager
operator|.
name|isNodeHealthyForDecommission
argument_list|(
name|dn
argument_list|)
decl_stmt|;
if|if
condition|(
name|blocks
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|isHealthy
condition|)
block|{
name|setDecommissioned
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node {} is sufficiently replicated and healthy, "
operator|+
literal|"marked as decommissioned."
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Node {} "
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHealthy
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"is "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|"isn't "
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"healthy and still needs to replicate {} more blocks,"
operator|+
literal|" decommissioning is still in progress."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|,
name|dn
argument_list|,
name|blocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node {} still has {} blocks to replicate "
operator|+
literal|"before it is a candidate to finish decommissioning."
argument_list|,
name|dn
argument_list|,
name|blocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iterkey
operator|=
name|dn
expr_stmt|;
block|}
comment|// Remove the datanodes that are decommissioned
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|toRemove
control|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|dn
operator|.
name|isDecommissioned
argument_list|()
argument_list|,
literal|"Removing a node that is not yet decommissioned!"
argument_list|)
expr_stmt|;
name|decomNodeBlocks
operator|.
name|remove
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Removes reliable blocks from the block list of a datanode.      */
DECL|method|pruneReliableBlocks (final DatanodeDescriptor datanode, AbstractList<BlockInfo> blocks)
specifier|private
name|void
name|pruneReliableBlocks
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|datanode
parameter_list|,
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
name|blocks
parameter_list|)
block|{
name|processBlocksForDecomInternal
argument_list|(
name|datanode
argument_list|,
name|blocks
operator|.
name|iterator
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a list of blocks on a datanode that are insufficiently replicated      * or require recovery, i.e. requiring recovery and should prevent      * decommission.      *<p/>      * As part of this, it also schedules replication/recovery work.      *      * @return List of blocks requiring recovery      */
DECL|method|handleInsufficientlyStored ( final DatanodeDescriptor datanode)
specifier|private
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
name|handleInsufficientlyStored
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|datanode
parameter_list|)
block|{
name|AbstractList
argument_list|<
name|BlockInfo
argument_list|>
name|insufficient
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|processBlocksForDecomInternal
argument_list|(
name|datanode
argument_list|,
name|datanode
operator|.
name|getBlockIterator
argument_list|()
argument_list|,
name|insufficient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|insufficient
return|;
block|}
comment|/**      * Used while checking if decommission-in-progress datanodes can be marked      * as decommissioned. Combines shared logic of       * pruneReliableBlocks and handleInsufficientlyStored.      *      * @param datanode                    Datanode      * @param it                          Iterator over the blocks on the      *                                    datanode      * @param insufficientList            Return parameter. If it's not null,      *                                    will contain the insufficiently      *                                    replicated-blocks from the list.      * @param pruneReliableBlocks         whether to remove blocks reliable      *                                    enough from the iterator      */
DECL|method|processBlocksForDecomInternal ( final DatanodeDescriptor datanode, final Iterator<BlockInfo> it, final List<BlockInfo> insufficientList, boolean pruneReliableBlocks)
specifier|private
name|void
name|processBlocksForDecomInternal
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|datanode
parameter_list|,
specifier|final
name|Iterator
argument_list|<
name|BlockInfo
argument_list|>
name|it
parameter_list|,
specifier|final
name|List
argument_list|<
name|BlockInfo
argument_list|>
name|insufficientList
parameter_list|,
name|boolean
name|pruneReliableBlocks
parameter_list|)
block|{
name|boolean
name|firstReplicationLog
init|=
literal|true
decl_stmt|;
name|int
name|underReplicatedBlocks
init|=
literal|0
decl_stmt|;
name|int
name|decommissionOnlyReplicas
init|=
literal|0
decl_stmt|;
name|int
name|underReplicatedInOpenFiles
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|numBlocksChecked
operator|++
expr_stmt|;
specifier|final
name|BlockInfo
name|block
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Remove the block from the list if it's no longer in the block map,
comment|// e.g. the containing file has been deleted
if|if
condition|(
name|blockManager
operator|.
name|blocksMap
operator|.
name|getStoredBlock
argument_list|(
name|block
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing unknown block {}"
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|long
name|bcId
init|=
name|block
operator|.
name|getBlockCollectionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|bcId
operator|==
name|INodeId
operator|.
name|INVALID_INODE_ID
condition|)
block|{
comment|// Orphan block, will be invalidated eventually. Skip.
continue|continue;
block|}
name|BlockCollection
name|bc
init|=
name|namesystem
operator|.
name|getBlockCollection
argument_list|(
name|bcId
argument_list|)
decl_stmt|;
specifier|final
name|NumberReplicas
name|num
init|=
name|blockManager
operator|.
name|countNodes
argument_list|(
name|block
argument_list|)
decl_stmt|;
specifier|final
name|int
name|liveReplicas
init|=
name|num
operator|.
name|liveReplicas
argument_list|()
decl_stmt|;
comment|// Schedule under-replicated blocks for replication if not already
comment|// pending
if|if
condition|(
name|blockManager
operator|.
name|isNeededReplication
argument_list|(
name|block
argument_list|,
name|liveReplicas
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|blockManager
operator|.
name|neededReplications
operator|.
name|contains
argument_list|(
name|block
argument_list|)
operator|&&
name|blockManager
operator|.
name|pendingReplications
operator|.
name|getNumReplicas
argument_list|(
name|block
argument_list|)
operator|==
literal|0
operator|&&
name|blockManager
operator|.
name|isPopulatingReplQueues
argument_list|()
condition|)
block|{
comment|// Process these blocks only when active NN is out of safe mode.
name|blockManager
operator|.
name|neededReplications
operator|.
name|add
argument_list|(
name|block
argument_list|,
name|liveReplicas
argument_list|,
name|num
operator|.
name|decommissionedAndDecommissioning
argument_list|()
argument_list|,
name|blockManager
operator|.
name|getExpectedReplicaNum
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Even if the block is under-replicated,
comment|// it doesn't block decommission if it's sufficiently replicated
if|if
condition|(
name|isSufficient
argument_list|(
name|block
argument_list|,
name|bc
argument_list|,
name|num
argument_list|)
condition|)
block|{
if|if
condition|(
name|pruneReliableBlocks
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
comment|// We've found an insufficiently replicated block.
if|if
condition|(
name|insufficientList
operator|!=
literal|null
condition|)
block|{
name|insufficientList
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
comment|// Log if this is our first time through
if|if
condition|(
name|firstReplicationLog
condition|)
block|{
name|logBlockReplicationInfo
argument_list|(
name|block
argument_list|,
name|bc
argument_list|,
name|datanode
argument_list|,
name|num
argument_list|,
name|blockManager
operator|.
name|blocksMap
operator|.
name|getStorages
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
name|firstReplicationLog
operator|=
literal|false
expr_stmt|;
block|}
comment|// Update various counts
name|underReplicatedBlocks
operator|++
expr_stmt|;
if|if
condition|(
name|bc
operator|.
name|isUnderConstruction
argument_list|()
condition|)
block|{
name|underReplicatedInOpenFiles
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|liveReplicas
operator|==
literal|0
operator|)
operator|&&
operator|(
name|num
operator|.
name|decommissionedAndDecommissioning
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|decommissionOnlyReplicas
operator|++
expr_stmt|;
block|}
block|}
name|datanode
operator|.
name|decommissioningStatus
operator|.
name|set
argument_list|(
name|underReplicatedBlocks
argument_list|,
name|decommissionOnlyReplicas
argument_list|,
name|underReplicatedInOpenFiles
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|runMonitor ()
name|void
name|runMonitor
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|Future
name|f
init|=
name|executor
operator|.
name|submit
argument_list|(
name|monitor
argument_list|)
decl_stmt|;
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

