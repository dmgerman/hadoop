begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|DataNodeVolumeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * {@link FileIoEvents} that profiles the performance of the metadata and data  * related operations on datanode volumes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ProfilingFileIoEvents
class|class
name|ProfilingFileIoEvents
extends|extends
name|FileIoEvents
block|{
annotation|@
name|Override
DECL|method|beforeMetadataOp (@ullable FsVolumeSpi volume, FileIoProvider.OPERATION op)
specifier|public
name|long
name|beforeMetadataOp
parameter_list|(
annotation|@
name|Nullable
name|FsVolumeSpi
name|volume
parameter_list|,
name|FileIoProvider
operator|.
name|OPERATION
name|op
parameter_list|)
block|{
name|DataNodeVolumeMetrics
name|metrics
init|=
name|getVolumeMetrics
argument_list|(
name|volume
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
return|return
name|Time
operator|.
name|monotonicNow
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|afterMetadataOp (@ullable FsVolumeSpi volume, FileIoProvider.OPERATION op, long begin)
specifier|public
name|void
name|afterMetadataOp
parameter_list|(
annotation|@
name|Nullable
name|FsVolumeSpi
name|volume
parameter_list|,
name|FileIoProvider
operator|.
name|OPERATION
name|op
parameter_list|,
name|long
name|begin
parameter_list|)
block|{
name|DataNodeVolumeMetrics
name|metrics
init|=
name|getVolumeMetrics
argument_list|(
name|volume
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|addMetadastaOperationLatency
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|begin
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|beforeFileIo (@ullable FsVolumeSpi volume, FileIoProvider.OPERATION op, long len)
specifier|public
name|long
name|beforeFileIo
parameter_list|(
annotation|@
name|Nullable
name|FsVolumeSpi
name|volume
parameter_list|,
name|FileIoProvider
operator|.
name|OPERATION
name|op
parameter_list|,
name|long
name|len
parameter_list|)
block|{
name|DataNodeVolumeMetrics
name|metrics
init|=
name|getVolumeMetrics
argument_list|(
name|volume
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
return|return
name|Time
operator|.
name|monotonicNow
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|afterFileIo (@ullable FsVolumeSpi volume, FileIoProvider.OPERATION op, long begin, long len)
specifier|public
name|void
name|afterFileIo
parameter_list|(
annotation|@
name|Nullable
name|FsVolumeSpi
name|volume
parameter_list|,
name|FileIoProvider
operator|.
name|OPERATION
name|op
parameter_list|,
name|long
name|begin
parameter_list|,
name|long
name|len
parameter_list|)
block|{
name|DataNodeVolumeMetrics
name|metrics
init|=
name|getVolumeMetrics
argument_list|(
name|volume
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|long
name|latency
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|begin
decl_stmt|;
name|metrics
operator|.
name|addDataFileIoLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|SYNC
case|:
name|metrics
operator|.
name|addSyncIoLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLUSH
case|:
name|metrics
operator|.
name|addFlushIoLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
break|break;
case|case
name|READ
case|:
name|metrics
operator|.
name|addReadIoLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
break|break;
case|case
name|WRITE
case|:
name|metrics
operator|.
name|addWriteIoLatency
argument_list|(
name|latency
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure (@ullable FsVolumeSpi volume, FileIoProvider.OPERATION op, Exception e, long begin)
specifier|public
name|void
name|onFailure
parameter_list|(
annotation|@
name|Nullable
name|FsVolumeSpi
name|volume
parameter_list|,
name|FileIoProvider
operator|.
name|OPERATION
name|op
parameter_list|,
name|Exception
name|e
parameter_list|,
name|long
name|begin
parameter_list|)
block|{
name|DataNodeVolumeMetrics
name|metrics
init|=
name|getVolumeMetrics
argument_list|(
name|volume
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|addFileIoError
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|begin
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nullable
annotation|@
name|Override
DECL|method|getStatistics ()
specifier|public
name|String
name|getStatistics
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getVolumeMetrics (final FsVolumeSpi volume)
specifier|private
name|DataNodeVolumeMetrics
name|getVolumeMetrics
parameter_list|(
specifier|final
name|FsVolumeSpi
name|volume
parameter_list|)
block|{
if|if
condition|(
name|volume
operator|!=
literal|null
condition|)
block|{
return|return
name|volume
operator|.
name|getMetrics
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

