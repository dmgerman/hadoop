begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|BasicParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|client
operator|.
name|CBlockVolumeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|meta
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocolPB
operator|.
name|CBlockServiceProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * The command line tool class.  */
end_comment

begin_class
DECL|class|CBlockCli
specifier|public
class|class
name|CBlockCli
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|CREATE_VOLUME
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_VOLUME
init|=
literal|"createVolume"
decl_stmt|;
DECL|field|DELETE_VOLUME
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_VOLUME
init|=
literal|"deleteVolume"
decl_stmt|;
DECL|field|INFO_VOLUME
specifier|private
specifier|static
specifier|final
name|String
name|INFO_VOLUME
init|=
literal|"infoVolume"
decl_stmt|;
DECL|field|LIST_VOLUME
specifier|private
specifier|static
specifier|final
name|String
name|LIST_VOLUME
init|=
literal|"listVolume"
decl_stmt|;
DECL|field|SERVER_ADDR
specifier|private
specifier|static
specifier|final
name|String
name|SERVER_ADDR
init|=
literal|"serverAddr"
decl_stmt|;
DECL|field|HELP
specifier|private
specifier|static
specifier|final
name|String
name|HELP
init|=
literal|"help"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CBlockCli
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|printStream
specifier|private
name|PrintStream
name|printStream
decl_stmt|;
DECL|field|options
specifier|private
name|Options
name|options
decl_stmt|;
DECL|field|parser
specifier|private
name|BasicParser
name|parser
decl_stmt|;
DECL|field|localProxy
specifier|private
name|CBlockVolumeClient
name|localProxy
decl_stmt|;
DECL|method|CBlockCli (OzoneConfiguration conf, PrintStream printStream)
specifier|public
name|CBlockCli
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|PrintStream
name|printStream
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|printStream
operator|=
name|printStream
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|getOptions
argument_list|()
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|new
name|BasicParser
argument_list|()
expr_stmt|;
block|}
DECL|method|CBlockCli (OzoneConfiguration conf)
specifier|public
name|CBlockCli
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|parseArgs (String[] argv)
specifier|private
name|CommandLine
name|parseArgs
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|argv
argument_list|)
return|;
block|}
DECL|method|getOptions ()
specifier|private
specifier|static
name|Options
name|getOptions
parameter_list|()
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|Option
name|serverAddress
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"serverAddress>:<serverPort"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
name|SERVER_ADDR
argument_list|)
operator|.
name|withValueSeparator
argument_list|(
literal|':'
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"specify server address:port"
argument_list|)
operator|.
name|create
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|serverAddress
argument_list|)
expr_stmt|;
comment|// taking 4 args: userName, volumeName, volumeSize, blockSize
name|Option
name|createVolume
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"user><volume><volumeSize in [GB/TB]><blockSize"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
name|CREATE_VOLUME
argument_list|)
operator|.
name|withValueSeparator
argument_list|(
literal|' '
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|4
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"create a fresh new volume"
argument_list|)
operator|.
name|create
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|createVolume
argument_list|)
expr_stmt|;
comment|// taking 2 args: userName, volumeName
name|Option
name|deleteVolume
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"user><volume"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
name|DELETE_VOLUME
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"delete a volume"
argument_list|)
operator|.
name|create
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|deleteVolume
argument_list|)
expr_stmt|;
comment|// taking 2 args: userName, volumeName
name|Option
name|infoVolume
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"user><volume"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
name|INFO_VOLUME
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"info a volume"
argument_list|)
operator|.
name|create
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|infoVolume
argument_list|)
expr_stmt|;
comment|// taking 1 arg: userName
name|Option
name|listVolume
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"user"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
name|LIST_VOLUME
argument_list|)
operator|.
name|hasOptionalArgs
argument_list|(
literal|1
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"list all volumes"
argument_list|)
operator|.
name|create
argument_list|(
literal|"l"
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|listVolume
argument_list|)
expr_stmt|;
name|Option
name|help
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|HELP
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"help"
argument_list|)
operator|.
name|create
argument_list|(
literal|"h"
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|help
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|CommandLine
name|commandLine
init|=
name|parseArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|String
index|[]
name|serverAddrArgs
init|=
name|commandLine
operator|.
name|getOptionValues
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"server address"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|serverAddrArgs
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|serverHost
init|=
name|serverAddrArgs
index|[
literal|0
index|]
decl_stmt|;
name|int
name|serverPort
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|serverAddrArgs
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|serverAddress
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|serverHost
argument_list|,
name|serverPort
argument_list|)
decl_stmt|;
name|this
operator|.
name|localProxy
operator|=
operator|new
name|CBlockVolumeClient
argument_list|(
name|conf
argument_list|,
name|serverAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|localProxy
operator|=
operator|new
name|CBlockVolumeClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"help"
argument_list|)
expr_stmt|;
name|help
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"c"
argument_list|)
condition|)
block|{
name|String
index|[]
name|createArgs
init|=
name|commandLine
operator|.
name|getOptionValues
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create volume:"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|createArgs
argument_list|)
argument_list|)
expr_stmt|;
name|createVolume
argument_list|(
name|createArgs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"d"
argument_list|)
condition|)
block|{
name|String
index|[]
name|deleteArgs
init|=
name|commandLine
operator|.
name|getOptionValues
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"delete args:"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|deleteArgs
argument_list|)
argument_list|)
expr_stmt|;
name|deleteVolume
argument_list|(
name|deleteArgs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"l"
argument_list|)
condition|)
block|{
name|String
index|[]
name|listArg
init|=
name|commandLine
operator|.
name|getOptionValues
argument_list|(
literal|"l"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"list args:"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|listArg
argument_list|)
argument_list|)
expr_stmt|;
name|listVolume
argument_list|(
name|listArg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"i"
argument_list|)
condition|)
block|{
name|String
index|[]
name|infoArgs
init|=
name|commandLine
operator|.
name|getOptionValues
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"info args:"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|infoArgs
argument_list|)
argument_list|)
expr_stmt|;
name|infoVolume
argument_list|(
name|infoArgs
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|cblockConf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|cblockConf
argument_list|,
name|CBlockServiceProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|res
init|=
literal|0
decl_stmt|;
name|Tool
name|shell
init|=
operator|new
name|CBlockCli
argument_list|(
name|cblockConf
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
try|try
block|{
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
literal|1
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
DECL|method|parseSize (String volumeSizeArgs)
specifier|public
specifier|static
name|long
name|parseSize
parameter_list|(
name|String
name|volumeSizeArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|multiplier
init|=
literal|1
decl_stmt|;
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9]+)([a-zA-Z]+)"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|volumeSizeArgs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid volume size args "
operator|+
name|volumeSizeArgs
argument_list|)
throw|;
block|}
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"MB"
argument_list|)
operator|||
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Mi"
argument_list|)
condition|)
block|{
name|multiplier
operator|=
literal|1024L
operator|*
literal|1024
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"GB"
argument_list|)
operator|||
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Gi"
argument_list|)
condition|)
block|{
name|multiplier
operator|=
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TB"
argument_list|)
operator|||
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Ti"
argument_list|)
condition|)
block|{
name|multiplier
operator|=
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid volume size args "
operator|+
name|volumeSizeArgs
argument_list|)
throw|;
block|}
return|return
name|size
operator|*
name|multiplier
return|;
block|}
DECL|method|createVolume (String[] createArgs)
specifier|private
name|void
name|createVolume
parameter_list|(
name|String
index|[]
name|createArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|userName
init|=
name|createArgs
index|[
literal|0
index|]
decl_stmt|;
name|String
name|volumeName
init|=
name|createArgs
index|[
literal|1
index|]
decl_stmt|;
name|long
name|volumeSize
init|=
name|parseSize
argument_list|(
name|createArgs
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|int
name|blockSize
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|createArgs
index|[
literal|3
index|]
argument_list|)
operator|*
literal|1024
decl_stmt|;
name|localProxy
operator|.
name|createVolume
argument_list|(
name|userName
argument_list|,
name|volumeName
argument_list|,
name|volumeSize
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteVolume (String[] deleteArgs)
specifier|private
name|void
name|deleteVolume
parameter_list|(
name|String
index|[]
name|deleteArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|userName
init|=
name|deleteArgs
index|[
literal|0
index|]
decl_stmt|;
name|String
name|volumeName
init|=
name|deleteArgs
index|[
literal|1
index|]
decl_stmt|;
name|boolean
name|force
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|deleteArgs
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|force
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|deleteArgs
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
name|localProxy
operator|.
name|deleteVolume
argument_list|(
name|userName
argument_list|,
name|volumeName
argument_list|,
name|force
argument_list|)
expr_stmt|;
block|}
DECL|method|infoVolume (String[] infoArgs)
specifier|private
name|void
name|infoVolume
parameter_list|(
name|String
index|[]
name|infoArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|userName
init|=
name|infoArgs
index|[
literal|0
index|]
decl_stmt|;
name|String
name|volumeName
init|=
name|infoArgs
index|[
literal|1
index|]
decl_stmt|;
name|VolumeInfo
name|volumeInfo
init|=
name|localProxy
operator|.
name|infoVolume
argument_list|(
name|userName
argument_list|,
name|volumeName
argument_list|)
decl_stmt|;
name|printStream
operator|.
name|println
argument_list|(
name|volumeInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|listVolume (String[] listArgs)
specifier|private
name|void
name|listVolume
parameter_list|(
name|String
index|[]
name|listArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumeResponse
decl_stmt|;
if|if
condition|(
name|listArgs
operator|==
literal|null
condition|)
block|{
name|volumeResponse
operator|=
name|localProxy
operator|.
name|listVolume
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|volumeResponse
operator|=
name|localProxy
operator|.
name|listVolume
argument_list|(
name|listArgs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|volumeResponse
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s\t%d\t%d"
argument_list|,
name|volumeResponse
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|,
name|volumeResponse
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|volumeResponse
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getVolumeSize
argument_list|()
argument_list|,
name|volumeResponse
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlockSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|volumeResponse
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|printStream
operator|.
name|println
argument_list|(
name|stringBuilder
argument_list|)
expr_stmt|;
block|}
DECL|method|help ()
specifier|private
name|void
name|help
parameter_list|()
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|100
argument_list|,
literal|"cblock"
argument_list|,
literal|""
argument_list|,
name|options
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

