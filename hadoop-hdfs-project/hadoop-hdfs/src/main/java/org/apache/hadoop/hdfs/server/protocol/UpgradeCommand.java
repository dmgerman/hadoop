begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * This as a generic distributed upgrade command.  *   * During the upgrade cluster components send upgrade commands to each other  * in order to obtain or share information with them.  * It is supposed that each upgrade defines specific upgrade command by  * deriving them from this class.  * The upgrade command contains version of the upgrade, which is verified   * on the receiving side and current status of the upgrade.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|UpgradeCommand
specifier|public
class|class
name|UpgradeCommand
extends|extends
name|DatanodeCommand
block|{
DECL|field|UC_ACTION_UNKNOWN
specifier|public
specifier|final
specifier|static
name|int
name|UC_ACTION_UNKNOWN
init|=
name|DatanodeProtocol
operator|.
name|DNA_UNKNOWN
decl_stmt|;
DECL|field|UC_ACTION_REPORT_STATUS
specifier|public
specifier|final
specifier|static
name|int
name|UC_ACTION_REPORT_STATUS
init|=
name|DatanodeProtocol
operator|.
name|DNA_UC_ACTION_REPORT_STATUS
decl_stmt|;
DECL|field|UC_ACTION_START_UPGRADE
specifier|public
specifier|final
specifier|static
name|int
name|UC_ACTION_START_UPGRADE
init|=
name|DatanodeProtocol
operator|.
name|DNA_UC_ACTION_START_UPGRADE
decl_stmt|;
DECL|field|version
specifier|private
name|int
name|version
decl_stmt|;
DECL|field|upgradeStatus
specifier|private
name|short
name|upgradeStatus
decl_stmt|;
DECL|method|UpgradeCommand ()
specifier|public
name|UpgradeCommand
parameter_list|()
block|{
name|super
argument_list|(
name|UC_ACTION_UNKNOWN
argument_list|)
expr_stmt|;
name|this
operator|.
name|version
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|upgradeStatus
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|UpgradeCommand (int action, int version, short status)
specifier|public
name|UpgradeCommand
parameter_list|(
name|int
name|action
parameter_list|,
name|int
name|version
parameter_list|,
name|short
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|upgradeStatus
operator|=
name|status
expr_stmt|;
block|}
DECL|method|getVersion ()
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|getCurrentStatus ()
specifier|public
name|short
name|getCurrentStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|upgradeStatus
return|;
block|}
block|}
end_class

end_unit

