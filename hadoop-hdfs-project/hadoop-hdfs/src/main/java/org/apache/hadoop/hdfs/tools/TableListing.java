begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * This class implements a "table listing" with column headers.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TableListing
specifier|public
class|class
name|TableListing
block|{
DECL|enum|Justification
specifier|public
enum|enum
name|Justification
block|{
DECL|enumConstant|LEFT
name|LEFT
block|,
DECL|enumConstant|RIGHT
name|RIGHT
block|;   }
DECL|class|Column
specifier|private
specifier|static
class|class
name|Column
block|{
DECL|field|rows
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|String
argument_list|>
name|rows
decl_stmt|;
DECL|field|justification
specifier|private
specifier|final
name|Justification
name|justification
decl_stmt|;
DECL|field|maxLength
specifier|private
name|int
name|maxLength
decl_stmt|;
DECL|method|Column (String title, Justification justification)
name|Column
parameter_list|(
name|String
name|title
parameter_list|,
name|Justification
name|justification
parameter_list|)
block|{
name|this
operator|.
name|rows
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|justification
operator|=
name|justification
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
literal|0
expr_stmt|;
name|addRow
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
DECL|method|addRow (String val)
specifier|private
name|void
name|addRow
parameter_list|(
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
operator|(
name|val
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|)
operator|>
name|maxLength
condition|)
block|{
name|maxLength
operator|=
name|val
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
name|rows
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|getRow (int i)
name|String
name|getRow
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|String
name|raw
init|=
name|rows
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|paddingLength
init|=
name|maxLength
operator|-
name|raw
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|padding
init|=
operator|(
name|paddingLength
operator|<=
literal|0
operator|)
condition|?
literal|""
else|:
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|" "
argument_list|,
name|paddingLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|justification
operator|==
name|Justification
operator|.
name|LEFT
condition|)
block|{
return|return
name|raw
operator|+
name|padding
return|;
block|}
else|else
block|{
return|return
name|padding
operator|+
name|raw
return|;
block|}
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|columns
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Column
argument_list|>
name|columns
init|=
operator|new
name|LinkedList
argument_list|<
name|Column
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Create a new Builder.      */
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{     }
comment|/**      * Add a new field to the Table under construction.      *      * @param title          Field title.      * @param leftJustified  Whether or not the field is left justified.      * @return               this.      */
DECL|method|addField (String title, Justification justification)
specifier|public
name|Builder
name|addField
parameter_list|(
name|String
name|title
parameter_list|,
name|Justification
name|justification
parameter_list|)
block|{
name|columns
operator|.
name|add
argument_list|(
operator|new
name|Column
argument_list|(
name|title
argument_list|,
name|justification
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Create a new TableListing.      */
DECL|method|build ()
specifier|public
name|TableListing
name|build
parameter_list|()
block|{
return|return
operator|new
name|TableListing
argument_list|(
name|columns
operator|.
name|toArray
argument_list|(
operator|new
name|Column
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|field|columns
specifier|private
specifier|final
name|Column
name|columns
index|[]
decl_stmt|;
DECL|field|numRows
specifier|private
name|int
name|numRows
decl_stmt|;
DECL|method|TableListing (Column columns[])
name|TableListing
parameter_list|(
name|Column
name|columns
index|[]
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|numRows
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Add a new row.    *    * @param row    The row of objects to add-- one per column.    */
DECL|method|addRow (String row[])
specifier|public
name|void
name|addRow
parameter_list|(
name|String
name|row
index|[]
parameter_list|)
block|{
if|if
condition|(
name|row
operator|.
name|length
operator|!=
name|columns
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"trying to add a row with "
operator|+
name|row
operator|.
name|length
operator|+
literal|" columns, but we have "
operator|+
name|columns
operator|.
name|length
operator|+
literal|" columns."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columns
index|[
name|i
index|]
operator|.
name|addRow
argument_list|(
name|row
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|numRows
operator|++
expr_stmt|;
block|}
comment|/**    * Convert the table to a string.    */
DECL|method|build ()
specifier|public
name|String
name|build
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|String
name|prefix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columns
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|" "
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|columns
index|[
name|j
index|]
operator|.
name|getRow
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

