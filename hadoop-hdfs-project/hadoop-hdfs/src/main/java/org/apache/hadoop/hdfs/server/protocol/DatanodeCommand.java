begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Base class for data-node command.  * Issued by the name-node to notify data-nodes what should be done.  */
end_comment

begin_comment
comment|// Declare subclasses for Avro's denormalized representation
end_comment

begin_class
annotation|@
name|Union
argument_list|(
block|{
name|Void
operator|.
name|class
block|,
name|RegisterCommand
operator|.
name|class
block|,
name|FinalizeCommand
operator|.
name|class
block|,
name|BlockCommand
operator|.
name|class
block|,
name|UpgradeCommand
operator|.
name|class
block|,
name|BlockRecoveryCommand
operator|.
name|class
block|,
name|KeyUpdateCommand
operator|.
name|class
block|}
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DatanodeCommand
specifier|public
specifier|abstract
class|class
name|DatanodeCommand
extends|extends
name|ServerCommand
block|{
DECL|method|DatanodeCommand ()
specifier|public
name|DatanodeCommand
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|DatanodeCommand (int action)
name|DatanodeCommand
parameter_list|(
name|int
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

