begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|MappedByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
operator|.
name|MapMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A memory-mapped region used by an HDFS client.  *   * This class includes a reference count and some other information used by  * ClientMmapManager to track and cache mmaps.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ClientMmap
specifier|public
class|class
name|ClientMmap
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientMmap
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * A reference to the manager of this mmap.    *     * This is only a weak reference to help minimize the damange done by    * code which leaks references accidentally.    */
DECL|field|manager
specifier|private
specifier|final
name|WeakReference
argument_list|<
name|ClientMmapManager
argument_list|>
name|manager
decl_stmt|;
comment|/**    * The actual mapped memory region.    */
DECL|field|map
specifier|private
specifier|final
name|MappedByteBuffer
name|map
decl_stmt|;
comment|/**    * A reference count tracking how many threads are using this object.    */
DECL|field|refCount
specifier|private
specifier|final
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**    * Block pertaining to this mmap    */
DECL|field|block
specifier|private
specifier|final
name|ExtendedBlock
name|block
decl_stmt|;
comment|/**    * The DataNode where this mmap came from.    */
DECL|field|datanodeID
specifier|private
specifier|final
name|DatanodeID
name|datanodeID
decl_stmt|;
comment|/**    * The monotonic time when this mmap was last evictable.    */
DECL|field|lastEvictableTimeNs
specifier|private
name|long
name|lastEvictableTimeNs
decl_stmt|;
DECL|method|load (ClientMmapManager manager, FileInputStream in, ExtendedBlock block, DatanodeID datanodeID)
specifier|public
specifier|static
name|ClientMmap
name|load
parameter_list|(
name|ClientMmapManager
name|manager
parameter_list|,
name|FileInputStream
name|in
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|,
name|DatanodeID
name|datanodeID
parameter_list|)
throws|throws
name|IOException
block|{
name|MappedByteBuffer
name|map
init|=
name|in
operator|.
name|getChannel
argument_list|()
operator|.
name|map
argument_list|(
name|MapMode
operator|.
name|READ_ONLY
argument_list|,
literal|0
argument_list|,
name|in
operator|.
name|getChannel
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ClientMmap
argument_list|(
name|manager
argument_list|,
name|map
argument_list|,
name|block
argument_list|,
name|datanodeID
argument_list|)
return|;
block|}
DECL|method|ClientMmap (ClientMmapManager manager, MappedByteBuffer map, ExtendedBlock block, DatanodeID datanodeID)
specifier|private
name|ClientMmap
parameter_list|(
name|ClientMmapManager
name|manager
parameter_list|,
name|MappedByteBuffer
name|map
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|,
name|DatanodeID
name|datanodeID
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|manager
operator|=
operator|new
name|WeakReference
argument_list|<
name|ClientMmapManager
argument_list|>
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
name|this
operator|.
name|datanodeID
operator|=
name|datanodeID
expr_stmt|;
name|this
operator|.
name|lastEvictableTimeNs
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Decrement the reference count on this object.    * Should be called with the ClientMmapManager lock held.    */
DECL|method|unref ()
specifier|public
name|void
name|unref
parameter_list|()
block|{
name|int
name|count
init|=
name|refCount
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't decrement the "
operator|+
literal|"reference count on this ClientMmap lower than 0."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|ClientMmapManager
name|man
init|=
name|manager
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|man
operator|==
literal|null
condition|)
block|{
name|unmap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|man
operator|.
name|makeEvictable
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Increment the reference count on this object.    *    * @return     The new reference count.    */
DECL|method|ref ()
specifier|public
name|int
name|ref
parameter_list|()
block|{
return|return
name|refCount
operator|.
name|getAndIncrement
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBlock ()
specifier|public
name|ExtendedBlock
name|getBlock
parameter_list|()
block|{
return|return
name|block
return|;
block|}
DECL|method|getDatanodeID ()
name|DatanodeID
name|getDatanodeID
parameter_list|()
block|{
return|return
name|datanodeID
return|;
block|}
DECL|method|getMappedByteBuffer ()
specifier|public
name|MappedByteBuffer
name|getMappedByteBuffer
parameter_list|()
block|{
return|return
name|map
return|;
block|}
DECL|method|setLastEvictableTimeNs (long lastEvictableTimeNs)
specifier|public
name|void
name|setLastEvictableTimeNs
parameter_list|(
name|long
name|lastEvictableTimeNs
parameter_list|)
block|{
name|this
operator|.
name|lastEvictableTimeNs
operator|=
name|lastEvictableTimeNs
expr_stmt|;
block|}
DECL|method|getLastEvictableTimeNs ()
specifier|public
name|long
name|getLastEvictableTimeNs
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastEvictableTimeNs
return|;
block|}
comment|/**    * Unmap the memory region.    */
DECL|method|unmap ()
name|void
name|unmap
parameter_list|()
block|{
assert|assert
operator|(
name|refCount
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|)
assert|;
name|NativeIO
operator|.
name|POSIX
operator|.
name|munmap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

