begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.jscsiHelper.cache.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|LogicalBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|storage
operator|.
name|ContainerProtocolCalls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|LevelDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Reads blocks from the container via the local cache.  */
end_comment

begin_class
DECL|class|SyncBlockReader
specifier|public
class|class
name|SyncBlockReader
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SyncBlockReader
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Update Queue - The reason why we have the queue is that we want to    * return the block as soon as we read it from the containers. This queue    * is work queue which will take the read block and update the cache.    * During testing we found levelDB is slow during writes, hence we wanted    * to return as block as soon as possible and update levelDB asynchronously.    */
DECL|field|QUEUE_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|QUEUE_SIZE
init|=
literal|1024
decl_stmt|;
comment|/**    * Config.    */
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|/**    * The parent cache this reader is operating against.    */
DECL|field|parentCache
specifier|private
specifier|final
name|CBlockLocalCache
name|parentCache
decl_stmt|;
DECL|field|updateQueue
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|updateQueue
decl_stmt|;
comment|/**    * executor is used for running LevelDB updates. In future, we might do    * read-aheads and this pool is useful for that too. The reason why we    * don't share an executor for reads and writes is because the write task    * is couple of magnitude slower than read task. So we don't want the    * update DB to queue up behind the writes.    */
DECL|field|executor
specifier|private
specifier|final
name|ThreadPoolExecutor
name|executor
decl_stmt|;
comment|/**    * Number of threads that pool starts with.    */
DECL|field|corePoolSize
specifier|private
specifier|final
name|int
name|corePoolSize
init|=
literal|1
decl_stmt|;
comment|/**    * Maximum number of threads our pool will ever create.    */
DECL|field|maxPoolSize
specifier|private
specifier|final
name|int
name|maxPoolSize
init|=
literal|10
decl_stmt|;
comment|/**    * The idle time a thread hangs around waiting for work. if we don't find    * new work in 60 seconds the worker thread is killed.    */
DECL|field|keepAlive
specifier|private
specifier|final
name|long
name|keepAlive
init|=
literal|60L
decl_stmt|;
comment|/**    * Constructs a SyncBlock reader.    *    * @param conf - Configuration    * @param cache - Cache    */
DECL|method|SyncBlockReader (Configuration conf, CBlockLocalCache cache)
specifier|public
name|SyncBlockReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CBlockLocalCache
name|cache
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|parentCache
operator|=
name|cache
expr_stmt|;
name|updateQueue
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|QUEUE_SIZE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ThreadFactory
name|workerThreadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"SyncBlockReader Thread #%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|executor
operator|=
operator|new
name|HadoopThreadPoolExecutor
argument_list|(
name|corePoolSize
argument_list|,
name|maxPoolSize
argument_list|,
name|keepAlive
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|updateQueue
argument_list|,
name|workerThreadFactory
argument_list|,
operator|new
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the cache DB.    *    * @return LevelDB    */
DECL|method|getCacheDB ()
specifier|private
name|LevelDBStore
name|getCacheDB
parameter_list|()
block|{
return|return
name|parentCache
operator|.
name|getCacheDB
argument_list|()
return|;
block|}
comment|/**    * Returns data from the local cache if found, else reads from the remote    * container.    *    * @param blockID - blockID    * @return LogicalBlock    */
DECL|method|readBlock (long blockID)
name|LogicalBlock
name|readBlock
parameter_list|(
name|long
name|blockID
parameter_list|)
throws|throws
name|IOException
block|{
name|XceiverClientSpi
name|client
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getblockFromDB
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|parentCache
operator|.
name|getTargetMetrics
argument_list|()
operator|.
name|incNumReadCacheHits
argument_list|()
expr_stmt|;
return|return
operator|new
name|DiskBlock
argument_list|(
name|blockID
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|parentCache
operator|.
name|getTargetMetrics
argument_list|()
operator|.
name|incNumReadCacheMiss
argument_list|()
expr_stmt|;
try|try
block|{
name|client
operator|=
name|parentCache
operator|.
name|getClientManager
argument_list|()
operator|.
name|acquireClient
argument_list|(
name|parentCache
operator|.
name|getPipeline
argument_list|(
name|blockID
argument_list|)
argument_list|)
expr_stmt|;
name|LogicalBlock
name|block
init|=
name|getBlockFromContainer
argument_list|(
name|blockID
argument_list|,
name|client
argument_list|)
decl_stmt|;
return|return
name|block
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|parentCache
operator|.
name|getClientManager
argument_list|()
operator|.
name|releaseClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Gets data from the DB if it exists.    *    * @param blockID - block id    * @return data    */
DECL|method|getblockFromDB (long blockID)
specifier|private
name|byte
index|[]
name|getblockFromDB
parameter_list|(
name|long
name|blockID
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|parentCache
operator|.
name|isShortCircuitIOEnabled
argument_list|()
condition|)
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getCacheDB
argument_list|()
operator|.
name|get
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|blockID
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentCache
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|parentCache
operator|.
name|getTracer
argument_list|()
operator|.
name|info
argument_list|(
literal|"Task=ReadTaskDBRead,BlockID={},SHA={},Time={}"
argument_list|,
name|blockID
argument_list|,
operator|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|data
argument_list|)
else|:
literal|null
argument_list|,
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
name|parentCache
operator|.
name|getTargetMetrics
argument_list|()
operator|.
name|updateDBReadLatency
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
catch|catch
parameter_list|(
name|DBException
name|dbe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while reading from cacheDB."
argument_list|,
name|dbe
argument_list|)
expr_stmt|;
throw|throw
name|dbe
throw|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Returns a block from a Remote Container. if the key is not found on a    * remote container we just return a block initialzied with zeros.    *    * @param blockID - blockID    * @param client - client    * @return LogicalBlock    * @throws IOException    */
DECL|method|getBlockFromContainer (long blockID, XceiverClientSpi client)
specifier|private
name|LogicalBlock
name|getBlockFromContainer
parameter_list|(
name|long
name|blockID
parameter_list|,
name|XceiverClientSpi
name|client
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|containerName
init|=
name|parentCache
operator|.
name|getPipeline
argument_list|(
name|blockID
argument_list|)
operator|.
name|getContainerName
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|GetSmallFileResponseProto
name|response
init|=
name|ContainerProtocolCalls
operator|.
name|readSmallFile
argument_list|(
name|client
argument_list|,
name|containerName
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|blockID
argument_list|)
argument_list|,
name|parentCache
operator|.
name|getTraceID
argument_list|(
name|blockID
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentCache
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|parentCache
operator|.
name|getTracer
argument_list|()
operator|.
name|info
argument_list|(
literal|"Task=ReadTaskContainerRead,BlockID={},SHA={},Time={}"
argument_list|,
name|blockID
argument_list|,
name|response
operator|.
name|getData
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|?
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|response
operator|.
name|getData
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
block|}
name|parentCache
operator|.
name|getTargetMetrics
argument_list|()
operator|.
name|updateContainerReadLatency
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
name|DiskBlock
name|block
init|=
operator|new
name|DiskBlock
argument_list|(
name|blockID
argument_list|,
name|response
operator|.
name|getData
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentCache
operator|.
name|isShortCircuitIOEnabled
argument_list|()
condition|)
block|{
name|queueUpdateTask
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
return|return
name|block
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|StorageContainerException
condition|)
block|{
name|parentCache
operator|.
name|getTargetMetrics
argument_list|()
operator|.
name|incNumReadLostBlocks
argument_list|()
expr_stmt|;
name|StorageContainerException
name|sce
init|=
operator|(
name|StorageContainerException
operator|)
name|ex
decl_stmt|;
if|if
condition|(
name|sce
operator|.
name|getResult
argument_list|()
operator|==
name|ContainerProtos
operator|.
name|Result
operator|.
name|NO_SUCH_KEY
operator|||
name|sce
operator|.
name|getResult
argument_list|()
operator|==
name|ContainerProtos
operator|.
name|Result
operator|.
name|IO_EXCEPTION
condition|)
block|{
return|return
operator|new
name|DiskBlock
argument_list|(
name|blockID
argument_list|,
operator|new
name|byte
index|[
name|parentCache
operator|.
name|getBlockSize
argument_list|()
index|]
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Updates the cache with the block that we just read.    *    * @param block    */
DECL|method|queueUpdateTask (final DiskBlock block)
specifier|private
name|void
name|queueUpdateTask
parameter_list|(
specifier|final
name|DiskBlock
name|block
parameter_list|)
block|{
name|Runnable
name|updateTask
init|=
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|block
operator|.
name|getData
argument_list|()
operator|.
name|array
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|getCacheDB
argument_list|()
operator|.
name|put
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|block
operator|.
name|getBlockID
argument_list|()
argument_list|)
argument_list|,
name|block
operator|.
name|getData
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|block
operator|.
name|setPersisted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Refusing to update the a null block in the local cache."
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|executor
operator|.
name|isShutdown
argument_list|()
operator|||
name|this
operator|.
name|executor
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Thread executor is not running."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|executor
operator|.
name|submit
argument_list|(
name|updateTask
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This is a read operation, we don't care if we updated the cache with the    * last block e read.    */
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

