begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
operator|.
name|ScanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_comment
comment|/**  * Periodically scans the data directories for block and block metadata files.  * Reconciles the differences with block information maintained in the dataset.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DirectoryScanner
specifier|public
class|class
name|DirectoryScanner
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DirectoryScanner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_MAP_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAP_SIZE
init|=
literal|32768
decl_stmt|;
DECL|field|dataset
specifier|private
specifier|final
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataset
decl_stmt|;
DECL|field|reportCompileThreadPool
specifier|private
specifier|final
name|ExecutorService
name|reportCompileThreadPool
decl_stmt|;
DECL|field|masterThread
specifier|private
specifier|final
name|ScheduledExecutorService
name|masterThread
decl_stmt|;
DECL|field|scanPeriodMsecs
specifier|private
specifier|final
name|long
name|scanPeriodMsecs
decl_stmt|;
DECL|field|throttleLimitMsPerSec
specifier|private
specifier|final
name|long
name|throttleLimitMsPerSec
decl_stmt|;
DECL|field|shouldRun
specifier|private
specifier|final
name|AtomicBoolean
name|shouldRun
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|retainDiffs
specifier|private
name|boolean
name|retainDiffs
init|=
literal|false
decl_stmt|;
comment|/**    * Total combined wall clock time (in milliseconds) spent by the report    * compiler threads executing. Used for testing purposes.    */
annotation|@
name|VisibleForTesting
DECL|field|timeRunningMs
specifier|final
name|AtomicLong
name|timeRunningMs
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
comment|/**    * Total combined wall clock time (in milliseconds) spent by the report    * compiler threads blocked by the throttle. Used for testing purposes.    */
annotation|@
name|VisibleForTesting
DECL|field|timeWaitingMs
specifier|final
name|AtomicLong
name|timeWaitingMs
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
comment|/**    * The complete list of block differences indexed by block pool ID.    */
annotation|@
name|VisibleForTesting
DECL|field|diffs
specifier|final
name|BlockPoolReport
name|diffs
init|=
operator|new
name|BlockPoolReport
argument_list|()
decl_stmt|;
comment|/**    * Statistics about the block differences in each blockpool, indexed by block    * pool ID.    */
annotation|@
name|VisibleForTesting
DECL|field|stats
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Stats
argument_list|>
name|stats
decl_stmt|;
comment|/**    * Allow retaining diffs for unit test and analysis. Defaults to false (off).    *    * @param b whether to retain diffs    */
annotation|@
name|VisibleForTesting
DECL|method|setRetainDiffs (boolean b)
specifier|public
name|void
name|setRetainDiffs
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|retainDiffs
operator|=
name|b
expr_stmt|;
block|}
comment|/**    * Stats tracked for reporting and testing, per blockpool    */
annotation|@
name|VisibleForTesting
DECL|class|Stats
specifier|static
class|class
name|Stats
block|{
DECL|field|bpid
specifier|final
name|String
name|bpid
decl_stmt|;
DECL|field|totalBlocks
name|long
name|totalBlocks
init|=
literal|0
decl_stmt|;
DECL|field|missingMetaFile
name|long
name|missingMetaFile
init|=
literal|0
decl_stmt|;
DECL|field|missingBlockFile
name|long
name|missingBlockFile
init|=
literal|0
decl_stmt|;
DECL|field|missingMemoryBlocks
name|long
name|missingMemoryBlocks
init|=
literal|0
decl_stmt|;
DECL|field|mismatchBlocks
name|long
name|mismatchBlocks
init|=
literal|0
decl_stmt|;
DECL|field|duplicateBlocks
name|long
name|duplicateBlocks
init|=
literal|0
decl_stmt|;
comment|/**      * Create a new Stats object for the given blockpool ID.      *      * @param bpid blockpool ID      */
DECL|method|Stats (String bpid)
specifier|public
name|Stats
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BlockPool "
operator|+
name|bpid
operator|+
literal|" Total blocks: "
operator|+
name|totalBlocks
operator|+
literal|", missing metadata files: "
operator|+
name|missingMetaFile
operator|+
literal|", missing block files: "
operator|+
name|missingBlockFile
operator|+
literal|", missing blocks in memory: "
operator|+
name|missingMemoryBlocks
operator|+
literal|", mismatched blocks: "
operator|+
name|mismatchBlocks
return|;
block|}
block|}
comment|/**    * Helper class for compiling block info reports from report compiler threads.    * Contains a volume, a set of block pool IDs, and a collection of ScanInfo    * objects. If a block pool exists but has no ScanInfo objects associated with    * it, there will be no mapping for that particular block pool.    */
annotation|@
name|VisibleForTesting
DECL|class|ScanInfoVolumeReport
specifier|public
specifier|static
class|class
name|ScanInfoVolumeReport
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|volume
specifier|private
specifier|final
name|FsVolumeSpi
name|volume
decl_stmt|;
DECL|field|blockPoolReport
specifier|private
specifier|final
name|BlockPoolReport
name|blockPoolReport
decl_stmt|;
comment|/**      * Create a new info list.      *      * @param volume      */
DECL|method|ScanInfoVolumeReport (final FsVolumeSpi volume)
name|ScanInfoVolumeReport
parameter_list|(
specifier|final
name|FsVolumeSpi
name|volume
parameter_list|)
block|{
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
name|this
operator|.
name|blockPoolReport
operator|=
operator|new
name|BlockPoolReport
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create a new info list initialized to the given expected size.      *      * @param sz initial expected size      */
DECL|method|ScanInfoVolumeReport (final FsVolumeSpi volume, final Collection<String> blockPools)
name|ScanInfoVolumeReport
parameter_list|(
specifier|final
name|FsVolumeSpi
name|volume
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|blockPools
parameter_list|)
block|{
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
name|this
operator|.
name|blockPoolReport
operator|=
operator|new
name|BlockPoolReport
argument_list|(
name|blockPools
argument_list|)
expr_stmt|;
block|}
DECL|method|addAll (final String bpid, final Collection<ScanInfo> scanInfos)
specifier|public
name|void
name|addAll
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|ScanInfo
argument_list|>
name|scanInfos
parameter_list|)
block|{
name|this
operator|.
name|blockPoolReport
operator|.
name|addAll
argument_list|(
name|bpid
argument_list|,
name|scanInfos
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlockPoolIds ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBlockPoolIds
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockPoolReport
operator|.
name|getBlockPoolIds
argument_list|()
return|;
block|}
DECL|method|getScanInfo (final String bpid)
specifier|public
name|List
argument_list|<
name|ScanInfo
argument_list|>
name|getScanInfo
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|)
block|{
return|return
name|this
operator|.
name|blockPoolReport
operator|.
name|getScanInfo
argument_list|(
name|bpid
argument_list|)
return|;
block|}
DECL|method|getVolume ()
specifier|public
name|FsVolumeSpi
name|getVolume
parameter_list|()
block|{
return|return
name|volume
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ScanInfoVolumeReport [volume="
operator|+
name|volume
operator|+
literal|", blockPoolReport="
operator|+
name|blockPoolReport
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**    * Helper class for compiling block info reports per block pool.    */
annotation|@
name|VisibleForTesting
DECL|class|BlockPoolReport
specifier|public
specifier|static
class|class
name|BlockPoolReport
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|blockPools
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|blockPools
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|ScanInfo
argument_list|>
name|map
decl_stmt|;
comment|/**      * Create a block pool report.      *      * @param volume      */
DECL|method|BlockPoolReport ()
name|BlockPoolReport
parameter_list|()
block|{
name|this
operator|.
name|blockPools
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|map
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|(
literal|2
argument_list|,
name|DEFAULT_MAP_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new block pool report initialized to the given expected size.      *      * @param blockPools initial list of known block pools      */
DECL|method|BlockPoolReport (final Collection<String> blockPools)
name|BlockPoolReport
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|blockPools
parameter_list|)
block|{
name|this
operator|.
name|blockPools
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|blockPools
argument_list|)
expr_stmt|;
name|this
operator|.
name|map
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|(
name|blockPools
operator|.
name|size
argument_list|()
argument_list|,
name|DEFAULT_MAP_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|addAll (final String bpid, final Collection<ScanInfo> scanInfos)
specifier|public
name|void
name|addAll
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|ScanInfo
argument_list|>
name|scanInfos
parameter_list|)
block|{
name|this
operator|.
name|blockPools
operator|.
name|add
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
name|this
operator|.
name|map
operator|.
name|putAll
argument_list|(
name|bpid
argument_list|,
name|scanInfos
argument_list|)
expr_stmt|;
block|}
DECL|method|sortBlocks ()
specifier|public
name|void
name|sortBlocks
parameter_list|()
block|{
for|for
control|(
specifier|final
name|String
name|bpid
range|:
name|this
operator|.
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|ScanInfo
argument_list|>
name|list
init|=
name|this
operator|.
name|map
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
comment|// Sort array based on blockId
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBlockPoolIds ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBlockPoolIds
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|this
operator|.
name|blockPools
argument_list|)
return|;
block|}
DECL|method|getScanInfo (final String bpid)
specifier|public
name|List
argument_list|<
name|ScanInfo
argument_list|>
name|getScanInfo
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|)
block|{
return|return
name|this
operator|.
name|map
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
return|;
block|}
DECL|method|getEntries ()
specifier|public
name|Collection
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ScanInfo
argument_list|>
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|this
operator|.
name|map
operator|.
name|entries
argument_list|()
argument_list|)
return|;
block|}
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|blockPools
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BlockPoolReport [blockPools="
operator|+
name|blockPools
operator|+
literal|", map="
operator|+
name|map
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**    * Create a new directory scanner, but don't cycle it running yet.    *    * @param datanode the parent datanode    * @param dataset the dataset to scan    * @param conf the Configuration object    */
DECL|method|DirectoryScanner (FsDatasetSpi<?> dataset, Configuration conf)
specifier|public
name|DirectoryScanner
parameter_list|(
name|FsDatasetSpi
argument_list|<
name|?
argument_list|>
name|dataset
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|dataset
operator|=
name|dataset
expr_stmt|;
name|this
operator|.
name|stats
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|DEFAULT_MAP_SIZE
argument_list|)
expr_stmt|;
name|int
name|interval
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|scanPeriodMsecs
operator|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|int
name|throttle
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|throttle
operator|>=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} set to value above 1000 ms/sec. Assuming default value of {}"
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_DEFAULT
argument_list|)
expr_stmt|;
name|throttle
operator|=
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_DEFAULT
expr_stmt|;
block|}
name|throttleLimitMsPerSec
operator|=
name|throttle
expr_stmt|;
name|int
name|threads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DIRECTORYSCAN_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|reportCompileThreadPool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threads
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
argument_list|)
expr_stmt|;
name|masterThread
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start the scanner. The scanner will run every    * {@link DFSConfigKeys#DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY} seconds.    */
DECL|method|start ()
name|void
name|start
parameter_list|()
block|{
name|shouldRun
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|firstScanTime
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|(
name|scanPeriodMsecs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Periodic Directory Tree Verification scan starting in {}ms with interval of {}ms and throttle limit of {}ms/s"
argument_list|,
name|firstScanTime
argument_list|,
name|scanPeriodMsecs
argument_list|,
name|throttleLimitMsPerSec
argument_list|)
expr_stmt|;
name|masterThread
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
argument_list|,
name|firstScanTime
argument_list|,
name|scanPeriodMsecs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return whether the scanner has been started.    *    * @return whether the scanner has been started    */
annotation|@
name|VisibleForTesting
DECL|method|getRunStatus ()
name|boolean
name|getRunStatus
parameter_list|()
block|{
return|return
name|shouldRun
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Clear the current cache of diffs and statistics.    */
DECL|method|clear ()
specifier|private
name|void
name|clear
parameter_list|()
block|{
name|diffs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stats
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Main program loop for DirectoryScanner. Runs {@link reconcile()} and    * handles any exceptions.    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|shouldRun
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// shutdown has been activated
name|LOG
operator|.
name|warn
argument_list|(
literal|"This cycle terminating immediately because 'shouldRun' has been deactivated"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|reconcile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Log and continue - allows Executor to run again next cycle
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception during DirectoryScanner execution - will continue next cycle"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|er
parameter_list|)
block|{
comment|// Non-recoverable error - re-throw after logging the problem
name|LOG
operator|.
name|error
argument_list|(
literal|"System Error during DirectoryScanner execution - permanently terminating periodic scanner"
argument_list|,
name|er
argument_list|)
expr_stmt|;
throw|throw
name|er
throw|;
block|}
block|}
comment|/**    * Stops the directory scanner. This method will wait for 1 minute for the    * main thread to exit and an additional 1 minute for the report compilation    * threads to exit. If a thread does not exit in that time period, it is left    * running, and an error is logged.    */
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown has been called"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldRun
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Shutdown has been called, but periodic scanner not started"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|masterThread
operator|!=
literal|null
condition|)
block|{
name|masterThread
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reportCompileThreadPool
operator|!=
literal|null
condition|)
block|{
name|reportCompileThreadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|masterThread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|masterThread
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"interrupted while waiting for masterThread to "
operator|+
literal|"terminate"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reportCompileThreadPool
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reportCompileThreadPool
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"interrupted while waiting for reportCompileThreadPool to "
operator|+
literal|"terminate"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|retainDiffs
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Reconcile differences between disk and in-memory blocks    */
annotation|@
name|VisibleForTesting
DECL|method|reconcile ()
specifier|public
name|void
name|reconcile
parameter_list|()
throws|throws
name|IOException
block|{
name|scan
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ScanInfo
argument_list|>
name|entry
range|:
name|diffs
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|dataset
operator|.
name|checkAndUpdate
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|retainDiffs
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Scan for the differences between disk and in-memory blocks Scan only the    * "finalized blocks" lists of both disk and memory.    */
DECL|method|scan ()
specifier|private
name|void
name|scan
parameter_list|()
block|{
name|BlockPoolReport
name|blockPoolReport
init|=
operator|new
name|BlockPoolReport
argument_list|()
decl_stmt|;
name|clear
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|ScanInfoVolumeReport
argument_list|>
name|volumeReports
init|=
name|getVolumeReports
argument_list|()
decl_stmt|;
for|for
control|(
name|ScanInfoVolumeReport
name|volumeReport
range|:
name|volumeReports
control|)
block|{
for|for
control|(
name|String
name|blockPoolId
range|:
name|volumeReport
operator|.
name|getBlockPoolIds
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ScanInfo
argument_list|>
name|scanInfos
init|=
name|volumeReport
operator|.
name|getScanInfo
argument_list|(
name|blockPoolId
argument_list|)
decl_stmt|;
name|blockPoolReport
operator|.
name|addAll
argument_list|(
name|blockPoolId
argument_list|,
name|scanInfos
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Pre-sort the reports outside of the lock
name|blockPoolReport
operator|.
name|sortBlocks
argument_list|()
expr_stmt|;
comment|// Hold FSDataset lock to prevent further changes to the block map
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|dataset
operator|.
name|acquireDatasetLock
argument_list|()
init|)
block|{
for|for
control|(
specifier|final
name|String
name|bpid
range|:
name|blockPoolReport
operator|.
name|getBlockPoolIds
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ScanInfo
argument_list|>
name|blockpoolReport
init|=
name|blockPoolReport
operator|.
name|getScanInfo
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|Stats
name|statsRecord
init|=
operator|new
name|Stats
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|stats
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|statsRecord
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ScanInfo
argument_list|>
name|diffRecord
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|statsRecord
operator|.
name|totalBlocks
operator|=
name|blockpoolReport
operator|.
name|size
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ReplicaInfo
argument_list|>
name|bl
init|=
name|dataset
operator|.
name|getFinalizedBlocks
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|bl
argument_list|)
expr_stmt|;
comment|// Sort based on blockId
name|int
name|d
init|=
literal|0
decl_stmt|;
comment|// index for blockpoolReport
name|int
name|m
init|=
literal|0
decl_stmt|;
comment|// index for memReprot
while|while
condition|(
name|m
operator|<
name|bl
operator|.
name|size
argument_list|()
operator|&&
name|d
operator|<
name|blockpoolReport
operator|.
name|size
argument_list|()
condition|)
block|{
name|ReplicaInfo
name|memBlock
init|=
name|bl
operator|.
name|get
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|ScanInfo
name|info
init|=
name|blockpoolReport
operator|.
name|get
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getBlockId
argument_list|()
operator|<
name|memBlock
operator|.
name|getBlockId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dataset
operator|.
name|isDeletingBlock
argument_list|(
name|bpid
argument_list|,
name|info
operator|.
name|getBlockId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Block is missing in memory
name|statsRecord
operator|.
name|missingMemoryBlocks
operator|++
expr_stmt|;
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|d
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|info
operator|.
name|getBlockId
argument_list|()
operator|>
name|memBlock
operator|.
name|getBlockId
argument_list|()
condition|)
block|{
comment|// Block is missing on the disk
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|memBlock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|info
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Block file and/or metadata file exists on the disk
comment|// Block exists in memory
if|if
condition|(
name|info
operator|.
name|getVolume
argument_list|()
operator|.
name|getStorageType
argument_list|()
operator|!=
name|StorageType
operator|.
name|PROVIDED
operator|&&
name|info
operator|.
name|getBlockFile
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Block metadata file exits and block file is missing
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|getGenStamp
argument_list|()
operator|!=
name|memBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|||
name|info
operator|.
name|getBlockLength
argument_list|()
operator|!=
name|memBlock
operator|.
name|getNumBytes
argument_list|()
condition|)
block|{
comment|// Block metadata file is missing or has wrong generation stamp,
comment|// or block file length is different than expected
name|statsRecord
operator|.
name|mismatchBlocks
operator|++
expr_stmt|;
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|memBlock
operator|.
name|compareWith
argument_list|(
name|info
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// volumeMap record and on-disk files do not match.
name|statsRecord
operator|.
name|duplicateBlocks
operator|++
expr_stmt|;
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|d
operator|++
expr_stmt|;
if|if
condition|(
name|d
operator|<
name|blockpoolReport
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// There may be multiple on-disk records for the same block, do not
comment|// increment the memory record pointer if so.
name|ScanInfo
name|nextInfo
init|=
name|blockpoolReport
operator|.
name|get
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextInfo
operator|.
name|getBlockId
argument_list|()
operator|!=
name|info
operator|.
name|getBlockId
argument_list|()
condition|)
block|{
operator|++
name|m
expr_stmt|;
block|}
block|}
else|else
block|{
operator|++
name|m
expr_stmt|;
block|}
block|}
while|while
condition|(
name|m
operator|<
name|bl
operator|.
name|size
argument_list|()
condition|)
block|{
name|ReplicaInfo
name|current
init|=
name|bl
operator|.
name|get
argument_list|(
name|m
operator|++
argument_list|)
decl_stmt|;
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|current
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|current
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|d
operator|<
name|blockpoolReport
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dataset
operator|.
name|isDeletingBlock
argument_list|(
name|bpid
argument_list|,
name|blockpoolReport
operator|.
name|get
argument_list|(
name|d
argument_list|)
operator|.
name|getBlockId
argument_list|()
argument_list|)
condition|)
block|{
name|statsRecord
operator|.
name|missingMemoryBlocks
operator|++
expr_stmt|;
name|addDifference
argument_list|(
name|diffRecord
argument_list|,
name|statsRecord
argument_list|,
name|blockpoolReport
operator|.
name|get
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|++
expr_stmt|;
block|}
name|diffs
operator|.
name|addAll
argument_list|(
name|bpid
argument_list|,
name|diffRecord
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scan Results: {}"
argument_list|,
name|statsRecord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Add the ScanInfo object to the list of differences and adjust the stats    * accordingly. This method is called when a block is found on the disk, but    * the in-memory block is missing or does not match the block on the disk.    *    * @param diffRecord the collection to which to add the info    * @param statsRecord the stats to update    * @param info the differing info    */
DECL|method|addDifference (Collection<ScanInfo> diffRecord, Stats statsRecord, ScanInfo info)
specifier|private
name|void
name|addDifference
parameter_list|(
name|Collection
argument_list|<
name|ScanInfo
argument_list|>
name|diffRecord
parameter_list|,
name|Stats
name|statsRecord
parameter_list|,
name|ScanInfo
name|info
parameter_list|)
block|{
name|statsRecord
operator|.
name|missingMetaFile
operator|+=
name|info
operator|.
name|getMetaFile
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|statsRecord
operator|.
name|missingBlockFile
operator|+=
name|info
operator|.
name|getBlockFile
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|diffRecord
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a new ScanInfo object to the collection of differences and adjust the    * stats accordingly. This method is called when a block is not found on the    * disk.    *    * @param diffRecord the collection to which to add the info    * @param statsRecord the stats to update    * @param blockId the id of the missing block    * @param vol the volume that contains the missing block    */
DECL|method|addDifference (Collection<ScanInfo> diffRecord, Stats statsRecord, long blockId, FsVolumeSpi vol)
specifier|private
name|void
name|addDifference
parameter_list|(
name|Collection
argument_list|<
name|ScanInfo
argument_list|>
name|diffRecord
parameter_list|,
name|Stats
name|statsRecord
parameter_list|,
name|long
name|blockId
parameter_list|,
name|FsVolumeSpi
name|vol
parameter_list|)
block|{
name|statsRecord
operator|.
name|missingBlockFile
operator|++
expr_stmt|;
name|statsRecord
operator|.
name|missingMetaFile
operator|++
expr_stmt|;
name|diffRecord
operator|.
name|add
argument_list|(
operator|new
name|ScanInfo
argument_list|(
name|blockId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|vol
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the lists of blocks on the disks in the data set.    */
annotation|@
name|VisibleForTesting
DECL|method|getVolumeReports ()
specifier|public
name|Collection
argument_list|<
name|ScanInfoVolumeReport
argument_list|>
name|getVolumeReports
parameter_list|()
block|{
name|List
argument_list|<
name|ScanInfoVolumeReport
argument_list|>
name|volReports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|ScanInfoVolumeReport
argument_list|>
argument_list|>
name|compilersInProgress
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// First get list of data directories
try|try
init|(
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|volumes
init|=
name|dataset
operator|.
name|getFsVolumeReferences
argument_list|()
init|)
block|{
for|for
control|(
specifier|final
name|FsVolumeSpi
name|volume
range|:
name|volumes
control|)
block|{
comment|// Disable scanning PROVIDED volumes to keep overhead low
if|if
condition|(
name|volume
operator|.
name|getStorageType
argument_list|()
operator|!=
name|StorageType
operator|.
name|PROVIDED
condition|)
block|{
name|ReportCompiler
name|reportCompiler
init|=
operator|new
name|ReportCompiler
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|ScanInfoVolumeReport
argument_list|>
name|result
init|=
name|reportCompileThreadPool
operator|.
name|submit
argument_list|(
name|reportCompiler
argument_list|)
decl_stmt|;
name|compilersInProgress
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Future
argument_list|<
name|ScanInfoVolumeReport
argument_list|>
name|future
range|:
name|compilersInProgress
control|)
block|{
try|try
block|{
specifier|final
name|ScanInfoVolumeReport
name|result
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|CollectionUtils
operator|.
name|addIgnoreNull
argument_list|(
name|volReports
argument_list|,
name|result
argument_list|)
condition|)
block|{
comment|// This compiler thread were interrupted, give up on this run
name|volReports
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error compiling report. Continuing."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected IOException by closing FsVolumeReference"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|volReports
return|;
block|}
comment|/**    * The ReportCompiler class encapsulates the process of searching a datanode's    * disks for block information. It operates by performing a DFS of the volume    * to discover block information.    *    * When the ReportCompiler discovers block information, it create a new    * ScanInfo object for it and adds that object to its report list. The report    * list is returned by the {@link #call()} method.    */
DECL|class|ReportCompiler
specifier|public
class|class
name|ReportCompiler
implements|implements
name|Callable
argument_list|<
name|ScanInfoVolumeReport
argument_list|>
block|{
DECL|field|volume
specifier|private
specifier|final
name|FsVolumeSpi
name|volume
decl_stmt|;
comment|// Variable for tracking time spent running for throttling purposes
DECL|field|throttleTimer
specifier|private
specifier|final
name|StopWatch
name|throttleTimer
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
comment|// Variable for tracking time spent running and waiting for testing
comment|// purposes
DECL|field|perfTimer
specifier|private
specifier|final
name|StopWatch
name|perfTimer
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
comment|/**      * Create a report compiler for the given volume.      *      * @param volume the target volume      */
DECL|method|ReportCompiler (FsVolumeSpi volume)
specifier|public
name|ReportCompiler
parameter_list|(
name|FsVolumeSpi
name|volume
parameter_list|)
block|{
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
block|}
comment|/**      * Run this report compiler thread.      *      * @return the block info report list      * @throws IOException if the block pool is not found      */
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|ScanInfoVolumeReport
name|call
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|bpList
init|=
name|volume
operator|.
name|getBlockPoolList
argument_list|()
decl_stmt|;
name|ScanInfoVolumeReport
name|result
init|=
operator|new
name|ScanInfoVolumeReport
argument_list|(
name|volume
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|bpList
argument_list|)
argument_list|)
decl_stmt|;
name|perfTimer
operator|.
name|start
argument_list|()
expr_stmt|;
name|throttleTimer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|bpid
range|:
name|bpList
control|)
block|{
name|List
argument_list|<
name|ScanInfo
argument_list|>
name|report
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|DEFAULT_MAP_SIZE
argument_list|)
decl_stmt|;
name|perfTimer
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|throttleTimer
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
comment|// ScanInfos are added directly to 'report' list
name|volume
operator|.
name|compileReport
argument_list|(
name|bpid
argument_list|,
name|report
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|bpid
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// Exit quickly and flag the scanner to do the same
name|result
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Scanner volume report: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Called by the thread before each potential disk scan so that a pause can      * be optionally inserted to limit the number of scans per second. The limit      * is controlled by      * {@link DFSConfigKeys#DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY}.      */
DECL|method|throttle ()
specifier|public
name|void
name|throttle
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|accumulateTimeRunning
argument_list|()
expr_stmt|;
if|if
condition|(
name|throttleLimitMsPerSec
operator|>
literal|0L
condition|)
block|{
specifier|final
name|long
name|runningTime
init|=
name|throttleTimer
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|runningTime
operator|>=
name|throttleLimitMsPerSec
condition|)
block|{
specifier|final
name|long
name|sleepTime
decl_stmt|;
if|if
condition|(
name|runningTime
operator|>=
literal|1000L
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to throttle within the second. Blocking for 1s."
argument_list|)
expr_stmt|;
name|sleepTime
operator|=
literal|1000L
expr_stmt|;
block|}
else|else
block|{
comment|// Sleep for the expected time plus any time processing ran over
specifier|final
name|long
name|overTime
init|=
name|runningTime
operator|-
name|throttleLimitMsPerSec
decl_stmt|;
name|sleepTime
operator|=
operator|(
literal|1000L
operator|-
name|throttleLimitMsPerSec
operator|)
operator|+
name|overTime
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|throttleTimer
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|accumulateTimeWaiting
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Helper method to measure time running.      */
DECL|method|accumulateTimeRunning ()
specifier|private
name|void
name|accumulateTimeRunning
parameter_list|()
block|{
name|timeRunningMs
operator|.
name|getAndAdd
argument_list|(
name|perfTimer
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|perfTimer
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Helper method to measure time waiting.      */
DECL|method|accumulateTimeWaiting ()
specifier|private
name|void
name|accumulateTimeWaiting
parameter_list|()
block|{
name|timeWaitingMs
operator|.
name|getAndAdd
argument_list|(
name|perfTimer
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|perfTimer
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

