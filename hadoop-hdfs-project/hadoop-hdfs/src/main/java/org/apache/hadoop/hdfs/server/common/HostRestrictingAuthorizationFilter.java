begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|util
operator|.
name|SubnetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * An HTTP filter that can filter requests based on Hosts.  */
end_comment

begin_class
DECL|class|HostRestrictingAuthorizationFilter
specifier|public
class|class
name|HostRestrictingAuthorizationFilter
implements|implements
name|Filter
block|{
DECL|field|HDFS_CONFIG_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|HDFS_CONFIG_PREFIX
init|=
literal|"dfs.web.authentication."
decl_stmt|;
DECL|field|RESTRICTION_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|RESTRICTION_CONFIG
init|=
literal|"host.allow.rules"
decl_stmt|;
comment|// A Java Predicate for query string parameters on which to filter requests
DECL|field|RESTRICTED_OPERATIONS
specifier|public
specifier|static
specifier|final
name|Predicate
argument_list|<
name|String
argument_list|>
name|RESTRICTED_OPERATIONS
init|=
name|qStr
lambda|->
operator|(
name|qStr
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"op=OPEN"
argument_list|)
operator|||
name|qStr
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"op=GETDELEGATIONTOKEN"
argument_list|)
operator|)
decl_stmt|;
DECL|field|rulemap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CopyOnWriteArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|>
name|rulemap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HostRestrictingAuthorizationFilter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/*    * Constructs a mapping of configuration properties to be used for filter    * initialization.  The mapping includes all properties that start with the    * specified configuration prefix.  Property names in the mapping are trimmed    * to remove the configuration prefix.    *    * @param conf configuration to read    * @param confPrefix configuration prefix    * @return mapping of configuration properties to be used for filter    *     initialization    */
DECL|method|getFilterParams (Configuration conf, String confPrefix)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFilterParams
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confPrefix
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getPropsWithPrefix
argument_list|(
name|confPrefix
argument_list|)
return|;
block|}
comment|/*    * Check all rules for this user to see if one matches for this host/path pair    *    * @param: user - user to check rules for    * @param: host - IP address (e.g. "192.168.0.1")    * @param: path - file path with no scheme (e.g. /path/foo)    * @returns: true if a rule matches this user, host, path tuple false if an    * error occurs or no match    */
DECL|method|matchRule (String user, String remoteIp, String path)
specifier|private
name|boolean
name|matchRule
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|remoteIp
parameter_list|,
name|String
name|path
parameter_list|)
block|{
comment|// allow lookups for blank in the rules for user and path
name|user
operator|=
operator|(
name|user
operator|!=
literal|null
condition|?
name|user
else|:
literal|""
operator|)
expr_stmt|;
name|path
operator|=
operator|(
name|path
operator|!=
literal|null
condition|?
name|path
else|:
literal|""
operator|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Got user: {}, remoteIp: {}, path: {}"
argument_list|,
name|user
argument_list|,
name|remoteIp
argument_list|,
name|path
argument_list|)
expr_stmt|;
comment|// isInRange fails for null/blank IPs, require an IP to approve
if|if
condition|(
name|remoteIp
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Returned false due to null rempteIp"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|Rule
argument_list|>
name|userRules
init|=
operator|(
operator|(
name|userRules
operator|=
name|rulemap
operator|.
name|get
argument_list|(
name|user
argument_list|)
operator|)
operator|!=
literal|null
operator|)
condition|?
name|userRules
else|:
operator|new
name|ArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Rule
argument_list|>
name|anyRules
init|=
operator|(
operator|(
name|anyRules
operator|=
name|rulemap
operator|.
name|get
argument_list|(
literal|"*"
argument_list|)
operator|)
operator|!=
literal|null
operator|)
condition|?
name|anyRules
else|:
operator|new
name|ArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
init|=
name|Stream
operator|.
name|of
argument_list|(
name|userRules
argument_list|,
name|anyRules
argument_list|)
operator|.
name|flatMap
argument_list|(
name|l
lambda|->
name|l
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Rule
name|rule
range|:
name|rules
control|)
block|{
name|SubnetUtils
operator|.
name|SubnetInfo
name|subnet
init|=
name|rule
operator|.
name|getSubnet
argument_list|()
decl_stmt|;
name|String
name|rulePath
init|=
name|rule
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Evaluating rule, subnet: {}, path: {}"
argument_list|,
name|subnet
operator|!=
literal|null
condition|?
name|subnet
operator|.
name|getCidrSignature
argument_list|()
else|:
literal|"*"
argument_list|,
name|rulePath
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|subnet
operator|==
literal|null
operator|||
name|subnet
operator|.
name|isInRange
argument_list|(
name|remoteIp
argument_list|)
operator|)
operator|&&
name|FilenameUtils
operator|.
name|directoryContains
argument_list|(
name|rulePath
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found matching rule, subnet: {}, path: {}; returned true"
argument_list|,
name|rule
operator|.
name|getSubnet
argument_list|()
operator|!=
literal|null
condition|?
name|subnet
operator|.
name|getCidrSignature
argument_list|()
else|:
literal|null
argument_list|,
name|rulePath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got IOException {}; returned false"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found no rules for user"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|init (FilterConfig config)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
comment|// Process dropbox rules
name|String
name|dropboxRules
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
name|RESTRICTION_CONFIG
argument_list|)
decl_stmt|;
name|loadRuleMap
argument_list|(
name|dropboxRules
argument_list|)
expr_stmt|;
block|}
comment|/*    * Initializes the rule map state for the filter    *    * @param ruleString - a string of newline delineated, comma separated    * three field records    * @throws IllegalArgumentException - when a rule can not be properly parsed    * Postconditions:    *<ul>    *<li>The {@rulemap} hash will be populated with all parsed rules.</li>    *</ul>    */
DECL|method|loadRuleMap (String ruleString)
specifier|private
name|void
name|loadRuleMap
parameter_list|(
name|String
name|ruleString
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|ruleString
operator|==
literal|null
operator|||
name|ruleString
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got no rules - will disallow anyone access"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// value: user1,network/bits1,path_glob1|user2,network/bits2,path_glob2...
name|Pattern
name|comma_split
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Pattern
name|rule_split
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\||\n"
argument_list|)
decl_stmt|;
comment|// split all rule lines
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|String
index|[]
argument_list|>
argument_list|>
name|splits
init|=
name|rule_split
operator|.
name|splitAsStream
argument_list|(
name|ruleString
argument_list|)
operator|.
name|map
argument_list|(
name|x
lambda|->
name|comma_split
operator|.
name|split
argument_list|(
name|x
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|x
lambda|->
name|x
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
comment|// verify all rules have three parts
if|if
condition|(
operator|!
name|splits
operator|.
name|keySet
argument_list|()
operator|.
name|equals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|3
argument_list|)
argument_list|)
condition|)
block|{
comment|// instead of re-joining parts, re-materialize lines which do not split
comment|// correctly for the exception
name|String
name|bad_lines
init|=
name|rule_split
operator|.
name|splitAsStream
argument_list|(
name|ruleString
argument_list|)
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|comma_split
operator|.
name|split
argument_list|(
name|x
argument_list|,
literal|3
argument_list|)
operator|.
name|length
operator|!=
literal|3
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad rule definition: "
operator|+
name|bad_lines
argument_list|)
throw|;
block|}
comment|// create a list of Rules
name|int
name|user
init|=
literal|0
decl_stmt|;
name|int
name|cidr
init|=
literal|1
decl_stmt|;
name|int
name|path
init|=
literal|2
decl_stmt|;
name|BiFunction
argument_list|<
name|CopyOnWriteArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|,
name|CopyOnWriteArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|,
name|CopyOnWriteArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|>
name|arrayListMerge
init|=
parameter_list|(
name|v1
parameter_list|,
name|v2
parameter_list|)
lambda|->
block|{
name|v1
operator|.
name|addAll
argument_list|(
name|v2
argument_list|)
expr_stmt|;
return|return
name|v1
return|;
block|}
decl_stmt|;
for|for
control|(
name|String
index|[]
name|split
range|:
name|splits
operator|.
name|get
argument_list|(
literal|3
argument_list|)
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded rule: user: {}, network/bits: {} path: {}"
argument_list|,
name|split
index|[
name|user
index|]
argument_list|,
name|split
index|[
name|cidr
index|]
argument_list|,
name|split
index|[
name|path
index|]
argument_list|)
expr_stmt|;
name|Rule
name|rule
init|=
operator|(
name|split
index|[
name|cidr
index|]
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|?
operator|new
name|Rule
argument_list|(
literal|null
argument_list|,
name|split
index|[
name|path
index|]
argument_list|)
else|:
operator|new
name|Rule
argument_list|(
operator|new
name|SubnetUtils
argument_list|(
name|split
index|[
name|cidr
index|]
argument_list|)
operator|.
name|getInfo
argument_list|()
argument_list|,
name|split
index|[
name|path
index|]
argument_list|)
operator|)
decl_stmt|;
comment|// Rule map is {"user": [rule1, rule2, ...]}, update the user's array
name|CopyOnWriteArrayList
argument_list|<
name|Rule
argument_list|>
name|arrayListRule
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|()
block|{
block|{
name|add
parameter_list|(
name|rule
parameter_list|)
constructor_decl|;
block|}
block|}
decl_stmt|;
name|rulemap
operator|.
name|merge
argument_list|(
name|split
index|[
name|user
index|]
argument_list|,
name|arrayListRule
argument_list|,
name|arrayListMerge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * doFilter() is a shim to create an HttpInteraction object and pass that to    * the actual processing logic    */
annotation|@
name|Override
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain filterChain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
specifier|final
name|HttpServletRequest
name|httpRequest
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
name|HttpServletResponse
name|httpResponse
init|=
operator|(
name|HttpServletResponse
operator|)
name|response
decl_stmt|;
name|handleInteraction
argument_list|(
operator|new
name|ServletFilterHttpInteraction
argument_list|(
name|httpRequest
argument_list|,
name|httpResponse
argument_list|,
name|filterChain
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * The actual processing logic of the Filter    * Uses our {@HttpInteraction} shim which can be called from a variety of    * incoming request sources    * @param interaction - An HttpInteraction object from any of our callers    */
DECL|method|handleInteraction (HttpInteraction interaction)
specifier|public
name|void
name|handleInteraction
parameter_list|(
name|HttpInteraction
name|interaction
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
specifier|final
name|String
name|address
init|=
name|interaction
operator|.
name|getRemoteAddr
argument_list|()
decl_stmt|;
specifier|final
name|String
name|query
init|=
name|interaction
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|interaction
operator|.
name|getRequestURI
argument_list|()
operator|.
name|substring
argument_list|(
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|interaction
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Got request user: {}, remoteIp: {}, query: {}, path: {}"
argument_list|,
name|user
argument_list|,
name|address
argument_list|,
name|query
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|boolean
name|authenticatedQuery
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|query
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|RESTRICTED_OPERATIONS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|interaction
operator|.
name|isCommitted
argument_list|()
operator|&&
name|authenticatedQuery
condition|)
block|{
comment|// loop over all query parts
name|String
index|[]
name|queryParts
init|=
name|query
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Looking for delegation token to identify user"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|part
range|:
name|queryParts
control|)
block|{
if|if
condition|(
name|part
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"delegation="
argument_list|)
condition|)
block|{
name|Token
name|t
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|t
operator|.
name|decodeFromUrlString
argument_list|(
name|part
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|t
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|identifier
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|=
name|identifier
operator|.
name|getUser
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Updated request user: {}, remoteIp: {}, query: {}, "
operator|+
literal|"path: {}"
argument_list|,
name|user
argument_list|,
name|address
argument_list|,
name|query
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|authenticatedQuery
operator|&&
operator|!
operator|(
name|matchRule
argument_list|(
literal|"*"
argument_list|,
name|address
argument_list|,
name|path
argument_list|)
operator|||
name|matchRule
argument_list|(
name|user
argument_list|,
name|address
argument_list|,
name|path
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Rejecting interaction; no rule found"
argument_list|)
expr_stmt|;
name|interaction
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"WebHDFS is configured write-only for "
operator|+
name|user
operator|+
literal|"@"
operator|+
name|address
operator|+
literal|" for file: "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Proceeding with interaction"
argument_list|)
expr_stmt|;
name|interaction
operator|.
name|proceed
argument_list|()
expr_stmt|;
block|}
comment|/*    * Defines the minimal API requirements for the filter to execute its    * filtering logic.  This interface exists to facilitate integration in    * components that do not run within a servlet container and therefore cannot    * rely on a servlet container to dispatch to the {@link #doFilter} method.    * Applications that do run inside a servlet container will not need to write    * code that uses this interface.  Instead, they can use typical servlet    * container configuration mechanisms to insert the filter.    */
DECL|interface|HttpInteraction
specifier|public
interface|interface
name|HttpInteraction
block|{
comment|/*      * Returns if the request has been committed.      *      * @return boolean      */
DECL|method|isCommitted ()
name|boolean
name|isCommitted
parameter_list|()
function_decl|;
comment|/*      * Returns the value of the requesting client address.      *      * @return the remote address      */
DECL|method|getRemoteAddr ()
name|String
name|getRemoteAddr
parameter_list|()
function_decl|;
comment|/*      * Returns the user ID making the request.      *      * @return the user      */
DECL|method|getRemoteUser ()
name|String
name|getRemoteUser
parameter_list|()
function_decl|;
comment|/*      * Returns the value of the request URI.      *      * @return the request URI      */
DECL|method|getRequestURI ()
name|String
name|getRequestURI
parameter_list|()
function_decl|;
comment|/*      * Returns the value of the query string.      *      * @return an optional contianing the URL query string      */
DECL|method|getQueryString ()
name|String
name|getQueryString
parameter_list|()
function_decl|;
comment|/*      * Returns the method.      *      * @return method      */
DECL|method|getMethod ()
name|String
name|getMethod
parameter_list|()
function_decl|;
comment|/*      * Called by the filter after it decides that the request may proceed.      *      * @throws IOException if there is an I/O error      * @throws ServletException if the implementation relies on the servlet API      *     and a servlet API call has failed      */
DECL|method|proceed ()
name|void
name|proceed
parameter_list|()
throws|throws
name|IOException
throws|,
name|ServletException
function_decl|;
comment|/*      * Called by the filter after it decides that the request is an      * unauthorized request and therefore must be rejected.      *      * @param code status code to send      * @param message response message      * @throws IOException if there is an I/O error      */
DECL|method|sendError (int code, String message)
name|void
name|sendError
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|Rule
specifier|private
specifier|static
class|class
name|Rule
block|{
DECL|field|subnet
specifier|private
specifier|final
name|SubnetUtils
operator|.
name|SubnetInfo
name|subnet
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
comment|/*      * A class for holding dropbox filter rules      *      * @param subnet - the IPv4 subnet for which this rule is valid (pass      * null for any network location)      * @param path - the HDFS path for which this rule is valid      */
DECL|method|Rule (SubnetUtils.SubnetInfo subnet, String path)
name|Rule
parameter_list|(
name|SubnetUtils
operator|.
name|SubnetInfo
name|subnet
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|subnet
operator|=
name|subnet
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|getSubnet ()
specifier|public
name|SubnetUtils
operator|.
name|SubnetInfo
name|getSubnet
parameter_list|()
block|{
return|return
operator|(
name|subnet
operator|)
return|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
operator|(
name|path
operator|)
return|;
block|}
block|}
comment|/*    * {@link HttpInteraction} implementation for use in the servlet filter.    */
DECL|class|ServletFilterHttpInteraction
specifier|private
specifier|static
specifier|final
class|class
name|ServletFilterHttpInteraction
implements|implements
name|HttpInteraction
block|{
DECL|field|chain
specifier|private
specifier|final
name|FilterChain
name|chain
decl_stmt|;
DECL|field|httpRequest
specifier|private
specifier|final
name|HttpServletRequest
name|httpRequest
decl_stmt|;
DECL|field|httpResponse
specifier|private
specifier|final
name|HttpServletResponse
name|httpResponse
decl_stmt|;
comment|/*      * Creates a new ServletFilterHttpInteraction.      *      * @param httpRequest request to process      * @param httpResponse response to process      * @param chain filter chain to forward to if HTTP interaction is allowed      */
DECL|method|ServletFilterHttpInteraction (HttpServletRequest httpRequest, HttpServletResponse httpResponse, FilterChain chain)
specifier|public
name|ServletFilterHttpInteraction
parameter_list|(
name|HttpServletRequest
name|httpRequest
parameter_list|,
name|HttpServletResponse
name|httpResponse
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
block|{
name|this
operator|.
name|httpRequest
operator|=
name|httpRequest
expr_stmt|;
name|this
operator|.
name|httpResponse
operator|=
name|httpResponse
expr_stmt|;
name|this
operator|.
name|chain
operator|=
name|chain
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCommitted ()
specifier|public
name|boolean
name|isCommitted
parameter_list|()
block|{
return|return
operator|(
name|httpResponse
operator|.
name|isCommitted
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRemoteAddr ()
specifier|public
name|String
name|getRemoteAddr
parameter_list|()
block|{
return|return
operator|(
name|httpRequest
operator|.
name|getRemoteAddr
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRemoteUser ()
specifier|public
name|String
name|getRemoteUser
parameter_list|()
block|{
return|return
operator|(
name|httpRequest
operator|.
name|getRemoteUser
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRequestURI ()
specifier|public
name|String
name|getRequestURI
parameter_list|()
block|{
return|return
operator|(
name|httpRequest
operator|.
name|getRequestURI
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueryString ()
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
operator|(
name|httpRequest
operator|.
name|getQueryString
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMethod ()
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|httpRequest
operator|.
name|getMethod
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|proceed ()
specifier|public
name|void
name|proceed
parameter_list|()
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|httpRequest
argument_list|,
name|httpResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendError (int code, String message)
specifier|public
name|void
name|sendError
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|httpResponse
operator|.
name|sendError
argument_list|(
name|code
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

