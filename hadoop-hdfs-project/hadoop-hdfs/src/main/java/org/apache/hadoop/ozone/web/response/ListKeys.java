begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.response
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|BucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|ListArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonAutoDetect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|annotate
operator|.
name|JsonFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ser
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ser
operator|.
name|impl
operator|.
name|SimpleBeanPropertyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ser
operator|.
name|impl
operator|.
name|SimpleFilterProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class the represents the list of keys (Objects) in a bucket.  */
end_comment

begin_class
DECL|class|ListKeys
specifier|public
class|class
name|ListKeys
block|{
DECL|field|OBJECT_LIST
specifier|static
specifier|final
name|String
name|OBJECT_LIST
init|=
literal|"OBJECT_LIST_FILTER"
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|prefix
specifier|private
name|String
name|prefix
decl_stmt|;
DECL|field|maxKeys
specifier|private
name|long
name|maxKeys
decl_stmt|;
DECL|field|truncated
specifier|private
name|boolean
name|truncated
decl_stmt|;
DECL|field|keyList
specifier|private
name|List
argument_list|<
name|KeyInfo
argument_list|>
name|keyList
decl_stmt|;
comment|/**    * Default constructor needed for json serialization.    */
DECL|method|ListKeys ()
specifier|public
name|ListKeys
parameter_list|()
block|{
name|this
operator|.
name|keyList
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructor for ListKeys.    *    * @param args      ListArgs    * @param truncated is truncated    */
DECL|method|ListKeys (ListArgs args, boolean truncated)
specifier|public
name|ListKeys
parameter_list|(
name|ListArgs
name|args
parameter_list|,
name|boolean
name|truncated
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|args
operator|.
name|getArgs
argument_list|()
operator|instanceof
name|BucketArgs
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
operator|(
operator|(
name|BucketArgs
operator|)
name|args
operator|.
name|getArgs
argument_list|()
operator|)
operator|.
name|getBucketName
argument_list|()
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|args
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxKeys
operator|=
name|args
operator|.
name|getMaxKeys
argument_list|()
expr_stmt|;
name|this
operator|.
name|truncated
operator|=
name|truncated
expr_stmt|;
block|}
comment|/**    * Converts a Json string to POJO.    * @param jsonString - json string.    * @return ListObject    * @throws IOException - Json conversion error.    */
DECL|method|parse (String jsonString)
specifier|public
specifier|static
name|ListKeys
name|parse
parameter_list|(
name|String
name|jsonString
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|jsonString
argument_list|,
name|ListKeys
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Returns a list of Objects.    *    * @return List of KeyInfo Objects.    */
DECL|method|getKeyList ()
specifier|public
name|List
argument_list|<
name|KeyInfo
argument_list|>
name|getKeyList
parameter_list|()
block|{
return|return
name|keyList
return|;
block|}
comment|/**    * Sets the list of Objects.    *    * @param objectList - List of Keys    */
DECL|method|setKeyList (List<KeyInfo> objectList)
specifier|public
name|void
name|setKeyList
parameter_list|(
name|List
argument_list|<
name|KeyInfo
argument_list|>
name|objectList
parameter_list|)
block|{
name|this
operator|.
name|keyList
operator|=
name|objectList
expr_stmt|;
block|}
comment|/**    * Gets the Max Key Count.    *    * @return long    */
DECL|method|getMaxKeys ()
specifier|public
name|long
name|getMaxKeys
parameter_list|()
block|{
return|return
name|maxKeys
return|;
block|}
comment|/**    * Gets bucket Name.    *    * @return String    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Gets Prefix.    *    * @return String    */
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
comment|/**    * Gets truncated Status.    *    * @return Boolean    */
DECL|method|isTruncated ()
specifier|public
name|boolean
name|isTruncated
parameter_list|()
block|{
return|return
name|truncated
return|;
block|}
comment|/**    * Sets the value of truncated.    *    * @param value - Boolean    */
DECL|method|setTruncated (boolean value)
specifier|public
name|void
name|setTruncated
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|truncated
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Returns a JSON string of this object. After stripping out bytesUsed and    * keyCount.    *    * @return String    * @throws  IOException - On json Errors.    */
DECL|method|toJsonString ()
specifier|public
name|String
name|toJsonString
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|ignorableFieldNames
init|=
block|{
literal|"dataFileName"
block|}
decl_stmt|;
name|FilterProvider
name|filters
init|=
operator|new
name|SimpleFilterProvider
argument_list|()
operator|.
name|addFilter
argument_list|(
name|OBJECT_LIST
argument_list|,
name|SimpleBeanPropertyFilter
operator|.
name|serializeAllExcept
argument_list|(
name|ignorableFieldNames
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|setVisibility
argument_list|(
name|JsonMethod
operator|.
name|FIELD
argument_list|,
name|JsonAutoDetect
operator|.
name|Visibility
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|mapper
operator|.
name|getSerializationConfig
argument_list|()
operator|.
name|addMixInAnnotations
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|MixIn
operator|.
name|class
argument_list|)
expr_stmt|;
name|ObjectWriter
name|writer
init|=
name|mapper
operator|.
name|writer
argument_list|(
name|filters
argument_list|)
decl_stmt|;
return|return
name|writer
operator|.
name|writeValueAsString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Returns the Object as a Json String.    *    * @return String    * @throws IOException - on json errors.    */
DECL|method|toDBString ()
specifier|public
name|String
name|toDBString
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Sorts the keys based on name and version. This is useful when we return the    * list of keys.    */
DECL|method|sort ()
specifier|public
name|void
name|sort
parameter_list|()
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|keyList
argument_list|)
expr_stmt|;
block|}
comment|/**    * This class allows us to create custom filters for the Json serialization.    */
annotation|@
name|JsonFilter
argument_list|(
name|OBJECT_LIST
argument_list|)
DECL|class|MixIn
class|class
name|MixIn
block|{    }
block|}
end_class

end_unit

