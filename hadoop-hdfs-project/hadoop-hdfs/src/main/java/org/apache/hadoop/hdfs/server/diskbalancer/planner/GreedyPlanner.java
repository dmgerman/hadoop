begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.diskbalancer.planner
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerDataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerVolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Greedy Planner is a simple planner that computes the largest possible move at  * any point of time given a volumeSet.  *<p/>  * This is done by choosing the disks with largest  amount of data above and  * below the idealStorage and then a move is scheduled between them.  */
end_comment

begin_class
DECL|class|GreedyPlanner
specifier|public
class|class
name|GreedyPlanner
implements|implements
name|Planner
block|{
DECL|field|MB
specifier|public
specifier|static
specifier|final
name|long
name|MB
init|=
literal|1024L
operator|*
literal|1024L
decl_stmt|;
DECL|field|GB
specifier|public
specifier|static
specifier|final
name|long
name|GB
init|=
name|MB
operator|*
literal|1024L
decl_stmt|;
DECL|field|TB
specifier|public
specifier|static
specifier|final
name|long
name|TB
init|=
name|GB
operator|*
literal|1024L
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GreedyPlanner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|threshold
specifier|private
specifier|final
name|float
name|threshold
decl_stmt|;
comment|/**    * Constructs a greedy planner.    *    * @param threshold - Disk tolerance that we are ok with    * @param node      - node on which this planner is operating upon    */
DECL|method|GreedyPlanner (float threshold, DiskBalancerDataNode node)
specifier|public
name|GreedyPlanner
parameter_list|(
name|float
name|threshold
parameter_list|,
name|DiskBalancerDataNode
name|node
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
comment|/**    * Computes a node plan for the given node.    *    * @return NodePlan    * @throws Exception    */
annotation|@
name|Override
DECL|method|plan (DiskBalancerDataNode node)
specifier|public
name|NodePlan
name|plan
parameter_list|(
name|DiskBalancerDataNode
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|NodePlan
name|plan
init|=
operator|new
name|NodePlan
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|,
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting plan for Node : "
operator|+
name|node
operator|.
name|getDataNodeUUID
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|node
operator|.
name|isBalancingNeeded
argument_list|(
name|this
operator|.
name|threshold
argument_list|)
condition|)
block|{
for|for
control|(
name|DiskBalancerVolumeSet
name|vSet
range|:
name|node
operator|.
name|getVolumeSets
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|balanceVolumeSet
argument_list|(
name|node
argument_list|,
name|vSet
argument_list|,
name|plan
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Compute Plan for Node : %s took %d ms "
argument_list|,
name|node
operator|.
name|getDataNodeUUID
argument_list|()
argument_list|,
name|endTime
operator|-
name|startTime
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|plan
return|;
block|}
comment|/**    * Computes Steps to make a DiskBalancerVolumeSet Balanced.    *    * @param node    * @param vSet - DiskBalancerVolumeSet    * @param plan - NodePlan    */
DECL|method|balanceVolumeSet (DiskBalancerDataNode node, DiskBalancerVolumeSet vSet, NodePlan plan)
specifier|public
name|void
name|balanceVolumeSet
parameter_list|(
name|DiskBalancerDataNode
name|node
parameter_list|,
name|DiskBalancerVolumeSet
name|vSet
parameter_list|,
name|NodePlan
name|plan
parameter_list|)
throws|throws
name|Exception
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|vSet
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|DiskBalancerVolumeSet
name|currentSet
init|=
operator|new
name|DiskBalancerVolumeSet
argument_list|(
name|vSet
argument_list|)
decl_stmt|;
while|while
condition|(
name|currentSet
operator|.
name|isBalancingNeeded
argument_list|(
name|this
operator|.
name|threshold
argument_list|)
condition|)
block|{
name|removeSkipVolumes
argument_list|(
name|currentSet
argument_list|)
expr_stmt|;
name|DiskBalancerVolume
name|lowVolume
init|=
name|currentSet
operator|.
name|getSortedQueue
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|DiskBalancerVolume
name|highVolume
init|=
name|currentSet
operator|.
name|getSortedQueue
argument_list|()
operator|.
name|last
argument_list|()
decl_stmt|;
name|Step
name|nextStep
init|=
literal|null
decl_stmt|;
comment|// ok both volumes bytes used are in the range that we expect
comment|// Then we create a move request.
if|if
condition|(
operator|!
name|lowVolume
operator|.
name|isSkip
argument_list|()
operator|&&
operator|!
name|highVolume
operator|.
name|isSkip
argument_list|()
condition|)
block|{
name|nextStep
operator|=
name|computeMove
argument_list|(
name|currentSet
argument_list|,
name|lowVolume
argument_list|,
name|highVolume
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping compute move. lowVolume :"
operator|+
name|lowVolume
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping compute move. highVolume :"
operator|+
name|highVolume
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|applyStep
argument_list|(
name|nextStep
argument_list|,
name|currentSet
argument_list|,
name|lowVolume
argument_list|,
name|highVolume
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextStep
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Step : "
operator|+
name|nextStep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|addStep
argument_list|(
name|nextStep
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Disk Volume set %s Type : %s plan completed."
argument_list|,
name|currentSet
operator|.
name|getSetID
argument_list|()
argument_list|,
name|currentSet
operator|.
name|getVolumes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStorageType
argument_list|()
argument_list|)
decl_stmt|;
name|plan
operator|.
name|setNodeName
argument_list|(
name|node
operator|.
name|getDataNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setNodeUUID
argument_list|(
name|node
operator|.
name|getDataNodeUUID
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setTimeStamp
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|plan
operator|.
name|setPort
argument_list|(
name|node
operator|.
name|getDataNodePort
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**    * Apply steps applies the current step on to a volumeSet so that we can    * compute next steps until we reach the desired goals.    *    * @param nextStep   - nextStep or Null    * @param currentSet - Current Disk BalancerVolume Set we are operating upon    * @param lowVolume  - volume    * @param highVolume - volume    */
DECL|method|applyStep (Step nextStep, DiskBalancerVolumeSet currentSet, DiskBalancerVolume lowVolume, DiskBalancerVolume highVolume)
specifier|private
name|void
name|applyStep
parameter_list|(
name|Step
name|nextStep
parameter_list|,
name|DiskBalancerVolumeSet
name|currentSet
parameter_list|,
name|DiskBalancerVolume
name|lowVolume
parameter_list|,
name|DiskBalancerVolume
name|highVolume
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|used
decl_stmt|;
if|if
condition|(
name|nextStep
operator|!=
literal|null
condition|)
block|{
name|used
operator|=
name|lowVolume
operator|.
name|getUsed
argument_list|()
operator|+
name|nextStep
operator|.
name|getBytesToMove
argument_list|()
expr_stmt|;
name|lowVolume
operator|.
name|setUsed
argument_list|(
name|used
argument_list|)
expr_stmt|;
name|used
operator|=
name|highVolume
operator|.
name|getUsed
argument_list|()
operator|-
name|nextStep
operator|.
name|getBytesToMove
argument_list|()
expr_stmt|;
name|highVolume
operator|.
name|setUsed
argument_list|(
name|used
argument_list|)
expr_stmt|;
block|}
comment|// since the volume data changed , we need to recompute the DataDensity.
name|currentSet
operator|.
name|computeVolumeDataDensity
argument_list|()
expr_stmt|;
block|}
comment|/**    * Computes a data move from the largest disk we have to smallest disk.    *    * @param currentSet - Current Disk Set we are working with    * @param lowVolume  - Low Data Capacity Volume    * @param highVolume - High Data Capacity Volume    * @return Step    */
DECL|method|computeMove (DiskBalancerVolumeSet currentSet, DiskBalancerVolume lowVolume, DiskBalancerVolume highVolume)
specifier|private
name|Step
name|computeMove
parameter_list|(
name|DiskBalancerVolumeSet
name|currentSet
parameter_list|,
name|DiskBalancerVolume
name|lowVolume
parameter_list|,
name|DiskBalancerVolume
name|highVolume
parameter_list|)
block|{
comment|// Compute how many bytes we can move. First Compute the maximum that
comment|// low Volume Can receive, then compute maximum high volume can give
comment|// Then take the minimum of those two numbers that is the bytesToMove.
name|long
name|maxLowVolumeCanReceive
init|=
call|(
name|long
call|)
argument_list|(
operator|(
name|currentSet
operator|.
name|getIdealUsed
argument_list|()
operator|*
name|lowVolume
operator|.
name|computeEffectiveCapacity
argument_list|()
operator|)
operator|-
name|lowVolume
operator|.
name|getUsed
argument_list|()
argument_list|)
decl_stmt|;
comment|// This disk cannot take any more data from any disk.
comment|// Remove it from our computation matrix.
if|if
condition|(
name|maxLowVolumeCanReceive
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|lowVolume
operator|.
name|getPath
argument_list|()
operator|+
literal|" Skipping disk from computation. Maximum data size "
operator|+
literal|"achieved."
argument_list|)
expr_stmt|;
name|lowVolume
operator|.
name|setSkip
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|long
name|maxHighVolumeCanGive
init|=
name|highVolume
operator|.
name|getUsed
argument_list|()
operator|-
call|(
name|long
call|)
argument_list|(
name|currentSet
operator|.
name|getIdealUsed
argument_list|()
operator|*
name|highVolume
operator|.
name|computeEffectiveCapacity
argument_list|()
argument_list|)
decl_stmt|;
comment|// This volume cannot give any more data, remove it from the
comment|// computation matrix
if|if
condition|(
name|maxHighVolumeCanGive
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|highVolume
operator|.
name|getPath
argument_list|()
operator|+
literal|" Skipping disk from computation. Minimum data size "
operator|+
literal|"achieved."
argument_list|)
expr_stmt|;
name|highVolume
operator|.
name|setSkip
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|long
name|bytesToMove
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxLowVolumeCanReceive
argument_list|,
name|maxHighVolumeCanGive
argument_list|)
decl_stmt|;
name|Step
name|nextStep
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bytesToMove
operator|>
literal|0
condition|)
block|{
comment|// Create a new step
name|nextStep
operator|=
operator|new
name|MoveStep
argument_list|(
name|highVolume
argument_list|,
name|currentSet
operator|.
name|getIdealUsed
argument_list|()
argument_list|,
name|lowVolume
argument_list|,
name|bytesToMove
argument_list|,
name|currentSet
operator|.
name|getSetID
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|nextStep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nextStep
return|;
block|}
comment|/**    * Skips this volume if needed.    *    * @param currentSet - Current Disk set    * @param volume     - Volume    */
DECL|method|skipVolume (DiskBalancerVolumeSet currentSet, DiskBalancerVolume volume)
specifier|private
name|void
name|skipVolume
parameter_list|(
name|DiskBalancerVolumeSet
name|currentSet
parameter_list|,
name|DiskBalancerVolume
name|volume
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Skipping volume. Volume : %s "
operator|+
literal|"Type : %s Target "
operator|+
literal|"Number of bytes : %f lowVolume dfsUsed : %d. Skipping this "
operator|+
literal|"volume from all future balancing calls."
argument_list|,
name|volume
operator|.
name|getPath
argument_list|()
argument_list|,
name|volume
operator|.
name|getStorageType
argument_list|()
argument_list|,
name|currentSet
operator|.
name|getIdealUsed
argument_list|()
operator|*
name|volume
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|volume
operator|.
name|getUsed
argument_list|()
argument_list|)
decl_stmt|;
name|volume
operator|.
name|setSkip
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Removes all volumes which are part of the volumeSet but skip flag is set.
DECL|method|removeSkipVolumes (DiskBalancerVolumeSet currentSet)
specifier|private
name|void
name|removeSkipVolumes
parameter_list|(
name|DiskBalancerVolumeSet
name|currentSet
parameter_list|)
block|{
name|List
argument_list|<
name|DiskBalancerVolume
argument_list|>
name|volumeList
init|=
name|currentSet
operator|.
name|getVolumes
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|DiskBalancerVolume
argument_list|>
name|volumeIterator
init|=
name|volumeList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|volumeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DiskBalancerVolume
name|vol
init|=
name|volumeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|vol
operator|.
name|isSkip
argument_list|()
operator|||
name|vol
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|currentSet
operator|.
name|removeVolume
argument_list|(
name|vol
argument_list|)
expr_stmt|;
block|}
block|}
name|currentSet
operator|.
name|computeVolumeDataDensity
argument_list|()
expr_stmt|;
block|}
comment|/**    * This function is used only for debugging purposes to ensure queue looks    * correct.    *    * @param queue - Queue    */
DECL|method|printQueue (TreeSet<DiskBalancerVolume> queue)
specifier|private
name|void
name|printQueue
parameter_list|(
name|TreeSet
argument_list|<
name|DiskBalancerVolume
argument_list|>
name|queue
parameter_list|)
block|{
name|String
name|format
init|=
name|String
operator|.
name|format
argument_list|(
literal|"First Volume : %s, DataDensity : %f"
argument_list|,
name|queue
operator|.
name|first
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|queue
operator|.
name|first
argument_list|()
operator|.
name|getVolumeDataDensity
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|format
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Last Volume : %s, DataDensity : %f%n"
argument_list|,
name|queue
operator|.
name|last
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|queue
operator|.
name|last
argument_list|()
operator|.
name|getVolumeDataDensity
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

