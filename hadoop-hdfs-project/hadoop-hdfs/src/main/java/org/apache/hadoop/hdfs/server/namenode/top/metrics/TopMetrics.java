begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.top.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MsInfo
operator|.
name|ProcessName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MsInfo
operator|.
name|SessionId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|info
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|TopAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|TopConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
operator|.
name|MetricValueMap
import|;
end_import

begin_comment
comment|/***  * The interface to the top metrics  *<p/>  * The producers use the {@link #report} method to report events and the  * consumers use {@link #getMetrics(MetricsCollector, boolean)} to retrieve the  * current top metrics. The default consumer is JMX but it could be any other  * user interface.  *<p/>  * Thread-safe: relies on thread-safety of RollingWindowManager  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TopMetrics
specifier|public
class|class
name|TopMetrics
implements|implements
name|MetricsSource
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|Singleton
enum|enum
name|Singleton
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
DECL|field|impl
specifier|volatile
name|TopMetrics
name|impl
init|=
literal|null
decl_stmt|;
DECL|method|init (Configuration conf, String processName, String sessionId, long[] reportingPeriods)
specifier|synchronized
name|TopMetrics
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|processName
parameter_list|,
name|String
name|sessionId
parameter_list|,
name|long
index|[]
name|reportingPeriods
parameter_list|)
block|{
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
name|impl
operator|=
name|create
argument_list|(
name|conf
argument_list|,
name|processName
argument_list|,
name|sessionId
argument_list|,
name|reportingPeriods
argument_list|,
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
block|}
DECL|method|logConf (Configuration conf)
specifier|private
specifier|static
name|void
name|logConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"NNTop conf: "
operator|+
name|DFSConfigKeys
operator|.
name|NNTOP_BUCKETS_PER_WINDOW_KEY
operator|+
literal|" = "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_BUCKETS_PER_WINDOW_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NNTop conf: "
operator|+
name|DFSConfigKeys
operator|.
name|NNTOP_NUM_USERS_KEY
operator|+
literal|" = "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_NUM_USERS_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NNTop conf: "
operator|+
name|DFSConfigKeys
operator|.
name|NNTOP_WINDOWS_MINUTES_KEY
operator|+
literal|" = "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_WINDOWS_MINUTES_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return only the shortest periods for default    * TODO: make it configurable    */
DECL|field|smallestOnlyDefault
specifier|final
name|boolean
name|smallestOnlyDefault
init|=
literal|true
decl_stmt|;
comment|/**    * The smallest of reporting periods    */
DECL|field|smallestPeriod
name|long
name|smallestPeriod
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * processName and sessionId might later be leveraged later when we aggregate    * report from multiple federated name nodes    */
DECL|field|processName
DECL|field|sessionId
specifier|final
name|String
name|processName
decl_stmt|,
name|sessionId
decl_stmt|;
comment|/**    * A map from reporting periods to WindowManager. Thread-safety is provided by    * the fact that the mapping is not changed after construction.    */
DECL|field|rollingWindowManagers
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|RollingWindowManager
argument_list|>
name|rollingWindowManagers
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|RollingWindowManager
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|TopMetrics (Configuration conf, String processName, String sessionId, long[] reportingPeriods)
name|TopMetrics
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|processName
parameter_list|,
name|String
name|sessionId
parameter_list|,
name|long
index|[]
name|reportingPeriods
parameter_list|)
block|{
name|this
operator|.
name|processName
operator|=
name|processName
expr_stmt|;
name|this
operator|.
name|sessionId
operator|=
name|sessionId
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reportingPeriods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|smallestPeriod
operator|=
name|Math
operator|.
name|min
argument_list|(
name|smallestPeriod
argument_list|,
name|reportingPeriods
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|rollingWindowManagers
operator|.
name|put
argument_list|(
name|reportingPeriods
index|[
name|i
index|]
argument_list|,
operator|new
name|RollingWindowManager
argument_list|(
name|conf
argument_list|,
name|reportingPeriods
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|create (Configuration conf, String processName, String sessionId, long[] reportingPeriods, MetricsSystem ms)
specifier|public
specifier|static
name|TopMetrics
name|create
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|processName
parameter_list|,
name|String
name|sessionId
parameter_list|,
name|long
index|[]
name|reportingPeriods
parameter_list|,
name|MetricsSystem
name|ms
parameter_list|)
block|{
return|return
name|ms
operator|.
name|register
argument_list|(
name|TopConf
operator|.
name|TOP_METRICS_REGISTRATION_NAME
argument_list|,
literal|"top metrics of the namenode in a last period of time"
argument_list|,
operator|new
name|TopMetrics
argument_list|(
name|conf
argument_list|,
name|processName
argument_list|,
name|sessionId
argument_list|,
name|reportingPeriods
argument_list|)
argument_list|)
return|;
block|}
DECL|method|initSingleton (Configuration conf, String processName, String sessionId, long[] reportingPeriods)
specifier|public
specifier|static
name|TopMetrics
name|initSingleton
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|processName
parameter_list|,
name|String
name|sessionId
parameter_list|,
name|long
index|[]
name|reportingPeriods
parameter_list|)
block|{
return|return
name|Singleton
operator|.
name|INSTANCE
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|processName
argument_list|,
name|sessionId
argument_list|,
name|reportingPeriods
argument_list|)
return|;
block|}
DECL|method|getInstance ()
specifier|public
specifier|static
name|TopMetrics
name|getInstance
parameter_list|()
block|{
name|TopMetrics
name|topMetrics
init|=
name|Singleton
operator|.
name|INSTANCE
operator|.
name|impl
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|topMetrics
operator|!=
literal|null
argument_list|,
literal|"The TopMetric singleton instance is not initialized."
operator|+
literal|" Have you called initSingleton first?"
argument_list|)
expr_stmt|;
return|return
name|topMetrics
return|;
block|}
comment|/**    * In testing, the previous initialization should be reset if the entire    * metric system is reinitialized    */
annotation|@
name|VisibleForTesting
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|Singleton
operator|.
name|INSTANCE
operator|.
name|impl
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|long
name|realTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|getMetrics
argument_list|(
name|smallestOnlyDefault
argument_list|,
name|realTime
argument_list|,
name|collector
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
DECL|method|getMetrics (boolean smallestOnly, long currTime, MetricsCollector collector, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|boolean
name|smallestOnly
parameter_list|,
name|long
name|currTime
parameter_list|,
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|RollingWindowManager
argument_list|>
name|entry
range|:
name|rollingWindowManagers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|smallestOnly
operator|||
name|smallestPeriod
operator|==
name|entry
operator|.
name|getKey
argument_list|()
condition|)
block|{
name|getMetrics
argument_list|(
name|currTime
argument_list|,
name|collector
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get metrics for a particular recording period and its corresponding    * {@link RollingWindowManager}    *<p/>    *    * @param collector the metric collector    * @param period the reporting period    * @param rollingWindowManager the window manager corresponding to the    *          reporting period    * @param all currently ignored    */
DECL|method|getMetrics (long currTime, MetricsCollector collector, Long period, RollingWindowManager rollingWindowManager, boolean all)
name|void
name|getMetrics
parameter_list|(
name|long
name|currTime
parameter_list|,
name|MetricsCollector
name|collector
parameter_list|,
name|Long
name|period
parameter_list|,
name|RollingWindowManager
name|rollingWindowManager
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|collector
operator|.
name|addRecord
argument_list|(
name|createTopMetricsRecordName
argument_list|(
name|period
argument_list|)
argument_list|)
operator|.
name|setContext
argument_list|(
literal|"namenode"
argument_list|)
operator|.
name|tag
argument_list|(
name|ProcessName
argument_list|,
name|processName
argument_list|)
operator|.
name|tag
argument_list|(
name|SessionId
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|MetricValueMap
name|snapshotMetrics
init|=
name|rollingWindowManager
operator|.
name|snapshot
argument_list|(
name|currTime
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"calling snapshot, result size is: "
operator|+
name|snapshotMetrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Number
argument_list|>
name|entry
range|:
name|snapshotMetrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Number
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"checking an entry: key: {} value: {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|long
name|min
init|=
name|period
operator|/
literal|1000L
operator|/
literal|60L
decl_stmt|;
comment|//ms -> min
name|String
name|desc
init|=
literal|"top user of name node in the past "
operator|+
name|min
operator|+
literal|" minutes"
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|rb
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
name|key
argument_list|,
name|desc
argument_list|)
argument_list|,
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|rb
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
name|key
argument_list|,
name|desc
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|rb
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
name|key
argument_list|,
name|desc
argument_list|)
argument_list|,
operator|(
name|Float
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|rb
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
name|key
argument_list|,
name|desc
argument_list|)
argument_list|,
operator|(
name|Double
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unsupported metric type: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"END iterating over metrics, result size is: {}"
argument_list|,
name|snapshotMetrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pick the same information that DefaultAuditLogger does before writing to a    * log file. This is to be consistent when {@link TopMetrics} is charged with    * data read back from log files instead of being invoked directly by the    * FsNamesystem    *    * @param succeeded    * @param userName    * @param addr    * @param cmd    * @param src    * @param dst    * @param status    */
DECL|method|report (boolean succeeded, String userName, InetAddress addr, String cmd, String src, String dst, FileStatus status)
specifier|public
name|void
name|report
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|String
name|userName
parameter_list|,
name|InetAddress
name|addr
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|FileStatus
name|status
parameter_list|)
block|{
comment|//currently we nntop makes use of only the username and the command
name|report
argument_list|(
name|userName
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|report (String userName, String cmd)
specifier|public
name|void
name|report
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|cmd
parameter_list|)
block|{
name|long
name|currTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|report
argument_list|(
name|currTime
argument_list|,
name|userName
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|report (long currTime, String userName, String cmd)
specifier|public
name|void
name|report
parameter_list|(
name|long
name|currTime
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|cmd
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"a metric is reported: cmd: {} user: {}"
argument_list|,
name|cmd
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|userName
operator|=
name|UserGroupInformation
operator|.
name|trimLoginMethod
argument_list|(
name|userName
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|RollingWindowManager
name|rollingWindowManager
range|:
name|rollingWindowManagers
operator|.
name|values
argument_list|()
control|)
block|{
name|rollingWindowManager
operator|.
name|recordMetric
argument_list|(
name|currTime
argument_list|,
name|cmd
argument_list|,
name|userName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rollingWindowManager
operator|.
name|recordMetric
argument_list|(
name|currTime
argument_list|,
name|TopConf
operator|.
name|CMD_TOTAL
argument_list|,
name|userName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"An error occurred while reflecting the event in top service, "
operator|+
literal|"event: (time,cmd,userName)=("
operator|+
name|currTime
operator|+
literal|","
operator|+
name|cmd
operator|+
literal|","
operator|+
name|userName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/***    *    * @param period the reporting period length in ms    * @return    */
DECL|method|createTopMetricsRecordName (Long period)
specifier|public
specifier|static
name|String
name|createTopMetricsRecordName
parameter_list|(
name|Long
name|period
parameter_list|)
block|{
return|return
name|TopConf
operator|.
name|TOP_METRICS_RECORD_NAME
operator|+
literal|"-"
operator|+
name|period
return|;
block|}
block|}
end_class

end_unit

