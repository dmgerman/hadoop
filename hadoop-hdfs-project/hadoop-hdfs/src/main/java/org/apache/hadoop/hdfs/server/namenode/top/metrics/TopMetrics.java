begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.top.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|TopConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
operator|.
name|TopWindow
import|;
end_import

begin_comment
comment|/**  * The interface to the top metrics.  *<p>  * Metrics are collected by a custom audit logger, {@link org.apache.hadoop  * .hdfs.server.namenode.top.TopAuditLogger}, which calls TopMetrics to  * increment per-operation, per-user counts on every audit log call. These  * counts are used to show the top users by NameNode operation as well as  * across all operations.  *<p>  * TopMetrics maintains these counts for a configurable number of time  * intervals, e.g. 1min, 5min, 25min. Each interval is tracked by a  * RollingWindowManager.  *<p>  * These metrics are published as a JSON string via {@link org.apache.hadoop  * .hdfs.server .namenode.metrics.FSNamesystemMBean#getTopWindows}. This is  * done by calling {@link org.apache.hadoop.hdfs.server.namenode.top.window  * .RollingWindowManager#snapshot} on each RollingWindowManager.  *<p>  * Thread-safe: relies on thread-safety of RollingWindowManager  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TopMetrics
specifier|public
class|class
name|TopMetrics
implements|implements
name|MetricsSource
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TOPMETRICS_METRICS_SOURCE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|TOPMETRICS_METRICS_SOURCE_NAME
init|=
literal|"NNTopUserOpCounts"
decl_stmt|;
DECL|field|isMetricsSourceEnabled
specifier|private
specifier|final
name|boolean
name|isMetricsSourceEnabled
decl_stmt|;
DECL|method|logConf (Configuration conf)
specifier|private
specifier|static
name|void
name|logConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"NNTop conf: "
operator|+
name|DFSConfigKeys
operator|.
name|NNTOP_BUCKETS_PER_WINDOW_KEY
operator|+
literal|" = "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_BUCKETS_PER_WINDOW_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NNTop conf: "
operator|+
name|DFSConfigKeys
operator|.
name|NNTOP_NUM_USERS_KEY
operator|+
literal|" = "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_NUM_USERS_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NNTop conf: "
operator|+
name|DFSConfigKeys
operator|.
name|NNTOP_WINDOWS_MINUTES_KEY
operator|+
literal|" = "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_WINDOWS_MINUTES_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A map from reporting periods to WindowManager. Thread-safety is provided by    * the fact that the mapping is not changed after construction.    */
DECL|field|rollingWindowManagers
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|RollingWindowManager
argument_list|>
name|rollingWindowManagers
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|RollingWindowManager
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|TopMetrics (Configuration conf, int[] reportingPeriods)
specifier|public
name|TopMetrics
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
index|[]
name|reportingPeriods
parameter_list|)
block|{
name|logConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reportingPeriods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rollingWindowManagers
operator|.
name|put
argument_list|(
name|reportingPeriods
index|[
name|i
index|]
argument_list|,
operator|new
name|RollingWindowManager
argument_list|(
name|conf
argument_list|,
name|reportingPeriods
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|isMetricsSourceEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_ENABLED_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|NNTOP_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a list of the current TopWindow statistics, one TopWindow per tracked    * time interval.    */
DECL|method|getTopWindows ()
specifier|public
name|List
argument_list|<
name|TopWindow
argument_list|>
name|getTopWindows
parameter_list|()
block|{
name|long
name|monoTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TopWindow
argument_list|>
name|windows
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|rollingWindowManagers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|RollingWindowManager
argument_list|>
name|entry
range|:
name|rollingWindowManagers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TopWindow
name|window
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|snapshot
argument_list|(
name|monoTime
argument_list|)
decl_stmt|;
name|windows
operator|.
name|add
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
return|return
name|windows
return|;
block|}
comment|/**    * Pick the same information that DefaultAuditLogger does before writing to a    * log file. This is to be consistent when {@link TopMetrics} is charged with    * data read back from log files instead of being invoked directly by the    * FsNamesystem    * @param succeeded    * @param userName    * @param addr    * @param cmd    * @param src    * @param dst    * @param status    */
DECL|method|report (boolean succeeded, String userName, InetAddress addr, String cmd, String src, String dst, FileStatus status)
specifier|public
name|void
name|report
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|String
name|userName
parameter_list|,
name|InetAddress
name|addr
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|FileStatus
name|status
parameter_list|)
block|{
comment|// currently nntop only makes use of the username and the command
name|report
argument_list|(
name|userName
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|report (String userName, String cmd)
specifier|public
name|void
name|report
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|cmd
parameter_list|)
block|{
name|long
name|currTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|report
argument_list|(
name|currTime
argument_list|,
name|userName
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
DECL|method|report (long currTime, String userName, String cmd)
specifier|public
name|void
name|report
parameter_list|(
name|long
name|currTime
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|cmd
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"a metric is reported: cmd: {} user: {}"
argument_list|,
name|cmd
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|userName
operator|=
name|UserGroupInformation
operator|.
name|trimLoginMethod
argument_list|(
name|userName
argument_list|)
expr_stmt|;
for|for
control|(
name|RollingWindowManager
name|rollingWindowManager
range|:
name|rollingWindowManagers
operator|.
name|values
argument_list|()
control|)
block|{
name|rollingWindowManager
operator|.
name|recordMetric
argument_list|(
name|currTime
argument_list|,
name|cmd
argument_list|,
name|userName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rollingWindowManager
operator|.
name|recordMetric
argument_list|(
name|currTime
argument_list|,
name|TopConf
operator|.
name|ALL_CMDS
argument_list|,
name|userName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Flatten out the top window metrics into    * {@link org.apache.hadoop.metrics2.MetricsRecord}s for consumption by    * external metrics systems. Each metrics record added corresponds to the    * reporting period a.k.a window length of the configured rolling windows.    * @param collector    * @param all    */
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMetricsSourceEnabled
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|TopWindow
name|window
range|:
name|getTopWindows
argument_list|()
control|)
block|{
name|MetricsRecordBuilder
name|rb
init|=
name|collector
operator|.
name|addRecord
argument_list|(
name|buildOpRecordName
argument_list|(
name|window
argument_list|)
argument_list|)
operator|.
name|setContext
argument_list|(
literal|"dfs"
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Op
name|op
range|:
name|window
operator|.
name|getOps
argument_list|()
control|)
block|{
name|rb
operator|.
name|addCounter
argument_list|(
name|buildOpTotalCountMetricsInfo
argument_list|(
name|op
argument_list|)
argument_list|,
name|op
operator|.
name|getTotalCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|User
name|user
range|:
name|op
operator|.
name|getTopUsers
argument_list|()
control|)
block|{
name|rb
operator|.
name|addCounter
argument_list|(
name|buildOpRecordMetricsInfo
argument_list|(
name|op
argument_list|,
name|user
argument_list|)
argument_list|,
name|user
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|buildOpRecordName (TopWindow window)
specifier|private
name|String
name|buildOpRecordName
parameter_list|(
name|TopWindow
name|window
parameter_list|)
block|{
return|return
name|TOPMETRICS_METRICS_SOURCE_NAME
operator|+
literal|".windowMs="
operator|+
name|window
operator|.
name|getWindowLenMs
argument_list|()
return|;
block|}
DECL|method|buildOpTotalCountMetricsInfo (Op op)
specifier|private
name|MetricsInfo
name|buildOpTotalCountMetricsInfo
parameter_list|(
name|Op
name|op
parameter_list|)
block|{
return|return
name|Interns
operator|.
name|info
argument_list|(
literal|"op="
operator|+
name|StringUtils
operator|.
name|deleteWhitespace
argument_list|(
name|op
operator|.
name|getOpType
argument_list|()
argument_list|)
operator|+
literal|".TotalCount"
argument_list|,
literal|"Total operation count"
argument_list|)
return|;
block|}
DECL|method|buildOpRecordMetricsInfo (Op op, User user)
specifier|private
name|MetricsInfo
name|buildOpRecordMetricsInfo
parameter_list|(
name|Op
name|op
parameter_list|,
name|User
name|user
parameter_list|)
block|{
return|return
name|Interns
operator|.
name|info
argument_list|(
literal|"op="
operator|+
name|StringUtils
operator|.
name|deleteWhitespace
argument_list|(
name|op
operator|.
name|getOpType
argument_list|()
argument_list|)
operator|+
literal|".user="
operator|+
name|user
operator|.
name|getUser
argument_list|()
operator|+
literal|".count"
argument_list|,
literal|"Total operations performed by user"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

