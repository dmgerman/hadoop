begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Keeps statistics for the memory cache.  */
end_comment

begin_class
DECL|class|CacheStats
class|class
name|CacheStats
block|{
comment|/**    * The approximate amount of cache space in use.    *    * This number is an overestimate, counting bytes that will be used only if    * pending caching operations succeed. It does not take into account pending    * uncaching operations.    *    * This overestimate is more useful to the NameNode than an underestimate,    * since we don't want the NameNode to assign us more replicas than we can    * cache, because of the current batch of operations.    */
DECL|field|usedBytesCount
specifier|private
specifier|final
name|UsedBytesCount
name|usedBytesCount
decl_stmt|;
comment|/**    * The total cache capacity in bytes.    */
DECL|field|maxBytes
specifier|private
specifier|final
name|long
name|maxBytes
decl_stmt|;
DECL|method|CacheStats (long maxBytes)
name|CacheStats
parameter_list|(
name|long
name|maxBytes
parameter_list|)
block|{
name|this
operator|.
name|usedBytesCount
operator|=
operator|new
name|UsedBytesCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxBytes
operator|=
name|maxBytes
expr_stmt|;
block|}
comment|/**    * Used to count operating system page size.    */
annotation|@
name|VisibleForTesting
DECL|class|PageRounder
specifier|static
class|class
name|PageRounder
block|{
DECL|field|osPageSize
specifier|private
specifier|final
name|long
name|osPageSize
init|=
name|NativeIO
operator|.
name|POSIX
operator|.
name|getCacheManipulator
argument_list|()
operator|.
name|getOperatingSystemPageSize
argument_list|()
decl_stmt|;
comment|/**      * Round up a number to the operating system page size.      */
DECL|method|roundUp (long count)
specifier|public
name|long
name|roundUp
parameter_list|(
name|long
name|count
parameter_list|)
block|{
return|return
operator|(
name|count
operator|+
name|osPageSize
operator|-
literal|1
operator|)
operator|&
operator|(
operator|~
operator|(
name|osPageSize
operator|-
literal|1
operator|)
operator|)
return|;
block|}
comment|/**      * Round down a number to the operating system page size.      */
DECL|method|roundDown (long count)
specifier|public
name|long
name|roundDown
parameter_list|(
name|long
name|count
parameter_list|)
block|{
return|return
name|count
operator|&
operator|(
operator|~
operator|(
name|osPageSize
operator|-
literal|1
operator|)
operator|)
return|;
block|}
block|}
comment|/**    * Counts used bytes for memory.    */
DECL|class|UsedBytesCount
specifier|private
class|class
name|UsedBytesCount
block|{
DECL|field|usedBytes
specifier|private
specifier|final
name|AtomicLong
name|usedBytes
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|rounder
specifier|private
name|CacheStats
operator|.
name|PageRounder
name|rounder
init|=
operator|new
name|PageRounder
argument_list|()
decl_stmt|;
comment|/**      * Try to reserve more bytes.      *      * @param count      *          The number of bytes to add. We will round this up to the page      *          size.      *      * @return The new number of usedBytes if we succeeded; -1 if we failed.      */
DECL|method|reserve (long count)
name|long
name|reserve
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|count
operator|=
name|rounder
operator|.
name|roundUp
argument_list|(
name|count
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|cur
init|=
name|usedBytes
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|next
init|=
name|cur
operator|+
name|count
decl_stmt|;
if|if
condition|(
name|next
operator|>
name|getCacheCapacity
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|usedBytes
operator|.
name|compareAndSet
argument_list|(
name|cur
argument_list|,
name|next
argument_list|)
condition|)
block|{
return|return
name|next
return|;
block|}
block|}
block|}
comment|/**      * Release some bytes that we're using.      *      * @param count      *          The number of bytes to release. We will round this up to the      *          page size.      *      * @return The new number of usedBytes.      */
DECL|method|release (long count)
name|long
name|release
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|count
operator|=
name|rounder
operator|.
name|roundUp
argument_list|(
name|count
argument_list|)
expr_stmt|;
return|return
name|usedBytes
operator|.
name|addAndGet
argument_list|(
operator|-
name|count
argument_list|)
return|;
block|}
comment|/**      * Release some bytes that we're using rounded down to the page size.      *      * @param count      *          The number of bytes to release. We will round this down to the      *          page size.      *      * @return The new number of usedBytes.      */
DECL|method|releaseRoundDown (long count)
name|long
name|releaseRoundDown
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|count
operator|=
name|rounder
operator|.
name|roundDown
argument_list|(
name|count
argument_list|)
expr_stmt|;
return|return
name|usedBytes
operator|.
name|addAndGet
argument_list|(
operator|-
name|count
argument_list|)
return|;
block|}
DECL|method|get ()
name|long
name|get
parameter_list|()
block|{
return|return
name|usedBytes
operator|.
name|get
argument_list|()
return|;
block|}
block|}
comment|// Stats related methods for FSDatasetMBean
comment|/**    * Get the approximate amount of cache space used.    */
DECL|method|getCacheUsed ()
specifier|public
name|long
name|getCacheUsed
parameter_list|()
block|{
return|return
name|usedBytesCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Get the maximum amount of bytes we can cache. This is a constant.    */
DECL|method|getCacheCapacity ()
specifier|public
name|long
name|getCacheCapacity
parameter_list|()
block|{
return|return
name|maxBytes
return|;
block|}
comment|/**    * Try to reserve more bytes.    *    * @param count    *          The number of bytes to add. We will round this up to the page    *          size.    *    * @return The new number of usedBytes if we succeeded; -1 if we failed.    */
DECL|method|reserve (long count)
name|long
name|reserve
parameter_list|(
name|long
name|count
parameter_list|)
block|{
return|return
name|usedBytesCount
operator|.
name|reserve
argument_list|(
name|count
argument_list|)
return|;
block|}
comment|/**    * Release some bytes that we're using.    *    * @param count    *          The number of bytes to release. We will round this up to the    *          page size.    *    * @return The new number of usedBytes.    */
DECL|method|release (long count)
name|long
name|release
parameter_list|(
name|long
name|count
parameter_list|)
block|{
return|return
name|usedBytesCount
operator|.
name|release
argument_list|(
name|count
argument_list|)
return|;
block|}
comment|/**    * Release some bytes that we're using rounded down to the page size.    *    * @param count    *          The number of bytes to release. We will round this down to the    *          page size.    *    * @return The new number of usedBytes.    */
DECL|method|releaseRoundDown (long count)
name|long
name|releaseRoundDown
parameter_list|(
name|long
name|count
parameter_list|)
block|{
return|return
name|usedBytesCount
operator|.
name|releaseRoundDown
argument_list|(
name|count
argument_list|)
return|;
block|}
comment|/**    * Get the OS page size.    *    * @return the OS page size.    */
DECL|method|getPageSize ()
name|long
name|getPageSize
parameter_list|()
block|{
return|return
name|usedBytesCount
operator|.
name|rounder
operator|.
name|osPageSize
return|;
block|}
comment|/**    * Round up to the OS page size.    */
DECL|method|roundUpPageSize (long count)
name|long
name|roundUpPageSize
parameter_list|(
name|long
name|count
parameter_list|)
block|{
return|return
name|usedBytesCount
operator|.
name|rounder
operator|.
name|roundUp
argument_list|(
name|count
argument_list|)
return|;
block|}
block|}
end_class

end_unit

