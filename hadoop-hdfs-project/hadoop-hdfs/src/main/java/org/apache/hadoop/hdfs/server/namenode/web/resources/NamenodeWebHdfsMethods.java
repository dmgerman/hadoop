begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|JsonUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|AccessTimeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|BlockSizeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|BufferSizeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DeleteOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DstPathParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|GetOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|GroupParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|HttpOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ModificationTimeParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OverwriteParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|OwnerParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PermissionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PostOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|PutOpParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|RecursiveParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|RenameOptionSetParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|ReplicationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|UriFsPathParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_comment
comment|/** Web-hdfs NameNode implementation. */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|""
argument_list|)
DECL|class|NamenodeWebHdfsMethods
specifier|public
class|class
name|NamenodeWebHdfsMethods
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NamenodeWebHdfsMethods
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
annotation|@
name|Context
name|ServletContext
name|context
decl_stmt|;
DECL|method|chooseDatanode (final NameNode namenode, final String path, final HttpOpParam.Op op)
specifier|private
specifier|static
name|DatanodeInfo
name|chooseDatanode
parameter_list|(
specifier|final
name|NameNode
name|namenode
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|op
operator|==
name|PostOpParam
operator|.
name|Op
operator|.
name|APPEND
condition|)
block|{
specifier|final
name|HdfsFileStatus
name|status
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|long
name|len
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|LocatedBlocks
name|locations
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|path
argument_list|,
name|len
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|locations
operator|.
name|locatedBlockCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|JspHelper
operator|.
name|bestNode
argument_list|(
name|locations
operator|.
name|get
argument_list|(
name|count
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
operator|(
name|DatanodeDescriptor
operator|)
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|(         )
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
operator|.
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|)
return|;
block|}
DECL|method|redirectURI (final NameNode namenode, final String path, final HttpOpParam.Op op, final Param<?, ?>... parameters)
specifier|private
specifier|static
name|URI
name|redirectURI
parameter_list|(
specifier|final
name|NameNode
name|namenode
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
specifier|final
name|DatanodeInfo
name|dn
init|=
name|chooseDatanode
argument_list|(
name|namenode
argument_list|,
name|path
argument_list|,
name|op
argument_list|)
decl_stmt|;
specifier|final
name|String
name|query
init|=
name|op
operator|.
name|toQueryString
argument_list|()
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
specifier|final
name|String
name|uripath
init|=
literal|"/"
operator|+
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
name|path
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http"
argument_list|,
literal|null
argument_list|,
name|dn
operator|.
name|getHostName
argument_list|()
argument_list|,
name|dn
operator|.
name|getInfoPort
argument_list|()
argument_list|,
name|uripath
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"redirectURI="
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
comment|/** Handle HTTP PUT request. */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"{"
operator|+
name|UriFsPathParam
operator|.
name|NAME
operator|+
literal|":.*}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|put ( final InputStream in, @PathParam(UriFsPathParam.NAME) final UriFsPathParam path, @QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT) final PutOpParam op, @QueryParam(DstPathParam.NAME) @DefaultValue(DstPathParam.DEFAULT) final DstPathParam dstPath, @QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT) final OwnerParam owner, @QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT) final GroupParam group, @QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT) final PermissionParam permission, @QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT) final OverwriteParam overwrite, @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT) final BufferSizeParam bufferSize, @QueryParam(ReplicationParam.NAME) @DefaultValue(ReplicationParam.DEFAULT) final ReplicationParam replication, @QueryParam(BlockSizeParam.NAME) @DefaultValue(BlockSizeParam.DEFAULT) final BlockSizeParam blockSize, @QueryParam(ModificationTimeParam.NAME) @DefaultValue(ModificationTimeParam.DEFAULT) final ModificationTimeParam modificationTime, @QueryParam(AccessTimeParam.NAME) @DefaultValue(AccessTimeParam.DEFAULT) final AccessTimeParam accessTime, @QueryParam(RenameOptionSetParam.NAME) @DefaultValue(RenameOptionSetParam.DEFAULT) final RenameOptionSetParam renameOptions )
specifier|public
name|Response
name|put
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|UriFsPathParam
operator|.
name|NAME
argument_list|)
specifier|final
name|UriFsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PutOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PutOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|PutOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DstPathParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DstPathParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DstPathParam
name|dstPath
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OwnerParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OwnerParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OwnerParam
name|owner
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|GroupParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|GroupParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|GroupParam
name|group
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PermissionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PermissionParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|PermissionParam
name|permission
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OverwriteParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OverwriteParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OverwriteParam
name|overwrite
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BufferSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BufferSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ReplicationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ReplicationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ReplicationParam
name|replication
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BlockSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BlockSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BlockSizeParam
name|blockSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ModificationTimeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ModificationTimeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ModificationTimeParam
name|modificationTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|AccessTimeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|AccessTimeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|AccessTimeParam
name|accessTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RenameOptionSetParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|RenameOptionSetParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|RenameOptionSetParam
name|renameOptions
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|op
operator|+
literal|": "
operator|+
name|path
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|", "
argument_list|,
name|dstPath
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|permission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|fullpath
init|=
name|path
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
specifier|final
name|NamenodeProtocols
name|np
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
block|{
specifier|final
name|URI
name|uri
init|=
name|redirectURI
argument_list|(
name|namenode
argument_list|,
name|fullpath
argument_list|,
name|op
operator|.
name|getValue
argument_list|()
argument_list|,
name|permission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|MKDIRS
case|:
block|{
specifier|final
name|boolean
name|b
init|=
name|np
operator|.
name|mkdirs
argument_list|(
name|fullpath
argument_list|,
name|permission
operator|.
name|getFsPermission
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|PutOpParam
operator|.
name|Op
operator|.
name|MKDIRS
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|RENAME
case|:
block|{
specifier|final
name|EnumSet
argument_list|<
name|Options
operator|.
name|Rename
argument_list|>
name|s
init|=
name|renameOptions
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|final
name|boolean
name|b
init|=
name|np
operator|.
name|rename
argument_list|(
name|fullpath
argument_list|,
name|dstPath
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|PutOpParam
operator|.
name|Op
operator|.
name|RENAME
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|np
operator|.
name|rename
argument_list|(
name|fullpath
argument_list|,
name|dstPath
operator|.
name|getValue
argument_list|()
argument_list|,
name|s
operator|.
name|toArray
argument_list|(
operator|new
name|Options
operator|.
name|Rename
index|[
name|s
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
case|case
name|SETREPLICATION
case|:
block|{
specifier|final
name|boolean
name|b
init|=
name|np
operator|.
name|setReplication
argument_list|(
name|fullpath
argument_list|,
name|replication
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|PutOpParam
operator|.
name|Op
operator|.
name|SETREPLICATION
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|SETOWNER
case|:
block|{
name|np
operator|.
name|setOwner
argument_list|(
name|fullpath
argument_list|,
name|owner
operator|.
name|getValue
argument_list|()
argument_list|,
name|group
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|SETPERMISSION
case|:
block|{
name|np
operator|.
name|setPermission
argument_list|(
name|fullpath
argument_list|,
name|permission
operator|.
name|getFsPermission
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|SETTIMES
case|:
block|{
name|np
operator|.
name|setTimes
argument_list|(
name|fullpath
argument_list|,
name|modificationTime
operator|.
name|getValue
argument_list|()
argument_list|,
name|accessTime
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
comment|/** Handle HTTP POST request. */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"{"
operator|+
name|UriFsPathParam
operator|.
name|NAME
operator|+
literal|":.*}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|post ( final InputStream in, @PathParam(UriFsPathParam.NAME) final UriFsPathParam path, @QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT) final PostOpParam op, @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT) final BufferSizeParam bufferSize )
specifier|public
name|Response
name|post
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|UriFsPathParam
operator|.
name|NAME
argument_list|)
specifier|final
name|UriFsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PostOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PostOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|PostOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BufferSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BufferSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|op
operator|+
literal|": "
operator|+
name|path
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|", "
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|fullpath
init|=
name|path
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|APPEND
case|:
block|{
specifier|final
name|URI
name|uri
init|=
name|redirectURI
argument_list|(
name|namenode
argument_list|,
name|fullpath
argument_list|,
name|op
operator|.
name|getValue
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|uri
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
DECL|field|ROOT
specifier|private
specifier|static
specifier|final
name|UriFsPathParam
name|ROOT
init|=
operator|new
name|UriFsPathParam
argument_list|(
literal|""
argument_list|)
decl_stmt|;
comment|/** Handle HTTP GET request for the root. */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|root ( @ueryParamGetOpParam.NAME) @efaultValueGetOpParam.DEFAULT) final GetOpParam op )
specifier|public
name|Response
name|root
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
name|GetOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|GetOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|GetOpParam
name|op
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|ROOT
argument_list|,
name|op
argument_list|)
return|;
block|}
comment|/** Handle HTTP GET request. */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"{"
operator|+
name|UriFsPathParam
operator|.
name|NAME
operator|+
literal|":.*}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|get ( @athParamUriFsPathParam.NAME) final UriFsPathParam path, @QueryParam(GetOpParam.NAME) @DefaultValue(GetOpParam.DEFAULT) final GetOpParam op )
specifier|public
name|Response
name|get
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|UriFsPathParam
operator|.
name|NAME
argument_list|)
specifier|final
name|UriFsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|GetOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|GetOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|GetOpParam
name|op
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|op
operator|+
literal|", "
operator|+
name|path
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|GETFILESTATUS
case|:
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fullpath
init|=
name|path
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|HdfsFileStatus
name|status
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|fullpath
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|status
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
comment|/** Handle HTTP DELETE request. */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"{path:.*}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|method|delete ( @athParamUriFsPathParam.NAME) final UriFsPathParam path, @QueryParam(DeleteOpParam.NAME) @DefaultValue(DeleteOpParam.DEFAULT) final DeleteOpParam op, @QueryParam(RecursiveParam.NAME) @DefaultValue(RecursiveParam.DEFAULT) final RecursiveParam recursive )
specifier|public
name|Response
name|delete
parameter_list|(
annotation|@
name|PathParam
argument_list|(
name|UriFsPathParam
operator|.
name|NAME
argument_list|)
specifier|final
name|UriFsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DeleteOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DeleteOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DeleteOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RecursiveParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|RecursiveParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|RecursiveParam
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|op
operator|+
literal|", "
operator|+
name|path
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|", "
argument_list|,
name|recursive
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|DELETE
case|:
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fullpath
init|=
name|path
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|b
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|delete
argument_list|(
name|fullpath
argument_list|,
name|recursive
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|DeleteOpParam
operator|.
name|Op
operator|.
name|DELETE
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

