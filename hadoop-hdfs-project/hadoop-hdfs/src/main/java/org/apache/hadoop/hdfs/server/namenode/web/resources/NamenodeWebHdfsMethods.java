begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
operator|.
name|Encoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|StreamingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsCreateModes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|XAttrHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|JsonUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|ParamFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|WebHdfsFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ExternalCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|spi
operator|.
name|container
operator|.
name|ResourceFilters
import|;
end_import

begin_comment
comment|/** Web-hdfs NameNode implementation. */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|""
argument_list|)
annotation|@
name|ResourceFilters
argument_list|(
name|ParamFilter
operator|.
name|class
argument_list|)
DECL|class|NamenodeWebHdfsMethods
specifier|public
class|class
name|NamenodeWebHdfsMethods
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NamenodeWebHdfsMethods
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT
specifier|private
specifier|static
specifier|final
name|UriFsPathParam
name|ROOT
init|=
operator|new
name|UriFsPathParam
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|useIpcCallq
specifier|private
specifier|volatile
name|Boolean
name|useIpcCallq
decl_stmt|;
DECL|field|scheme
specifier|private
name|String
name|scheme
decl_stmt|;
DECL|field|userPrincipal
specifier|private
name|Principal
name|userPrincipal
decl_stmt|;
DECL|field|remoteAddr
specifier|private
name|String
name|remoteAddr
decl_stmt|;
DECL|field|context
specifier|private
annotation|@
name|Context
name|ServletContext
name|context
decl_stmt|;
DECL|field|response
specifier|private
annotation|@
name|Context
name|HttpServletResponse
name|response
decl_stmt|;
DECL|field|supportEZ
specifier|private
name|boolean
name|supportEZ
decl_stmt|;
DECL|method|NamenodeWebHdfsMethods (@ontext HttpServletRequest request)
specifier|public
name|NamenodeWebHdfsMethods
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|request
parameter_list|)
block|{
comment|// the request object is a proxy to thread-locals so we have to extract
comment|// what we want from it since the external call will be processed in a
comment|// different thread.
name|scheme
operator|=
name|request
operator|.
name|getScheme
argument_list|()
expr_stmt|;
name|userPrincipal
operator|=
name|request
operator|.
name|getUserPrincipal
argument_list|()
expr_stmt|;
comment|// get the remote address, if coming in via a trusted proxy server then
comment|// the address with be that of the proxied client
name|remoteAddr
operator|=
name|JspHelper
operator|.
name|getRemoteAddr
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|supportEZ
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|WebHdfsFileSystem
operator|.
name|EZ_HEADER
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|init (final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final UriFsPathParam path, final HttpOpParam<?> op, final Param<?, ?>... parameters)
specifier|protected
name|void
name|init
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|UriFsPathParam
name|path
parameter_list|,
specifier|final
name|HttpOpParam
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|useIpcCallq
operator|==
literal|null
condition|)
block|{
name|Configuration
name|conf
init|=
operator|(
name|Configuration
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
decl_stmt|;
name|useIpcCallq
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEBHDFS_USE_IPC_CALLQ
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_WEBHDFS_USE_IPC_CALLQ_DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP "
operator|+
name|op
operator|.
name|getValue
argument_list|()
operator|.
name|getType
argument_list|()
operator|+
literal|": "
operator|+
name|op
operator|+
literal|", "
operator|+
name|path
operator|+
literal|", ugi="
operator|+
name|ugi
operator|+
literal|", "
operator|+
name|username
operator|+
literal|", "
operator|+
name|doAsUser
operator|+
name|Param
operator|.
name|toSortedString
argument_list|(
literal|", "
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//clear content type
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getRPCServer (NameNode namenode)
specifier|private
specifier|static
name|NamenodeProtocols
name|getRPCServer
parameter_list|(
name|NameNode
name|namenode
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NamenodeProtocols
name|np
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|np
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RetriableException
argument_list|(
literal|"Namenode is in startup mode"
argument_list|)
throw|;
block|}
return|return
name|np
return|;
block|}
DECL|method|getRpcClientProtocol ()
specifier|protected
name|ClientProtocol
name|getRpcClientProtocol
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
specifier|final
name|ClientProtocol
name|cp
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|cp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RetriableException
argument_list|(
literal|"Namenode is in startup mode"
argument_list|)
throw|;
block|}
return|return
name|cp
return|;
block|}
DECL|method|getScheme ()
specifier|protected
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
DECL|method|getContext ()
specifier|protected
name|ServletContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|doAs (final UserGroupInformation ugi, final PrivilegedExceptionAction<T> action)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|doAs
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|useIpcCallq
condition|?
name|doAsExternalCall
argument_list|(
name|ugi
argument_list|,
name|action
argument_list|)
else|:
name|ugi
operator|.
name|doAs
argument_list|(
name|action
argument_list|)
return|;
block|}
DECL|method|doAsExternalCall (final UserGroupInformation ugi, final PrivilegedExceptionAction<T> action)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|doAsExternalCall
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
name|action
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// set the remote address, if coming in via a trust proxy server then
comment|// the address with be that of the proxied client
name|ExternalCall
argument_list|<
name|T
argument_list|>
name|call
init|=
operator|new
name|ExternalCall
argument_list|<
name|T
argument_list|>
argument_list|(
name|action
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|getRemoteUser
parameter_list|()
block|{
return|return
name|ugi
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
literal|"webhdfs"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHostAddress
parameter_list|()
block|{
return|return
name|getRemoteAddr
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InetAddress
name|getHostInetAddress
parameter_list|()
block|{
try|try
block|{
return|return
name|InetAddress
operator|.
name|getByName
argument_list|(
name|getHostAddress
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
decl_stmt|;
name|queueExternalCall
argument_list|(
name|call
argument_list|)
expr_stmt|;
name|T
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|call
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|ee
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|t
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|getRemoteAddr ()
specifier|protected
name|String
name|getRemoteAddr
parameter_list|()
block|{
return|return
name|remoteAddr
return|;
block|}
DECL|method|queueExternalCall (ExternalCall call)
specifier|protected
name|void
name|queueExternalCall
parameter_list|(
name|ExternalCall
name|call
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
name|namenode
operator|.
name|queueExternalCall
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|chooseDatanode (final NameNode namenode, final String path, final HttpOpParam.Op op, final long openOffset, final long blocksize, final String excludeDatanodes, final String remoteAddr, final HdfsFileStatus status)
specifier|static
name|DatanodeInfo
name|chooseDatanode
parameter_list|(
specifier|final
name|NameNode
name|namenode
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|long
name|openOffset
parameter_list|,
specifier|final
name|long
name|blocksize
parameter_list|,
specifier|final
name|String
name|excludeDatanodes
parameter_list|,
specifier|final
name|String
name|remoteAddr
parameter_list|,
specifier|final
name|HdfsFileStatus
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|FSNamesystem
name|fsn
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fsn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Namesystem has not been initialized yet."
argument_list|)
throw|;
block|}
specifier|final
name|BlockManager
name|bm
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Node
argument_list|>
name|excludes
init|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeDatanodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|host
range|:
name|StringUtils
operator|.
name|getTrimmedStringCollection
argument_list|(
name|excludeDatanodes
argument_list|)
control|)
block|{
name|int
name|idx
init|=
name|host
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Node
name|excludeNode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|excludeNode
operator|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeByXferAddr
argument_list|(
name|host
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|host
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|excludeNode
operator|=
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeByHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeNode
operator|!=
literal|null
condition|)
block|{
name|excludes
operator|.
name|add
argument_list|(
name|excludeNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DataNode {} was requested to be excluded, "
operator|+
literal|"but it was not found."
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|op
operator|==
name|PutOpParam
operator|.
name|Op
operator|.
name|CREATE
condition|)
block|{
comment|//choose a datanode near to client
specifier|final
name|DatanodeDescriptor
name|clientNode
init|=
name|bm
operator|.
name|getDatanodeManager
argument_list|(           )
operator|.
name|getDatanodeByHost
argument_list|(
name|remoteAddr
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientNode
operator|!=
literal|null
condition|)
block|{
specifier|final
name|DatanodeStorageInfo
index|[]
name|storages
init|=
name|bm
operator|.
name|chooseTarget4WebHDFS
argument_list|(
name|path
argument_list|,
name|clientNode
argument_list|,
name|excludes
argument_list|,
name|blocksize
argument_list|)
decl_stmt|;
if|if
condition|(
name|storages
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|storages
index|[
literal|0
index|]
operator|.
name|getDatanodeDescriptor
argument_list|()
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
operator|||
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|GETFILECHECKSUM
operator|||
name|op
operator|==
name|PostOpParam
operator|.
name|Op
operator|.
name|APPEND
condition|)
block|{
comment|//choose a datanode containing a replica
specifier|final
name|NamenodeProtocols
name|np
init|=
name|getRPCServer
argument_list|(
name|namenode
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|path
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
specifier|final
name|long
name|len
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
condition|)
block|{
if|if
condition|(
name|openOffset
operator|<
literal|0L
operator|||
operator|(
name|openOffset
operator|>=
name|len
operator|&&
name|len
operator|>
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Offset="
operator|+
name|openOffset
operator|+
literal|" out of the range [0, "
operator|+
name|len
operator|+
literal|"); "
operator|+
name|op
operator|+
literal|", path="
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|long
name|offset
init|=
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
condition|?
name|openOffset
else|:
name|len
operator|-
literal|1
decl_stmt|;
specifier|final
name|LocatedBlocks
name|locations
init|=
name|np
operator|.
name|getBlockLocations
argument_list|(
name|path
argument_list|,
name|offset
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|locations
operator|.
name|locatedBlockCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
return|return
name|bestNode
argument_list|(
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
argument_list|,
name|excludes
argument_list|)
return|;
block|}
block|}
block|}
return|return
operator|(
name|DatanodeDescriptor
operator|)
name|bm
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|(         )
operator|.
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludes
argument_list|)
return|;
block|}
comment|/**    * Choose the datanode to redirect the request. Note that the nodes have been    * sorted based on availability and network distances, thus it is sufficient    * to return the first element of the node here.    */
DECL|method|bestNode (DatanodeInfo[] nodes, HashSet<Node> excludes)
specifier|protected
specifier|static
name|DatanodeInfo
name|bestNode
parameter_list|(
name|DatanodeInfo
index|[]
name|nodes
parameter_list|,
name|HashSet
argument_list|<
name|Node
argument_list|>
name|excludes
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|nodes
control|)
block|{
if|if
condition|(
literal|false
operator|==
name|dn
operator|.
name|isDecommissioned
argument_list|()
operator|&&
literal|false
operator|==
name|excludes
operator|.
name|contains
argument_list|(
name|dn
argument_list|)
condition|)
block|{
return|return
name|dn
return|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No active nodes contain this block"
argument_list|)
throw|;
block|}
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtocol
name|cp
init|=
name|getRpcClientProtocol
argument_list|()
decl_stmt|;
return|return
name|cp
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
return|;
block|}
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientProtocol
name|cp
init|=
name|getRpcClientProtocol
argument_list|()
decl_stmt|;
name|cp
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|createCredentials (final UserGroupInformation ugi, final String renewer)
specifier|public
name|Credentials
name|createCredentials
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
specifier|final
name|Credentials
name|c
init|=
name|DelegationTokenSecretManager
operator|.
name|createCredentials
argument_list|(
name|namenode
argument_list|,
name|ugi
argument_list|,
name|renewer
operator|!=
literal|null
condition|?
name|renewer
else|:
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|c
return|;
block|}
DECL|method|generateDelegationToken ( final UserGroupInformation ugi, final String renewer)
specifier|public
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|generateDelegationToken
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|Credentials
name|c
init|=
name|createCredentials
argument_list|(
name|ugi
argument_list|,
name|renewer
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|t
init|=
name|c
operator|.
name|getAllTokens
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Text
name|kind
init|=
name|scheme
operator|.
name|equals
argument_list|(
literal|"http"
argument_list|)
condition|?
name|WebHdfsConstants
operator|.
name|WEBHDFS_TOKEN_KIND
else|:
name|WebHdfsConstants
operator|.
name|SWEBHDFS_TOKEN_KIND
decl_stmt|;
name|t
operator|.
name|setKind
argument_list|(
name|kind
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|redirectURI (ResponseBuilder rb, final NameNode namenode, final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final String path, final HttpOpParam.Op op, final long openOffset, final long blocksize, final String excludeDatanodes, final Param<?, ?>... parameters)
specifier|private
name|URI
name|redirectURI
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
specifier|final
name|NameNode
name|namenode
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|HttpOpParam
operator|.
name|Op
name|op
parameter_list|,
specifier|final
name|long
name|openOffset
parameter_list|,
specifier|final
name|long
name|blocksize
parameter_list|,
specifier|final
name|String
name|excludeDatanodes
parameter_list|,
specifier|final
name|Param
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
modifier|...
name|parameters
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
specifier|final
name|DatanodeInfo
name|dn
decl_stmt|;
specifier|final
name|NamenodeProtocols
name|np
init|=
name|getRPCServer
argument_list|(
name|namenode
argument_list|)
decl_stmt|;
name|HdfsFileStatus
name|status
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
operator|||
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|GETFILECHECKSUM
operator|||
name|op
operator|==
name|PostOpParam
operator|.
name|Op
operator|.
name|APPEND
condition|)
block|{
name|status
operator|=
name|np
operator|.
name|getFileInfo
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|dn
operator|=
name|chooseDatanode
argument_list|(
name|namenode
argument_list|,
name|path
argument_list|,
name|op
argument_list|,
name|openOffset
argument_list|,
name|blocksize
argument_list|,
name|excludeDatanodes
argument_list|,
name|remoteAddr
argument_list|,
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|dn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to find datanode, suggest to check cluster"
operator|+
literal|" health. excludeDatanodes="
operator|+
name|excludeDatanodes
argument_list|)
throw|;
block|}
specifier|final
name|String
name|delegationQuery
decl_stmt|;
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|//security disabled
name|delegationQuery
operator|=
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
name|doAsUser
argument_list|,
name|username
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delegation
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//client has provided a token
name|delegationQuery
operator|=
literal|"&"
operator|+
name|delegation
expr_stmt|;
block|}
else|else
block|{
comment|//generate a token
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|t
init|=
name|generateDelegationToken
argument_list|(
name|ugi
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|delegationQuery
operator|=
literal|"&"
operator|+
operator|new
name|DelegationParam
argument_list|(
name|t
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|queryBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
name|op
operator|.
name|toQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
name|delegationQuery
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|NamenodeAddressParam
argument_list|(
name|namenode
argument_list|)
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
name|Param
operator|.
name|toSortedString
argument_list|(
literal|"&"
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|prependReservedRawPath
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|GetOpParam
operator|.
name|Op
operator|.
name|OPEN
operator|&&
name|supportEZ
operator|&&
name|status
operator|.
name|getFileEncryptionInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|prependReservedRawPath
operator|=
literal|true
expr_stmt|;
name|rb
operator|.
name|header
argument_list|(
name|WebHdfsFileSystem
operator|.
name|FEFINFO_HEADER
argument_list|,
name|encodeFeInfo
argument_list|(
name|status
operator|.
name|getFileEncryptionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|uripath
init|=
name|WebHdfsFileSystem
operator|.
name|PATH_PREFIX
operator|+
operator|(
name|prependReservedRawPath
condition|?
literal|"/.reserved/raw"
operator|+
name|path
else|:
name|path
operator|)
decl_stmt|;
name|int
name|port
init|=
literal|"http"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|?
name|dn
operator|.
name|getInfoPort
argument_list|()
else|:
name|dn
operator|.
name|getInfoSecurePort
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
literal|null
argument_list|,
name|dn
operator|.
name|getHostName
argument_list|()
argument_list|,
name|port
argument_list|,
name|uripath
argument_list|,
name|queryBuilder
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"redirectURI="
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
comment|/** Handle HTTP PUT request for the root. */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|putRoot ( @ontext final UserGroupInformation ugi, @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT) final DelegationParam delegation, @QueryParam(UserParam.NAME) @DefaultValue(UserParam.DEFAULT) final UserParam username, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) final DoAsParam doAsUser, @QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT) final PutOpParam op, @QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT) final DestinationParam destination, @QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT) final OwnerParam owner, @QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT) final GroupParam group, @QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT) final PermissionParam permission, @QueryParam(UnmaskedPermissionParam.NAME) @DefaultValue(UnmaskedPermissionParam.DEFAULT) final UnmaskedPermissionParam unmaskedPermission, @QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT) final OverwriteParam overwrite, @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT) final BufferSizeParam bufferSize, @QueryParam(ReplicationParam.NAME) @DefaultValue(ReplicationParam.DEFAULT) final ReplicationParam replication, @QueryParam(BlockSizeParam.NAME) @DefaultValue(BlockSizeParam.DEFAULT) final BlockSizeParam blockSize, @QueryParam(ModificationTimeParam.NAME) @DefaultValue(ModificationTimeParam.DEFAULT) final ModificationTimeParam modificationTime, @QueryParam(AccessTimeParam.NAME) @DefaultValue(AccessTimeParam.DEFAULT) final AccessTimeParam accessTime, @QueryParam(RenameOptionSetParam.NAME) @DefaultValue(RenameOptionSetParam.DEFAULT) final RenameOptionSetParam renameOptions, @QueryParam(CreateParentParam.NAME) @DefaultValue(CreateParentParam.DEFAULT) final CreateParentParam createParent, @QueryParam(TokenArgumentParam.NAME) @DefaultValue(TokenArgumentParam.DEFAULT) final TokenArgumentParam delegationTokenArgument, @QueryParam(AclPermissionParam.NAME) @DefaultValue(AclPermissionParam.DEFAULT) final AclPermissionParam aclPermission, @QueryParam(XAttrNameParam.NAME) @DefaultValue(XAttrNameParam.DEFAULT) final XAttrNameParam xattrName, @QueryParam(XAttrValueParam.NAME) @DefaultValue(XAttrValueParam.DEFAULT) final XAttrValueParam xattrValue, @QueryParam(XAttrSetFlagParam.NAME) @DefaultValue(XAttrSetFlagParam.DEFAULT) final XAttrSetFlagParam xattrSetFlag, @QueryParam(SnapshotNameParam.NAME) @DefaultValue(SnapshotNameParam.DEFAULT) final SnapshotNameParam snapshotName, @QueryParam(OldSnapshotNameParam.NAME) @DefaultValue(OldSnapshotNameParam.DEFAULT) final OldSnapshotNameParam oldSnapshotName, @QueryParam(ExcludeDatanodesParam.NAME) @DefaultValue(ExcludeDatanodesParam.DEFAULT) final ExcludeDatanodesParam excludeDatanodes, @QueryParam(CreateFlagParam.NAME) @DefaultValue(CreateFlagParam.DEFAULT) final CreateFlagParam createFlagParam, @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT) final NoRedirectParam noredirect, @QueryParam(StoragePolicyParam.NAME) @DefaultValue(StoragePolicyParam .DEFAULT) final StoragePolicyParam policyName, @QueryParam(ECPolicyParam.NAME) @DefaultValue(ECPolicyParam .DEFAULT) final ECPolicyParam ecpolicy )
specifier|public
name|Response
name|putRoot
parameter_list|(
annotation|@
name|Context
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DelegationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DelegationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|UserParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|UserParam
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PutOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PutOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|PutOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DestinationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DestinationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DestinationParam
name|destination
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OwnerParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OwnerParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OwnerParam
name|owner
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|GroupParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|GroupParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|GroupParam
name|group
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PermissionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PermissionParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|PermissionParam
name|permission
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|UnmaskedPermissionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|UnmaskedPermissionParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|UnmaskedPermissionParam
name|unmaskedPermission
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OverwriteParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OverwriteParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OverwriteParam
name|overwrite
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BufferSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BufferSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ReplicationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ReplicationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ReplicationParam
name|replication
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BlockSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BlockSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BlockSizeParam
name|blockSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ModificationTimeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ModificationTimeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ModificationTimeParam
name|modificationTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|AccessTimeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|AccessTimeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|AccessTimeParam
name|accessTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RenameOptionSetParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|RenameOptionSetParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|RenameOptionSetParam
name|renameOptions
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|CreateParentParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|CreateParentParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|CreateParentParam
name|createParent
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|TokenArgumentParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|TokenArgumentParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|TokenArgumentParam
name|delegationTokenArgument
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|AclPermissionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|AclPermissionParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|AclPermissionParam
name|aclPermission
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|XAttrNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|XAttrNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|XAttrNameParam
name|xattrName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|XAttrValueParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|XAttrValueParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|XAttrValueParam
name|xattrValue
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|XAttrSetFlagParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|XAttrSetFlagParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|XAttrSetFlagParam
name|xattrSetFlag
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|SnapshotNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|SnapshotNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OldSnapshotNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OldSnapshotNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OldSnapshotNameParam
name|oldSnapshotName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ExcludeDatanodesParam
name|excludeDatanodes
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|CreateFlagParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|CreateFlagParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|CreateFlagParam
name|createFlagParam
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|NoRedirectParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|NoRedirectParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|NoRedirectParam
name|noredirect
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|StoragePolicyParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|StoragePolicyParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|StoragePolicyParam
name|policyName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ECPolicyParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ECPolicyParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ECPolicyParam
name|ecpolicy
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|put
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|ROOT
argument_list|,
name|op
argument_list|,
name|destination
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|permission
argument_list|,
name|unmaskedPermission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|modificationTime
argument_list|,
name|accessTime
argument_list|,
name|renameOptions
argument_list|,
name|createParent
argument_list|,
name|delegationTokenArgument
argument_list|,
name|aclPermission
argument_list|,
name|xattrName
argument_list|,
name|xattrValue
argument_list|,
name|xattrSetFlag
argument_list|,
name|snapshotName
argument_list|,
name|oldSnapshotName
argument_list|,
name|excludeDatanodes
argument_list|,
name|createFlagParam
argument_list|,
name|noredirect
argument_list|,
name|policyName
argument_list|,
name|ecpolicy
argument_list|)
return|;
block|}
comment|/** Validate all required params. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|validateOpParams (HttpOpParam<?> op, Param... params)
specifier|protected
name|void
name|validateOpParams
parameter_list|(
name|HttpOpParam
argument_list|<
name|?
argument_list|>
name|op
parameter_list|,
name|Param
modifier|...
name|params
parameter_list|)
block|{
for|for
control|(
name|Param
name|param
range|:
name|params
control|)
block|{
if|if
condition|(
name|param
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|param
operator|.
name|getValueString
argument_list|()
operator|==
literal|null
operator|||
name|param
operator|.
name|getValueString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Required param "
operator|+
name|param
operator|.
name|getName
argument_list|()
operator|+
literal|" for op: "
operator|+
name|op
operator|.
name|getValueString
argument_list|()
operator|+
literal|" is null or empty"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Handle HTTP PUT request. */
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"{"
operator|+
name|UriFsPathParam
operator|.
name|NAME
operator|+
literal|":.*}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|put ( @ontext final UserGroupInformation ugi, @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT) final DelegationParam delegation, @QueryParam(UserParam.NAME) @DefaultValue(UserParam.DEFAULT) final UserParam username, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) final DoAsParam doAsUser, @PathParam(UriFsPathParam.NAME) final UriFsPathParam path, @QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT) final PutOpParam op, @QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT) final DestinationParam destination, @QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT) final OwnerParam owner, @QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT) final GroupParam group, @QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT) final PermissionParam permission, @QueryParam(UnmaskedPermissionParam.NAME) @DefaultValue(UnmaskedPermissionParam.DEFAULT) final UnmaskedPermissionParam unmaskedPermission, @QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT) final OverwriteParam overwrite, @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT) final BufferSizeParam bufferSize, @QueryParam(ReplicationParam.NAME) @DefaultValue(ReplicationParam.DEFAULT) final ReplicationParam replication, @QueryParam(BlockSizeParam.NAME) @DefaultValue(BlockSizeParam.DEFAULT) final BlockSizeParam blockSize, @QueryParam(ModificationTimeParam.NAME) @DefaultValue(ModificationTimeParam.DEFAULT) final ModificationTimeParam modificationTime, @QueryParam(AccessTimeParam.NAME) @DefaultValue(AccessTimeParam.DEFAULT) final AccessTimeParam accessTime, @QueryParam(RenameOptionSetParam.NAME) @DefaultValue(RenameOptionSetParam.DEFAULT) final RenameOptionSetParam renameOptions, @QueryParam(CreateParentParam.NAME) @DefaultValue(CreateParentParam.DEFAULT) final CreateParentParam createParent, @QueryParam(TokenArgumentParam.NAME) @DefaultValue(TokenArgumentParam.DEFAULT) final TokenArgumentParam delegationTokenArgument, @QueryParam(AclPermissionParam.NAME) @DefaultValue(AclPermissionParam.DEFAULT) final AclPermissionParam aclPermission, @QueryParam(XAttrNameParam.NAME) @DefaultValue(XAttrNameParam.DEFAULT) final XAttrNameParam xattrName, @QueryParam(XAttrValueParam.NAME) @DefaultValue(XAttrValueParam.DEFAULT) final XAttrValueParam xattrValue, @QueryParam(XAttrSetFlagParam.NAME) @DefaultValue(XAttrSetFlagParam.DEFAULT) final XAttrSetFlagParam xattrSetFlag, @QueryParam(SnapshotNameParam.NAME) @DefaultValue(SnapshotNameParam.DEFAULT) final SnapshotNameParam snapshotName, @QueryParam(OldSnapshotNameParam.NAME) @DefaultValue(OldSnapshotNameParam.DEFAULT) final OldSnapshotNameParam oldSnapshotName, @QueryParam(ExcludeDatanodesParam.NAME) @DefaultValue(ExcludeDatanodesParam.DEFAULT) final ExcludeDatanodesParam excludeDatanodes, @QueryParam(CreateFlagParam.NAME) @DefaultValue(CreateFlagParam.DEFAULT) final CreateFlagParam createFlagParam, @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT) final NoRedirectParam noredirect, @QueryParam(StoragePolicyParam.NAME) @DefaultValue(StoragePolicyParam .DEFAULT) final StoragePolicyParam policyName, @QueryParam(ECPolicyParam.NAME) @DefaultValue(ECPolicyParam.DEFAULT) final ECPolicyParam ecpolicy )
specifier|public
name|Response
name|put
parameter_list|(
annotation|@
name|Context
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DelegationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DelegationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|UserParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|UserParam
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|UriFsPathParam
operator|.
name|NAME
argument_list|)
specifier|final
name|UriFsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PutOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PutOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|PutOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DestinationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DestinationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DestinationParam
name|destination
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OwnerParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OwnerParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OwnerParam
name|owner
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|GroupParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|GroupParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|GroupParam
name|group
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PermissionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PermissionParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|PermissionParam
name|permission
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|UnmaskedPermissionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|UnmaskedPermissionParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|UnmaskedPermissionParam
name|unmaskedPermission
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OverwriteParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OverwriteParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OverwriteParam
name|overwrite
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BufferSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BufferSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ReplicationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ReplicationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ReplicationParam
name|replication
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BlockSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BlockSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BlockSizeParam
name|blockSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ModificationTimeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ModificationTimeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ModificationTimeParam
name|modificationTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|AccessTimeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|AccessTimeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|AccessTimeParam
name|accessTime
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RenameOptionSetParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|RenameOptionSetParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|RenameOptionSetParam
name|renameOptions
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|CreateParentParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|CreateParentParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|CreateParentParam
name|createParent
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|TokenArgumentParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|TokenArgumentParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|TokenArgumentParam
name|delegationTokenArgument
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|AclPermissionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|AclPermissionParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|AclPermissionParam
name|aclPermission
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|XAttrNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|XAttrNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|XAttrNameParam
name|xattrName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|XAttrValueParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|XAttrValueParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|XAttrValueParam
name|xattrValue
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|XAttrSetFlagParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|XAttrSetFlagParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|XAttrSetFlagParam
name|xattrSetFlag
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|SnapshotNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|SnapshotNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OldSnapshotNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OldSnapshotNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OldSnapshotNameParam
name|oldSnapshotName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ExcludeDatanodesParam
name|excludeDatanodes
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|CreateFlagParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|CreateFlagParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|CreateFlagParam
name|createFlagParam
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|NoRedirectParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|NoRedirectParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|NoRedirectParam
name|noredirect
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|StoragePolicyParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|StoragePolicyParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|StoragePolicyParam
name|policyName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ECPolicyParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ECPolicyParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ECPolicyParam
name|ecpolicy
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|path
argument_list|,
name|op
argument_list|,
name|destination
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|permission
argument_list|,
name|unmaskedPermission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|modificationTime
argument_list|,
name|accessTime
argument_list|,
name|renameOptions
argument_list|,
name|delegationTokenArgument
argument_list|,
name|aclPermission
argument_list|,
name|xattrName
argument_list|,
name|xattrValue
argument_list|,
name|xattrSetFlag
argument_list|,
name|snapshotName
argument_list|,
name|oldSnapshotName
argument_list|,
name|excludeDatanodes
argument_list|,
name|createFlagParam
argument_list|,
name|noredirect
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
return|return
name|doAs
argument_list|(
name|ugi
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
return|return
name|put
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|op
argument_list|,
name|destination
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|permission
argument_list|,
name|unmaskedPermission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|modificationTime
argument_list|,
name|accessTime
argument_list|,
name|renameOptions
argument_list|,
name|createParent
argument_list|,
name|delegationTokenArgument
argument_list|,
name|aclPermission
argument_list|,
name|xattrName
argument_list|,
name|xattrValue
argument_list|,
name|xattrSetFlag
argument_list|,
name|snapshotName
argument_list|,
name|oldSnapshotName
argument_list|,
name|excludeDatanodes
argument_list|,
name|createFlagParam
argument_list|,
name|noredirect
argument_list|,
name|policyName
argument_list|,
name|ecpolicy
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|put ( final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final String fullpath, final PutOpParam op, final DestinationParam destination, final OwnerParam owner, final GroupParam group, final PermissionParam permission, final UnmaskedPermissionParam unmaskedPermission, final OverwriteParam overwrite, final BufferSizeParam bufferSize, final ReplicationParam replication, final BlockSizeParam blockSize, final ModificationTimeParam modificationTime, final AccessTimeParam accessTime, final RenameOptionSetParam renameOptions, final CreateParentParam createParent, final TokenArgumentParam delegationTokenArgument, final AclPermissionParam aclPermission, final XAttrNameParam xattrName, final XAttrValueParam xattrValue, final XAttrSetFlagParam xattrSetFlag, final SnapshotNameParam snapshotName, final OldSnapshotNameParam oldSnapshotName, final ExcludeDatanodesParam exclDatanodes, final CreateFlagParam createFlagParam, final NoRedirectParam noredirectParam, final StoragePolicyParam policyName, final ECPolicyParam ecpolicy )
specifier|protected
name|Response
name|put
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|String
name|fullpath
parameter_list|,
specifier|final
name|PutOpParam
name|op
parameter_list|,
specifier|final
name|DestinationParam
name|destination
parameter_list|,
specifier|final
name|OwnerParam
name|owner
parameter_list|,
specifier|final
name|GroupParam
name|group
parameter_list|,
specifier|final
name|PermissionParam
name|permission
parameter_list|,
specifier|final
name|UnmaskedPermissionParam
name|unmaskedPermission
parameter_list|,
specifier|final
name|OverwriteParam
name|overwrite
parameter_list|,
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
specifier|final
name|ReplicationParam
name|replication
parameter_list|,
specifier|final
name|BlockSizeParam
name|blockSize
parameter_list|,
specifier|final
name|ModificationTimeParam
name|modificationTime
parameter_list|,
specifier|final
name|AccessTimeParam
name|accessTime
parameter_list|,
specifier|final
name|RenameOptionSetParam
name|renameOptions
parameter_list|,
specifier|final
name|CreateParentParam
name|createParent
parameter_list|,
specifier|final
name|TokenArgumentParam
name|delegationTokenArgument
parameter_list|,
specifier|final
name|AclPermissionParam
name|aclPermission
parameter_list|,
specifier|final
name|XAttrNameParam
name|xattrName
parameter_list|,
specifier|final
name|XAttrValueParam
name|xattrValue
parameter_list|,
specifier|final
name|XAttrSetFlagParam
name|xattrSetFlag
parameter_list|,
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|,
specifier|final
name|OldSnapshotNameParam
name|oldSnapshotName
parameter_list|,
specifier|final
name|ExcludeDatanodesParam
name|exclDatanodes
parameter_list|,
specifier|final
name|CreateFlagParam
name|createFlagParam
parameter_list|,
specifier|final
name|NoRedirectParam
name|noredirectParam
parameter_list|,
specifier|final
name|StoragePolicyParam
name|policyName
parameter_list|,
specifier|final
name|ECPolicyParam
name|ecpolicy
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|(
name|Configuration
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
decl_stmt|;
specifier|final
name|ClientProtocol
name|cp
init|=
name|getRpcClientProtocol
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|CREATE
case|:
block|{
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|redirectURI
argument_list|(
literal|null
argument_list|,
name|namenode
argument_list|,
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|fullpath
argument_list|,
name|op
operator|.
name|getValue
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|,
name|blockSize
operator|.
name|getValue
argument_list|(
name|conf
argument_list|)
argument_list|,
name|exclDatanodes
operator|.
name|getValue
argument_list|()
argument_list|,
name|permission
argument_list|,
name|unmaskedPermission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|createParent
argument_list|,
name|createFlagParam
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noredirectParam
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|uri
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"Location"
argument_list|,
name|uri
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
case|case
name|MKDIRS
case|:
block|{
name|FsPermission
name|masked
init|=
name|unmaskedPermission
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
name|permission
operator|.
name|getDirFsPermission
argument_list|()
else|:
name|FsCreateModes
operator|.
name|create
argument_list|(
name|permission
operator|.
name|getDirFsPermission
argument_list|()
argument_list|,
name|unmaskedPermission
operator|.
name|getDirFsPermission
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|b
init|=
name|cp
operator|.
name|mkdirs
argument_list|(
name|fullpath
argument_list|,
name|masked
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"boolean"
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|CREATESYMLINK
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|cp
operator|.
name|createSymlink
argument_list|(
name|destination
operator|.
name|getValue
argument_list|()
argument_list|,
name|fullpath
argument_list|,
name|PermissionParam
operator|.
name|getDefaultSymLinkFsPermission
argument_list|()
argument_list|,
name|createParent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|RENAME
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|destination
argument_list|)
expr_stmt|;
specifier|final
name|EnumSet
argument_list|<
name|Options
operator|.
name|Rename
argument_list|>
name|s
init|=
name|renameOptions
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|boolean
name|b
init|=
name|cp
operator|.
name|rename
argument_list|(
name|fullpath
argument_list|,
name|destination
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"boolean"
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|cp
operator|.
name|rename2
argument_list|(
name|fullpath
argument_list|,
name|destination
operator|.
name|getValue
argument_list|()
argument_list|,
name|s
operator|.
name|toArray
argument_list|(
operator|new
name|Options
operator|.
name|Rename
index|[
name|s
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
case|case
name|SETREPLICATION
case|:
block|{
specifier|final
name|boolean
name|b
init|=
name|cp
operator|.
name|setReplication
argument_list|(
name|fullpath
argument_list|,
name|replication
operator|.
name|getValue
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"boolean"
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|SETOWNER
case|:
block|{
if|if
condition|(
name|owner
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|&&
name|group
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Both owner and group are empty."
argument_list|)
throw|;
block|}
name|cp
operator|.
name|setOwner
argument_list|(
name|fullpath
argument_list|,
name|owner
operator|.
name|getValue
argument_list|()
argument_list|,
name|group
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|SETPERMISSION
case|:
block|{
name|cp
operator|.
name|setPermission
argument_list|(
name|fullpath
argument_list|,
name|permission
operator|.
name|getDirFsPermission
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|SETTIMES
case|:
block|{
name|cp
operator|.
name|setTimes
argument_list|(
name|fullpath
argument_list|,
name|modificationTime
operator|.
name|getValue
argument_list|()
argument_list|,
name|accessTime
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|RENEWDELEGATIONTOKEN
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|delegationTokenArgument
argument_list|)
expr_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|delegationTokenArgument
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|expiryTime
init|=
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"long"
argument_list|,
name|expiryTime
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|CANCELDELEGATIONTOKEN
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|delegationTokenArgument
argument_list|)
expr_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|delegationTokenArgument
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|MODIFYACLENTRIES
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|aclPermission
argument_list|)
expr_stmt|;
name|cp
operator|.
name|modifyAclEntries
argument_list|(
name|fullpath
argument_list|,
name|aclPermission
operator|.
name|getAclPermission
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|REMOVEACLENTRIES
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|aclPermission
argument_list|)
expr_stmt|;
name|cp
operator|.
name|removeAclEntries
argument_list|(
name|fullpath
argument_list|,
name|aclPermission
operator|.
name|getAclPermission
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|REMOVEDEFAULTACL
case|:
block|{
name|cp
operator|.
name|removeDefaultAcl
argument_list|(
name|fullpath
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|REMOVEACL
case|:
block|{
name|cp
operator|.
name|removeAcl
argument_list|(
name|fullpath
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|SETACL
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|aclPermission
argument_list|)
expr_stmt|;
name|cp
operator|.
name|setAcl
argument_list|(
name|fullpath
argument_list|,
name|aclPermission
operator|.
name|getAclPermission
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|SETXATTR
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|xattrName
argument_list|,
name|xattrSetFlag
argument_list|)
expr_stmt|;
name|cp
operator|.
name|setXAttr
argument_list|(
name|fullpath
argument_list|,
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|xattrName
operator|.
name|getXAttrName
argument_list|()
argument_list|,
name|xattrValue
operator|.
name|getXAttrValue
argument_list|()
argument_list|)
argument_list|,
name|xattrSetFlag
operator|.
name|getFlag
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|REMOVEXATTR
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|xattrName
argument_list|)
expr_stmt|;
name|cp
operator|.
name|removeXAttr
argument_list|(
name|fullpath
argument_list|,
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|xattrName
operator|.
name|getXAttrName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|ALLOWSNAPSHOT
case|:
block|{
name|cp
operator|.
name|allowSnapshot
argument_list|(
name|fullpath
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|CREATESNAPSHOT
case|:
block|{
name|String
name|snapshotPath
init|=
name|cp
operator|.
name|createSnapshot
argument_list|(
name|fullpath
argument_list|,
name|snapshotName
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|snapshotPath
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|RENAMESNAPSHOT
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|oldSnapshotName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|cp
operator|.
name|renameSnapshot
argument_list|(
name|fullpath
argument_list|,
name|oldSnapshotName
operator|.
name|getValue
argument_list|()
argument_list|,
name|snapshotName
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|DISALLOWSNAPSHOT
case|:
block|{
name|cp
operator|.
name|disallowSnapshot
argument_list|(
name|fullpath
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|SETSTORAGEPOLICY
case|:
block|{
if|if
condition|(
name|policyName
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Storage policy name is empty."
argument_list|)
throw|;
block|}
name|cp
operator|.
name|setStoragePolicy
argument_list|(
name|fullpath
argument_list|,
name|policyName
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|SATISFYSTORAGEPOLICY
case|:
name|cp
operator|.
name|satisfyStoragePolicy
argument_list|(
name|fullpath
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
case|case
name|ENABLEECPOLICY
case|:
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|ecpolicy
argument_list|)
expr_stmt|;
name|cp
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|ecpolicy
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
case|case
name|DISABLEECPOLICY
case|:
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|ecpolicy
argument_list|)
expr_stmt|;
name|cp
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|ecpolicy
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
case|case
name|SETECPOLICY
case|:
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|ecpolicy
argument_list|)
expr_stmt|;
name|cp
operator|.
name|setErasureCodingPolicy
argument_list|(
name|fullpath
argument_list|,
name|ecpolicy
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
comment|/** Handle HTTP POST request for the root. */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|postRoot ( @ontext final UserGroupInformation ugi, @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT) final DelegationParam delegation, @QueryParam(UserParam.NAME) @DefaultValue(UserParam.DEFAULT) final UserParam username, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) final DoAsParam doAsUser, @QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT) final PostOpParam op, @QueryParam(ConcatSourcesParam.NAME) @DefaultValue(ConcatSourcesParam.DEFAULT) final ConcatSourcesParam concatSrcs, @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT) final BufferSizeParam bufferSize, @QueryParam(ExcludeDatanodesParam.NAME) @DefaultValue(ExcludeDatanodesParam.DEFAULT) final ExcludeDatanodesParam excludeDatanodes, @QueryParam(NewLengthParam.NAME) @DefaultValue(NewLengthParam.DEFAULT) final NewLengthParam newLength, @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT) final NoRedirectParam noredirect )
specifier|public
name|Response
name|postRoot
parameter_list|(
annotation|@
name|Context
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DelegationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DelegationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|UserParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|UserParam
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PostOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PostOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|PostOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ConcatSourcesParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ConcatSourcesParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ConcatSourcesParam
name|concatSrcs
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BufferSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BufferSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ExcludeDatanodesParam
name|excludeDatanodes
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|NewLengthParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|NewLengthParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|NewLengthParam
name|newLength
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|NoRedirectParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|NoRedirectParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|NoRedirectParam
name|noredirect
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|post
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|ROOT
argument_list|,
name|op
argument_list|,
name|concatSrcs
argument_list|,
name|bufferSize
argument_list|,
name|excludeDatanodes
argument_list|,
name|newLength
argument_list|,
name|noredirect
argument_list|)
return|;
block|}
comment|/** Handle HTTP POST request. */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"{"
operator|+
name|UriFsPathParam
operator|.
name|NAME
operator|+
literal|":.*}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
block|{
literal|"*/*"
block|}
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|post ( @ontext final UserGroupInformation ugi, @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT) final DelegationParam delegation, @QueryParam(UserParam.NAME) @DefaultValue(UserParam.DEFAULT) final UserParam username, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) final DoAsParam doAsUser, @PathParam(UriFsPathParam.NAME) final UriFsPathParam path, @QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT) final PostOpParam op, @QueryParam(ConcatSourcesParam.NAME) @DefaultValue(ConcatSourcesParam.DEFAULT) final ConcatSourcesParam concatSrcs, @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT) final BufferSizeParam bufferSize, @QueryParam(ExcludeDatanodesParam.NAME) @DefaultValue(ExcludeDatanodesParam.DEFAULT) final ExcludeDatanodesParam excludeDatanodes, @QueryParam(NewLengthParam.NAME) @DefaultValue(NewLengthParam.DEFAULT) final NewLengthParam newLength, @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT) final NoRedirectParam noredirect )
specifier|public
name|Response
name|post
parameter_list|(
annotation|@
name|Context
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DelegationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DelegationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|UserParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|UserParam
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|UriFsPathParam
operator|.
name|NAME
argument_list|)
specifier|final
name|UriFsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|PostOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|PostOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|PostOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ConcatSourcesParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ConcatSourcesParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ConcatSourcesParam
name|concatSrcs
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BufferSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BufferSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ExcludeDatanodesParam
name|excludeDatanodes
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|NewLengthParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|NewLengthParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|NewLengthParam
name|newLength
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|NoRedirectParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|NoRedirectParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|NoRedirectParam
name|noredirect
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|path
argument_list|,
name|op
argument_list|,
name|concatSrcs
argument_list|,
name|bufferSize
argument_list|,
name|excludeDatanodes
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
return|return
name|doAs
argument_list|(
name|ugi
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
return|return
name|post
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|op
argument_list|,
name|concatSrcs
argument_list|,
name|bufferSize
argument_list|,
name|excludeDatanodes
argument_list|,
name|newLength
argument_list|,
name|noredirect
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|post ( final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final String fullpath, final PostOpParam op, final ConcatSourcesParam concatSrcs, final BufferSizeParam bufferSize, final ExcludeDatanodesParam excludeDatanodes, final NewLengthParam newLength, final NoRedirectParam noredirectParam )
specifier|protected
name|Response
name|post
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|String
name|fullpath
parameter_list|,
specifier|final
name|PostOpParam
name|op
parameter_list|,
specifier|final
name|ConcatSourcesParam
name|concatSrcs
parameter_list|,
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
specifier|final
name|ExcludeDatanodesParam
name|excludeDatanodes
parameter_list|,
specifier|final
name|NewLengthParam
name|newLength
parameter_list|,
specifier|final
name|NoRedirectParam
name|noredirectParam
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|ClientProtocol
name|cp
init|=
name|getRpcClientProtocol
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|APPEND
case|:
block|{
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|redirectURI
argument_list|(
literal|null
argument_list|,
name|namenode
argument_list|,
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|fullpath
argument_list|,
name|op
operator|.
name|getValue
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|,
operator|-
literal|1L
argument_list|,
name|excludeDatanodes
operator|.
name|getValue
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noredirectParam
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|uri
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"Location"
argument_list|,
name|uri
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
case|case
name|CONCAT
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|concatSrcs
argument_list|)
expr_stmt|;
name|cp
operator|.
name|concat
argument_list|(
name|fullpath
argument_list|,
name|concatSrcs
operator|.
name|getAbsolutePaths
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|TRUNCATE
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
comment|// We treat each rest request as a separate client.
specifier|final
name|boolean
name|b
init|=
name|cp
operator|.
name|truncate
argument_list|(
name|fullpath
argument_list|,
name|newLength
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"DFSClient_"
operator|+
name|DFSUtil
operator|.
name|getSecureRandom
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"boolean"
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|UNSETSTORAGEPOLICY
case|:
block|{
name|cp
operator|.
name|unsetStoragePolicy
argument_list|(
name|fullpath
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|UNSETECPOLICY
case|:
name|cp
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|fullpath
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
comment|/** Handle HTTP GET request for the root. */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|getRoot ( @ontext final UserGroupInformation ugi, @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT) final DelegationParam delegation, @QueryParam(UserParam.NAME) @DefaultValue(UserParam.DEFAULT) final UserParam username, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) final DoAsParam doAsUser, @QueryParam(GetOpParam.NAME) @DefaultValue(GetOpParam.DEFAULT) final GetOpParam op, @QueryParam(OffsetParam.NAME) @DefaultValue(OffsetParam.DEFAULT) final OffsetParam offset, @QueryParam(LengthParam.NAME) @DefaultValue(LengthParam.DEFAULT) final LengthParam length, @QueryParam(RenewerParam.NAME) @DefaultValue(RenewerParam.DEFAULT) final RenewerParam renewer, @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT) final BufferSizeParam bufferSize, @QueryParam(XAttrNameParam.NAME) @DefaultValue(XAttrNameParam.DEFAULT) final List<XAttrNameParam> xattrNames, @QueryParam(XAttrEncodingParam.NAME) @DefaultValue(XAttrEncodingParam.DEFAULT) final XAttrEncodingParam xattrEncoding, @QueryParam(ExcludeDatanodesParam.NAME) @DefaultValue(ExcludeDatanodesParam.DEFAULT) final ExcludeDatanodesParam excludeDatanodes, @QueryParam(FsActionParam.NAME) @DefaultValue(FsActionParam.DEFAULT) final FsActionParam fsAction, @QueryParam(SnapshotNameParam.NAME) @DefaultValue(SnapshotNameParam.DEFAULT) final SnapshotNameParam snapshotName, @QueryParam(OldSnapshotNameParam.NAME) @DefaultValue(OldSnapshotNameParam.DEFAULT) final OldSnapshotNameParam oldSnapshotName, @QueryParam(TokenKindParam.NAME) @DefaultValue(TokenKindParam.DEFAULT) final TokenKindParam tokenKind, @QueryParam(TokenServiceParam.NAME) @DefaultValue(TokenServiceParam.DEFAULT) final TokenServiceParam tokenService, @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT) final NoRedirectParam noredirect, @QueryParam(StartAfterParam.NAME) @DefaultValue(StartAfterParam.DEFAULT) final StartAfterParam startAfter )
specifier|public
name|Response
name|getRoot
parameter_list|(
annotation|@
name|Context
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DelegationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DelegationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|UserParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|UserParam
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|GetOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|GetOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|GetOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OffsetParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OffsetParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OffsetParam
name|offset
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|LengthParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|LengthParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|LengthParam
name|length
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RenewerParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|RenewerParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|RenewerParam
name|renewer
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BufferSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BufferSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|XAttrNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|XAttrNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|List
argument_list|<
name|XAttrNameParam
argument_list|>
name|xattrNames
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|XAttrEncodingParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|XAttrEncodingParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|XAttrEncodingParam
name|xattrEncoding
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ExcludeDatanodesParam
name|excludeDatanodes
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|FsActionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|FsActionParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|FsActionParam
name|fsAction
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|SnapshotNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|SnapshotNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OldSnapshotNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OldSnapshotNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OldSnapshotNameParam
name|oldSnapshotName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|TokenKindParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|TokenKindParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|TokenKindParam
name|tokenKind
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|TokenServiceParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|TokenServiceParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|TokenServiceParam
name|tokenService
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|NoRedirectParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|NoRedirectParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|NoRedirectParam
name|noredirect
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|StartAfterParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|StartAfterParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|StartAfterParam
name|startAfter
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|get
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|ROOT
argument_list|,
name|op
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|renewer
argument_list|,
name|bufferSize
argument_list|,
name|xattrNames
argument_list|,
name|xattrEncoding
argument_list|,
name|excludeDatanodes
argument_list|,
name|fsAction
argument_list|,
name|snapshotName
argument_list|,
name|oldSnapshotName
argument_list|,
name|tokenKind
argument_list|,
name|tokenService
argument_list|,
name|noredirect
argument_list|,
name|startAfter
argument_list|)
return|;
block|}
comment|/** Handle HTTP GET request. */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"{"
operator|+
name|UriFsPathParam
operator|.
name|NAME
operator|+
literal|":.*}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
DECL|method|get ( @ontext final UserGroupInformation ugi, @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT) final DelegationParam delegation, @QueryParam(UserParam.NAME) @DefaultValue(UserParam.DEFAULT) final UserParam username, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) final DoAsParam doAsUser, @PathParam(UriFsPathParam.NAME) final UriFsPathParam path, @QueryParam(GetOpParam.NAME) @DefaultValue(GetOpParam.DEFAULT) final GetOpParam op, @QueryParam(OffsetParam.NAME) @DefaultValue(OffsetParam.DEFAULT) final OffsetParam offset, @QueryParam(LengthParam.NAME) @DefaultValue(LengthParam.DEFAULT) final LengthParam length, @QueryParam(RenewerParam.NAME) @DefaultValue(RenewerParam.DEFAULT) final RenewerParam renewer, @QueryParam(BufferSizeParam.NAME) @DefaultValue(BufferSizeParam.DEFAULT) final BufferSizeParam bufferSize, @QueryParam(XAttrNameParam.NAME) @DefaultValue(XAttrNameParam.DEFAULT) final List<XAttrNameParam> xattrNames, @QueryParam(XAttrEncodingParam.NAME) @DefaultValue(XAttrEncodingParam.DEFAULT) final XAttrEncodingParam xattrEncoding, @QueryParam(ExcludeDatanodesParam.NAME) @DefaultValue(ExcludeDatanodesParam.DEFAULT) final ExcludeDatanodesParam excludeDatanodes, @QueryParam(FsActionParam.NAME) @DefaultValue(FsActionParam.DEFAULT) final FsActionParam fsAction, @QueryParam(SnapshotNameParam.NAME) @DefaultValue(SnapshotNameParam.DEFAULT) final SnapshotNameParam snapshotName, @QueryParam(OldSnapshotNameParam.NAME) @DefaultValue(OldSnapshotNameParam.DEFAULT) final OldSnapshotNameParam oldSnapshotName, @QueryParam(TokenKindParam.NAME) @DefaultValue(TokenKindParam.DEFAULT) final TokenKindParam tokenKind, @QueryParam(TokenServiceParam.NAME) @DefaultValue(TokenServiceParam.DEFAULT) final TokenServiceParam tokenService, @QueryParam(NoRedirectParam.NAME) @DefaultValue(NoRedirectParam.DEFAULT) final NoRedirectParam noredirect, @QueryParam(StartAfterParam.NAME) @DefaultValue(StartAfterParam.DEFAULT) final StartAfterParam startAfter )
specifier|public
name|Response
name|get
parameter_list|(
annotation|@
name|Context
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DelegationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DelegationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|UserParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|UserParam
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|UriFsPathParam
operator|.
name|NAME
argument_list|)
specifier|final
name|UriFsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|GetOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|GetOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|GetOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OffsetParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OffsetParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OffsetParam
name|offset
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|LengthParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|LengthParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|LengthParam
name|length
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RenewerParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|RenewerParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|RenewerParam
name|renewer
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|BufferSizeParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|BufferSizeParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|XAttrNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|XAttrNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|List
argument_list|<
name|XAttrNameParam
argument_list|>
name|xattrNames
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|XAttrEncodingParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|XAttrEncodingParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|XAttrEncodingParam
name|xattrEncoding
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|ExcludeDatanodesParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|ExcludeDatanodesParam
name|excludeDatanodes
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|FsActionParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|FsActionParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|FsActionParam
name|fsAction
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|SnapshotNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|SnapshotNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|OldSnapshotNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|OldSnapshotNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|OldSnapshotNameParam
name|oldSnapshotName
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|TokenKindParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|TokenKindParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|TokenKindParam
name|tokenKind
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|TokenServiceParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|TokenServiceParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|TokenServiceParam
name|tokenService
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|NoRedirectParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|NoRedirectParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|NoRedirectParam
name|noredirect
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|StartAfterParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|StartAfterParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|StartAfterParam
name|startAfter
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|path
argument_list|,
name|op
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|renewer
argument_list|,
name|bufferSize
argument_list|,
name|xattrEncoding
argument_list|,
name|excludeDatanodes
argument_list|,
name|fsAction
argument_list|,
name|snapshotName
argument_list|,
name|oldSnapshotName
argument_list|,
name|tokenKind
argument_list|,
name|tokenService
argument_list|,
name|startAfter
argument_list|)
expr_stmt|;
return|return
name|doAs
argument_list|(
name|ugi
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|String
name|absolutePath
init|=
name|path
operator|.
name|getAbsolutePath
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|URLDecoder
operator|.
name|decode
argument_list|(
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|absolutePath
argument_list|,
name|op
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|renewer
argument_list|,
name|bufferSize
argument_list|,
name|xattrNames
argument_list|,
name|xattrEncoding
argument_list|,
name|excludeDatanodes
argument_list|,
name|fsAction
argument_list|,
name|snapshotName
argument_list|,
name|oldSnapshotName
argument_list|,
name|tokenKind
argument_list|,
name|tokenService
argument_list|,
name|noredirect
argument_list|,
name|startAfter
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|encodeFeInfo (FileEncryptionInfo feInfo)
specifier|private
specifier|static
name|String
name|encodeFeInfo
parameter_list|(
name|FileEncryptionInfo
name|feInfo
parameter_list|)
block|{
name|Encoder
name|encoder
init|=
name|Base64
operator|.
name|getEncoder
argument_list|()
decl_stmt|;
name|String
name|encodedValue
init|=
name|encoder
operator|.
name|encodeToString
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|feInfo
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|encodedValue
return|;
block|}
DECL|method|get ( final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final String fullpath, final GetOpParam op, final OffsetParam offset, final LengthParam length, final RenewerParam renewer, final BufferSizeParam bufferSize, final List<XAttrNameParam> xattrNames, final XAttrEncodingParam xattrEncoding, final ExcludeDatanodesParam excludeDatanodes, final FsActionParam fsAction, final SnapshotNameParam snapshotName, final OldSnapshotNameParam oldSnapshotName, final TokenKindParam tokenKind, final TokenServiceParam tokenService, final NoRedirectParam noredirectParam, final StartAfterParam startAfter )
specifier|protected
name|Response
name|get
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|String
name|fullpath
parameter_list|,
specifier|final
name|GetOpParam
name|op
parameter_list|,
specifier|final
name|OffsetParam
name|offset
parameter_list|,
specifier|final
name|LengthParam
name|length
parameter_list|,
specifier|final
name|RenewerParam
name|renewer
parameter_list|,
specifier|final
name|BufferSizeParam
name|bufferSize
parameter_list|,
specifier|final
name|List
argument_list|<
name|XAttrNameParam
argument_list|>
name|xattrNames
parameter_list|,
specifier|final
name|XAttrEncodingParam
name|xattrEncoding
parameter_list|,
specifier|final
name|ExcludeDatanodesParam
name|excludeDatanodes
parameter_list|,
specifier|final
name|FsActionParam
name|fsAction
parameter_list|,
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|,
specifier|final
name|OldSnapshotNameParam
name|oldSnapshotName
parameter_list|,
specifier|final
name|TokenKindParam
name|tokenKind
parameter_list|,
specifier|final
name|TokenServiceParam
name|tokenService
parameter_list|,
specifier|final
name|NoRedirectParam
name|noredirectParam
parameter_list|,
specifier|final
name|StartAfterParam
name|startAfter
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|(
name|Configuration
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
decl_stmt|;
specifier|final
name|ClientProtocol
name|cp
init|=
name|getRpcClientProtocol
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|OPEN
case|:
block|{
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|noContent
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|redirectURI
argument_list|(
name|rb
argument_list|,
name|namenode
argument_list|,
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|fullpath
argument_list|,
name|op
operator|.
name|getValue
argument_list|()
argument_list|,
name|offset
operator|.
name|getValue
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|,
name|excludeDatanodes
operator|.
name|getValue
argument_list|()
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noredirectParam
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|rb
operator|.
name|status
argument_list|(
name|Status
operator|.
name|TEMPORARY_REDIRECT
argument_list|)
operator|.
name|location
argument_list|(
name|uri
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"Location"
argument_list|,
name|uri
argument_list|)
decl_stmt|;
return|return
name|rb
operator|.
name|status
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|entity
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
case|case
name|GETFILEBLOCKLOCATIONS
case|:
block|{
specifier|final
name|long
name|offsetValue
init|=
name|offset
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Long
name|lengthValue
init|=
name|length
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|getRpcClientProtocol
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|fullpath
argument_list|,
name|offsetValue
argument_list|,
name|lengthValue
operator|!=
literal|null
condition|?
name|lengthValue
else|:
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|DFSUtilClient
operator|.
name|locatedBlocks2Locations
argument_list|(
name|locatedBlocks
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|locations
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GET_BLOCK_LOCATIONS
case|:
block|{
specifier|final
name|long
name|offsetValue
init|=
name|offset
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Long
name|lengthValue
init|=
name|length
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|LocatedBlocks
name|locatedblocks
init|=
name|cp
operator|.
name|getBlockLocations
argument_list|(
name|fullpath
argument_list|,
name|offsetValue
argument_list|,
name|lengthValue
operator|!=
literal|null
condition|?
name|lengthValue
else|:
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|locatedblocks
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETFILESTATUS
case|:
block|{
specifier|final
name|HdfsFileStatus
name|status
init|=
name|cp
operator|.
name|getFileInfo
argument_list|(
name|fullpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|fullpath
argument_list|)
throw|;
block|}
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|status
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|LISTSTATUS
case|:
block|{
specifier|final
name|StreamingOutput
name|streaming
init|=
name|getListingStream
argument_list|(
name|cp
argument_list|,
name|fullpath
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|streaming
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETCONTENTSUMMARY
case|:
block|{
specifier|final
name|ContentSummary
name|contentsummary
init|=
name|cp
operator|.
name|getContentSummary
argument_list|(
name|fullpath
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|contentsummary
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETFILECHECKSUM
case|:
block|{
specifier|final
name|NameNode
name|namenode
init|=
operator|(
name|NameNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"name.node"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|uri
init|=
name|redirectURI
argument_list|(
literal|null
argument_list|,
name|namenode
argument_list|,
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|fullpath
argument_list|,
name|op
operator|.
name|getValue
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|,
operator|-
literal|1L
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|noredirectParam
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|temporaryRedirect
argument_list|(
name|uri
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"Location"
argument_list|,
name|uri
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
case|case
name|GETDELEGATIONTOKEN
case|:
block|{
if|if
condition|(
name|delegation
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|delegation
operator|.
name|getName
argument_list|()
operator|+
literal|" parameter is not null."
argument_list|)
throw|;
block|}
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
init|=
name|generateDelegationToken
argument_list|(
name|ugi
argument_list|,
name|renewer
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|setServiceName
init|=
name|tokenService
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|setKind
init|=
name|tokenKind
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|setServiceName
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
name|setServiceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|setKind
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setKind
argument_list|(
operator|new
name|Text
argument_list|(
name|setKind
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|token
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETHOMEDIRECTORY
case|:
block|{
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"Path"
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
operator|!=
literal|null
condition|?
name|conf
else|:
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|getHomeDirectory
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETACLSTATUS
case|:
block|{
name|AclStatus
name|status
init|=
name|cp
operator|.
name|getAclStatus
argument_list|(
name|fullpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|fullpath
argument_list|)
throw|;
block|}
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|status
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETXATTRS
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|xattrEncoding
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|xattrNames
operator|!=
literal|null
condition|)
block|{
name|names
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|xattrNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XAttrNameParam
name|xattrName
range|:
name|xattrNames
control|)
block|{
if|if
condition|(
name|xattrName
operator|.
name|getXAttrName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|xattrName
operator|.
name|getXAttrName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|cp
operator|.
name|getXAttrs
argument_list|(
name|fullpath
argument_list|,
operator|(
name|names
operator|!=
literal|null
operator|&&
operator|!
name|names
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|XAttrHelper
operator|.
name|buildXAttrs
argument_list|(
name|names
argument_list|)
else|:
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|xAttrs
argument_list|,
name|xattrEncoding
operator|.
name|getEncoding
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|LISTXATTRS
case|:
block|{
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|cp
operator|.
name|listXAttrs
argument_list|(
name|fullpath
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|xAttrs
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|CHECKACCESS
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|fsAction
argument_list|)
expr_stmt|;
name|cp
operator|.
name|checkAccess
argument_list|(
name|fullpath
argument_list|,
name|FsAction
operator|.
name|getFsAction
argument_list|(
name|fsAction
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETTRASHROOT
case|:
block|{
specifier|final
name|String
name|trashPath
init|=
name|getTrashRoot
argument_list|(
name|fullpath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|jsonStr
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"Path"
argument_list|,
name|trashPath
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|jsonStr
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|LISTSTATUS_BATCH
case|:
block|{
name|byte
index|[]
name|start
init|=
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
decl_stmt|;
if|if
condition|(
name|startAfter
operator|!=
literal|null
operator|&&
name|startAfter
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|start
operator|=
name|startAfter
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DirectoryListing
name|listing
init|=
name|getDirectoryListing
argument_list|(
name|cp
argument_list|,
name|fullpath
argument_list|,
name|start
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|listing
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETALLSTORAGEPOLICY
case|:
block|{
name|BlockStoragePolicy
index|[]
name|storagePolicies
init|=
name|cp
operator|.
name|getStoragePolicies
argument_list|()
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|storagePolicies
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETSTORAGEPOLICY
case|:
block|{
name|BlockStoragePolicy
name|storagePolicy
init|=
name|cp
operator|.
name|getStoragePolicy
argument_list|(
name|fullpath
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|storagePolicy
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETECPOLICY
case|:
block|{
name|ErasureCodingPolicy
name|ecpolicy
init|=
name|cp
operator|.
name|getErasureCodingPolicy
argument_list|(
name|fullpath
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|ecpolicy
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETSERVERDEFAULTS
case|:
block|{
comment|// Since none of the server defaults values are hot reloaded, we can
comment|// cache the output of serverDefaults.
name|String
name|serverDefaultsResponse
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"serverDefaults"
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverDefaultsResponse
operator|==
literal|null
condition|)
block|{
name|FsServerDefaults
name|serverDefaults
init|=
name|cp
operator|.
name|getServerDefaults
argument_list|()
decl_stmt|;
name|serverDefaultsResponse
operator|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|serverDefaults
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
literal|"serverDefaults"
argument_list|,
name|serverDefaultsResponse
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|serverDefaultsResponse
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETSNAPSHOTDIFF
case|:
block|{
name|SnapshotDiffReport
name|diffReport
init|=
name|cp
operator|.
name|getSnapshotDiffReport
argument_list|(
name|fullpath
argument_list|,
name|oldSnapshotName
operator|.
name|getValue
argument_list|()
argument_list|,
name|snapshotName
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|diffReport
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|GETSNAPSHOTTABLEDIRECTORYLIST
case|:
block|{
name|SnapshottableDirectoryStatus
index|[]
name|snapshottableDirectoryList
init|=
name|cp
operator|.
name|getSnapshottableDirListing
argument_list|()
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|snapshottableDirectoryList
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
DECL|method|getTrashRoot (String fullPath, Configuration conf)
specifier|private
specifier|static
name|String
name|getTrashRoot
parameter_list|(
name|String
name|fullPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
operator|!=
literal|null
condition|?
name|conf
else|:
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|getTrashRoot
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|fullPath
argument_list|)
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
DECL|method|getDirectoryListing (final ClientProtocol cp, final String p, byte[] startAfter)
specifier|private
specifier|static
name|DirectoryListing
name|getDirectoryListing
parameter_list|(
specifier|final
name|ClientProtocol
name|cp
parameter_list|,
specifier|final
name|String
name|p
parameter_list|,
name|byte
index|[]
name|startAfter
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DirectoryListing
name|listing
init|=
name|cp
operator|.
name|getListing
argument_list|(
name|p
argument_list|,
name|startAfter
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|listing
operator|==
literal|null
condition|)
block|{
comment|// the directory does not exist
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|p
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
return|return
name|listing
return|;
block|}
DECL|method|getListingStream (final ClientProtocol cp, final String p)
specifier|private
specifier|static
name|StreamingOutput
name|getListingStream
parameter_list|(
specifier|final
name|ClientProtocol
name|cp
parameter_list|,
specifier|final
name|String
name|p
parameter_list|)
throws|throws
name|IOException
block|{
comment|// allows exceptions like FNF or ACE to prevent http response of 200 for
comment|// a failure since we can't (currently) return error responses in the
comment|// middle of a streaming operation
specifier|final
name|DirectoryListing
name|firstDirList
init|=
name|getDirectoryListing
argument_list|(
name|cp
argument_list|,
name|p
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
decl_stmt|;
comment|// must save ugi because the streaming object will be executed outside
comment|// the remote user's ugi
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
return|return
operator|new
name|StreamingOutput
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|OutputStream
name|outstream
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|outstream
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"{\""
operator|+
name|FileStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"es\":{\""
operator|+
name|FileStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"\":["
argument_list|)
expr_stmt|;
try|try
block|{
comment|// restore remote user's ugi
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DirectoryListing
name|dirList
init|=
name|firstDirList
init|;
condition|;
name|dirList
operator|=
name|getDirectoryListing
argument_list|(
name|cp
argument_list|,
name|p
argument_list|,
name|dirList
operator|.
name|getLastName
argument_list|()
argument_list|)
control|)
block|{
comment|// send each segment of the directory listing
for|for
control|(
name|HdfsFileStatus
name|s
range|:
name|dirList
operator|.
name|getPartialListing
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|++
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|s
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// stop if last segment
if|if
condition|(
operator|!
name|dirList
operator|.
name|hasMore
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"]}}"
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/** Handle HTTP DELETE request for the root. */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|deleteRoot ( @ontext final UserGroupInformation ugi, @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT) final DelegationParam delegation, @QueryParam(UserParam.NAME) @DefaultValue(UserParam.DEFAULT) final UserParam username, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) final DoAsParam doAsUser, @QueryParam(DeleteOpParam.NAME) @DefaultValue(DeleteOpParam.DEFAULT) final DeleteOpParam op, @QueryParam(RecursiveParam.NAME) @DefaultValue(RecursiveParam.DEFAULT) final RecursiveParam recursive, @QueryParam(SnapshotNameParam.NAME) @DefaultValue(SnapshotNameParam.DEFAULT) final SnapshotNameParam snapshotName )
specifier|public
name|Response
name|deleteRoot
parameter_list|(
annotation|@
name|Context
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DelegationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DelegationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|UserParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|UserParam
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DeleteOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DeleteOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DeleteOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RecursiveParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|RecursiveParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|RecursiveParam
name|recursive
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|SnapshotNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|SnapshotNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|delete
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|ROOT
argument_list|,
name|op
argument_list|,
name|recursive
argument_list|,
name|snapshotName
argument_list|)
return|;
block|}
comment|/** Handle HTTP DELETE request. */
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"{"
operator|+
name|UriFsPathParam
operator|.
name|NAME
operator|+
literal|":.*}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|)
DECL|method|delete ( @ontext final UserGroupInformation ugi, @QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT) final DelegationParam delegation, @QueryParam(UserParam.NAME) @DefaultValue(UserParam.DEFAULT) final UserParam username, @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) final DoAsParam doAsUser, @PathParam(UriFsPathParam.NAME) final UriFsPathParam path, @QueryParam(DeleteOpParam.NAME) @DefaultValue(DeleteOpParam.DEFAULT) final DeleteOpParam op, @QueryParam(RecursiveParam.NAME) @DefaultValue(RecursiveParam.DEFAULT) final RecursiveParam recursive, @QueryParam(SnapshotNameParam.NAME) @DefaultValue(SnapshotNameParam.DEFAULT) final SnapshotNameParam snapshotName )
specifier|public
name|Response
name|delete
parameter_list|(
annotation|@
name|Context
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DelegationParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DelegationParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|UserParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|UserParam
name|username
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DoAsParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|UriFsPathParam
operator|.
name|NAME
argument_list|)
specifier|final
name|UriFsPathParam
name|path
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|DeleteOpParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|DeleteOpParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|DeleteOpParam
name|op
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|RecursiveParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|RecursiveParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|RecursiveParam
name|recursive
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|SnapshotNameParam
operator|.
name|NAME
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
name|SnapshotNameParam
operator|.
name|DEFAULT
argument_list|)
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|init
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|path
argument_list|,
name|op
argument_list|,
name|recursive
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
return|return
name|doAs
argument_list|(
name|ugi
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|delete
argument_list|(
name|ugi
argument_list|,
name|delegation
argument_list|,
name|username
argument_list|,
name|doAsUser
argument_list|,
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|op
argument_list|,
name|recursive
argument_list|,
name|snapshotName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|delete ( final UserGroupInformation ugi, final DelegationParam delegation, final UserParam username, final DoAsParam doAsUser, final String fullpath, final DeleteOpParam op, final RecursiveParam recursive, final SnapshotNameParam snapshotName )
specifier|protected
name|Response
name|delete
parameter_list|(
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|DelegationParam
name|delegation
parameter_list|,
specifier|final
name|UserParam
name|username
parameter_list|,
specifier|final
name|DoAsParam
name|doAsUser
parameter_list|,
specifier|final
name|String
name|fullpath
parameter_list|,
specifier|final
name|DeleteOpParam
name|op
parameter_list|,
specifier|final
name|RecursiveParam
name|recursive
parameter_list|,
specifier|final
name|SnapshotNameParam
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ClientProtocol
name|cp
init|=
name|getRpcClientProtocol
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|DELETE
case|:
block|{
specifier|final
name|boolean
name|b
init|=
name|cp
operator|.
name|delete
argument_list|(
name|fullpath
argument_list|,
name|recursive
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|js
init|=
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
literal|"boolean"
argument_list|,
name|b
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|js
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
case|case
name|DELETESNAPSHOT
case|:
block|{
name|validateOpParams
argument_list|(
name|op
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|cp
operator|.
name|deleteSnapshot
argument_list|(
name|fullpath
argument_list|,
name|snapshotName
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|op
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

