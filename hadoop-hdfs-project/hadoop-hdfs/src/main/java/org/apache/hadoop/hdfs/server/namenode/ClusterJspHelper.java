begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
operator|.
name|ConfiguredNNAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|znerd
operator|.
name|xmlenc
operator|.
name|XMLOutputter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * This class generates the data that is needed to be displayed on cluster web   * console.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ClusterJspHelper
class|class
name|ClusterJspHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClusterJspHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|OVERALL_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|OVERALL_STATUS
init|=
literal|"overall-status"
decl_stmt|;
DECL|field|DEAD
specifier|public
specifier|static
specifier|final
name|String
name|DEAD
init|=
literal|"Dead"
decl_stmt|;
DECL|field|JMX_QRY
specifier|private
specifier|static
specifier|final
name|String
name|JMX_QRY
init|=
literal|"/jmx?qry=Hadoop:service=NameNode,name=NameNodeInfo"
decl_stmt|;
comment|/**    * JSP helper function that generates cluster health report.  When     * encountering exception while getting Namenode status, the exception will     * be listed on the page with corresponding stack trace.    */
DECL|method|generateClusterHealthReport ()
name|ClusterStatus
name|generateClusterHealthReport
parameter_list|()
block|{
name|ClusterStatus
name|cs
init|=
operator|new
name|ClusterStatus
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ConfiguredNNAddress
argument_list|>
name|nns
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nns
operator|=
name|DFSUtil
operator|.
name|flattenAddressMap
argument_list|(
name|DFSUtil
operator|.
name|getNNServiceRpcAddresses
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Could not build cluster status
name|cs
operator|.
name|setError
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|cs
return|;
block|}
comment|// Process each namenode and add it to ClusterStatus
for|for
control|(
name|ConfiguredNNAddress
name|cnn
range|:
name|nns
control|)
block|{
name|InetSocketAddress
name|isa
init|=
name|cnn
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|NamenodeMXBeanHelper
name|nnHelper
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nnHelper
operator|=
operator|new
name|NamenodeMXBeanHelper
argument_list|(
name|isa
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|mbeanProps
init|=
name|queryMbean
argument_list|(
name|nnHelper
operator|.
name|httpAddress
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|NamenodeStatus
name|nn
init|=
name|nnHelper
operator|.
name|getNamenodeStatus
argument_list|(
name|mbeanProps
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|.
name|clusterid
operator|.
name|isEmpty
argument_list|()
operator|||
name|cs
operator|.
name|clusterid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// Set clusterid only once
name|cs
operator|.
name|clusterid
operator|=
name|nnHelper
operator|.
name|getClusterId
argument_list|(
name|mbeanProps
argument_list|)
expr_stmt|;
block|}
name|cs
operator|.
name|addNamenodeStatus
argument_list|(
name|nn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// track exceptions encountered when connecting to namenodes
name|cs
operator|.
name|addException
argument_list|(
name|isa
operator|.
name|getHostName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|cs
return|;
block|}
comment|/**    * Helper function that generates the decommissioning report.  Connect to each    * Namenode over http via JmxJsonServlet to collect the data nodes status.    */
DECL|method|generateDecommissioningReport ()
name|DecommissionStatus
name|generateDecommissioningReport
parameter_list|()
block|{
name|String
name|clusterid
init|=
literal|""
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ConfiguredNNAddress
argument_list|>
name|cnns
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cnns
operator|=
name|DFSUtil
operator|.
name|flattenAddressMap
argument_list|(
name|DFSUtil
operator|.
name|getNNServiceRpcAddresses
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// catch any exception encountered other than connecting to namenodes
name|DecommissionStatus
name|dInfo
init|=
operator|new
name|DecommissionStatus
argument_list|(
name|clusterid
argument_list|,
name|e
argument_list|)
decl_stmt|;
return|return
name|dInfo
return|;
block|}
comment|// Outer map key is datanode. Inner map key is namenode and the value is
comment|// decom status of the datanode for the corresponding namenode
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Map of exceptions encountered when connecting to namenode
comment|// key is namenode and value is exception
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|decommissionExceptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unreportedNamenode
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ConfiguredNNAddress
name|cnn
range|:
name|cnns
control|)
block|{
name|InetSocketAddress
name|isa
init|=
name|cnn
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|NamenodeMXBeanHelper
name|nnHelper
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nnHelper
operator|=
operator|new
name|NamenodeMXBeanHelper
argument_list|(
name|isa
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|mbeanProps
init|=
name|queryMbean
argument_list|(
name|nnHelper
operator|.
name|httpAddress
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterid
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|clusterid
operator|=
name|nnHelper
operator|.
name|getClusterId
argument_list|(
name|mbeanProps
argument_list|)
expr_stmt|;
block|}
name|nnHelper
operator|.
name|getDecomNodeInfoForReport
argument_list|(
name|statusMap
argument_list|,
name|mbeanProps
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// catch exceptions encountered while connecting to namenodes
name|String
name|nnHost
init|=
name|isa
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|decommissionExceptions
operator|.
name|put
argument_list|(
name|nnHost
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|unreportedNamenode
operator|.
name|add
argument_list|(
name|nnHost
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|updateUnknownStatus
argument_list|(
name|statusMap
argument_list|,
name|unreportedNamenode
argument_list|)
expr_stmt|;
name|getDecommissionNodeClusterState
argument_list|(
name|statusMap
argument_list|)
expr_stmt|;
return|return
operator|new
name|DecommissionStatus
argument_list|(
name|statusMap
argument_list|,
name|clusterid
argument_list|,
name|getDatanodeHttpPort
argument_list|(
name|conf
argument_list|)
argument_list|,
name|decommissionExceptions
argument_list|)
return|;
block|}
comment|/**    * Based on the state of the datanode at each namenode, marks the overall    * state of the datanode across all the namenodes, to one of the following:    *<ol>    *<li>{@link DecommissionStates#DECOMMISSIONED}</li>    *<li>{@link DecommissionStates#DECOMMISSION_INPROGRESS}</li>    *<li>{@link DecommissionStates#PARTIALLY_DECOMMISSIONED}</li>    *<li>{@link DecommissionStates#UNKNOWN}</li>    *</ol>    *     * @param statusMap    *          map whose key is datanode, value is an inner map with key being    *          namenode, value being decommission state.    */
DECL|method|getDecommissionNodeClusterState ( Map<String, Map<String, String>> statusMap)
specifier|private
name|void
name|getDecommissionNodeClusterState
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
parameter_list|)
block|{
if|if
condition|(
name|statusMap
operator|==
literal|null
operator|||
name|statusMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// For each datanodes
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|it
init|=
name|statusMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// Map entry for a datanode:
comment|// key is namenode, value is datanode status at the namenode
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nnStatus
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nnStatus
operator|==
literal|null
operator|||
name|nnStatus
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|boolean
name|isUnknown
init|=
literal|false
decl_stmt|;
name|int
name|unknown
init|=
literal|0
decl_stmt|;
name|int
name|decommissioned
init|=
literal|0
decl_stmt|;
name|int
name|decomInProg
init|=
literal|0
decl_stmt|;
name|int
name|inservice
init|=
literal|0
decl_stmt|;
name|int
name|dead
init|=
literal|0
decl_stmt|;
name|DecommissionStates
name|overallState
init|=
name|DecommissionStates
operator|.
name|UNKNOWN
decl_stmt|;
comment|// Process a datanode state from each namenode
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
range|:
name|nnStatus
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|status
init|=
name|m
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|DecommissionStates
operator|.
name|UNKNOWN
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|isUnknown
operator|=
literal|true
expr_stmt|;
name|unknown
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|decomInProg
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|AdminStates
operator|.
name|DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|decommissioned
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|AdminStates
operator|.
name|NORMAL
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|inservice
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|DEAD
argument_list|)
condition|)
block|{
comment|// dead
name|dead
operator|++
expr_stmt|;
block|}
block|}
comment|// Consolidate all the states from namenode in to overall state
name|int
name|nns
init|=
name|nnStatus
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|inservice
operator|+
name|dead
operator|+
name|unknown
operator|)
operator|==
name|nns
condition|)
block|{
comment|// Do not display this data node. Remove this entry from status map.
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isUnknown
condition|)
block|{
name|overallState
operator|=
name|DecommissionStates
operator|.
name|UNKNOWN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|decommissioned
operator|==
name|nns
condition|)
block|{
name|overallState
operator|=
name|DecommissionStates
operator|.
name|DECOMMISSIONED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|decommissioned
operator|+
name|decomInProg
operator|)
operator|==
name|nns
condition|)
block|{
name|overallState
operator|=
name|DecommissionStates
operator|.
name|DECOMMISSION_INPROGRESS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|decommissioned
operator|+
name|decomInProg
operator|<
name|nns
operator|)
operator|&&
operator|(
name|decommissioned
operator|+
name|decomInProg
operator|>
literal|0
operator|)
condition|)
block|{
name|overallState
operator|=
name|DecommissionStates
operator|.
name|PARTIALLY_DECOMMISSIONED
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cluster console encounters a not handled situtation."
argument_list|)
expr_stmt|;
block|}
comment|// insert overall state
name|nnStatus
operator|.
name|put
argument_list|(
name|OVERALL_STATUS
argument_list|,
name|overallState
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * update unknown status in datanode status map for every unreported namenode    */
DECL|method|updateUnknownStatus (Map<String, Map<String, String>> statusMap, List<String> unreportedNn)
specifier|private
name|void
name|updateUnknownStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|unreportedNn
parameter_list|)
block|{
if|if
condition|(
name|unreportedNn
operator|==
literal|null
operator|||
name|unreportedNn
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no unreported namenodes
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|statusMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|dn
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nnStatus
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nn
range|:
name|unreportedNn
control|)
block|{
name|nnStatus
operator|.
name|put
argument_list|(
name|nn
argument_list|,
name|DecommissionStates
operator|.
name|UNKNOWN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|statusMap
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|nnStatus
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get datanode http port from configration    */
DECL|method|getDatanodeHttpPort (Configuration conf)
specifier|private
name|int
name|getDatanodeHttpPort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|address
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HTTP_ADDRESS_KEY
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|address
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
return|;
block|}
comment|/**    * Class for connecting to Namenode over http via JmxJsonServlet     * to get JMX attributes exposed by the MXBean.      */
DECL|class|NamenodeMXBeanHelper
specifier|static
class|class
name|NamenodeMXBeanHelper
block|{
DECL|field|mapper
specifier|private
specifier|static
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
DECL|field|host
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|httpAddress
specifier|private
specifier|final
name|URI
name|httpAddress
decl_stmt|;
DECL|method|NamenodeMXBeanHelper (InetSocketAddress addr, Configuration conf)
name|NamenodeMXBeanHelper
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|MalformedObjectNameException
block|{
name|this
operator|.
name|host
operator|=
name|addr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|this
operator|.
name|httpAddress
operator|=
name|DFSUtil
operator|.
name|getInfoServer
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|,
name|DFSUtil
operator|.
name|getHttpClientScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Get the map corresponding to the JSON string */
DECL|method|getNodeMap (String json)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getNodeMap
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|TypeReference
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|type
init|=
operator|new
name|TypeReference
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{ }
decl_stmt|;
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Get the number of live datanodes.      *       * @param json JSON string that contains live node status.      * @param nn namenode status to return information in      */
DECL|method|getLiveNodeCount (String json, NamenodeStatus nn)
specifier|private
specifier|static
name|void
name|getLiveNodeCount
parameter_list|(
name|String
name|json
parameter_list|,
name|NamenodeStatus
name|nn
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Map of datanode host to (map of attribute name to value)
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|nodeMap
init|=
name|getNodeMap
argument_list|(
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeMap
operator|==
literal|null
operator|||
name|nodeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|nn
operator|.
name|liveDatanodeCount
operator|=
name|nodeMap
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|nodeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Inner map of attribute name to value
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerMap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|innerMap
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|innerMap
operator|.
name|get
argument_list|(
literal|"adminState"
argument_list|)
operator|.
name|equals
argument_list|(
name|AdminStates
operator|.
name|DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|nn
operator|.
name|liveDecomCount
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Count the number of dead datanode.      *       * @param nn namenode      * @param json JSON string      */
DECL|method|getDeadNodeCount (String json, NamenodeStatus nn)
specifier|private
specifier|static
name|void
name|getDeadNodeCount
parameter_list|(
name|String
name|json
parameter_list|,
name|NamenodeStatus
name|nn
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|nodeMap
init|=
name|getNodeMap
argument_list|(
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeMap
operator|==
literal|null
operator|||
name|nodeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|nn
operator|.
name|deadDatanodeCount
operator|=
name|nodeMap
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|nodeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerMap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|innerMap
operator|!=
literal|null
operator|&&
operator|!
name|innerMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Boolean
operator|)
name|innerMap
operator|.
name|get
argument_list|(
literal|"decommissioned"
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|==
literal|true
condition|)
block|{
name|nn
operator|.
name|deadDecomCount
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getClusterId (String props)
specifier|public
name|String
name|getClusterId
parameter_list|(
name|String
name|props
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"ClusterId"
argument_list|)
operator|.
name|getTextValue
argument_list|()
return|;
block|}
DECL|method|getNamenodeStatus (String props)
specifier|public
name|NamenodeStatus
name|getNamenodeStatus
parameter_list|(
name|String
name|props
parameter_list|)
throws|throws
name|IOException
throws|,
name|MalformedObjectNameException
throws|,
name|NumberFormatException
block|{
name|NamenodeStatus
name|nn
init|=
operator|new
name|NamenodeStatus
argument_list|()
decl_stmt|;
name|nn
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|nn
operator|.
name|filesAndDirectories
operator|=
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"TotalFiles"
argument_list|)
operator|.
name|getLongValue
argument_list|()
expr_stmt|;
name|nn
operator|.
name|capacity
operator|=
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"Total"
argument_list|)
operator|.
name|getLongValue
argument_list|()
expr_stmt|;
name|nn
operator|.
name|free
operator|=
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"Free"
argument_list|)
operator|.
name|getLongValue
argument_list|()
expr_stmt|;
name|nn
operator|.
name|bpUsed
operator|=
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"BlockPoolUsedSpace"
argument_list|)
operator|.
name|getLongValue
argument_list|()
expr_stmt|;
name|nn
operator|.
name|nonDfsUsed
operator|=
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"NonDfsUsedSpace"
argument_list|)
operator|.
name|getLongValue
argument_list|()
expr_stmt|;
name|nn
operator|.
name|blocksCount
operator|=
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"TotalBlocks"
argument_list|)
operator|.
name|getLongValue
argument_list|()
expr_stmt|;
name|nn
operator|.
name|missingBlocksCount
operator|=
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"NumberOfMissingBlocks"
argument_list|)
operator|.
name|getLongValue
argument_list|()
expr_stmt|;
name|nn
operator|.
name|httpAddress
operator|=
name|httpAddress
operator|.
name|toURL
argument_list|()
expr_stmt|;
name|getLiveNodeCount
argument_list|(
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"LiveNodes"
argument_list|)
operator|.
name|getValueAsText
argument_list|()
argument_list|,
name|nn
argument_list|)
expr_stmt|;
name|getDeadNodeCount
argument_list|(
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"DeadNodes"
argument_list|)
operator|.
name|getValueAsText
argument_list|()
argument_list|,
name|nn
argument_list|)
expr_stmt|;
name|nn
operator|.
name|softwareVersion
operator|=
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"SoftwareVersion"
argument_list|)
operator|.
name|getTextValue
argument_list|()
expr_stmt|;
return|return
name|nn
return|;
block|}
comment|/**      * Get the decommission node information.      * @param statusMap data node status map      * @param props string      */
DECL|method|getDecomNodeInfoForReport ( Map<String, Map<String, String>> statusMap, String props)
specifier|private
name|void
name|getDecomNodeInfoForReport
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
parameter_list|,
name|String
name|props
parameter_list|)
throws|throws
name|IOException
throws|,
name|MalformedObjectNameException
block|{
name|getLiveNodeStatus
argument_list|(
name|statusMap
argument_list|,
name|host
argument_list|,
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"LiveNodes"
argument_list|)
operator|.
name|getValueAsText
argument_list|()
argument_list|)
expr_stmt|;
name|getDeadNodeStatus
argument_list|(
name|statusMap
argument_list|,
name|host
argument_list|,
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"DeadNodes"
argument_list|)
operator|.
name|getValueAsText
argument_list|()
argument_list|)
expr_stmt|;
name|getDecommissionNodeStatus
argument_list|(
name|statusMap
argument_list|,
name|host
argument_list|,
name|getProperty
argument_list|(
name|props
argument_list|,
literal|"DecomNodes"
argument_list|)
operator|.
name|getValueAsText
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Store the live datanode status information into datanode status map and      * DecommissionNode.      *       * @param statusMap Map of datanode status. Key is datanode, value      *          is an inner map whose key is namenode, value is datanode status.      *          reported by each namenode.      * @param namenodeHost host name of the namenode      * @param decomnode update DecommissionNode with alive node status      * @param json JSON string contains datanode status      * @throws IOException      */
DECL|method|getLiveNodeStatus ( Map<String, Map<String, String>> statusMap, String namenodeHost, String json)
specifier|private
specifier|static
name|void
name|getLiveNodeStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
parameter_list|,
name|String
name|namenodeHost
parameter_list|,
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|nodeMap
init|=
name|getNodeMap
argument_list|(
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeMap
operator|!=
literal|null
operator|&&
operator|!
name|nodeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|liveDecommed
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|nodeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerMap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|dn
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|innerMap
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|innerMap
operator|.
name|get
argument_list|(
literal|"adminState"
argument_list|)
operator|.
name|equals
argument_list|(
name|AdminStates
operator|.
name|DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|liveDecommed
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
comment|// the inner map key is namenode, value is datanode status.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nnStatus
init|=
name|statusMap
operator|.
name|get
argument_list|(
name|dn
argument_list|)
decl_stmt|;
if|if
condition|(
name|nnStatus
operator|==
literal|null
condition|)
block|{
name|nnStatus
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|nnStatus
operator|.
name|put
argument_list|(
name|namenodeHost
argument_list|,
operator|(
name|String
operator|)
name|innerMap
operator|.
name|get
argument_list|(
literal|"adminState"
argument_list|)
argument_list|)
expr_stmt|;
comment|// map whose key is datanode, value is the inner map.
name|statusMap
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|nnStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Store the dead datanode information into datanode status map and      * DecommissionNode.      *       * @param statusMap map with key being datanode, value being an      *          inner map (key:namenode, value:decommisionning state).      * @param host datanode hostname      * @param decomnode DecommissionNode      * @param json String      * @throws IOException      */
DECL|method|getDeadNodeStatus ( Map<String, Map<String, String>> statusMap, String host, String json)
specifier|private
specifier|static
name|void
name|getDeadNodeStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|nodeMap
init|=
name|getNodeMap
argument_list|(
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeMap
operator|==
literal|null
operator|||
name|nodeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|deadDn
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deadDecommed
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|nodeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|deadDn
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|deadNodeDetailMap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|dn
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|deadNodeDetailMap
operator|!=
literal|null
operator|&&
operator|!
name|deadNodeDetailMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// NN - status
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nnStatus
init|=
name|statusMap
operator|.
name|get
argument_list|(
name|dn
argument_list|)
decl_stmt|;
if|if
condition|(
name|nnStatus
operator|==
literal|null
condition|)
block|{
name|nnStatus
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|Boolean
operator|)
name|deadNodeDetailMap
operator|.
name|get
argument_list|(
literal|"decommissioned"
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
operator|==
literal|true
condition|)
block|{
name|deadDecommed
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|nnStatus
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nnStatus
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|DEAD
argument_list|)
expr_stmt|;
block|}
comment|// dn-nn-status
name|statusMap
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|nnStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Get the decommisioning datanode information.      *       * @param dataNodeStatusMap map with key being datanode, value being an      *          inner map (key:namenode, value:decommisionning state).      * @param host datanode      * @param decomnode DecommissionNode      * @param json String      */
DECL|method|getDecommissionNodeStatus ( Map<String, Map<String, String>> dataNodeStatusMap, String host, String json)
specifier|private
specifier|static
name|void
name|getDecommissionNodeStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|dataNodeStatusMap
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|nodeMap
init|=
name|getNodeMap
argument_list|(
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeMap
operator|==
literal|null
operator|||
name|nodeMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|decomming
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|nodeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|dn
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|decomming
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
comment|// nn-status
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nnStatus
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataNodeStatusMap
operator|.
name|containsKey
argument_list|(
name|dn
argument_list|)
condition|)
block|{
name|nnStatus
operator|=
name|dataNodeStatusMap
operator|.
name|get
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
name|nnStatus
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// dn-nn-status
name|dataNodeStatusMap
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|nnStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This class contains cluster statistics.    */
DECL|class|ClusterStatus
specifier|static
class|class
name|ClusterStatus
block|{
comment|/** Exception indicates failure to get cluster status */
DECL|field|error
name|Exception
name|error
init|=
literal|null
decl_stmt|;
comment|/** Cluster status information */
DECL|field|clusterid
name|String
name|clusterid
init|=
literal|""
decl_stmt|;
DECL|field|total_sum
name|long
name|total_sum
init|=
literal|0
decl_stmt|;
DECL|field|free_sum
name|long
name|free_sum
init|=
literal|0
decl_stmt|;
DECL|field|clusterDfsUsed
name|long
name|clusterDfsUsed
init|=
literal|0
decl_stmt|;
DECL|field|nonDfsUsed_sum
name|long
name|nonDfsUsed_sum
init|=
literal|0
decl_stmt|;
DECL|field|totalFilesAndDirectories
name|long
name|totalFilesAndDirectories
init|=
literal|0
decl_stmt|;
comment|/** List of namenodes in the cluster */
DECL|field|nnList
specifier|final
name|List
argument_list|<
name|NamenodeStatus
argument_list|>
name|nnList
init|=
operator|new
name|ArrayList
argument_list|<
name|NamenodeStatus
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Map of namenode host and exception encountered when getting status */
DECL|field|nnExceptions
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|nnExceptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|setError (Exception e)
specifier|public
name|void
name|setError
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
block|}
DECL|method|addNamenodeStatus (NamenodeStatus nn)
specifier|public
name|void
name|addNamenodeStatus
parameter_list|(
name|NamenodeStatus
name|nn
parameter_list|)
block|{
name|nnList
operator|.
name|add
argument_list|(
name|nn
argument_list|)
expr_stmt|;
comment|// Add namenode status to cluster status
name|totalFilesAndDirectories
operator|+=
name|nn
operator|.
name|filesAndDirectories
expr_stmt|;
name|total_sum
operator|+=
name|nn
operator|.
name|capacity
expr_stmt|;
name|free_sum
operator|+=
name|nn
operator|.
name|free
expr_stmt|;
name|clusterDfsUsed
operator|+=
name|nn
operator|.
name|bpUsed
expr_stmt|;
name|nonDfsUsed_sum
operator|+=
name|nn
operator|.
name|nonDfsUsed
expr_stmt|;
block|}
DECL|method|addException (String host, Exception e)
specifier|public
name|void
name|addException
parameter_list|(
name|String
name|host
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|nnExceptions
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|toXML (XMLOutputter doc)
specifier|public
name|void
name|toXML
parameter_list|(
name|XMLOutputter
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
comment|// general exception, only print exception message onto web page.
name|createGeneralException
argument_list|(
name|doc
argument_list|,
name|clusterid
argument_list|,
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|size
init|=
name|nnList
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|total
init|=
literal|0L
decl_stmt|,
name|free
init|=
literal|0L
decl_stmt|,
name|nonDfsUsed
init|=
literal|0l
decl_stmt|;
name|float
name|dfsUsedPercent
init|=
literal|0.0f
decl_stmt|,
name|dfsRemainingPercent
init|=
literal|0.0f
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|total
operator|=
name|total_sum
operator|/
name|size
expr_stmt|;
name|free
operator|=
name|free_sum
operator|/
name|size
expr_stmt|;
name|nonDfsUsed
operator|=
name|nonDfsUsed_sum
operator|/
name|size
expr_stmt|;
name|dfsUsedPercent
operator|=
name|DFSUtil
operator|.
name|getPercentUsed
argument_list|(
name|clusterDfsUsed
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|dfsRemainingPercent
operator|=
name|DFSUtil
operator|.
name|getPercentRemaining
argument_list|(
name|free
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|startTag
argument_list|(
literal|"cluster"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"clusterId"
argument_list|,
name|clusterid
argument_list|)
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"storage"
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"Total Files And Directories"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|totalFilesAndDirectories
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"Configured Capacity"
argument_list|,
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|total
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"DFS Used"
argument_list|,
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|clusterDfsUsed
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"Non DFS Used"
argument_list|,
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|nonDfsUsed
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"DFS Remaining"
argument_list|,
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|free
argument_list|)
argument_list|)
expr_stmt|;
comment|// dfsUsedPercent
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"DFS Used%"
argument_list|,
name|DFSUtil
operator|.
name|percent2String
argument_list|(
name|dfsUsedPercent
argument_list|)
argument_list|)
expr_stmt|;
comment|// dfsRemainingPercent
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"DFS Remaining%"
argument_list|,
name|DFSUtil
operator|.
name|percent2String
argument_list|(
name|dfsRemainingPercent
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// storage
name|doc
operator|.
name|startTag
argument_list|(
literal|"namenodes"
argument_list|)
expr_stmt|;
comment|// number of namenodes
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"NamenodesCount"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|NamenodeStatus
name|nn
range|:
name|nnList
control|)
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|toXmlItemBlockWithLink
argument_list|(
name|doc
argument_list|,
name|nn
operator|.
name|host
argument_list|,
name|nn
operator|.
name|httpAddress
argument_list|,
literal|"NameNode"
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"Blockpool Used"
argument_list|,
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|nn
operator|.
name|bpUsed
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"Blockpool Used%"
argument_list|,
name|DFSUtil
operator|.
name|percent2String
argument_list|(
name|DFSUtil
operator|.
name|getPercentUsed
argument_list|(
name|nn
operator|.
name|bpUsed
argument_list|,
name|total
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"Files And Directories"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nn
operator|.
name|filesAndDirectories
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"Blocks"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nn
operator|.
name|blocksCount
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"Missing Blocks"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|nn
operator|.
name|missingBlocksCount
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlockWithLink
argument_list|(
name|doc
argument_list|,
name|nn
operator|.
name|liveDatanodeCount
operator|+
literal|" ("
operator|+
name|nn
operator|.
name|liveDecomCount
operator|+
literal|")"
argument_list|,
operator|new
name|URL
argument_list|(
name|nn
operator|.
name|httpAddress
argument_list|,
literal|"/dfsnodelist.jsp?whatNodes=LIVE"
argument_list|)
argument_list|,
literal|"Live Datanode (Decommissioned)"
argument_list|)
expr_stmt|;
name|toXmlItemBlockWithLink
argument_list|(
name|doc
argument_list|,
name|nn
operator|.
name|deadDatanodeCount
operator|+
literal|" ("
operator|+
name|nn
operator|.
name|deadDecomCount
operator|+
literal|")"
argument_list|,
operator|new
name|URL
argument_list|(
name|nn
operator|.
name|httpAddress
argument_list|,
literal|"/dfsnodelist.jsp?whatNodes=DEAD"
argument_list|)
argument_list|,
literal|"Dead Datanode (Decommissioned)"
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
literal|"Software Version"
argument_list|,
name|nn
operator|.
name|softwareVersion
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// node
block|}
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// namenodes
name|createNamenodeExceptionMsg
argument_list|(
name|doc
argument_list|,
name|nnExceptions
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// cluster
name|doc
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This class stores namenode statistics to be used to generate cluster    * web console report.    */
DECL|class|NamenodeStatus
specifier|static
class|class
name|NamenodeStatus
block|{
DECL|field|host
name|String
name|host
init|=
literal|""
decl_stmt|;
DECL|field|capacity
name|long
name|capacity
init|=
literal|0L
decl_stmt|;
DECL|field|free
name|long
name|free
init|=
literal|0L
decl_stmt|;
DECL|field|bpUsed
name|long
name|bpUsed
init|=
literal|0L
decl_stmt|;
DECL|field|nonDfsUsed
name|long
name|nonDfsUsed
init|=
literal|0L
decl_stmt|;
DECL|field|filesAndDirectories
name|long
name|filesAndDirectories
init|=
literal|0L
decl_stmt|;
DECL|field|blocksCount
name|long
name|blocksCount
init|=
literal|0L
decl_stmt|;
DECL|field|missingBlocksCount
name|long
name|missingBlocksCount
init|=
literal|0L
decl_stmt|;
DECL|field|liveDatanodeCount
name|int
name|liveDatanodeCount
init|=
literal|0
decl_stmt|;
DECL|field|liveDecomCount
name|int
name|liveDecomCount
init|=
literal|0
decl_stmt|;
DECL|field|deadDatanodeCount
name|int
name|deadDatanodeCount
init|=
literal|0
decl_stmt|;
DECL|field|deadDecomCount
name|int
name|deadDecomCount
init|=
literal|0
decl_stmt|;
DECL|field|httpAddress
name|URL
name|httpAddress
init|=
literal|null
decl_stmt|;
DECL|field|softwareVersion
name|String
name|softwareVersion
init|=
literal|""
decl_stmt|;
block|}
comment|/**    * cluster-wide decommission state of a datanode    */
DECL|enum|DecommissionStates
specifier|public
enum|enum
name|DecommissionStates
block|{
comment|/*      * If datanode state is decommissioning at one or more namenodes and       * decommissioned at the rest of the namenodes.      */
DECL|enumConstant|DECOMMISSION_INPROGRESS
name|DECOMMISSION_INPROGRESS
argument_list|(
literal|"Decommission In Progress"
argument_list|)
block|,
comment|/* If datanode state at all the namenodes is decommissioned */
DECL|enumConstant|DECOMMISSIONED
name|DECOMMISSIONED
argument_list|(
literal|"Decommissioned"
argument_list|)
block|,
comment|/*      * If datanode state is not decommissioning at one or more namenodes and       * decommissioned/decommissioning at the rest of the namenodes.      */
DECL|enumConstant|PARTIALLY_DECOMMISSIONED
name|PARTIALLY_DECOMMISSIONED
argument_list|(
literal|"Partially Decommissioning"
argument_list|)
block|,
comment|/*      * If datanode state is not known at a namenode, due to problems in getting      * the datanode state from the namenode.      */
DECL|enumConstant|UNKNOWN
name|UNKNOWN
argument_list|(
literal|"Unknown"
argument_list|)
block|;
DECL|field|value
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|DecommissionStates (final String v)
name|DecommissionStates
parameter_list|(
specifier|final
name|String
name|v
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|v
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
comment|/**    * This class consolidates the decommissioning datanodes information in the    * cluster and generates decommissioning reports in XML.    */
DECL|class|DecommissionStatus
specifier|static
class|class
name|DecommissionStatus
block|{
comment|/** Error when set indicates failure to get decomission status*/
DECL|field|error
specifier|final
name|Exception
name|error
decl_stmt|;
comment|/** Map of dn host<-> (Map of NN host<-> decommissioning state) */
DECL|field|statusMap
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
decl_stmt|;
DECL|field|clusterid
specifier|final
name|String
name|clusterid
decl_stmt|;
DECL|field|httpPort
specifier|final
name|int
name|httpPort
decl_stmt|;
DECL|field|decommissioned
name|int
name|decommissioned
init|=
literal|0
decl_stmt|;
comment|// total number of decommissioned nodes
DECL|field|decommissioning
name|int
name|decommissioning
init|=
literal|0
decl_stmt|;
comment|// total number of decommissioning datanodes
DECL|field|partial
name|int
name|partial
init|=
literal|0
decl_stmt|;
comment|// total number of partially decommissioned nodes
comment|/** Map of namenode and exception encountered when getting decom status */
DECL|field|exceptions
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|DecommissionStatus (Map<String, Map<String, String>> statusMap, String cid, int httpPort, Map<String, Exception> exceptions)
specifier|private
name|DecommissionStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
parameter_list|,
name|String
name|cid
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|exceptions
parameter_list|)
block|{
name|this
argument_list|(
name|statusMap
argument_list|,
name|cid
argument_list|,
name|httpPort
argument_list|,
name|exceptions
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|DecommissionStatus (String cid, Exception e)
specifier|public
name|DecommissionStatus
parameter_list|(
name|String
name|cid
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|cid
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|DecommissionStatus (Map<String, Map<String, String>> statusMap, String cid, int httpPort, Map<String, Exception> exceptions, Exception error)
specifier|private
name|DecommissionStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|statusMap
parameter_list|,
name|String
name|cid
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|exceptions
parameter_list|,
name|Exception
name|error
parameter_list|)
block|{
name|this
operator|.
name|statusMap
operator|=
name|statusMap
expr_stmt|;
name|this
operator|.
name|clusterid
operator|=
name|cid
expr_stmt|;
name|this
operator|.
name|httpPort
operator|=
name|httpPort
expr_stmt|;
name|this
operator|.
name|exceptions
operator|=
name|exceptions
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
comment|/**      * Generate decommissioning datanode report in XML format      *       * @param doc      *          , xmloutputter      * @throws IOException      */
DECL|method|toXML (XMLOutputter doc)
specifier|public
name|void
name|toXML
parameter_list|(
name|XMLOutputter
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|createGeneralException
argument_list|(
name|doc
argument_list|,
name|clusterid
argument_list|,
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|statusMap
operator|==
literal|null
operator|||
name|statusMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// none of the namenodes has reported, print exceptions from each nn.
name|doc
operator|.
name|startTag
argument_list|(
literal|"cluster"
argument_list|)
expr_stmt|;
name|createNamenodeExceptionMsg
argument_list|(
name|doc
argument_list|,
name|exceptions
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|doc
operator|.
name|startTag
argument_list|(
literal|"cluster"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"clusterId"
argument_list|,
name|clusterid
argument_list|)
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"decommissioningReport"
argument_list|)
expr_stmt|;
name|countDecommissionDatanodes
argument_list|()
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
name|DecommissionStates
operator|.
name|DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|decommissioned
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
name|DecommissionStates
operator|.
name|DECOMMISSION_INPROGRESS
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|decommissioning
argument_list|)
argument_list|)
expr_stmt|;
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
name|DecommissionStates
operator|.
name|PARTIALLY_DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|partial
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// decommissioningReport
name|doc
operator|.
name|startTag
argument_list|(
literal|"datanodes"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dnSet
init|=
name|statusMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dnhost
range|:
name|dnSet
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nnStatus
init|=
name|statusMap
operator|.
name|get
argument_list|(
name|dnhost
argument_list|)
decl_stmt|;
if|if
condition|(
name|nnStatus
operator|==
literal|null
operator|||
name|nnStatus
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|overallStatus
init|=
name|nnStatus
operator|.
name|get
argument_list|(
name|OVERALL_STATUS
argument_list|)
decl_stmt|;
comment|// check if datanode is in decommission states
if|if
condition|(
name|overallStatus
operator|!=
literal|null
operator|&&
operator|(
name|overallStatus
operator|.
name|equals
argument_list|(
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|overallStatus
operator|.
name|equals
argument_list|(
name|AdminStates
operator|.
name|DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|overallStatus
operator|.
name|equals
argument_list|(
name|DecommissionStates
operator|.
name|PARTIALLY_DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|overallStatus
operator|.
name|equals
argument_list|(
name|DecommissionStates
operator|.
name|UNKNOWN
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
comment|// dn
name|toXmlItemBlockWithLink
argument_list|(
name|doc
argument_list|,
name|dnhost
argument_list|,
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
name|dnhost
argument_list|,
name|httpPort
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|"DataNode"
argument_list|)
expr_stmt|;
comment|// overall status first
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
name|OVERALL_STATUS
argument_list|,
name|overallStatus
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
range|:
name|nnStatus
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|nn
init|=
name|m
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|nn
operator|.
name|equals
argument_list|(
name|OVERALL_STATUS
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// xml
name|toXmlItemBlock
argument_list|(
name|doc
argument_list|,
name|nn
argument_list|,
name|nnStatus
operator|.
name|get
argument_list|(
name|nn
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// node
block|}
block|}
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// datanodes
name|createNamenodeExceptionMsg
argument_list|(
name|doc
argument_list|,
name|exceptions
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// cluster
block|}
comment|// toXML
comment|/**      * Count the total number of decommissioned/decommission_inprogress/      * partially decommissioned datanodes.      */
DECL|method|countDecommissionDatanodes ()
specifier|private
name|void
name|countDecommissionDatanodes
parameter_list|()
block|{
for|for
control|(
name|String
name|dn
range|:
name|statusMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nnStatus
init|=
name|statusMap
operator|.
name|get
argument_list|(
name|dn
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|nnStatus
operator|.
name|get
argument_list|(
name|OVERALL_STATUS
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|DecommissionStates
operator|.
name|DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|decommissioned
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|DecommissionStates
operator|.
name|DECOMMISSION_INPROGRESS
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|decommissioning
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
name|DecommissionStates
operator|.
name|PARTIALLY_DECOMMISSIONED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|partial
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Generate a XML block as such,<item label=key value=value/>    */
DECL|method|toXmlItemBlock (XMLOutputter doc, String key, String value)
specifier|private
specifier|static
name|void
name|toXmlItemBlock
parameter_list|(
name|XMLOutputter
name|doc
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"label"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
comment|/**    * Generate a XML block as such,<item label="Node" value="hostname"    * link="http://hostname:50070" />    */
DECL|method|toXmlItemBlockWithLink (XMLOutputter doc, String value, URL url, String label)
specifier|private
specifier|static
name|void
name|toXmlItemBlockWithLink
parameter_list|(
name|XMLOutputter
name|doc
parameter_list|,
name|String
name|value
parameter_list|,
name|URL
name|url
parameter_list|,
name|String
name|label
parameter_list|)
throws|throws
name|IOException
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"label"
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"link"
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// item
block|}
comment|/**    * create the XML for exceptions that we encountered when connecting to    * namenode.    */
DECL|method|createNamenodeExceptionMsg (XMLOutputter doc, Map<String, Exception> exceptionMsg)
specifier|private
specifier|static
name|void
name|createNamenodeExceptionMsg
parameter_list|(
name|XMLOutputter
name|doc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|exceptionMsg
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exceptionMsg
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"unreportedNamenodes"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|m
range|:
name|exceptionMsg
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"name"
argument_list|,
name|m
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"exception"
argument_list|,
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// node
block|}
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// unreportedNamnodes
block|}
block|}
comment|/**    * create XML block from general exception.    */
DECL|method|createGeneralException (XMLOutputter doc, String clusterid, String eMsg)
specifier|private
specifier|static
name|void
name|createGeneralException
parameter_list|(
name|XMLOutputter
name|doc
parameter_list|,
name|String
name|clusterid
parameter_list|,
name|String
name|eMsg
parameter_list|)
throws|throws
name|IOException
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"cluster"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"clusterId"
argument_list|,
name|clusterid
argument_list|)
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"message"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"msg"
argument_list|,
name|eMsg
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// item
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// message
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|// cluster
block|}
comment|/**    * Read in the content from a URL    * @param url URL To read    * @return the text from the output    * @throws IOException if something went wrong    */
DECL|method|readOutput (URL url)
specifier|private
specifier|static
name|String
name|readOutput
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|URLConnection
name|connection
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|inputLine
decl_stmt|;
while|while
condition|(
operator|(
name|inputLine
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|inputLine
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|queryMbean (URI httpAddress, Configuration conf)
specifier|private
specifier|static
name|String
name|queryMbean
parameter_list|(
name|URI
name|httpAddress
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Although the other namenode might support HTTPS, it is fundamentally      * broken to get the JMX via an HTTPS connection inside the namenode,      * because in HTTPS set up the principal of the client and the one of      * the namenode differs. Therefore, there is no guarantees that the      * HTTPS connection can be set up.      *      * As a result, we just hard code the connection as an HTTP connection.      */
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|httpAddress
operator|.
name|toURL
argument_list|()
argument_list|,
name|JMX_QRY
argument_list|)
decl_stmt|;
return|return
name|readOutput
argument_list|(
name|url
argument_list|)
return|;
block|}
comment|/**    * In order to query a namenode mxbean, a http connection in the form of    * "http://hostname/jmx?qry=Hadoop:service=NameNode,name=NameNodeInfo"    * is sent to namenode.  JMX attributes are exposed via JmxJsonServelet on     * the namenode side.    */
DECL|method|getProperty (String props, String propertyname)
specifier|private
specifier|static
name|JsonNode
name|getProperty
parameter_list|(
name|String
name|props
parameter_list|,
name|String
name|propertyname
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|props
operator|==
literal|null
operator|||
name|props
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|propertyname
operator|==
literal|null
operator|||
name|propertyname
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ObjectMapper
name|m
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|rootNode
init|=
name|m
operator|.
name|readValue
argument_list|(
name|props
argument_list|,
name|JsonNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|JsonNode
name|jn
init|=
name|rootNode
operator|.
name|get
argument_list|(
literal|"beans"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|propertyname
argument_list|)
decl_stmt|;
return|return
name|jn
return|;
block|}
block|}
end_class

end_unit

