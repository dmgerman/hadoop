begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|XAttrHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|CRYPTO_XATTR_ENCRYPTION_ZONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|SECURITY_XATTR_UNREADABLE_BY_SUPERUSER
import|;
end_import

begin_class
DECL|class|FSDirXAttrOp
class|class
name|FSDirXAttrOp
block|{
DECL|field|KEYID_XATTR
specifier|private
specifier|static
specifier|final
name|XAttr
name|KEYID_XATTR
init|=
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|CRYPTO_XATTR_ENCRYPTION_ZONE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|UNREADABLE_BY_SUPERUSER_XATTR
specifier|private
specifier|static
specifier|final
name|XAttr
name|UNREADABLE_BY_SUPERUSER_XATTR
init|=
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|SECURITY_XATTR_UNREADABLE_BY_SUPERUSER
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/**    * Set xattr for a file or directory.    *    * @param src    *          - path on which it sets the xattr    * @param xAttr    *          - xAttr details to set    * @param flag    *          - xAttrs flags    * @throws IOException    */
DECL|method|setXAttr ( FSDirectory fsd, String src, XAttr xAttr, EnumSet<XAttrSetFlag> flag, boolean logRetryCache)
specifier|static
name|HdfsFileStatus
name|setXAttr
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|XAttr
name|xAttr
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|checkXAttrsConfigFlag
argument_list|(
name|fsd
argument_list|)
expr_stmt|;
name|checkXAttrSize
argument_list|(
name|fsd
argument_list|,
name|xAttr
argument_list|)
expr_stmt|;
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|XAttrPermissionFilter
operator|.
name|checkPermissionForApi
argument_list|(
name|pc
argument_list|,
name|xAttr
argument_list|,
name|FSDirectory
operator|.
name|isReservedRawName
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|add
argument_list|(
name|xAttr
argument_list|)
expr_stmt|;
name|INodesInPath
name|iip
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|iip
operator|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|checkXAttrChangeAccess
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|xAttr
argument_list|,
name|pc
argument_list|)
expr_stmt|;
name|unprotectedSetXAttrs
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|xAttrs
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetXAttrs
argument_list|(
name|src
argument_list|,
name|xAttrs
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
DECL|method|getXAttrs (FSDirectory fsd, final String srcArg, List<XAttr> xAttrs)
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|getXAttrs
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|String
name|srcArg
parameter_list|,
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|src
init|=
name|srcArg
decl_stmt|;
name|checkXAttrsConfigFlag
argument_list|(
name|fsd
argument_list|)
expr_stmt|;
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isRawPath
init|=
name|FSDirectory
operator|.
name|isReservedRawName
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|boolean
name|getAll
init|=
name|xAttrs
operator|==
literal|null
operator|||
name|xAttrs
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getAll
condition|)
block|{
name|XAttrPermissionFilter
operator|.
name|checkPermissionForApi
argument_list|(
name|pc
argument_list|,
name|xAttrs
argument_list|,
name|isRawPath
argument_list|)
expr_stmt|;
block|}
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XAttr
argument_list|>
name|all
init|=
name|FSDirXAttrOp
operator|.
name|getXAttrs
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|filteredAll
init|=
name|XAttrPermissionFilter
operator|.
name|filterXAttrsForApi
argument_list|(
name|pc
argument_list|,
name|all
argument_list|,
name|isRawPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|getAll
condition|)
block|{
return|return
name|filteredAll
return|;
block|}
if|if
condition|(
name|filteredAll
operator|==
literal|null
operator|||
name|filteredAll
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"At least one of the attributes provided was not found."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|XAttr
argument_list|>
name|toGet
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XAttr
name|xAttr
range|:
name|xAttrs
control|)
block|{
name|boolean
name|foundIt
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XAttr
name|a
range|:
name|filteredAll
control|)
block|{
if|if
condition|(
name|xAttr
operator|.
name|getNameSpace
argument_list|()
operator|==
name|a
operator|.
name|getNameSpace
argument_list|()
operator|&&
name|xAttr
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|toGet
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|foundIt
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundIt
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"At least one of the attributes provided was not found."
argument_list|)
throw|;
block|}
block|}
return|return
name|toGet
return|;
block|}
DECL|method|listXAttrs ( FSDirectory fsd, String src)
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|listXAttrs
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirXAttrOp
operator|.
name|checkXAttrsConfigFlag
argument_list|(
name|fsd
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isRawPath
init|=
name|FSDirectory
operator|.
name|isReservedRawName
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
comment|/* To access xattr names, you need EXECUTE in the owning directory. */
name|fsd
operator|.
name|checkParentAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|all
init|=
name|FSDirXAttrOp
operator|.
name|getXAttrs
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|)
decl_stmt|;
return|return
name|XAttrPermissionFilter
operator|.
name|filterXAttrsForApi
argument_list|(
name|pc
argument_list|,
name|all
argument_list|,
name|isRawPath
argument_list|)
return|;
block|}
comment|/**    * Remove an xattr for a file or directory.    *    * @param src    *          - path to remove the xattr from    * @param xAttr    *          - xAttr to remove    * @throws IOException    */
DECL|method|removeXAttr ( FSDirectory fsd, String src, XAttr xAttr, boolean logRetryCache)
specifier|static
name|HdfsFileStatus
name|removeXAttr
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|XAttr
name|xAttr
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirXAttrOp
operator|.
name|checkXAttrsConfigFlag
argument_list|(
name|fsd
argument_list|)
expr_stmt|;
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|XAttrPermissionFilter
operator|.
name|checkPermissionForApi
argument_list|(
name|pc
argument_list|,
name|xAttr
argument_list|,
name|FSDirectory
operator|.
name|isReservedRawName
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|add
argument_list|(
name|xAttr
argument_list|)
expr_stmt|;
name|INodesInPath
name|iip
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|iip
operator|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|checkXAttrChangeAccess
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|xAttr
argument_list|,
name|pc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|removedXAttrs
init|=
name|unprotectedRemoveXAttrs
argument_list|(
name|fsd
argument_list|,
name|src
argument_list|,
name|xAttrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|removedXAttrs
operator|!=
literal|null
operator|&&
operator|!
name|removedXAttrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logRemoveXAttrs
argument_list|(
name|src
argument_list|,
name|removedXAttrs
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No matching attributes found for remove operation"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
DECL|method|unprotectedRemoveXAttrs ( FSDirectory fsd, final String src, final List<XAttr> toRemove)
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|unprotectedRemoveXAttrs
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|toRemove
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|FSDirectory
operator|.
name|normalizePath
argument_list|(
name|src
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|INode
name|inode
init|=
name|FSDirectory
operator|.
name|resolveLastINode
argument_list|(
name|iip
argument_list|)
decl_stmt|;
name|int
name|snapshotId
init|=
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|existingXAttrs
init|=
name|XAttrStorage
operator|.
name|readINodeXAttrs
argument_list|(
name|inode
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|removedXAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|toRemove
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|newXAttrs
init|=
name|filterINodeXAttrs
argument_list|(
name|existingXAttrs
argument_list|,
name|toRemove
argument_list|,
name|removedXAttrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingXAttrs
operator|.
name|size
argument_list|()
operator|!=
name|newXAttrs
operator|.
name|size
argument_list|()
condition|)
block|{
name|XAttrStorage
operator|.
name|updateINodeXAttrs
argument_list|(
name|inode
argument_list|,
name|newXAttrs
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
return|return
name|removedXAttrs
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Filter XAttrs from a list of existing XAttrs. Removes matched XAttrs from    * toFilter and puts them into filtered. Upon completion,    * toFilter contains the filter XAttrs that were not found, while    * fitleredXAttrs contains the XAttrs that were found.    *    * @param existingXAttrs Existing XAttrs to be filtered    * @param toFilter XAttrs to filter from the existing XAttrs    * @param filtered Return parameter, XAttrs that were filtered    * @return List of XAttrs that does not contain filtered XAttrs    */
annotation|@
name|VisibleForTesting
DECL|method|filterINodeXAttrs ( final List<XAttr> existingXAttrs, final List<XAttr> toFilter, final List<XAttr> filtered)
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|filterINodeXAttrs
parameter_list|(
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|existingXAttrs
parameter_list|,
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|toFilter
parameter_list|,
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|filtered
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|existingXAttrs
operator|==
literal|null
operator|||
name|existingXAttrs
operator|.
name|isEmpty
argument_list|()
operator|||
name|toFilter
operator|==
literal|null
operator|||
name|toFilter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|existingXAttrs
return|;
block|}
comment|// Populate a new list with XAttrs that pass the filter
name|List
argument_list|<
name|XAttr
argument_list|>
name|newXAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|existingXAttrs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XAttr
name|a
range|:
name|existingXAttrs
control|)
block|{
name|boolean
name|add
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ListIterator
argument_list|<
name|XAttr
argument_list|>
name|it
init|=
name|toFilter
operator|.
name|listIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XAttr
name|filter
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|KEYID_XATTR
operator|.
name|equalsIgnoreValue
argument_list|(
name|filter
argument_list|)
argument_list|,
literal|"The encryption zone xattr should never be deleted."
argument_list|)
expr_stmt|;
if|if
condition|(
name|UNREADABLE_BY_SUPERUSER_XATTR
operator|.
name|equalsIgnoreValue
argument_list|(
name|filter
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"The xattr '"
operator|+
name|SECURITY_XATTR_UNREADABLE_BY_SUPERUSER
operator|+
literal|"' can not be deleted."
argument_list|)
throw|;
block|}
if|if
condition|(
name|a
operator|.
name|equalsIgnoreValue
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|add
operator|=
literal|false
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|filtered
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|add
condition|)
block|{
name|newXAttrs
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newXAttrs
return|;
block|}
DECL|method|unprotectedSetXAttrs ( FSDirectory fsd, final String src, final List<XAttr> xAttrs, final EnumSet<XAttrSetFlag> flag)
specifier|static
name|INode
name|unprotectedSetXAttrs
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|FSDirectory
operator|.
name|normalizePath
argument_list|(
name|src
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|INode
name|inode
init|=
name|FSDirectory
operator|.
name|resolveLastINode
argument_list|(
name|iip
argument_list|)
decl_stmt|;
name|int
name|snapshotId
init|=
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|existingXAttrs
init|=
name|XAttrStorage
operator|.
name|readINodeXAttrs
argument_list|(
name|inode
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|newXAttrs
init|=
name|setINodeXAttrs
argument_list|(
name|fsd
argument_list|,
name|existingXAttrs
argument_list|,
name|xAttrs
argument_list|,
name|flag
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isFile
init|=
name|inode
operator|.
name|isFile
argument_list|()
decl_stmt|;
for|for
control|(
name|XAttr
name|xattr
range|:
name|newXAttrs
control|)
block|{
specifier|final
name|String
name|xaName
init|=
name|XAttrHelper
operator|.
name|getPrefixedName
argument_list|(
name|xattr
argument_list|)
decl_stmt|;
comment|/*        * If we're adding the encryption zone xattr, then add src to the list        * of encryption zones.        */
if|if
condition|(
name|CRYPTO_XATTR_ENCRYPTION_ZONE
operator|.
name|equals
argument_list|(
name|xaName
argument_list|)
condition|)
block|{
specifier|final
name|HdfsProtos
operator|.
name|ZoneEncryptionInfoProto
name|ezProto
init|=
name|HdfsProtos
operator|.
name|ZoneEncryptionInfoProto
operator|.
name|parseFrom
argument_list|(
name|xattr
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|fsd
operator|.
name|ezManager
operator|.
name|addEncryptionZone
argument_list|(
name|inode
operator|.
name|getId
argument_list|()
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|ezProto
operator|.
name|getSuite
argument_list|()
argument_list|)
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|ezProto
operator|.
name|getCryptoProtocolVersion
argument_list|()
argument_list|)
argument_list|,
name|ezProto
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isFile
operator|&&
name|SECURITY_XATTR_UNREADABLE_BY_SUPERUSER
operator|.
name|equals
argument_list|(
name|xaName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can only set '"
operator|+
name|SECURITY_XATTR_UNREADABLE_BY_SUPERUSER
operator|+
literal|"' on a file."
argument_list|)
throw|;
block|}
block|}
name|XAttrStorage
operator|.
name|updateINodeXAttrs
argument_list|(
name|inode
argument_list|,
name|newXAttrs
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
return|return
name|inode
return|;
block|}
DECL|method|setINodeXAttrs ( FSDirectory fsd, final List<XAttr> existingXAttrs, final List<XAttr> toSet, final EnumSet<XAttrSetFlag> flag)
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|setINodeXAttrs
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|existingXAttrs
parameter_list|,
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|toSet
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check for duplicate XAttrs in toSet
comment|// We need to use a custom comparator, so using a HashSet is not suitable
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toSet
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|toSet
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|toSet
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equalsIgnoreValue
argument_list|(
name|toSet
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot specify the same XAttr to be set "
operator|+
literal|"more than once"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Count the current number of user-visible XAttrs for limit checking
name|int
name|userVisibleXAttrsNum
init|=
literal|0
decl_stmt|;
comment|// Number of user visible xAttrs
comment|// The XAttr list is copied to an exactly-sized array when it's stored,
comment|// so there's no need to size it precisely here.
name|int
name|newSize
init|=
operator|(
name|existingXAttrs
operator|!=
literal|null
operator|)
condition|?
name|existingXAttrs
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
name|newSize
operator|+=
name|toSet
operator|.
name|size
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|newSize
argument_list|)
decl_stmt|;
comment|// Check if the XAttr already exists to validate with the provided flag
for|for
control|(
name|XAttr
name|xAttr
range|:
name|toSet
control|)
block|{
name|boolean
name|exist
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|existingXAttrs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XAttr
name|a
range|:
name|existingXAttrs
control|)
block|{
if|if
condition|(
name|a
operator|.
name|equalsIgnoreValue
argument_list|(
name|xAttr
argument_list|)
condition|)
block|{
name|exist
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|XAttrSetFlag
operator|.
name|validate
argument_list|(
name|xAttr
operator|.
name|getName
argument_list|()
argument_list|,
name|exist
argument_list|,
name|flag
argument_list|)
expr_stmt|;
comment|// add the new XAttr since it passed validation
name|xAttrs
operator|.
name|add
argument_list|(
name|xAttr
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUserVisible
argument_list|(
name|xAttr
argument_list|)
condition|)
block|{
name|userVisibleXAttrsNum
operator|++
expr_stmt|;
block|}
block|}
comment|// Add the existing xattrs back in, if they weren't already set
if|if
condition|(
name|existingXAttrs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XAttr
name|existing
range|:
name|existingXAttrs
control|)
block|{
name|boolean
name|alreadySet
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XAttr
name|set
range|:
name|toSet
control|)
block|{
if|if
condition|(
name|set
operator|.
name|equalsIgnoreValue
argument_list|(
name|existing
argument_list|)
condition|)
block|{
name|alreadySet
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|alreadySet
condition|)
block|{
name|xAttrs
operator|.
name|add
argument_list|(
name|existing
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUserVisible
argument_list|(
name|existing
argument_list|)
condition|)
block|{
name|userVisibleXAttrsNum
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|userVisibleXAttrsNum
operator|>
name|fsd
operator|.
name|getInodeXAttrsLimit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot add additional XAttr to inode, "
operator|+
literal|"would exceed limit of "
operator|+
name|fsd
operator|.
name|getInodeXAttrsLimit
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|xAttrs
return|;
block|}
DECL|method|getXAttrByPrefixedName (FSDirectory fsd, INode inode, int snapshotId, String prefixedName)
specifier|static
name|XAttr
name|getXAttrByPrefixedName
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INode
name|inode
parameter_list|,
name|int
name|snapshotId
parameter_list|,
name|String
name|prefixedName
parameter_list|)
throws|throws
name|IOException
block|{
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|XAttrStorage
operator|.
name|readINodeXAttrByPrefixedName
argument_list|(
name|inode
argument_list|,
name|snapshotId
argument_list|,
name|prefixedName
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|unprotectedGetXAttrByPrefixedName ( INode inode, int snapshotId, String prefixedName)
specifier|static
name|XAttr
name|unprotectedGetXAttrByPrefixedName
parameter_list|(
name|INode
name|inode
parameter_list|,
name|int
name|snapshotId
parameter_list|,
name|String
name|prefixedName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|XAttrStorage
operator|.
name|readINodeXAttrByPrefixedName
argument_list|(
name|inode
argument_list|,
name|snapshotId
argument_list|,
name|prefixedName
argument_list|)
return|;
block|}
DECL|method|checkXAttrChangeAccess ( FSDirectory fsd, INodesInPath iip, XAttr xAttr, FSPermissionChecker pc)
specifier|private
specifier|static
name|void
name|checkXAttrChangeAccess
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|XAttr
name|xAttr
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
block|{
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
operator|&&
name|xAttr
operator|.
name|getNameSpace
argument_list|()
operator|==
name|XAttr
operator|.
name|NameSpace
operator|.
name|USER
condition|)
block|{
specifier|final
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|!=
literal|null
operator|&&
name|inode
operator|.
name|isDirectory
argument_list|()
operator|&&
name|inode
operator|.
name|getFsPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|pc
operator|.
name|isSuperUser
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkOwner
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fsd
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verifies that the combined size of the name and value of an xattr is within    * the configured limit. Setting a limit of zero disables this check.    */
DECL|method|checkXAttrSize (FSDirectory fsd, XAttr xAttr)
specifier|private
specifier|static
name|void
name|checkXAttrSize
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|XAttr
name|xAttr
parameter_list|)
block|{
name|int
name|size
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|xAttr
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|xAttr
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|size
operator|+=
name|xAttr
operator|.
name|getValue
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|>
name|fsd
operator|.
name|getXattrMaxSize
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"The XAttr is too big. The maximum combined size of the"
operator|+
literal|" name and value is "
operator|+
name|fsd
operator|.
name|getXattrMaxSize
argument_list|()
operator|+
literal|", but the total size is "
operator|+
name|size
argument_list|)
throw|;
block|}
block|}
DECL|method|checkXAttrsConfigFlag (FSDirectory fsd)
specifier|private
specifier|static
name|void
name|checkXAttrsConfigFlag
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fsd
operator|.
name|isXattrsEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The XAttr operation has been rejected.  "
operator|+
literal|"Support for XAttrs has been disabled by setting %s to false."
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_XATTRS_ENABLED_KEY
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|getXAttrs (FSDirectory fsd, String src)
specifier|private
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|getXAttrs
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|srcs
init|=
name|FSDirectory
operator|.
name|normalizePath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath
argument_list|(
name|srcs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|INode
name|inode
init|=
name|FSDirectory
operator|.
name|resolveLastINode
argument_list|(
name|iip
argument_list|)
decl_stmt|;
name|int
name|snapshotId
init|=
name|iip
operator|.
name|getPathSnapshotId
argument_list|()
decl_stmt|;
return|return
name|XAttrStorage
operator|.
name|readINodeXAttrs
argument_list|(
name|fsd
operator|.
name|getAttributes
argument_list|(
name|src
argument_list|,
name|inode
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
name|inode
argument_list|,
name|snapshotId
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isUserVisible (XAttr xAttr)
specifier|private
specifier|static
name|boolean
name|isUserVisible
parameter_list|(
name|XAttr
name|xAttr
parameter_list|)
block|{
name|XAttr
operator|.
name|NameSpace
name|ns
init|=
name|xAttr
operator|.
name|getNameSpace
argument_list|()
decl_stmt|;
return|return
name|ns
operator|==
name|XAttr
operator|.
name|NameSpace
operator|.
name|USER
operator|||
name|ns
operator|==
name|XAttr
operator|.
name|NameSpace
operator|.
name|TRUSTED
return|;
block|}
block|}
end_class

end_unit

