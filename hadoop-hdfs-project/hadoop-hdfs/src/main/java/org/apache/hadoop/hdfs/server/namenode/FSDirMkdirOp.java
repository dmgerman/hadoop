begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AclException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|now
import|;
end_import

begin_class
DECL|class|FSDirMkdirOp
class|class
name|FSDirMkdirOp
block|{
DECL|method|mkdirs (FSNamesystem fsn, String src, PermissionStatus permissions, boolean createParent)
specifier|static
name|HdfsFileStatus
name|mkdirs
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|String
name|src
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* NameSystem.mkdirs: "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPathException
argument_list|(
name|src
argument_list|)
throw|;
block|}
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|resolvePathForWrite
argument_list|(
name|pc
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|src
operator|=
name|iip
operator|.
name|getPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkTraverse
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|)
expr_stmt|;
block|}
specifier|final
name|INode
name|lastINode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastINode
operator|!=
literal|null
operator|&&
name|lastINode
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Path is not a directory: "
operator|+
name|src
argument_list|)
throw|;
block|}
if|if
condition|(
name|lastINode
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkAncestorAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|createParent
condition|)
block|{
name|fsd
operator|.
name|verifyParentDir
argument_list|(
name|iip
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
comment|// validate that we have enough inodes. This is, at best, a
comment|// heuristic because the mkdirs() operation might need to
comment|// create multiple inodes.
name|fsn
operator|.
name|checkFsObjectLimit
argument_list|()
expr_stmt|;
comment|// Ensure that the user can traversal the path by adding implicit
comment|// u+wx permission to all ancestor directories.
name|INodesInPath
name|existing
init|=
name|createParentDirectories
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|permissions
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|existing
operator|=
name|createSingleDirectory
argument_list|(
name|fsd
argument_list|,
name|existing
argument_list|,
name|iip
operator|.
name|getLastLocalName
argument_list|()
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create directory: "
operator|+
name|src
argument_list|)
throw|;
block|}
name|iip
operator|=
name|existing
expr_stmt|;
block|}
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * For a given absolute path, create all ancestors as directories along the    * path. All ancestors inherit their parent's permission plus an implicit    * u+wx permission. This is used by create() and addSymlink() for    * implicitly creating all directories along the path.    *    * For example, path="/foo/bar/spam", "/foo" is an existing directory,    * "/foo/bar" is not existing yet, the function will create directory bar.    *    * @return a INodesInPath with all the existing and newly created    *         ancestor directories created.    *         Or return null if there are errors.    */
DECL|method|createAncestorDirectories ( FSDirectory fsd, INodesInPath iip, PermissionStatus permission)
specifier|static
name|INodesInPath
name|createAncestorDirectories
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|PermissionStatus
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createParentDirectories
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|permission
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Create all ancestor directories and return the parent inodes.    *    * @param fsd FSDirectory    * @param existing The INodesInPath instance containing all the existing    *                 ancestral INodes    * @param children The relative path from the parent towards children,    *                 starting with "/"    * @param perm the permission of the directory. Note that all ancestors    *             created along the path has implicit {@code u+wx} permissions.    * @param inheritPerms if the ancestor directories should inherit permissions    *                 or use the specified permissions.    *    * @return {@link INodesInPath} which contains all inodes to the    * target directory, After the execution parentPath points to the path of    * the returned INodesInPath. The function return null if the operation has    * failed.    */
DECL|method|createParentDirectories (FSDirectory fsd, INodesInPath iip, PermissionStatus perm, boolean inheritPerms)
specifier|private
specifier|static
name|INodesInPath
name|createParentDirectories
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|PermissionStatus
name|perm
parameter_list|,
name|boolean
name|inheritPerms
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
comment|// this is the desired parent iip if the subsequent delta is 1.
name|INodesInPath
name|existing
init|=
name|iip
operator|.
name|getExistingINodes
argument_list|()
decl_stmt|;
name|int
name|missing
init|=
name|iip
operator|.
name|length
argument_list|()
operator|-
name|existing
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|missing
operator|==
literal|0
condition|)
block|{
comment|// full path exists, return parents.
name|existing
operator|=
name|iip
operator|.
name|getParentINodesInPath
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|missing
operator|>
literal|1
condition|)
block|{
comment|// need to create at least one ancestor dir.
comment|// Ensure that the user can traversal the path by adding implicit
comment|// u+wx permission to all ancestor directories.
name|PermissionStatus
name|basePerm
init|=
name|inheritPerms
condition|?
name|existing
operator|.
name|getLastINode
argument_list|()
operator|.
name|getPermissionStatus
argument_list|()
else|:
name|perm
decl_stmt|;
name|perm
operator|=
name|addImplicitUwx
argument_list|(
name|basePerm
argument_list|,
name|perm
argument_list|)
expr_stmt|;
comment|// create all the missing directories.
specifier|final
name|int
name|last
init|=
name|iip
operator|.
name|length
argument_list|()
operator|-
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|existing
operator|.
name|length
argument_list|()
init|;
name|existing
operator|!=
literal|null
operator|&&
name|i
operator|<=
name|last
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|component
init|=
name|iip
operator|.
name|getPathComponent
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|existing
operator|=
name|createSingleDirectory
argument_list|(
name|fsd
argument_list|,
name|existing
argument_list|,
name|component
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|existing
return|;
block|}
DECL|method|mkdirForEditLog (FSDirectory fsd, long inodeId, String src, PermissionStatus permissions, List<AclEntry> aclEntries, long timestamp)
specifier|static
name|void
name|mkdirForEditLog
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|long
name|inodeId
parameter_list|,
name|String
name|src
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|QuotaExceededException
throws|,
name|UnresolvedLinkException
throws|,
name|AclException
throws|,
name|FileAlreadyExistsException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|localName
init|=
name|iip
operator|.
name|getLastLocalName
argument_list|()
decl_stmt|;
specifier|final
name|INodesInPath
name|existing
init|=
name|iip
operator|.
name|getParentINodesInPath
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|existing
operator|.
name|getLastINode
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|unprotectedMkdir
argument_list|(
name|fsd
argument_list|,
name|inodeId
argument_list|,
name|existing
argument_list|,
name|localName
argument_list|,
name|permissions
argument_list|,
name|aclEntries
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
DECL|method|createSingleDirectory (FSDirectory fsd, INodesInPath existing, byte[] localName, PermissionStatus perm)
specifier|private
specifier|static
name|INodesInPath
name|createSingleDirectory
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|existing
parameter_list|,
name|byte
index|[]
name|localName
parameter_list|,
name|PermissionStatus
name|perm
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|existing
operator|=
name|unprotectedMkdir
argument_list|(
name|fsd
argument_list|,
name|fsd
operator|.
name|allocateNewInodeId
argument_list|()
argument_list|,
name|existing
argument_list|,
name|localName
argument_list|,
name|perm
argument_list|,
literal|null
argument_list|,
name|now
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|INode
name|newNode
init|=
name|existing
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
comment|// Directory creation also count towards FilesCreated
comment|// to match count of FilesDeleted metric.
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
operator|.
name|incrFilesCreated
argument_list|()
expr_stmt|;
name|String
name|cur
init|=
name|existing
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logMkDir
argument_list|(
name|cur
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"mkdirs: created directory "
operator|+
name|cur
argument_list|)
expr_stmt|;
block|}
return|return
name|existing
return|;
block|}
DECL|method|addImplicitUwx (PermissionStatus parentPerm, PermissionStatus perm)
specifier|private
specifier|static
name|PermissionStatus
name|addImplicitUwx
parameter_list|(
name|PermissionStatus
name|parentPerm
parameter_list|,
name|PermissionStatus
name|perm
parameter_list|)
block|{
name|FsPermission
name|p
init|=
name|parentPerm
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|FsPermission
name|ancestorPerm
init|=
operator|new
name|FsPermission
argument_list|(
name|p
operator|.
name|getUserAction
argument_list|()
operator|.
name|or
argument_list|(
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
argument_list|,
name|p
operator|.
name|getGroupAction
argument_list|()
argument_list|,
name|p
operator|.
name|getOtherAction
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|PermissionStatus
argument_list|(
name|perm
operator|.
name|getUserName
argument_list|()
argument_list|,
name|perm
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|ancestorPerm
argument_list|)
return|;
block|}
comment|/**    * create a directory at path specified by parent    */
DECL|method|unprotectedMkdir (FSDirectory fsd, long inodeId, INodesInPath parent, byte[] name, PermissionStatus permission, List<AclEntry> aclEntries, long timestamp)
specifier|private
specifier|static
name|INodesInPath
name|unprotectedMkdir
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|long
name|inodeId
parameter_list|,
name|INodesInPath
name|parent
parameter_list|,
name|byte
index|[]
name|name
parameter_list|,
name|PermissionStatus
name|permission
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|QuotaExceededException
throws|,
name|AclException
throws|,
name|FileAlreadyExistsException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
assert|assert
name|parent
operator|.
name|getLastINode
argument_list|()
operator|!=
literal|null
assert|;
if|if
condition|(
operator|!
name|parent
operator|.
name|getLastINode
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Parent path is not a directory: "
operator|+
name|parent
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|name
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|INodeDirectory
name|dir
init|=
operator|new
name|INodeDirectory
argument_list|(
name|inodeId
argument_list|,
name|name
argument_list|,
name|permission
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|addLastINode
argument_list|(
name|parent
argument_list|,
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|iip
operator|!=
literal|null
operator|&&
name|aclEntries
operator|!=
literal|null
condition|)
block|{
name|AclStorage
operator|.
name|updateINodeAcl
argument_list|(
name|dir
argument_list|,
name|aclEntries
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
block|}
return|return
name|iip
return|;
block|}
block|}
end_class

end_unit

