begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AclException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|now
import|;
end_import

begin_class
DECL|class|FSDirMkdirOp
class|class
name|FSDirMkdirOp
block|{
DECL|method|mkdirs ( FSNamesystem fsn, String src, PermissionStatus permissions, boolean createParent)
specifier|static
name|HdfsFileStatus
name|mkdirs
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|String
name|src
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* NameSystem.mkdirs: "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPathException
argument_list|(
name|src
argument_list|)
throw|;
block|}
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|pathComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|pathComponents
argument_list|)
expr_stmt|;
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkTraverse
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isDirMutable
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|)
condition|)
block|{
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkAncestorAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|createParent
condition|)
block|{
name|fsd
operator|.
name|verifyParentDir
argument_list|(
name|iip
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
comment|// validate that we have enough inodes. This is, at best, a
comment|// heuristic because the mkdirs() operation might need to
comment|// create multiple inodes.
name|fsn
operator|.
name|checkFsObjectLimit
argument_list|()
expr_stmt|;
name|iip
operator|=
name|mkdirsRecursively
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|permissions
argument_list|,
literal|false
argument_list|,
name|now
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iip
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create directory: "
operator|+
name|src
argument_list|)
throw|;
block|}
block|}
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
DECL|method|unprotectedMkdir ( FSDirectory fsd, long inodeId, String src, PermissionStatus permissions, List<AclEntry> aclEntries, long timestamp)
specifier|static
name|INode
name|unprotectedMkdir
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|long
name|inodeId
parameter_list|,
name|String
name|src
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|QuotaExceededException
throws|,
name|UnresolvedLinkException
throws|,
name|AclException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getExistingPathINodes
argument_list|(
name|components
argument_list|)
decl_stmt|;
specifier|final
name|int
name|pos
init|=
name|iip
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
specifier|final
name|INodesInPath
name|newiip
init|=
name|unprotectedMkdir
argument_list|(
name|fsd
argument_list|,
name|inodeId
argument_list|,
name|iip
argument_list|,
name|pos
argument_list|,
name|components
index|[
name|pos
index|]
argument_list|,
name|permissions
argument_list|,
name|aclEntries
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
return|return
name|newiip
operator|.
name|getINode
argument_list|(
name|pos
argument_list|)
return|;
block|}
comment|/**    * Create a directory    * If ancestor directories do not exist, automatically create them.     * @param fsd FSDirectory    * @param iip the INodesInPath instance containing all the existing INodes    *            and null elements for non-existing components in the path    * @param permissions the permission of the directory    * @param inheritPermission    *   if the permission of the directory should inherit from its parent or not.    *   u+wx is implicitly added to the automatically created directories,    *   and to the given directory if inheritPermission is true    * @param now creation time    * @return non-null INodesInPath instance if operation succeeds    * @throws QuotaExceededException if directory creation violates    *                                any quota limit    * @throws UnresolvedLinkException if a symlink is encountered in src.    * @throws SnapshotAccessControlException if path is in RO snapshot    */
DECL|method|mkdirsRecursively (FSDirectory fsd, INodesInPath iip, PermissionStatus permissions, boolean inheritPermission, long now)
specifier|static
name|INodesInPath
name|mkdirsRecursively
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|boolean
name|inheritPermission
parameter_list|,
name|long
name|now
parameter_list|)
throws|throws
name|FileAlreadyExistsException
throws|,
name|QuotaExceededException
throws|,
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
throws|,
name|AclException
block|{
specifier|final
name|int
name|lastInodeIndex
init|=
name|iip
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|components
init|=
name|iip
operator|.
name|getPathComponents
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|components
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|iip
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotAccessControlException
argument_list|(
literal|"Modification on RO snapshot is disallowed"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|length
init|=
name|iip
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// find the index of the first null in inodes[]
name|StringBuilder
name|pathbuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|INode
name|curNode
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|length
operator|&&
operator|(
name|curNode
operator|=
name|iip
operator|.
name|getINode
argument_list|(
name|i
argument_list|)
operator|)
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|pathbuilder
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|curNode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Parent path is not a directory: "
operator|+
name|pathbuilder
operator|+
literal|" "
operator|+
name|curNode
operator|.
name|getLocalName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// default to creating parent dirs with the given perms
name|PermissionStatus
name|parentPermissions
init|=
name|permissions
decl_stmt|;
comment|// if not inheriting and it's the last inode, there's no use in
comment|// computing perms that won't be used
if|if
condition|(
name|inheritPermission
operator|||
operator|(
name|i
operator|<
name|lastInodeIndex
operator|)
condition|)
block|{
comment|// if inheriting (ie. creating a file or symlink), use the parent dir,
comment|// else the supplied permissions
comment|// NOTE: the permissions of the auto-created directories violate posix
name|FsPermission
name|parentFsPerm
init|=
name|inheritPermission
condition|?
name|iip
operator|.
name|getINode
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|getFsPermission
argument_list|()
else|:
name|permissions
operator|.
name|getPermission
argument_list|()
decl_stmt|;
comment|// ensure that the permissions allow user write+execute
if|if
condition|(
operator|!
name|parentFsPerm
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
condition|)
block|{
name|parentFsPerm
operator|=
operator|new
name|FsPermission
argument_list|(
name|parentFsPerm
operator|.
name|getUserAction
argument_list|()
operator|.
name|or
argument_list|(
name|FsAction
operator|.
name|WRITE_EXECUTE
argument_list|)
argument_list|,
name|parentFsPerm
operator|.
name|getGroupAction
argument_list|()
argument_list|,
name|parentFsPerm
operator|.
name|getOtherAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parentPermissions
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
name|parentFsPerm
argument_list|)
condition|)
block|{
name|parentPermissions
operator|=
operator|new
name|PermissionStatus
argument_list|(
name|parentPermissions
operator|.
name|getUserName
argument_list|()
argument_list|,
name|parentPermissions
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|parentFsPerm
argument_list|)
expr_stmt|;
comment|// when inheriting, use same perms for entire path
if|if
condition|(
name|inheritPermission
condition|)
name|permissions
operator|=
name|parentPermissions
expr_stmt|;
block|}
block|}
comment|// create directories beginning from the first null index
for|for
control|(
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pathbuilder
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|iip
operator|=
name|unprotectedMkdir
argument_list|(
name|fsd
argument_list|,
name|fsd
operator|.
name|allocateNewInodeId
argument_list|()
argument_list|,
name|iip
argument_list|,
name|i
argument_list|,
name|components
index|[
name|i
index|]
argument_list|,
operator|(
name|i
operator|<
name|lastInodeIndex
operator|)
condition|?
name|parentPermissions
else|:
name|permissions
argument_list|,
literal|null
argument_list|,
name|now
argument_list|)
expr_stmt|;
if|if
condition|(
name|iip
operator|.
name|getINode
argument_list|(
name|i
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Directory creation also count towards FilesCreated
comment|// to match count of FilesDeleted metric.
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
operator|.
name|incrFilesCreated
argument_list|()
expr_stmt|;
specifier|final
name|String
name|cur
init|=
name|pathbuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logMkDir
argument_list|(
name|cur
argument_list|,
name|iip
operator|.
name|getINode
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"mkdirs: created directory "
operator|+
name|cur
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
return|return
name|iip
return|;
block|}
comment|/**    * Check whether the path specifies a directory    * @throws SnapshotAccessControlException if path is in RO snapshot    */
DECL|method|isDirMutable (FSDirectory fsd, INodesInPath iip)
specifier|private
specifier|static
name|boolean
name|isDirMutable
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|SnapshotAccessControlException
block|{
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|INode
name|node
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
return|return
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|isDirectory
argument_list|()
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** create a directory at index pos.    * The parent path to the directory is at [0, pos-1].    * All ancestors exist. Newly created one stored at index pos.    */
DECL|method|unprotectedMkdir ( FSDirectory fsd, long inodeId, INodesInPath inodesInPath, int pos, byte[] name, PermissionStatus permission, List<AclEntry> aclEntries, long timestamp)
specifier|private
specifier|static
name|INodesInPath
name|unprotectedMkdir
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|long
name|inodeId
parameter_list|,
name|INodesInPath
name|inodesInPath
parameter_list|,
name|int
name|pos
parameter_list|,
name|byte
index|[]
name|name
parameter_list|,
name|PermissionStatus
name|permission
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
parameter_list|,
name|long
name|timestamp
parameter_list|)
throws|throws
name|QuotaExceededException
throws|,
name|AclException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INodeDirectory
name|dir
init|=
operator|new
name|INodeDirectory
argument_list|(
name|inodeId
argument_list|,
name|name
argument_list|,
name|permission
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsd
operator|.
name|addChild
argument_list|(
name|inodesInPath
argument_list|,
name|pos
argument_list|,
name|dir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|aclEntries
operator|!=
literal|null
condition|)
block|{
name|AclStorage
operator|.
name|updateINodeAcl
argument_list|(
name|dir
argument_list|,
name|aclEntries
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
block|}
return|return
name|INodesInPath
operator|.
name|replace
argument_list|(
name|inodesInPath
argument_list|,
name|pos
argument_list|,
name|dir
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|inodesInPath
return|;
block|}
block|}
block|}
end_class

end_unit

