begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|LightWeightHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * PendingRecoveryBlocks tracks recovery attempts for each block and their  * timeouts to ensure we do not have multiple recoveries at the same time  * and retry only after the timeout for a recovery has expired.  */
end_comment

begin_class
DECL|class|PendingRecoveryBlocks
class|class
name|PendingRecoveryBlocks
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|BlockManager
operator|.
name|LOG
decl_stmt|;
comment|/** List of recovery attempts per block and the time they expire. */
DECL|field|recoveryTimeouts
specifier|private
specifier|final
name|LightWeightHashSet
argument_list|<
name|BlockRecoveryAttempt
argument_list|>
name|recoveryTimeouts
init|=
operator|new
name|LightWeightHashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** The timeout for issuing a block recovery again.    * (it should be larger than the time to recover a block)    */
DECL|field|recoveryTimeoutInterval
specifier|private
name|long
name|recoveryTimeoutInterval
decl_stmt|;
DECL|method|PendingRecoveryBlocks (long timeout)
name|PendingRecoveryBlocks
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|recoveryTimeoutInterval
operator|=
name|timeout
expr_stmt|;
block|}
comment|/**    * Remove recovery attempt for the given block.    * @param block whose recovery attempt to remove.    */
DECL|method|remove (BlockInfo block)
specifier|synchronized
name|void
name|remove
parameter_list|(
name|BlockInfo
name|block
parameter_list|)
block|{
name|recoveryTimeouts
operator|.
name|remove
argument_list|(
operator|new
name|BlockRecoveryAttempt
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks whether a recovery attempt has been made for the given block.    * If so, checks whether that attempt has timed out.    * @param block block for which recovery is being attempted    * @return true if no recovery attempt has been made or    *         the previous attempt timed out    */
DECL|method|add (BlockInfo block)
specifier|synchronized
name|boolean
name|add
parameter_list|(
name|BlockInfo
name|block
parameter_list|)
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|long
name|curTime
init|=
name|getTime
argument_list|()
decl_stmt|;
name|BlockRecoveryAttempt
name|recoveryAttempt
init|=
name|recoveryTimeouts
operator|.
name|getElement
argument_list|(
operator|new
name|BlockRecoveryAttempt
argument_list|(
name|block
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|recoveryAttempt
operator|==
literal|null
condition|)
block|{
name|BlockRecoveryAttempt
name|newAttempt
init|=
operator|new
name|BlockRecoveryAttempt
argument_list|(
name|block
argument_list|,
name|curTime
operator|+
name|recoveryTimeoutInterval
argument_list|)
decl_stmt|;
name|added
operator|=
name|recoveryTimeouts
operator|.
name|add
argument_list|(
name|newAttempt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recoveryAttempt
operator|.
name|hasTimedOut
argument_list|(
name|curTime
argument_list|)
condition|)
block|{
comment|// Previous attempt timed out, reset the timeout
name|recoveryAttempt
operator|.
name|setTimeout
argument_list|(
name|curTime
operator|+
name|recoveryTimeoutInterval
argument_list|)
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|long
name|timeoutIn
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|recoveryAttempt
operator|.
name|timeoutAt
operator|-
name|curTime
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Block recovery attempt for "
operator|+
name|block
operator|+
literal|" rejected, as the "
operator|+
literal|"previous attempt times out in "
operator|+
name|timeoutIn
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
comment|/**    * Check whether the given block is under recovery.    * @param b block for which to check    * @return true if the given block is being recovered    */
DECL|method|isUnderRecovery (BlockInfo b)
specifier|synchronized
name|boolean
name|isUnderRecovery
parameter_list|(
name|BlockInfo
name|b
parameter_list|)
block|{
name|BlockRecoveryAttempt
name|recoveryAttempt
init|=
name|recoveryTimeouts
operator|.
name|getElement
argument_list|(
operator|new
name|BlockRecoveryAttempt
argument_list|(
name|b
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|recoveryAttempt
operator|!=
literal|null
return|;
block|}
DECL|method|getTime ()
name|long
name|getTime
parameter_list|()
block|{
return|return
name|Time
operator|.
name|monotonicNow
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setRecoveryTimeoutInterval (long recoveryTimeoutInterval)
specifier|synchronized
name|void
name|setRecoveryTimeoutInterval
parameter_list|(
name|long
name|recoveryTimeoutInterval
parameter_list|)
block|{
name|this
operator|.
name|recoveryTimeoutInterval
operator|=
name|recoveryTimeoutInterval
expr_stmt|;
block|}
comment|/**    * Tracks timeout for block recovery attempt of a given block.    */
DECL|class|BlockRecoveryAttempt
specifier|private
specifier|static
class|class
name|BlockRecoveryAttempt
block|{
DECL|field|blockInfo
specifier|private
specifier|final
name|BlockInfo
name|blockInfo
decl_stmt|;
DECL|field|timeoutAt
specifier|private
name|long
name|timeoutAt
decl_stmt|;
DECL|method|BlockRecoveryAttempt (BlockInfo blockInfo)
specifier|private
name|BlockRecoveryAttempt
parameter_list|(
name|BlockInfo
name|blockInfo
parameter_list|)
block|{
name|this
argument_list|(
name|blockInfo
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockRecoveryAttempt (BlockInfo blockInfo, long timeoutAt)
name|BlockRecoveryAttempt
parameter_list|(
name|BlockInfo
name|blockInfo
parameter_list|,
name|long
name|timeoutAt
parameter_list|)
block|{
name|this
operator|.
name|blockInfo
operator|=
name|blockInfo
expr_stmt|;
name|this
operator|.
name|timeoutAt
operator|=
name|timeoutAt
expr_stmt|;
block|}
DECL|method|hasTimedOut (long currentTime)
name|boolean
name|hasTimedOut
parameter_list|(
name|long
name|currentTime
parameter_list|)
block|{
return|return
name|currentTime
operator|>
name|timeoutAt
return|;
block|}
DECL|method|setTimeout (long newTimeoutAt)
name|void
name|setTimeout
parameter_list|(
name|long
name|newTimeoutAt
parameter_list|)
block|{
name|this
operator|.
name|timeoutAt
operator|=
name|newTimeoutAt
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|blockInfo
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|BlockRecoveryAttempt
condition|)
block|{
return|return
name|this
operator|.
name|blockInfo
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|BlockRecoveryAttempt
operator|)
name|obj
operator|)
operator|.
name|blockInfo
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

