begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockIdManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoContiguous
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|InconsistentFSStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
operator|.
name|DirOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectoryWithSnapshotFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|FileDiffList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotFSImageFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotFSImageFormat
operator|.
name|ReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StepType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Contains inner classes for reading or writing the on-disk format for  * FSImages.  *  * In particular, the format of the FSImage looks like:  *<pre>  * FSImage {  *   layoutVersion: int, namespaceID: int, numberItemsInFSDirectoryTree: long,  *   namesystemGenerationStampV1: long, namesystemGenerationStampV2: long,  *   generationStampAtBlockIdSwitch:long, lastAllocatedBlockId:  *   long transactionID: long, snapshotCounter: int, numberOfSnapshots: int,  *   numOfSnapshottableDirs: int,  *   {FSDirectoryTree, FilesUnderConstruction, SecretManagerState} (can be compressed)  * }  *  * FSDirectoryTree (if {@link Feature#FSIMAGE_NAME_OPTIMIZATION} is supported) {  *   INodeInfo of root, numberOfChildren of root: int  *   [list of INodeInfo of root's children],  *   [list of INodeDirectoryInfo of root's directory children]  * }  *  * FSDirectoryTree (if {@link Feature#FSIMAGE_NAME_OPTIMIZATION} not supported){  *   [list of INodeInfo of INodes in topological order]  * }  *  * INodeInfo {  *   {  *     localName: short + byte[]  *   } when {@link Feature#FSIMAGE_NAME_OPTIMIZATION} is supported  *   or  *   {  *     fullPath: byte[]  *   } when {@link Feature#FSIMAGE_NAME_OPTIMIZATION} is not supported  *   replicationFactor: short, modificationTime: long,  *   accessTime: long, preferredBlockSize: long,  *   numberOfBlocks: int (-1 for INodeDirectory, -2 for INodeSymLink),  *   {  *     nsQuota: long, dsQuota: long,  *     {  *       isINodeSnapshottable: byte,  *       isINodeWithSnapshot: byte (if isINodeSnapshottable is false)  *     } (when {@link Feature#SNAPSHOT} is supported),  *     fsPermission: short, PermissionStatus  *   } for INodeDirectory  *   or  *   {  *     symlinkString, fsPermission: short, PermissionStatus  *   } for INodeSymlink  *   or  *   {  *     [list of BlockInfo]  *     [list of FileDiff]  *     {  *       isINodeFileUnderConstructionSnapshot: byte,  *       {clientName: short + byte[], clientMachine: short + byte[]} (when  *       isINodeFileUnderConstructionSnapshot is true),  *     } (when {@link Feature#SNAPSHOT} is supported and writing snapshotINode),  *     fsPermission: short, PermissionStatus  *   } for INodeFile  * }  *  * INodeDirectoryInfo {  *   fullPath of the directory: short + byte[],  *   numberOfChildren: int, [list of INodeInfo of children INode],  *   {  *     numberOfSnapshots: int,  *     [list of Snapshot] (when NumberOfSnapshots is positive),  *     numberOfDirectoryDiffs: int,  *     [list of DirectoryDiff] (NumberOfDirectoryDiffs is positive),  *     number of children that are directories,  *     [list of INodeDirectoryInfo of the directory children] (includes  *     snapshot copies of deleted sub-directories)  *   } (when {@link Feature#SNAPSHOT} is supported),  * }  *  * Snapshot {  *   snapshotID: int, root of Snapshot: INodeDirectoryInfo (its local name is  *   the name of the snapshot)  * }  *  * DirectoryDiff {  *   full path of the root of the associated Snapshot: short + byte[],  *   childrenSize: int,  *   isSnapshotRoot: byte,  *   snapshotINodeIsNotNull: byte (when isSnapshotRoot is false),  *   snapshotINode: INodeDirectory (when SnapshotINodeIsNotNull is true), Diff  * }  *  * Diff {  *   createdListSize: int, [Local name of INode in created list],  *   deletedListSize: int, [INode in deleted list: INodeInfo]  * }  *  * FileDiff {  *   full path of the root of the associated Snapshot: short + byte[],  *   fileSize: long,  *   snapshotINodeIsNotNull: byte,  *   snapshotINode: INodeFile (when SnapshotINodeIsNotNull is true), Diff  * }  *</pre>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FSImageFormat
specifier|public
class|class
name|FSImageFormat
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|FSImage
operator|.
name|LOG
decl_stmt|;
comment|// Static-only class
DECL|method|FSImageFormat ()
specifier|private
name|FSImageFormat
parameter_list|()
block|{}
DECL|interface|AbstractLoader
interface|interface
name|AbstractLoader
block|{
DECL|method|getLoadedImageMd5 ()
name|MD5Hash
name|getLoadedImageMd5
parameter_list|()
function_decl|;
DECL|method|getLoadedImageTxId ()
name|long
name|getLoadedImageTxId
parameter_list|()
function_decl|;
block|}
DECL|class|LoaderDelegator
specifier|static
class|class
name|LoaderDelegator
implements|implements
name|AbstractLoader
block|{
DECL|field|impl
specifier|private
name|AbstractLoader
name|impl
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|fsn
specifier|private
specifier|final
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|method|LoaderDelegator (Configuration conf, FSNamesystem fsn)
name|LoaderDelegator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSNamesystem
name|fsn
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fsn
operator|=
name|fsn
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLoadedImageMd5 ()
specifier|public
name|MD5Hash
name|getLoadedImageMd5
parameter_list|()
block|{
return|return
name|impl
operator|.
name|getLoadedImageMd5
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLoadedImageTxId ()
specifier|public
name|long
name|getLoadedImageTxId
parameter_list|()
block|{
return|return
name|impl
operator|.
name|getLoadedImageTxId
argument_list|()
return|;
block|}
DECL|method|load (File file, boolean requireSameLayoutVersion)
specifier|public
name|void
name|load
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|requireSameLayoutVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|impl
operator|==
literal|null
argument_list|,
literal|"Image already loaded!"
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|magic
init|=
operator|new
name|byte
index|[
name|FSImageUtil
operator|.
name|MAGIC_HEADER
operator|.
name|length
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|is
argument_list|,
name|magic
argument_list|,
literal|0
argument_list|,
name|magic
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|magic
argument_list|,
name|FSImageUtil
operator|.
name|MAGIC_HEADER
argument_list|)
condition|)
block|{
name|FSImageFormatProtobuf
operator|.
name|Loader
name|loader
init|=
operator|new
name|FSImageFormatProtobuf
operator|.
name|Loader
argument_list|(
name|conf
argument_list|,
name|fsn
argument_list|,
name|requireSameLayoutVersion
argument_list|)
decl_stmt|;
name|impl
operator|=
name|loader
expr_stmt|;
name|loader
operator|.
name|load
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Loader
name|loader
init|=
operator|new
name|Loader
argument_list|(
name|conf
argument_list|,
name|fsn
argument_list|)
decl_stmt|;
name|impl
operator|=
name|loader
expr_stmt|;
name|loader
operator|.
name|load
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Construct a loader class to load the image. It chooses the loader based on    * the layout version.    */
DECL|method|newLoader (Configuration conf, FSNamesystem fsn)
specifier|public
specifier|static
name|LoaderDelegator
name|newLoader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSNamesystem
name|fsn
parameter_list|)
block|{
return|return
operator|new
name|LoaderDelegator
argument_list|(
name|conf
argument_list|,
name|fsn
argument_list|)
return|;
block|}
comment|/**    * A one-shot class responsible for loading an image. The load() function    * should be called once, after which the getter methods may be used to retrieve    * information about the image that was loaded, if loading was successful.    */
DECL|class|Loader
specifier|public
specifier|static
class|class
name|Loader
implements|implements
name|AbstractLoader
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|/** which namesystem this loader is working for */
DECL|field|namesystem
specifier|private
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
comment|/** Set to true once a file has been loaded using this loader. */
DECL|field|loaded
specifier|private
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
comment|/** The transaction ID of the last edit represented by the loaded file */
DECL|field|imgTxId
specifier|private
name|long
name|imgTxId
decl_stmt|;
comment|/** The MD5 sum of the loaded file */
DECL|field|imgDigest
specifier|private
name|MD5Hash
name|imgDigest
decl_stmt|;
DECL|field|snapshotMap
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Snapshot
argument_list|>
name|snapshotMap
init|=
literal|null
decl_stmt|;
DECL|field|referenceMap
specifier|private
specifier|final
name|ReferenceMap
name|referenceMap
init|=
operator|new
name|ReferenceMap
argument_list|()
decl_stmt|;
DECL|method|Loader (Configuration conf, FSNamesystem namesystem)
name|Loader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSNamesystem
name|namesystem
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
block|}
comment|/**      * Return the MD5 checksum of the image that has been loaded.      * @throws IllegalStateException if load() has not yet been called.      */
annotation|@
name|Override
DECL|method|getLoadedImageMd5 ()
specifier|public
name|MD5Hash
name|getLoadedImageMd5
parameter_list|()
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
return|return
name|imgDigest
return|;
block|}
annotation|@
name|Override
DECL|method|getLoadedImageTxId ()
specifier|public
name|long
name|getLoadedImageTxId
parameter_list|()
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
return|return
name|imgTxId
return|;
block|}
comment|/**      * Throw IllegalStateException if load() has not yet been called.      */
DECL|method|checkLoaded ()
specifier|private
name|void
name|checkLoaded
parameter_list|()
block|{
if|if
condition|(
operator|!
name|loaded
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Image not yet loaded!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Throw IllegalStateException if load() has already been called.      */
DECL|method|checkNotLoaded ()
specifier|private
name|void
name|checkNotLoaded
parameter_list|()
block|{
if|if
condition|(
name|loaded
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Image already loaded!"
argument_list|)
throw|;
block|}
block|}
DECL|method|load (File curFile)
specifier|public
name|void
name|load
parameter_list|(
name|File
name|curFile
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotLoaded
argument_list|()
expr_stmt|;
assert|assert
name|curFile
operator|!=
literal|null
operator|:
literal|"curFile is null"
assert|;
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|INODES
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
comment|//
comment|// Load in bits
comment|//
name|MessageDigest
name|digester
init|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
decl_stmt|;
name|DigestInputStream
name|fin
init|=
operator|new
name|DigestInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|curFile
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|,
name|digester
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|fin
argument_list|)
decl_stmt|;
try|try
block|{
comment|// read image version: first appeared in version -1
name|int
name|imgVersion
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|getLayoutVersion
argument_list|()
operator|!=
name|imgVersion
condition|)
block|{
throw|throw
operator|new
name|InconsistentFSStateException
argument_list|(
name|curFile
argument_list|,
literal|"imgVersion "
operator|+
name|imgVersion
operator|+
literal|" expected to be "
operator|+
name|getLayoutVersion
argument_list|()
argument_list|)
throw|;
block|}
name|boolean
name|supportSnapshot
init|=
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|SNAPSHOT
argument_list|,
name|imgVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|ADD_LAYOUT_FLAGS
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|LayoutFlags
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|// read namespaceID: first appeared in version -2
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|long
name|numFiles
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
comment|// read in the last generation stamp for legacy blocks.
name|long
name|genstamp
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|BlockIdManager
name|blockIdManager
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlockIdManager
argument_list|()
decl_stmt|;
name|blockIdManager
operator|.
name|setLegacyGenerationStamp
argument_list|(
name|genstamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|SEQUENTIAL_BLOCK_ID
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
comment|// read the starting generation stamp for sequential block IDs
name|genstamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|blockIdManager
operator|.
name|setGenerationStamp
argument_list|(
name|genstamp
argument_list|)
expr_stmt|;
comment|// read the last generation stamp for blocks created after
comment|// the switch to sequential block IDs.
name|long
name|stampAtIdSwitch
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|blockIdManager
operator|.
name|setLegacyGenerationStampLimit
argument_list|(
name|stampAtIdSwitch
argument_list|)
expr_stmt|;
comment|// read the max sequential block ID.
name|long
name|maxSequentialBlockId
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|blockIdManager
operator|.
name|setLastAllocatedContiguousBlockId
argument_list|(
name|maxSequentialBlockId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|startingGenStamp
init|=
name|blockIdManager
operator|.
name|upgradeLegacyGenerationStamp
argument_list|()
decl_stmt|;
comment|// This is an upgrade.
name|LOG
operator|.
name|info
argument_list|(
literal|"Upgrading to sequential block IDs. Generation stamp "
operator|+
literal|"for new blocks set to "
operator|+
name|startingGenStamp
argument_list|)
expr_stmt|;
block|}
comment|// read the transaction ID of the last edit represented by
comment|// this image
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|STORED_TXIDS
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|imgTxId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|imgTxId
operator|=
literal|0
expr_stmt|;
block|}
comment|// read the last allocated inode id in the fsimage
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|ADD_INODE_ID
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|long
name|lastInodeId
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|namesystem
operator|.
name|dir
operator|.
name|resetLastInodeId
argument_list|(
name|lastInodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"load last allocated InodeId from fsimage:"
operator|+
name|lastInodeId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Old layout version doesn't have inode id."
operator|+
literal|" Will assign new id for each inode."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|supportSnapshot
condition|)
block|{
name|snapshotMap
operator|=
name|namesystem
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|read
argument_list|(
name|in
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|// read compression related info
name|FSImageCompression
name|compression
decl_stmt|;
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|FSIMAGE_COMPRESSION
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|compression
operator|=
name|FSImageCompression
operator|.
name|readCompressionHeader
argument_list|(
name|conf
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compression
operator|=
name|FSImageCompression
operator|.
name|createNoopCompression
argument_list|()
expr_stmt|;
block|}
name|in
operator|=
name|compression
operator|.
name|unwrapInputStream
argument_list|(
name|fin
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading image file "
operator|+
name|curFile
operator|+
literal|" using "
operator|+
name|compression
argument_list|)
expr_stmt|;
comment|// load all inodes
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files = "
operator|+
name|numFiles
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
name|numFiles
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
decl_stmt|;
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|FSIMAGE_NAME_OPTIMIZATION
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|supportSnapshot
condition|)
block|{
name|loadLocalNameINodesWithSnapshot
argument_list|(
name|numFiles
argument_list|,
name|in
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loadLocalNameINodes
argument_list|(
name|numFiles
argument_list|,
name|in
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|loadFullNameINodes
argument_list|(
name|numFiles
argument_list|,
name|in
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
name|loadFilesUnderConstruction
argument_list|(
name|in
argument_list|,
name|supportSnapshot
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
comment|// Now that the step is finished, set counter equal to total to adjust
comment|// for possible under-counting due to reference inodes.
name|prog
operator|.
name|setCount
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
name|numFiles
argument_list|)
expr_stmt|;
name|loadSecretManagerState
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|loadCacheManagerState
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// make sure to read to the end of file
name|boolean
name|eof
init|=
operator|(
name|in
operator|.
name|read
argument_list|()
operator|==
operator|-
literal|1
operator|)
decl_stmt|;
assert|assert
name|eof
operator|:
literal|"Should have reached the end of image file "
operator|+
name|curFile
assert|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|imgDigest
operator|=
operator|new
name|MD5Hash
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
name|loaded
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Image file "
operator|+
name|curFile
operator|+
literal|" of size "
operator|+
name|curFile
operator|.
name|length
argument_list|()
operator|+
literal|" bytes loaded in "
operator|+
operator|(
name|monotonicNow
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
comment|/** Update the root node's attributes */
DECL|method|updateRootAttr (INodeWithAdditionalFields root)
specifier|private
name|void
name|updateRootAttr
parameter_list|(
name|INodeWithAdditionalFields
name|root
parameter_list|)
block|{
specifier|final
name|QuotaCounts
name|q
init|=
name|root
operator|.
name|getQuotaCounts
argument_list|()
decl_stmt|;
specifier|final
name|long
name|nsQuota
init|=
name|q
operator|.
name|getNameSpace
argument_list|()
decl_stmt|;
specifier|final
name|long
name|dsQuota
init|=
name|q
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|dir
decl_stmt|;
if|if
condition|(
name|nsQuota
operator|!=
operator|-
literal|1
operator|||
name|dsQuota
operator|!=
operator|-
literal|1
condition|)
block|{
name|fsDir
operator|.
name|rootDir
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|setQuota
argument_list|(
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
expr_stmt|;
block|}
name|fsDir
operator|.
name|rootDir
operator|.
name|cloneModificationTime
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|fsDir
operator|.
name|rootDir
operator|.
name|clonePermissionStatus
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|/**      * Load fsimage files when 1) only local names are stored,       * and 2) snapshot is supported.      *       * @param numFiles number of files expected to be read      * @param in Image input stream      * @param counter Counter to increment for namenode startup progress      */
DECL|method|loadLocalNameINodesWithSnapshot (long numFiles, DataInput in, Counter counter)
specifier|private
name|void
name|loadLocalNameINodesWithSnapshot
parameter_list|(
name|long
name|numFiles
parameter_list|,
name|DataInput
name|in
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|FSIMAGE_NAME_OPTIMIZATION
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
assert|;
assert|assert
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|SNAPSHOT
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
assert|;
comment|// load root
name|loadRoot
argument_list|(
name|in
argument_list|,
name|counter
argument_list|)
expr_stmt|;
comment|// load rest of the nodes recursively
name|loadDirectoryWithSnapshot
argument_list|(
name|in
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
comment|/**     * load fsimage files assuming only local names are stored. Used when    * snapshots are not supported by the layout version.    *       * @param numFiles number of files expected to be read    * @param in image input stream    * @param counter Counter to increment for namenode startup progress    * @throws IOException    */
DECL|method|loadLocalNameINodes (long numFiles, DataInput in, Counter counter)
specifier|private
name|void
name|loadLocalNameINodes
parameter_list|(
name|long
name|numFiles
parameter_list|,
name|DataInput
name|in
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|FSIMAGE_NAME_OPTIMIZATION
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
assert|;
assert|assert
name|numFiles
operator|>
literal|0
assert|;
comment|// load root
name|loadRoot
argument_list|(
name|in
argument_list|,
name|counter
argument_list|)
expr_stmt|;
comment|// have loaded the first file (the root)
name|numFiles
operator|--
expr_stmt|;
comment|// load rest of the nodes directory by directory
while|while
condition|(
name|numFiles
operator|>
literal|0
condition|)
block|{
name|numFiles
operator|-=
name|loadDirectory
argument_list|(
name|in
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numFiles
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Read unexpect number of files: "
operator|+
operator|-
name|numFiles
argument_list|)
throw|;
block|}
block|}
comment|/**      * Load information about root, and use the information to update the root      * directory of NameSystem.      * @param in The {@link DataInput} instance to read.      * @param counter Counter to increment for namenode startup progress      */
DECL|method|loadRoot (DataInput in, Counter counter)
specifier|private
name|void
name|loadRoot
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// load root
if|if
condition|(
name|in
operator|.
name|readShort
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"First node is not root"
argument_list|)
throw|;
block|}
specifier|final
name|INodeDirectory
name|root
init|=
name|loadINode
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
name|in
argument_list|,
name|counter
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
comment|// update the root's attributes
name|updateRootAttr
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|/** Load children nodes for the parent directory. */
DECL|method|loadChildren (INodeDirectory parent, DataInput in, Counter counter)
specifier|private
name|int
name|loadChildren
parameter_list|(
name|INodeDirectory
name|parent
parameter_list|,
name|DataInput
name|in
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numChildren
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
name|i
operator|++
control|)
block|{
comment|// load single inode
name|INode
name|newNode
init|=
name|loadINodeWithLocalName
argument_list|(
literal|false
argument_list|,
name|in
argument_list|,
literal|true
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|addToParent
argument_list|(
name|parent
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
return|return
name|numChildren
return|;
block|}
comment|/**      * Load a directory when snapshot is supported.      * @param in The {@link DataInput} instance to read.      * @param counter Counter to increment for namenode startup progress      */
DECL|method|loadDirectoryWithSnapshot (DataInput in, Counter counter)
specifier|private
name|void
name|loadDirectoryWithSnapshot
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Step 1. Identify the parent INode
name|long
name|inodeId
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|INodeDirectory
name|parent
init|=
name|this
operator|.
name|namesystem
operator|.
name|dir
operator|.
name|getInode
argument_list|(
name|inodeId
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
comment|// Check if the whole subtree has been saved (for reference nodes)
name|boolean
name|toLoadSubtree
init|=
name|referenceMap
operator|.
name|toProcessSubtree
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|toLoadSubtree
condition|)
block|{
return|return;
block|}
comment|// Step 2. Load snapshots if parent is snapshottable
name|int
name|numSnapshots
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|numSnapshots
operator|>=
literal|0
condition|)
block|{
comment|// load snapshots and snapshotQuota
name|SnapshotFSImageFormat
operator|.
name|loadSnapshotList
argument_list|(
name|parent
argument_list|,
name|numSnapshots
argument_list|,
name|in
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|getSnapshotQuota
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// add the directory to the snapshottable directory list in
comment|// SnapshotManager. Note that we only add root when its snapshot quota
comment|// is positive.
name|this
operator|.
name|namesystem
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|addSnapshottable
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Step 3. Load children nodes under parent
name|loadChildren
argument_list|(
name|parent
argument_list|,
name|in
argument_list|,
name|counter
argument_list|)
expr_stmt|;
comment|// Step 4. load Directory Diff List
name|SnapshotFSImageFormat
operator|.
name|loadDirectoryDiffList
argument_list|(
name|parent
argument_list|,
name|in
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Recursively load sub-directories, including snapshot copies of deleted
comment|// directories
name|int
name|numSubTree
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubTree
condition|;
name|i
operator|++
control|)
block|{
name|loadDirectoryWithSnapshot
argument_list|(
name|in
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Load all children of a directory     *      * @param in input to load from     * @param counter Counter to increment for namenode startup progress     * @return number of child inodes read     * @throws IOException     */
DECL|method|loadDirectory (DataInput in, Counter counter)
specifier|private
name|int
name|loadDirectory
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|parentPath
init|=
name|FSImageSerialization
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// Rename .snapshot paths if we're doing an upgrade
name|parentPath
operator|=
name|renameReservedPathsOnUpgrade
argument_list|(
name|parentPath
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectory
name|parent
init|=
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|namesystem
operator|.
name|dir
operator|.
name|getINode
argument_list|(
name|parentPath
argument_list|,
name|DirOp
operator|.
name|READ
argument_list|)
argument_list|,
name|parentPath
argument_list|)
decl_stmt|;
return|return
name|loadChildren
argument_list|(
name|parent
argument_list|,
name|in
argument_list|,
name|counter
argument_list|)
return|;
block|}
comment|/**    * load fsimage files assuming full path names are stored    *     * @param numFiles total number of files to load    * @param in data input stream    * @param counter Counter to increment for namenode startup progress    * @throws IOException if any error occurs    */
DECL|method|loadFullNameINodes (long numFiles, DataInput in, Counter counter)
specifier|private
name|void
name|loadFullNameINodes
parameter_list|(
name|long
name|numFiles
parameter_list|,
name|DataInput
name|in
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|pathComponents
decl_stmt|;
name|byte
index|[]
index|[]
name|parentPath
init|=
block|{
block|{}
block|}
decl_stmt|;
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|dir
decl_stmt|;
name|INodeDirectory
name|parentINode
init|=
name|fsDir
operator|.
name|rootDir
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|pathComponents
operator|=
name|FSImageSerialization
operator|.
name|readPathComponents
argument_list|(
name|in
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|pathComponents
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|newComponent
init|=
name|renameReservedComponentOnUpgrade
argument_list|(
name|pathComponents
index|[
name|j
index|]
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|newComponent
argument_list|,
name|pathComponents
index|[
name|j
index|]
argument_list|)
condition|)
block|{
name|String
name|oldPath
init|=
name|DFSUtil
operator|.
name|byteArray2PathString
argument_list|(
name|pathComponents
argument_list|)
decl_stmt|;
name|pathComponents
index|[
name|j
index|]
operator|=
name|newComponent
expr_stmt|;
name|String
name|newPath
init|=
name|DFSUtil
operator|.
name|byteArray2PathString
argument_list|(
name|pathComponents
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Renaming reserved path "
operator|+
name|oldPath
operator|+
literal|" to "
operator|+
name|newPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|INode
name|newNode
init|=
name|loadINode
argument_list|(
name|pathComponents
index|[
name|pathComponents
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
literal|false
argument_list|,
name|in
argument_list|,
name|counter
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRoot
argument_list|(
name|pathComponents
argument_list|)
condition|)
block|{
comment|// it is the root
comment|// update the root's attributes
name|updateRootAttr
argument_list|(
name|newNode
operator|.
name|asDirectory
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|namesystem
operator|.
name|dir
operator|.
name|addToInodeMap
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
comment|// check if the new inode belongs to the same parent
if|if
condition|(
operator|!
name|isParent
argument_list|(
name|pathComponents
argument_list|,
name|parentPath
argument_list|)
condition|)
block|{
name|parentINode
operator|=
name|getParentINodeDirectory
argument_list|(
name|pathComponents
argument_list|)
expr_stmt|;
name|parentPath
operator|=
name|getParent
argument_list|(
name|pathComponents
argument_list|)
expr_stmt|;
block|}
comment|// add new inode
name|addToParent
argument_list|(
name|parentINode
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getParentINodeDirectory (byte[][] pathComponents)
specifier|private
name|INodeDirectory
name|getParentINodeDirectory
parameter_list|(
name|byte
index|[]
index|[]
name|pathComponents
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pathComponents
operator|.
name|length
operator|<
literal|2
condition|)
block|{
comment|// root
return|return
literal|null
return|;
block|}
comment|// Gets the parent INode
specifier|final
name|INodesInPath
name|inodes
init|=
name|namesystem
operator|.
name|dir
operator|.
name|getINodesInPath
argument_list|(
name|pathComponents
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
decl_stmt|;
return|return
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|inodes
operator|.
name|getINode
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|,
name|pathComponents
argument_list|)
return|;
block|}
comment|/**    * Add the child node to parent and, if child is a file, update block map.    * This method is only used for image loading so that synchronization,    * modification time update and space count update are not needed.    */
DECL|method|addToParent (INodeDirectory parent, INode child)
specifier|private
name|void
name|addToParent
parameter_list|(
name|INodeDirectory
name|parent
parameter_list|,
name|INode
name|child
parameter_list|)
throws|throws
name|IllegalReservedPathException
block|{
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|dir
decl_stmt|;
if|if
condition|(
name|parent
operator|==
name|fsDir
operator|.
name|rootDir
condition|)
block|{
name|child
operator|.
name|setLocalName
argument_list|(
name|renameReservedRootComponentOnUpgrade
argument_list|(
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: This does not update space counts for parents
if|if
condition|(
operator|!
name|parent
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
condition|)
block|{
return|return;
block|}
name|namesystem
operator|.
name|dir
operator|.
name|cacheName
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|updateBlocksMap
argument_list|(
name|child
operator|.
name|asFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateBlocksMap (INodeFile file)
specifier|public
name|void
name|updateBlocksMap
parameter_list|(
name|INodeFile
name|file
parameter_list|)
block|{
comment|// Add file->block mapping
specifier|final
name|BlockInfo
index|[]
name|blocks
init|=
name|file
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|blocks
operator|!=
literal|null
condition|)
block|{
specifier|final
name|BlockManager
name|bm
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|file
operator|.
name|setBlock
argument_list|(
name|i
argument_list|,
name|bm
operator|.
name|addBlockCollectionWithCheck
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** @return The FSDirectory of the namesystem where the fsimage is loaded */
DECL|method|getFSDirectoryInLoading ()
specifier|public
name|FSDirectory
name|getFSDirectoryInLoading
parameter_list|()
block|{
return|return
name|namesystem
operator|.
name|dir
return|;
block|}
DECL|method|loadINodeWithLocalName (boolean isSnapshotINode, DataInput in, boolean updateINodeMap)
specifier|public
name|INode
name|loadINodeWithLocalName
parameter_list|(
name|boolean
name|isSnapshotINode
parameter_list|,
name|DataInput
name|in
parameter_list|,
name|boolean
name|updateINodeMap
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loadINodeWithLocalName
argument_list|(
name|isSnapshotINode
argument_list|,
name|in
argument_list|,
name|updateINodeMap
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|loadINodeWithLocalName (boolean isSnapshotINode, DataInput in, boolean updateINodeMap, Counter counter)
specifier|public
name|INode
name|loadINodeWithLocalName
parameter_list|(
name|boolean
name|isSnapshotINode
parameter_list|,
name|DataInput
name|in
parameter_list|,
name|boolean
name|updateINodeMap
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|localName
init|=
name|FSImageSerialization
operator|.
name|readLocalName
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|localName
operator|=
name|renameReservedComponentOnUpgrade
argument_list|(
name|localName
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|INode
name|inode
init|=
name|loadINode
argument_list|(
name|localName
argument_list|,
name|isSnapshotINode
argument_list|,
name|in
argument_list|,
name|counter
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateINodeMap
condition|)
block|{
name|namesystem
operator|.
name|dir
operator|.
name|addToInodeMap
argument_list|(
name|inode
argument_list|)
expr_stmt|;
block|}
return|return
name|inode
return|;
block|}
comment|/**    * load an inode from fsimage except for its name    *     * @param in data input stream from which image is read    * @param counter Counter to increment for namenode startup progress    * @return an inode    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|loadINode (final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter)
name|INode
name|loadINode
parameter_list|(
specifier|final
name|byte
index|[]
name|localName
parameter_list|,
name|boolean
name|isSnapshotINode
parameter_list|,
name|DataInput
name|in
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|imgVersion
init|=
name|getLayoutVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|SNAPSHOT
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|verifyINodeName
argument_list|(
name|localName
argument_list|)
expr_stmt|;
block|}
name|long
name|inodeId
init|=
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|ADD_INODE_ID
argument_list|,
name|imgVersion
argument_list|)
condition|?
name|in
operator|.
name|readLong
argument_list|()
else|:
name|namesystem
operator|.
name|dir
operator|.
name|allocateNewInodeId
argument_list|()
decl_stmt|;
specifier|final
name|short
name|replication
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|adjustReplication
argument_list|(
name|in
operator|.
name|readShort
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|modificationTime
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|atime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|FILE_ACCESS_TIME
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|atime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|blockSize
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numBlocks
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|numBlocks
operator|>=
literal|0
condition|)
block|{
comment|// file
comment|// read blocks
name|BlockInfo
index|[]
name|blocks
init|=
operator|new
name|BlockInfoContiguous
index|[
name|numBlocks
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numBlocks
condition|;
name|j
operator|++
control|)
block|{
name|blocks
index|[
name|j
index|]
operator|=
operator|new
name|BlockInfoContiguous
argument_list|(
name|replication
argument_list|)
expr_stmt|;
name|blocks
index|[
name|j
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|String
name|clientName
init|=
literal|""
decl_stmt|;
name|String
name|clientMachine
init|=
literal|""
decl_stmt|;
name|boolean
name|underConstruction
init|=
literal|false
decl_stmt|;
name|FileDiffList
name|fileDiffs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|SNAPSHOT
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
comment|// read diffs
name|fileDiffs
operator|=
name|SnapshotFSImageFormat
operator|.
name|loadFileDiffList
argument_list|(
name|in
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSnapshotINode
condition|)
block|{
name|underConstruction
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|underConstruction
condition|)
block|{
name|clientName
operator|=
name|FSImageSerialization
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|clientMachine
operator|=
name|FSImageSerialization
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// convert the last block to BlockUC
if|if
condition|(
name|blocks
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|BlockInfo
name|lastBlk
init|=
name|blocks
index|[
name|blocks
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|lastBlk
operator|.
name|convertToBlockUnderConstruction
argument_list|(
name|HdfsServerConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
name|PermissionStatus
name|permissions
init|=
name|PermissionStatus
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// return
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
block|{
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|INodeFile
name|file
init|=
operator|new
name|INodeFile
argument_list|(
name|inodeId
argument_list|,
name|localName
argument_list|,
name|permissions
argument_list|,
name|modificationTime
argument_list|,
name|atime
argument_list|,
operator|(
name|BlockInfoContiguous
index|[]
operator|)
name|blocks
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|underConstruction
condition|)
block|{
name|file
operator|.
name|toUnderConstruction
argument_list|(
name|clientName
argument_list|,
name|clientMachine
argument_list|)
expr_stmt|;
block|}
return|return
name|fileDiffs
operator|==
literal|null
condition|?
name|file
else|:
operator|new
name|INodeFile
argument_list|(
name|file
argument_list|,
name|fileDiffs
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|numBlocks
operator|==
operator|-
literal|1
condition|)
block|{
comment|//directory
comment|//read quotas
specifier|final
name|long
name|nsQuota
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|long
name|dsQuota
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|DISKSPACE_QUOTA
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|dsQuota
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|//read snapshot info
name|boolean
name|snapshottable
init|=
literal|false
decl_stmt|;
name|boolean
name|withSnapshot
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|SNAPSHOT
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|snapshottable
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|snapshottable
condition|)
block|{
name|withSnapshot
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|PermissionStatus
name|permissions
init|=
name|PermissionStatus
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|//return
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
block|{
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
specifier|final
name|INodeDirectory
name|dir
init|=
operator|new
name|INodeDirectory
argument_list|(
name|inodeId
argument_list|,
name|localName
argument_list|,
name|permissions
argument_list|,
name|modificationTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsQuota
operator|>=
literal|0
operator|||
name|dsQuota
operator|>=
literal|0
condition|)
block|{
name|dir
operator|.
name|addDirectoryWithQuotaFeature
argument_list|(
operator|new
name|DirectoryWithQuotaFeature
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpaceQuota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|storageSpaceQuota
argument_list|(
name|dsQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withSnapshot
condition|)
block|{
name|dir
operator|.
name|addSnapshotFeature
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapshottable
condition|)
block|{
name|dir
operator|.
name|addSnapshottableFeature
argument_list|()
expr_stmt|;
block|}
return|return
name|dir
return|;
block|}
elseif|else
if|if
condition|(
name|numBlocks
operator|==
operator|-
literal|2
condition|)
block|{
comment|//symlink
if|if
condition|(
operator|!
name|FileSystem
operator|.
name|areSymlinksEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Symlinks not supported - please remove symlink before upgrading to this version of HDFS"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|symlink
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
specifier|final
name|PermissionStatus
name|permissions
init|=
name|PermissionStatus
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
literal|null
condition|)
block|{
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|INodeSymlink
argument_list|(
name|inodeId
argument_list|,
name|localName
argument_list|,
name|permissions
argument_list|,
name|modificationTime
argument_list|,
name|atime
argument_list|,
name|symlink
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|numBlocks
operator|==
operator|-
literal|3
condition|)
block|{
comment|//reference
comment|// Intentionally do not increment counter, because it is too difficult at
comment|// this point to assess whether or not this is a reference that counts
comment|// toward quota.
specifier|final
name|boolean
name|isWithName
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
comment|// lastSnapshotId for WithName node, dstSnapshotId for DstReference node
name|int
name|snapshotId
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|INodeReference
operator|.
name|WithCount
name|withCount
init|=
name|referenceMap
operator|.
name|loadINodeReferenceWithCount
argument_list|(
name|isSnapshotINode
argument_list|,
name|in
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWithName
condition|)
block|{
return|return
operator|new
name|INodeReference
operator|.
name|WithName
argument_list|(
literal|null
argument_list|,
name|withCount
argument_list|,
name|localName
argument_list|,
name|snapshotId
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|INodeReference
name|ref
init|=
operator|new
name|INodeReference
operator|.
name|DstReference
argument_list|(
literal|null
argument_list|,
name|withCount
argument_list|,
name|snapshotId
argument_list|)
decl_stmt|;
return|return
name|ref
return|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown inode type: numBlocks="
operator|+
name|numBlocks
argument_list|)
throw|;
block|}
comment|/** Load {@link INodeFileAttributes}. */
DECL|method|loadINodeFileAttributes (DataInput in)
specifier|public
name|INodeFileAttributes
name|loadINodeFileAttributes
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|layoutVersion
init|=
name|getLayoutVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|OPTIMIZE_SNAPSHOT_INODES
argument_list|,
name|layoutVersion
argument_list|)
condition|)
block|{
return|return
name|loadINodeWithLocalName
argument_list|(
literal|true
argument_list|,
name|in
argument_list|,
literal|false
argument_list|)
operator|.
name|asFile
argument_list|()
return|;
block|}
specifier|final
name|byte
index|[]
name|name
init|=
name|FSImageSerialization
operator|.
name|readLocalName
argument_list|(
name|in
argument_list|)
decl_stmt|;
specifier|final
name|PermissionStatus
name|permissions
init|=
name|PermissionStatus
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
specifier|final
name|long
name|modificationTime
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|accessTime
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|short
name|replication
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|adjustReplication
argument_list|(
name|in
operator|.
name|readShort
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|preferredBlockSize
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
return|return
operator|new
name|INodeFileAttributes
operator|.
name|SnapshotCopy
argument_list|(
name|name
argument_list|,
name|permissions
argument_list|,
literal|null
argument_list|,
name|modificationTime
argument_list|,
name|accessTime
argument_list|,
name|replication
argument_list|,
literal|null
argument_list|,
name|preferredBlockSize
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|null
argument_list|,
name|BlockType
operator|.
name|CONTIGUOUS
argument_list|)
return|;
block|}
DECL|method|loadINodeDirectoryAttributes (DataInput in)
specifier|public
name|INodeDirectoryAttributes
name|loadINodeDirectoryAttributes
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|layoutVersion
init|=
name|getLayoutVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|OPTIMIZE_SNAPSHOT_INODES
argument_list|,
name|layoutVersion
argument_list|)
condition|)
block|{
return|return
name|loadINodeWithLocalName
argument_list|(
literal|true
argument_list|,
name|in
argument_list|,
literal|false
argument_list|)
operator|.
name|asDirectory
argument_list|()
return|;
block|}
specifier|final
name|byte
index|[]
name|name
init|=
name|FSImageSerialization
operator|.
name|readLocalName
argument_list|(
name|in
argument_list|)
decl_stmt|;
specifier|final
name|PermissionStatus
name|permissions
init|=
name|PermissionStatus
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
specifier|final
name|long
name|modificationTime
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
comment|// Read quotas: quota by storage type does not need to be processed below.
comment|// It is handled only in protobuf based FsImagePBINode class for newer
comment|// fsImages. Tools using this class such as legacy-mode of offline image viewer
comment|// should only load legacy FSImages without newer features.
specifier|final
name|long
name|nsQuota
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
specifier|final
name|long
name|dsQuota
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
return|return
name|nsQuota
operator|==
operator|-
literal|1L
operator|&&
name|dsQuota
operator|==
operator|-
literal|1L
condition|?
operator|new
name|INodeDirectoryAttributes
operator|.
name|SnapshotCopy
argument_list|(
name|name
argument_list|,
name|permissions
argument_list|,
literal|null
argument_list|,
name|modificationTime
argument_list|,
literal|null
argument_list|)
else|:
operator|new
name|INodeDirectoryAttributes
operator|.
name|CopyWithQuota
argument_list|(
name|name
argument_list|,
name|permissions
argument_list|,
literal|null
argument_list|,
name|modificationTime
argument_list|,
name|nsQuota
argument_list|,
name|dsQuota
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|loadFilesUnderConstruction (DataInput in, boolean supportSnapshot, Counter counter)
specifier|private
name|void
name|loadFilesUnderConstruction
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|boolean
name|supportSnapshot
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|dir
decl_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files under construction = "
operator|+
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|INodeFile
name|cons
init|=
name|FSImageSerialization
operator|.
name|readINodeUnderConstruction
argument_list|(
name|in
argument_list|,
name|namesystem
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
decl_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
comment|// verify that file exists in namespace
name|String
name|path
init|=
name|cons
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|INodeFile
name|oldnode
init|=
literal|null
decl_stmt|;
name|boolean
name|inSnapshot
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|FSDirectory
operator|.
name|isReservedName
argument_list|(
name|path
argument_list|)
operator|&&
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|ADD_INODE_ID
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO: for HDFS-5428, we use reserved path for those INodeFileUC in
comment|// snapshot. If we support INode ID in the layout version, we can use
comment|// the inode id to find the oldnode.
name|oldnode
operator|=
name|namesystem
operator|.
name|dir
operator|.
name|getInode
argument_list|(
name|cons
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
expr_stmt|;
name|inSnapshot
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|renameReservedPathsOnUpgrade
argument_list|(
name|path
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsDir
operator|.
name|getINodesInPath
argument_list|(
name|path
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|oldnode
operator|=
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|FileUnderConstructionFeature
name|uc
init|=
name|cons
operator|.
name|getFileUnderConstructionFeature
argument_list|()
decl_stmt|;
name|oldnode
operator|.
name|toUnderConstruction
argument_list|(
name|uc
operator|.
name|getClientName
argument_list|()
argument_list|,
name|uc
operator|.
name|getClientMachine
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldnode
operator|.
name|numBlocks
argument_list|()
operator|>
literal|0
condition|)
block|{
name|BlockInfo
name|ucBlock
init|=
name|cons
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
comment|// we do not replace the inode, just replace the last block of oldnode
name|BlockInfo
name|info
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|addBlockCollectionWithCheck
argument_list|(
name|ucBlock
argument_list|,
name|oldnode
argument_list|)
decl_stmt|;
name|oldnode
operator|.
name|setBlock
argument_list|(
name|oldnode
operator|.
name|numBlocks
argument_list|()
operator|-
literal|1
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|inSnapshot
condition|)
block|{
name|namesystem
operator|.
name|leaseManager
operator|.
name|addLease
argument_list|(
name|uc
operator|.
name|getClientName
argument_list|()
argument_list|,
name|oldnode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadSecretManagerState (DataInput in)
specifier|private
name|void
name|loadSecretManagerState
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|imgVersion
init|=
name|getLayoutVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|DELEGATION_TOKEN
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
comment|//SecretManagerState is not available.
comment|//This must not happen if security is turned on.
return|return;
block|}
name|namesystem
operator|.
name|loadSecretManagerStateCompat
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|loadCacheManagerState (DataInput in)
specifier|private
name|void
name|loadCacheManagerState
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|imgVersion
init|=
name|getLayoutVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|LayoutVersion
operator|.
name|Feature
operator|.
name|CACHING
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
return|return;
block|}
name|namesystem
operator|.
name|getCacheManager
argument_list|()
operator|.
name|loadStateCompat
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|getLayoutVersion ()
specifier|private
name|int
name|getLayoutVersion
parameter_list|()
block|{
return|return
name|namesystem
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getLayoutVersion
argument_list|()
return|;
block|}
DECL|method|isRoot (byte[][] path)
specifier|private
name|boolean
name|isRoot
parameter_list|(
name|byte
index|[]
index|[]
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|length
operator|==
literal|1
operator|&&
name|path
index|[
literal|0
index|]
operator|==
literal|null
return|;
block|}
DECL|method|isParent (byte[][] path, byte[][] parent)
specifier|private
name|boolean
name|isParent
parameter_list|(
name|byte
index|[]
index|[]
name|path
parameter_list|,
name|byte
index|[]
index|[]
name|parent
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|parent
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|parent
operator|.
name|length
operator|==
literal|0
operator|||
name|path
operator|.
name|length
operator|!=
name|parent
operator|.
name|length
operator|+
literal|1
condition|)
return|return
literal|false
return|;
name|boolean
name|isParent
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parent
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|isParent
operator|=
name|isParent
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|path
index|[
name|i
index|]
argument_list|,
name|parent
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|isParent
return|;
block|}
comment|/**      * Return string representing the parent of the given path.      */
DECL|method|getParent (String path)
name|String
name|getParent
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getParent (byte[][] path)
name|byte
index|[]
index|[]
name|getParent
parameter_list|(
name|byte
index|[]
index|[]
name|path
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|path
index|[
name|i
index|]
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|path
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|path
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getSnapshot (DataInput in)
specifier|public
name|Snapshot
name|getSnapshot
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|snapshotMap
operator|.
name|get
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|field|renameReservedMap
specifier|public
specifier|static
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|renameReservedMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Use the default key-value pairs that will be used to determine how to    * rename reserved paths on upgrade.    */
annotation|@
name|VisibleForTesting
DECL|method|useDefaultRenameReservedPairs ()
specifier|public
specifier|static
name|void
name|useDefaultRenameReservedPairs
parameter_list|()
block|{
name|renameReservedMap
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|HdfsServerConstants
operator|.
name|RESERVED_PATH_COMPONENTS
control|)
block|{
name|renameReservedMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|key
operator|+
literal|"."
operator|+
name|HdfsServerConstants
operator|.
name|NAMENODE_LAYOUT_VERSION
operator|+
literal|"."
operator|+
literal|"UPGRADE_RENAMED"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the key-value pairs that will be used to determine how to rename    * reserved paths on upgrade.    */
annotation|@
name|VisibleForTesting
DECL|method|setRenameReservedPairs (String renameReserved)
specifier|public
specifier|static
name|void
name|setRenameReservedPairs
parameter_list|(
name|String
name|renameReserved
parameter_list|)
block|{
comment|// Clear and set the default values
name|useDefaultRenameReservedPairs
argument_list|()
expr_stmt|;
comment|// Overwrite with provided values
name|setRenameReservedMapInternal
argument_list|(
name|renameReserved
argument_list|)
expr_stmt|;
block|}
DECL|method|setRenameReservedMapInternal (String renameReserved)
specifier|private
specifier|static
name|void
name|setRenameReservedMapInternal
parameter_list|(
name|String
name|renameReserved
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|pairs
init|=
name|StringUtils
operator|.
name|getTrimmedStringCollection
argument_list|(
name|renameReserved
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|pairs
control|)
block|{
name|String
index|[]
name|pair
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|p
argument_list|,
literal|'/'
argument_list|,
literal|'='
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|pair
operator|.
name|length
operator|==
literal|2
argument_list|,
literal|"Could not parse key-value pair "
operator|+
name|p
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|pair
index|[
literal|0
index|]
decl_stmt|;
name|String
name|value
init|=
name|pair
index|[
literal|1
index|]
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|DFSUtil
operator|.
name|isReservedPathComponent
argument_list|(
name|key
argument_list|)
argument_list|,
literal|"Unknown reserved path "
operator|+
name|key
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|DFSUtil
operator|.
name|isValidNameForComponent
argument_list|(
name|value
argument_list|)
argument_list|,
literal|"Invalid rename path for "
operator|+
name|key
operator|+
literal|": "
operator|+
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Will rename reserved path "
operator|+
name|key
operator|+
literal|" to "
operator|+
name|value
argument_list|)
expr_stmt|;
name|renameReservedMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * When upgrading from an old version, the filesystem could contain paths    * that are now reserved in the new version (e.g. .snapshot). This renames    * these new reserved paths to a user-specified value to avoid collisions    * with the reserved name.    *     * @param path Old path potentially containing a reserved path    * @return New path with reserved path components renamed to user value    */
DECL|method|renameReservedPathsOnUpgrade (String path, final int layoutVersion)
specifier|static
name|String
name|renameReservedPathsOnUpgrade
parameter_list|(
name|String
name|path
parameter_list|,
specifier|final
name|int
name|layoutVersion
parameter_list|)
throws|throws
name|IllegalReservedPathException
block|{
specifier|final
name|String
name|oldPath
init|=
name|path
decl_stmt|;
comment|// If any known LVs aren't supported, we're doing an upgrade
if|if
condition|(
operator|!
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|ADD_INODE_ID
argument_list|,
name|layoutVersion
argument_list|)
condition|)
block|{
name|String
index|[]
name|components
init|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Only need to worry about the root directory
if|if
condition|(
name|components
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|components
index|[
literal|1
index|]
operator|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|renameReservedRootComponentOnUpgrade
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|components
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|layoutVersion
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|=
name|DFSUtil
operator|.
name|strings2PathString
argument_list|(
name|components
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|SNAPSHOT
argument_list|,
name|layoutVersion
argument_list|)
condition|)
block|{
name|String
index|[]
name|components
init|=
name|INode
operator|.
name|getPathNames
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// Special case the root path
if|if
condition|(
name|components
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|path
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|components
index|[
name|i
index|]
operator|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|renameReservedComponentOnUpgrade
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
argument_list|,
name|layoutVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|DFSUtil
operator|.
name|strings2PathString
argument_list|(
name|components
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|oldPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Upgrade process renamed reserved path "
operator|+
name|oldPath
operator|+
literal|" to "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
DECL|field|RESERVED_ERROR_MSG
specifier|private
specifier|final
specifier|static
name|String
name|RESERVED_ERROR_MSG
init|=
name|FSDirectory
operator|.
name|DOT_RESERVED_PATH_PREFIX
operator|+
literal|" is a reserved path and "
operator|+
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|+
literal|" is a reserved path component in"
operator|+
literal|" this version of HDFS. Please rollback and delete or rename"
operator|+
literal|" this path, or upgrade with the "
operator|+
name|StartupOption
operator|.
name|RENAMERESERVED
operator|.
name|getName
argument_list|()
operator|+
literal|" [key-value pairs]"
operator|+
literal|" option to automatically rename these paths during upgrade."
decl_stmt|;
comment|/**    * Same as {@link #renameReservedPathsOnUpgrade}, but for a single    * byte array path component.    */
DECL|method|renameReservedComponentOnUpgrade (byte[] component, final int layoutVersion)
specifier|private
specifier|static
name|byte
index|[]
name|renameReservedComponentOnUpgrade
parameter_list|(
name|byte
index|[]
name|component
parameter_list|,
specifier|final
name|int
name|layoutVersion
parameter_list|)
throws|throws
name|IllegalReservedPathException
block|{
comment|// If the LV doesn't support snapshots, we're doing an upgrade
if|if
condition|(
operator|!
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|SNAPSHOT
argument_list|,
name|layoutVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|component
argument_list|,
name|HdfsServerConstants
operator|.
name|DOT_SNAPSHOT_DIR_BYTES
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|renameReservedMap
operator|.
name|containsKey
argument_list|(
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalReservedPathException
argument_list|(
name|RESERVED_ERROR_MSG
argument_list|)
throw|;
block|}
name|component
operator|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|renameReservedMap
operator|.
name|get
argument_list|(
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|component
return|;
block|}
comment|/**    * Same as {@link #renameReservedPathsOnUpgrade}, but for a single    * byte array path component.    */
DECL|method|renameReservedRootComponentOnUpgrade (byte[] component, final int layoutVersion)
specifier|private
specifier|static
name|byte
index|[]
name|renameReservedRootComponentOnUpgrade
parameter_list|(
name|byte
index|[]
name|component
parameter_list|,
specifier|final
name|int
name|layoutVersion
parameter_list|)
throws|throws
name|IllegalReservedPathException
block|{
comment|// If the LV doesn't support inode IDs, we're doing an upgrade
if|if
condition|(
operator|!
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|ADD_INODE_ID
argument_list|,
name|layoutVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|component
argument_list|,
name|FSDirectory
operator|.
name|DOT_RESERVED
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|renameReservedMap
operator|.
name|containsKey
argument_list|(
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalReservedPathException
argument_list|(
name|RESERVED_ERROR_MSG
argument_list|)
throw|;
block|}
specifier|final
name|String
name|renameString
init|=
name|renameReservedMap
operator|.
name|get
argument_list|(
name|FSDirectory
operator|.
name|DOT_RESERVED_STRING
argument_list|)
decl_stmt|;
name|component
operator|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|renameString
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Renamed root path "
operator|+
name|FSDirectory
operator|.
name|DOT_RESERVED_STRING
operator|+
literal|" to "
operator|+
name|renameString
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|component
return|;
block|}
comment|/**    * A one-shot class responsible for writing an image file.    * The write() function should be called once, after which the getter    * functions may be used to retrieve information about the file that was written.    *    * This is replaced by the PB-based FSImage. The class is to maintain    * compatibility for the external fsimage tool.    */
annotation|@
name|Deprecated
DECL|class|Saver
specifier|static
class|class
name|Saver
block|{
DECL|field|LAYOUT_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|LAYOUT_VERSION
init|=
operator|-
literal|51
decl_stmt|;
DECL|field|CHECK_CANCEL_INTERVAL
specifier|public
specifier|static
specifier|final
name|int
name|CHECK_CANCEL_INTERVAL
init|=
literal|4096
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|SaveNamespaceContext
name|context
decl_stmt|;
comment|/** Set to true once an image has been written */
DECL|field|saved
specifier|private
name|boolean
name|saved
init|=
literal|false
decl_stmt|;
DECL|field|checkCancelCounter
specifier|private
name|long
name|checkCancelCounter
init|=
literal|0
decl_stmt|;
comment|/** The MD5 checksum of the file that was written */
DECL|field|savedDigest
specifier|private
name|MD5Hash
name|savedDigest
decl_stmt|;
DECL|field|referenceMap
specifier|private
specifier|final
name|ReferenceMap
name|referenceMap
init|=
operator|new
name|ReferenceMap
argument_list|()
decl_stmt|;
DECL|field|snapshotUCMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|INodeFile
argument_list|>
name|snapshotUCMap
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|INodeFile
argument_list|>
argument_list|()
decl_stmt|;
comment|/** @throws IllegalStateException if the instance has not yet saved an image */
DECL|method|checkSaved ()
specifier|private
name|void
name|checkSaved
parameter_list|()
block|{
if|if
condition|(
operator|!
name|saved
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"FSImageSaver has not saved an image"
argument_list|)
throw|;
block|}
block|}
comment|/** @throws IllegalStateException if the instance has already saved an image */
DECL|method|checkNotSaved ()
specifier|private
name|void
name|checkNotSaved
parameter_list|()
block|{
if|if
condition|(
name|saved
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"FSImageSaver has already saved an image"
argument_list|)
throw|;
block|}
block|}
DECL|method|Saver (SaveNamespaceContext context)
name|Saver
parameter_list|(
name|SaveNamespaceContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**      * Return the MD5 checksum of the image file that was saved.      */
DECL|method|getSavedDigest ()
name|MD5Hash
name|getSavedDigest
parameter_list|()
block|{
name|checkSaved
argument_list|()
expr_stmt|;
return|return
name|savedDigest
return|;
block|}
DECL|method|save (File newFile, FSImageCompression compression)
name|void
name|save
parameter_list|(
name|File
name|newFile
parameter_list|,
name|FSImageCompression
name|compression
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotSaved
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|sourceNamesystem
init|=
name|context
operator|.
name|getSourceNamesystem
argument_list|()
decl_stmt|;
specifier|final
name|INodeDirectory
name|rootDir
init|=
name|sourceNamesystem
operator|.
name|dir
operator|.
name|rootDir
decl_stmt|;
specifier|final
name|long
name|numINodes
init|=
name|rootDir
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|getSpaceConsumed
argument_list|()
operator|.
name|getNameSpace
argument_list|()
decl_stmt|;
name|String
name|sdPath
init|=
name|newFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|INODES
argument_list|,
name|sdPath
argument_list|)
decl_stmt|;
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|,
name|numINodes
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
comment|//
comment|// Write out data
comment|//
name|MessageDigest
name|digester
init|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
decl_stmt|;
name|FileOutputStream
name|fout
init|=
operator|new
name|FileOutputStream
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
name|DigestOutputStream
name|fos
init|=
operator|new
name|DigestOutputStream
argument_list|(
name|fout
argument_list|,
name|digester
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|LAYOUT_VERSION
argument_list|)
expr_stmt|;
name|LayoutFlags
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// We use the non-locked version of getNamespaceInfo here since
comment|// the coordinating thread of saveNamespace already has read-locked
comment|// the namespace for us. If we attempt to take another readlock
comment|// from the actual saver thread, there's a potential of a
comment|// fairness-related deadlock. See the comments on HDFS-2223.
name|out
operator|.
name|writeInt
argument_list|(
name|sourceNamesystem
operator|.
name|unprotectedGetNamespaceInfo
argument_list|()
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|numINodes
argument_list|)
expr_stmt|;
specifier|final
name|BlockIdManager
name|blockIdManager
init|=
name|sourceNamesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlockIdManager
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|blockIdManager
operator|.
name|getLegacyGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|blockIdManager
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|blockIdManager
operator|.
name|getGenerationStampAtblockIdSwitch
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|blockIdManager
operator|.
name|getLastAllocatedContiguousBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|context
operator|.
name|getTxId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|sourceNamesystem
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|sourceNamesystem
operator|.
name|getSnapshotManager
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// write compression info and set up compressed stream
name|out
operator|=
name|compression
operator|.
name|writeHeaderAndWrapStream
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Saving image file "
operator|+
name|newFile
operator|+
literal|" using "
operator|+
name|compression
argument_list|)
expr_stmt|;
comment|// save the root
name|saveINode2Image
argument_list|(
name|rootDir
argument_list|,
name|out
argument_list|,
literal|false
argument_list|,
name|referenceMap
argument_list|,
name|counter
argument_list|)
expr_stmt|;
comment|// save the rest of the nodes
name|saveImage
argument_list|(
name|rootDir
argument_list|,
name|out
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
comment|// Now that the step is finished, set counter equal to total to adjust
comment|// for possible under-counting due to reference inodes.
name|prog
operator|.
name|setCount
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|,
name|numINodes
argument_list|)
expr_stmt|;
comment|// save files under construction
comment|// TODO: for HDFS-5428, since we cannot break the compatibility of
comment|// fsimage, we store part of the under-construction files that are only
comment|// in snapshots in this "under-construction-file" section. As a
comment|// temporary solution, we use "/.reserved/.inodes/<inodeid>" as their
comment|// paths, so that when loading fsimage we do not put them into the lease
comment|// map. In the future, we can remove this hack when we can bump the
comment|// layout version.
name|saveFilesUnderConstruction
argument_list|(
name|sourceNamesystem
argument_list|,
name|out
argument_list|,
name|snapshotUCMap
argument_list|)
expr_stmt|;
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|sourceNamesystem
operator|.
name|saveSecretManagerStateCompat
argument_list|(
name|out
argument_list|,
name|sdPath
argument_list|)
expr_stmt|;
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|sourceNamesystem
operator|.
name|getCacheManager
argument_list|()
operator|.
name|saveStateCompat
argument_list|(
name|out
argument_list|,
name|sdPath
argument_list|)
expr_stmt|;
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|fout
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|saved
operator|=
literal|true
expr_stmt|;
comment|// set md5 of the saved image
name|savedDigest
operator|=
operator|new
name|MD5Hash
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Image file "
operator|+
name|newFile
operator|+
literal|" of size "
operator|+
name|newFile
operator|.
name|length
argument_list|()
operator|+
literal|" bytes saved in "
operator|+
operator|(
name|monotonicNow
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Save children INodes.      * @param children The list of children INodes      * @param out The DataOutputStream to write      * @param inSnapshot Whether the parent directory or its ancestor is in      *                   the deleted list of some snapshot (caused by rename or      *                   deletion)      * @param counter Counter to increment for namenode startup progress      * @return Number of children that are directory      */
DECL|method|saveChildren (ReadOnlyList<INode> children, DataOutputStream out, boolean inSnapshot, Counter counter)
specifier|private
name|int
name|saveChildren
parameter_list|(
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
parameter_list|,
name|DataOutputStream
name|out
parameter_list|,
name|boolean
name|inSnapshot
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Write normal children INode.
name|out
operator|.
name|writeInt
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dirNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
comment|// print all children first
comment|// TODO: for HDFS-5428, we cannot change the format/content of fsimage
comment|// here, thus even if the parent directory is in snapshot, we still
comment|// do not handle INodeUC as those stored in deleted list
name|saveINode2Image
argument_list|(
name|child
argument_list|,
name|out
argument_list|,
literal|false
argument_list|,
name|referenceMap
argument_list|,
name|counter
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dirNum
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inSnapshot
operator|&&
name|child
operator|.
name|isFile
argument_list|()
operator|&&
name|child
operator|.
name|asFile
argument_list|()
operator|.
name|isUnderConstruction
argument_list|()
condition|)
block|{
name|this
operator|.
name|snapshotUCMap
operator|.
name|put
argument_list|(
name|child
operator|.
name|getId
argument_list|()
argument_list|,
name|child
operator|.
name|asFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkCancelCounter
operator|++
operator|%
name|CHECK_CANCEL_INTERVAL
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dirNum
return|;
block|}
comment|/**      * Save file tree image starting from the given root.      * This is a recursive procedure, which first saves all children and      * snapshot diffs of a current directory and then moves inside the      * sub-directories.      *      * @param current The current node      * @param out The DataoutputStream to write the image      * @param toSaveSubtree Whether or not to save the subtree to fsimage. For      *                      reference node, its subtree may already have been      *                      saved before.      * @param inSnapshot Whether the current directory is in snapshot      * @param counter Counter to increment for namenode startup progress      */
DECL|method|saveImage (INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter)
specifier|private
name|void
name|saveImage
parameter_list|(
name|INodeDirectory
name|current
parameter_list|,
name|DataOutputStream
name|out
parameter_list|,
name|boolean
name|toSaveSubtree
parameter_list|,
name|boolean
name|inSnapshot
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write the inode id of the directory
name|out
operator|.
name|writeLong
argument_list|(
name|current
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|toSaveSubtree
condition|)
block|{
return|return;
block|}
specifier|final
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|current
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
name|int
name|dirNum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|snapshotDirs
init|=
literal|null
decl_stmt|;
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|current
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|snapshotDirs
operator|=
operator|new
name|ArrayList
argument_list|<
name|INodeDirectory
argument_list|>
argument_list|()
expr_stmt|;
name|sf
operator|.
name|getSnapshotDirectory
argument_list|(
name|snapshotDirs
argument_list|)
expr_stmt|;
name|dirNum
operator|+=
name|snapshotDirs
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// 2. Write INodeDirectorySnapshottable#snapshotsByNames to record all
comment|// Snapshots
if|if
condition|(
name|current
operator|.
name|isDirectory
argument_list|()
operator|&&
name|current
operator|.
name|asDirectory
argument_list|()
operator|.
name|isSnapshottable
argument_list|()
condition|)
block|{
name|SnapshotFSImageFormat
operator|.
name|saveSnapshots
argument_list|(
name|current
operator|.
name|asDirectory
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// # of snapshots
block|}
comment|// 3. Write children INode
name|dirNum
operator|+=
name|saveChildren
argument_list|(
name|children
argument_list|,
name|out
argument_list|,
name|inSnapshot
argument_list|,
name|counter
argument_list|)
expr_stmt|;
comment|// 4. Write DirectoryDiff lists, if there is any.
name|SnapshotFSImageFormat
operator|.
name|saveDirectoryDiffList
argument_list|(
name|current
argument_list|,
name|out
argument_list|,
name|referenceMap
argument_list|)
expr_stmt|;
comment|// Write sub-tree of sub-directories, including possible snapshots of
comment|// deleted sub-directories
name|out
operator|.
name|writeInt
argument_list|(
name|dirNum
argument_list|)
expr_stmt|;
comment|// the number of sub-directories
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|child
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// make sure we only save the subtree under a reference node once
name|boolean
name|toSave
init|=
name|child
operator|.
name|isReference
argument_list|()
condition|?
name|referenceMap
operator|.
name|toProcessSubtree
argument_list|(
name|child
operator|.
name|getId
argument_list|()
argument_list|)
else|:
literal|true
decl_stmt|;
name|saveImage
argument_list|(
name|child
operator|.
name|asDirectory
argument_list|()
argument_list|,
name|out
argument_list|,
name|toSave
argument_list|,
name|inSnapshot
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapshotDirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INodeDirectory
name|subDir
range|:
name|snapshotDirs
control|)
block|{
comment|// make sure we only save the subtree under a reference node once
name|boolean
name|toSave
init|=
name|subDir
operator|.
name|getParentReference
argument_list|()
operator|!=
literal|null
condition|?
name|referenceMap
operator|.
name|toProcessSubtree
argument_list|(
name|subDir
operator|.
name|getId
argument_list|()
argument_list|)
else|:
literal|true
decl_stmt|;
name|saveImage
argument_list|(
name|subDir
argument_list|,
name|out
argument_list|,
name|toSave
argument_list|,
literal|true
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Saves inode and increments progress counter.      *      * @param inode INode to save      * @param out DataOutputStream to receive inode      * @param writeUnderConstruction boolean true if this is under construction      * @param referenceMap ReferenceMap containing reference inodes      * @param counter Counter to increment for namenode startup progress      * @throws IOException thrown if there is an I/O error      */
DECL|method|saveINode2Image (INode inode, DataOutputStream out, boolean writeUnderConstruction, ReferenceMap referenceMap, Counter counter)
specifier|private
name|void
name|saveINode2Image
parameter_list|(
name|INode
name|inode
parameter_list|,
name|DataOutputStream
name|out
parameter_list|,
name|boolean
name|writeUnderConstruction
parameter_list|,
name|ReferenceMap
name|referenceMap
parameter_list|,
name|Counter
name|counter
parameter_list|)
throws|throws
name|IOException
block|{
name|FSImageSerialization
operator|.
name|saveINode2Image
argument_list|(
name|inode
argument_list|,
name|out
argument_list|,
name|writeUnderConstruction
argument_list|,
name|referenceMap
argument_list|)
expr_stmt|;
comment|// Intentionally do not increment counter for reference inodes, because it
comment|// is too difficult at this point to assess whether or not this is a
comment|// reference that counts toward quota.
if|if
condition|(
operator|!
operator|(
name|inode
operator|instanceof
name|INodeReference
operator|)
condition|)
block|{
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Serializes leases.      */
DECL|method|saveFilesUnderConstruction (FSNamesystem fsn, DataOutputStream out, Map<Long, INodeFile> snapshotUCMap)
name|void
name|saveFilesUnderConstruction
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|DataOutputStream
name|out
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|INodeFile
argument_list|>
name|snapshotUCMap
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This is run by an inferior thread of saveNamespace, which holds a read
comment|// lock on our behalf. If we took the read lock here, we could block
comment|// for fairness if a writer is waiting on the lock.
specifier|final
name|LeaseManager
name|leaseManager
init|=
name|fsn
operator|.
name|getLeaseManager
argument_list|()
decl_stmt|;
specifier|final
name|FSDirectory
name|dir
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|leaseManager
init|)
block|{
name|Collection
argument_list|<
name|Long
argument_list|>
name|filesWithUC
init|=
name|leaseManager
operator|.
name|getINodeIdWithLeases
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|filesWithUC
control|)
block|{
comment|// TODO: for HDFS-5428, because of rename operations, some
comment|// under-construction files that are
comment|// in the current fs directory can also be captured in the
comment|// snapshotUCMap. We should remove them from the snapshotUCMap.
name|snapshotUCMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|filesWithUC
operator|.
name|size
argument_list|()
operator|+
name|snapshotUCMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// write the size
for|for
control|(
name|Long
name|id
range|:
name|filesWithUC
control|)
block|{
name|INodeFile
name|file
init|=
name|dir
operator|.
name|getInode
argument_list|(
name|id
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|file
operator|.
name|getFullPathName
argument_list|()
decl_stmt|;
name|FSImageSerialization
operator|.
name|writeINodeUnderConstruction
argument_list|(
name|out
argument_list|,
name|file
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|INodeFile
argument_list|>
name|entry
range|:
name|snapshotUCMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// for those snapshot INodeFileUC, we use "/.reserved/.inodes/<inodeid>"
comment|// as their paths
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|FSDirectory
operator|.
name|DOT_RESERVED_PATH_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|FSDirectory
operator|.
name|DOT_INODES_STRING
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|FSImageSerialization
operator|.
name|writeINodeUnderConstruction
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

