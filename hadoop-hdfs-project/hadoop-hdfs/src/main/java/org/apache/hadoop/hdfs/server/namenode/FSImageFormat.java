begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|now
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|InconsistentFSStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Contains inner classes for reading or writing the on-disk format for FSImages.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FSImageFormat
class|class
name|FSImageFormat
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|FSImage
operator|.
name|LOG
decl_stmt|;
comment|// Static-only class
DECL|method|FSImageFormat ()
specifier|private
name|FSImageFormat
parameter_list|()
block|{}
comment|/**    * A one-shot class responsible for loading an image. The load() function    * should be called once, after which the getter methods may be used to retrieve    * information about the image that was loaded, if loading was successful.    */
DECL|class|Loader
specifier|static
class|class
name|Loader
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|/** which namesystem this loader is working for */
DECL|field|namesystem
specifier|private
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
comment|/** Set to true once a file has been loaded using this loader. */
DECL|field|loaded
specifier|private
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
comment|/** The transaction ID of the last edit represented by the loaded file */
DECL|field|imgTxId
specifier|private
name|long
name|imgTxId
decl_stmt|;
comment|/** The MD5 sum of the loaded file */
DECL|field|imgDigest
specifier|private
name|MD5Hash
name|imgDigest
decl_stmt|;
DECL|method|Loader (Configuration conf, FSNamesystem namesystem)
name|Loader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSNamesystem
name|namesystem
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
block|}
comment|/**      * Return the MD5 checksum of the image that has been loaded.      * @throws IllegalStateException if load() has not yet been called.      */
DECL|method|getLoadedImageMd5 ()
name|MD5Hash
name|getLoadedImageMd5
parameter_list|()
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
return|return
name|imgDigest
return|;
block|}
DECL|method|getLoadedImageTxId ()
name|long
name|getLoadedImageTxId
parameter_list|()
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
return|return
name|imgTxId
return|;
block|}
comment|/**      * Throw IllegalStateException if load() has not yet been called.      */
DECL|method|checkLoaded ()
specifier|private
name|void
name|checkLoaded
parameter_list|()
block|{
if|if
condition|(
operator|!
name|loaded
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Image not yet loaded!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Throw IllegalStateException if load() has already been called.      */
DECL|method|checkNotLoaded ()
specifier|private
name|void
name|checkNotLoaded
parameter_list|()
block|{
if|if
condition|(
name|loaded
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Image already loaded!"
argument_list|)
throw|;
block|}
block|}
DECL|method|load (File curFile)
name|void
name|load
parameter_list|(
name|File
name|curFile
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotLoaded
argument_list|()
expr_stmt|;
assert|assert
name|curFile
operator|!=
literal|null
operator|:
literal|"curFile is null"
assert|;
name|long
name|startTime
init|=
name|now
argument_list|()
decl_stmt|;
comment|//
comment|// Load in bits
comment|//
name|MessageDigest
name|digester
init|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
decl_stmt|;
name|DigestInputStream
name|fin
init|=
operator|new
name|DigestInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|curFile
argument_list|)
argument_list|,
name|digester
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|fin
argument_list|)
decl_stmt|;
try|try
block|{
comment|// read image version: first appeared in version -1
name|int
name|imgVersion
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|getLayoutVersion
argument_list|()
operator|!=
name|imgVersion
condition|)
block|{
throw|throw
operator|new
name|InconsistentFSStateException
argument_list|(
name|curFile
argument_list|,
literal|"imgVersion "
operator|+
name|imgVersion
operator|+
literal|" expected to be "
operator|+
name|getLayoutVersion
argument_list|()
argument_list|)
throw|;
block|}
comment|// read namespaceID: first appeared in version -2
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|long
name|numFiles
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
comment|// read in the last generation stamp.
name|long
name|genstamp
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|namesystem
operator|.
name|setGenerationStamp
argument_list|(
name|genstamp
argument_list|)
expr_stmt|;
comment|// read the transaction ID of the last edit represented by
comment|// this image
if|if
condition|(
name|LayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|STORED_TXIDS
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|imgTxId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|imgTxId
operator|=
literal|0
expr_stmt|;
block|}
comment|// read compression related info
name|FSImageCompression
name|compression
decl_stmt|;
if|if
condition|(
name|LayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|FSIMAGE_COMPRESSION
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|compression
operator|=
name|FSImageCompression
operator|.
name|readCompressionHeader
argument_list|(
name|conf
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compression
operator|=
name|FSImageCompression
operator|.
name|createNoopCompression
argument_list|()
expr_stmt|;
block|}
name|in
operator|=
name|compression
operator|.
name|unwrapInputStream
argument_list|(
name|fin
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading image file "
operator|+
name|curFile
operator|+
literal|" using "
operator|+
name|compression
argument_list|)
expr_stmt|;
comment|// reset INodeId. TODO: remove this after inodeId is persisted in fsimage
name|namesystem
operator|.
name|resetLastInodeIdWithoutChecking
argument_list|(
name|INodeId
operator|.
name|LAST_RESERVED_ID
argument_list|)
expr_stmt|;
comment|// load all inodes
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files = "
operator|+
name|numFiles
argument_list|)
expr_stmt|;
if|if
condition|(
name|LayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|FSIMAGE_NAME_OPTIMIZATION
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|loadLocalNameINodes
argument_list|(
name|numFiles
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loadFullNameINodes
argument_list|(
name|numFiles
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|loadFilesUnderConstruction
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|loadSecretManagerState
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// make sure to read to the end of file
name|int
name|eof
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
assert|assert
name|eof
operator|==
operator|-
literal|1
operator|:
literal|"Should have reached the end of image file "
operator|+
name|curFile
assert|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|imgDigest
operator|=
operator|new
name|MD5Hash
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
name|loaded
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Image file of size "
operator|+
name|curFile
operator|.
name|length
argument_list|()
operator|+
literal|" loaded in "
operator|+
operator|(
name|now
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
comment|/** Update the root node's attributes */
DECL|method|updateRootAttr (INode root)
specifier|private
name|void
name|updateRootAttr
parameter_list|(
name|INode
name|root
parameter_list|)
block|{
name|long
name|nsQuota
init|=
name|root
operator|.
name|getNsQuota
argument_list|()
decl_stmt|;
name|long
name|dsQuota
init|=
name|root
operator|.
name|getDsQuota
argument_list|()
decl_stmt|;
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|dir
decl_stmt|;
if|if
condition|(
name|nsQuota
operator|!=
operator|-
literal|1
operator|||
name|dsQuota
operator|!=
operator|-
literal|1
condition|)
block|{
name|fsDir
operator|.
name|rootDir
operator|.
name|setQuota
argument_list|(
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
expr_stmt|;
block|}
name|fsDir
operator|.
name|rootDir
operator|.
name|setModificationTime
argument_list|(
name|root
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|fsDir
operator|.
name|rootDir
operator|.
name|clonePermissionStatus
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|/**     * load fsimage files assuming only local names are stored    *       * @param numFiles number of files expected to be read    * @param in image input stream    * @throws IOException    */
DECL|method|loadLocalNameINodes (long numFiles, DataInputStream in)
specifier|private
name|void
name|loadLocalNameINodes
parameter_list|(
name|long
name|numFiles
parameter_list|,
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|LayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|FSIMAGE_NAME_OPTIMIZATION
argument_list|,
name|getLayoutVersion
argument_list|()
argument_list|)
assert|;
assert|assert
name|numFiles
operator|>
literal|0
assert|;
comment|// load root
if|if
condition|(
name|in
operator|.
name|readShort
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"First node is not root"
argument_list|)
throw|;
block|}
name|INode
name|root
init|=
name|loadINode
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// update the root's attributes
name|updateRootAttr
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|numFiles
operator|--
expr_stmt|;
comment|// load rest of the nodes directory by directory
while|while
condition|(
name|numFiles
operator|>
literal|0
condition|)
block|{
name|numFiles
operator|-=
name|loadDirectory
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numFiles
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Read unexpect number of files: "
operator|+
operator|-
name|numFiles
argument_list|)
throw|;
block|}
block|}
comment|/**     * Load all children of a directory     *      * @param in     * @return number of child inodes read     * @throws IOException     */
DECL|method|loadDirectory (DataInputStream in)
specifier|private
name|int
name|loadDirectory
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|parentPath
init|=
name|FSImageSerialization
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|dir
decl_stmt|;
specifier|final
name|INodeDirectory
name|parent
init|=
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|fsDir
operator|.
name|rootDir
operator|.
name|getNode
argument_list|(
name|parentPath
argument_list|,
literal|true
argument_list|)
argument_list|,
name|parentPath
argument_list|)
decl_stmt|;
name|int
name|numChildren
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numChildren
condition|;
name|i
operator|++
control|)
block|{
comment|// load single inode
name|byte
index|[]
name|localName
init|=
operator|new
name|byte
index|[
name|in
operator|.
name|readShort
argument_list|()
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|localName
argument_list|)
expr_stmt|;
comment|// read local name
name|INode
name|newNode
init|=
name|loadINode
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// read rest of inode
comment|// add to parent
name|newNode
operator|.
name|setLocalName
argument_list|(
name|localName
argument_list|)
expr_stmt|;
name|addToParent
argument_list|(
name|parent
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
return|return
name|numChildren
return|;
block|}
comment|/**    * load fsimage files assuming full path names are stored    *     * @param numFiles total number of files to load    * @param in data input stream    * @throws IOException if any error occurs    */
DECL|method|loadFullNameINodes (long numFiles, DataInputStream in)
specifier|private
name|void
name|loadFullNameINodes
parameter_list|(
name|long
name|numFiles
parameter_list|,
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|pathComponents
decl_stmt|;
name|byte
index|[]
index|[]
name|parentPath
init|=
block|{
block|{}
block|}
decl_stmt|;
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|dir
decl_stmt|;
name|INodeDirectory
name|parentINode
init|=
name|fsDir
operator|.
name|rootDir
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|pathComponents
operator|=
name|FSImageSerialization
operator|.
name|readPathComponents
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|INode
name|newNode
init|=
name|loadINode
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRoot
argument_list|(
name|pathComponents
argument_list|)
condition|)
block|{
comment|// it is the root
comment|// update the root's attributes
name|updateRootAttr
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// check if the new inode belongs to the same parent
if|if
condition|(
operator|!
name|isParent
argument_list|(
name|pathComponents
argument_list|,
name|parentPath
argument_list|)
condition|)
block|{
name|parentINode
operator|=
name|fsDir
operator|.
name|rootDir
operator|.
name|getParent
argument_list|(
name|pathComponents
argument_list|)
expr_stmt|;
name|parentPath
operator|=
name|getParent
argument_list|(
name|pathComponents
argument_list|)
expr_stmt|;
block|}
comment|// add new inode
name|newNode
operator|.
name|setLocalName
argument_list|(
name|pathComponents
index|[
name|pathComponents
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|addToParent
argument_list|(
name|parentINode
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add the child node to parent and, if child is a file, update block map.    * This method is only used for image loading so that synchronization,    * modification time update and space count update are not needed.    */
DECL|method|addToParent (INodeDirectory parent, INode child)
name|void
name|addToParent
parameter_list|(
name|INodeDirectory
name|parent
parameter_list|,
name|INode
name|child
parameter_list|)
block|{
comment|// NOTE: This does not update space counts for parents
if|if
condition|(
operator|!
name|parent
operator|.
name|addChild
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|namesystem
operator|.
name|dir
operator|.
name|cacheName
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|// Add file->block mapping
specifier|final
name|INodeFile
name|file
init|=
operator|(
name|INodeFile
operator|)
name|child
decl_stmt|;
specifier|final
name|BlockInfo
index|[]
name|blocks
init|=
name|file
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
specifier|final
name|BlockManager
name|bm
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|file
operator|.
name|setBlock
argument_list|(
name|i
argument_list|,
name|bm
operator|.
name|addBlockCollection
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * load an inode from fsimage except for its name    *     * @param in data input stream from which image is read    * @return an inode    */
DECL|method|loadINode (DataInputStream in)
specifier|private
name|INode
name|loadINode
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|modificationTime
init|=
literal|0
decl_stmt|;
name|long
name|atime
init|=
literal|0
decl_stmt|;
name|long
name|blockSize
init|=
literal|0
decl_stmt|;
name|int
name|imgVersion
init|=
name|getLayoutVersion
argument_list|()
decl_stmt|;
name|long
name|inodeId
init|=
name|namesystem
operator|.
name|allocateNewInodeId
argument_list|()
decl_stmt|;
name|short
name|replication
init|=
name|in
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|replication
operator|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|adjustReplication
argument_list|(
name|replication
argument_list|)
expr_stmt|;
name|modificationTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|LayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|FILE_ACCESS_TIME
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
name|atime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|blockSize
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|numBlocks
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|BlockInfo
name|blocks
index|[]
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|numBlocks
operator|>=
literal|0
condition|)
block|{
name|blocks
operator|=
operator|new
name|BlockInfo
index|[
name|numBlocks
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numBlocks
condition|;
name|j
operator|++
control|)
block|{
name|blocks
index|[
name|j
index|]
operator|=
operator|new
name|BlockInfo
argument_list|(
name|replication
argument_list|)
expr_stmt|;
name|blocks
index|[
name|j
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|// get quota only when the node is a directory
name|long
name|nsQuota
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|blocks
operator|==
literal|null
operator|&&
name|numBlocks
operator|==
operator|-
literal|1
condition|)
block|{
name|nsQuota
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|long
name|dsQuota
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|LayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|DISKSPACE_QUOTA
argument_list|,
name|imgVersion
argument_list|)
operator|&&
name|blocks
operator|==
literal|null
operator|&&
name|numBlocks
operator|==
operator|-
literal|1
condition|)
block|{
name|dsQuota
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|// Read the symlink only when the node is a symlink
name|String
name|symlink
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|numBlocks
operator|==
operator|-
literal|2
condition|)
block|{
name|symlink
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|PermissionStatus
name|permissions
init|=
name|PermissionStatus
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|INode
operator|.
name|newINode
argument_list|(
name|inodeId
argument_list|,
name|permissions
argument_list|,
name|blocks
argument_list|,
name|symlink
argument_list|,
name|replication
argument_list|,
name|modificationTime
argument_list|,
name|atime
argument_list|,
name|nsQuota
argument_list|,
name|dsQuota
argument_list|,
name|blockSize
argument_list|)
return|;
block|}
DECL|method|loadFilesUnderConstruction (DataInputStream in)
specifier|private
name|void
name|loadFilesUnderConstruction
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|dir
decl_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of files under construction = "
operator|+
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|INodeFileUnderConstruction
name|cons
init|=
name|FSImageSerialization
operator|.
name|readINodeUnderConstruction
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// verify that file exists in namespace
name|String
name|path
init|=
name|cons
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|INodeFile
name|oldnode
init|=
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|fsDir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|fsDir
operator|.
name|replaceNode
argument_list|(
name|path
argument_list|,
name|oldnode
argument_list|,
name|cons
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|leaseManager
operator|.
name|addLease
argument_list|(
name|cons
operator|.
name|getClientName
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadSecretManagerState (DataInputStream in)
specifier|private
name|void
name|loadSecretManagerState
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|imgVersion
init|=
name|getLayoutVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|LayoutVersion
operator|.
name|supports
argument_list|(
name|Feature
operator|.
name|DELEGATION_TOKEN
argument_list|,
name|imgVersion
argument_list|)
condition|)
block|{
comment|//SecretManagerState is not available.
comment|//This must not happen if security is turned on.
return|return;
block|}
name|namesystem
operator|.
name|loadSecretManagerState
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|getLayoutVersion ()
specifier|private
name|int
name|getLayoutVersion
parameter_list|()
block|{
return|return
name|namesystem
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getLayoutVersion
argument_list|()
return|;
block|}
DECL|method|isRoot (byte[][] path)
specifier|private
name|boolean
name|isRoot
parameter_list|(
name|byte
index|[]
index|[]
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|length
operator|==
literal|1
operator|&&
name|path
index|[
literal|0
index|]
operator|==
literal|null
return|;
block|}
DECL|method|isParent (byte[][] path, byte[][] parent)
specifier|private
name|boolean
name|isParent
parameter_list|(
name|byte
index|[]
index|[]
name|path
parameter_list|,
name|byte
index|[]
index|[]
name|parent
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|parent
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|parent
operator|.
name|length
operator|==
literal|0
operator|||
name|path
operator|.
name|length
operator|!=
name|parent
operator|.
name|length
operator|+
literal|1
condition|)
return|return
literal|false
return|;
name|boolean
name|isParent
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parent
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|isParent
operator|=
name|isParent
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|path
index|[
name|i
index|]
argument_list|,
name|parent
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|isParent
return|;
block|}
comment|/**      * Return string representing the parent of the given path.      */
DECL|method|getParent (String path)
name|String
name|getParent
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getParent (byte[][] path)
name|byte
index|[]
index|[]
name|getParent
parameter_list|(
name|byte
index|[]
index|[]
name|path
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|path
index|[
name|i
index|]
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|path
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|path
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * A one-shot class responsible for writing an image file.    * The write() function should be called once, after which the getter    * functions may be used to retrieve information about the file that was written.    */
DECL|class|Saver
specifier|static
class|class
name|Saver
block|{
DECL|field|context
specifier|private
specifier|final
name|SaveNamespaceContext
name|context
decl_stmt|;
comment|/** Set to true once an image has been written */
DECL|field|saved
specifier|private
name|boolean
name|saved
init|=
literal|false
decl_stmt|;
comment|/** The MD5 checksum of the file that was written */
DECL|field|savedDigest
specifier|private
name|MD5Hash
name|savedDigest
decl_stmt|;
DECL|field|PATH_SEPARATOR
specifier|static
specifier|private
specifier|final
name|byte
index|[]
name|PATH_SEPARATOR
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
comment|/** @throws IllegalStateException if the instance has not yet saved an image */
DECL|method|checkSaved ()
specifier|private
name|void
name|checkSaved
parameter_list|()
block|{
if|if
condition|(
operator|!
name|saved
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"FSImageSaver has not saved an image"
argument_list|)
throw|;
block|}
block|}
comment|/** @throws IllegalStateException if the instance has already saved an image */
DECL|method|checkNotSaved ()
specifier|private
name|void
name|checkNotSaved
parameter_list|()
block|{
if|if
condition|(
name|saved
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"FSImageSaver has already saved an image"
argument_list|)
throw|;
block|}
block|}
DECL|method|Saver (SaveNamespaceContext context)
name|Saver
parameter_list|(
name|SaveNamespaceContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**      * Return the MD5 checksum of the image file that was saved.      */
DECL|method|getSavedDigest ()
name|MD5Hash
name|getSavedDigest
parameter_list|()
block|{
name|checkSaved
argument_list|()
expr_stmt|;
return|return
name|savedDigest
return|;
block|}
DECL|method|save (File newFile, FSImageCompression compression)
name|void
name|save
parameter_list|(
name|File
name|newFile
parameter_list|,
name|FSImageCompression
name|compression
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotSaved
argument_list|()
expr_stmt|;
specifier|final
name|FSNamesystem
name|sourceNamesystem
init|=
name|context
operator|.
name|getSourceNamesystem
argument_list|()
decl_stmt|;
name|FSDirectory
name|fsDir
init|=
name|sourceNamesystem
operator|.
name|dir
decl_stmt|;
name|long
name|startTime
init|=
name|now
argument_list|()
decl_stmt|;
comment|//
comment|// Write out data
comment|//
name|MessageDigest
name|digester
init|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
decl_stmt|;
name|FileOutputStream
name|fout
init|=
operator|new
name|FileOutputStream
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
name|DigestOutputStream
name|fos
init|=
operator|new
name|DigestOutputStream
argument_list|(
name|fout
argument_list|,
name|digester
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
argument_list|)
expr_stmt|;
comment|// We use the non-locked version of getNamespaceInfo here since
comment|// the coordinating thread of saveNamespace already has read-locked
comment|// the namespace for us. If we attempt to take another readlock
comment|// from the actual saver thread, there's a potential of a
comment|// fairness-related deadlock. See the comments on HDFS-2223.
name|out
operator|.
name|writeInt
argument_list|(
name|sourceNamesystem
operator|.
name|unprotectedGetNamespaceInfo
argument_list|()
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|fsDir
operator|.
name|rootDir
operator|.
name|numItemsInTree
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|sourceNamesystem
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|context
operator|.
name|getTxId
argument_list|()
argument_list|)
expr_stmt|;
comment|// write compression info and set up compressed stream
name|out
operator|=
name|compression
operator|.
name|writeHeaderAndWrapStream
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Saving image file "
operator|+
name|newFile
operator|+
literal|" using "
operator|+
name|compression
argument_list|)
expr_stmt|;
name|byte
index|[]
name|byteStore
init|=
operator|new
name|byte
index|[
literal|4
operator|*
name|HdfsConstants
operator|.
name|MAX_PATH_LENGTH
index|]
decl_stmt|;
name|ByteBuffer
name|strbuf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|byteStore
argument_list|)
decl_stmt|;
comment|// save the root
name|FSImageSerialization
operator|.
name|saveINode2Image
argument_list|(
name|fsDir
operator|.
name|rootDir
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// save the rest of the nodes
name|saveImage
argument_list|(
name|strbuf
argument_list|,
name|fsDir
operator|.
name|rootDir
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// save files under construction
name|sourceNamesystem
operator|.
name|saveFilesUnderConstruction
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|sourceNamesystem
operator|.
name|saveSecretManagerState
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|strbuf
operator|=
literal|null
expr_stmt|;
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|fout
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|saved
operator|=
literal|true
expr_stmt|;
comment|// set md5 of the saved image
name|savedDigest
operator|=
operator|new
name|MD5Hash
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Image file of size "
operator|+
name|newFile
operator|.
name|length
argument_list|()
operator|+
literal|" saved in "
operator|+
operator|(
name|now
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Save file tree image starting from the given root.      * This is a recursive procedure, which first saves all children of      * a current directory and then moves inside the sub-directories.      */
DECL|method|saveImage (ByteBuffer currentDirName, INodeDirectory current, DataOutputStream out)
specifier|private
name|void
name|saveImage
parameter_list|(
name|ByteBuffer
name|currentDirName
parameter_list|,
name|INodeDirectory
name|current
parameter_list|,
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|current
operator|.
name|getChildrenList
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// print prefix (parent directory name)
name|int
name|prefixLen
init|=
name|currentDirName
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefixLen
operator|==
literal|0
condition|)
block|{
comment|// root
name|out
operator|.
name|writeShort
argument_list|(
name|PATH_SEPARATOR
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// non-root directories
name|out
operator|.
name|writeShort
argument_list|(
name|prefixLen
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|currentDirName
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|prefixLen
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
comment|// print all children first
name|FSImageSerialization
operator|.
name|saveINode2Image
argument_list|(
name|child
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|++
operator|%
literal|50
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|child
operator|.
name|isDirectory
argument_list|()
condition|)
continue|continue;
name|currentDirName
operator|.
name|put
argument_list|(
name|PATH_SEPARATOR
argument_list|)
operator|.
name|put
argument_list|(
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
expr_stmt|;
name|saveImage
argument_list|(
name|currentDirName
argument_list|,
operator|(
name|INodeDirectory
operator|)
name|child
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|currentDirName
operator|.
name|position
argument_list|(
name|prefixLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

