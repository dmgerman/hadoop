begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|DatanodeIDWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ExtendedBlockWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|LocatedBlockWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|NamespaceInfoWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ProtocolSignatureWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_comment
comment|/**  * This class is used on the server side. Calls come across the wire for the  * protocol family of Release 23 onwards. This class translates the R23 data  * types to the native data types used inside the NN as specified in the generic  * DatanodeProtocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|DatanodeProtocolServerSideTranslatorR23
specifier|public
class|class
name|DatanodeProtocolServerSideTranslatorR23
implements|implements
name|DatanodeWireProtocol
block|{
DECL|field|server
specifier|final
specifier|private
name|DatanodeProtocol
name|server
decl_stmt|;
comment|/**    * Constructor    * @param server - the NN server    * @throws IOException    */
DECL|method|DatanodeProtocolServerSideTranslatorR23 (DatanodeProtocol server)
specifier|public
name|DatanodeProtocolServerSideTranslatorR23
parameter_list|(
name|DatanodeProtocol
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
comment|/**    * The client side will redirect getProtocolSignature to    * getProtocolSignature2.    *     * However the RPC layer below on the Server side will call getProtocolVersion    * and possibly in the future getProtocolSignature. Hence we still implement    * it even though the end client's call will never reach here.    */
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Don't forward this to the server. The protocol version and signature is      * that of {@link DatanodeProtocol}      *       */
if|if
condition|(
operator|!
name|protocol
operator|.
name|equals
argument_list|(
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|DatanodeWireProtocol
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Namenode Serverside implements "
operator|+
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|DatanodeWireProtocol
operator|.
name|class
argument_list|)
operator|+
literal|". The following requested protocol is unknown: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|clientMethodsHash
argument_list|,
name|DatanodeWireProtocol
operator|.
name|versionID
argument_list|,
name|DatanodeWireProtocol
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProtocolSignatureWritable
DECL|method|getProtocolSignature2 ( String protocol, long clientVersion, int clientMethodsHash)
name|getProtocolSignature2
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Don't forward this to the server. The protocol version and signature is      * that of {@link DatanodeProtocol}      */
return|return
name|ProtocolSignatureWritable
operator|.
name|convert
argument_list|(
name|this
operator|.
name|getProtocolSignature
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|DatanodeWireProtocol
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|DatanodeWireProtocol
operator|.
name|versionID
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Namenode Serverside implements "
operator|+
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|DatanodeWireProtocol
operator|.
name|class
argument_list|)
operator|+
literal|". The following requested protocol is unknown: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|registerDatanode ( DatanodeRegistrationWritable registration)
specifier|public
name|DatanodeRegistrationWritable
name|registerDatanode
parameter_list|(
name|DatanodeRegistrationWritable
name|registration
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DatanodeRegistrationWritable
operator|.
name|convert
argument_list|(
name|server
operator|.
name|registerDatanode
argument_list|(
name|registration
operator|.
name|convert
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|sendHeartbeat ( DatanodeRegistrationWritable registration, long capacity, long dfsUsed, long remaining, long blockPoolUsed, int xmitsInProgress, int xceiverCount, int failedVolumes)
specifier|public
name|DatanodeCommandWritable
index|[]
name|sendHeartbeat
parameter_list|(
name|DatanodeRegistrationWritable
name|registration
parameter_list|,
name|long
name|capacity
parameter_list|,
name|long
name|dfsUsed
parameter_list|,
name|long
name|remaining
parameter_list|,
name|long
name|blockPoolUsed
parameter_list|,
name|int
name|xmitsInProgress
parameter_list|,
name|int
name|xceiverCount
parameter_list|,
name|int
name|failedVolumes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DatanodeCommandWritable
operator|.
name|convert
argument_list|(
name|server
operator|.
name|sendHeartbeat
argument_list|(
name|registration
operator|.
name|convert
argument_list|()
argument_list|,
name|capacity
argument_list|,
name|dfsUsed
argument_list|,
name|remaining
argument_list|,
name|blockPoolUsed
argument_list|,
name|xmitsInProgress
argument_list|,
name|xceiverCount
argument_list|,
name|failedVolumes
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|blockReport ( DatanodeRegistrationWritable registration, String poolId, long[] blocks)
specifier|public
name|DatanodeCommandWritable
name|blockReport
parameter_list|(
name|DatanodeRegistrationWritable
name|registration
parameter_list|,
name|String
name|poolId
parameter_list|,
name|long
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DatanodeCommandHelper
operator|.
name|convert
argument_list|(
name|server
operator|.
name|blockReport
argument_list|(
name|registration
operator|.
name|convert
argument_list|()
argument_list|,
name|poolId
argument_list|,
name|blocks
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|blockReceivedAndDeleted ( DatanodeRegistrationWritable registration, String poolId, ReceivedDeletedBlockInfoWritable[] receivedAndDeletedBlocks)
specifier|public
name|void
name|blockReceivedAndDeleted
parameter_list|(
name|DatanodeRegistrationWritable
name|registration
parameter_list|,
name|String
name|poolId
parameter_list|,
name|ReceivedDeletedBlockInfoWritable
index|[]
name|receivedAndDeletedBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|server
operator|.
name|blockReceivedAndDeleted
argument_list|(
name|registration
operator|.
name|convert
argument_list|()
argument_list|,
name|poolId
argument_list|,
name|ReceivedDeletedBlockInfoWritable
operator|.
name|convert
argument_list|(
name|receivedAndDeletedBlocks
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|errorReport (DatanodeRegistrationWritable registration, int errorCode, String msg)
specifier|public
name|void
name|errorReport
parameter_list|(
name|DatanodeRegistrationWritable
name|registration
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|server
operator|.
name|errorReport
argument_list|(
name|registration
operator|.
name|convert
argument_list|()
argument_list|,
name|errorCode
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|versionRequest ()
specifier|public
name|NamespaceInfoWritable
name|versionRequest
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|NamespaceInfoWritable
operator|.
name|convert
argument_list|(
name|server
operator|.
name|versionRequest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|processUpgradeCommand ( UpgradeCommandWritable comm)
specifier|public
name|UpgradeCommandWritable
name|processUpgradeCommand
parameter_list|(
name|UpgradeCommandWritable
name|comm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|UpgradeCommandWritable
operator|.
name|convert
argument_list|(
name|server
operator|.
name|processUpgradeCommand
argument_list|(
name|comm
operator|.
name|convert
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reportBadBlocks (LocatedBlockWritable[] blocks)
specifier|public
name|void
name|reportBadBlocks
parameter_list|(
name|LocatedBlockWritable
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|server
operator|.
name|reportBadBlocks
argument_list|(
name|LocatedBlockWritable
operator|.
name|convertLocatedBlock
argument_list|(
name|blocks
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitBlockSynchronization (ExtendedBlockWritable block, long newgenerationstamp, long newlength, boolean closeFile, boolean deleteblock, DatanodeIDWritable[] newtargets)
specifier|public
name|void
name|commitBlockSynchronization
parameter_list|(
name|ExtendedBlockWritable
name|block
parameter_list|,
name|long
name|newgenerationstamp
parameter_list|,
name|long
name|newlength
parameter_list|,
name|boolean
name|closeFile
parameter_list|,
name|boolean
name|deleteblock
parameter_list|,
name|DatanodeIDWritable
index|[]
name|newtargets
parameter_list|)
throws|throws
name|IOException
block|{
name|server
operator|.
name|commitBlockSynchronization
argument_list|(
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|block
argument_list|)
argument_list|,
name|newgenerationstamp
argument_list|,
name|newlength
argument_list|,
name|closeFile
argument_list|,
name|deleteblock
argument_list|,
name|DatanodeIDWritable
operator|.
name|convertDatanodeID
argument_list|(
name|newtargets
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

