begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgressView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StepType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Servlet that provides a JSON representation of the namenode's current startup  * progress.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|StartupProgressServlet
specifier|public
class|class
name|StartupProgressServlet
extends|extends
name|DfsServlet
block|{
DECL|field|COUNT
specifier|private
specifier|static
specifier|final
name|String
name|COUNT
init|=
literal|"count"
decl_stmt|;
DECL|field|ELAPSED_TIME
specifier|private
specifier|static
specifier|final
name|String
name|ELAPSED_TIME
init|=
literal|"elapsedTime"
decl_stmt|;
DECL|field|FILE
specifier|private
specifier|static
specifier|final
name|String
name|FILE
init|=
literal|"file"
decl_stmt|;
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|DESC
specifier|private
specifier|static
specifier|final
name|String
name|DESC
init|=
literal|"desc"
decl_stmt|;
DECL|field|PERCENT_COMPLETE
specifier|private
specifier|static
specifier|final
name|String
name|PERCENT_COMPLETE
init|=
literal|"percentComplete"
decl_stmt|;
DECL|field|PHASES
specifier|private
specifier|static
specifier|final
name|String
name|PHASES
init|=
literal|"phases"
decl_stmt|;
DECL|field|SIZE
specifier|private
specifier|static
specifier|final
name|String
name|SIZE
init|=
literal|"size"
decl_stmt|;
DECL|field|STATUS
specifier|private
specifier|static
specifier|final
name|String
name|STATUS
init|=
literal|"status"
decl_stmt|;
DECL|field|STEPS
specifier|private
specifier|static
specifier|final
name|String
name|STEPS
init|=
literal|"steps"
decl_stmt|;
DECL|field|TOTAL
specifier|private
specifier|static
specifier|final
name|String
name|TOTAL
init|=
literal|"total"
decl_stmt|;
DECL|field|PATH_SPEC
specifier|public
specifier|static
specifier|final
name|String
name|PATH_SPEC
init|=
literal|"/startupProgress"
decl_stmt|;
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest req, HttpServletResponse resp)
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|resp
operator|.
name|setContentType
argument_list|(
literal|"application/json; charset=UTF-8"
argument_list|)
expr_stmt|;
name|StartupProgress
name|prog
init|=
name|NameNodeHttpServer
operator|.
name|getStartupProgressFromContext
argument_list|(
name|getServletContext
argument_list|()
argument_list|)
decl_stmt|;
name|StartupProgressView
name|view
init|=
name|prog
operator|.
name|createView
argument_list|()
decl_stmt|;
name|JsonGenerator
name|json
init|=
operator|new
name|JsonFactory
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|resp
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|json
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|json
operator|.
name|writeNumberField
argument_list|(
name|ELAPSED_TIME
argument_list|,
name|view
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNumberField
argument_list|(
name|PERCENT_COMPLETE
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeArrayFieldStart
argument_list|(
name|PHASES
argument_list|)
expr_stmt|;
for|for
control|(
name|Phase
name|phase
range|:
name|view
operator|.
name|getPhases
argument_list|()
control|)
block|{
name|json
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|json
operator|.
name|writeStringField
argument_list|(
name|NAME
argument_list|,
name|phase
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeStringField
argument_list|(
name|DESC
argument_list|,
name|phase
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeStringField
argument_list|(
name|STATUS
argument_list|,
name|view
operator|.
name|getStatus
argument_list|(
name|phase
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNumberField
argument_list|(
name|PERCENT_COMPLETE
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNumberField
argument_list|(
name|ELAPSED_TIME
argument_list|,
name|view
operator|.
name|getElapsedTime
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|writeStringFieldIfNotNull
argument_list|(
name|json
argument_list|,
name|FILE
argument_list|,
name|view
operator|.
name|getFile
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|writeNumberFieldIfDefined
argument_list|(
name|json
argument_list|,
name|SIZE
argument_list|,
name|view
operator|.
name|getSize
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeArrayFieldStart
argument_list|(
name|STEPS
argument_list|)
expr_stmt|;
for|for
control|(
name|Step
name|step
range|:
name|view
operator|.
name|getSteps
argument_list|(
name|phase
argument_list|)
control|)
block|{
name|json
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|StepType
name|type
init|=
name|step
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|json
operator|.
name|writeStringField
argument_list|(
name|NAME
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeStringField
argument_list|(
name|DESC
argument_list|,
name|type
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|writeNumberField
argument_list|(
name|COUNT
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|writeStringFieldIfNotNull
argument_list|(
name|json
argument_list|,
name|FILE
argument_list|,
name|step
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|writeNumberFieldIfDefined
argument_list|(
name|json
argument_list|,
name|SIZE
argument_list|,
name|step
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNumberField
argument_list|(
name|TOTAL
argument_list|,
name|view
operator|.
name|getTotal
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNumberField
argument_list|(
name|PERCENT_COMPLETE
argument_list|,
name|view
operator|.
name|getPercentComplete
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeNumberField
argument_list|(
name|ELAPSED_TIME
argument_list|,
name|view
operator|.
name|getElapsedTime
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
name|json
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
name|json
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
name|json
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes a JSON number field only if the value is defined.    *     * @param json JsonGenerator to receive output    * @param key String key to put    * @param value long value to put    * @throws IOException if there is an I/O error    */
DECL|method|writeNumberFieldIfDefined (JsonGenerator json, String key, long value)
specifier|private
specifier|static
name|void
name|writeNumberFieldIfDefined
parameter_list|(
name|JsonGenerator
name|json
parameter_list|,
name|String
name|key
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|!=
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
name|json
operator|.
name|writeNumberField
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Writes a JSON string field only if the value is non-null.    *     * @param json JsonGenerator to receive output    * @param key String key to put    * @param value String value to put    * @throws IOException if there is an I/O error    */
DECL|method|writeStringFieldIfNotNull (JsonGenerator json, String key, String value)
specifier|private
specifier|static
name|void
name|writeStringFieldIfNotNull
parameter_list|(
name|JsonGenerator
name|json
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|json
operator|.
name|writeStringField
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

