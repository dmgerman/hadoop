begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.security.token.block
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A little struct class to contain all fields required to perform encryption of  * the DataTransferProtocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DataEncryptionKey
specifier|public
class|class
name|DataEncryptionKey
block|{
DECL|field|keyId
specifier|public
specifier|final
name|int
name|keyId
decl_stmt|;
DECL|field|blockPoolId
specifier|public
specifier|final
name|String
name|blockPoolId
decl_stmt|;
DECL|field|nonce
specifier|public
specifier|final
name|byte
index|[]
name|nonce
decl_stmt|;
DECL|field|encryptionKey
specifier|public
specifier|final
name|byte
index|[]
name|encryptionKey
decl_stmt|;
DECL|field|expiryDate
specifier|public
specifier|final
name|long
name|expiryDate
decl_stmt|;
DECL|field|encryptionAlgorithm
specifier|public
specifier|final
name|String
name|encryptionAlgorithm
decl_stmt|;
DECL|method|DataEncryptionKey (int keyId, String blockPoolId, byte[] nonce, byte[] encryptionKey, long expiryDate, String encryptionAlgorithm)
specifier|public
name|DataEncryptionKey
parameter_list|(
name|int
name|keyId
parameter_list|,
name|String
name|blockPoolId
parameter_list|,
name|byte
index|[]
name|nonce
parameter_list|,
name|byte
index|[]
name|encryptionKey
parameter_list|,
name|long
name|expiryDate
parameter_list|,
name|String
name|encryptionAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|keyId
operator|=
name|keyId
expr_stmt|;
name|this
operator|.
name|blockPoolId
operator|=
name|blockPoolId
expr_stmt|;
name|this
operator|.
name|nonce
operator|=
name|nonce
expr_stmt|;
name|this
operator|.
name|encryptionKey
operator|=
name|encryptionKey
expr_stmt|;
name|this
operator|.
name|expiryDate
operator|=
name|expiryDate
expr_stmt|;
name|this
operator|.
name|encryptionAlgorithm
operator|=
name|encryptionAlgorithm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|keyId
operator|+
literal|"/"
operator|+
name|blockPoolId
operator|+
literal|"/"
operator|+
name|nonce
operator|.
name|length
operator|+
literal|"/"
operator|+
name|encryptionKey
operator|.
name|length
return|;
block|}
block|}
end_class

end_unit

