begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ObjectStoreHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|BucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|KeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|UserArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|VolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|interfaces
operator|.
name|StorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**   * OzoneClient can connect to a Ozone Object Store and   * perform basic operations.  It uses StorageHandler to   * connect to KSM.   */
end_comment

begin_class
DECL|class|OzoneClient
specifier|public
class|class
name|OzoneClient
implements|implements
name|Closeable
block|{
DECL|field|storageHandler
specifier|private
specifier|final
name|StorageHandler
name|storageHandler
decl_stmt|;
DECL|field|ugi
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|hostName
specifier|private
specifier|final
name|String
name|hostName
decl_stmt|;
DECL|field|userAclRights
specifier|private
specifier|final
name|OzoneAcl
operator|.
name|OzoneACLRights
name|userAclRights
decl_stmt|;
DECL|method|OzoneClient ()
specifier|public
name|OzoneClient
parameter_list|()
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates OzoneClient object with the given configuration.     * @param conf     * @throws IOException     */
DECL|method|OzoneClient (Configuration conf)
specifier|public
name|OzoneClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|storageHandler
operator|=
operator|new
name|ObjectStoreHandler
argument_list|(
name|conf
argument_list|)
operator|.
name|getStorageHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|OzoneUtils
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|this
operator|.
name|userAclRights
operator|=
name|conf
operator|.
name|getEnum
argument_list|(
name|KSMConfigKeys
operator|.
name|OZONE_KSM_USER_RIGHTS
argument_list|,
name|KSMConfigKeys
operator|.
name|OZONE_KSM_USER_RIGHTS_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates a new Volume.     *     * @param volumeName Name of the Volume     * @throws IOException     * @throws OzoneException     */
DECL|method|createVolume (String volumeName)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates a new Volume.     *     * @param volumeName Name of the Volume     * @param owner Owner to be set for Volume     * @throws IOException     * @throws OzoneException     */
DECL|method|createVolume (String volumeName, String owner)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|owner
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates a new Volume.     *     * @param volumeName Name of the Volume     * @param owner Owner to be set for Volume     * @param quota Volume Quota     * @throws IOException     * @throws OzoneException     */
DECL|method|createVolume (String volumeName, String owner, String quota)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|quota
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|OzoneUtils
operator|.
name|verifyResourceName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|String
name|requestId
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
comment|//since we are reusing UserArgs which is used for REST call
comment|// request, info, headers are null.
name|UserArgs
name|userArgs
init|=
operator|new
name|UserArgs
argument_list|(
name|owner
argument_list|,
name|requestId
argument_list|,
name|hostName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|userArgs
operator|.
name|setGroups
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
expr_stmt|;
name|VolumeArgs
name|volumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
comment|//current user is set as admin for this volume
name|volumeArgs
operator|.
name|setAdminName
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|quota
operator|!=
literal|null
condition|)
block|{
name|volumeArgs
operator|.
name|setQuota
argument_list|(
name|quota
argument_list|)
expr_stmt|;
block|}
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates a new Bucket in the Volume.     *     * @param volumeName Name of the Volume     * @param bucketName Name of the Bucket     * @throws IOException     * @throws OzoneException     */
DECL|method|createBucket (String volumeName, String bucketName)
specifier|public
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|createBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|OzoneConsts
operator|.
name|Versioning
operator|.
name|NOT_DEFINED
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates a new Bucket in the Volume.     *     * @param volumeName     * @param bucketName     * @param versioning     * @throws IOException     * @throws OzoneException     */
DECL|method|createBucket (String volumeName, String bucketName, OzoneConsts.Versioning versioning)
specifier|public
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|OzoneConsts
operator|.
name|Versioning
name|versioning
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|createBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|versioning
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates a new Bucket in the Volume.     *     * @param volumeName Name of the Volume     * @param bucketName Name of the Bucket     * @param storageType StorageType for the Bucket     * @throws IOException     * @throws OzoneException     */
DECL|method|createBucket (String volumeName, String bucketName, StorageType storageType)
specifier|public
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|createBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|OzoneConsts
operator|.
name|Versioning
operator|.
name|NOT_DEFINED
argument_list|,
name|storageType
argument_list|)
expr_stmt|;
block|}
DECL|method|createBucket (String volumeName, String bucketName, OzoneAcl... acls)
specifier|public
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|OzoneAcl
modifier|...
name|acls
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|createBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|OzoneConsts
operator|.
name|Versioning
operator|.
name|NOT_DEFINED
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|,
name|acls
argument_list|)
expr_stmt|;
block|}
DECL|method|createBucket (String volumeName, String bucketName, OzoneConsts.Versioning versioning, StorageType storageType, OzoneAcl... acls)
specifier|public
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|OzoneConsts
operator|.
name|Versioning
name|versioning
parameter_list|,
name|StorageType
name|storageType
parameter_list|,
name|OzoneAcl
modifier|...
name|acls
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneUtils
operator|.
name|verifyResourceName
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|listOfAcls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|String
name|requestId
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|String
index|[]
name|groups
init|=
name|ugi
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
name|UserArgs
name|userArgs
init|=
operator|new
name|UserArgs
argument_list|(
name|userName
argument_list|,
name|requestId
argument_list|,
name|hostName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|userArgs
operator|.
name|setGroups
argument_list|(
name|groups
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|bucketArgs
operator|.
name|setVersioning
argument_list|(
name|versioning
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setStorageType
argument_list|(
name|storageType
argument_list|)
expr_stmt|;
comment|//Adding current user's ACL to the ACL list, for now this doesn't check
comment|//whether the "acls" argument passed to this method already has ACL for
comment|//current user. This has to be fixed.
name|OzoneAcl
name|userAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|USER
argument_list|,
name|userName
argument_list|,
name|userAclRights
argument_list|)
decl_stmt|;
name|listOfAcls
operator|.
name|add
argument_list|(
name|userAcl
argument_list|)
expr_stmt|;
comment|//Should we also add ACL of current user's groups?
if|if
condition|(
name|acls
operator|!=
literal|null
operator|&&
name|acls
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|listOfAcls
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|acls
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bucketArgs
operator|.
name|setAddAcls
argument_list|(
name|listOfAcls
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
block|}
comment|/**     * Adds a new Key to the Volume/Bucket.     *     * @param volumeName Name of the Volume     * @param bucketName Name of the Bucket     * @param keyName Key name     * @param value The Value     * @throws IOException     * @throws OzoneException     */
DECL|method|putKey (String volumeName, String bucketName, String keyName, byte[] value)
specifier|public
name|void
name|putKey
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|keyName
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|String
name|requestId
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
decl_stmt|;
name|UserArgs
name|userArgs
init|=
operator|new
name|UserArgs
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|requestId
argument_list|,
name|hostName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setSize
argument_list|(
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|OutputStream
name|outStream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**     * Close and release the resources.     */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|storageHandler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

