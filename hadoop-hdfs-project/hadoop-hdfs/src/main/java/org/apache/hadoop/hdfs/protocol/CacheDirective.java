begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CachePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|IntrusiveCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|IntrusiveCollection
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Namenode class that tracks state related to a cached path.  *  * This is an implementation class, not part of the public API.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CacheDirective
specifier|public
specifier|final
class|class
name|CacheDirective
implements|implements
name|IntrusiveCollection
operator|.
name|Element
block|{
DECL|field|id
specifier|private
specifier|final
name|long
name|id
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|replication
specifier|private
specifier|final
name|short
name|replication
decl_stmt|;
DECL|field|pool
specifier|private
name|CachePool
name|pool
decl_stmt|;
DECL|field|expiryTime
specifier|private
specifier|final
name|long
name|expiryTime
decl_stmt|;
DECL|field|bytesNeeded
specifier|private
name|long
name|bytesNeeded
decl_stmt|;
DECL|field|bytesCached
specifier|private
name|long
name|bytesCached
decl_stmt|;
DECL|field|filesAffected
specifier|private
name|long
name|filesAffected
decl_stmt|;
DECL|field|prev
specifier|private
name|Element
name|prev
decl_stmt|;
DECL|field|next
specifier|private
name|Element
name|next
decl_stmt|;
DECL|method|CacheDirective (long id, String path, short replication, long expiryTime)
specifier|public
name|CacheDirective
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|expiryTime
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|id
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|replication
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
name|this
operator|.
name|expiryTime
operator|=
name|expiryTime
expr_stmt|;
name|this
operator|.
name|bytesNeeded
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|bytesCached
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|filesAffected
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getReplication ()
specifier|public
name|short
name|getReplication
parameter_list|()
block|{
return|return
name|replication
return|;
block|}
DECL|method|getPool ()
specifier|public
name|CachePool
name|getPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
comment|/**    * @return When this directive expires, in milliseconds since Unix epoch    */
DECL|method|getExpiryTime ()
specifier|public
name|long
name|getExpiryTime
parameter_list|()
block|{
return|return
name|expiryTime
return|;
block|}
comment|/**    * @return When this directive expires, as an ISO-8601 formatted string.    */
DECL|method|getExpiryTimeString ()
specifier|public
name|String
name|getExpiryTimeString
parameter_list|()
block|{
return|return
name|DFSUtil
operator|.
name|dateToIso8601String
argument_list|(
operator|new
name|Date
argument_list|(
name|expiryTime
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a {@link CacheDirectiveInfo} based on this CacheDirective.    *<p>    * This always sets an absolute expiry time, never a relative TTL.    */
DECL|method|toInfo ()
specifier|public
name|CacheDirectiveInfo
name|toInfo
parameter_list|()
block|{
return|return
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|id
argument_list|)
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
name|replication
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
operator|.
name|getPoolName
argument_list|()
argument_list|)
operator|.
name|setExpiration
argument_list|(
name|CacheDirectiveInfo
operator|.
name|Expiration
operator|.
name|newAbsolute
argument_list|(
name|expiryTime
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|toStats ()
specifier|public
name|CacheDirectiveStats
name|toStats
parameter_list|()
block|{
return|return
operator|new
name|CacheDirectiveStats
operator|.
name|Builder
argument_list|()
operator|.
name|setBytesNeeded
argument_list|(
name|bytesNeeded
argument_list|)
operator|.
name|setBytesCached
argument_list|(
name|bytesCached
argument_list|)
operator|.
name|setFilesAffected
argument_list|(
name|filesAffected
argument_list|)
operator|.
name|setHasExpired
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|>
name|expiryTime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|toEntry ()
specifier|public
name|CacheDirectiveEntry
name|toEntry
parameter_list|()
block|{
return|return
operator|new
name|CacheDirectiveEntry
argument_list|(
name|toInfo
argument_list|()
argument_list|,
name|toStats
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"{ id:"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|", path:"
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|", replication:"
argument_list|)
operator|.
name|append
argument_list|(
name|replication
argument_list|)
operator|.
name|append
argument_list|(
literal|", pool:"
argument_list|)
operator|.
name|append
argument_list|(
name|pool
argument_list|)
operator|.
name|append
argument_list|(
literal|", expiryTime: "
argument_list|)
operator|.
name|append
argument_list|(
name|getExpiryTimeString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", bytesNeeded:"
argument_list|)
operator|.
name|append
argument_list|(
name|bytesNeeded
argument_list|)
operator|.
name|append
argument_list|(
literal|", bytesCached:"
argument_list|)
operator|.
name|append
argument_list|(
name|bytesCached
argument_list|)
operator|.
name|append
argument_list|(
literal|", filesAffected:"
argument_list|)
operator|.
name|append
argument_list|(
name|filesAffected
argument_list|)
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CacheDirective
name|other
init|=
operator|(
name|CacheDirective
operator|)
name|o
decl_stmt|;
return|return
name|id
operator|==
name|other
operator|.
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
DECL|method|getBytesNeeded ()
specifier|public
name|long
name|getBytesNeeded
parameter_list|()
block|{
return|return
name|bytesNeeded
return|;
block|}
DECL|method|clearBytesNeeded ()
specifier|public
name|void
name|clearBytesNeeded
parameter_list|()
block|{
name|this
operator|.
name|bytesNeeded
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|addBytesNeeded (long toAdd)
specifier|public
name|void
name|addBytesNeeded
parameter_list|(
name|long
name|toAdd
parameter_list|)
block|{
name|this
operator|.
name|bytesNeeded
operator|+=
name|toAdd
expr_stmt|;
block|}
DECL|method|getBytesCached ()
specifier|public
name|long
name|getBytesCached
parameter_list|()
block|{
return|return
name|bytesCached
return|;
block|}
DECL|method|clearBytesCached ()
specifier|public
name|void
name|clearBytesCached
parameter_list|()
block|{
name|this
operator|.
name|bytesCached
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|addBytesCached (long toAdd)
specifier|public
name|void
name|addBytesCached
parameter_list|(
name|long
name|toAdd
parameter_list|)
block|{
name|this
operator|.
name|bytesCached
operator|+=
name|toAdd
expr_stmt|;
block|}
DECL|method|getFilesAffected ()
specifier|public
name|long
name|getFilesAffected
parameter_list|()
block|{
return|return
name|filesAffected
return|;
block|}
DECL|method|clearFilesAffected ()
specifier|public
name|void
name|clearFilesAffected
parameter_list|()
block|{
name|this
operator|.
name|filesAffected
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|incrementFilesAffected ()
specifier|public
name|void
name|incrementFilesAffected
parameter_list|()
block|{
name|this
operator|.
name|filesAffected
operator|++
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
comment|// IntrusiveCollection.Element
DECL|method|insertInternal (IntrusiveCollection<? extends Element> list, Element prev, Element next)
specifier|public
name|void
name|insertInternal
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|prev
parameter_list|,
name|Element
name|next
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|pool
operator|==
literal|null
assert|;
name|this
operator|.
name|pool
operator|=
operator|(
operator|(
name|CachePool
operator|.
name|DirectiveList
operator|)
name|list
operator|)
operator|.
name|getCachePool
argument_list|()
expr_stmt|;
name|this
operator|.
name|prev
operator|=
name|prev
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
comment|// IntrusiveCollection.Element
DECL|method|setPrev (IntrusiveCollection<? extends Element> list, Element prev)
specifier|public
name|void
name|setPrev
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|prev
parameter_list|)
block|{
assert|assert
name|list
operator|==
name|pool
operator|.
name|getDirectiveList
argument_list|()
assert|;
name|this
operator|.
name|prev
operator|=
name|prev
expr_stmt|;
block|}
annotation|@
name|Override
comment|// IntrusiveCollection.Element
DECL|method|setNext (IntrusiveCollection<? extends Element> list, Element next)
specifier|public
name|void
name|setNext
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|,
name|Element
name|next
parameter_list|)
block|{
assert|assert
name|list
operator|==
name|pool
operator|.
name|getDirectiveList
argument_list|()
assert|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
comment|// IntrusiveCollection.Element
DECL|method|removeInternal (IntrusiveCollection<? extends Element> list)
specifier|public
name|void
name|removeInternal
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
assert|assert
name|list
operator|==
name|pool
operator|.
name|getDirectiveList
argument_list|()
assert|;
name|this
operator|.
name|pool
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|prev
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|next
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
comment|// IntrusiveCollection.Element
DECL|method|getPrev (IntrusiveCollection<? extends Element> list)
specifier|public
name|Element
name|getPrev
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|!=
name|pool
operator|.
name|getDirectiveList
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|this
operator|.
name|prev
return|;
block|}
annotation|@
name|Override
comment|// IntrusiveCollection.Element
DECL|method|getNext (IntrusiveCollection<? extends Element> list)
specifier|public
name|Element
name|getNext
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|!=
name|pool
operator|.
name|getDirectiveList
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|this
operator|.
name|next
return|;
block|}
annotation|@
name|Override
comment|// IntrusiveCollection.Element
DECL|method|isInList (IntrusiveCollection<? extends Element> list)
specifier|public
name|boolean
name|isInList
parameter_list|(
name|IntrusiveCollection
argument_list|<
name|?
extends|extends
name|Element
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|pool
operator|==
literal|null
condition|?
literal|false
else|:
name|list
operator|==
name|pool
operator|.
name|getDirectiveList
argument_list|()
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

