begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * A low memory linked hash set implementation, which uses an array for storing  * the elements and linked lists for collision resolution. In addition it stores  * elements in a linked list to ensure ordered traversal. This class does not  * support null element.  *  * This class is not thread safe.  *  */
end_comment

begin_class
DECL|class|LightWeightLinkedSet
specifier|public
class|class
name|LightWeightLinkedSet
parameter_list|<
name|T
parameter_list|>
extends|extends
name|LightWeightHashSet
argument_list|<
name|T
argument_list|>
block|{
comment|/**    * Elements of {@link LightWeightLinkedSet}.    */
DECL|class|DoubleLinkedElement
specifier|static
class|class
name|DoubleLinkedElement
parameter_list|<
name|T
parameter_list|>
extends|extends
name|LinkedElement
argument_list|<
name|T
argument_list|>
block|{
comment|// references to elements within all-element linked list
DECL|field|before
specifier|private
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
name|before
decl_stmt|;
DECL|field|after
specifier|private
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
name|after
decl_stmt|;
DECL|method|DoubleLinkedElement (T elem, int hashCode)
specifier|public
name|DoubleLinkedElement
parameter_list|(
name|T
name|elem
parameter_list|,
name|int
name|hashCode
parameter_list|)
block|{
name|super
argument_list|(
name|elem
argument_list|,
name|hashCode
argument_list|)
expr_stmt|;
name|this
operator|.
name|before
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|after
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|field|head
specifier|private
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
name|head
decl_stmt|;
DECL|field|tail
specifier|private
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
name|tail
decl_stmt|;
comment|/**    * @param initCapacity    *          Recommended size of the internal array.    * @param maxLoadFactor    *          used to determine when to expand the internal array    * @param minLoadFactor    *          used to determine when to shrink the internal array    */
DECL|method|LightWeightLinkedSet (int initCapacity, float maxLoadFactor, float minLoadFactor)
specifier|public
name|LightWeightLinkedSet
parameter_list|(
name|int
name|initCapacity
parameter_list|,
name|float
name|maxLoadFactor
parameter_list|,
name|float
name|minLoadFactor
parameter_list|)
block|{
name|super
argument_list|(
name|initCapacity
argument_list|,
name|maxLoadFactor
argument_list|,
name|minLoadFactor
argument_list|)
expr_stmt|;
name|head
operator|=
literal|null
expr_stmt|;
name|tail
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|LightWeightLinkedSet ()
specifier|public
name|LightWeightLinkedSet
parameter_list|()
block|{
name|this
argument_list|(
name|MINIMUM_CAPACITY
argument_list|,
name|DEFAULT_MAX_LOAD_FACTOR
argument_list|,
name|DEFAUT_MIN_LOAD_FACTOR
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add given element to the hash table    *    * @return true if the element was not present in the table, false otherwise    */
DECL|method|addElem (final T element)
specifier|protected
name|boolean
name|addElem
parameter_list|(
specifier|final
name|T
name|element
parameter_list|)
block|{
comment|// validate element
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null element is not supported."
argument_list|)
throw|;
block|}
comment|// find hashCode& index
specifier|final
name|int
name|hashCode
init|=
name|element
operator|.
name|hashCode
argument_list|()
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|getIndex
argument_list|(
name|hashCode
argument_list|)
decl_stmt|;
comment|// return false if already present
if|if
condition|(
name|getContainedElem
argument_list|(
name|index
argument_list|,
name|element
argument_list|,
name|hashCode
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|modification
operator|++
expr_stmt|;
name|size
operator|++
expr_stmt|;
comment|// update bucket linked list
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
name|le
init|=
operator|new
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
argument_list|(
name|element
argument_list|,
name|hashCode
argument_list|)
decl_stmt|;
name|le
operator|.
name|next
operator|=
name|entries
index|[
name|index
index|]
expr_stmt|;
name|entries
index|[
name|index
index|]
operator|=
name|le
expr_stmt|;
comment|// insert to the end of the all-element linked list
name|le
operator|.
name|after
operator|=
literal|null
expr_stmt|;
name|le
operator|.
name|before
operator|=
name|tail
expr_stmt|;
if|if
condition|(
name|tail
operator|!=
literal|null
condition|)
block|{
name|tail
operator|.
name|after
operator|=
name|le
expr_stmt|;
block|}
name|tail
operator|=
name|le
expr_stmt|;
if|if
condition|(
name|head
operator|==
literal|null
condition|)
block|{
name|head
operator|=
name|le
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Remove the element corresponding to the key, given key.hashCode() == index.    *    * @return Return the entry with the element if exists. Otherwise return null.    */
DECL|method|removeElem (final T key)
specifier|protected
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
name|removeElem
parameter_list|(
specifier|final
name|T
name|key
parameter_list|)
block|{
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
name|found
init|=
call|(
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
call|)
argument_list|(
name|super
operator|.
name|removeElem
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// update linked list
if|if
condition|(
name|found
operator|.
name|after
operator|!=
literal|null
condition|)
block|{
name|found
operator|.
name|after
operator|.
name|before
operator|=
name|found
operator|.
name|before
expr_stmt|;
block|}
if|if
condition|(
name|found
operator|.
name|before
operator|!=
literal|null
condition|)
block|{
name|found
operator|.
name|before
operator|.
name|after
operator|=
name|found
operator|.
name|after
expr_stmt|;
block|}
if|if
condition|(
name|head
operator|==
name|found
condition|)
block|{
name|head
operator|=
name|head
operator|.
name|after
expr_stmt|;
block|}
if|if
condition|(
name|tail
operator|==
name|found
condition|)
block|{
name|tail
operator|=
name|tail
operator|.
name|before
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
comment|/**    * Remove and return first element on the linked list of all elements.    *    * @return first element    */
DECL|method|pollFirst ()
specifier|public
name|T
name|pollFirst
parameter_list|()
block|{
if|if
condition|(
name|head
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|first
init|=
name|head
operator|.
name|element
decl_stmt|;
name|this
operator|.
name|remove
argument_list|(
name|first
argument_list|)
expr_stmt|;
return|return
name|first
return|;
block|}
comment|/**    * Remove and return n elements from the hashtable.    * The order in which entries are removed is corresponds     * to the order in which they were inserted.    *    * @return first element    */
DECL|method|pollN (int n)
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|pollN
parameter_list|(
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>=
name|size
condition|)
block|{
comment|// if we need to remove all elements then do fast polling
return|return
name|pollAll
argument_list|()
return|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|retList
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|n
argument_list|)
decl_stmt|;
while|while
condition|(
name|n
operator|--
operator|>
literal|0
operator|&&
name|head
operator|!=
literal|null
condition|)
block|{
name|T
name|curr
init|=
name|head
operator|.
name|element
decl_stmt|;
name|this
operator|.
name|removeElem
argument_list|(
name|curr
argument_list|)
expr_stmt|;
name|retList
operator|.
name|add
argument_list|(
name|curr
argument_list|)
expr_stmt|;
block|}
name|shrinkIfNecessary
argument_list|()
expr_stmt|;
return|return
name|retList
return|;
block|}
comment|/**    * Remove all elements from the set and return them in order. Traverse the    * link list, don't worry about hashtable - faster version of the parent    * method.    */
DECL|method|pollAll ()
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|pollAll
parameter_list|()
block|{
name|List
argument_list|<
name|T
argument_list|>
name|retList
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
while|while
condition|(
name|head
operator|!=
literal|null
condition|)
block|{
name|retList
operator|.
name|add
argument_list|(
name|head
operator|.
name|element
argument_list|)
expr_stmt|;
name|head
operator|=
name|head
operator|.
name|after
expr_stmt|;
block|}
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|retList
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toArray (U[] a)
specifier|public
parameter_list|<
name|U
parameter_list|>
name|U
index|[]
name|toArray
parameter_list|(
name|U
index|[]
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Input array can not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|a
operator|.
name|length
operator|<
name|size
condition|)
block|{
name|a
operator|=
operator|(
name|U
index|[]
operator|)
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|newInstance
argument_list|(
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|int
name|currentIndex
init|=
literal|0
decl_stmt|;
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
name|current
init|=
name|head
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|T
name|curr
init|=
name|current
operator|.
name|element
decl_stmt|;
name|a
index|[
name|currentIndex
operator|++
index|]
operator|=
operator|(
name|U
operator|)
name|curr
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|after
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|LinkedSetIterator
argument_list|()
return|;
block|}
DECL|class|LinkedSetIterator
specifier|private
class|class
name|LinkedSetIterator
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
comment|/** The starting modification for fail-fast. */
DECL|field|startModification
specifier|private
specifier|final
name|int
name|startModification
init|=
name|modification
decl_stmt|;
comment|/** The next element to return. */
DECL|field|next
specifier|private
name|DoubleLinkedElement
argument_list|<
name|T
argument_list|>
name|next
init|=
name|head
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
name|modification
operator|!=
name|startModification
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|(
literal|"modification="
operator|+
name|modification
operator|+
literal|" != startModification = "
operator|+
name|startModification
argument_list|)
throw|;
block|}
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|final
name|T
name|e
init|=
name|next
operator|.
name|element
decl_stmt|;
comment|// find the next element
name|next
operator|=
name|next
operator|.
name|after
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Remove is not supported."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Clear the set. Resize it to the original capacity.    */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|head
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tail
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

