begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_comment
comment|/**  * Collection of blocks with their locations and the file length.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|LocatedBlocksWritable
specifier|public
class|class
name|LocatedBlocksWritable
implements|implements
name|Writable
block|{
DECL|field|fileLength
specifier|private
name|long
name|fileLength
decl_stmt|;
DECL|field|blocks
specifier|private
name|List
argument_list|<
name|LocatedBlockWritable
argument_list|>
name|blocks
decl_stmt|;
comment|// array of blocks with prioritized locations
DECL|field|underConstruction
specifier|private
name|boolean
name|underConstruction
decl_stmt|;
DECL|field|lastLocatedBlock
specifier|private
name|LocatedBlockWritable
name|lastLocatedBlock
init|=
literal|null
decl_stmt|;
DECL|field|isLastBlockComplete
specifier|private
name|boolean
name|isLastBlockComplete
init|=
literal|false
decl_stmt|;
DECL|method|convertLocatedBlocks ( LocatedBlocksWritable lb)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
name|convertLocatedBlocks
parameter_list|(
name|LocatedBlocksWritable
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
argument_list|(
name|lb
operator|.
name|getFileLength
argument_list|()
argument_list|,
name|lb
operator|.
name|isUnderConstruction
argument_list|()
argument_list|,
name|LocatedBlockWritable
operator|.
name|convertLocatedBlock
argument_list|(
name|lb
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|)
argument_list|,
name|LocatedBlockWritable
operator|.
name|convertLocatedBlock
argument_list|(
name|lb
operator|.
name|getLastLocatedBlock
argument_list|()
argument_list|)
argument_list|,
name|lb
operator|.
name|isLastBlockComplete
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertLocatedBlocks ( org.apache.hadoop.hdfs.protocol.LocatedBlocks lb)
specifier|public
specifier|static
name|LocatedBlocksWritable
name|convertLocatedBlocks
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|LocatedBlocksWritable
argument_list|(
name|lb
operator|.
name|getFileLength
argument_list|()
argument_list|,
name|lb
operator|.
name|isUnderConstruction
argument_list|()
argument_list|,
name|LocatedBlockWritable
operator|.
name|convertLocatedBlock2
argument_list|(
name|lb
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|)
argument_list|,
name|LocatedBlockWritable
operator|.
name|convertLocatedBlock
argument_list|(
name|lb
operator|.
name|getLastLocatedBlock
argument_list|()
argument_list|)
argument_list|,
name|lb
operator|.
name|isLastBlockComplete
argument_list|()
argument_list|)
return|;
block|}
DECL|method|LocatedBlocksWritable ()
specifier|public
name|LocatedBlocksWritable
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** public Constructor */
DECL|method|LocatedBlocksWritable (long flength, boolean isUnderConstuction, List<LocatedBlockWritable> blks, LocatedBlockWritable lastBlock, boolean isLastBlockCompleted)
specifier|public
name|LocatedBlocksWritable
parameter_list|(
name|long
name|flength
parameter_list|,
name|boolean
name|isUnderConstuction
parameter_list|,
name|List
argument_list|<
name|LocatedBlockWritable
argument_list|>
name|blks
parameter_list|,
name|LocatedBlockWritable
name|lastBlock
parameter_list|,
name|boolean
name|isLastBlockCompleted
parameter_list|)
block|{
name|fileLength
operator|=
name|flength
expr_stmt|;
name|blocks
operator|=
name|blks
expr_stmt|;
name|underConstruction
operator|=
name|isUnderConstuction
expr_stmt|;
name|this
operator|.
name|lastLocatedBlock
operator|=
name|lastBlock
expr_stmt|;
name|this
operator|.
name|isLastBlockComplete
operator|=
name|isLastBlockCompleted
expr_stmt|;
block|}
comment|/**    * Get located blocks.    */
DECL|method|getLocatedBlocks ()
specifier|public
name|List
argument_list|<
name|LocatedBlockWritable
argument_list|>
name|getLocatedBlocks
parameter_list|()
block|{
return|return
name|blocks
return|;
block|}
comment|/** Get the last located block. */
DECL|method|getLastLocatedBlock ()
specifier|public
name|LocatedBlockWritable
name|getLastLocatedBlock
parameter_list|()
block|{
return|return
name|lastLocatedBlock
return|;
block|}
comment|/** Is the last block completed? */
DECL|method|isLastBlockComplete ()
specifier|public
name|boolean
name|isLastBlockComplete
parameter_list|()
block|{
return|return
name|isLastBlockComplete
return|;
block|}
comment|/**    * Get located block.    */
DECL|method|get (int index)
specifier|public
name|LocatedBlockWritable
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|blocks
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**    * Get number of located blocks.    */
DECL|method|locatedBlockCount ()
specifier|public
name|int
name|locatedBlockCount
parameter_list|()
block|{
return|return
name|blocks
operator|==
literal|null
condition|?
literal|0
else|:
name|blocks
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Get file length    */
DECL|method|getFileLength ()
specifier|public
name|long
name|getFileLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileLength
return|;
block|}
comment|/**    * Return ture if file was under construction when     * this LocatedBlocks was constructed, false otherwise.    */
DECL|method|isUnderConstruction ()
specifier|public
name|boolean
name|isUnderConstruction
parameter_list|()
block|{
return|return
name|underConstruction
return|;
block|}
comment|//////////////////////////////////////////////////
comment|// Writable
comment|//////////////////////////////////////////////////
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|LocatedBlocksWritable
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|LocatedBlocksWritable
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|fileLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|underConstruction
argument_list|)
expr_stmt|;
comment|//write the last located block
specifier|final
name|boolean
name|isNull
init|=
name|lastLocatedBlock
operator|==
literal|null
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isNull
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNull
condition|)
block|{
name|lastLocatedBlock
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|isLastBlockComplete
argument_list|)
expr_stmt|;
comment|// write located blocks
name|int
name|nrBlocks
init|=
name|locatedBlockCount
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|nrBlocks
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrBlocks
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|LocatedBlockWritable
name|blk
range|:
name|this
operator|.
name|blocks
control|)
block|{
name|blk
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fileLength
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|underConstruction
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
comment|//read the last located block
specifier|final
name|boolean
name|isNull
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isNull
condition|)
block|{
name|lastLocatedBlock
operator|=
name|LocatedBlockWritable
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|isLastBlockComplete
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
comment|// read located blocks
name|int
name|nrBlocks
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|blocks
operator|=
operator|new
name|ArrayList
argument_list|<
name|LocatedBlockWritable
argument_list|>
argument_list|(
name|nrBlocks
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrBlocks
condition|;
name|idx
operator|++
control|)
block|{
name|LocatedBlockWritable
name|blk
init|=
operator|new
name|LocatedBlockWritable
argument_list|()
decl_stmt|;
name|blk
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|blocks
operator|.
name|add
argument_list|(
name|blk
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  fileLength="
argument_list|)
operator|.
name|append
argument_list|(
name|fileLength
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  underConstruction="
argument_list|)
operator|.
name|append
argument_list|(
name|underConstruction
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  blocks="
argument_list|)
operator|.
name|append
argument_list|(
name|blocks
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  lastLocatedBlock="
argument_list|)
operator|.
name|append
argument_list|(
name|lastLocatedBlock
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  isLastBlockComplete="
argument_list|)
operator|.
name|append
argument_list|(
name|isLastBlockComplete
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

