begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ExtendedBlockId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockMetadataHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
operator|.
name|POSIX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_comment
comment|/**  * Map block to persistent memory with native PMDK libs.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|NativePmemMappableBlockLoader
specifier|public
class|class
name|NativePmemMappableBlockLoader
extends|extends
name|PmemMappableBlockLoader
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NativePmemMappableBlockLoader
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (FsDatasetCache cacheManager)
name|void
name|initialize
parameter_list|(
name|FsDatasetCache
name|cacheManager
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|cacheManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load the block.    *    * Map the block and verify its checksum.    *    * The block will be mapped to PmemDir/BlockPoolId-BlockId, in which PmemDir    * is a persistent memory volume chosen by PmemVolumeManager.    *    * @param length         The current length of the block.    * @param blockIn        The block input stream. Should be positioned at the    *                       start. The caller must close this.    * @param metaIn         The meta file input stream. Should be positioned at    *                       the start. The caller must close this.    * @param blockFileName  The block file name, for logging purposes.    * @param key            The extended block ID.    *    * @throws IOException   If mapping block to persistent memory fails or    *                       checksum fails.    *    * @return               The Mappable block.    */
annotation|@
name|Override
DECL|method|load (long length, FileInputStream blockIn, FileInputStream metaIn, String blockFileName, ExtendedBlockId key)
specifier|public
name|MappableBlock
name|load
parameter_list|(
name|long
name|length
parameter_list|,
name|FileInputStream
name|blockIn
parameter_list|,
name|FileInputStream
name|metaIn
parameter_list|,
name|String
name|blockFileName
parameter_list|,
name|ExtendedBlockId
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|NativePmemMappedBlock
name|mappableBlock
init|=
literal|null
decl_stmt|;
name|POSIX
operator|.
name|PmemMappedRegion
name|region
init|=
literal|null
decl_stmt|;
name|String
name|filePath
init|=
literal|null
decl_stmt|;
name|FileChannel
name|blockChannel
init|=
literal|null
decl_stmt|;
try|try
block|{
name|blockChannel
operator|=
name|blockIn
operator|.
name|getChannel
argument_list|()
expr_stmt|;
if|if
condition|(
name|blockChannel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Block InputStream has no FileChannel."
argument_list|)
throw|;
block|}
assert|assert
name|NativeIO
operator|.
name|isAvailable
argument_list|()
assert|;
name|filePath
operator|=
name|PmemVolumeManager
operator|.
name|getInstance
argument_list|()
operator|.
name|getCachePath
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|region
operator|=
name|POSIX
operator|.
name|Pmem
operator|.
name|mapBlock
argument_list|(
name|filePath
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to map the block "
operator|+
name|blockFileName
operator|+
literal|" to persistent storage."
argument_list|)
throw|;
block|}
name|verifyChecksumAndMapBlock
argument_list|(
name|region
argument_list|,
name|length
argument_list|,
name|metaIn
argument_list|,
name|blockChannel
argument_list|,
name|blockFileName
argument_list|)
expr_stmt|;
name|mappableBlock
operator|=
operator|new
name|NativePmemMappedBlock
argument_list|(
name|region
operator|.
name|getAddress
argument_list|()
argument_list|,
name|region
operator|.
name|getLength
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully cached one replica:{} into persistent memory"
operator|+
literal|", [cached path={}, address={}, length={}]"
argument_list|,
name|key
argument_list|,
name|filePath
argument_list|,
name|region
operator|.
name|getAddress
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|blockChannel
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappableBlock
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
comment|// unmap content from persistent memory
name|POSIX
operator|.
name|Pmem
operator|.
name|unmapBlock
argument_list|(
name|region
operator|.
name|getAddress
argument_list|()
argument_list|,
name|region
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|FsDatasetUtil
operator|.
name|deleteMappedFile
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|mappableBlock
return|;
block|}
comment|/**    * Verifies the block's checksum meanwhile map block to persistent memory.    * This is an I/O intensive operation.    */
DECL|method|verifyChecksumAndMapBlock (POSIX.PmemMappedRegion region, long length, FileInputStream metaIn, FileChannel blockChannel, String blockFileName)
specifier|private
name|void
name|verifyChecksumAndMapBlock
parameter_list|(
name|POSIX
operator|.
name|PmemMappedRegion
name|region
parameter_list|,
name|long
name|length
parameter_list|,
name|FileInputStream
name|metaIn
parameter_list|,
name|FileChannel
name|blockChannel
parameter_list|,
name|String
name|blockFileName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Verify the checksum from the block's meta file
comment|// Get the DataChecksum from the meta file header
name|BlockMetadataHeader
name|header
init|=
name|BlockMetadataHeader
operator|.
name|readHeader
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|metaIn
argument_list|,
name|BlockMetadataHeader
operator|.
name|getHeaderSize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FileChannel
name|metaChannel
init|=
literal|null
decl_stmt|;
try|try
block|{
name|metaChannel
operator|=
name|metaIn
operator|.
name|getChannel
argument_list|()
expr_stmt|;
if|if
condition|(
name|metaChannel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot get FileChannel"
operator|+
literal|" from Block InputStream meta file."
argument_list|)
throw|;
block|}
name|DataChecksum
name|checksum
init|=
name|header
operator|.
name|getChecksum
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bytesPerChecksum
init|=
name|checksum
operator|.
name|getBytesPerChecksum
argument_list|()
decl_stmt|;
specifier|final
name|int
name|checksumSize
init|=
name|checksum
operator|.
name|getChecksumSize
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numChunks
init|=
operator|(
literal|8
operator|*
literal|1024
operator|*
literal|1024
operator|)
operator|/
name|bytesPerChecksum
decl_stmt|;
name|ByteBuffer
name|blockBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|numChunks
operator|*
name|bytesPerChecksum
argument_list|)
decl_stmt|;
name|ByteBuffer
name|checksumBuf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|numChunks
operator|*
name|checksumSize
argument_list|)
decl_stmt|;
comment|// Verify the checksum
name|int
name|bytesVerified
init|=
literal|0
decl_stmt|;
name|long
name|mappedAddress
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|mappedAddress
operator|=
name|region
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|bytesVerified
operator|<
name|length
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|bytesVerified
operator|%
name|bytesPerChecksum
operator|==
literal|0
argument_list|,
literal|"Unexpected partial chunk before EOF."
argument_list|)
expr_stmt|;
assert|assert
name|bytesVerified
operator|%
name|bytesPerChecksum
operator|==
literal|0
assert|;
name|int
name|bytesRead
init|=
name|fillBuffer
argument_list|(
name|blockChannel
argument_list|,
name|blockBuf
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Checksum verification failed for the block "
operator|+
name|blockFileName
operator|+
literal|": premature EOF"
argument_list|)
throw|;
block|}
name|blockBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// Number of read chunks, including partial chunk at end
name|int
name|chunks
init|=
operator|(
name|bytesRead
operator|+
name|bytesPerChecksum
operator|-
literal|1
operator|)
operator|/
name|bytesPerChecksum
decl_stmt|;
name|checksumBuf
operator|.
name|limit
argument_list|(
name|chunks
operator|*
name|checksumSize
argument_list|)
expr_stmt|;
name|fillBuffer
argument_list|(
name|metaChannel
argument_list|,
name|checksumBuf
argument_list|)
expr_stmt|;
name|checksumBuf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|checksum
operator|.
name|verifyChunkedSums
argument_list|(
name|blockBuf
argument_list|,
name|checksumBuf
argument_list|,
name|blockFileName
argument_list|,
name|bytesVerified
argument_list|)
expr_stmt|;
comment|// Success
name|bytesVerified
operator|+=
name|bytesRead
expr_stmt|;
comment|// Copy data to persistent file
name|POSIX
operator|.
name|Pmem
operator|.
name|memCopy
argument_list|(
name|blockBuf
operator|.
name|array
argument_list|()
argument_list|,
name|mappedAddress
argument_list|,
name|region
operator|.
name|isPmem
argument_list|()
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|mappedAddress
operator|+=
name|bytesRead
expr_stmt|;
comment|// Clear buffer
name|blockBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|checksumBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|POSIX
operator|.
name|Pmem
operator|.
name|memSync
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|metaChannel
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isNativeLoader ()
specifier|public
name|boolean
name|isNativeLoader
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

