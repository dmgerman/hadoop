begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/****************************************************  * A LocatedBlock is a pair of Block, DatanodeInfo[]  * objects.  It tells where to find a Block.  *   ****************************************************/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|LocatedBlockWritable
specifier|public
class|class
name|LocatedBlockWritable
implements|implements
name|Writable
block|{
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|LocatedBlockWritable
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|LocatedBlockWritable
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|field|b
specifier|private
name|ExtendedBlockWritable
name|b
decl_stmt|;
DECL|field|offset
specifier|private
name|long
name|offset
decl_stmt|;
comment|// offset of the first byte of the block in the file
DECL|field|locs
specifier|private
name|DatanodeInfoWritable
index|[]
name|locs
decl_stmt|;
comment|// corrupt flag is true if all of the replicas of a block are corrupt.
comment|// else false. If block has few corrupt replicas, they are filtered and
comment|// their locations are not part of this object
DECL|field|corrupt
specifier|private
name|boolean
name|corrupt
decl_stmt|;
DECL|field|blockToken
specifier|private
name|TokenWritable
name|blockToken
init|=
operator|new
name|TokenWritable
argument_list|()
decl_stmt|;
specifier|static
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
DECL|method|convertLocatedBlock (LocatedBlockWritable lb)
name|convertLocatedBlock
parameter_list|(
name|LocatedBlockWritable
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
argument_list|(
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|DatanodeInfoWritable
operator|.
name|convertDatanodeInfo
argument_list|(
name|lb
operator|.
name|getLocations
argument_list|()
argument_list|)
argument_list|,
name|lb
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|lb
operator|.
name|isCorrupt
argument_list|()
argument_list|)
decl_stmt|;
comment|// Fill in the token
name|TokenWritable
name|tok
init|=
name|lb
operator|.
name|getBlockToken
argument_list|()
decl_stmt|;
name|result
operator|.
name|setBlockToken
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|(
name|tok
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|tok
operator|.
name|getPassword
argument_list|()
argument_list|,
name|tok
operator|.
name|getKind
argument_list|()
argument_list|,
name|tok
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|LocatedBlockWritable
DECL|method|convertLocatedBlock (org.apache.hadoop.hdfs.protocol.LocatedBlock lb)
name|convertLocatedBlock
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|LocatedBlockWritable
name|result
init|=
operator|new
name|LocatedBlockWritable
argument_list|(
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|DatanodeInfoWritable
operator|.
name|convertDatanodeInfo
argument_list|(
name|lb
operator|.
name|getLocations
argument_list|()
argument_list|)
argument_list|,
name|lb
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|lb
operator|.
name|isCorrupt
argument_list|()
argument_list|)
decl_stmt|;
comment|// Fill in the token
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|tok
init|=
name|lb
operator|.
name|getBlockToken
argument_list|()
decl_stmt|;
name|result
operator|.
name|setBlockToken
argument_list|(
operator|new
name|TokenWritable
argument_list|(
name|tok
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|tok
operator|.
name|getPassword
argument_list|()
argument_list|,
name|tok
operator|.
name|getKind
argument_list|()
argument_list|,
name|tok
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|static
specifier|public
name|LocatedBlockWritable
index|[]
DECL|method|convertLocatedBlock (org.apache.hadoop.hdfs.protocol.LocatedBlock[] lb)
name|convertLocatedBlock
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
index|[]
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|length
decl_stmt|;
name|LocatedBlockWritable
index|[]
name|result
init|=
operator|new
name|LocatedBlockWritable
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|LocatedBlockWritable
argument_list|(
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|lb
index|[
name|i
index|]
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|DatanodeInfoWritable
operator|.
name|convertDatanodeInfo
argument_list|(
name|lb
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
argument_list|)
argument_list|,
name|lb
index|[
name|i
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|lb
index|[
name|i
index|]
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|static
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
index|[]
DECL|method|convertLocatedBlock (LocatedBlockWritable[] lb)
name|convertLocatedBlock
parameter_list|(
name|LocatedBlockWritable
index|[]
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|length
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
index|[]
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
argument_list|(
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|lb
index|[
name|i
index|]
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|DatanodeInfoWritable
operator|.
name|convertDatanodeInfo
argument_list|(
name|lb
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
argument_list|)
argument_list|,
name|lb
index|[
name|i
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|lb
index|[
name|i
index|]
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|static
specifier|public
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
argument_list|>
DECL|method|convertLocatedBlock ( List<org.apache.hadoop.hdfs.protocolR23Compatible.LocatedBlockWritable> lb)
name|convertLocatedBlock
parameter_list|(
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|LocatedBlockWritable
argument_list|>
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
argument_list|>
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|LocatedBlockWritable
operator|.
name|convertLocatedBlock
argument_list|(
name|lb
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|static
specifier|public
name|List
argument_list|<
name|LocatedBlockWritable
argument_list|>
DECL|method|convertLocatedBlock2 (List<org.apache.hadoop.hdfs.protocol.LocatedBlock> lb)
name|convertLocatedBlock2
parameter_list|(
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
argument_list|>
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlockWritable
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|LocatedBlockWritable
argument_list|>
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|LocatedBlockWritable
operator|.
name|convertLocatedBlock
argument_list|(
name|lb
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|LocatedBlockWritable ()
specifier|public
name|LocatedBlockWritable
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|ExtendedBlockWritable
argument_list|()
argument_list|,
operator|new
name|DatanodeInfoWritable
index|[
literal|0
index|]
argument_list|,
literal|0L
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|LocatedBlockWritable (ExtendedBlockWritable eb)
specifier|public
name|LocatedBlockWritable
parameter_list|(
name|ExtendedBlockWritable
name|eb
parameter_list|)
block|{
name|this
argument_list|(
name|eb
argument_list|,
operator|new
name|DatanodeInfoWritable
index|[
literal|0
index|]
argument_list|,
literal|0L
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|LocatedBlockWritable (ExtendedBlockWritable b, DatanodeInfoWritable[] locs)
specifier|public
name|LocatedBlockWritable
parameter_list|(
name|ExtendedBlockWritable
name|b
parameter_list|,
name|DatanodeInfoWritable
index|[]
name|locs
parameter_list|)
block|{
name|this
argument_list|(
name|b
argument_list|,
name|locs
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// startOffset is unknown
block|}
DECL|method|LocatedBlockWritable (ExtendedBlockWritable b, DatanodeInfoWritable[] locs, long startOffset)
specifier|public
name|LocatedBlockWritable
parameter_list|(
name|ExtendedBlockWritable
name|b
parameter_list|,
name|DatanodeInfoWritable
index|[]
name|locs
parameter_list|,
name|long
name|startOffset
parameter_list|)
block|{
name|this
argument_list|(
name|b
argument_list|,
name|locs
argument_list|,
name|startOffset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|LocatedBlockWritable (ExtendedBlockWritable b, DatanodeInfoWritable[] locs, long startOffset, boolean corrupt)
specifier|public
name|LocatedBlockWritable
parameter_list|(
name|ExtendedBlockWritable
name|b
parameter_list|,
name|DatanodeInfoWritable
index|[]
name|locs
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|boolean
name|corrupt
parameter_list|)
block|{
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|startOffset
expr_stmt|;
name|this
operator|.
name|corrupt
operator|=
name|corrupt
expr_stmt|;
if|if
condition|(
name|locs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|locs
operator|=
operator|new
name|DatanodeInfoWritable
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|locs
operator|=
name|locs
expr_stmt|;
block|}
block|}
DECL|method|getBlockToken ()
specifier|public
name|TokenWritable
name|getBlockToken
parameter_list|()
block|{
return|return
name|blockToken
return|;
block|}
DECL|method|setBlockToken (TokenWritable token)
specifier|public
name|void
name|setBlockToken
parameter_list|(
name|TokenWritable
name|token
parameter_list|)
block|{
name|this
operator|.
name|blockToken
operator|=
name|token
expr_stmt|;
block|}
DECL|method|getBlock ()
specifier|public
name|ExtendedBlockWritable
name|getBlock
parameter_list|()
block|{
return|return
name|b
return|;
block|}
DECL|method|getLocations ()
specifier|public
name|DatanodeInfoWritable
index|[]
name|getLocations
parameter_list|()
block|{
return|return
name|locs
return|;
block|}
DECL|method|getStartOffset ()
specifier|public
name|long
name|getStartOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
DECL|method|getBlockSize ()
specifier|public
name|long
name|getBlockSize
parameter_list|()
block|{
return|return
name|b
operator|.
name|getNumBytes
argument_list|()
return|;
block|}
DECL|method|setStartOffset (long value)
name|void
name|setStartOffset
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|value
expr_stmt|;
block|}
DECL|method|setCorrupt (boolean corrupt)
name|void
name|setCorrupt
parameter_list|(
name|boolean
name|corrupt
parameter_list|)
block|{
name|this
operator|.
name|corrupt
operator|=
name|corrupt
expr_stmt|;
block|}
DECL|method|isCorrupt ()
specifier|public
name|boolean
name|isCorrupt
parameter_list|()
block|{
return|return
name|this
operator|.
name|corrupt
return|;
block|}
comment|///////////////////////////////////////////
comment|// Writable
comment|///////////////////////////////////////////
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|blockToken
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|corrupt
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|b
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|locs
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|blockToken
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|corrupt
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|offset
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|b
operator|=
operator|new
name|ExtendedBlockWritable
argument_list|()
expr_stmt|;
name|b
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|this
operator|.
name|locs
operator|=
operator|new
name|DatanodeInfoWritable
index|[
name|count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|locs
index|[
name|i
index|]
operator|=
operator|new
name|DatanodeInfoWritable
argument_list|()
expr_stmt|;
name|locs
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Read LocatedBlock from in. */
DECL|method|read (DataInput in)
specifier|public
specifier|static
name|LocatedBlockWritable
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LocatedBlockWritable
name|lb
init|=
operator|new
name|LocatedBlockWritable
argument_list|()
decl_stmt|;
name|lb
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|lb
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"{"
operator|+
name|b
operator|+
literal|"; getBlockSize()="
operator|+
name|getBlockSize
argument_list|()
operator|+
literal|"; corrupt="
operator|+
name|corrupt
operator|+
literal|"; offset="
operator|+
name|offset
operator|+
literal|"; locs="
operator|+
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|locs
argument_list|)
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

