begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * The PBImageCorruptionDetector detects corruptions in the image.  * It produces a file with the found issues similar to the Delimited  * processor. The default delimiter is tab, as this is an unlikely value  * to be included in an inode path. The delimiter value can be changed  * via the constructor.  *  * It looks for the following kinds of corruptions:  *  - an INode id is mentioned in the INodeDirectorySection, but not present  *    in the INodeSection (corrupt INode case)  *  - an INode has children, but at least one of them is corrupted  *    (missing children case)  * If multiple layers of directory structure are damaged then it is possible  * that an INode is corrupted and also having corrupted children.  *  * Note that the OIV DetectCorruption processor check is not exhaustive,  * and only catches the corruptions like above. This processor may be up to  * extension in the future when new aspects of corruption are found.  */
end_comment

begin_class
DECL|class|PBImageCorruptionDetector
specifier|public
class|class
name|PBImageCorruptionDetector
extends|extends
name|PBImageTextWriter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PBImageCorruptionDetector
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Builder object for producing entries (lines) for    * PBImageCorruptionDetector. The isSnapshot field is mandatory.    */
DECL|class|OutputEntryBuilder
specifier|static
class|class
name|OutputEntryBuilder
block|{
DECL|field|MISSING
specifier|private
specifier|static
specifier|final
name|String
name|MISSING
init|=
literal|"Missing"
decl_stmt|;
DECL|field|corrDetector
specifier|private
name|PBImageCorruptionDetector
name|corrDetector
decl_stmt|;
DECL|field|corruption
specifier|private
name|PBImageCorruption
name|corruption
decl_stmt|;
DECL|field|isSnapshot
specifier|private
name|boolean
name|isSnapshot
decl_stmt|;
DECL|field|parentPath
specifier|private
name|String
name|parentPath
decl_stmt|;
DECL|field|parentId
specifier|private
name|long
name|parentId
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|nodeType
specifier|private
name|String
name|nodeType
decl_stmt|;
DECL|method|OutputEntryBuilder (PBImageCorruptionDetector corrDetector, boolean isSnapshot)
name|OutputEntryBuilder
parameter_list|(
name|PBImageCorruptionDetector
name|corrDetector
parameter_list|,
name|boolean
name|isSnapshot
parameter_list|)
block|{
name|this
operator|.
name|corrDetector
operator|=
name|corrDetector
expr_stmt|;
name|this
operator|.
name|isSnapshot
operator|=
name|isSnapshot
expr_stmt|;
name|this
operator|.
name|parentId
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|parentPath
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|nodeType
operator|=
literal|""
expr_stmt|;
block|}
DECL|method|setCorruption (PBImageCorruption corr)
name|OutputEntryBuilder
name|setCorruption
parameter_list|(
name|PBImageCorruption
name|corr
parameter_list|)
block|{
name|this
operator|.
name|corruption
operator|=
name|corr
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setParentPath (String path)
name|OutputEntryBuilder
name|setParentPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|parentPath
operator|=
name|path
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setParentId (long id)
name|OutputEntryBuilder
name|setParentId
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|this
operator|.
name|parentId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setName (String n)
name|OutputEntryBuilder
name|setName
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|n
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setNodeType (String nType)
name|OutputEntryBuilder
name|setNodeType
parameter_list|(
name|String
name|nType
parameter_list|)
block|{
name|this
operator|.
name|nodeType
operator|=
name|nType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|String
name|build
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|corruption
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|corrDetector
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
name|corruption
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|corrDetector
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|isSnapshot
argument_list|)
argument_list|)
expr_stmt|;
name|corrDetector
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
name|parentPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentId
operator|==
operator|-
literal|1
condition|)
block|{
name|corrDetector
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
name|MISSING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|corrDetector
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
name|parentId
argument_list|)
expr_stmt|;
block|}
name|corrDetector
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|corrDetector
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
name|nodeType
argument_list|)
expr_stmt|;
name|corrDetector
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
name|corruption
operator|.
name|getNumOfCorruptChildren
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|CorruptionChecker
specifier|private
specifier|static
class|class
name|CorruptionChecker
block|{
DECL|field|NODE_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|NODE_TYPE
init|=
literal|"Node"
decl_stmt|;
DECL|field|REF_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|REF_TYPE
init|=
literal|"Ref"
decl_stmt|;
DECL|field|UNKNOWN_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|UNKNOWN_TYPE
init|=
literal|"Unknown"
decl_stmt|;
comment|/** Contains all existing INode IDs. */
DECL|field|nodeIds
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|nodeIds
decl_stmt|;
comment|/** Contains all existing INodeReference IDs. */
DECL|field|nodeRefIds
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|nodeRefIds
decl_stmt|;
DECL|method|CorruptionChecker ()
name|CorruptionChecker
parameter_list|()
block|{
name|nodeIds
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Collect a INode Id.      */
DECL|method|saveNodeId (long id)
name|void
name|saveNodeId
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nodeIds
operator|!=
literal|null
operator|&&
operator|!
name|nodeIds
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|nodeIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns whether the given INode id was saved previously.      */
DECL|method|isNodeIdExist (long id)
name|boolean
name|isNodeIdExist
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
name|nodeIds
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Returns whether the given INodeReference id was saved previously.      */
DECL|method|isNodeRefIdExist (long id)
name|boolean
name|isNodeRefIdExist
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
name|nodeRefIds
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Saves the INodeReference ids.      */
DECL|method|saveNodeRefIds (List<Long> nodeRefIdList)
name|void
name|saveNodeRefIds
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|nodeRefIdList
parameter_list|)
block|{
name|nodeRefIds
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|nodeRefIdList
argument_list|)
expr_stmt|;
block|}
DECL|method|getTypeOfId (long id)
name|String
name|getTypeOfId
parameter_list|(
name|long
name|id
parameter_list|)
block|{
if|if
condition|(
name|isNodeIdExist
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|NODE_TYPE
return|;
block|}
elseif|else
if|if
condition|(
name|isNodeRefIdExist
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|REF_TYPE
return|;
block|}
else|else
block|{
return|return
name|UNKNOWN_TYPE
return|;
block|}
block|}
block|}
comment|/** Delimiter string used while producing output. */
DECL|field|corrChecker
specifier|private
specifier|final
name|CorruptionChecker
name|corrChecker
decl_stmt|;
comment|/** Id to corruption mapping. */
DECL|field|corruptionsMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|PBImageCorruption
argument_list|>
name|corruptionsMap
decl_stmt|;
DECL|method|PBImageCorruptionDetector (PrintStream out, String delimiter, String tempPath)
name|PBImageCorruptionDetector
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|String
name|delimiter
parameter_list|,
name|String
name|tempPath
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|out
argument_list|,
name|delimiter
argument_list|,
name|tempPath
argument_list|)
expr_stmt|;
name|corrChecker
operator|=
operator|new
name|CorruptionChecker
argument_list|()
expr_stmt|;
name|corruptionsMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|PBImageCorruption
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHeader ()
specifier|public
name|String
name|getHeader
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"CorruptionType"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|buffer
argument_list|,
literal|"Id"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|buffer
argument_list|,
literal|"IsSnapshot"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|buffer
argument_list|,
literal|"ParentPath"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|buffer
argument_list|,
literal|"ParentId"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|buffer
argument_list|,
literal|"Name"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|buffer
argument_list|,
literal|"NodeType"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|buffer
argument_list|,
literal|"CorruptChildren"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getEntry (String parentPath, FsImageProto.INodeSection.INode inode)
specifier|public
name|String
name|getEntry
parameter_list|(
name|String
name|parentPath
parameter_list|,
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|INode
name|inode
parameter_list|)
block|{
name|long
name|id
init|=
name|inode
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|corruptionsMap
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|OutputEntryBuilder
name|entryBuilder
init|=
operator|new
name|OutputEntryBuilder
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|long
name|parentId
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|parentId
operator|=
name|getParentId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{       }
name|entryBuilder
operator|.
name|setCorruption
argument_list|(
name|corruptionsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setParentPath
argument_list|(
name|parentPath
argument_list|)
operator|.
name|setName
argument_list|(
name|inode
operator|.
name|getName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
operator|.
name|setNodeType
argument_list|(
name|corrChecker
operator|.
name|getTypeOfId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentId
operator|!=
operator|-
literal|1
condition|)
block|{
name|entryBuilder
operator|.
name|setParentId
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
block|}
name|corruptionsMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|entryBuilder
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|checkNode (FsImageProto.INodeSection.INode p, AtomicInteger numDirs)
specifier|protected
name|void
name|checkNode
parameter_list|(
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|INode
name|p
parameter_list|,
name|AtomicInteger
name|numDirs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|checkNode
argument_list|(
name|p
argument_list|,
name|numDirs
argument_list|)
expr_stmt|;
name|corrChecker
operator|.
name|saveNodeId
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addCorruptedNode (long childId)
specifier|private
name|void
name|addCorruptedNode
parameter_list|(
name|long
name|childId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|corruptionsMap
operator|.
name|containsKey
argument_list|(
name|childId
argument_list|)
condition|)
block|{
name|PBImageCorruption
name|c
init|=
operator|new
name|PBImageCorruption
argument_list|(
name|childId
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|corruptionsMap
operator|.
name|put
argument_list|(
name|childId
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PBImageCorruption
name|c
init|=
name|corruptionsMap
operator|.
name|get
argument_list|(
name|childId
argument_list|)
decl_stmt|;
name|c
operator|.
name|addCorruptNodeCorruption
argument_list|()
expr_stmt|;
name|corruptionsMap
operator|.
name|put
argument_list|(
name|childId
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addCorruptedParent (long id, int numOfCorruption)
specifier|private
name|void
name|addCorruptedParent
parameter_list|(
name|long
name|id
parameter_list|,
name|int
name|numOfCorruption
parameter_list|)
block|{
if|if
condition|(
operator|!
name|corruptionsMap
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|PBImageCorruption
name|c
init|=
operator|new
name|PBImageCorruption
argument_list|(
name|id
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|numOfCorruption
argument_list|)
decl_stmt|;
name|corruptionsMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PBImageCorruption
name|c
init|=
name|corruptionsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|c
operator|.
name|addMissingChildCorruption
argument_list|()
expr_stmt|;
name|c
operator|.
name|setNumberOfCorruption
argument_list|(
name|numOfCorruption
argument_list|)
expr_stmt|;
name|corruptionsMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Scan the INodeDirectory section to construct the namespace.    */
annotation|@
name|Override
DECL|method|buildNamespace (InputStream in, List<Long> refIdList)
specifier|protected
name|void
name|buildNamespace
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|refIdList
parameter_list|)
throws|throws
name|IOException
block|{
name|corrChecker
operator|.
name|saveNodeRefIds
argument_list|(
name|refIdList
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Saved INodeReference ids of size {}."
argument_list|,
name|refIdList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|FsImageProto
operator|.
name|INodeDirectorySection
operator|.
name|DirEntry
name|e
init|=
name|FsImageProto
operator|.
name|INodeDirectorySection
operator|.
name|DirEntry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|count
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scanned {} directories."
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|long
name|parentId
init|=
name|e
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|corrChecker
operator|.
name|isNodeIdExist
argument_list|(
name|parentId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Corruption detected! Parent node is not contained "
operator|+
literal|"in the list of known ids!"
argument_list|)
expr_stmt|;
name|addCorruptedNode
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
block|}
name|int
name|numOfCorruption
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e
operator|.
name|getChildrenCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|long
name|childId
init|=
name|e
operator|.
name|getChildren
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|putDirChildToMetadataMap
argument_list|(
name|parentId
argument_list|,
name|childId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|corrChecker
operator|.
name|isNodeIdExist
argument_list|(
name|childId
argument_list|)
condition|)
block|{
name|addCorruptedNode
argument_list|(
name|childId
argument_list|)
expr_stmt|;
name|numOfCorruption
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numOfCorruption
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} corruption detected! Child nodes are missing."
argument_list|,
name|numOfCorruption
argument_list|)
expr_stmt|;
block|}
name|addCorruptedParent
argument_list|(
name|parentId
argument_list|,
name|numOfCorruption
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|e
operator|.
name|getChildrenCount
argument_list|()
init|;
name|i
operator|<
name|e
operator|.
name|getChildrenCount
argument_list|()
operator|+
name|e
operator|.
name|getRefChildrenCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|refId
init|=
name|e
operator|.
name|getRefChildren
argument_list|(
name|i
operator|-
name|e
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
decl_stmt|;
comment|// In this case the refNode is referred directly (by its position),
comment|// so we couldn't make sure of the correctness
name|putDirChildToMetadataMap
argument_list|(
name|parentId
argument_list|,
name|refIdList
operator|.
name|get
argument_list|(
name|refId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned {} INode directories to build namespace."
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterOutput ()
specifier|public
name|void
name|afterOutput
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|corruptionsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Also write out corruptions when the path could be not be decided
name|LOG
operator|.
name|info
argument_list|(
literal|"Outputting {} more corrupted nodes."
argument_list|,
name|corruptionsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PBImageCorruption
name|c
range|:
name|corruptionsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|id
init|=
name|c
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|""
decl_stmt|;
name|long
name|parentId
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|name
operator|=
name|getNodeName
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IgnoreSnapshotException
name|ignored
parameter_list|)
block|{         }
try|try
block|{
name|parentId
operator|=
name|getParentId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IgnoreSnapshotException
name|ignored
parameter_list|)
block|{         }
name|OutputEntryBuilder
name|entryBuilder
init|=
operator|new
name|OutputEntryBuilder
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|entryBuilder
operator|.
name|setCorruption
argument_list|(
name|corruptionsMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|setNodeType
argument_list|(
name|corrChecker
operator|.
name|getTypeOfId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentId
operator|!=
operator|-
literal|1
condition|)
block|{
name|entryBuilder
operator|.
name|setParentId
argument_list|(
name|parentId
argument_list|)
expr_stmt|;
block|}
name|printIfNotEmpty
argument_list|(
name|entryBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

