begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|SCMCommand
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * Command Queue is queue of commands for the datanode.  *<p>  * Node manager, container Manager and key space managers can queue commands for  * datanodes into this queue. These commands will be send in the order in which  * there where queued.  */
end_comment

begin_class
DECL|class|CommandQueue
specifier|public
class|class
name|CommandQueue
block|{
DECL|field|commandMap
specifier|private
specifier|final
name|Map
argument_list|<
name|DatanodeID
argument_list|,
name|List
argument_list|<
name|SCMCommand
argument_list|>
argument_list|>
name|commandMap
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
comment|// This map is used as default return value.
DECL|field|DEFAULT_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|SCMCommand
argument_list|>
name|DEFAULT_LIST
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Constructs a Command Queue.    */
DECL|method|CommandQueue ()
specifier|public
name|CommandQueue
parameter_list|()
block|{
name|commandMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|lock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns  a list of Commands for the datanode to execute, if we have no    * commands returns a empty list otherwise the current set of    * commands are returned and command map set to empty list again.    *    * @param datanodeID DatanodeID    * @return List of SCM Commands.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getCommand (final DatanodeID datanodeID)
name|List
argument_list|<
name|SCMCommand
argument_list|>
name|getCommand
parameter_list|(
specifier|final
name|DatanodeID
name|datanodeID
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|SCMCommand
argument_list|>
name|cmds
init|=
name|commandMap
operator|.
name|remove
argument_list|(
name|datanodeID
argument_list|)
decl_stmt|;
return|return
name|cmds
operator|==
literal|null
condition|?
name|DEFAULT_LIST
else|:
name|cmds
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Adds a Command to the SCM Queue to send the command to container.    *    * @param datanodeID DatanodeID    * @param command    - Command    */
DECL|method|addCommand (final DatanodeID datanodeID, final SCMCommand command)
name|void
name|addCommand
parameter_list|(
specifier|final
name|DatanodeID
name|datanodeID
parameter_list|,
specifier|final
name|SCMCommand
name|command
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|commandMap
operator|.
name|containsKey
argument_list|(
name|datanodeID
argument_list|)
condition|)
block|{
name|commandMap
operator|.
name|get
argument_list|(
name|datanodeID
argument_list|)
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LinkedList
argument_list|<
name|SCMCommand
argument_list|>
name|newList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|newList
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|commandMap
operator|.
name|put
argument_list|(
name|datanodeID
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

