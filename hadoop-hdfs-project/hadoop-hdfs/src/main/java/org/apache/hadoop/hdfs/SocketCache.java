begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A cache of input stream sockets to Data Node.  */
end_comment

begin_class
DECL|class|SocketCache
class|class
name|SocketCache
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SocketCache
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|SocketAndStreams
specifier|static
class|class
name|SocketAndStreams
implements|implements
name|Closeable
block|{
DECL|field|sock
specifier|public
specifier|final
name|Socket
name|sock
decl_stmt|;
DECL|field|ioStreams
specifier|public
specifier|final
name|IOStreamPair
name|ioStreams
decl_stmt|;
DECL|field|createTime
name|long
name|createTime
decl_stmt|;
DECL|method|SocketAndStreams (Socket s, IOStreamPair ioStreams)
specifier|public
name|SocketAndStreams
parameter_list|(
name|Socket
name|s
parameter_list|,
name|IOStreamPair
name|ioStreams
parameter_list|)
block|{
name|this
operator|.
name|sock
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|ioStreams
operator|=
name|ioStreams
expr_stmt|;
name|this
operator|.
name|createTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|ioStreams
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|ioStreams
operator|.
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|ioStreams
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeSocket
argument_list|(
name|sock
argument_list|)
expr_stmt|;
block|}
DECL|method|getCreateTime ()
specifier|public
name|long
name|getCreateTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|createTime
return|;
block|}
block|}
DECL|field|daemon
specifier|private
name|Daemon
name|daemon
decl_stmt|;
comment|/** A map for per user per datanode. */
DECL|field|multimap
specifier|private
specifier|static
name|LinkedListMultimap
argument_list|<
name|SocketAddress
argument_list|,
name|SocketAndStreams
argument_list|>
name|multimap
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|capacity
specifier|private
specifier|static
name|int
name|capacity
decl_stmt|;
DECL|field|expiryPeriod
specifier|private
specifier|static
name|long
name|expiryPeriod
decl_stmt|;
DECL|field|scInstance
specifier|private
specifier|static
name|SocketCache
name|scInstance
init|=
operator|new
name|SocketCache
argument_list|()
decl_stmt|;
DECL|field|isInitedOnce
specifier|private
specifier|static
name|boolean
name|isInitedOnce
init|=
literal|false
decl_stmt|;
DECL|method|getInstance (int c, long e)
specifier|public
specifier|static
specifier|synchronized
name|SocketCache
name|getInstance
parameter_list|(
name|int
name|c
parameter_list|,
name|long
name|e
parameter_list|)
block|{
comment|// capacity is only initialized once
if|if
condition|(
name|isInitedOnce
operator|==
literal|false
condition|)
block|{
name|capacity
operator|=
name|c
expr_stmt|;
name|expiryPeriod
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|capacity
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SocketCache disabled."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expiryPeriod
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot initialize expiryPeriod to "
operator|+
name|expiryPeriod
operator|+
literal|"when cache is enabled."
argument_list|)
throw|;
block|}
name|isInitedOnce
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|//already initialized once
if|if
condition|(
name|capacity
operator|!=
name|c
operator|||
name|expiryPeriod
operator|!=
name|e
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"capacity and expiry periods already set to "
operator|+
name|capacity
operator|+
literal|" and "
operator|+
name|expiryPeriod
operator|+
literal|" respectively. Cannot set it to "
operator|+
name|c
operator|+
literal|" and "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|scInstance
return|;
block|}
DECL|method|isDaemonStarted ()
specifier|private
name|boolean
name|isDaemonStarted
parameter_list|()
block|{
return|return
operator|(
name|daemon
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
literal|true
return|;
block|}
DECL|method|startExpiryDaemon ()
specifier|private
specifier|synchronized
name|void
name|startExpiryDaemon
parameter_list|()
block|{
comment|// start daemon only if not already started
if|if
condition|(
name|isDaemonStarted
argument_list|()
operator|==
literal|true
condition|)
block|{
return|return;
block|}
name|daemon
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|SocketCache
operator|.
name|this
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//noop
block|}
finally|finally
block|{
name|SocketCache
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|SocketCache
operator|.
name|this
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get a cached socket to the given address.    * @param remote  Remote address the socket is connected to.    * @return  A socket with unknown state, possibly closed underneath. Or null.    */
DECL|method|get (SocketAddress remote)
specifier|public
specifier|synchronized
name|SocketAndStreams
name|get
parameter_list|(
name|SocketAddress
name|remote
parameter_list|)
block|{
if|if
condition|(
name|capacity
operator|<=
literal|0
condition|)
block|{
comment|// disabled
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|SocketAndStreams
argument_list|>
name|sockStreamList
init|=
name|multimap
operator|.
name|get
argument_list|(
name|remote
argument_list|)
decl_stmt|;
if|if
condition|(
name|sockStreamList
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Iterator
argument_list|<
name|SocketAndStreams
argument_list|>
name|iter
init|=
name|sockStreamList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SocketAndStreams
name|candidate
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|candidate
operator|.
name|sock
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return
name|candidate
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Give an unused socket to the cache.    * @param sock socket not used by anyone.    */
DECL|method|put (Socket sock, IOStreamPair ioStreams)
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|Socket
name|sock
parameter_list|,
name|IOStreamPair
name|ioStreams
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|sock
argument_list|)
expr_stmt|;
name|SocketAndStreams
name|s
init|=
operator|new
name|SocketAndStreams
argument_list|(
name|sock
argument_list|,
name|ioStreams
argument_list|)
decl_stmt|;
if|if
condition|(
name|capacity
operator|<=
literal|0
condition|)
block|{
comment|// Cache disabled.
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
name|startExpiryDaemon
argument_list|()
expr_stmt|;
name|SocketAddress
name|remoteAddr
init|=
name|sock
operator|.
name|getRemoteSocketAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteAddr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot cache (unconnected) socket with no remote address: "
operator|+
name|sock
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeSocket
argument_list|(
name|sock
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|capacity
operator|==
name|multimap
operator|.
name|size
argument_list|()
condition|)
block|{
name|evictOldest
argument_list|()
expr_stmt|;
block|}
name|multimap
operator|.
name|put
argument_list|(
name|remoteAddr
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|multimap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Evict and close sockets older than expiry period from the cache.    */
DECL|method|evictExpired (long expiryPeriod)
specifier|private
specifier|synchronized
name|void
name|evictExpired
parameter_list|(
name|long
name|expiryPeriod
parameter_list|)
block|{
while|while
condition|(
name|multimap
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|SocketAddress
argument_list|,
name|SocketAndStreams
argument_list|>
argument_list|>
name|iter
init|=
name|multimap
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|SocketAddress
argument_list|,
name|SocketAndStreams
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// if oldest socket expired, remove it
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getCreateTime
argument_list|()
operator|<
name|expiryPeriod
condition|)
block|{
break|break;
block|}
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|SocketAndStreams
name|s
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Evict the oldest entry in the cache.    */
DECL|method|evictOldest ()
specifier|private
specifier|synchronized
name|void
name|evictOldest
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|SocketAddress
argument_list|,
name|SocketAndStreams
argument_list|>
argument_list|>
name|iter
init|=
name|multimap
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot evict from empty cache! "
operator|+
literal|"capacity: "
operator|+
name|capacity
argument_list|)
throw|;
block|}
name|Entry
argument_list|<
name|SocketAddress
argument_list|,
name|SocketAndStreams
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|SocketAndStreams
name|s
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Periodically check in the cache and expire the entries    * older than expiryPeriod minutes    */
DECL|method|run ()
specifier|private
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|long
name|lastExpiryTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
init|;
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|;
name|Thread
operator|.
name|sleep
argument_list|(
name|expiryPeriod
argument_list|)
control|)
block|{
specifier|final
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastExpiryTime
decl_stmt|;
if|if
condition|(
name|elapsed
operator|>=
name|expiryPeriod
condition|)
block|{
name|evictExpired
argument_list|(
name|expiryPeriod
argument_list|)
expr_stmt|;
name|lastExpiryTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
name|clear
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"Daemon Interrupted"
argument_list|)
throw|;
block|}
comment|/**    * Empty the cache, and close all sockets.    */
DECL|method|clear ()
specifier|private
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|SocketAndStreams
name|sockAndStream
range|:
name|multimap
operator|.
name|values
argument_list|()
control|)
block|{
name|sockAndStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|multimap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

