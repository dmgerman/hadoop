begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|MessageEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelUpstreamHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|QueryStringDecoder
import|;
end_import

begin_comment
comment|/**  * Implement the read-only WebHDFS API for fsimage.  */
end_comment

begin_class
DECL|class|FSImageHandler
specifier|public
class|class
name|FSImageHandler
extends|extends
name|SimpleChannelUpstreamHandler
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSImageHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|loader
specifier|private
specifier|final
name|FSImageLoader
name|loader
decl_stmt|;
DECL|method|FSImageHandler (FSImageLoader loader)
specifier|public
name|FSImageHandler
parameter_list|(
name|FSImageLoader
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|messageReceived ( ChannelHandlerContext ctx, MessageEvent e)
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|MessageEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|op
init|=
name|getOp
argument_list|(
name|e
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|path
init|=
name|getPath
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|handleOperation
argument_list|(
name|op
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|notFoundResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|e
operator|.
name|getFuture
argument_list|()
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** return the op parameter in upper case */
DECL|method|getOp (MessageEvent e)
specifier|private
name|String
name|getOp
parameter_list|(
name|MessageEvent
name|e
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parameters
init|=
name|getDecoder
argument_list|(
name|e
argument_list|)
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|containsKey
argument_list|(
literal|"op"
argument_list|)
condition|)
block|{
return|return
name|parameters
operator|.
name|get
argument_list|(
literal|"op"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
else|else
block|{
comment|// return "" to avoid NPE
return|return
literal|""
return|;
block|}
block|}
DECL|method|getPath (MessageEvent e)
specifier|private
name|String
name|getPath
parameter_list|(
name|MessageEvent
name|e
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|String
name|path
init|=
name|getDecoder
argument_list|(
name|e
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// trim "/webhdfs/v1" to keep compatibility with WebHDFS API
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/webhdfs/v1/"
argument_list|)
condition|)
block|{
return|return
name|path
operator|.
name|replaceFirst
argument_list|(
literal|"/webhdfs/v1"
argument_list|,
literal|""
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Path: "
operator|+
name|path
operator|+
literal|" should "
operator|+
literal|"start with \"/webhdfs/v1/\""
argument_list|)
throw|;
block|}
block|}
DECL|method|getDecoder (MessageEvent e)
specifier|private
name|QueryStringDecoder
name|getDecoder
parameter_list|(
name|MessageEvent
name|e
parameter_list|)
block|{
name|HttpRequest
name|request
init|=
operator|(
name|HttpRequest
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
return|return
operator|new
name|QueryStringDecoder
argument_list|(
name|request
operator|.
name|getUri
argument_list|()
argument_list|)
return|;
block|}
DECL|method|handleOperation (String op, String path, MessageEvent e)
specifier|private
name|void
name|handleOperation
parameter_list|(
name|String
name|op
parameter_list|,
name|String
name|path
parameter_list|,
name|MessageEvent
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpRequest
name|request
init|=
operator|(
name|HttpRequest
operator|)
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|OK
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|String
name|content
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|==
name|HttpMethod
operator|.
name|GET
condition|)
block|{
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"GETFILESTATUS"
argument_list|)
condition|)
block|{
name|content
operator|=
name|loader
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|.
name|equals
argument_list|(
literal|"LISTSTATUS"
argument_list|)
condition|)
block|{
name|content
operator|=
name|loader
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpResponseStatus
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// only HTTP GET is allowed since fsimage is read-only.
name|response
operator|.
name|setStatus
argument_list|(
name|HttpResponseStatus
operator|.
name|METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|HttpHeaders
operator|.
name|setContentLength
argument_list|(
name|response
argument_list|,
name|content
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|" method="
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" op="
operator|+
name|op
operator|+
literal|" target="
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|notFoundResponse (MessageEvent e)
specifier|private
name|void
name|notFoundResponse
parameter_list|(
name|MessageEvent
name|e
parameter_list|)
block|{
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|NOT_FOUND
argument_list|)
decl_stmt|;
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

