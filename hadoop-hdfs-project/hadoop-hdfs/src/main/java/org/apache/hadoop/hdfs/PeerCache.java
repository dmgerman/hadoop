begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|Peer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * A cache of input stream sockets to Data Node.  */
end_comment

begin_class
DECL|class|PeerCache
class|class
name|PeerCache
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PeerCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|Key
specifier|private
specifier|static
class|class
name|Key
block|{
DECL|field|dnID
specifier|final
name|DatanodeID
name|dnID
decl_stmt|;
DECL|field|isDomain
specifier|final
name|boolean
name|isDomain
decl_stmt|;
DECL|method|Key (DatanodeID dnID, boolean isDomain)
name|Key
parameter_list|(
name|DatanodeID
name|dnID
parameter_list|,
name|boolean
name|isDomain
parameter_list|)
block|{
name|this
operator|.
name|dnID
operator|=
name|dnID
expr_stmt|;
name|this
operator|.
name|isDomain
operator|=
name|isDomain
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Key
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Key
name|other
init|=
operator|(
name|Key
operator|)
name|o
decl_stmt|;
return|return
name|dnID
operator|.
name|equals
argument_list|(
name|other
operator|.
name|dnID
argument_list|)
operator|&&
name|isDomain
operator|==
name|other
operator|.
name|isDomain
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|dnID
operator|.
name|hashCode
argument_list|()
operator|^
operator|(
name|isDomain
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
block|}
DECL|class|Value
specifier|private
specifier|static
class|class
name|Value
block|{
DECL|field|peer
specifier|private
specifier|final
name|Peer
name|peer
decl_stmt|;
DECL|field|time
specifier|private
specifier|final
name|long
name|time
decl_stmt|;
DECL|method|Value (Peer peer, long time)
name|Value
parameter_list|(
name|Peer
name|peer
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|peer
operator|=
name|peer
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
block|}
DECL|method|getPeer ()
name|Peer
name|getPeer
parameter_list|()
block|{
return|return
name|peer
return|;
block|}
DECL|method|getTime ()
name|long
name|getTime
parameter_list|()
block|{
return|return
name|time
return|;
block|}
block|}
DECL|field|daemon
specifier|private
name|Daemon
name|daemon
decl_stmt|;
comment|/** A map for per user per datanode. */
DECL|field|multimap
specifier|private
specifier|final
name|LinkedListMultimap
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|multimap
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|capacity
specifier|private
specifier|final
name|int
name|capacity
decl_stmt|;
DECL|field|expiryPeriod
specifier|private
specifier|final
name|long
name|expiryPeriod
decl_stmt|;
DECL|method|PeerCache (int c, long e)
specifier|public
name|PeerCache
parameter_list|(
name|int
name|c
parameter_list|,
name|long
name|e
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|expiryPeriod
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|capacity
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SocketCache disabled."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expiryPeriod
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot initialize expiryPeriod to "
operator|+
name|expiryPeriod
operator|+
literal|" when cache is enabled."
argument_list|)
throw|;
block|}
block|}
DECL|method|isDaemonStarted ()
specifier|private
name|boolean
name|isDaemonStarted
parameter_list|()
block|{
return|return
operator|(
name|daemon
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
literal|true
return|;
block|}
DECL|method|startExpiryDaemon ()
specifier|private
specifier|synchronized
name|void
name|startExpiryDaemon
parameter_list|()
block|{
comment|// start daemon only if not already started
if|if
condition|(
name|isDaemonStarted
argument_list|()
operator|==
literal|true
condition|)
block|{
return|return;
block|}
name|daemon
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|PeerCache
operator|.
name|this
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//noop
block|}
finally|finally
block|{
name|PeerCache
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|PeerCache
operator|.
name|this
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|daemon
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get a cached peer connected to the given DataNode.    * @param dnId         The DataNode to get a Peer for.    * @param isDomain     Whether to retrieve a DomainPeer or not.    *    * @return             An open Peer connected to the DN, or null if none    *                     was found.     */
DECL|method|get (DatanodeID dnId, boolean isDomain)
specifier|public
specifier|synchronized
name|Peer
name|get
parameter_list|(
name|DatanodeID
name|dnId
parameter_list|,
name|boolean
name|isDomain
parameter_list|)
block|{
if|if
condition|(
name|capacity
operator|<=
literal|0
condition|)
block|{
comment|// disabled
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Value
argument_list|>
name|sockStreamList
init|=
name|multimap
operator|.
name|get
argument_list|(
operator|new
name|Key
argument_list|(
name|dnId
argument_list|,
name|isDomain
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sockStreamList
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Iterator
argument_list|<
name|Value
argument_list|>
name|iter
init|=
name|sockStreamList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Value
name|candidate
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|long
name|ageMs
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|candidate
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Peer
name|peer
init|=
name|candidate
operator|.
name|getPeer
argument_list|()
decl_stmt|;
if|if
condition|(
name|ageMs
operator|>=
name|expiryPeriod
condition|)
block|{
try|try
block|{
name|peer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"got IOException closing stale peer "
operator|+
name|peer
operator|+
literal|", which is "
operator|+
name|ageMs
operator|+
literal|" ms old"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|peer
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return
name|peer
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Give an unused socket to the cache.    */
DECL|method|put (DatanodeID dnId, Peer peer)
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|DatanodeID
name|dnId
parameter_list|,
name|Peer
name|peer
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dnId
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|peer
argument_list|)
expr_stmt|;
if|if
condition|(
name|peer
operator|.
name|isClosed
argument_list|()
condition|)
return|return;
if|if
condition|(
name|capacity
operator|<=
literal|0
condition|)
block|{
comment|// Cache disabled.
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|peer
argument_list|)
expr_stmt|;
return|return;
block|}
name|startExpiryDaemon
argument_list|()
expr_stmt|;
if|if
condition|(
name|capacity
operator|==
name|multimap
operator|.
name|size
argument_list|()
condition|)
block|{
name|evictOldest
argument_list|()
expr_stmt|;
block|}
name|multimap
operator|.
name|put
argument_list|(
operator|new
name|Key
argument_list|(
name|dnId
argument_list|,
name|peer
operator|.
name|getDomainSocket
argument_list|()
operator|!=
literal|null
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|peer
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|multimap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Evict and close sockets older than expiry period from the cache.    */
DECL|method|evictExpired (long expiryPeriod)
specifier|private
specifier|synchronized
name|void
name|evictExpired
parameter_list|(
name|long
name|expiryPeriod
parameter_list|)
block|{
while|while
condition|(
name|multimap
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|iter
init|=
name|multimap
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// if oldest socket expired, remove it
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getTime
argument_list|()
operator|<
name|expiryPeriod
condition|)
block|{
break|break;
block|}
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPeer
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Evict the oldest entry in the cache.    */
DECL|method|evictOldest ()
specifier|private
specifier|synchronized
name|void
name|evictOldest
parameter_list|()
block|{
comment|// We can get the oldest element immediately, because of an interesting
comment|// property of LinkedListMultimap: its iterator traverses entries in the
comment|// order that they were added.
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|iter
init|=
name|multimap
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot evict from empty cache! "
operator|+
literal|"capacity: "
operator|+
name|capacity
argument_list|)
throw|;
block|}
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPeer
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/**    * Periodically check in the cache and expire the entries    * older than expiryPeriod minutes    */
DECL|method|run ()
specifier|private
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|long
name|lastExpiryTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
init|;
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|;
name|Thread
operator|.
name|sleep
argument_list|(
name|expiryPeriod
argument_list|)
control|)
block|{
specifier|final
name|long
name|elapsed
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|lastExpiryTime
decl_stmt|;
if|if
condition|(
name|elapsed
operator|>=
name|expiryPeriod
condition|)
block|{
name|evictExpired
argument_list|(
name|expiryPeriod
argument_list|)
expr_stmt|;
name|lastExpiryTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
name|clear
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"Daemon Interrupted"
argument_list|)
throw|;
block|}
comment|/**    * Empty the cache, and close all sockets.    */
annotation|@
name|VisibleForTesting
DECL|method|clear ()
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|Value
name|value
range|:
name|multimap
operator|.
name|values
argument_list|()
control|)
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|value
operator|.
name|getPeer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|multimap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|daemon
operator|!=
literal|null
condition|)
block|{
name|daemon
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|daemon
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to join thread"
argument_list|)
throw|;
block|}
block|}
name|daemon
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

