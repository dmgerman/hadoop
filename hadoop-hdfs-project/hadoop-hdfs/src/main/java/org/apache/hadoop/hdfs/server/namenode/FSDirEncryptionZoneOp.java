begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|CRYPTO_XATTR_FILE_ENCRYPTION_INFO
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
operator|.
name|BatchedListEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|XAttrHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|EncryptionZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ZoneReencryptionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ReencryptionInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ZoneEncryptionInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
operator|.
name|DirOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ReencryptionUpdater
operator|.
name|FileEdekInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|CRYPTO_XATTR_ENCRYPTION_ZONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_comment
comment|/**  * Helper class to perform encryption zone operation.  */
end_comment

begin_class
DECL|class|FSDirEncryptionZoneOp
specifier|final
class|class
name|FSDirEncryptionZoneOp
block|{
comment|/**    * Private constructor for preventing FSDirEncryptionZoneOp object creation.    * Static-only class.    */
DECL|method|FSDirEncryptionZoneOp ()
specifier|private
name|FSDirEncryptionZoneOp
parameter_list|()
block|{}
comment|/**    * Invoke KeyProvider APIs to generate an encrypted data encryption key for    * an encryption zone. Should not be called with any locks held.    *    * @param fsd fsdirectory    * @param ezKeyName key name of an encryption zone    * @return New EDEK, or null if ezKeyName is null    * @throws IOException    */
DECL|method|generateEncryptedDataEncryptionKey ( final FSDirectory fsd, final String ezKeyName)
specifier|private
specifier|static
name|EncryptedKeyVersion
name|generateEncryptedDataEncryptionKey
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|String
name|ezKeyName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// must not be holding lock during this operation
assert|assert
operator|!
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|hasReadLock
argument_list|()
assert|;
assert|assert
operator|!
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|hasWriteLock
argument_list|()
assert|;
if|if
condition|(
name|ezKeyName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|generateEDEKStartTime
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
comment|// Generate EDEK with login user (hdfs) so that KMS does not need
comment|// an extra proxy configuration allowing hdfs to proxy its clients and
comment|// KMS does not need configuration to allow non-hdfs user GENERATE_EEK
comment|// operation.
name|EncryptedKeyVersion
name|edek
init|=
name|SecurityUtil
operator|.
name|doAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|EncryptedKeyVersion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|EncryptedKeyVersion
name|run
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|fsd
operator|.
name|getProvider
argument_list|()
operator|.
name|generateEncryptedKey
argument_list|(
name|ezKeyName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|long
name|generateEDEKTime
init|=
name|monotonicNow
argument_list|()
operator|-
name|generateEDEKStartTime
decl_stmt|;
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
operator|.
name|addGenerateEDEKTime
argument_list|(
name|generateEDEKTime
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|edek
argument_list|)
expr_stmt|;
return|return
name|edek
return|;
block|}
DECL|method|ensureKeyIsInitialized (final FSDirectory fsd, final String keyName, final String src)
specifier|static
name|KeyProvider
operator|.
name|Metadata
name|ensureKeyIsInitialized
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|String
name|keyName
parameter_list|,
specifier|final
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyProviderCryptoExtension
name|provider
init|=
name|fsd
operator|.
name|getProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't create an encryption zone for "
operator|+
name|src
operator|+
literal|" since no key provider is available."
argument_list|)
throw|;
block|}
if|if
condition|(
name|keyName
operator|==
literal|null
operator|||
name|keyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Must specify a key name when creating an "
operator|+
literal|"encryption zone"
argument_list|)
throw|;
block|}
name|EncryptionFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|ensureKeyIsInitialized
argument_list|()
expr_stmt|;
name|KeyProvider
operator|.
name|Metadata
name|metadata
init|=
name|provider
operator|.
name|getMetadata
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
comment|/*        * It would be nice if we threw something more specific than        * IOException when the key is not found, but the KeyProvider API        * doesn't provide for that. If that API is ever changed to throw        * something more specific (e.g. UnknownKeyException) then we can        * update this to match it, or better yet, just rethrow the        * KeyProvider's exception.        */
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Key "
operator|+
name|keyName
operator|+
literal|" doesn't exist."
argument_list|)
throw|;
block|}
comment|// If the provider supports pool for EDEKs, this will fill in the pool
name|provider
operator|.
name|warmUpEncryptedKeys
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
comment|/**    * Create an encryption zone on directory path using the specified key.    *    * @param fsd fsdirectory    * @param srcArg the path of a directory which will be the root of the    *               encryption zone. The directory must be empty    * @param pc permission checker to check fs permission    * @param cipher cipher    * @param keyName name of a key which must be present in the configured    *                KeyProvider    * @param logRetryCache whether to record RPC ids in editlog for retry cache    *                      rebuilding    * @return FileStatus    * @throws IOException    */
DECL|method|createEncryptionZone (final FSDirectory fsd, final String srcArg, final FSPermissionChecker pc, final String cipher, final String keyName, final boolean logRetryCache)
specifier|static
name|FileStatus
name|createEncryptionZone
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|String
name|srcArg
parameter_list|,
specifier|final
name|FSPermissionChecker
name|pc
parameter_list|,
specifier|final
name|String
name|cipher
parameter_list|,
specifier|final
name|String
name|keyName
parameter_list|,
specifier|final
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|CipherSuite
name|suite
init|=
name|CipherSuite
operator|.
name|convert
argument_list|(
name|cipher
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// For now this is hard coded, as we only support one method.
specifier|final
name|CryptoProtocolVersion
name|version
init|=
name|CryptoProtocolVersion
operator|.
name|ENCRYPTION_ZONES
decl_stmt|;
specifier|final
name|INodesInPath
name|iip
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|iip
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|srcArg
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|XAttr
name|ezXAttr
init|=
name|fsd
operator|.
name|ezManager
operator|.
name|createEncryptionZone
argument_list|(
name|iip
argument_list|,
name|suite
argument_list|,
name|version
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|add
argument_list|(
name|ezXAttr
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetXAttrs
argument_list|(
name|iip
operator|.
name|getPath
argument_list|()
argument_list|,
name|xAttrs
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
comment|/**    * Get the encryption zone for the specified path.    *    * @param fsd fsdirectory    * @param srcArg the path of a file or directory to get the EZ for    * @param pc permission checker to check fs permission    * @return the EZ with file status.    */
DECL|method|getEZForPath ( final FSDirectory fsd, final String srcArg, final FSPermissionChecker pc)
specifier|static
name|Map
operator|.
name|Entry
argument_list|<
name|EncryptionZone
argument_list|,
name|FileStatus
argument_list|>
name|getEZForPath
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|String
name|srcArg
parameter_list|,
specifier|final
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|INodesInPath
name|iip
decl_stmt|;
specifier|final
name|EncryptionZone
name|ret
decl_stmt|;
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|iip
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|srcArg
argument_list|,
name|DirOp
operator|.
name|READ
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|fsd
operator|.
name|ezManager
operator|.
name|getEZINodeForPath
argument_list|(
name|iip
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
name|FileStatus
name|auditStat
init|=
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
decl_stmt|;
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleImmutableEntry
argument_list|<>
argument_list|(
name|ret
argument_list|,
name|auditStat
argument_list|)
return|;
block|}
DECL|method|getEZForPath (final FSDirectory fsd, final INodesInPath iip)
specifier|static
name|EncryptionZone
name|getEZForPath
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|)
block|{
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|fsd
operator|.
name|ezManager
operator|.
name|getEZINodeForPath
argument_list|(
name|iip
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|listEncryptionZones ( final FSDirectory fsd, final long prevId)
specifier|static
name|BatchedListEntries
argument_list|<
name|EncryptionZone
argument_list|>
name|listEncryptionZones
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|long
name|prevId
parameter_list|)
throws|throws
name|IOException
block|{
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|fsd
operator|.
name|ezManager
operator|.
name|listEncryptionZones
argument_list|(
name|prevId
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reencryptEncryptionZone (final FSDirectory fsd, final INodesInPath iip, final String keyVersionName)
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|reencryptEncryptionZone
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|,
specifier|final
name|String
name|keyVersionName
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|keyVersionName
operator|!=
literal|null
assert|;
return|return
name|fsd
operator|.
name|ezManager
operator|.
name|reencryptEncryptionZone
argument_list|(
name|iip
argument_list|,
name|keyVersionName
argument_list|)
return|;
block|}
DECL|method|cancelReencryptEncryptionZone (final FSDirectory fsd, final INodesInPath iip)
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|cancelReencryptEncryptionZone
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fsd
operator|.
name|ezManager
operator|.
name|cancelReencryptEncryptionZone
argument_list|(
name|iip
argument_list|)
return|;
block|}
DECL|method|listReencryptionStatus ( final FSDirectory fsd, final long prevId)
specifier|static
name|BatchedListEntries
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|listReencryptionStatus
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|long
name|prevId
parameter_list|)
throws|throws
name|IOException
block|{
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|fsd
operator|.
name|ezManager
operator|.
name|listReencryptionStatus
argument_list|(
name|prevId
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Update re-encryption progress (submitted). Caller should    * logSync after calling this, outside of the FSN lock.    *<p>    * The reencryption status is updated during SetXAttrs.    */
DECL|method|updateReencryptionSubmitted (final FSDirectory fsd, final INodesInPath iip, final String ezKeyVersionName)
specifier|static
name|XAttr
name|updateReencryptionSubmitted
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|,
specifier|final
name|String
name|ezKeyVersionName
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ezKeyVersionName
argument_list|,
literal|"ezKeyVersionName is null."
argument_list|)
expr_stmt|;
specifier|final
name|ZoneEncryptionInfoProto
name|zoneProto
init|=
name|getZoneEncryptionInfoProto
argument_list|(
name|iip
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|zoneProto
argument_list|,
literal|"ZoneEncryptionInfoProto is null."
argument_list|)
expr_stmt|;
specifier|final
name|ReencryptionInfoProto
name|newProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|ezKeyVersionName
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|ZoneEncryptionInfoProto
name|newZoneProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|zoneProto
operator|.
name|getSuite
argument_list|()
argument_list|)
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|zoneProto
operator|.
name|getCryptoProtocolVersion
argument_list|()
argument_list|)
argument_list|,
name|zoneProto
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|newProto
argument_list|)
decl_stmt|;
specifier|final
name|XAttr
name|xattr
init|=
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|CRYPTO_XATTR_ENCRYPTION_ZONE
argument_list|,
name|newZoneProto
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xattrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|xattrs
operator|.
name|add
argument_list|(
name|xattr
argument_list|)
expr_stmt|;
name|FSDirXAttrOp
operator|.
name|unprotectedSetXAttrs
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|xattrs
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|xattr
return|;
block|}
comment|/**    * Update re-encryption progress (start, checkpoint). Caller should    * logSync after calling this, outside of the FSN lock.    *<p>    * The reencryption status is updated during SetXAttrs.    * Original reencryption status is passed in to get existing information    * such as ezkeyVersionName and submissionTime.    */
DECL|method|updateReencryptionProgress (final FSDirectory fsd, final INode zoneNode, final ZoneReencryptionStatus origStatus, final String lastFile, final long numReencrypted, final long numFailures)
specifier|static
name|XAttr
name|updateReencryptionProgress
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|INode
name|zoneNode
parameter_list|,
specifier|final
name|ZoneReencryptionStatus
name|origStatus
parameter_list|,
specifier|final
name|String
name|lastFile
parameter_list|,
specifier|final
name|long
name|numReencrypted
parameter_list|,
specifier|final
name|long
name|numFailures
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|zoneNode
argument_list|,
literal|"Zone node is null"
argument_list|)
expr_stmt|;
name|INodesInPath
name|iip
init|=
name|INodesInPath
operator|.
name|fromINode
argument_list|(
name|zoneNode
argument_list|)
decl_stmt|;
specifier|final
name|ZoneEncryptionInfoProto
name|zoneProto
init|=
name|getZoneEncryptionInfoProto
argument_list|(
name|iip
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|zoneProto
argument_list|,
literal|"ZoneEncryptionInfoProto is null."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|origStatus
argument_list|,
literal|"Null status for "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ReencryptionInfoProto
name|newProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|origStatus
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|origStatus
operator|.
name|getSubmissionTime
argument_list|()
argument_list|,
literal|false
argument_list|,
name|origStatus
operator|.
name|getFilesReencrypted
argument_list|()
operator|+
name|numReencrypted
argument_list|,
name|origStatus
operator|.
name|getNumReencryptionFailures
argument_list|()
operator|+
name|numFailures
argument_list|,
literal|null
argument_list|,
name|lastFile
argument_list|)
decl_stmt|;
specifier|final
name|ZoneEncryptionInfoProto
name|newZoneProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|zoneProto
operator|.
name|getSuite
argument_list|()
argument_list|)
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|zoneProto
operator|.
name|getCryptoProtocolVersion
argument_list|()
argument_list|)
argument_list|,
name|zoneProto
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|newProto
argument_list|)
decl_stmt|;
specifier|final
name|XAttr
name|xattr
init|=
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|CRYPTO_XATTR_ENCRYPTION_ZONE
argument_list|,
name|newZoneProto
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xattrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|xattrs
operator|.
name|add
argument_list|(
name|xattr
argument_list|)
expr_stmt|;
name|FSDirXAttrOp
operator|.
name|unprotectedSetXAttrs
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|xattrs
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|xattr
return|;
block|}
comment|/**    * Log re-encrypt complete (cancel, or 100% re-encrypt) to edits.    * Caller should logSync after calling this, outside of the FSN lock.    *<p>    * Original reencryption status is passed in to get existing information,    * this should include whether it is finished due to cancellation.    * The reencryption status is updated during SetXAttrs for completion time.    */
DECL|method|updateReencryptionFinish (final FSDirectory fsd, final INodesInPath zoneIIP, final ZoneReencryptionStatus origStatus)
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|updateReencryptionFinish
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|INodesInPath
name|zoneIIP
parameter_list|,
specifier|final
name|ZoneReencryptionStatus
name|origStatus
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|origStatus
operator|!=
literal|null
assert|;
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|fsd
operator|.
name|ezManager
operator|.
name|getReencryptionStatus
argument_list|()
operator|.
name|markZoneCompleted
argument_list|(
name|zoneIIP
operator|.
name|getLastINode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|XAttr
name|xattr
init|=
name|generateNewXAttrForReencryptionFinish
argument_list|(
name|zoneIIP
argument_list|,
name|origStatus
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xattrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|xattrs
operator|.
name|add
argument_list|(
name|xattr
argument_list|)
expr_stmt|;
name|FSDirXAttrOp
operator|.
name|unprotectedSetXAttrs
argument_list|(
name|fsd
argument_list|,
name|zoneIIP
argument_list|,
name|xattrs
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|xattrs
return|;
block|}
DECL|method|generateNewXAttrForReencryptionFinish (final INodesInPath iip, final ZoneReencryptionStatus status)
specifier|static
name|XAttr
name|generateNewXAttrForReencryptionFinish
parameter_list|(
specifier|final
name|INodesInPath
name|iip
parameter_list|,
specifier|final
name|ZoneReencryptionStatus
name|status
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ZoneEncryptionInfoProto
name|zoneProto
init|=
name|getZoneEncryptionInfoProto
argument_list|(
name|iip
argument_list|)
decl_stmt|;
specifier|final
name|ReencryptionInfoProto
name|newRiProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|status
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|status
operator|.
name|getSubmissionTime
argument_list|()
argument_list|,
name|status
operator|.
name|isCanceled
argument_list|()
argument_list|,
name|status
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|,
name|status
operator|.
name|getNumReencryptionFailures
argument_list|()
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|ZoneEncryptionInfoProto
name|newZoneProto
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|zoneProto
operator|.
name|getSuite
argument_list|()
argument_list|)
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|zoneProto
operator|.
name|getCryptoProtocolVersion
argument_list|()
argument_list|)
argument_list|,
name|zoneProto
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|newRiProto
argument_list|)
decl_stmt|;
specifier|final
name|XAttr
name|xattr
init|=
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|CRYPTO_XATTR_ENCRYPTION_ZONE
argument_list|,
name|newZoneProto
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|xattr
return|;
block|}
DECL|method|getZoneEncryptionInfoProto ( final INodesInPath iip)
specifier|private
specifier|static
name|ZoneEncryptionInfoProto
name|getZoneEncryptionInfoProto
parameter_list|(
specifier|final
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|XAttr
name|fileXAttr
init|=
name|FSDirXAttrOp
operator|.
name|unprotectedGetXAttrByPrefixedName
argument_list|(
name|iip
argument_list|,
name|CRYPTO_XATTR_ENCRYPTION_ZONE
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileXAttr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not find reencryption XAttr for file "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|ZoneEncryptionInfoProto
operator|.
name|parseFrom
argument_list|(
name|fileXAttr
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not parse file encryption info for "
operator|+
literal|"inode "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Save the batch's edeks to file xattrs.    */
DECL|method|saveFileXAttrsForBatch (FSDirectory fsd, List<FileEdekInfo> batch)
specifier|static
name|void
name|saveFileXAttrsForBatch
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|List
argument_list|<
name|FileEdekInfo
argument_list|>
name|batch
parameter_list|)
block|{
assert|assert
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|hasWriteLock
argument_list|()
assert|;
assert|assert
operator|!
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
if|if
condition|(
name|batch
operator|!=
literal|null
operator|&&
operator|!
name|batch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|FileEdekInfo
name|entry
range|:
name|batch
control|)
block|{
specifier|final
name|INode
name|inode
init|=
name|fsd
operator|.
name|getInode
argument_list|(
name|entry
operator|.
name|getInodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// no dir lock, so inode could be removed. no-op if so.
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot find inode {}, skip saving xattr for"
operator|+
literal|" re-encryption"
argument_list|,
name|entry
operator|.
name|getInodeId
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetXAttrs
argument_list|(
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|inode
operator|.
name|getXAttrFeature
argument_list|()
operator|.
name|getXAttrs
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set the FileEncryptionInfo for an INode.    *    * @param fsd fsdirectory    * @param info file encryption information    * @param flag action when setting xattr. Either CREATE or REPLACE.    * @throws IOException    */
DECL|method|setFileEncryptionInfo (final FSDirectory fsd, final INodesInPath iip, final FileEncryptionInfo info, final XAttrSetFlag flag)
specifier|static
name|void
name|setFileEncryptionInfo
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|,
specifier|final
name|FileEncryptionInfo
name|info
parameter_list|,
specifier|final
name|XAttrSetFlag
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make the PB for the xattr
specifier|final
name|HdfsProtos
operator|.
name|PerFileEncryptionInfoProto
name|proto
init|=
name|PBHelperClient
operator|.
name|convertPerFileEncInfo
argument_list|(
name|info
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|protoBytes
init|=
name|proto
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
specifier|final
name|XAttr
name|fileEncryptionAttr
init|=
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|CRYPTO_XATTR_FILE_ENCRYPTION_INFO
argument_list|,
name|protoBytes
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|add
argument_list|(
name|fileEncryptionAttr
argument_list|)
expr_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|FSDirXAttrOp
operator|.
name|unprotectedSetXAttrs
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|xAttrs
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|flag
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This function combines the per-file encryption info (obtained    * from the inode's XAttrs), and the encryption info from its zone, and    * returns a consolidated FileEncryptionInfo instance. Null is returned    * for non-encrypted or raw files.    *    * @param fsd fsdirectory    * @param iip inodes in the path containing the file, passed in to    *            avoid obtaining the list of inodes again    * @return consolidated file encryption info; null for non-encrypted files    */
DECL|method|getFileEncryptionInfo (final FSDirectory fsd, final INodesInPath iip)
specifier|static
name|FileEncryptionInfo
name|getFileEncryptionInfo
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|iip
operator|.
name|isRaw
argument_list|()
operator|||
operator|!
name|fsd
operator|.
name|ezManager
operator|.
name|hasCreatedEncryptionZone
argument_list|()
operator|||
operator|!
name|iip
operator|.
name|getLastINode
argument_list|()
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|EncryptionZone
name|encryptionZone
init|=
name|getEZForPath
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|)
decl_stmt|;
if|if
condition|(
name|encryptionZone
operator|==
literal|null
condition|)
block|{
comment|// not an encrypted file
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|encryptionZone
operator|.
name|getPath
argument_list|()
operator|==
literal|null
operator|||
name|encryptionZone
operator|.
name|getPath
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|NameNode
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encryption zone "
operator|+
name|encryptionZone
operator|.
name|getPath
argument_list|()
operator|+
literal|" does not have a valid path."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|CryptoProtocolVersion
name|version
init|=
name|encryptionZone
operator|.
name|getVersion
argument_list|()
decl_stmt|;
specifier|final
name|CipherSuite
name|suite
init|=
name|encryptionZone
operator|.
name|getSuite
argument_list|()
decl_stmt|;
specifier|final
name|String
name|keyName
init|=
name|encryptionZone
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|XAttr
name|fileXAttr
init|=
name|FSDirXAttrOp
operator|.
name|unprotectedGetXAttrByPrefixedName
argument_list|(
name|iip
argument_list|,
name|CRYPTO_XATTR_FILE_ENCRYPTION_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileXAttr
operator|==
literal|null
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find encryption XAttr for file "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
operator|+
literal|" in encryption zone "
operator|+
name|encryptionZone
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|HdfsProtos
operator|.
name|PerFileEncryptionInfoProto
name|fileProto
init|=
name|HdfsProtos
operator|.
name|PerFileEncryptionInfoProto
operator|.
name|parseFrom
argument_list|(
name|fileXAttr
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|fileProto
argument_list|,
name|suite
argument_list|,
name|version
argument_list|,
name|keyName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not parse file encryption info for "
operator|+
literal|"inode "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * If the file and encryption key are valid, return the encryption info,    * else throw a retry exception.  The startFile method generates the EDEK    * outside of the lock so the zone must be reverified.    *    * @param dir fsdirectory    * @param iip inodes in the file path    * @param ezInfo the encryption key    * @return FileEncryptionInfo for the file    * @throws RetryStartFileException if key is inconsistent with current zone    */
DECL|method|getFileEncryptionInfo (FSDirectory dir, INodesInPath iip, EncryptionKeyInfo ezInfo)
specifier|static
name|FileEncryptionInfo
name|getFileEncryptionInfo
parameter_list|(
name|FSDirectory
name|dir
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|EncryptionKeyInfo
name|ezInfo
parameter_list|)
throws|throws
name|RetryStartFileException
block|{
name|FileEncryptionInfo
name|feInfo
init|=
literal|null
decl_stmt|;
specifier|final
name|EncryptionZone
name|zone
init|=
name|getEZForPath
argument_list|(
name|dir
argument_list|,
name|iip
argument_list|)
decl_stmt|;
if|if
condition|(
name|zone
operator|!=
literal|null
condition|)
block|{
comment|// The path is now within an EZ, but we're missing encryption parameters
if|if
condition|(
name|ezInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RetryStartFileException
argument_list|()
throw|;
block|}
comment|// Path is within an EZ and we have provided encryption parameters.
comment|// Make sure that the generated EDEK matches the settings of the EZ.
specifier|final
name|String
name|ezKeyName
init|=
name|zone
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ezKeyName
operator|.
name|equals
argument_list|(
name|ezInfo
operator|.
name|edek
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RetryStartFileException
argument_list|()
throw|;
block|}
name|feInfo
operator|=
operator|new
name|FileEncryptionInfo
argument_list|(
name|ezInfo
operator|.
name|suite
argument_list|,
name|ezInfo
operator|.
name|protocolVersion
argument_list|,
name|ezInfo
operator|.
name|edek
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|ezInfo
operator|.
name|edek
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|,
name|ezKeyName
argument_list|,
name|ezInfo
operator|.
name|edek
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|feInfo
return|;
block|}
DECL|method|isInAnEZ (final FSDirectory fsd, final INodesInPath iip)
specifier|static
name|boolean
name|isInAnEZ
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
block|{
if|if
condition|(
operator|!
name|fsd
operator|.
name|ezManager
operator|.
name|hasCreatedEncryptionZone
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|fsd
operator|.
name|ezManager
operator|.
name|isInAnEZ
argument_list|(
name|iip
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Proactively warm up the edek cache. We'll get all the edek key names,    * then launch up a separate thread to warm them up.    */
DECL|method|warmUpEdekCache (final ExecutorService executor, final FSDirectory fsd, final int delay, final int interval)
specifier|static
name|void
name|warmUpEdekCache
parameter_list|(
specifier|final
name|ExecutorService
name|executor
parameter_list|,
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|int
name|delay
parameter_list|,
specifier|final
name|int
name|interval
parameter_list|)
block|{
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|String
index|[]
name|edeks
init|=
name|fsd
operator|.
name|ezManager
operator|.
name|getKeyNames
argument_list|()
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|EDEKCacheLoader
argument_list|(
name|edeks
argument_list|,
name|fsd
operator|.
name|getProvider
argument_list|()
argument_list|,
name|delay
argument_list|,
name|interval
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * EDEKCacheLoader is being run in a separate thread to loop through all the    * EDEKs and warm them up in the KMS cache.    */
DECL|class|EDEKCacheLoader
specifier|static
class|class
name|EDEKCacheLoader
implements|implements
name|Runnable
block|{
DECL|field|keyNames
specifier|private
specifier|final
name|String
index|[]
name|keyNames
decl_stmt|;
DECL|field|kp
specifier|private
specifier|final
name|KeyProviderCryptoExtension
name|kp
decl_stmt|;
DECL|field|initialDelay
specifier|private
name|int
name|initialDelay
decl_stmt|;
DECL|field|retryInterval
specifier|private
name|int
name|retryInterval
decl_stmt|;
DECL|method|EDEKCacheLoader (final String[] names, final KeyProviderCryptoExtension kp, final int delay, final int interval)
name|EDEKCacheLoader
parameter_list|(
specifier|final
name|String
index|[]
name|names
parameter_list|,
specifier|final
name|KeyProviderCryptoExtension
name|kp
parameter_list|,
specifier|final
name|int
name|delay
parameter_list|,
specifier|final
name|int
name|interval
parameter_list|)
block|{
name|this
operator|.
name|keyNames
operator|=
name|names
expr_stmt|;
name|this
operator|.
name|kp
operator|=
name|kp
expr_stmt|;
name|this
operator|.
name|initialDelay
operator|=
name|delay
expr_stmt|;
name|this
operator|.
name|retryInterval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Warming up {} EDEKs... (initialDelay={}, "
operator|+
literal|"retryInterval={})"
argument_list|,
name|keyNames
operator|.
name|length
argument_list|,
name|initialDelay
argument_list|,
name|retryInterval
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|initialDelay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"EDEKCacheLoader interrupted before warming up."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|logCoolDown
init|=
literal|10000
decl_stmt|;
comment|// periodically print error log (if any)
name|int
name|sinceLastLog
init|=
name|logCoolDown
decl_stmt|;
comment|// always print the first failure
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|IOException
name|lastSeenIOE
init|=
literal|null
decl_stmt|;
name|long
name|warmUpEDEKStartTime
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|kp
operator|.
name|warmUpEncryptedKeys
argument_list|(
name|keyNames
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully warmed up {} EDEKs."
argument_list|,
name|keyNames
operator|.
name|length
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|lastSeenIOE
operator|=
name|ioe
expr_stmt|;
if|if
condition|(
name|sinceLastLog
operator|>=
name|logCoolDown
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to warm up EDEKs."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|sinceLastLog
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to warm up EDEKs."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot warm up EDEKs."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|retryInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"EDEKCacheLoader interrupted during retry."
argument_list|)
expr_stmt|;
break|break;
block|}
name|sinceLastLog
operator|+=
name|retryInterval
expr_stmt|;
block|}
name|long
name|warmUpEDEKTime
init|=
name|monotonicNow
argument_list|()
operator|-
name|warmUpEDEKStartTime
decl_stmt|;
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
operator|.
name|addWarmUpEDEKTime
argument_list|(
name|warmUpEDEKTime
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to warm up EDEKs."
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastSeenIOE
operator|!=
literal|null
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Last seen exception:"
argument_list|,
name|lastSeenIOE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * If the file is in an encryption zone, we optimistically create an    * EDEK for the file by calling out to the configured KeyProvider.    * Since this typically involves doing an RPC, the fsn lock is yielded.    *    * Since the path can flip-flop between being in an encryption zone and not    * in the meantime, the call MUST re-resolve the IIP and re-check    * preconditions if this method does not return null;    *    * @param fsn the namesystem.    * @param iip the inodes for the path    * @param supportedVersions client's supported versions    * @return EncryptionKeyInfo if the path is in an EZ, else null    */
DECL|method|getEncryptionKeyInfo (FSNamesystem fsn, INodesInPath iip, CryptoProtocolVersion[] supportedVersions)
specifier|static
name|EncryptionKeyInfo
name|getEncryptionKeyInfo
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|CryptoProtocolVersion
index|[]
name|supportedVersions
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
comment|// Nothing to do if the path is not within an EZ
specifier|final
name|EncryptionZone
name|zone
init|=
name|getEZForPath
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|)
decl_stmt|;
if|if
condition|(
name|zone
operator|==
literal|null
condition|)
block|{
name|EncryptionFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|startFileNoKey
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|CryptoProtocolVersion
name|protocolVersion
init|=
name|fsn
operator|.
name|chooseProtocolVersion
argument_list|(
name|zone
argument_list|,
name|supportedVersions
argument_list|)
decl_stmt|;
name|CipherSuite
name|suite
init|=
name|zone
operator|.
name|getSuite
argument_list|()
decl_stmt|;
name|String
name|ezKeyName
init|=
name|zone
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|protocolVersion
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|suite
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|suite
operator|.
name|equals
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
argument_list|,
literal|"Chose an UNKNOWN CipherSuite!"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ezKeyName
argument_list|)
expr_stmt|;
comment|// Generate EDEK while not holding the fsn lock.
name|fsn
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
try|try
block|{
name|EncryptionFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|startFileBeforeGenerateKey
argument_list|()
expr_stmt|;
return|return
operator|new
name|EncryptionKeyInfo
argument_list|(
name|protocolVersion
argument_list|,
name|suite
argument_list|,
name|ezKeyName
argument_list|,
name|generateEncryptedDataEncryptionKey
argument_list|(
name|fsd
argument_list|,
name|ezKeyName
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsn
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|EncryptionFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|startFileAfterGenerateKey
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|EncryptionKeyInfo
specifier|static
class|class
name|EncryptionKeyInfo
block|{
DECL|field|protocolVersion
specifier|final
name|CryptoProtocolVersion
name|protocolVersion
decl_stmt|;
DECL|field|suite
specifier|final
name|CipherSuite
name|suite
decl_stmt|;
DECL|field|ezKeyName
specifier|final
name|String
name|ezKeyName
decl_stmt|;
DECL|field|edek
specifier|final
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|edek
decl_stmt|;
DECL|method|EncryptionKeyInfo ( CryptoProtocolVersion protocolVersion, CipherSuite suite, String ezKeyName, KeyProviderCryptoExtension.EncryptedKeyVersion edek)
name|EncryptionKeyInfo
parameter_list|(
name|CryptoProtocolVersion
name|protocolVersion
parameter_list|,
name|CipherSuite
name|suite
parameter_list|,
name|String
name|ezKeyName
parameter_list|,
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
name|edek
parameter_list|)
block|{
name|this
operator|.
name|protocolVersion
operator|=
name|protocolVersion
expr_stmt|;
name|this
operator|.
name|suite
operator|=
name|suite
expr_stmt|;
name|this
operator|.
name|ezKeyName
operator|=
name|ezKeyName
expr_stmt|;
name|this
operator|.
name|edek
operator|=
name|edek
expr_stmt|;
block|}
block|}
comment|/**    * Get the current key version name for the given EZ. This will first drain    * the provider's local cache, then generate a new edek.    *<p>    * The encryption key version of the newly generated edek will be used as    * the target key version of this re-encryption - meaning all edeks'    * keyVersion are compared with it, and only sent to the KMS for re-encryption    * when the version is different.    *<p>    * Note: KeyProvider has a getCurrentKey interface, but that is under    * a different ACL. HDFS should not try to operate on additional ACLs, but    * rather use the generate ACL it already has.    */
DECL|method|getCurrentKeyVersion (final FSDirectory dir, final String zone)
specifier|static
name|String
name|getCurrentKeyVersion
parameter_list|(
specifier|final
name|FSDirectory
name|dir
parameter_list|,
specifier|final
name|String
name|zone
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|dir
operator|.
name|getProvider
argument_list|()
operator|!=
literal|null
assert|;
assert|assert
operator|!
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
specifier|final
name|String
name|keyName
init|=
name|FSDirEncryptionZoneOp
operator|.
name|getKeyNameForZone
argument_list|(
name|dir
argument_list|,
name|zone
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|zone
operator|+
literal|" is not an encryption zone."
argument_list|)
throw|;
block|}
comment|// drain the local cache of the key provider.
comment|// Do not invalidateCache on the server, since that's the responsibility
comment|// when rolling the key version.
name|dir
operator|.
name|getProvider
argument_list|()
operator|.
name|drain
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
specifier|final
name|EncryptedKeyVersion
name|edek
decl_stmt|;
try|try
block|{
name|edek
operator|=
name|dir
operator|.
name|getProvider
argument_list|()
operator|.
name|generateEncryptedKey
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|gse
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|gse
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|edek
argument_list|)
expr_stmt|;
return|return
name|edek
operator|.
name|getEncryptionKeyVersionName
argument_list|()
return|;
block|}
comment|/**    * Resolve the zone to an inode, find the encryption zone info associated with    * that inode, and return the key name. Does not contact the KMS.    */
DECL|method|getKeyNameForZone (final FSDirectory dir, final String zone)
specifier|static
name|String
name|getKeyNameForZone
parameter_list|(
specifier|final
name|FSDirectory
name|dir
parameter_list|,
specifier|final
name|String
name|zone
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|dir
operator|.
name|getProvider
argument_list|()
operator|!=
literal|null
assert|;
specifier|final
name|INodesInPath
name|iip
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|dir
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|dir
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|iip
operator|=
name|dir
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|zone
argument_list|,
name|DirOp
operator|.
name|READ
argument_list|)
expr_stmt|;
name|dir
operator|.
name|ezManager
operator|.
name|checkEncryptionZoneRoot
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|zone
argument_list|)
expr_stmt|;
return|return
name|dir
operator|.
name|ezManager
operator|.
name|getKeyName
argument_list|(
name|iip
argument_list|)
return|;
block|}
finally|finally
block|{
name|dir
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

