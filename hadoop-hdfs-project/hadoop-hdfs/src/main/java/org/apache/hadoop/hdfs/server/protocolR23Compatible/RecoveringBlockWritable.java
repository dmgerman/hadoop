begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|DatanodeInfoWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ExtendedBlockWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|LocatedBlockWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_comment
comment|/**  * This is a block with locations from which it should be recovered and the new  * generation stamp, which the block will have after successful recovery.  *   * The new generation stamp of the block, also plays role of the recovery id.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RecoveringBlockWritable
specifier|public
class|class
name|RecoveringBlockWritable
implements|implements
name|Writable
block|{
DECL|field|newGenerationStamp
specifier|private
name|long
name|newGenerationStamp
decl_stmt|;
DECL|field|locatedBlock
specifier|private
name|LocatedBlockWritable
name|locatedBlock
decl_stmt|;
comment|/**    * Create empty RecoveringBlock.    */
DECL|method|RecoveringBlockWritable ()
specifier|public
name|RecoveringBlockWritable
parameter_list|()
block|{
name|locatedBlock
operator|=
operator|new
name|LocatedBlockWritable
argument_list|()
expr_stmt|;
name|newGenerationStamp
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
comment|/**    * Create RecoveringBlock.    */
DECL|method|RecoveringBlockWritable (ExtendedBlockWritable b, DatanodeInfoWritable[] locs, long newGS)
specifier|public
name|RecoveringBlockWritable
parameter_list|(
name|ExtendedBlockWritable
name|b
parameter_list|,
name|DatanodeInfoWritable
index|[]
name|locs
parameter_list|,
name|long
name|newGS
parameter_list|)
block|{
name|locatedBlock
operator|=
operator|new
name|LocatedBlockWritable
argument_list|(
name|b
argument_list|,
name|locs
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|newGenerationStamp
operator|=
name|newGS
expr_stmt|;
block|}
comment|// /////////////////////////////////////////
comment|// Writable
comment|// /////////////////////////////////////////
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|RecoveringBlockWritable
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|RecoveringBlockWritable
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|locatedBlock
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|newGenerationStamp
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|locatedBlock
operator|=
operator|new
name|LocatedBlockWritable
argument_list|()
expr_stmt|;
name|locatedBlock
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|newGenerationStamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
DECL|method|convert ()
specifier|public
name|RecoveringBlock
name|convert
parameter_list|()
block|{
name|ExtendedBlockWritable
name|eb
init|=
name|locatedBlock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|DatanodeInfoWritable
index|[]
name|dnInfo
init|=
name|locatedBlock
operator|.
name|getLocations
argument_list|()
decl_stmt|;
return|return
operator|new
name|RecoveringBlock
argument_list|(
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|eb
argument_list|)
argument_list|,
name|DatanodeInfoWritable
operator|.
name|convertDatanodeInfo
argument_list|(
name|dnInfo
argument_list|)
argument_list|,
name|newGenerationStamp
argument_list|)
return|;
block|}
DECL|method|convert (RecoveringBlock rBlock)
specifier|public
specifier|static
name|RecoveringBlockWritable
name|convert
parameter_list|(
name|RecoveringBlock
name|rBlock
parameter_list|)
block|{
if|if
condition|(
name|rBlock
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExtendedBlockWritable
name|eb
init|=
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|rBlock
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeInfoWritable
index|[]
name|dnInfo
init|=
name|DatanodeInfoWritable
operator|.
name|convertDatanodeInfo
argument_list|(
name|rBlock
operator|.
name|getLocations
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|RecoveringBlockWritable
argument_list|(
name|eb
argument_list|,
name|dnInfo
argument_list|,
name|rBlock
operator|.
name|getNewGenerationStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

