begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ProvidedStorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|aliasmap
operator|.
name|InMemoryAliasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|aliasmap
operator|.
name|InMemoryAliasMapProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|AbstractNNFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|InMemoryAliasMapFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
operator|.
name|addKeySuffixes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
operator|.
name|createUri
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
operator|.
name|getNameServiceIds
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|PROXY_PROVIDER_KEY_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AliasMapProtocolProtos
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class is the client side translator to translate requests made to the  * {@link InMemoryAliasMapProtocol} interface to the RPC server implementing  * {@link AliasMapProtocolPB}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|InMemoryAliasMapProtocolClientSideTranslatorPB
specifier|public
class|class
name|InMemoryAliasMapProtocolClientSideTranslatorPB
implements|implements
name|InMemoryAliasMapProtocol
implements|,
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InMemoryAliasMapProtocolClientSideTranslatorPB
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rpcProxy
specifier|private
name|AliasMapProtocolPB
name|rpcProxy
decl_stmt|;
DECL|method|InMemoryAliasMapProtocolClientSideTranslatorPB ( AliasMapProtocolPB rpcProxy)
specifier|public
name|InMemoryAliasMapProtocolClientSideTranslatorPB
parameter_list|(
name|AliasMapProtocolPB
name|rpcProxy
parameter_list|)
block|{
name|this
operator|.
name|rpcProxy
operator|=
name|rpcProxy
expr_stmt|;
block|}
DECL|method|init (Configuration conf)
specifier|public
specifier|static
name|Collection
argument_list|<
name|InMemoryAliasMapProtocol
argument_list|>
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Collection
argument_list|<
name|InMemoryAliasMapProtocol
argument_list|>
name|aliasMaps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Try to connect to all configured nameservices as it is not known which
comment|// nameservice supports the AliasMap.
for|for
control|(
name|String
name|nsId
range|:
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
control|)
block|{
try|try
block|{
name|URI
name|namenodeURI
init|=
literal|null
decl_stmt|;
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|)
condition|)
block|{
comment|// set the failover-proxy provider if HA is enabled.
name|newConf
operator|.
name|setClass
argument_list|(
name|addKeySuffixes
argument_list|(
name|PROXY_PROVIDER_KEY_PREFIX
argument_list|,
name|nsId
argument_list|)
argument_list|,
name|InMemoryAliasMapFailoverProxyProvider
operator|.
name|class
argument_list|,
name|AbstractNNFailoverProxyProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|namenodeURI
operator|=
operator|new
name|URI
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
operator|+
literal|"://"
operator|+
name|nsId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|key
init|=
name|addKeySuffixes
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS
argument_list|,
name|nsId
argument_list|)
decl_stmt|;
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
condition|)
block|{
name|namenodeURI
operator|=
name|createUri
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|namenodeURI
operator|!=
literal|null
condition|)
block|{
name|aliasMaps
operator|.
name|add
argument_list|(
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|newConf
argument_list|,
name|namenodeURI
argument_list|,
name|InMemoryAliasMapProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected to InMemoryAliasMap at {}"
argument_list|,
name|namenodeURI
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in connecting to InMemoryAliasMap for nameservice "
operator|+
literal|"{}: {}"
argument_list|,
name|nsId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if a separate AliasMap is configured using
comment|// DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS, try to connect it.
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|URI
name|uri
init|=
name|createUri
argument_list|(
literal|"hdfs"
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|aliasMaps
operator|.
name|add
argument_list|(
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|,
name|InMemoryAliasMapProtocol
operator|.
name|class
argument_list|)
operator|.
name|getProxy
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected to InMemoryAliasMap at {}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in connecting to InMemoryAliasMap at {}: {}"
argument_list|,
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aliasMaps
return|;
block|}
annotation|@
name|Override
DECL|method|list (Optional<Block> marker)
specifier|public
name|InMemoryAliasMap
operator|.
name|IterationResult
name|list
parameter_list|(
name|Optional
argument_list|<
name|Block
argument_list|>
name|marker
parameter_list|)
throws|throws
name|IOException
block|{
name|ListRequestProto
operator|.
name|Builder
name|builder
init|=
name|ListRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|marker
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setMarker
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|marker
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ListRequestProto
name|request
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|ListResponseProto
name|response
init|=
name|rpcProxy
operator|.
name|list
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValueProto
argument_list|>
name|fileRegionsList
init|=
name|response
operator|.
name|getFileRegionsList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileRegion
argument_list|>
name|fileRegions
init|=
name|fileRegionsList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|kv
lambda|->
operator|new
name|FileRegion
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|BlockProto
name|nextMarker
init|=
name|response
operator|.
name|getNextMarker
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextMarker
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
operator|new
name|InMemoryAliasMap
operator|.
name|IterationResult
argument_list|(
name|fileRegions
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|nextMarker
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|InMemoryAliasMap
operator|.
name|IterationResult
argument_list|(
name|fileRegions
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
DECL|method|read (@onnull Block block)
specifier|public
name|Optional
argument_list|<
name|ProvidedStorageLocation
argument_list|>
name|read
parameter_list|(
annotation|@
name|Nonnull
name|Block
name|block
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|block
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Block cannot be null"
argument_list|)
throw|;
block|}
name|ReadRequestProto
name|request
init|=
name|ReadRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|block
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|ReadResponseProto
name|response
init|=
name|rpcProxy
operator|.
name|read
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|ProvidedStorageLocationProto
name|providedStorageLocation
init|=
name|response
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|providedStorageLocation
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|providedStorageLocation
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (@onnull Block block, @Nonnull ProvidedStorageLocation providedStorageLocation)
specifier|public
name|void
name|write
parameter_list|(
annotation|@
name|Nonnull
name|Block
name|block
parameter_list|,
annotation|@
name|Nonnull
name|ProvidedStorageLocation
name|providedStorageLocation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|block
operator|==
literal|null
operator|||
name|providedStorageLocation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Provided block and location cannot be null"
argument_list|)
throw|;
block|}
name|WriteRequestProto
name|request
init|=
name|WriteRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyValuePair
argument_list|(
name|KeyValueProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|block
argument_list|)
argument_list|)
operator|.
name|setValue
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|providedStorageLocation
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|rpcProxy
operator|.
name|write
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|BlockPoolResponseProto
name|response
init|=
name|rpcProxy
operator|.
name|getBlockPoolId
argument_list|(
literal|null
argument_list|,
name|BlockPoolRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getBlockPoolId
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping rpcProxy in"
operator|+
literal|"InMemoryAliasMapProtocolClientSideTranslatorPB"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rpcProxy
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|rpcProxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

