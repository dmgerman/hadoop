begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|HftpFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServletUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|znerd
operator|.
name|xmlenc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_comment
comment|/**  * Obtain meta-information about a filesystem.  * @see org.apache.hadoop.hdfs.web.HftpFileSystem  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ListPathsServlet
specifier|public
class|class
name|ListPathsServlet
extends|extends
name|DfsServlet
block|{
comment|/** For java.io.Serializable */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|df
specifier|public
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
name|df
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SimpleDateFormat
name|initialValue
parameter_list|()
block|{
return|return
name|HftpFileSystem
operator|.
name|getDateFormat
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Write a node to output.    * Node information includes path, modification, permission, owner and group.    * For files, it also includes size, replication and block-size.     */
DECL|method|writeInfo (final Path fullpath, final HdfsFileStatus i, final XMLOutputter doc)
specifier|static
name|void
name|writeInfo
parameter_list|(
specifier|final
name|Path
name|fullpath
parameter_list|,
specifier|final
name|HdfsFileStatus
name|i
parameter_list|,
specifier|final
name|XMLOutputter
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SimpleDateFormat
name|ldf
init|=
name|df
operator|.
name|get
argument_list|()
decl_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
name|i
operator|.
name|isDir
argument_list|()
condition|?
literal|"directory"
else|:
literal|"file"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"path"
argument_list|,
name|fullpath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"modified"
argument_list|,
name|ldf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|i
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"accesstime"
argument_list|,
name|ldf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|i
operator|.
name|getAccessTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|i
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|doc
operator|.
name|attribute
argument_list|(
literal|"size"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|.
name|getLen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"replication"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|.
name|getReplication
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"blocksize"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|.
name|getBlockSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|attribute
argument_list|(
literal|"permission"
argument_list|,
operator|(
name|i
operator|.
name|isDir
argument_list|()
condition|?
literal|"d"
else|:
literal|"-"
operator|)
operator|+
name|i
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"owner"
argument_list|,
name|i
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|attribute
argument_list|(
literal|"group"
argument_list|,
name|i
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
comment|/**    * Build a map from the query string, setting values and defaults.    */
DECL|method|buildRoot (HttpServletRequest request, XMLOutputter doc)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildRoot
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|XMLOutputter
name|doc
parameter_list|)
block|{
specifier|final
name|String
name|path
init|=
name|ServletUtil
operator|.
name|getDecodedPath
argument_list|(
name|request
argument_list|,
literal|"/listPaths"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|exclude
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"exclude"
argument_list|)
operator|!=
literal|null
condition|?
name|request
operator|.
name|getParameter
argument_list|(
literal|"exclude"
argument_list|)
else|:
literal|""
decl_stmt|;
specifier|final
name|String
name|filter
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"filter"
argument_list|)
operator|!=
literal|null
condition|?
name|request
operator|.
name|getParameter
argument_list|(
literal|"filter"
argument_list|)
else|:
literal|".*"
decl_stmt|;
specifier|final
name|boolean
name|recur
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"recursive"
argument_list|)
operator|!=
literal|null
operator|&&
literal|"yes"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"recursive"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|root
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|root
operator|.
name|put
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|root
operator|.
name|put
argument_list|(
literal|"recursive"
argument_list|,
name|recur
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
expr_stmt|;
name|root
operator|.
name|put
argument_list|(
literal|"filter"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|root
operator|.
name|put
argument_list|(
literal|"exclude"
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
name|root
operator|.
name|put
argument_list|(
literal|"time"
argument_list|,
name|df
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|root
return|;
block|}
comment|/**    * Service a GET request as described below.    * Request:    * {@code    * GET http://<nn>:<port>/listPaths[/<path>][<?option>[&option]*] HTTP/1.1    * }    *    * Where<i>option</i> (default) in:    * recursive (&quot;no&quot;)    * filter (&quot;.*&quot;)    * exclude (&quot;\..*\.crc&quot;)    *    * Response: A flat list of files/directories in the following format:    * {@code    *<listing path="..." recursive="(yes|no)" filter="..."    *            time="yyyy-MM-dd hh:mm:ss UTC" version="...">    *<directory path="..." modified="yyyy-MM-dd hh:mm:ss"/>    *<file path="..." modified="yyyy-MM-dd'T'hh:mm:ssZ" accesstime="yyyy-MM-dd'T'hh:mm:ssZ"     *           blocksize="..."    *           replication="..." size="..."/>    *</listing>    * }    */
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
specifier|final
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
specifier|final
name|XMLOutputter
name|doc
init|=
operator|new
name|XMLOutputter
argument_list|(
name|out
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|root
init|=
name|buildRoot
argument_list|(
name|request
argument_list|,
name|doc
argument_list|)
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|root
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|filePath
init|=
name|ServletUtil
operator|.
name|getDecodedPath
argument_list|(
name|request
argument_list|,
literal|"/listPaths"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|boolean
name|recur
init|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|root
operator|.
name|get
argument_list|(
literal|"recursive"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Pattern
name|filter
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|root
operator|.
name|get
argument_list|(
literal|"filter"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Pattern
name|exclude
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|root
operator|.
name|get
argument_list|(
literal|"exclude"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|(
name|Configuration
operator|)
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
decl_stmt|;
name|getUGI
argument_list|(
name|request
argument_list|,
name|conf
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|ClientProtocol
name|nn
init|=
name|createNameNodeProxy
argument_list|()
decl_stmt|;
name|doc
operator|.
name|declaration
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"listing"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
range|:
name|root
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|doc
operator|.
name|attribute
argument_list|(
name|m
operator|.
name|getKey
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HdfsFileStatus
name|base
init|=
name|nn
operator|.
name|getFileInfo
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|base
operator|!=
literal|null
operator|)
operator|&&
name|base
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|writeInfo
argument_list|(
name|base
operator|.
name|getFullPath
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|,
name|base
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|Stack
argument_list|<
name|String
argument_list|>
name|pathstack
init|=
operator|new
name|Stack
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|pathstack
operator|.
name|push
argument_list|(
name|path
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|pathstack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|String
name|p
init|=
name|pathstack
operator|.
name|pop
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|lastReturnedName
init|=
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
decl_stmt|;
name|DirectoryListing
name|thisListing
decl_stmt|;
do|do
block|{
assert|assert
name|lastReturnedName
operator|!=
literal|null
assert|;
name|thisListing
operator|=
name|nn
operator|.
name|getListing
argument_list|(
name|p
argument_list|,
name|lastReturnedName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|thisListing
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lastReturnedName
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ListPathsServlet - Path "
operator|+
name|p
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|HdfsFileStatus
index|[]
name|listing
init|=
name|thisListing
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
for|for
control|(
name|HdfsFileStatus
name|i
range|:
name|listing
control|)
block|{
specifier|final
name|Path
name|fullpath
init|=
name|i
operator|.
name|getFullPath
argument_list|(
operator|new
name|Path
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|localName
init|=
name|fullpath
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|exclude
operator|.
name|matcher
argument_list|(
name|localName
argument_list|)
operator|.
name|matches
argument_list|()
operator|||
operator|!
name|filter
operator|.
name|matcher
argument_list|(
name|localName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|recur
operator|&&
name|i
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|pathstack
operator|.
name|push
argument_list|(
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|localName
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeInfo
argument_list|(
name|fullpath
argument_list|,
name|i
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|lastReturnedName
operator|=
name|thisListing
operator|.
name|getLastName
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|thisListing
operator|.
name|hasMore
argument_list|()
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|IOException
name|re
parameter_list|)
block|{
name|writeXml
argument_list|(
name|re
argument_list|,
name|p
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|writeXml
argument_list|(
name|ioe
argument_list|,
name|path
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ListPathServlet encountered InterruptedException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
literal|400
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

