begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * A {@link ReadOnlyList} is a unmodifiable list,  * which supports read-only operations.  *   * @param<E> The type of the list elements.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|interface|ReadOnlyList
specifier|public
interface|interface
name|ReadOnlyList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|Iterable
argument_list|<
name|E
argument_list|>
block|{
comment|/**    * Is this an empty list?    */
DECL|method|isEmpty ()
name|boolean
name|isEmpty
parameter_list|()
function_decl|;
comment|/**    * @return the size of this list.    */
DECL|method|size ()
name|int
name|size
parameter_list|()
function_decl|;
comment|/**    * @return the i-th element.    */
DECL|method|get (int i)
name|E
name|get
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
comment|/**    * Utilities for {@link ReadOnlyList}    */
DECL|class|Util
specifier|public
specifier|static
class|class
name|Util
block|{
comment|/** @return an empty list. */
DECL|method|emptyList ()
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ReadOnlyList
argument_list|<
name|E
argument_list|>
name|emptyList
parameter_list|()
block|{
return|return
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asReadOnlyList
argument_list|(
name|Collections
operator|.
expr|<
name|E
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * The same as {@link Collections#binarySearch(List, Object)}      * except that the list is a {@link ReadOnlyList}.      *      * @return the insertion point defined      *         in {@link Collections#binarySearch(List, Object)}.      */
DECL|method|binarySearch ( final ReadOnlyList<E> list, final K key)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|E
extends|extends
name|Comparable
argument_list|<
name|K
argument_list|>
parameter_list|>
name|int
name|binarySearch
parameter_list|(
specifier|final
name|ReadOnlyList
argument_list|<
name|E
argument_list|>
name|list
parameter_list|,
specifier|final
name|K
name|key
parameter_list|)
block|{
name|int
name|lower
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|upper
init|=
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|lower
operator|<=
name|upper
condition|;
control|)
block|{
specifier|final
name|int
name|mid
init|=
operator|(
name|upper
operator|+
name|lower
operator|)
operator|>>>
literal|1
decl_stmt|;
specifier|final
name|int
name|d
init|=
name|list
operator|.
name|get
argument_list|(
name|mid
argument_list|)
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|0
condition|)
block|{
return|return
name|mid
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|>
literal|0
condition|)
block|{
name|upper
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|lower
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
operator|-
operator|(
name|lower
operator|+
literal|1
operator|)
return|;
block|}
comment|/**      * @return a {@link ReadOnlyList} view of the given list.      */
DECL|method|asReadOnlyList (final List<E> list)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ReadOnlyList
argument_list|<
name|E
argument_list|>
name|asReadOnlyList
parameter_list|(
specifier|final
name|List
argument_list|<
name|E
argument_list|>
name|list
parameter_list|)
block|{
return|return
operator|new
name|ReadOnlyList
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|list
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * @return a {@link List} view of the given list.      */
DECL|method|asList (final ReadOnlyList<E> list)
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|List
argument_list|<
name|E
argument_list|>
name|asList
parameter_list|(
specifier|final
name|ReadOnlyList
argument_list|<
name|E
argument_list|>
name|list
parameter_list|)
block|{
return|return
operator|new
name|List
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|list
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
specifier|final
name|Object
index|[]
name|a
init|=
operator|new
name|Object
index|[
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|=
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
comment|//All methods below are not supported.
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|E
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|E
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|E
name|element
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|E
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
block|}
end_interface

end_unit

