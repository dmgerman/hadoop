begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|INodeAttributeProvider
specifier|public
specifier|abstract
class|class
name|INodeAttributeProvider
block|{
comment|/**    * The AccessControlEnforcer allows implementations to override the    * default File System permission checking logic enforced on a file system    * object    */
DECL|interface|AccessControlEnforcer
specifier|public
interface|interface
name|AccessControlEnforcer
block|{
comment|/**      * Checks permission on a file system object. Has to throw an Exception      * if the filesystem object is not accessessible by the calling Ugi.      * @param fsOwner Filesystem owner (The Namenode user)      * @param supergroup super user geoup      * @param callerUgi UserGroupInformation of the caller      * @param inodeAttrs Array of INode attributes for each path element in the      *                   the path      * @param inodes Array of INodes for each path element in the path      * @param pathByNameArr Array of byte arrays of the LocalName      * @param snapshotId the snapshotId of the requested path      * @param path Path String      * @param ancestorIndex Index of ancestor      * @param doCheckOwner perform ownership check      * @param ancestorAccess The access required by the ancestor of the path.      * @param parentAccess The access required by the parent of the path.      * @param access The access required by the path.      * @param subAccess If path is a directory, It is the access required of      *                  the path and all the sub-directories. If path is not a      *                  directory, there should ideally be no effect.      * @param ignoreEmptyDir Ignore permission checking for empty directory?      * @throws AccessControlException      */
DECL|method|checkPermission (String fsOwner, String supergroup, UserGroupInformation callerUgi, INodeAttributes[] inodeAttrs, INode[] inodes, byte[][] pathByNameArr, int snapshotId, String path, int ancestorIndex, boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess, FsAction access, FsAction subAccess, boolean ignoreEmptyDir)
specifier|public
specifier|abstract
name|void
name|checkPermission
parameter_list|(
name|String
name|fsOwner
parameter_list|,
name|String
name|supergroup
parameter_list|,
name|UserGroupInformation
name|callerUgi
parameter_list|,
name|INodeAttributes
index|[]
name|inodeAttrs
parameter_list|,
name|INode
index|[]
name|inodes
parameter_list|,
name|byte
index|[]
index|[]
name|pathByNameArr
parameter_list|,
name|int
name|snapshotId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|ancestorIndex
parameter_list|,
name|boolean
name|doCheckOwner
parameter_list|,
name|FsAction
name|ancestorAccess
parameter_list|,
name|FsAction
name|parentAccess
parameter_list|,
name|FsAction
name|access
parameter_list|,
name|FsAction
name|subAccess
parameter_list|,
name|boolean
name|ignoreEmptyDir
parameter_list|)
throws|throws
name|AccessControlException
function_decl|;
block|}
comment|/**    * Initialize the provider. This method is called at NameNode startup    * time.    */
DECL|method|start ()
specifier|public
specifier|abstract
name|void
name|start
parameter_list|()
function_decl|;
comment|/**    * Shutdown the provider. This method is called at NameNode shutdown time.    */
DECL|method|stop ()
specifier|public
specifier|abstract
name|void
name|stop
parameter_list|()
function_decl|;
annotation|@
name|Deprecated
DECL|method|getPathElements (String path)
name|String
index|[]
name|getPathElements
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|path
operator|=
name|path
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
name|Path
operator|.
name|SEPARATOR_CHAR
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"It must be an absolute path: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|int
name|numOfElements
init|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|path
argument_list|,
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
name|path
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|numOfElements
operator|--
expr_stmt|;
block|}
name|String
index|[]
name|pathElements
init|=
operator|new
name|String
index|[
name|numOfElements
index|]
decl_stmt|;
name|int
name|elementIdx
init|=
literal|0
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|int
name|found
init|=
name|path
operator|.
name|indexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR_CHAR
argument_list|,
name|idx
argument_list|)
decl_stmt|;
while|while
condition|(
name|found
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|found
operator|>
name|idx
condition|)
block|{
name|pathElements
index|[
name|elementIdx
operator|++
index|]
operator|=
name|path
operator|.
name|substring
argument_list|(
name|idx
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
name|idx
operator|=
name|found
operator|+
literal|1
expr_stmt|;
name|found
operator|=
name|path
operator|.
name|indexOf
argument_list|(
name|Path
operator|.
name|SEPARATOR_CHAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|<
name|path
operator|.
name|length
argument_list|()
condition|)
block|{
name|pathElements
index|[
name|elementIdx
index|]
operator|=
name|path
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|pathElements
return|;
block|}
annotation|@
name|Deprecated
DECL|method|getAttributes (String fullPath, INodeAttributes inode)
specifier|public
name|INodeAttributes
name|getAttributes
parameter_list|(
name|String
name|fullPath
parameter_list|,
name|INodeAttributes
name|inode
parameter_list|)
block|{
return|return
name|getAttributes
argument_list|(
name|getPathElements
argument_list|(
name|fullPath
argument_list|)
argument_list|,
name|inode
argument_list|)
return|;
block|}
DECL|method|getAttributes (String[] pathElements, INodeAttributes inode)
specifier|public
specifier|abstract
name|INodeAttributes
name|getAttributes
parameter_list|(
name|String
index|[]
name|pathElements
parameter_list|,
name|INodeAttributes
name|inode
parameter_list|)
function_decl|;
DECL|method|getAttributes (byte[][] components, INodeAttributes inode)
specifier|public
name|INodeAttributes
name|getAttributes
parameter_list|(
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|INodeAttributes
name|inode
parameter_list|)
block|{
name|String
index|[]
name|elements
init|=
operator|new
name|String
index|[
name|components
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|elements
index|[
name|i
index|]
operator|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|getAttributes
argument_list|(
name|elements
argument_list|,
name|inode
argument_list|)
return|;
block|}
comment|/**    * Can be over-ridden by implementations to provide a custom Access Control    * Enforcer that can provide an alternate implementation of the    * default permission checking logic.    * @param defaultEnforcer The Default AccessControlEnforcer    * @return The AccessControlEnforcer to use    */
DECL|method|getExternalAccessControlEnforcer ( AccessControlEnforcer defaultEnforcer)
specifier|public
name|AccessControlEnforcer
name|getExternalAccessControlEnforcer
parameter_list|(
name|AccessControlEnforcer
name|defaultEnforcer
parameter_list|)
block|{
return|return
name|defaultEnforcer
return|;
block|}
block|}
end_class

end_unit

