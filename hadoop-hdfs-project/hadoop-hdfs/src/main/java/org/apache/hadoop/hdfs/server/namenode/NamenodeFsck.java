begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|TcpPeerServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This class provides rudimentary checking of DFS volumes for errors and  * sub-optimal conditions.  *<p>The tool scans all files and directories, starting from an indicated  *  root path. The following abnormal conditions are detected and handled:</p>  *<ul>  *<li>files with blocks that are completely missing from all datanodes.<br/>  * In this case the tool can perform one of the following actions:  *<ul>  *<li>none ({@link #FIXING_NONE})</li>  *<li>move corrupted files to /lost+found directory on DFS  *      ({@link #FIXING_MOVE}). Remaining data blocks are saved as a  *      block chains, representing longest consecutive series of valid blocks.</li>  *<li>delete corrupted files ({@link #FIXING_DELETE})</li>  *</ul>  *</li>  *<li>detect files with under-replicated or over-replicated blocks</li>  *</ul>  *  Additionally, the tool collects a detailed overall DFS statistics, and  *  optionally can print detailed statistics on block locations and replication  *  factors of each file.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|NamenodeFsck
specifier|public
class|class
name|NamenodeFsck
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NameNode
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// return string marking fsck status
DECL|field|CORRUPT_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|CORRUPT_STATUS
init|=
literal|"is CORRUPT"
decl_stmt|;
DECL|field|HEALTHY_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|HEALTHY_STATUS
init|=
literal|"is HEALTHY"
decl_stmt|;
DECL|field|NONEXISTENT_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|NONEXISTENT_STATUS
init|=
literal|"does not exist"
decl_stmt|;
DECL|field|FAILURE_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|FAILURE_STATUS
init|=
literal|"FAILED"
decl_stmt|;
DECL|field|namenode
specifier|private
specifier|final
name|NameNode
name|namenode
decl_stmt|;
DECL|field|networktopology
specifier|private
specifier|final
name|NetworkTopology
name|networktopology
decl_stmt|;
DECL|field|totalDatanodes
specifier|private
specifier|final
name|int
name|totalDatanodes
decl_stmt|;
DECL|field|minReplication
specifier|private
specifier|final
name|short
name|minReplication
decl_stmt|;
DECL|field|remoteAddress
specifier|private
specifier|final
name|InetAddress
name|remoteAddress
decl_stmt|;
DECL|field|lostFound
specifier|private
name|String
name|lostFound
init|=
literal|null
decl_stmt|;
DECL|field|lfInited
specifier|private
name|boolean
name|lfInited
init|=
literal|false
decl_stmt|;
DECL|field|lfInitedOk
specifier|private
name|boolean
name|lfInitedOk
init|=
literal|false
decl_stmt|;
DECL|field|showFiles
specifier|private
name|boolean
name|showFiles
init|=
literal|false
decl_stmt|;
DECL|field|showOpenFiles
specifier|private
name|boolean
name|showOpenFiles
init|=
literal|false
decl_stmt|;
DECL|field|showBlocks
specifier|private
name|boolean
name|showBlocks
init|=
literal|false
decl_stmt|;
DECL|field|showLocations
specifier|private
name|boolean
name|showLocations
init|=
literal|false
decl_stmt|;
DECL|field|showRacks
specifier|private
name|boolean
name|showRacks
init|=
literal|false
decl_stmt|;
DECL|field|showCorruptFileBlocks
specifier|private
name|boolean
name|showCorruptFileBlocks
init|=
literal|false
decl_stmt|;
comment|/**    * True if we encountered an internal error during FSCK, such as not being    * able to delete a corrupt file.    */
DECL|field|internalError
specifier|private
name|boolean
name|internalError
init|=
literal|false
decl_stmt|;
comment|/**     * True if the user specified the -move option.    *    * Whe this option is in effect, we will copy salvaged blocks into the lost    * and found. */
DECL|field|doMove
specifier|private
name|boolean
name|doMove
init|=
literal|false
decl_stmt|;
comment|/**     * True if the user specified the -delete option.    *    * Whe this option is in effect, we will delete corrupted files.    */
DECL|field|doDelete
specifier|private
name|boolean
name|doDelete
init|=
literal|false
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
init|=
literal|"/"
decl_stmt|;
comment|// We return back N files that are corrupt; the list of files returned is
comment|// ordered by block id; to allow continuation support, pass in the last block
comment|// # from previous call
DECL|field|currentCookie
specifier|private
name|String
index|[]
name|currentCookie
init|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|PrintWriter
name|out
decl_stmt|;
comment|/**    * Filesystem checker.    * @param conf configuration (namenode config)    * @param nn namenode that this fsck is going to use    * @param pmap key=value[] map passed to the http servlet as url parameters    * @param out output stream to write the fsck output    * @param totalDatanodes number of live datanodes    * @param minReplication minimum replication    * @param remoteAddress source address of the fsck request    * @throws IOException    */
DECL|method|NamenodeFsck (Configuration conf, NameNode namenode, NetworkTopology networktopology, Map<String,String[]> pmap, PrintWriter out, int totalDatanodes, short minReplication, InetAddress remoteAddress)
name|NamenodeFsck
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NameNode
name|namenode
parameter_list|,
name|NetworkTopology
name|networktopology
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|pmap
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|int
name|totalDatanodes
parameter_list|,
name|short
name|minReplication
parameter_list|,
name|InetAddress
name|remoteAddress
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|namenode
expr_stmt|;
name|this
operator|.
name|networktopology
operator|=
name|networktopology
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|totalDatanodes
operator|=
name|totalDatanodes
expr_stmt|;
name|this
operator|.
name|minReplication
operator|=
name|minReplication
expr_stmt|;
name|this
operator|.
name|remoteAddress
operator|=
name|remoteAddress
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|pmap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"path"
argument_list|)
condition|)
block|{
name|this
operator|.
name|path
operator|=
name|pmap
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"move"
argument_list|)
condition|)
block|{
name|this
operator|.
name|doMove
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
name|this
operator|.
name|doDelete
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"files"
argument_list|)
condition|)
block|{
name|this
operator|.
name|showFiles
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"blocks"
argument_list|)
condition|)
block|{
name|this
operator|.
name|showBlocks
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"locations"
argument_list|)
condition|)
block|{
name|this
operator|.
name|showLocations
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"racks"
argument_list|)
condition|)
block|{
name|this
operator|.
name|showRacks
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"openforwrite"
argument_list|)
condition|)
block|{
name|this
operator|.
name|showOpenFiles
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"listcorruptfileblocks"
argument_list|)
condition|)
block|{
name|this
operator|.
name|showCorruptFileBlocks
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"startblockafter"
argument_list|)
condition|)
block|{
name|this
operator|.
name|currentCookie
index|[
literal|0
index|]
operator|=
name|pmap
operator|.
name|get
argument_list|(
literal|"startblockafter"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Check files on DFS, starting from the indicated path.    */
DECL|method|fsck ()
specifier|public
name|void
name|fsck
parameter_list|()
block|{
specifier|final
name|long
name|startTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|msg
init|=
literal|"FSCK started by "
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|+
literal|" from "
operator|+
name|remoteAddress
operator|+
literal|" for path "
operator|+
name|path
operator|+
literal|" at "
operator|+
operator|new
name|Date
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|logFsckEvent
argument_list|(
name|path
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
specifier|final
name|HdfsFileStatus
name|file
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|showCorruptFileBlocks
condition|)
block|{
name|listCorruptFileBlocks
argument_list|()
expr_stmt|;
return|return;
block|}
name|Result
name|res
init|=
operator|new
name|Result
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|check
argument_list|(
name|path
argument_list|,
name|file
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" Number of data-nodes:\t\t"
operator|+
name|totalDatanodes
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" Number of racks:\t\t"
operator|+
name|networktopology
operator|.
name|getNumOfRacks
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"FSCK ended at "
operator|+
operator|new
name|Date
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|startTime
operator|+
literal|" milliseconds"
operator|)
argument_list|)
expr_stmt|;
comment|// If there were internal errors during the fsck operation, we want to
comment|// return FAILURE_STATUS, even if those errors were not immediately
comment|// fatal.  Otherwise many unit tests will pass even when there are bugs.
if|if
condition|(
name|internalError
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"fsck encountered internal errors!"
argument_list|)
throw|;
block|}
comment|// DFSck client scans for the string HEALTHY/CORRUPT to check the status
comment|// of file system and return appropriate code. Changing the output
comment|// string might break testcases. Also note this must be the last line
comment|// of the report.
if|if
condition|(
name|res
operator|.
name|isHealthy
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\n\nThe filesystem under path '"
operator|+
name|path
operator|+
literal|"' "
operator|+
name|HEALTHY_STATUS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\n\nThe filesystem under path '"
operator|+
name|path
operator|+
literal|"' "
operator|+
name|CORRUPT_STATUS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\n\nPath '"
operator|+
name|path
operator|+
literal|"' "
operator|+
name|NONEXISTENT_STATUS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Fsck on path '"
operator|+
name|path
operator|+
literal|"' "
operator|+
name|FAILURE_STATUS
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errMsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"FSCK ended at "
operator|+
operator|new
name|Date
argument_list|()
operator|+
literal|" in "
operator|+
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|startTime
operator|+
literal|" milliseconds"
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\n\n"
operator|+
name|errMsg
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|listCorruptFileBlocks ()
specifier|private
name|void
name|listCorruptFileBlocks
parameter_list|()
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
argument_list|>
name|corruptFiles
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|listCorruptFileBlocks
argument_list|(
name|path
argument_list|,
name|currentCookie
argument_list|)
decl_stmt|;
name|int
name|numCorruptFiles
init|=
name|corruptFiles
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|filler
decl_stmt|;
if|if
condition|(
name|numCorruptFiles
operator|>
literal|0
condition|)
block|{
name|filler
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|numCorruptFiles
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentCookie
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
condition|)
block|{
name|filler
operator|=
literal|"no"
expr_stmt|;
block|}
else|else
block|{
name|filler
operator|=
literal|"no more"
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"Cookie:\t"
operator|+
name|currentCookie
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
name|c
range|:
name|corruptFiles
control|)
block|{
name|out
operator|.
name|println
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"\n\nThe filesystem under path '"
operator|+
name|path
operator|+
literal|"' has "
operator|+
name|filler
operator|+
literal|" CORRUPT files"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|check (String parent, HdfsFileStatus file, Result res)
name|void
name|check
parameter_list|(
name|String
name|parent
parameter_list|,
name|HdfsFileStatus
name|file
parameter_list|,
name|Result
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|file
operator|.
name|getFullName
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|boolean
name|isOpen
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|byte
index|[]
name|lastReturnedName
init|=
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
decl_stmt|;
name|DirectoryListing
name|thisListing
decl_stmt|;
if|if
condition|(
name|showFiles
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|path
operator|+
literal|"<dir>"
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|totalDirs
operator|++
expr_stmt|;
do|do
block|{
assert|assert
name|lastReturnedName
operator|!=
literal|null
assert|;
name|thisListing
operator|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getListing
argument_list|(
name|path
argument_list|,
name|lastReturnedName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|thisListing
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|HdfsFileStatus
index|[]
name|files
init|=
name|thisListing
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|check
argument_list|(
name|path
argument_list|,
name|files
index|[
name|i
index|]
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
name|lastReturnedName
operator|=
name|thisListing
operator|.
name|getLastName
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|thisListing
operator|.
name|hasMore
argument_list|()
condition|)
do|;
return|return;
block|}
name|long
name|fileLen
init|=
name|file
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// Get block locations without updating the file access time
comment|// and without block access tokens
name|LocatedBlocks
name|blocks
init|=
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockLocations
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|blocks
operator|==
literal|null
condition|)
block|{
comment|// the file is deleted
return|return;
block|}
name|isOpen
operator|=
name|blocks
operator|.
name|isUnderConstruction
argument_list|()
expr_stmt|;
if|if
condition|(
name|isOpen
operator|&&
operator|!
name|showOpenFiles
condition|)
block|{
comment|// We collect these stats about open files to report with default options
name|res
operator|.
name|totalOpenFilesSize
operator|+=
name|fileLen
expr_stmt|;
name|res
operator|.
name|totalOpenFilesBlocks
operator|+=
name|blocks
operator|.
name|locatedBlockCount
argument_list|()
expr_stmt|;
name|res
operator|.
name|totalOpenFiles
operator|++
expr_stmt|;
return|return;
block|}
name|res
operator|.
name|totalFiles
operator|++
expr_stmt|;
name|res
operator|.
name|totalSize
operator|+=
name|fileLen
expr_stmt|;
name|res
operator|.
name|totalBlocks
operator|+=
name|blocks
operator|.
name|locatedBlockCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|showOpenFiles
operator|&&
name|isOpen
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|path
operator|+
literal|" "
operator|+
name|fileLen
operator|+
literal|" bytes, "
operator|+
name|blocks
operator|.
name|locatedBlockCount
argument_list|()
operator|+
literal|" block(s), OPENFORWRITE: "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|showFiles
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|path
operator|+
literal|" "
operator|+
name|fileLen
operator|+
literal|" bytes, "
operator|+
name|blocks
operator|.
name|locatedBlockCount
argument_list|()
operator|+
literal|" block(s): "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|.
name|totalFiles
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|int
name|missing
init|=
literal|0
decl_stmt|;
name|int
name|corrupt
init|=
literal|0
decl_stmt|;
name|long
name|missize
init|=
literal|0
decl_stmt|;
name|int
name|underReplicatedPerFile
init|=
literal|0
decl_stmt|;
name|int
name|misReplicatedPerFile
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|report
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lBlk
range|:
name|blocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|ExtendedBlock
name|block
init|=
name|lBlk
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|boolean
name|isCorrupt
init|=
name|lBlk
operator|.
name|isCorrupt
argument_list|()
decl_stmt|;
name|String
name|blkName
init|=
name|block
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|locs
init|=
name|lBlk
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|res
operator|.
name|totalReplicas
operator|+=
name|locs
operator|.
name|length
expr_stmt|;
name|short
name|targetFileReplication
init|=
name|file
operator|.
name|getReplication
argument_list|()
decl_stmt|;
name|res
operator|.
name|numExpectedReplicas
operator|+=
name|targetFileReplication
expr_stmt|;
if|if
condition|(
name|locs
operator|.
name|length
operator|>
name|targetFileReplication
condition|)
block|{
name|res
operator|.
name|excessiveReplicas
operator|+=
operator|(
name|locs
operator|.
name|length
operator|-
name|targetFileReplication
operator|)
expr_stmt|;
name|res
operator|.
name|numOverReplicatedBlocks
operator|+=
literal|1
expr_stmt|;
block|}
comment|// Check if block is Corrupt
if|if
condition|(
name|isCorrupt
condition|)
block|{
name|corrupt
operator|++
expr_stmt|;
name|res
operator|.
name|corruptBlocks
operator|++
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\n"
operator|+
name|path
operator|+
literal|": CORRUPT blockpool "
operator|+
name|block
operator|.
name|getBlockPoolId
argument_list|()
operator|+
literal|" block "
operator|+
name|block
operator|.
name|getBlockName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locs
operator|.
name|length
operator|>=
name|minReplication
condition|)
name|res
operator|.
name|numMinReplicatedBlocks
operator|++
expr_stmt|;
if|if
condition|(
name|locs
operator|.
name|length
argument_list|<
name|targetFileReplication
operator|&&
name|locs
operator|.
name|length
argument_list|>
literal|0
condition|)
block|{
name|res
operator|.
name|missingReplicas
operator|+=
operator|(
name|targetFileReplication
operator|-
name|locs
operator|.
name|length
operator|)
expr_stmt|;
name|res
operator|.
name|numUnderReplicatedBlocks
operator|+=
literal|1
expr_stmt|;
name|underReplicatedPerFile
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|showFiles
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\n"
operator|+
name|path
operator|+
literal|": "
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|" Under replicated "
operator|+
name|block
operator|+
literal|". Target Replicas is "
operator|+
name|targetFileReplication
operator|+
literal|" but found "
operator|+
name|locs
operator|.
name|length
operator|+
literal|" replica(s)."
argument_list|)
expr_stmt|;
block|}
comment|// verify block placement policy
name|int
name|missingRacks
init|=
name|BlockPlacementPolicy
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|networktopology
argument_list|)
operator|.
name|verifyBlockPlacement
argument_list|(
name|path
argument_list|,
name|lBlk
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|2
argument_list|,
name|targetFileReplication
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|missingRacks
operator|>
literal|0
condition|)
block|{
name|res
operator|.
name|numMisReplicatedBlocks
operator|++
expr_stmt|;
name|misReplicatedPerFile
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|showFiles
condition|)
block|{
if|if
condition|(
name|underReplicatedPerFile
operator|==
literal|0
condition|)
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|path
operator|+
literal|": "
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|" Replica placement policy is violated for "
operator|+
name|block
operator|+
literal|". Block should be additionally replicated on "
operator|+
name|missingRacks
operator|+
literal|" more rack(s)."
argument_list|)
expr_stmt|;
block|}
name|report
operator|.
name|append
argument_list|(
name|i
operator|+
literal|". "
operator|+
name|blkName
operator|+
literal|" len="
operator|+
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|locs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|report
operator|.
name|append
argument_list|(
literal|" MISSING!"
argument_list|)
expr_stmt|;
name|res
operator|.
name|addMissing
argument_list|(
name|block
operator|.
name|toString
argument_list|()
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|missing
operator|++
expr_stmt|;
name|missize
operator|+=
name|block
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|report
operator|.
name|append
argument_list|(
literal|" repl="
operator|+
name|locs
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|showLocations
operator|||
name|showRacks
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|locs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showRacks
condition|)
name|sb
operator|.
name|append
argument_list|(
name|NodeBase
operator|.
name|getPath
argument_list|(
name|locs
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
name|locs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|report
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|report
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|missing
operator|>
literal|0
operator|)
operator|||
operator|(
name|corrupt
operator|>
literal|0
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|showFiles
operator|&&
operator|(
name|missing
operator|>
literal|0
operator|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"\n"
operator|+
name|path
operator|+
literal|": MISSING "
operator|+
name|missing
operator|+
literal|" blocks of total size "
operator|+
name|missize
operator|+
literal|" B."
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|corruptFiles
operator|++
expr_stmt|;
if|if
condition|(
name|isOpen
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fsck: ignoring open file "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|doMove
condition|)
name|copyBlocksToLostFound
argument_list|(
name|parent
argument_list|,
name|file
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
if|if
condition|(
name|doDelete
condition|)
name|deleteCorruptedFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|showFiles
condition|)
block|{
if|if
condition|(
name|missing
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" MISSING "
operator|+
name|missing
operator|+
literal|" blocks of total size "
operator|+
name|missize
operator|+
literal|" B\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|underReplicatedPerFile
operator|==
literal|0
operator|&&
name|misReplicatedPerFile
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" OK\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showBlocks
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|report
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|deleteCorruptedFile (String path)
specifier|private
name|void
name|deleteCorruptedFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
block|{
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Fsck: deleted corrupt file "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fsck: error deleting corrupted file "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|internalError
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|hdfsPathExists (String path)
name|boolean
name|hdfsPathExists
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
try|try
block|{
name|HdfsFileStatus
name|hfs
init|=
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
operator|(
name|hfs
operator|!=
literal|null
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|copyBlocksToLostFound (String parent, HdfsFileStatus file, LocatedBlocks blocks)
specifier|private
name|void
name|copyBlocksToLostFound
parameter_list|(
name|String
name|parent
parameter_list|,
name|HdfsFileStatus
name|file
parameter_list|,
name|LocatedBlocks
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DFSClient
name|dfs
init|=
operator|new
name|DFSClient
argument_list|(
name|NameNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fullName
init|=
name|file
operator|.
name|getFullName
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|OutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|lfInited
condition|)
block|{
name|lostFoundInit
argument_list|(
name|dfs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lfInitedOk
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to initialize lost+found"
argument_list|)
throw|;
block|}
name|String
name|target
init|=
name|lostFound
operator|+
name|fullName
decl_stmt|;
if|if
condition|(
name|hdfsPathExists
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fsck: can't copy the remains of "
operator|+
name|fullName
operator|+
literal|" to "
operator|+
literal|"lost+found, because "
operator|+
name|target
operator|+
literal|" already exists."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|target
argument_list|,
name|file
operator|.
name|getPermission
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to create directory "
operator|+
name|target
argument_list|)
throw|;
block|}
comment|// create chains
name|int
name|chain
init|=
literal|0
decl_stmt|;
name|boolean
name|copyError
init|=
literal|false
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|lBlk
range|:
name|blocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|LocatedBlock
name|lblock
init|=
name|lBlk
decl_stmt|;
name|DatanodeInfo
index|[]
name|locs
init|=
name|lblock
operator|.
name|getLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|locs
operator|==
literal|null
operator|||
name|locs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|fos
operator|==
literal|null
condition|)
block|{
name|fos
operator|=
name|dfs
operator|.
name|create
argument_list|(
name|target
operator|+
literal|"/"
operator|+
name|chain
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|fos
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to copy "
operator|+
name|fullName
operator|+
literal|" to /lost+found: could not store chain "
operator|+
name|chain
argument_list|)
throw|;
block|}
name|chain
operator|++
expr_stmt|;
block|}
comment|// copy the block. It's a pity it's not abstracted from DFSInputStream ...
try|try
block|{
name|copyBlock
argument_list|(
name|dfs
argument_list|,
name|lblock
argument_list|,
name|fos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fsck: could not copy block "
operator|+
name|lblock
operator|.
name|getBlock
argument_list|()
operator|+
literal|" to "
operator|+
name|target
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
name|internalError
operator|=
literal|true
expr_stmt|;
name|copyError
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|copyError
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fsck: there were errors copying the remains of the "
operator|+
literal|"corrupted file "
operator|+
name|fullName
operator|+
literal|" to /lost+found"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fsck: copied the remains of the corrupted file "
operator|+
name|fullName
operator|+
literal|" to /lost+found"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"copyBlocksToLostFound: error processing "
operator|+
name|fullName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|internalError
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * XXX (ab) Bulk of this method is copied verbatim from {@link DFSClient}, which is    * bad. Both places should be refactored to provide a method to copy blocks    * around.    */
DECL|method|copyBlock (DFSClient dfs, LocatedBlock lblock, OutputStream fos)
specifier|private
name|void
name|copyBlock
parameter_list|(
name|DFSClient
name|dfs
parameter_list|,
name|LocatedBlock
name|lblock
parameter_list|,
name|OutputStream
name|fos
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|failures
init|=
literal|0
decl_stmt|;
name|InetSocketAddress
name|targetAddr
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|DatanodeInfo
argument_list|>
name|deadNodes
init|=
operator|new
name|TreeSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Socket
name|s
init|=
literal|null
decl_stmt|;
name|BlockReader
name|blockReader
init|=
literal|null
decl_stmt|;
name|ExtendedBlock
name|block
init|=
name|lblock
operator|.
name|getBlock
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|DatanodeInfo
name|chosenNode
decl_stmt|;
try|try
block|{
name|chosenNode
operator|=
name|bestNode
argument_list|(
name|dfs
argument_list|,
name|lblock
operator|.
name|getLocations
argument_list|()
argument_list|,
name|deadNodes
argument_list|)
expr_stmt|;
name|targetAddr
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|chosenNode
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
if|if
condition|(
name|failures
operator|>=
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_DEFAULT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not obtain block "
operator|+
name|lblock
argument_list|,
name|ie
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not obtain block from any node:  "
operator|+
name|ie
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{         }
name|deadNodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|failures
operator|++
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|s
operator|=
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
operator|.
name|createSocket
argument_list|()
expr_stmt|;
name|s
operator|.
name|connect
argument_list|(
name|targetAddr
argument_list|,
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSoTimeout
argument_list|(
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|String
name|file
init|=
name|BlockReaderFactory
operator|.
name|getFileName
argument_list|(
name|targetAddr
argument_list|,
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|blockReader
operator|=
name|BlockReaderFactory
operator|.
name|newBlockReader
argument_list|(
name|conf
argument_list|,
name|file
argument_list|,
name|block
argument_list|,
name|lblock
operator|.
name|getBlockToken
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
literal|"fsck"
argument_list|,
name|TcpPeerServer
operator|.
name|peerFromSocketAndKey
argument_list|(
name|s
argument_list|,
name|namenode
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getDataEncryptionKey
argument_list|()
argument_list|)
argument_list|,
name|chosenNode
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Put chosen node into dead list, continue
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to connect to "
operator|+
name|targetAddr
operator|+
literal|":"
operator|+
name|ex
argument_list|)
expr_stmt|;
name|deadNodes
operator|.
name|add
argument_list|(
name|chosenNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iex
parameter_list|)
block|{           }
block|}
name|s
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|blockReader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not open data stream for "
operator|+
name|lblock
operator|.
name|getBlock
argument_list|()
argument_list|)
throw|;
block|}
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|cnt
operator|=
name|blockReader
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|bytesRead
operator|+=
name|cnt
expr_stmt|;
block|}
if|if
condition|(
name|bytesRead
operator|!=
name|block
operator|.
name|getNumBytes
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Recorded block size is "
operator|+
name|block
operator|.
name|getNumBytes
argument_list|()
operator|+
literal|", but datanode returned "
operator|+
name|bytesRead
operator|+
literal|" bytes"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading block"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{}
block|}
if|if
condition|(
operator|!
name|success
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Could not copy block data for "
operator|+
name|lblock
operator|.
name|getBlock
argument_list|()
argument_list|)
throw|;
block|}
comment|/*    * XXX (ab) See comment above for copyBlock().    *    * Pick the best node from which to stream the data.    * That's the local one, if available.    */
DECL|method|bestNode (DFSClient dfs, DatanodeInfo[] nodes, TreeSet<DatanodeInfo> deadNodes)
specifier|private
name|DatanodeInfo
name|bestNode
parameter_list|(
name|DFSClient
name|dfs
parameter_list|,
name|DatanodeInfo
index|[]
name|nodes
parameter_list|,
name|TreeSet
argument_list|<
name|DatanodeInfo
argument_list|>
name|deadNodes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|nodes
operator|==
literal|null
operator|)
operator|||
operator|(
name|nodes
operator|.
name|length
operator|-
name|deadNodes
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No live nodes contain current block"
argument_list|)
throw|;
block|}
name|DatanodeInfo
name|chosenNode
decl_stmt|;
do|do
block|{
name|chosenNode
operator|=
name|nodes
index|[
name|DFSUtil
operator|.
name|getRandom
argument_list|()
operator|.
name|nextInt
argument_list|(
name|nodes
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
block|}
do|while
condition|(
name|deadNodes
operator|.
name|contains
argument_list|(
name|chosenNode
argument_list|)
condition|)
do|;
return|return
name|chosenNode
return|;
block|}
DECL|method|lostFoundInit (DFSClient dfs)
specifier|private
name|void
name|lostFoundInit
parameter_list|(
name|DFSClient
name|dfs
parameter_list|)
block|{
name|lfInited
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|String
name|lfName
init|=
literal|"/lost+found"
decl_stmt|;
specifier|final
name|HdfsFileStatus
name|lfStatus
init|=
name|dfs
operator|.
name|getFileInfo
argument_list|(
name|lfName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lfStatus
operator|==
literal|null
condition|)
block|{
comment|// not exists
name|lfInitedOk
operator|=
name|dfs
operator|.
name|mkdirs
argument_list|(
name|lfName
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lostFound
operator|=
name|lfName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lfStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// exists but not a directory
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot use /lost+found : a regular file with this name exists."
argument_list|)
expr_stmt|;
name|lfInitedOk
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// exists and is a directory
name|lostFound
operator|=
name|lfName
expr_stmt|;
name|lfInitedOk
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|lfInitedOk
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|lostFound
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot initialize /lost+found ."
argument_list|)
expr_stmt|;
name|lfInitedOk
operator|=
literal|false
expr_stmt|;
name|internalError
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * FsckResult of checking, plus overall DFS statistics.    */
annotation|@
name|VisibleForTesting
DECL|class|Result
specifier|static
class|class
name|Result
block|{
DECL|field|missingIds
name|List
argument_list|<
name|String
argument_list|>
name|missingIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|missingSize
name|long
name|missingSize
init|=
literal|0L
decl_stmt|;
DECL|field|corruptFiles
name|long
name|corruptFiles
init|=
literal|0L
decl_stmt|;
DECL|field|corruptBlocks
name|long
name|corruptBlocks
init|=
literal|0L
decl_stmt|;
DECL|field|excessiveReplicas
name|long
name|excessiveReplicas
init|=
literal|0L
decl_stmt|;
DECL|field|missingReplicas
name|long
name|missingReplicas
init|=
literal|0L
decl_stmt|;
DECL|field|numOverReplicatedBlocks
name|long
name|numOverReplicatedBlocks
init|=
literal|0L
decl_stmt|;
DECL|field|numUnderReplicatedBlocks
name|long
name|numUnderReplicatedBlocks
init|=
literal|0L
decl_stmt|;
DECL|field|numMisReplicatedBlocks
name|long
name|numMisReplicatedBlocks
init|=
literal|0L
decl_stmt|;
comment|// blocks that do not satisfy block placement policy
DECL|field|numMinReplicatedBlocks
name|long
name|numMinReplicatedBlocks
init|=
literal|0L
decl_stmt|;
comment|// minimally replicatedblocks
DECL|field|totalBlocks
name|long
name|totalBlocks
init|=
literal|0L
decl_stmt|;
DECL|field|numExpectedReplicas
name|long
name|numExpectedReplicas
init|=
literal|0L
decl_stmt|;
DECL|field|totalOpenFilesBlocks
name|long
name|totalOpenFilesBlocks
init|=
literal|0L
decl_stmt|;
DECL|field|totalFiles
name|long
name|totalFiles
init|=
literal|0L
decl_stmt|;
DECL|field|totalOpenFiles
name|long
name|totalOpenFiles
init|=
literal|0L
decl_stmt|;
DECL|field|totalDirs
name|long
name|totalDirs
init|=
literal|0L
decl_stmt|;
DECL|field|totalSize
name|long
name|totalSize
init|=
literal|0L
decl_stmt|;
DECL|field|totalOpenFilesSize
name|long
name|totalOpenFilesSize
init|=
literal|0L
decl_stmt|;
DECL|field|totalReplicas
name|long
name|totalReplicas
init|=
literal|0L
decl_stmt|;
DECL|field|replication
specifier|final
name|short
name|replication
decl_stmt|;
DECL|method|Result (Configuration conf)
name|Result
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|replication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**      * DFS is considered healthy if there are no missing blocks.      */
DECL|method|isHealthy ()
name|boolean
name|isHealthy
parameter_list|()
block|{
return|return
operator|(
operator|(
name|missingIds
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|corruptBlocks
operator|==
literal|0
operator|)
operator|)
return|;
block|}
comment|/** Add a missing block name, plus its size. */
DECL|method|addMissing (String id, long size)
name|void
name|addMissing
parameter_list|(
name|String
name|id
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|missingIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|missingSize
operator|+=
name|size
expr_stmt|;
block|}
comment|/** Return the actual replication factor. */
DECL|method|getReplicationFactor ()
name|float
name|getReplicationFactor
parameter_list|()
block|{
if|if
condition|(
name|totalBlocks
operator|==
literal|0
condition|)
return|return
literal|0.0f
return|;
return|return
call|(
name|float
call|)
argument_list|(
name|totalReplicas
argument_list|)
operator|/
operator|(
name|float
operator|)
name|totalBlocks
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|"Status: "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|isHealthy
argument_list|()
condition|?
literal|"HEALTHY"
else|:
literal|"CORRUPT"
operator|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n Total size:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|totalSize
argument_list|)
operator|.
name|append
argument_list|(
literal|" B"
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalOpenFilesSize
operator|!=
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|" (Total open files size: "
argument_list|)
operator|.
name|append
argument_list|(
name|totalOpenFilesSize
argument_list|)
operator|.
name|append
argument_list|(
literal|" B)"
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|append
argument_list|(
literal|"\n Total dirs:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|totalDirs
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n Total files:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|totalFiles
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalOpenFiles
operator|!=
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|" (Files currently being written: "
argument_list|)
operator|.
name|append
argument_list|(
name|totalOpenFiles
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|append
argument_list|(
literal|"\n Total blocks (validated):\t"
argument_list|)
operator|.
name|append
argument_list|(
name|totalBlocks
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalBlocks
operator|>
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|" (avg. block size "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|totalSize
operator|/
name|totalBlocks
operator|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" B)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|totalOpenFilesBlocks
operator|!=
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|" (Total open file blocks (not validated): "
argument_list|)
operator|.
name|append
argument_list|(
name|totalOpenFilesBlocks
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|corruptFiles
operator|>
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|"\n  ********************************"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  CORRUPT FILES:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|corruptFiles
argument_list|)
expr_stmt|;
if|if
condition|(
name|missingSize
operator|>
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|"\n  MISSING BLOCKS:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|missingIds
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  MISSING SIZE:\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|missingSize
argument_list|)
operator|.
name|append
argument_list|(
literal|" B"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|corruptBlocks
operator|>
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|"\n  CORRUPT BLOCKS: \t"
argument_list|)
operator|.
name|append
argument_list|(
name|corruptBlocks
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|append
argument_list|(
literal|"\n  ********************************"
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|append
argument_list|(
literal|"\n Minimally replicated blocks:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|numMinReplicatedBlocks
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalBlocks
operator|>
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|numMinReplicatedBlocks
operator|*
literal|100
argument_list|)
operator|/
operator|(
name|float
operator|)
name|totalBlocks
operator|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" %)"
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|append
argument_list|(
literal|"\n Over-replicated blocks:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|numOverReplicatedBlocks
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalBlocks
operator|>
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|numOverReplicatedBlocks
operator|*
literal|100
argument_list|)
operator|/
operator|(
name|float
operator|)
name|totalBlocks
operator|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" %)"
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|append
argument_list|(
literal|"\n Under-replicated blocks:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|numUnderReplicatedBlocks
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalBlocks
operator|>
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|numUnderReplicatedBlocks
operator|*
literal|100
argument_list|)
operator|/
operator|(
name|float
operator|)
name|totalBlocks
operator|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" %)"
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|append
argument_list|(
literal|"\n Mis-replicated blocks:\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|numMisReplicatedBlocks
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalBlocks
operator|>
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|numMisReplicatedBlocks
operator|*
literal|100
argument_list|)
operator|/
operator|(
name|float
operator|)
name|totalBlocks
operator|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" %)"
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|append
argument_list|(
literal|"\n Default replication factor:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|replication
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n Average block replication:\t"
argument_list|)
operator|.
name|append
argument_list|(
name|getReplicationFactor
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n Corrupt blocks:\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|corruptBlocks
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n Missing replicas:\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|missingReplicas
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalReplicas
operator|>
literal|0
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|missingReplicas
operator|*
literal|100
argument_list|)
operator|/
operator|(
name|float
operator|)
name|numExpectedReplicas
operator|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" %)"
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

