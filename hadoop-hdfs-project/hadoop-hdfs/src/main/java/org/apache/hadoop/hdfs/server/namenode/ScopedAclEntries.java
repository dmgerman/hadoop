begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_comment
comment|/**  * Groups a list of ACL entries into separate lists for access entries vs.  * default entries.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ScopedAclEntries
specifier|final
class|class
name|ScopedAclEntries
block|{
DECL|field|PIVOT_NOT_FOUND
specifier|private
specifier|static
specifier|final
name|int
name|PIVOT_NOT_FOUND
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|accessEntries
specifier|private
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|accessEntries
decl_stmt|;
DECL|field|defaultEntries
specifier|private
specifier|final
name|List
argument_list|<
name|AclEntry
argument_list|>
name|defaultEntries
decl_stmt|;
comment|/**    * Creates a new ScopedAclEntries from the given list.  It is assumed that the    * list is already sorted such that all access entries precede all default    * entries.    *    * @param aclEntries List<AclEntry> to separate    */
DECL|method|ScopedAclEntries (List<AclEntry> aclEntries)
specifier|public
name|ScopedAclEntries
parameter_list|(
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
parameter_list|)
block|{
name|int
name|pivot
init|=
name|calculatePivotOnDefaultEntries
argument_list|(
name|aclEntries
argument_list|)
decl_stmt|;
if|if
condition|(
name|pivot
operator|!=
name|PIVOT_NOT_FOUND
condition|)
block|{
name|accessEntries
operator|=
name|pivot
operator|!=
literal|0
condition|?
name|aclEntries
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|pivot
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|AclEntry
operator|>
name|emptyList
argument_list|()
expr_stmt|;
name|defaultEntries
operator|=
name|aclEntries
operator|.
name|subList
argument_list|(
name|pivot
argument_list|,
name|aclEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accessEntries
operator|=
name|aclEntries
expr_stmt|;
name|defaultEntries
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns access entries.    *    * @return List<AclEntry> containing just access entries, or an empty list if    *   there are no access entries    */
DECL|method|getAccessEntries ()
specifier|public
name|List
argument_list|<
name|AclEntry
argument_list|>
name|getAccessEntries
parameter_list|()
block|{
return|return
name|accessEntries
return|;
block|}
comment|/**    * Returns default entries.    *    * @return List<AclEntry> containing just default entries, or an empty list if    *   there are no default entries    */
DECL|method|getDefaultEntries ()
specifier|public
name|List
argument_list|<
name|AclEntry
argument_list|>
name|getDefaultEntries
parameter_list|()
block|{
return|return
name|defaultEntries
return|;
block|}
comment|/**    * Returns the pivot point in the list between the access entries and the    * default entries.  This is the index of the first element in the list that is    * a default entry.    *    * @param aclBuilder ArrayList<AclEntry> containing entries to build    * @return int pivot point, or -1 if list contains no default entries    */
DECL|method|calculatePivotOnDefaultEntries (List<AclEntry> aclBuilder)
specifier|private
specifier|static
name|int
name|calculatePivotOnDefaultEntries
parameter_list|(
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclBuilder
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aclBuilder
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|aclBuilder
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getScope
argument_list|()
operator|==
name|AclEntryScope
operator|.
name|DEFAULT
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
name|PIVOT_NOT_FOUND
return|;
block|}
block|}
end_class

end_unit

