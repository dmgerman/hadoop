begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_TIMEOUT_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_TIMEOUT_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_THREAD_RUNS_PER_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_THREAD_RUNS_PER_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * Tracks mmap instances used on an HDFS client.  *  * mmaps can be used concurrently by multiple threads at once.  * mmaps cannot be closed while they are in use.  *  * The cache is important for performance, because the first time an mmap is  * created, the page table entries (PTEs) are not yet set up.  * Even when reading data that is entirely resident in memory, reading an  * mmap the second time is faster.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ClientMmapManager
specifier|public
class|class
name|ClientMmapManager
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientMmapManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|cacheSize
specifier|private
specifier|final
name|int
name|cacheSize
decl_stmt|;
DECL|field|timeoutNs
specifier|private
specifier|final
name|long
name|timeoutNs
decl_stmt|;
DECL|field|runsPerTimeout
specifier|private
specifier|final
name|int
name|runsPerTimeout
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|/**    * Maps block, datanode_id to the client mmap object.    * If the ClientMmap is in the process of being loaded,    * {@link Waitable<ClientMmap>#await()} will block.    *    * Protected by the ClientMmapManager lock.    */
DECL|field|mmaps
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Key
argument_list|,
name|Waitable
argument_list|<
name|ClientMmap
argument_list|>
argument_list|>
name|mmaps
init|=
operator|new
name|TreeMap
argument_list|<
name|Key
argument_list|,
name|Waitable
argument_list|<
name|ClientMmap
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Maps the last use time to the client mmap object.    * We ensure that each last use time is unique by inserting a jitter of a    * nanosecond or two if necessary.    *     * Protected by the ClientMmapManager lock.    * ClientMmap objects that are in use are never evictable.    */
DECL|field|evictable
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|ClientMmap
argument_list|>
name|evictable
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|ClientMmap
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"ClientMmapManager"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * The CacheCleaner for this ClientMmapManager.  We don't create this    * and schedule it until it becomes necessary.    */
DECL|field|cacheCleaner
specifier|private
name|CacheCleaner
name|cacheCleaner
decl_stmt|;
comment|/**    * Factory method to create a ClientMmapManager from a Hadoop    * configuration.    */
DECL|method|fromConf (Configuration conf)
specifier|public
specifier|static
name|ClientMmapManager
name|fromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|ClientMmapManager
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_MMAP_CACHE_SIZE
argument_list|,
name|DFS_CLIENT_MMAP_CACHE_SIZE_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_MMAP_CACHE_TIMEOUT_MS
argument_list|,
name|DFS_CLIENT_MMAP_CACHE_TIMEOUT_MS_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_MMAP_CACHE_THREAD_RUNS_PER_TIMEOUT
argument_list|,
name|DFS_CLIENT_MMAP_CACHE_THREAD_RUNS_PER_TIMEOUT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ClientMmapManager (int cacheSize, long timeoutMs, int runsPerTimeout)
specifier|public
name|ClientMmapManager
parameter_list|(
name|int
name|cacheSize
parameter_list|,
name|long
name|timeoutMs
parameter_list|,
name|int
name|runsPerTimeout
parameter_list|)
block|{
name|this
operator|.
name|cacheSize
operator|=
name|cacheSize
expr_stmt|;
name|this
operator|.
name|timeoutNs
operator|=
name|timeoutMs
operator|*
literal|1000000
expr_stmt|;
name|this
operator|.
name|runsPerTimeout
operator|=
name|runsPerTimeout
expr_stmt|;
block|}
DECL|method|getTimeoutMs ()
name|long
name|getTimeoutMs
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeoutNs
operator|/
literal|1000000
return|;
block|}
DECL|method|getRunsPerTimeout ()
name|int
name|getRunsPerTimeout
parameter_list|()
block|{
return|return
name|this
operator|.
name|runsPerTimeout
return|;
block|}
DECL|method|verifyConfigurationMatches (Configuration conf)
specifier|public
name|String
name|verifyConfigurationMatches
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|cacheSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_MMAP_CACHE_SIZE
argument_list|,
name|DFS_CLIENT_MMAP_CACHE_SIZE_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|cacheSize
operator|!=
name|cacheSize
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"You specified a cache size of "
argument_list|)
operator|.
name|append
argument_list|(
name|cacheSize
argument_list|)
operator|.
name|append
argument_list|(
literal|", but the existing cache size is "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|cacheSize
argument_list|)
operator|.
name|append
argument_list|(
literal|".  "
argument_list|)
expr_stmt|;
block|}
name|long
name|timeoutMs
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_MMAP_CACHE_TIMEOUT_MS
argument_list|,
name|DFS_CLIENT_MMAP_CACHE_TIMEOUT_MS_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|getTimeoutMs
argument_list|()
operator|!=
name|timeoutMs
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"You specified a cache timeout of "
argument_list|)
operator|.
name|append
argument_list|(
name|timeoutMs
argument_list|)
operator|.
name|append
argument_list|(
literal|" ms, but the existing cache timeout is "
argument_list|)
operator|.
name|append
argument_list|(
name|getTimeoutMs
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"ms"
argument_list|)
operator|.
name|append
argument_list|(
literal|".  "
argument_list|)
expr_stmt|;
block|}
name|int
name|runsPerTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_MMAP_CACHE_THREAD_RUNS_PER_TIMEOUT
argument_list|,
name|DFS_CLIENT_MMAP_CACHE_THREAD_RUNS_PER_TIMEOUT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|getRunsPerTimeout
argument_list|()
operator|!=
name|runsPerTimeout
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"You specified "
argument_list|)
operator|.
name|append
argument_list|(
name|runsPerTimeout
argument_list|)
operator|.
name|append
argument_list|(
literal|" runs per timeout, but the existing runs per timeout is "
argument_list|)
operator|.
name|append
argument_list|(
name|getTimeoutMs
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".  "
argument_list|)
expr_stmt|;
block|}
return|return
name|bld
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|Waitable
specifier|private
specifier|static
class|class
name|Waitable
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|val
specifier|private
name|T
name|val
decl_stmt|;
DECL|field|cond
specifier|private
specifier|final
name|Condition
name|cond
decl_stmt|;
DECL|method|Waitable (Condition cond)
specifier|public
name|Waitable
parameter_list|(
name|Condition
name|cond
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|cond
operator|=
name|cond
expr_stmt|;
block|}
DECL|method|await ()
specifier|public
name|T
name|await
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|this
operator|.
name|val
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|cond
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|val
return|;
block|}
DECL|method|provide (T val)
specifier|public
name|void
name|provide
parameter_list|(
name|T
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|cond
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Key
specifier|private
specifier|static
class|class
name|Key
implements|implements
name|Comparable
argument_list|<
name|Key
argument_list|>
block|{
DECL|field|block
specifier|private
specifier|final
name|ExtendedBlock
name|block
decl_stmt|;
DECL|field|datanode
specifier|private
specifier|final
name|DatanodeID
name|datanode
decl_stmt|;
DECL|method|Key (ExtendedBlock block, DatanodeID datanode)
name|Key
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|DatanodeID
name|datanode
parameter_list|)
block|{
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
name|this
operator|.
name|datanode
operator|=
name|datanode
expr_stmt|;
block|}
comment|/**      * Compare two ClientMmap regions that we're storing.      *      * When we append to a block, we bump the genstamp.  It is important to       * compare the genStamp here.  That way, we will not return a shorter       * mmap than required.      */
annotation|@
name|Override
DECL|method|compareTo (Key o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Key
name|o
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|o
operator|.
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|o
operator|.
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|o
operator|.
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|datanode
argument_list|,
name|o
operator|.
name|datanode
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object rhs)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|rhs
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|Key
name|o
init|=
operator|(
name|Key
operator|)
name|rhs
decl_stmt|;
return|return
operator|(
name|compareTo
argument_list|(
name|o
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|block
operator|.
name|hashCode
argument_list|()
operator|^
name|datanode
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/**    * Thread which handles expiring mmaps from the cache.    */
DECL|class|CacheCleaner
specifier|private
specifier|static
class|class
name|CacheCleaner
implements|implements
name|Runnable
implements|,
name|Closeable
block|{
DECL|field|managerRef
specifier|private
name|WeakReference
argument_list|<
name|ClientMmapManager
argument_list|>
name|managerRef
decl_stmt|;
DECL|field|future
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
DECL|method|CacheCleaner (ClientMmapManager manager)
name|CacheCleaner
parameter_list|(
name|ClientMmapManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|managerRef
operator|=
operator|new
name|WeakReference
argument_list|<
name|ClientMmapManager
argument_list|>
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClientMmapManager
name|manager
init|=
name|managerRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
return|return;
name|long
name|curTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|manager
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|manager
operator|.
name|evictStaleEntries
argument_list|(
name|curTime
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|manager
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setFuture (ScheduledFuture<?> future)
name|void
name|setFuture
parameter_list|(
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
parameter_list|)
block|{
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Evict entries which are older than curTime + timeoutNs from the cache.    *    * NOTE: you must call this function with the lock held.    */
DECL|method|evictStaleEntries (long curTime)
specifier|private
name|void
name|evictStaleEntries
parameter_list|(
name|long
name|curTime
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|ClientMmap
argument_list|>
argument_list|>
name|iter
init|=
name|evictable
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|ClientMmap
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
name|timeoutNs
operator|>=
name|curTime
condition|)
block|{
return|return;
block|}
name|ClientMmap
name|mmap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
name|mmap
operator|.
name|getBlock
argument_list|()
argument_list|,
name|mmap
operator|.
name|getDatanodeID
argument_list|()
argument_list|)
decl_stmt|;
name|mmaps
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|mmap
operator|.
name|unmap
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Evict one mmap object from the cache.    *    * NOTE: you must call this function with the lock held.    *    * @return                  True if an object was evicted; false if none    *                          could be evicted.    */
DECL|method|evictOne ()
specifier|private
name|boolean
name|evictOne
parameter_list|()
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|ClientMmap
argument_list|>
name|entry
init|=
name|evictable
operator|.
name|pollFirstEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
comment|// We don't want to try creating another mmap region, because the
comment|// cache is full.
return|return
literal|false
return|;
block|}
name|ClientMmap
name|evictedMmap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Key
name|evictedKey
init|=
operator|new
name|Key
argument_list|(
name|evictedMmap
operator|.
name|getBlock
argument_list|()
argument_list|,
name|evictedMmap
operator|.
name|getDatanodeID
argument_list|()
argument_list|)
decl_stmt|;
name|mmaps
operator|.
name|remove
argument_list|(
name|evictedKey
argument_list|)
expr_stmt|;
name|evictedMmap
operator|.
name|unmap
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Create a new mmap object.    *     * NOTE: you must call this function with the lock held.    *    * @param key              The key which describes this mmap.    * @param in               The input stream to use to create the mmap.    * @return                 The new mmap object, or null if there were    *                         insufficient resources.    * @throws IOException     If there was an I/O error creating the mmap.    */
DECL|method|create (Key key, FileInputStream in)
specifier|private
name|ClientMmap
name|create
parameter_list|(
name|Key
name|key
parameter_list|,
name|FileInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|mmaps
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|>
name|cacheSize
condition|)
block|{
if|if
condition|(
operator|!
name|evictOne
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"mmap cache is full (with "
operator|+
name|cacheSize
operator|+
literal|" elements) and "
operator|+
literal|"nothing is evictable.  Ignoring request for mmap with "
operator|+
literal|"datanodeID="
operator|+
name|key
operator|.
name|datanode
operator|+
literal|", "
operator|+
literal|"block="
operator|+
name|key
operator|.
name|block
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// Create the condition variable that other threads may wait on.
name|Waitable
argument_list|<
name|ClientMmap
argument_list|>
name|waitable
init|=
operator|new
name|Waitable
argument_list|<
name|ClientMmap
argument_list|>
argument_list|(
name|lock
operator|.
name|newCondition
argument_list|()
argument_list|)
decl_stmt|;
name|mmaps
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|waitable
argument_list|)
expr_stmt|;
comment|// Load the entry
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|ClientMmap
name|mmap
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|mmap
operator|=
name|ClientMmap
operator|.
name|load
argument_list|(
name|this
argument_list|,
name|in
argument_list|,
name|key
operator|.
name|block
argument_list|,
name|key
operator|.
name|datanode
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cacheCleaner
operator|==
literal|null
condition|)
block|{
name|cacheCleaner
operator|=
operator|new
name|CacheCleaner
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|scheduleAtFixedRate
argument_list|(
name|cacheCleaner
argument_list|,
name|timeoutNs
argument_list|,
name|timeoutNs
operator|/
name|runsPerTimeout
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|cacheCleaner
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to create mmap for datanodeID="
operator|+
name|key
operator|.
name|datanode
operator|+
literal|", "
operator|+
literal|"block="
operator|+
name|key
operator|.
name|block
argument_list|)
expr_stmt|;
name|mmaps
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|waitable
operator|.
name|provide
argument_list|(
name|mmap
argument_list|)
expr_stmt|;
block|}
return|return
name|mmap
return|;
block|}
comment|/**    * Get or create an mmap region.    *     * @param node       The DataNode that owns the block for this mmap region.    * @param block      The block ID, block pool ID, and generation stamp of     *                     the block we want to read.    * @param in         An open file for this block.  This stream is only used    *                     if we have to create a new mmap; if we use an    *                     existing one, it is ignored.    *    * @return           The client mmap region.    */
DECL|method|fetch (DatanodeID datanodeID, ExtendedBlock block, FileInputStream in)
specifier|public
name|ClientMmap
name|fetch
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|,
name|FileInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetching mmap with datanodeID="
operator|+
name|datanodeID
operator|+
literal|", "
operator|+
literal|"block="
operator|+
name|block
argument_list|)
expr_stmt|;
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
name|block
argument_list|,
name|datanodeID
argument_list|)
decl_stmt|;
name|ClientMmap
name|mmap
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ClientMmapManager is closed."
argument_list|)
throw|;
block|}
while|while
condition|(
name|mmap
operator|==
literal|null
condition|)
block|{
name|Waitable
argument_list|<
name|ClientMmap
argument_list|>
name|entry
init|=
name|mmaps
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
name|create
argument_list|(
name|key
argument_list|,
name|in
argument_list|)
return|;
block|}
name|mmap
operator|=
name|entry
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mmap
operator|.
name|ref
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// When going from nobody using the mmap (ref = 0) to somebody
comment|// using the mmap (ref = 1), we must make the mmap un-evictable.
name|evictable
operator|.
name|remove
argument_list|(
name|mmap
operator|.
name|getLastEvictableTimeNs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"reusing existing mmap with datanodeID="
operator|+
name|datanodeID
operator|+
literal|", "
operator|+
literal|"block="
operator|+
name|block
argument_list|)
expr_stmt|;
return|return
name|mmap
return|;
block|}
comment|/**    * Make an mmap evictable.    *     * When an mmap is evictable, it may be removed from the cache if necessary.    * mmaps can only be evictable if nobody is using them.    *    * @param mmap             The mmap to make evictable.    */
DECL|method|makeEvictable (ClientMmap mmap)
name|void
name|makeEvictable
parameter_list|(
name|ClientMmap
name|mmap
parameter_list|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|closed
condition|)
block|{
comment|// If this ClientMmapManager is closed, then don't bother with the
comment|// cache; just close the mmap.
name|mmap
operator|.
name|unmap
argument_list|()
expr_stmt|;
return|return;
block|}
name|long
name|now
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|evictable
operator|.
name|containsKey
argument_list|(
name|now
argument_list|)
condition|)
block|{
name|now
operator|++
expr_stmt|;
block|}
name|mmap
operator|.
name|setLastEvictableTimeNs
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|evictable
operator|.
name|put
argument_list|(
name|now
argument_list|,
name|mmap
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|cacheCleaner
argument_list|)
expr_stmt|;
comment|// Unmap all the mmaps that nobody is using.
comment|// The ones which are in use will be unmapped just as soon as people stop
comment|// using them.
name|evictStaleEntries
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|interface|ClientMmapVisitor
specifier|public
interface|interface
name|ClientMmapVisitor
block|{
DECL|method|accept (ClientMmap mmap)
name|void
name|accept
parameter_list|(
name|ClientMmap
name|mmap
parameter_list|)
function_decl|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|visitMmaps (ClientMmapVisitor visitor)
specifier|public
specifier|synchronized
name|void
name|visitMmaps
parameter_list|(
name|ClientMmapVisitor
name|visitor
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|Waitable
argument_list|<
name|ClientMmap
argument_list|>
name|entry
range|:
name|mmaps
operator|.
name|values
argument_list|()
control|)
block|{
name|visitor
operator|.
name|accept
argument_list|(
name|entry
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|visitEvictable (ClientMmapVisitor visitor)
specifier|public
name|void
name|visitEvictable
parameter_list|(
name|ClientMmapVisitor
name|visitor
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|ClientMmap
name|mmap
range|:
name|evictable
operator|.
name|values
argument_list|()
control|)
block|{
name|visitor
operator|.
name|accept
argument_list|(
name|mmap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

