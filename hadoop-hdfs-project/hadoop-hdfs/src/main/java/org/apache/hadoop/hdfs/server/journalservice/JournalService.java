begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.journalservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|journalservice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnregisteredNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|JournalProtocolProtos
operator|.
name|JournalProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|JournalProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|JournalProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|FenceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|FencedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|JournalInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|JournalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_comment
comment|/**  * This class interfaces with the namenode using {@link JournalProtocol} over  * RPC. It has two modes:<br>  *<ul>  *<li>Mode where an RPC.Server is provided from outside, on which it  * {@link JournalProtocol} is registered. The RPC.Server stop and start is  * managed outside by the application.</li>  *<li>Stand alone mode where an RPC.Server is started and managed by the  * JournalListener.</li>  *</ul>  *   * The received journal operations are sent to a listener over callbacks. The  * listener implementation can handle the callbacks based on the application  * requirement.  */
end_comment

begin_class
DECL|class|JournalService
specifier|public
class|class
name|JournalService
implements|implements
name|JournalProtocol
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JournalService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|JournalListener
name|listener
decl_stmt|;
DECL|field|nnAddress
specifier|private
specifier|final
name|InetSocketAddress
name|nnAddress
decl_stmt|;
DECL|field|registration
specifier|private
specifier|final
name|NamenodeRegistration
name|registration
decl_stmt|;
DECL|field|namenode
specifier|private
specifier|final
name|NamenodeProtocol
name|namenode
decl_stmt|;
DECL|field|stateHandler
specifier|private
specifier|final
name|StateHandler
name|stateHandler
init|=
operator|new
name|StateHandler
argument_list|()
decl_stmt|;
DECL|field|rpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|rpcServer
decl_stmt|;
DECL|field|epoch
specifier|private
name|long
name|epoch
init|=
literal|0
decl_stmt|;
DECL|field|fencerInfo
specifier|private
name|String
name|fencerInfo
decl_stmt|;
DECL|enum|State
enum|enum
name|State
block|{
comment|/** The service is initialized and ready to start. */
DECL|enumConstant|INIT
name|INIT
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
block|,
comment|/**      * RPC server is started.      * The service is ready to receive requests from namenode.      */
DECL|enumConstant|STARTED
name|STARTED
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
block|,
comment|/** The service is fenced by a namenode and waiting for roll. */
DECL|enumConstant|WAITING_FOR_ROLL
name|WAITING_FOR_ROLL
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
block|,
comment|/**      * The existing log is syncing with another source      * and it accepts journal from Namenode.      */
DECL|enumConstant|SYNCING
name|SYNCING
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
comment|/** The existing log is in sync and it accepts journal from Namenode. */
DECL|enumConstant|IN_SYNC
name|IN_SYNC
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
comment|/** The service is stopped. */
DECL|enumConstant|STOPPED
name|STOPPED
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
block|;
DECL|field|isJournalAllowed
specifier|final
name|boolean
name|isJournalAllowed
decl_stmt|;
DECL|field|isStartLogSegmentAllowed
specifier|final
name|boolean
name|isStartLogSegmentAllowed
decl_stmt|;
DECL|method|State (boolean isJournalAllowed, boolean isStartLogSegmentAllowed)
name|State
parameter_list|(
name|boolean
name|isJournalAllowed
parameter_list|,
name|boolean
name|isStartLogSegmentAllowed
parameter_list|)
block|{
name|this
operator|.
name|isJournalAllowed
operator|=
name|isJournalAllowed
expr_stmt|;
name|this
operator|.
name|isStartLogSegmentAllowed
operator|=
name|isStartLogSegmentAllowed
expr_stmt|;
block|}
block|}
DECL|class|StateHandler
specifier|static
class|class
name|StateHandler
block|{
DECL|field|current
name|State
name|current
init|=
name|State
operator|.
name|INIT
decl_stmt|;
DECL|method|start ()
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|current
operator|!=
name|State
operator|.
name|INIT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Service cannot be started in "
operator|+
name|current
operator|+
literal|" state."
argument_list|)
throw|;
block|}
name|current
operator|=
name|State
operator|.
name|STARTED
expr_stmt|;
block|}
DECL|method|waitForRoll ()
specifier|synchronized
name|void
name|waitForRoll
parameter_list|()
block|{
if|if
condition|(
name|current
operator|!=
name|State
operator|.
name|STARTED
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot wait-for-roll in "
operator|+
name|current
operator|+
literal|" state."
argument_list|)
throw|;
block|}
name|current
operator|=
name|State
operator|.
name|WAITING_FOR_ROLL
expr_stmt|;
block|}
DECL|method|startLogSegment ()
specifier|synchronized
name|void
name|startLogSegment
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
name|State
operator|.
name|WAITING_FOR_ROLL
condition|)
block|{
name|current
operator|=
name|State
operator|.
name|SYNCING
expr_stmt|;
block|}
block|}
DECL|method|isStartLogSegmentAllowed ()
specifier|synchronized
name|void
name|isStartLogSegmentAllowed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|isStartLogSegmentAllowed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot start log segment in "
operator|+
name|current
operator|+
literal|" state."
argument_list|)
throw|;
block|}
block|}
DECL|method|isJournalAllowed ()
specifier|synchronized
name|void
name|isJournalAllowed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|isJournalAllowed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot journal in "
operator|+
name|current
operator|+
literal|" state."
argument_list|)
throw|;
block|}
block|}
DECL|method|isStopped ()
specifier|synchronized
name|boolean
name|isStopped
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
name|State
operator|.
name|STOPPED
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignore stop request since the service is in "
operator|+
name|current
operator|+
literal|" state."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|current
operator|=
name|State
operator|.
name|STOPPED
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Constructor to create {@link JournalService} where an RPC server is    * created by this service.    * @param conf Configuration    * @param nnAddr host:port for the active Namenode's RPC server    * @param serverAddress address to start RPC server to receive    *          {@link JournalProtocol} requests. This can be null, if    *          {@code server} is a valid server that is managed out side this    *          service.    * @param listener call-back interface to listen to journal activities    * @throws IOException on error    */
DECL|method|JournalService (Configuration conf, InetSocketAddress nnAddr, InetSocketAddress serverAddress, JournalListener listener)
name|JournalService
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|nnAddr
parameter_list|,
name|InetSocketAddress
name|serverAddress
parameter_list|,
name|JournalListener
name|listener
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nnAddress
operator|=
name|nnAddr
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddr
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|=
name|createRpcServer
argument_list|(
name|conf
argument_list|,
name|serverAddress
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|String
name|addr
init|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
decl_stmt|;
name|StorageInfo
name|storage
init|=
operator|new
name|StorageInfo
argument_list|(
name|LayoutVersion
operator|.
name|getCurrentLayoutVersion
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|registration
operator|=
operator|new
name|NamenodeRegistration
argument_list|(
name|addr
argument_list|,
literal|""
argument_list|,
name|storage
argument_list|,
name|NamenodeRole
operator|.
name|BACKUP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start the service.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|stateHandler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Start the RPC server
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting rpc server"
argument_list|)
expr_stmt|;
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|boolean
name|registered
init|=
literal|false
init|,
name|handshakeComplete
init|=
literal|false
init|;
condition|;
control|)
block|{
try|try
block|{
comment|// Perform handshake
if|if
condition|(
operator|!
name|handshakeComplete
condition|)
block|{
name|handshake
argument_list|()
expr_stmt|;
name|handshakeComplete
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"handshake completed"
argument_list|)
expr_stmt|;
block|}
comment|// Register with the namenode
if|if
condition|(
operator|!
name|registered
condition|)
block|{
name|registerWithNamenode
argument_list|()
expr_stmt|;
name|registered
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registration completed"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
name|stateHandler
operator|.
name|waitForRoll
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Stop the service. For application with RPC Server managed outside, the    * RPC Server must be stopped the application.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stateHandler
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|journal (JournalInfo journalInfo, long epoch, long firstTxnId, int numTxns, byte[] records)
specifier|public
name|void
name|journal
parameter_list|(
name|JournalInfo
name|journalInfo
parameter_list|,
name|long
name|epoch
parameter_list|,
name|long
name|firstTxnId
parameter_list|,
name|int
name|numTxns
parameter_list|,
name|byte
index|[]
name|records
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Received journal "
operator|+
name|firstTxnId
operator|+
literal|" "
operator|+
name|numTxns
argument_list|)
expr_stmt|;
block|}
name|stateHandler
operator|.
name|isJournalAllowed
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|epoch
argument_list|,
name|journalInfo
argument_list|)
expr_stmt|;
name|listener
operator|.
name|journal
argument_list|(
name|this
argument_list|,
name|firstTxnId
argument_list|,
name|numTxns
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startLogSegment (JournalInfo journalInfo, long epoch, long txid)
specifier|public
name|void
name|startLogSegment
parameter_list|(
name|JournalInfo
name|journalInfo
parameter_list|,
name|long
name|epoch
parameter_list|,
name|long
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Received startLogSegment "
operator|+
name|txid
argument_list|)
expr_stmt|;
block|}
name|stateHandler
operator|.
name|isStartLogSegmentAllowed
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|epoch
argument_list|,
name|journalInfo
argument_list|)
expr_stmt|;
name|listener
operator|.
name|rollLogs
argument_list|(
name|this
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|stateHandler
operator|.
name|startLogSegment
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fence (JournalInfo journalInfo, long epoch, String fencerInfo)
specifier|public
name|FenceResponse
name|fence
parameter_list|(
name|JournalInfo
name|journalInfo
parameter_list|,
name|long
name|epoch
parameter_list|,
name|String
name|fencerInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fenced by "
operator|+
name|fencerInfo
operator|+
literal|" with epoch "
operator|+
name|epoch
argument_list|)
expr_stmt|;
name|verifyFence
argument_list|(
name|epoch
argument_list|,
name|fencerInfo
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|journalInfo
argument_list|)
expr_stmt|;
name|long
name|previousEpoch
init|=
name|epoch
decl_stmt|;
name|this
operator|.
name|epoch
operator|=
name|epoch
expr_stmt|;
name|this
operator|.
name|fencerInfo
operator|=
name|fencerInfo
expr_stmt|;
comment|// TODO:HDFS-3092 set lastTransId and inSync
return|return
operator|new
name|FenceResponse
argument_list|(
name|previousEpoch
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Create an RPC server. */
DECL|method|createRpcServer (Configuration conf, InetSocketAddress address, JournalProtocol impl)
specifier|private
specifier|static
name|RPC
operator|.
name|Server
name|createRpcServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|,
name|JournalProtocol
name|impl
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|JournalProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|JournalProtocolServerSideTranslatorPB
name|xlator
init|=
operator|new
name|JournalProtocolServerSideTranslatorPB
argument_list|(
name|impl
argument_list|)
decl_stmt|;
name|BlockingService
name|service
init|=
name|JournalProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|xlator
argument_list|)
decl_stmt|;
return|return
name|RPC
operator|.
name|getServer
argument_list|(
name|JournalProtocolPB
operator|.
name|class
argument_list|,
name|service
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|verifyEpoch (long e)
specifier|private
name|void
name|verifyEpoch
parameter_list|(
name|long
name|e
parameter_list|)
throws|throws
name|FencedException
block|{
if|if
condition|(
name|epoch
operator|!=
name|e
condition|)
block|{
name|String
name|errorMsg
init|=
literal|"Epoch "
operator|+
name|e
operator|+
literal|" is not valid. "
operator|+
literal|"Resource has already been fenced by "
operator|+
name|fencerInfo
operator|+
literal|" with epoch "
operator|+
name|epoch
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FencedException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyFence (long e, String fencer)
specifier|private
name|void
name|verifyFence
parameter_list|(
name|long
name|e
parameter_list|,
name|String
name|fencer
parameter_list|)
throws|throws
name|FencedException
block|{
if|if
condition|(
name|e
operator|<=
name|epoch
condition|)
block|{
name|String
name|errorMsg
init|=
literal|"Epoch "
operator|+
name|e
operator|+
literal|" from fencer "
operator|+
name|fencer
operator|+
literal|" is not valid. "
operator|+
literal|"Resource has already been fenced by "
operator|+
name|fencerInfo
operator|+
literal|" with epoch "
operator|+
name|epoch
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FencedException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
block|}
comment|/**     * Verifies a journal request    */
DECL|method|verify (JournalInfo journalInfo)
specifier|private
name|void
name|verify
parameter_list|(
name|JournalInfo
name|journalInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|errorMsg
init|=
literal|null
decl_stmt|;
name|int
name|expectedNamespaceID
init|=
name|registration
operator|.
name|getNamespaceID
argument_list|()
decl_stmt|;
if|if
condition|(
name|journalInfo
operator|.
name|getNamespaceId
argument_list|()
operator|!=
name|expectedNamespaceID
condition|)
block|{
name|errorMsg
operator|=
literal|"Invalid namespaceID in journal request - expected "
operator|+
name|expectedNamespaceID
operator|+
literal|" actual "
operator|+
name|journalInfo
operator|.
name|getNamespaceId
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnregisteredNodeException
argument_list|(
name|journalInfo
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|journalInfo
operator|.
name|getClusterId
argument_list|()
operator|.
name|equals
argument_list|(
name|registration
operator|.
name|getClusterID
argument_list|()
argument_list|)
condition|)
block|{
name|errorMsg
operator|=
literal|"Invalid clusterId in journal request - expected "
operator|+
name|journalInfo
operator|.
name|getClusterId
argument_list|()
operator|+
literal|" actual "
operator|+
name|registration
operator|.
name|getClusterID
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnregisteredNodeException
argument_list|(
name|journalInfo
argument_list|)
throw|;
block|}
block|}
comment|/**     * Verifies a journal request    */
DECL|method|verify (long e, JournalInfo journalInfo)
specifier|private
name|void
name|verify
parameter_list|(
name|long
name|e
parameter_list|,
name|JournalInfo
name|journalInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyEpoch
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|journalInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Register this service with the active namenode.    */
DECL|method|registerWithNamenode ()
specifier|private
name|void
name|registerWithNamenode
parameter_list|()
throws|throws
name|IOException
block|{
name|NamenodeRegistration
name|nnReg
init|=
name|namenode
operator|.
name|register
argument_list|(
name|registration
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nnReg
operator|==
literal|null
condition|)
block|{
comment|// consider as a rejection
name|msg
operator|=
literal|"Registration rejected by "
operator|+
name|nnAddress
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|nnReg
operator|.
name|isRole
argument_list|(
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
condition|)
block|{
name|msg
operator|=
literal|" Name-node "
operator|+
name|nnAddress
operator|+
literal|" is not active"
expr_stmt|;
block|}
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
comment|// stop the node
block|}
block|}
DECL|method|handshake ()
specifier|private
name|void
name|handshake
parameter_list|()
throws|throws
name|IOException
block|{
name|NamespaceInfo
name|nsInfo
init|=
name|namenode
operator|.
name|versionRequest
argument_list|()
decl_stmt|;
name|listener
operator|.
name|verifyVersion
argument_list|(
name|this
argument_list|,
name|nsInfo
argument_list|)
expr_stmt|;
name|registration
operator|.
name|setStorageInfo
argument_list|(
name|nsInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getEpoch ()
name|long
name|getEpoch
parameter_list|()
block|{
return|return
name|epoch
return|;
block|}
block|}
end_class

end_unit

