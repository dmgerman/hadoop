begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockMetadataHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DatanodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FinalizedReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_comment
comment|/** Utility methods. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FsDatasetUtil
specifier|public
class|class
name|FsDatasetUtil
block|{
DECL|method|isUnlinkTmpFile (File f)
specifier|static
name|boolean
name|isUnlinkTmpFile
parameter_list|(
name|File
name|f
parameter_list|)
block|{
return|return
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|DatanodeUtil
operator|.
name|UNLINK_BLOCK_SUFFIX
argument_list|)
return|;
block|}
DECL|method|createNullChecksumByteArray ()
specifier|public
specifier|static
name|byte
index|[]
name|createNullChecksumByteArray
parameter_list|()
block|{
name|DataChecksum
name|csum
init|=
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|NULL
argument_list|,
literal|512
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dataOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockMetadataHeader
operator|.
name|writeHeader
argument_list|(
name|dataOut
argument_list|,
name|csum
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|FsVolumeImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in creating null checksum stream: "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|getOrigFile (File unlinkTmpFile)
specifier|static
name|File
name|getOrigFile
parameter_list|(
name|File
name|unlinkTmpFile
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|unlinkTmpFile
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|endsWith
argument_list|(
name|DatanodeUtil
operator|.
name|UNLINK_BLOCK_SUFFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unlinkTmpFile="
operator|+
name|unlinkTmpFile
operator|+
literal|" does not end with "
operator|+
name|DatanodeUtil
operator|.
name|UNLINK_BLOCK_SUFFIX
argument_list|)
throw|;
block|}
specifier|final
name|int
name|n
init|=
name|name
operator|.
name|length
argument_list|()
operator|-
name|DatanodeUtil
operator|.
name|UNLINK_BLOCK_SUFFIX
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|unlinkTmpFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getMetaFile (File f, long gs)
specifier|static
name|File
name|getMetaFile
parameter_list|(
name|File
name|f
parameter_list|,
name|long
name|gs
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|,
name|DatanodeUtil
operator|.
name|getMetaName
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|gs
argument_list|)
argument_list|)
return|;
block|}
comment|/** Find the corresponding meta data file from a given block file */
DECL|method|findMetaFile (final File blockFile)
specifier|public
specifier|static
name|File
name|findMetaFile
parameter_list|(
specifier|final
name|File
name|blockFile
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|prefix
init|=
name|blockFile
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
decl_stmt|;
specifier|final
name|File
name|parent
init|=
name|blockFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
specifier|final
name|File
index|[]
name|matches
init|=
name|parent
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|dir
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
name|Block
operator|.
name|METADATA_EXTENSION
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|matches
operator|==
literal|null
operator|||
name|matches
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Meta file not found, blockFile="
operator|+
name|blockFile
argument_list|)
throw|;
block|}
if|if
condition|(
name|matches
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found more than one meta files: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|matches
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|matches
index|[
literal|0
index|]
return|;
block|}
DECL|method|openAndSeek (File file, long offset)
specifier|public
specifier|static
name|FileDescriptor
name|openAndSeek
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|RandomAccessFile
name|raf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|raf
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
if|if
condition|(
name|offset
operator|>
literal|0
condition|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|raf
operator|.
name|getFD
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|raf
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|/**    * Find the meta-file for the specified block file    * and then return the generation stamp from the name of the meta-file.    */
DECL|method|getGenerationStampFromFile (File[] listdir, File blockFile)
specifier|static
name|long
name|getGenerationStampFromFile
parameter_list|(
name|File
index|[]
name|listdir
parameter_list|,
name|File
name|blockFile
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|blockName
init|=
name|blockFile
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|listdir
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|path
init|=
name|listdir
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|blockName
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|blockFile
operator|.
name|getCanonicalPath
argument_list|()
operator|.
name|equals
argument_list|(
name|listdir
index|[
name|j
index|]
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
return|return
name|Block
operator|.
name|getGenerationStamp
argument_list|(
name|listdir
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Block "
operator|+
name|blockFile
operator|+
literal|" does not have a metafile!"
argument_list|)
expr_stmt|;
return|return
name|HdfsConstants
operator|.
name|GRANDFATHER_GENERATION_STAMP
return|;
block|}
comment|/** Find the corresponding meta data file from a given block file */
DECL|method|parseGenerationStamp (File blockFile, File metaFile )
specifier|static
name|long
name|parseGenerationStamp
parameter_list|(
name|File
name|blockFile
parameter_list|,
name|File
name|metaFile
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|metaname
init|=
name|metaFile
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|gs
init|=
name|metaname
operator|.
name|substring
argument_list|(
name|blockFile
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|metaname
operator|.
name|length
argument_list|()
operator|-
name|Block
operator|.
name|METADATA_EXTENSION
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|gs
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to parse generation stamp: blockFile="
operator|+
name|blockFile
operator|+
literal|", metaFile="
operator|+
name|metaFile
argument_list|,
name|nfe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Compute the checksum for a block file that does not already have    * its checksum computed, and save it to dstMeta file.    */
DECL|method|computeChecksum (File srcMeta, File dstMeta, File blockFile, int smallBufferSize, Configuration conf)
specifier|public
specifier|static
name|void
name|computeChecksum
parameter_list|(
name|File
name|srcMeta
parameter_list|,
name|File
name|dstMeta
parameter_list|,
name|File
name|blockFile
parameter_list|,
name|int
name|smallBufferSize
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|srcMeta
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|dstMeta
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|blockFile
argument_list|)
expr_stmt|;
comment|// Create a dummy ReplicaInfo object pointing to the blockFile.
name|ReplicaInfo
name|wrapper
init|=
operator|new
name|FinalizedReplica
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|URI
name|getMetadataURI
parameter_list|()
block|{
return|return
name|srcMeta
operator|.
name|toURI
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getDataInputStream
parameter_list|(
name|long
name|seekOffset
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|blockFile
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|FsDatasetImpl
operator|.
name|computeChecksum
argument_list|(
name|wrapper
argument_list|,
name|dstMeta
argument_list|,
name|smallBufferSize
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

