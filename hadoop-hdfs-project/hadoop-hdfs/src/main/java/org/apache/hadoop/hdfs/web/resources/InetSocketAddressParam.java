begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_comment
comment|/** InetSocketAddressParam parameter. */
end_comment

begin_class
DECL|class|InetSocketAddressParam
specifier|abstract
class|class
name|InetSocketAddressParam
extends|extends
name|Param
argument_list|<
name|InetSocketAddress
argument_list|,
name|InetSocketAddressParam
operator|.
name|Domain
argument_list|>
block|{
DECL|method|InetSocketAddressParam (final Domain domain, final InetSocketAddress value)
name|InetSocketAddressParam
parameter_list|(
specifier|final
name|Domain
name|domain
parameter_list|,
specifier|final
name|InetSocketAddress
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|domain
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|Domain
operator|.
name|toString
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** The domain of the parameter. */
DECL|class|Domain
specifier|static
specifier|final
class|class
name|Domain
extends|extends
name|Param
operator|.
name|Domain
argument_list|<
name|InetSocketAddress
argument_list|>
block|{
DECL|method|Domain (final String paramName)
name|Domain
parameter_list|(
specifier|final
name|String
name|paramName
parameter_list|)
block|{
name|super
argument_list|(
name|paramName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDomain ()
specifier|public
name|String
name|getDomain
parameter_list|()
block|{
return|return
literal|"<HOST:PORT>"
return|;
block|}
annotation|@
name|Override
DECL|method|parse (final String str)
name|InetSocketAddress
name|parse
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
specifier|final
name|int
name|i
init|=
name|str
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse \""
operator|+
name|str
operator|+
literal|"\" as "
operator|+
name|getDomain
argument_list|()
operator|+
literal|": the ':' character not found."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse \""
operator|+
name|str
operator|+
literal|"\" as "
operator|+
name|getDomain
argument_list|()
operator|+
literal|": HOST is empty."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse \""
operator|+
name|str
operator|+
literal|"\" as "
operator|+
name|getDomain
argument_list|()
operator|+
literal|": PORT is empty."
argument_list|)
throw|;
block|}
specifier|final
name|String
name|host
init|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|port
decl_stmt|;
try|try
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse \""
operator|+
name|str
operator|+
literal|"\" as "
operator|+
name|getDomain
argument_list|()
operator|+
literal|": the ':' position is "
operator|+
name|i
operator|+
literal|" but failed to parse PORT."
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse \""
operator|+
name|str
operator|+
literal|"\": cannot create InetSocketAddress(host="
operator|+
name|host
operator|+
literal|", port="
operator|+
name|port
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Convert an InetSocketAddress to a HOST:PORT String. */
DECL|method|toString (final InetSocketAddress addr)
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|InetSocketAddress
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

