begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_comment
comment|/** Provide utility methods for Datanode. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DatanodeUtil
class|class
name|DatanodeUtil
block|{
DECL|field|METADATA_EXTENSION
specifier|static
specifier|final
name|String
name|METADATA_EXTENSION
init|=
literal|".meta"
decl_stmt|;
DECL|field|UNLINK_BLOCK_SUFFIX
specifier|static
specifier|final
name|String
name|UNLINK_BLOCK_SUFFIX
init|=
literal|".unlinked"
decl_stmt|;
DECL|field|DISK_ERROR
specifier|private
specifier|final
specifier|static
name|String
name|DISK_ERROR
init|=
literal|"Possible disk error on file creation: "
decl_stmt|;
comment|/** Get the cause of an I/O exception if caused by a possible disk error    * @param ioe an I/O exception    * @return cause if the I/O exception is caused by a possible disk error;    *         null otherwise.    */
DECL|method|getCauseIfDiskError (IOException ioe)
specifier|static
name|IOException
name|getCauseIfDiskError
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|DISK_ERROR
argument_list|)
condition|)
block|{
return|return
operator|(
name|IOException
operator|)
name|ioe
operator|.
name|getCause
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Create a new file.    * @throws IOException     * if the file already exists or if the file cannot be created.    */
DECL|method|createTmpFile (Block b, File f)
specifier|static
name|File
name|createTmpFile
parameter_list|(
name|Block
name|b
parameter_list|,
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected problem in creating temporary file for "
operator|+
name|b
operator|+
literal|".  File "
operator|+
name|f
operator|+
literal|" should not be present, but is."
argument_list|)
throw|;
block|}
comment|// Create the zero-length temp file
specifier|final
name|boolean
name|fileCreated
decl_stmt|;
try|try
block|{
name|fileCreated
operator|=
name|f
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
name|DISK_ERROR
operator|+
name|f
argument_list|)
operator|.
name|initCause
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fileCreated
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected problem in creating temporary file for "
operator|+
name|b
operator|+
literal|".  File "
operator|+
name|f
operator|+
literal|" should be creatable, but is already present."
argument_list|)
throw|;
block|}
return|return
name|f
return|;
block|}
DECL|method|getMetaFileName (String blockFileName, long genStamp)
specifier|static
name|String
name|getMetaFileName
parameter_list|(
name|String
name|blockFileName
parameter_list|,
name|long
name|genStamp
parameter_list|)
block|{
return|return
name|blockFileName
operator|+
literal|"_"
operator|+
name|genStamp
operator|+
name|METADATA_EXTENSION
return|;
block|}
DECL|method|getMetaFile (File f, long genStamp)
specifier|static
name|File
name|getMetaFile
parameter_list|(
name|File
name|f
parameter_list|,
name|long
name|genStamp
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getMetaFileName
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|genStamp
argument_list|)
argument_list|)
return|;
block|}
comment|/** Find the corresponding meta data file from a given block file */
DECL|method|findMetaFile (final File blockFile)
specifier|static
name|File
name|findMetaFile
parameter_list|(
specifier|final
name|File
name|blockFile
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|prefix
init|=
name|blockFile
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
decl_stmt|;
specifier|final
name|File
name|parent
init|=
name|blockFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|File
index|[]
name|matches
init|=
name|parent
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|dir
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
name|METADATA_EXTENSION
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|matches
operator|==
literal|null
operator|||
name|matches
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Meta file not found, blockFile="
operator|+
name|blockFile
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|matches
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found more than one meta files: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|matches
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|matches
index|[
literal|0
index|]
return|;
block|}
DECL|method|getUnlinkTmpFile (File f)
specifier|static
name|File
name|getUnlinkTmpFile
parameter_list|(
name|File
name|f
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|f
operator|.
name|getName
argument_list|()
operator|+
name|UNLINK_BLOCK_SUFFIX
argument_list|)
return|;
block|}
block|}
end_class

end_unit

