begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|impl
operator|.
name|DfsClientConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class supports writing files in striped layout and erasure coded format.  * Each stripe contains a sequence of cells.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DFSStripedOutputStream
specifier|public
class|class
name|DFSStripedOutputStream
extends|extends
name|DFSOutputStream
block|{
DECL|class|MultipleBlockingQueue
specifier|static
class|class
name|MultipleBlockingQueue
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|queues
specifier|private
specifier|final
name|List
argument_list|<
name|BlockingQueue
argument_list|<
name|T
argument_list|>
argument_list|>
name|queues
decl_stmt|;
DECL|method|MultipleBlockingQueue (int numQueue, int queueSize)
name|MultipleBlockingQueue
parameter_list|(
name|int
name|numQueue
parameter_list|,
name|int
name|queueSize
parameter_list|)
block|{
name|queues
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numQueue
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueue
condition|;
name|i
operator|++
control|)
block|{
name|queues
operator|.
name|add
argument_list|(
operator|new
name|LinkedBlockingQueue
argument_list|<
name|T
argument_list|>
argument_list|(
name|queueSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isEmpty ()
name|boolean
name|isEmpty
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|numQueues ()
name|int
name|numQueues
parameter_list|()
block|{
return|return
name|queues
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|offer (int i, T object)
name|void
name|offer
parameter_list|(
name|int
name|i
parameter_list|,
name|T
name|object
parameter_list|)
block|{
specifier|final
name|boolean
name|b
init|=
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|offer
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|b
argument_list|,
literal|"Failed to offer "
operator|+
name|object
operator|+
literal|" to queue, i="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|take (int i)
name|T
name|take
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
try|try
block|{
return|return
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|take
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
name|DFSUtil
operator|.
name|toInterruptedIOException
argument_list|(
literal|"take interrupted, i="
operator|+
name|i
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
DECL|method|poll (int i)
name|T
name|poll
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|poll
argument_list|()
return|;
block|}
DECL|method|peek (int i)
name|T
name|peek
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|queues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|peek
argument_list|()
return|;
block|}
block|}
comment|/** Coordinate the communication between the streamers. */
DECL|class|Coordinator
class|class
name|Coordinator
block|{
DECL|field|followingBlocks
specifier|private
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|LocatedBlock
argument_list|>
name|followingBlocks
decl_stmt|;
DECL|field|endBlocks
specifier|private
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|ExtendedBlock
argument_list|>
name|endBlocks
decl_stmt|;
DECL|field|newBlocks
specifier|private
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|LocatedBlock
argument_list|>
name|newBlocks
decl_stmt|;
DECL|field|updateBlocks
specifier|private
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|ExtendedBlock
argument_list|>
name|updateBlocks
decl_stmt|;
DECL|method|Coordinator (final DfsClientConf conf, final int numDataBlocks, final int numAllBlocks)
name|Coordinator
parameter_list|(
specifier|final
name|DfsClientConf
name|conf
parameter_list|,
specifier|final
name|int
name|numDataBlocks
parameter_list|,
specifier|final
name|int
name|numAllBlocks
parameter_list|)
block|{
name|followingBlocks
operator|=
operator|new
name|MultipleBlockingQueue
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|endBlocks
operator|=
operator|new
name|MultipleBlockingQueue
argument_list|<>
argument_list|(
name|numDataBlocks
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|newBlocks
operator|=
operator|new
name|MultipleBlockingQueue
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|updateBlocks
operator|=
operator|new
name|MultipleBlockingQueue
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getFollowingBlocks ()
name|MultipleBlockingQueue
argument_list|<
name|LocatedBlock
argument_list|>
name|getFollowingBlocks
parameter_list|()
block|{
return|return
name|followingBlocks
return|;
block|}
DECL|method|getNewBlocks ()
name|MultipleBlockingQueue
argument_list|<
name|LocatedBlock
argument_list|>
name|getNewBlocks
parameter_list|()
block|{
return|return
name|newBlocks
return|;
block|}
DECL|method|getUpdateBlocks ()
name|MultipleBlockingQueue
argument_list|<
name|ExtendedBlock
argument_list|>
name|getUpdateBlocks
parameter_list|()
block|{
return|return
name|updateBlocks
return|;
block|}
DECL|method|getStripedDataStreamer (int i)
name|StripedDataStreamer
name|getStripedDataStreamer
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|DFSStripedOutputStream
operator|.
name|this
operator|.
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|offerEndBlock (int i, ExtendedBlock block)
name|void
name|offerEndBlock
parameter_list|(
name|int
name|i
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
block|{
name|endBlocks
operator|.
name|offer
argument_list|(
name|i
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
DECL|method|takeEndBlock (int i)
name|ExtendedBlock
name|takeEndBlock
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
return|return
name|endBlocks
operator|.
name|take
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|hasAllEndBlocks ()
name|boolean
name|hasAllEndBlocks
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|endBlocks
operator|.
name|numQueues
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|endBlocks
operator|.
name|peek
argument_list|(
name|i
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|setBytesEndBlock (int i, long newBytes, ExtendedBlock block)
name|void
name|setBytesEndBlock
parameter_list|(
name|int
name|i
parameter_list|,
name|long
name|newBytes
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
block|{
name|ExtendedBlock
name|b
init|=
name|endBlocks
operator|.
name|peek
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
comment|// streamer just has failed, put end block and continue
name|b
operator|=
name|block
expr_stmt|;
name|offerEndBlock
argument_list|(
name|i
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|setNumBytes
argument_list|(
name|newBytes
argument_list|)
expr_stmt|;
block|}
comment|/** @return a block representing the entire block group. */
DECL|method|getBlockGroup ()
name|ExtendedBlock
name|getBlockGroup
parameter_list|()
block|{
specifier|final
name|StripedDataStreamer
name|s0
init|=
name|getStripedDataStreamer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ExtendedBlock
name|b0
init|=
name|s0
operator|.
name|getBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|b0
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|boolean
name|atBlockGroupBoundary
init|=
name|s0
operator|.
name|getBytesCurBlock
argument_list|()
operator|==
literal|0
operator|&&
name|b0
operator|.
name|getNumBytes
argument_list|()
operator|>
literal|0
decl_stmt|;
specifier|final
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|b0
argument_list|)
decl_stmt|;
name|long
name|numBytes
init|=
name|atBlockGroupBoundary
condition|?
name|b0
operator|.
name|getNumBytes
argument_list|()
else|:
name|s0
operator|.
name|getBytesCurBlock
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|si
init|=
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ExtendedBlock
name|bi
init|=
name|si
operator|.
name|getBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|bi
operator|!=
literal|null
operator|&&
name|bi
operator|.
name|getGenerationStamp
argument_list|()
operator|>
name|block
operator|.
name|getGenerationStamp
argument_list|()
condition|)
block|{
name|block
operator|.
name|setGenerationStamp
argument_list|(
name|bi
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|numDataBlocks
condition|)
block|{
name|numBytes
operator|+=
name|atBlockGroupBoundary
condition|?
name|bi
operator|.
name|getNumBytes
argument_list|()
else|:
name|si
operator|.
name|getBytesCurBlock
argument_list|()
expr_stmt|;
block|}
block|}
name|block
operator|.
name|setNumBytes
argument_list|(
name|numBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getBlockGroup: "
operator|+
name|block
operator|+
literal|", numBytes="
operator|+
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|block
return|;
block|}
block|}
comment|/** Buffers for writing the data and parity cells of a stripe. */
DECL|class|CellBuffers
class|class
name|CellBuffers
block|{
DECL|field|buffers
specifier|private
specifier|final
name|ByteBuffer
index|[]
name|buffers
decl_stmt|;
DECL|field|checksumArrays
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|checksumArrays
decl_stmt|;
DECL|method|CellBuffers (int numParityBlocks)
name|CellBuffers
parameter_list|(
name|int
name|numParityBlocks
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|cellSize
operator|%
name|bytesPerChecksum
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid values: "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
operator|+
literal|" (="
operator|+
name|bytesPerChecksum
operator|+
literal|") must divide cell size (="
operator|+
name|cellSize
operator|+
literal|")."
argument_list|)
throw|;
block|}
name|checksumArrays
operator|=
operator|new
name|byte
index|[
name|numParityBlocks
index|]
index|[]
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|getChecksumSize
argument_list|()
operator|*
operator|(
name|cellSize
operator|/
name|bytesPerChecksum
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|checksumArrays
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checksumArrays
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
block|}
name|buffers
operator|=
operator|new
name|ByteBuffer
index|[
name|numAllBlocks
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|byteArrayManager
operator|.
name|newByteArray
argument_list|(
name|cellSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBuffers ()
specifier|private
name|ByteBuffer
index|[]
name|getBuffers
parameter_list|()
block|{
return|return
name|buffers
return|;
block|}
DECL|method|getChecksumArray (int i)
name|byte
index|[]
name|getChecksumArray
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|checksumArrays
index|[
name|i
operator|-
name|numDataBlocks
index|]
return|;
block|}
DECL|method|addTo (int i, byte[] b, int off, int len)
specifier|private
name|int
name|addTo
parameter_list|(
name|int
name|i
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
specifier|final
name|ByteBuffer
name|buf
init|=
name|buffers
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|int
name|pos
init|=
name|buf
operator|.
name|position
argument_list|()
operator|+
name|len
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|pos
operator|<=
name|cellSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|pos
return|;
block|}
DECL|method|clear ()
specifier|private
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|numDataBlocks
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|buffers
index|[
name|i
index|]
operator|.
name|array
argument_list|()
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|release ()
specifier|private
name|void
name|release
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|byteArrayManager
operator|.
name|release
argument_list|(
name|buffers
index|[
name|i
index|]
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|flipDataBuffers ()
specifier|private
name|void
name|flipDataBuffers
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataBlocks
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|coordinator
specifier|private
specifier|final
name|Coordinator
name|coordinator
decl_stmt|;
DECL|field|cellBuffers
specifier|private
specifier|final
name|CellBuffers
name|cellBuffers
decl_stmt|;
DECL|field|encoder
specifier|private
specifier|final
name|RawErasureEncoder
name|encoder
decl_stmt|;
DECL|field|streamers
specifier|private
specifier|final
name|List
argument_list|<
name|StripedDataStreamer
argument_list|>
name|streamers
decl_stmt|;
DECL|field|currentPackets
specifier|private
specifier|final
name|DFSPacket
index|[]
name|currentPackets
decl_stmt|;
comment|// current Packet of each streamer
comment|/** Size of each striping cell, must be a multiple of bytesPerChecksum */
DECL|field|cellSize
specifier|private
specifier|final
name|int
name|cellSize
decl_stmt|;
DECL|field|numAllBlocks
specifier|private
specifier|final
name|int
name|numAllBlocks
decl_stmt|;
DECL|field|numDataBlocks
specifier|private
specifier|final
name|int
name|numDataBlocks
decl_stmt|;
annotation|@
name|Override
DECL|method|getBlock ()
name|ExtendedBlock
name|getBlock
parameter_list|()
block|{
return|return
name|coordinator
operator|.
name|getBlockGroup
argument_list|()
return|;
block|}
comment|/** Construct a new output stream for creating a file. */
DECL|method|DFSStripedOutputStream (DFSClient dfsClient, String src, HdfsFileStatus stat, EnumSet<CreateFlag> flag, Progressable progress, DataChecksum checksum, String[] favoredNodes)
name|DFSStripedOutputStream
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|String
name|src
parameter_list|,
name|HdfsFileStatus
name|stat
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|DataChecksum
name|checksum
parameter_list|,
name|String
index|[]
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dfsClient
argument_list|,
name|src
argument_list|,
name|stat
argument_list|,
name|flag
argument_list|,
name|progress
argument_list|,
name|checksum
argument_list|,
name|favoredNodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating DFSStripedOutputStream for "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|stat
operator|.
name|getErasureCodingPolicy
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numParityBlocks
init|=
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|cellSize
operator|=
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
expr_stmt|;
name|numDataBlocks
operator|=
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
expr_stmt|;
name|numAllBlocks
operator|=
name|numDataBlocks
operator|+
name|numParityBlocks
expr_stmt|;
name|encoder
operator|=
name|CodecUtil
operator|.
name|createRSRawEncoder
argument_list|(
name|dfsClient
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|numDataBlocks
argument_list|,
name|numParityBlocks
argument_list|)
expr_stmt|;
name|coordinator
operator|=
operator|new
name|Coordinator
argument_list|(
name|dfsClient
operator|.
name|getConf
argument_list|()
argument_list|,
name|numDataBlocks
argument_list|,
name|numAllBlocks
argument_list|)
expr_stmt|;
try|try
block|{
name|cellBuffers
operator|=
operator|new
name|CellBuffers
argument_list|(
name|numParityBlocks
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
name|DFSUtil
operator|.
name|toInterruptedIOException
argument_list|(
literal|"Failed to create cell buffers"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|StripedDataStreamer
argument_list|>
name|s
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numAllBlocks
argument_list|)
decl_stmt|;
for|for
control|(
name|short
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|StripedDataStreamer
name|streamer
init|=
operator|new
name|StripedDataStreamer
argument_list|(
name|stat
argument_list|,
name|dfsClient
argument_list|,
name|src
argument_list|,
name|progress
argument_list|,
name|checksum
argument_list|,
name|cachingStrategy
argument_list|,
name|byteArrayManager
argument_list|,
name|favoredNodes
argument_list|,
name|i
argument_list|,
name|coordinator
argument_list|)
decl_stmt|;
name|s
operator|.
name|add
argument_list|(
name|streamer
argument_list|)
expr_stmt|;
block|}
name|streamers
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|currentPackets
operator|=
operator|new
name|DFSPacket
index|[
name|streamers
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|setCurrentStreamer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getStripedDataStreamer (int i)
name|StripedDataStreamer
name|getStripedDataStreamer
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|streamers
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|getCurrentIndex ()
name|int
name|getCurrentIndex
parameter_list|()
block|{
return|return
name|getCurrentStreamer
argument_list|()
operator|.
name|getIndex
argument_list|()
return|;
block|}
DECL|method|getCurrentStreamer ()
specifier|private
specifier|synchronized
name|StripedDataStreamer
name|getCurrentStreamer
parameter_list|()
block|{
return|return
operator|(
name|StripedDataStreamer
operator|)
name|streamer
return|;
block|}
DECL|method|setCurrentStreamer (int newIdx)
specifier|private
specifier|synchronized
name|StripedDataStreamer
name|setCurrentStreamer
parameter_list|(
name|int
name|newIdx
parameter_list|)
block|{
comment|// backup currentPacket for current streamer
name|int
name|oldIdx
init|=
name|streamers
operator|.
name|indexOf
argument_list|(
name|streamer
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldIdx
operator|>=
literal|0
condition|)
block|{
name|currentPackets
index|[
name|oldIdx
index|]
operator|=
name|currentPacket
expr_stmt|;
block|}
name|streamer
operator|=
name|streamers
operator|.
name|get
argument_list|(
name|newIdx
argument_list|)
expr_stmt|;
name|currentPacket
operator|=
name|currentPackets
index|[
name|newIdx
index|]
expr_stmt|;
name|adjustChunkBoundary
argument_list|()
expr_stmt|;
return|return
name|getCurrentStreamer
argument_list|()
return|;
block|}
comment|/**    * Encode the buffers, i.e. compute parities.    *    * @param buffers data buffers + parity buffers    */
DECL|method|encode (RawErasureEncoder encoder, int numData, ByteBuffer[] buffers)
specifier|private
specifier|static
name|void
name|encode
parameter_list|(
name|RawErasureEncoder
name|encoder
parameter_list|,
name|int
name|numData
parameter_list|,
name|ByteBuffer
index|[]
name|buffers
parameter_list|)
block|{
specifier|final
name|ByteBuffer
index|[]
name|dataBuffers
init|=
operator|new
name|ByteBuffer
index|[
name|numData
index|]
decl_stmt|;
specifier|final
name|ByteBuffer
index|[]
name|parityBuffers
init|=
operator|new
name|ByteBuffer
index|[
name|buffers
operator|.
name|length
operator|-
name|numData
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffers
argument_list|,
literal|0
argument_list|,
name|dataBuffers
argument_list|,
literal|0
argument_list|,
name|dataBuffers
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffers
argument_list|,
name|numData
argument_list|,
name|parityBuffers
argument_list|,
literal|0
argument_list|,
name|parityBuffers
operator|.
name|length
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|dataBuffers
argument_list|,
name|parityBuffers
argument_list|)
expr_stmt|;
block|}
DECL|method|checkStreamers (boolean setExternalError)
specifier|private
name|void
name|checkStreamers
parameter_list|(
name|boolean
name|setExternalError
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StripedDataStreamer
name|s
range|:
name|streamers
control|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|isFailed
argument_list|()
condition|)
block|{
if|if
condition|(
name|setExternalError
operator|&&
name|s
operator|.
name|getBlock
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|getErrorState
argument_list|()
operator|.
name|initExternalError
argument_list|()
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"checkStreamers: "
operator|+
name|streamers
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"count="
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|<
name|numDataBlocks
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed: the number of remaining blocks = "
operator|+
name|count
operator|+
literal|"< the number of data blocks = "
operator|+
name|numDataBlocks
argument_list|)
throw|;
block|}
block|}
DECL|method|handleStreamerFailure (String err, Exception e)
specifier|private
name|void
name|handleStreamerFailure
parameter_list|(
name|String
name|err
parameter_list|,
name|Exception
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|handleStreamerFailure
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|handleStreamerFailure (String err, Exception e, boolean setExternalError)
specifier|private
name|void
name|handleStreamerFailure
parameter_list|(
name|String
name|err
parameter_list|,
name|Exception
name|e
parameter_list|,
name|boolean
name|setExternalError
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed: "
operator|+
name|err
operator|+
literal|", "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|getCurrentStreamer
argument_list|()
operator|.
name|setFailed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkStreamers
argument_list|(
name|setExternalError
argument_list|)
expr_stmt|;
name|currentPacket
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeChunk (byte[] bytes, int offset, int len, byte[] checksum, int ckoff, int cklen)
specifier|protected
specifier|synchronized
name|void
name|writeChunk
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
index|[]
name|checksum
parameter_list|,
name|int
name|ckoff
parameter_list|,
name|int
name|cklen
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|index
init|=
name|getCurrentIndex
argument_list|()
decl_stmt|;
specifier|final
name|StripedDataStreamer
name|current
init|=
name|getCurrentStreamer
argument_list|()
decl_stmt|;
specifier|final
name|int
name|pos
init|=
name|cellBuffers
operator|.
name|addTo
argument_list|(
name|index
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|cellFull
init|=
name|pos
operator|==
name|cellSize
decl_stmt|;
specifier|final
name|long
name|oldBytes
init|=
name|current
operator|.
name|getBytesCurBlock
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|current
operator|.
name|isFailed
argument_list|()
condition|)
block|{
try|try
block|{
name|super
operator|.
name|writeChunk
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|checksum
argument_list|,
name|ckoff
argument_list|,
name|cklen
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleStreamerFailure
argument_list|(
literal|"offset="
operator|+
name|offset
operator|+
literal|", length="
operator|+
name|len
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
operator|.
name|isFailed
argument_list|()
condition|)
block|{
specifier|final
name|long
name|newBytes
init|=
name|oldBytes
operator|+
name|len
decl_stmt|;
name|coordinator
operator|.
name|setBytesEndBlock
argument_list|(
name|index
argument_list|,
name|newBytes
argument_list|,
name|current
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|.
name|setBytesCurBlock
argument_list|(
name|newBytes
argument_list|)
expr_stmt|;
block|}
comment|// Two extra steps are needed when a striping cell is full:
comment|// 1. Forward the current index pointer
comment|// 2. Generate parity packets if a full stripe of data cells are present
if|if
condition|(
name|cellFull
condition|)
block|{
name|int
name|next
init|=
name|index
operator|+
literal|1
decl_stmt|;
comment|//When all data cells in a stripe are ready, we need to encode
comment|//them and generate some parity cells. These cells will be
comment|//converted to packets and put to their DataStreamer's queue.
if|if
condition|(
name|next
operator|==
name|numDataBlocks
condition|)
block|{
name|cellBuffers
operator|.
name|flipDataBuffers
argument_list|()
expr_stmt|;
name|writeParityCells
argument_list|()
expr_stmt|;
name|next
operator|=
literal|0
expr_stmt|;
block|}
name|setCurrentStreamer
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stripeDataSize ()
specifier|private
name|int
name|stripeDataSize
parameter_list|()
block|{
return|return
name|numDataBlocks
operator|*
name|cellSize
return|;
block|}
annotation|@
name|Override
DECL|method|hflush ()
specifier|public
name|void
name|hflush
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|hsync ()
specifier|public
name|void
name|hsync
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|protected
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
for|for
control|(
name|StripedDataStreamer
name|streamer
range|:
name|streamers
control|)
block|{
name|streamer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|abort ()
specifier|synchronized
name|void
name|abort
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|StripedDataStreamer
name|streamer
range|:
name|streamers
control|)
block|{
name|streamer
operator|.
name|getLastException
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Lease timeout of "
operator|+
operator|(
name|dfsClient
operator|.
name|getConf
argument_list|()
operator|.
name|getHdfsTimeout
argument_list|()
operator|/
literal|1000
operator|)
operator|+
literal|" seconds expired."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeThreads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfsClient
operator|.
name|endFileLease
argument_list|(
name|fileId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isClosed ()
name|boolean
name|isClosed
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|StripedDataStreamer
name|s
range|:
name|streamers
control|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|streamerClosed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|closeThreads (boolean force)
specifier|protected
name|void
name|closeThreads
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MultipleIOException
operator|.
name|Builder
name|b
init|=
operator|new
name|MultipleIOException
operator|.
name|Builder
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|StripedDataStreamer
name|streamer
range|:
name|streamers
control|)
block|{
try|try
block|{
name|streamer
operator|.
name|close
argument_list|(
name|force
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|join
argument_list|()
expr_stmt|;
name|streamer
operator|.
name|closeSocket
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|handleStreamerFailure
argument_list|(
literal|"force="
operator|+
name|force
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|b
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|streamer
operator|.
name|setSocketToNull
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|setClosed
argument_list|()
expr_stmt|;
block|}
specifier|final
name|IOException
name|ioe
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
comment|/**    * Simply add bytesCurBlock together. Note that this result is not accurately    * the size of the block group.    */
DECL|method|getCurrentSumBytes ()
specifier|private
name|long
name|getCurrentSumBytes
parameter_list|()
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDataBlocks
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|streamers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBytesCurBlock
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
DECL|method|generateParityCellsForLastStripe ()
specifier|private
name|boolean
name|generateParityCellsForLastStripe
parameter_list|()
block|{
specifier|final
name|long
name|currentBlockGroupBytes
init|=
name|getCurrentSumBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentBlockGroupBytes
operator|%
name|stripeDataSize
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|firstCellSize
init|=
call|(
name|int
call|)
argument_list|(
name|getStripedDataStreamer
argument_list|(
literal|0
argument_list|)
operator|.
name|getBytesCurBlock
argument_list|()
operator|%
name|cellSize
argument_list|)
decl_stmt|;
specifier|final
name|int
name|parityCellSize
init|=
name|firstCellSize
operator|>
literal|0
operator|&&
name|firstCellSize
operator|<
name|cellSize
condition|?
name|firstCellSize
else|:
name|cellSize
decl_stmt|;
specifier|final
name|ByteBuffer
index|[]
name|buffers
init|=
name|cellBuffers
operator|.
name|getBuffers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
comment|// Pad zero bytes to make all cells exactly the size of parityCellSize
comment|// If internal block is smaller than parity block, pad zero bytes.
comment|// Also pad zero bytes to all parity cells
specifier|final
name|int
name|position
init|=
name|buffers
index|[
name|i
index|]
operator|.
name|position
argument_list|()
decl_stmt|;
assert|assert
name|position
operator|<=
name|parityCellSize
operator|:
literal|"If an internal block is smaller"
operator|+
literal|" than parity block, then its last cell should be small than last"
operator|+
literal|" parity cell"
assert|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parityCellSize
operator|-
name|position
condition|;
name|j
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
name|buffers
index|[
name|i
index|]
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|writeParityCells ()
name|void
name|writeParityCells
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ByteBuffer
index|[]
name|buffers
init|=
name|cellBuffers
operator|.
name|getBuffers
argument_list|()
decl_stmt|;
comment|//encode the data cells
name|encode
argument_list|(
name|encoder
argument_list|,
name|numDataBlocks
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numDataBlocks
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|writeParity
argument_list|(
name|i
argument_list|,
name|buffers
index|[
name|i
index|]
argument_list|,
name|cellBuffers
operator|.
name|getChecksumArray
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cellBuffers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|writeParity (int index, ByteBuffer buffer, byte[] checksumBuf )
name|void
name|writeParity
parameter_list|(
name|int
name|index
parameter_list|,
name|ByteBuffer
name|buffer
parameter_list|,
name|byte
index|[]
name|checksumBuf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StripedDataStreamer
name|current
init|=
name|setCurrentStreamer
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|buffer
operator|.
name|limit
argument_list|()
decl_stmt|;
specifier|final
name|long
name|oldBytes
init|=
name|current
operator|.
name|getBytesCurBlock
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|current
operator|.
name|isFailed
argument_list|()
condition|)
block|{
try|try
block|{
name|DataChecksum
name|sum
init|=
name|getDataChecksum
argument_list|()
decl_stmt|;
name|sum
operator|.
name|calculateChunkedSums
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
name|checksumBuf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|+=
name|sum
operator|.
name|getBytesPerChecksum
argument_list|()
control|)
block|{
name|int
name|chunkLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|sum
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|,
name|len
operator|-
name|i
argument_list|)
decl_stmt|;
name|int
name|ckOffset
init|=
name|i
operator|/
name|sum
operator|.
name|getBytesPerChecksum
argument_list|()
operator|*
name|getChecksumSize
argument_list|()
decl_stmt|;
name|super
operator|.
name|writeChunk
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|i
argument_list|,
name|chunkLen
argument_list|,
name|checksumBuf
argument_list|,
name|ckOffset
argument_list|,
name|getChecksumSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleStreamerFailure
argument_list|(
literal|"oldBytes="
operator|+
name|oldBytes
operator|+
literal|", len="
operator|+
name|len
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|current
operator|.
name|isFailed
argument_list|()
condition|)
block|{
specifier|final
name|long
name|newBytes
init|=
name|oldBytes
operator|+
name|len
decl_stmt|;
name|current
operator|.
name|setBytesCurBlock
argument_list|(
name|newBytes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setClosed ()
name|void
name|setClosed
parameter_list|()
block|{
name|super
operator|.
name|setClosed
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
name|streamers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|cellBuffers
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeImpl ()
specifier|protected
specifier|synchronized
name|void
name|closeImpl
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
specifier|final
name|MultipleIOException
operator|.
name|Builder
name|b
init|=
operator|new
name|MultipleIOException
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|streamers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|si
init|=
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|si
operator|.
name|getLastException
argument_list|()
operator|.
name|check
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|b
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|IOException
name|ioe
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ioe
throw|;
block|}
return|return;
block|}
try|try
block|{
comment|// flush from all upper layers
try|try
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleStreamerFailure
argument_list|(
literal|"flushBuffer "
operator|+
name|getCurrentStreamer
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// if the last stripe is incomplete, generate and write parity cells
if|if
condition|(
name|generateParityCellsForLastStripe
argument_list|()
condition|)
block|{
name|writeParityCells
argument_list|()
expr_stmt|;
block|}
name|enqueueAllCurrentPackets
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAllBlocks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|s
init|=
name|setCurrentStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isFailed
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|s
operator|.
name|getBytesCurBlock
argument_list|()
operator|>
literal|0
condition|)
block|{
name|setCurrentPacketToEmpty
argument_list|()
expr_stmt|;
block|}
comment|// flush all data to Datanode
name|flushInternal
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleStreamerFailure
argument_list|(
literal|"flushInternal "
operator|+
name|s
argument_list|,
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|closeThreads
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|ExtendedBlock
name|lastBlock
init|=
name|coordinator
operator|.
name|getBlockGroup
argument_list|()
decl_stmt|;
name|TraceScope
name|scope
init|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"completeFile"
argument_list|,
name|Sampler
operator|.
name|NEVER
argument_list|)
decl_stmt|;
try|try
block|{
name|completeFile
argument_list|(
name|lastBlock
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dfsClient
operator|.
name|endFileLease
argument_list|(
name|fileId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedChannelException
name|ignored
parameter_list|)
block|{     }
finally|finally
block|{
name|setClosed
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|enqueueAllCurrentPackets ()
specifier|private
name|void
name|enqueueAllCurrentPackets
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|idx
init|=
name|streamers
operator|.
name|indexOf
argument_list|(
name|getCurrentStreamer
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|streamers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StripedDataStreamer
name|si
init|=
name|setCurrentStreamer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|si
operator|.
name|isFailed
argument_list|()
operator|&&
name|currentPacket
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|enqueueCurrentPacket
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleStreamerFailure
argument_list|(
literal|"enqueueAllCurrentPackets, i="
operator|+
name|i
argument_list|,
name|e
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setCurrentStreamer
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

