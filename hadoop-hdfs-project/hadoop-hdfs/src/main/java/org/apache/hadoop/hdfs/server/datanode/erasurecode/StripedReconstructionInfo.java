begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_comment
comment|/**  * Stores striped block info that can be used for block reconstruction.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StripedReconstructionInfo
specifier|public
class|class
name|StripedReconstructionInfo
block|{
DECL|field|blockGroup
specifier|private
specifier|final
name|ExtendedBlock
name|blockGroup
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
comment|// source info
DECL|field|liveIndices
specifier|private
specifier|final
name|byte
index|[]
name|liveIndices
decl_stmt|;
DECL|field|sources
specifier|private
specifier|final
name|DatanodeInfo
index|[]
name|sources
decl_stmt|;
comment|// target info
DECL|field|targetIndices
specifier|private
specifier|final
name|byte
index|[]
name|targetIndices
decl_stmt|;
DECL|field|targets
specifier|private
specifier|final
name|DatanodeInfo
index|[]
name|targets
decl_stmt|;
DECL|field|targetStorageTypes
specifier|private
specifier|final
name|StorageType
index|[]
name|targetStorageTypes
decl_stmt|;
DECL|method|StripedReconstructionInfo (ExtendedBlock blockGroup, ErasureCodingPolicy ecPolicy, byte[] liveIndices, DatanodeInfo[] sources, byte[] targetIndices)
specifier|public
name|StripedReconstructionInfo
parameter_list|(
name|ExtendedBlock
name|blockGroup
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|,
name|byte
index|[]
name|liveIndices
parameter_list|,
name|DatanodeInfo
index|[]
name|sources
parameter_list|,
name|byte
index|[]
name|targetIndices
parameter_list|)
block|{
name|this
argument_list|(
name|blockGroup
argument_list|,
name|ecPolicy
argument_list|,
name|liveIndices
argument_list|,
name|sources
argument_list|,
name|targetIndices
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|StripedReconstructionInfo (ExtendedBlock blockGroup, ErasureCodingPolicy ecPolicy, byte[] liveIndices, DatanodeInfo[] sources, DatanodeInfo[] targets, StorageType[] targetStorageTypes)
name|StripedReconstructionInfo
parameter_list|(
name|ExtendedBlock
name|blockGroup
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|,
name|byte
index|[]
name|liveIndices
parameter_list|,
name|DatanodeInfo
index|[]
name|sources
parameter_list|,
name|DatanodeInfo
index|[]
name|targets
parameter_list|,
name|StorageType
index|[]
name|targetStorageTypes
parameter_list|)
block|{
name|this
argument_list|(
name|blockGroup
argument_list|,
name|ecPolicy
argument_list|,
name|liveIndices
argument_list|,
name|sources
argument_list|,
literal|null
argument_list|,
name|targets
argument_list|,
name|targetStorageTypes
argument_list|)
expr_stmt|;
block|}
DECL|method|StripedReconstructionInfo (ExtendedBlock blockGroup, ErasureCodingPolicy ecPolicy, byte[] liveIndices, DatanodeInfo[] sources, byte[] targetIndices, DatanodeInfo[] targets, StorageType[] targetStorageTypes)
specifier|private
name|StripedReconstructionInfo
parameter_list|(
name|ExtendedBlock
name|blockGroup
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|,
name|byte
index|[]
name|liveIndices
parameter_list|,
name|DatanodeInfo
index|[]
name|sources
parameter_list|,
name|byte
index|[]
name|targetIndices
parameter_list|,
name|DatanodeInfo
index|[]
name|targets
parameter_list|,
name|StorageType
index|[]
name|targetStorageTypes
parameter_list|)
block|{
name|this
operator|.
name|blockGroup
operator|=
name|blockGroup
expr_stmt|;
name|this
operator|.
name|ecPolicy
operator|=
name|ecPolicy
expr_stmt|;
name|this
operator|.
name|liveIndices
operator|=
name|liveIndices
expr_stmt|;
name|this
operator|.
name|sources
operator|=
name|sources
expr_stmt|;
name|this
operator|.
name|targetIndices
operator|=
name|targetIndices
expr_stmt|;
name|this
operator|.
name|targets
operator|=
name|targets
expr_stmt|;
name|this
operator|.
name|targetStorageTypes
operator|=
name|targetStorageTypes
expr_stmt|;
block|}
DECL|method|getBlockGroup ()
name|ExtendedBlock
name|getBlockGroup
parameter_list|()
block|{
return|return
name|blockGroup
return|;
block|}
DECL|method|getEcPolicy ()
name|ErasureCodingPolicy
name|getEcPolicy
parameter_list|()
block|{
return|return
name|ecPolicy
return|;
block|}
DECL|method|getLiveIndices ()
name|byte
index|[]
name|getLiveIndices
parameter_list|()
block|{
return|return
name|liveIndices
return|;
block|}
DECL|method|getSources ()
name|DatanodeInfo
index|[]
name|getSources
parameter_list|()
block|{
return|return
name|sources
return|;
block|}
DECL|method|getTargetIndices ()
name|byte
index|[]
name|getTargetIndices
parameter_list|()
block|{
return|return
name|targetIndices
return|;
block|}
DECL|method|getTargets ()
name|DatanodeInfo
index|[]
name|getTargets
parameter_list|()
block|{
return|return
name|targets
return|;
block|}
DECL|method|getTargetStorageTypes ()
name|StorageType
index|[]
name|getTargetStorageTypes
parameter_list|()
block|{
return|return
name|targetStorageTypes
return|;
block|}
block|}
end_class

end_unit

