begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|KeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|Versioning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|request
operator|.
name|OzoneQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|BucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|VolumeOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * This class contains methods that define the translation between the Ozone  * domain model and the storage container domain model.  */
end_comment

begin_class
DECL|class|OzoneContainerTranslation
specifier|final
class|class
name|OzoneContainerTranslation
block|{
DECL|field|ACLS
specifier|private
specifier|static
specifier|final
name|String
name|ACLS
init|=
literal|"ACLS"
decl_stmt|;
DECL|field|BUCKET
specifier|private
specifier|static
specifier|final
name|String
name|BUCKET
init|=
literal|"BUCKET"
decl_stmt|;
DECL|field|BUCKET_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BUCKET_NAME
init|=
literal|"BUCKET_NAME"
decl_stmt|;
DECL|field|CREATED_BY
specifier|private
specifier|static
specifier|final
name|String
name|CREATED_BY
init|=
literal|"CREATED_BY"
decl_stmt|;
DECL|field|CREATED_ON
specifier|private
specifier|static
specifier|final
name|String
name|CREATED_ON
init|=
literal|"CREATED_ON"
decl_stmt|;
DECL|field|KEY
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"KEY"
decl_stmt|;
DECL|field|OWNER
specifier|private
specifier|static
specifier|final
name|String
name|OWNER
init|=
literal|"OWNER"
decl_stmt|;
DECL|field|QUOTA
specifier|private
specifier|static
specifier|final
name|String
name|QUOTA
init|=
literal|"QUOTA"
decl_stmt|;
DECL|field|STORAGE_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|STORAGE_TYPE
init|=
literal|"STORAGE_TYPE"
decl_stmt|;
DECL|field|TYPE
specifier|private
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"TYPE"
decl_stmt|;
DECL|field|VERSIONING
specifier|private
specifier|static
specifier|final
name|String
name|VERSIONING
init|=
literal|"VERSIONING"
decl_stmt|;
DECL|field|VOLUME
specifier|private
specifier|static
specifier|final
name|String
name|VOLUME
init|=
literal|"VOLUME"
decl_stmt|;
DECL|field|VOLUME_NAME
specifier|private
specifier|static
specifier|final
name|String
name|VOLUME_NAME
init|=
literal|"VOLUME_NAME"
decl_stmt|;
comment|/**    * Creates key data intended for reading a container key.    *    * @param containerName container name    * @param containerKey container key    * @return KeyData intended for reading the container key    */
DECL|method|containerKeyDataForRead (String containerName, String containerKey)
specifier|public
specifier|static
name|KeyData
name|containerKeyDataForRead
parameter_list|(
name|String
name|containerName
parameter_list|,
name|String
name|containerKey
parameter_list|)
block|{
return|return
name|KeyData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|setName
argument_list|(
name|containerKey
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Translates a bucket to its container representation.    *    * @param containerName container name    * @param containerKey container key    * @param bucket the bucket to translate    * @return KeyData representation of bucket    */
DECL|method|fromBucketToContainerKeyData ( String containerName, String containerKey, BucketInfo bucket)
specifier|public
specifier|static
name|KeyData
name|fromBucketToContainerKeyData
parameter_list|(
name|String
name|containerName
parameter_list|,
name|String
name|containerKey
parameter_list|,
name|BucketInfo
name|bucket
parameter_list|)
block|{
name|KeyData
operator|.
name|Builder
name|containerKeyData
init|=
name|KeyData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|setName
argument_list|(
name|containerKey
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|TYPE
argument_list|,
name|BUCKET
argument_list|)
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|VOLUME_NAME
argument_list|,
name|bucket
operator|.
name|getVolumeName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|BUCKET_NAME
argument_list|,
name|bucket
operator|.
name|getBucketName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucket
operator|.
name|getAcls
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|containerKeyData
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|ACLS
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|','
argument_list|,
name|bucket
operator|.
name|getAcls
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bucket
operator|.
name|getVersioning
argument_list|()
operator|!=
literal|null
operator|&&
name|bucket
operator|.
name|getVersioning
argument_list|()
operator|!=
name|Versioning
operator|.
name|NOT_DEFINED
condition|)
block|{
name|containerKeyData
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|VERSIONING
argument_list|,
name|bucket
operator|.
name|getVersioning
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bucket
operator|.
name|getStorageType
argument_list|()
operator|!=
name|StorageType
operator|.
name|RAM_DISK
condition|)
block|{
name|containerKeyData
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|STORAGE_TYPE
argument_list|,
name|bucket
operator|.
name|getStorageType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|containerKeyData
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Translates a bucket from its container representation.    *    * @param metadata container metadata representing the bucket    * @return bucket translated from container representation    */
DECL|method|fromContainerKeyValueListToBucket ( List<KeyValue> metadata)
specifier|public
specifier|static
name|BucketInfo
name|fromContainerKeyValueListToBucket
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|metadata
parameter_list|)
block|{
name|BucketInfo
name|bucket
init|=
operator|new
name|BucketInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|keyValue
range|:
name|metadata
control|)
block|{
switch|switch
condition|(
name|keyValue
operator|.
name|getKey
argument_list|()
condition|)
block|{
case|case
name|VOLUME_NAME
case|:
name|bucket
operator|.
name|setVolumeName
argument_list|(
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BUCKET_NAME
case|:
name|bucket
operator|.
name|setBucketName
argument_list|(
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|VERSIONING
case|:
name|bucket
operator|.
name|setVersioning
argument_list|(
name|Enum
operator|.
name|valueOf
argument_list|(
name|Versioning
operator|.
name|class
argument_list|,
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|STORAGE_TYPE
case|:
name|bucket
operator|.
name|setStorageType
argument_list|(
name|Enum
operator|.
name|valueOf
argument_list|(
name|StorageType
operator|.
name|class
argument_list|,
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|bucket
return|;
block|}
comment|/**    * Translates a volume from its container representation.    *    * @param metadata container metadata representing the volume    * @return volume translated from container representation    */
DECL|method|fromContainerKeyValueListToVolume ( List<KeyValue> metadata)
specifier|public
specifier|static
name|VolumeInfo
name|fromContainerKeyValueListToVolume
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|metadata
parameter_list|)
block|{
name|VolumeInfo
name|volume
init|=
operator|new
name|VolumeInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyValue
name|keyValue
range|:
name|metadata
control|)
block|{
switch|switch
condition|(
name|keyValue
operator|.
name|getKey
argument_list|()
condition|)
block|{
case|case
name|VOLUME_NAME
case|:
name|volume
operator|.
name|setVolumeName
argument_list|(
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATED_BY
case|:
name|volume
operator|.
name|setCreatedBy
argument_list|(
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATED_ON
case|:
name|volume
operator|.
name|setCreatedOn
argument_list|(
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|OWNER
case|:
name|volume
operator|.
name|setOwner
argument_list|(
operator|new
name|VolumeOwner
argument_list|(
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTA
case|:
name|volume
operator|.
name|setQuota
argument_list|(
name|OzoneQuota
operator|.
name|parseQuota
argument_list|(
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|volume
return|;
block|}
comment|/**    * Translates a key to its container representation.    *    * @param containerName container name    * @param containerKey container key    * @param keyInfo key information received from call    * @return KeyData intended for reading the container key    */
DECL|method|fromKeyToContainerKeyData (String containerName, String containerKey, KeyInfo key)
specifier|public
specifier|static
name|KeyData
name|fromKeyToContainerKeyData
parameter_list|(
name|String
name|containerName
parameter_list|,
name|String
name|containerKey
parameter_list|,
name|KeyInfo
name|key
parameter_list|)
block|{
return|return
name|KeyData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|setName
argument_list|(
name|containerKey
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|TYPE
argument_list|,
name|KEY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Translates a key to its container representation.  The return value is a    * builder that can be manipulated further before building the result.    *    * @param containerName container name    * @param containerKey container key    * @param keyInfo key information received from call    * @return KeyData builder    */
DECL|method|fromKeyToContainerKeyDataBuilder ( String containerName, String containerKey, KeyInfo key)
specifier|public
specifier|static
name|KeyData
operator|.
name|Builder
name|fromKeyToContainerKeyDataBuilder
parameter_list|(
name|String
name|containerName
parameter_list|,
name|String
name|containerKey
parameter_list|,
name|KeyInfo
name|key
parameter_list|)
block|{
return|return
name|KeyData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|setName
argument_list|(
name|containerKey
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|TYPE
argument_list|,
name|KEY
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Translates a volume to its container representation.    *    * @param containerName container name    * @param containerKey container key    * @param volume the volume to translate    * @return KeyData representation of volume    */
DECL|method|fromVolumeToContainerKeyData ( String containerName, String containerKey, VolumeInfo volume)
specifier|public
specifier|static
name|KeyData
name|fromVolumeToContainerKeyData
parameter_list|(
name|String
name|containerName
parameter_list|,
name|String
name|containerKey
parameter_list|,
name|VolumeInfo
name|volume
parameter_list|)
block|{
name|KeyData
operator|.
name|Builder
name|containerKeyData
init|=
name|KeyData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
operator|.
name|setName
argument_list|(
name|containerKey
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|TYPE
argument_list|,
name|VOLUME
argument_list|)
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|VOLUME_NAME
argument_list|,
name|volume
operator|.
name|getVolumeName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|CREATED_ON
argument_list|,
name|volume
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|volume
operator|.
name|getQuota
argument_list|()
operator|!=
literal|null
operator|&&
name|volume
operator|.
name|getQuota
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
operator|!=
operator|-
literal|1L
condition|)
block|{
name|containerKeyData
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|QUOTA
argument_list|,
name|OzoneQuota
operator|.
name|formatQuota
argument_list|(
name|volume
operator|.
name|getQuota
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|volume
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
operator|&&
name|volume
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|volume
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|containerKeyData
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|OWNER
argument_list|,
name|volume
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|volume
operator|.
name|getCreatedBy
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|volume
operator|.
name|getCreatedBy
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|containerKeyData
operator|.
name|addMetadata
argument_list|(
name|newKeyValue
argument_list|(
name|CREATED_BY
argument_list|,
name|volume
operator|.
name|getCreatedBy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|containerKeyData
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Translates a key-value pair to its container representation.    *    * @param key the key    * @param value the value    * @return container representation of key-value pair    */
DECL|method|newKeyValue (String key, Object value)
specifier|private
specifier|static
name|KeyValue
name|newKeyValue
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|KeyValue
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * There is no need to instantiate this class.    */
DECL|method|OzoneContainerTranslation ()
specifier|private
name|OzoneContainerTranslation
parameter_list|()
block|{   }
block|}
end_class

end_unit

