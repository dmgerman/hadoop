begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.jscsiHelper.cache.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|ContainerCacheFlusher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|LogicalBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|CBlockTargetMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|LevelDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_DISK_CACHE_PATH_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_TRACE_IO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_TRACE_IO_DEFAULT
import|;
end_import

begin_comment
comment|/**  * A local cache used by the CBlock ISCSI server. This class is enabled or  * disabled via config settings.  */
end_comment

begin_class
DECL|class|CBlockLocalCache
specifier|public
class|class
name|CBlockLocalCache
implements|implements
name|CacheModule
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CBlockLocalCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TRACER
specifier|private
specifier|static
specifier|final
name|Logger
name|TRACER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"TraceIO"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|/**    * LevelDB cache file.    */
DECL|field|cacheDB
specifier|private
specifier|final
name|LevelDBStore
name|cacheDB
decl_stmt|;
comment|/**    * AsyncBlock writer updates the cacheDB and writes the blocks async to    * remote containers.    */
DECL|field|blockWriter
specifier|private
specifier|final
name|AsyncBlockWriter
name|blockWriter
decl_stmt|;
comment|/**    * Sync block reader tries to read from the cache and if we get a cache    * miss we will fetch the block from remote location. It will asynchronously    * update the cacheDB.    */
DECL|field|blockReader
specifier|private
specifier|final
name|SyncBlockReader
name|blockReader
decl_stmt|;
DECL|field|userName
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
DECL|field|volumeName
specifier|private
specifier|final
name|String
name|volumeName
decl_stmt|;
comment|/**    * From a block ID we are able to get the pipeline by indexing this array.    */
DECL|field|containerList
specifier|private
specifier|final
name|Pipeline
index|[]
name|containerList
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|int
name|blockSize
decl_stmt|;
DECL|field|clientManager
specifier|private
name|XceiverClientManager
name|clientManager
decl_stmt|;
comment|/**    * If this flag is enabled then cache traces all I/O, all reads and writes    * are visible in the log with sha of the block written. Makes the system    * slower use it only for debugging or creating trace simulations.    */
DECL|field|traceEnabled
specifier|private
specifier|final
name|boolean
name|traceEnabled
decl_stmt|;
DECL|field|enableShortCircuitIO
specifier|private
specifier|final
name|boolean
name|enableShortCircuitIO
decl_stmt|;
DECL|field|volumeSize
specifier|private
specifier|final
name|long
name|volumeSize
decl_stmt|;
DECL|field|currentCacheSize
specifier|private
name|long
name|currentCacheSize
decl_stmt|;
DECL|field|dbPath
specifier|private
name|File
name|dbPath
decl_stmt|;
DECL|field|flusher
specifier|private
specifier|final
name|ContainerCacheFlusher
name|flusher
decl_stmt|;
DECL|field|cblockTargetMetrics
specifier|private
name|CBlockTargetMetrics
name|cblockTargetMetrics
decl_stmt|;
comment|/**    * Get Db Path.    * @return the file instance of the db.    */
DECL|method|getDbPath ()
specifier|public
name|File
name|getDbPath
parameter_list|()
block|{
return|return
name|dbPath
return|;
block|}
comment|/**    * Constructor for CBlockLocalCache invoked via the builder.    *    * @param conf -  Configuration    * @param volumeName - volume Name    * @param userName - user name    * @param containerPipelines - Pipelines that make up this contianer    * @param blockSize - blockSize    * @param flusher - flusher to flush data to container    * @throws IOException    */
DECL|method|CBlockLocalCache ( Configuration conf, String volumeName, String userName, List<Pipeline> containerPipelines, int blockSize, long volumeSize, ContainerCacheFlusher flusher)
name|CBlockLocalCache
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|volumeName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|Pipeline
argument_list|>
name|containerPipelines
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|long
name|volumeSize
parameter_list|,
name|ContainerCacheFlusher
name|flusher
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|volumeName
operator|=
name|volumeName
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|flusher
operator|=
name|flusher
expr_stmt|;
name|this
operator|.
name|traceEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CBLOCK_TRACE_IO
argument_list|,
name|DFS_CBLOCK_TRACE_IO_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|enableShortCircuitIO
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO
argument_list|,
name|DFS_CBLOCK_ENABLE_SHORT_CIRCUIT_IO_DEFAULT
argument_list|)
expr_stmt|;
name|dbPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
argument_list|,
name|DFS_CBLOCK_DISK_CACHE_PATH_DEFAULT
argument_list|)
argument_list|,
name|userName
argument_list|,
name|volumeName
argument_list|)
operator|.
name|toFile
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dbPath
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dbPath
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create the cache paths. Path: {}"
argument_list|,
name|dbPath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to create paths. Path: "
operator|+
name|dbPath
argument_list|)
throw|;
block|}
name|cacheDB
operator|=
name|flusher
operator|.
name|getCacheDB
argument_list|(
name|dbPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerList
operator|=
name|containerPipelines
operator|.
name|toArray
argument_list|(
operator|new
name|Pipeline
index|[
name|containerPipelines
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|volumeSize
operator|=
name|volumeSize
expr_stmt|;
name|blockWriter
operator|=
operator|new
name|AsyncBlockWriter
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|blockReader
operator|=
operator|new
name|SyncBlockReader
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|traceEnabled
condition|)
block|{
name|getTracer
argument_list|()
operator|.
name|info
argument_list|(
literal|"Task=StartingCache"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setClientManager (XceiverClientManager manager)
specifier|private
name|void
name|setClientManager
parameter_list|(
name|XceiverClientManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|clientManager
operator|=
name|manager
expr_stmt|;
block|}
DECL|method|setCblockTargetMetrics (CBlockTargetMetrics targetMetrics)
specifier|private
name|void
name|setCblockTargetMetrics
parameter_list|(
name|CBlockTargetMetrics
name|targetMetrics
parameter_list|)
block|{
name|this
operator|.
name|cblockTargetMetrics
operator|=
name|targetMetrics
expr_stmt|;
block|}
comment|/**    * Returns new builder class that builds a CBlockLocalCache.    *    * @return Builder    */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|processDirtyMessage (String fileName)
specifier|public
name|void
name|processDirtyMessage
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|flusher
operator|.
name|processDirtyBlocks
argument_list|(
name|dbPath
operator|.
name|toString
argument_list|()
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get usable disk space.    *    * @param dbPathString - Path to db    * @return long bytes remaining.    */
DECL|method|getRemainingDiskSpace (String dbPathString)
specifier|private
specifier|static
name|long
name|getRemainingDiskSpace
parameter_list|(
name|String
name|dbPathString
parameter_list|)
block|{
try|try
block|{
name|URI
name|fileUri
init|=
operator|new
name|URI
argument_list|(
literal|"file:///"
argument_list|)
decl_stmt|;
name|Path
name|dbPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|fileUri
argument_list|)
operator|.
name|resolve
argument_list|(
name|dbPathString
argument_list|)
decl_stmt|;
name|FileStore
name|disk
init|=
name|Files
operator|.
name|getFileStore
argument_list|(
name|dbPath
argument_list|)
decl_stmt|;
return|return
name|disk
operator|.
name|getUsableSpace
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get free space on for path :"
operator|+
name|dbPathString
argument_list|)
expr_stmt|;
block|}
return|return
literal|0L
return|;
block|}
comment|/**    * Returns the Max current CacheSize.    *    * @return - Cache Size    */
DECL|method|getCurrentCacheSize ()
specifier|public
name|long
name|getCurrentCacheSize
parameter_list|()
block|{
return|return
name|currentCacheSize
return|;
block|}
comment|/**    * Sets the Maximum Cache Size.    *    * @param currentCacheSize - Max current Cache Size.    */
DECL|method|setCurrentCacheSize (long currentCacheSize)
specifier|public
name|void
name|setCurrentCacheSize
parameter_list|(
name|long
name|currentCacheSize
parameter_list|)
block|{
name|this
operator|.
name|currentCacheSize
operator|=
name|currentCacheSize
expr_stmt|;
block|}
comment|/**    * True if block tracing is enabled.    *    * @return - bool    */
DECL|method|isTraceEnabled ()
specifier|public
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
return|return
name|traceEnabled
return|;
block|}
comment|/**    * Checks if Short Circuit I/O is enabled.    *    * @return - true if it is enabled.    */
DECL|method|isShortCircuitIOEnabled ()
specifier|public
name|boolean
name|isShortCircuitIOEnabled
parameter_list|()
block|{
return|return
name|enableShortCircuitIO
return|;
block|}
comment|/**    * Returns the default block size of this device.    *    * @return - int    */
DECL|method|getBlockSize ()
specifier|public
name|int
name|getBlockSize
parameter_list|()
block|{
return|return
name|blockSize
return|;
block|}
comment|/**    * Gets the client manager.    *    * @return XceiverClientManager    */
DECL|method|getClientManager ()
specifier|public
name|XceiverClientManager
name|getClientManager
parameter_list|()
block|{
return|return
name|clientManager
return|;
block|}
comment|/**    * check if the key is cached, if yes, returned the cached object.    * otherwise, load from data source. Then put it into cache.    *    * @param blockID    * @return the block associated to the blockID    */
annotation|@
name|Override
DECL|method|get (long blockID)
specifier|public
name|LogicalBlock
name|get
parameter_list|(
name|long
name|blockID
parameter_list|)
throws|throws
name|IOException
block|{
name|cblockTargetMetrics
operator|.
name|incNumReadOps
argument_list|()
expr_stmt|;
return|return
name|blockReader
operator|.
name|readBlock
argument_list|(
name|blockID
argument_list|)
return|;
block|}
comment|/**    * put the value of the key into cache and remote container.    *    * @param blockID - BlockID    * @param data - byte[]    */
annotation|@
name|Override
DECL|method|put (long blockID, byte[] data)
specifier|public
name|void
name|put
parameter_list|(
name|long
name|blockID
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|cblockTargetMetrics
operator|.
name|incNumWriteOps
argument_list|()
expr_stmt|;
name|LogicalBlock
name|block
init|=
operator|new
name|DiskBlock
argument_list|(
name|blockID
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|blockWriter
operator|.
name|writeBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{    }
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|flusher
operator|.
name|register
argument_list|(
name|getDbPath
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|containerList
argument_list|)
expr_stmt|;
name|blockWriter
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|blockReader
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|blockWriter
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|flusher
operator|.
name|releaseCacheDB
argument_list|(
name|dbPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|traceEnabled
condition|)
block|{
name|getTracer
argument_list|()
operator|.
name|info
argument_list|(
literal|"Task=ShutdownCache"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns true if cache still has blocks pending to write.    *    * @return false if we have no pending blocks to write.    */
annotation|@
name|Override
DECL|method|isDirtyCache ()
specifier|public
name|boolean
name|isDirtyCache
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Returns the local cache DB.    *    * @return - DB    */
DECL|method|getCacheDB ()
name|LevelDBStore
name|getCacheDB
parameter_list|()
block|{
return|return
name|this
operator|.
name|cacheDB
return|;
block|}
comment|/**    * Returns the current userName.    *    * @return - UserName    */
DECL|method|getUserName ()
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|this
operator|.
name|userName
return|;
block|}
comment|/**    * Returns the volume name.    *    * @return VolumeName.    */
DECL|method|getVolumeName ()
name|String
name|getVolumeName
parameter_list|()
block|{
return|return
name|this
operator|.
name|volumeName
return|;
block|}
comment|/**    * Returns the target metrics.    *    * @return CBlock Target Metrics.    */
DECL|method|getTargetMetrics ()
name|CBlockTargetMetrics
name|getTargetMetrics
parameter_list|()
block|{
return|return
name|this
operator|.
name|cblockTargetMetrics
return|;
block|}
comment|/**    * Returns the pipeline to use given a container.    *    * @param blockId - blockID    * @return - pipeline.    */
DECL|method|getPipeline (long blockId)
name|Pipeline
name|getPipeline
parameter_list|(
name|long
name|blockId
parameter_list|)
block|{
name|int
name|containerIdx
init|=
operator|(
name|int
operator|)
name|blockId
operator|%
name|containerList
operator|.
name|length
decl_stmt|;
name|long
name|cBlockIndex
init|=
name|Longs
operator|.
name|fromByteArray
argument_list|(
name|containerList
index|[
name|containerIdx
index|]
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cBlockIndex
operator|>
literal|0
condition|)
block|{
comment|// This catches the case when we get a wrong container in the ordering
comment|// of the containers.
name|Preconditions
operator|.
name|checkState
argument_list|(
name|containerIdx
operator|%
name|cBlockIndex
operator|==
literal|0
argument_list|,
literal|"The container ID computed should match with the container index "
operator|+
literal|"returned from cBlock Server."
argument_list|)
expr_stmt|;
block|}
return|return
name|containerList
index|[
name|containerIdx
index|]
return|;
block|}
DECL|method|getTraceID (long blockID)
name|String
name|getTraceID
parameter_list|(
name|long
name|blockID
parameter_list|)
block|{
return|return
name|flusher
operator|.
name|getTraceID
argument_list|(
name|dbPath
argument_list|,
name|blockID
argument_list|)
return|;
block|}
comment|/**    * Returns tracer.    *    * @return - Logger    */
DECL|method|getTracer ()
name|Logger
name|getTracer
parameter_list|()
block|{
return|return
name|TRACER
return|;
block|}
comment|/**    * Builder class for CBlocklocalCache.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
DECL|field|pipelines
specifier|private
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelines
decl_stmt|;
DECL|field|clientManager
specifier|private
name|XceiverClientManager
name|clientManager
decl_stmt|;
DECL|field|blockSize
specifier|private
name|int
name|blockSize
decl_stmt|;
DECL|field|volumeSize
specifier|private
name|long
name|volumeSize
decl_stmt|;
DECL|field|flusher
specifier|private
name|ContainerCacheFlusher
name|flusher
decl_stmt|;
DECL|field|metrics
specifier|private
name|CBlockTargetMetrics
name|metrics
decl_stmt|;
comment|/**      * Ctor.      */
DECL|method|Builder ()
name|Builder
parameter_list|()
block|{     }
comment|/**      * Computes a cache size based on the configuration and available disk      * space.      *      * @param configuration - Config      * @param volumeSize - Size of Volume      * @param blockSize - Size of the block      * @return - cache size in bytes.      */
DECL|method|computeCacheSize (Configuration configuration, long volumeSize, int blockSize)
specifier|private
specifier|static
name|long
name|computeCacheSize
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|long
name|volumeSize
parameter_list|,
name|int
name|blockSize
parameter_list|)
block|{
name|long
name|cacheSize
init|=
literal|0
decl_stmt|;
name|String
name|dbPath
init|=
name|configuration
operator|.
name|get
argument_list|(
name|DFS_CBLOCK_DISK_CACHE_PATH_KEY
argument_list|,
name|DFS_CBLOCK_DISK_CACHE_PATH_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|dbPath
argument_list|)
condition|)
block|{
return|return
name|cacheSize
return|;
block|}
name|long
name|spaceRemaining
init|=
name|getRemainingDiskSpace
argument_list|(
name|dbPath
argument_list|)
decl_stmt|;
name|double
name|cacheRatio
init|=
literal|1.0
decl_stmt|;
if|if
condition|(
name|spaceRemaining
operator|<
name|volumeSize
condition|)
block|{
name|cacheRatio
operator|=
operator|(
name|double
operator|)
name|spaceRemaining
operator|/
name|volumeSize
expr_stmt|;
block|}
comment|// if cache is going to be at least 10% of the volume size it is worth
comment|// doing, otherwise skip creating the  cache.
if|if
condition|(
name|cacheRatio
operator|>=
literal|0.10
condition|)
block|{
name|cacheSize
operator|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|volumeSize
operator|*
name|cacheRatio
argument_list|)
expr_stmt|;
block|}
return|return
name|cacheSize
return|;
block|}
comment|/**      * Sets the Config to be used by this cache.      *      * @param conf - Config      * @return Builder      */
DECL|method|setConfiguration (Configuration conf)
specifier|public
name|Builder
name|setConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|conf
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the user name who is the owner of this volume.      *      * @param user - name of the owner, please note this is not the current      * user name.      * @return - Builder      */
DECL|method|setUserName (String user)
specifier|public
name|Builder
name|setUserName
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|user
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the VolumeName.      *      * @param volume - Name of the volume      * @return Builder      */
DECL|method|setVolumeName (String volume)
specifier|public
name|Builder
name|setVolumeName
parameter_list|(
name|String
name|volume
parameter_list|)
block|{
name|this
operator|.
name|volumeName
operator|=
name|volume
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the Pipelines that form this volume.      *      * @param pipelineList - list of pipelines      * @return Builder      */
DECL|method|setPipelines (List<Pipeline> pipelineList)
specifier|public
name|Builder
name|setPipelines
parameter_list|(
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelineList
parameter_list|)
block|{
name|this
operator|.
name|pipelines
operator|=
name|pipelineList
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the Client Manager that manages the communication with containers.      *      * @param xceiverClientManager - clientManager.      * @return - Builder      */
DECL|method|setClientManager (XceiverClientManager xceiverClientManager)
specifier|public
name|Builder
name|setClientManager
parameter_list|(
name|XceiverClientManager
name|xceiverClientManager
parameter_list|)
block|{
name|this
operator|.
name|clientManager
operator|=
name|xceiverClientManager
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the block size -- Typical sizes are 4KB, 8KB etc.      *      * @param size - BlockSize.      * @return - Builder      */
DECL|method|setBlockSize (int size)
specifier|public
name|Builder
name|setBlockSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|blockSize
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the volumeSize.      *      * @param size - VolumeSize      * @return - Builder      */
DECL|method|setVolumeSize (long size)
specifier|public
name|Builder
name|setVolumeSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|volumeSize
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set flusher.      * @param containerCacheFlusher - cache Flusher      * @return Builder.      */
DECL|method|setFlusher (ContainerCacheFlusher containerCacheFlusher)
specifier|public
name|Builder
name|setFlusher
parameter_list|(
name|ContainerCacheFlusher
name|containerCacheFlusher
parameter_list|)
block|{
name|this
operator|.
name|flusher
operator|=
name|containerCacheFlusher
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the cblock Metrics.      *      * @param targetMetrics - CBlock Target Metrics      * @return - Builder      */
DECL|method|setCBlockTargetMetrics (CBlockTargetMetrics targetMetrics)
specifier|public
name|Builder
name|setCBlockTargetMetrics
parameter_list|(
name|CBlockTargetMetrics
name|targetMetrics
parameter_list|)
block|{
name|this
operator|.
name|metrics
operator|=
name|targetMetrics
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a CBlockLocalCache.      *      * @return the CBlockLocalCache with the preset properties.      * @throws IOException      */
DECL|method|build ()
specifier|public
name|CBlockLocalCache
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|configuration
argument_list|,
literal|"A valid configuration "
operator|+
literal|"is needed"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|userName
argument_list|)
argument_list|,
literal|"A valid "
operator|+
literal|"username is needed"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|volumeName
argument_list|)
argument_list|,
literal|" A valid"
operator|+
literal|" volume name is needed"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|pipelines
argument_list|,
literal|"Pipelines cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|pipelines
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
literal|"At least one "
operator|+
literal|"pipeline location is needed for a volume"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|pipelines
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipelines
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|.
name|getData
argument_list|()
argument_list|,
literal|"cBlock "
operator|+
literal|"relies on private data on the pipeline, null data found."
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clientManager
argument_list|,
literal|"Client Manager cannot be "
operator|+
literal|"null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|blockSize
operator|>
literal|0
argument_list|,
literal|" Block size has to be a "
operator|+
literal|"number greater than 0"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volumeSize
operator|>
literal|0
argument_list|,
literal|"Volume Size cannot be less "
operator|+
literal|"than 1"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|flusher
argument_list|,
literal|"Flusher cannot be null."
argument_list|)
expr_stmt|;
name|CBlockLocalCache
name|cache
init|=
operator|new
name|CBlockLocalCache
argument_list|(
name|this
operator|.
name|configuration
argument_list|,
name|this
operator|.
name|volumeName
argument_list|,
name|this
operator|.
name|userName
argument_list|,
name|this
operator|.
name|pipelines
argument_list|,
name|blockSize
argument_list|,
name|volumeSize
argument_list|,
name|flusher
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setCblockTargetMetrics
argument_list|(
name|this
operator|.
name|metrics
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setClientManager
argument_list|(
name|this
operator|.
name|clientManager
argument_list|)
expr_stmt|;
comment|// TODO : Support user configurable maximum size.
name|long
name|cacheSize
init|=
name|computeCacheSize
argument_list|(
name|this
operator|.
name|configuration
argument_list|,
name|this
operator|.
name|volumeSize
argument_list|,
name|this
operator|.
name|blockSize
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setCurrentCacheSize
argument_list|(
name|cacheSize
argument_list|)
expr_stmt|;
return|return
name|cache
return|;
block|}
block|}
block|}
end_class

end_unit

