begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|DFS_STORAGE_HANDLER_TYPE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|DFS_STORAGE_HANDLER_TYPE_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|container
operator|.
name|ContainerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|core
operator|.
name|ApplicationAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|interfaces
operator|.
name|StorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|ObjectStoreApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|netty
operator|.
name|ObjectStoreJerseyContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|storage
operator|.
name|DistributedStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|localstorage
operator|.
name|LocalStorageHandler
import|;
end_import

begin_comment
comment|/**  * Implements object store handling within the DataNode process.  This class is  * responsible for initializing and maintaining the RPC clients and servers and  * the web application required for the object store implementation.  */
end_comment

begin_class
DECL|class|ObjectStoreHandler
specifier|public
specifier|final
class|class
name|ObjectStoreHandler
block|{
DECL|field|objectStoreJerseyContainer
specifier|private
specifier|final
name|ObjectStoreJerseyContainer
name|objectStoreJerseyContainer
decl_stmt|;
comment|/**    * Creates a new ObjectStoreHandler.    *    * @param conf configuration    * @throws IOException if there is an I/O error    */
DECL|method|ObjectStoreHandler (Configuration conf)
specifier|public
name|ObjectStoreHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|shType
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|DFS_STORAGE_HANDLER_TYPE_KEY
argument_list|,
name|DFS_STORAGE_HANDLER_TYPE_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|StorageHandler
name|storageHandler
decl_stmt|;
if|if
condition|(
literal|"distributed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|shType
argument_list|)
condition|)
block|{
name|storageHandler
operator|=
operator|new
name|DistributedStorageHandler
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"local"
operator|.
name|equalsIgnoreCase
argument_list|(
name|shType
argument_list|)
condition|)
block|{
name|storageHandler
operator|=
operator|new
name|LocalStorageHandler
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unrecognized value for %s: %s"
argument_list|,
name|DFS_STORAGE_HANDLER_TYPE_KEY
argument_list|,
name|shType
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|objectStoreJerseyContainer
operator|=
name|ContainerFactory
operator|.
name|createContainer
argument_list|(
name|ObjectStoreJerseyContainer
operator|.
name|class
argument_list|,
operator|new
name|ApplicationAdapter
argument_list|(
operator|new
name|ObjectStoreApplication
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|objectStoreJerseyContainer
operator|.
name|setStorageHandler
argument_list|(
name|storageHandler
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the initialized web application container.    *    * @return initialized web application container    */
DECL|method|getObjectStoreJerseyContainer ()
specifier|public
name|ObjectStoreJerseyContainer
name|getObjectStoreJerseyContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectStoreJerseyContainer
return|;
block|}
block|}
end_class

end_unit

