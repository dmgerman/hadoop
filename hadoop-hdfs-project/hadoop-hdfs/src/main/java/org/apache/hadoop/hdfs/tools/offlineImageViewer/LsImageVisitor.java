begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_comment
comment|/**  * LsImageVisitor displays the blocks of the namespace in a format very similar  * to the output of ls/lsr.  Entries are marked as directories or not,  * permissions listed, replication, username and groupname, along with size,  * modification date and full path.  *  * Note: A significant difference between the output of the lsr command  * and this image visitor is that this class cannot sort the file entries;  * they are listed in the order they are stored within the fsimage file.   * Therefore, the output of this class cannot be directly compared to the  * output of the lsr command.  */
end_comment

begin_class
DECL|class|LsImageVisitor
class|class
name|LsImageVisitor
extends|extends
name|TextWriterImageVisitor
block|{
DECL|field|elemQ
specifier|final
specifier|private
name|LinkedList
argument_list|<
name|ImageElement
argument_list|>
name|elemQ
init|=
operator|new
name|LinkedList
argument_list|<
name|ImageElement
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|numBlocks
specifier|private
name|int
name|numBlocks
decl_stmt|;
DECL|field|perms
specifier|private
name|String
name|perms
decl_stmt|;
DECL|field|replication
specifier|private
name|int
name|replication
decl_stmt|;
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
DECL|field|filesize
specifier|private
name|long
name|filesize
decl_stmt|;
DECL|field|modTime
specifier|private
name|String
name|modTime
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|linkTarget
specifier|private
name|String
name|linkTarget
decl_stmt|;
DECL|field|inInode
specifier|private
name|boolean
name|inInode
init|=
literal|false
decl_stmt|;
DECL|field|sb
specifier|final
specifier|private
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|field|formatter
specifier|final
specifier|private
name|Formatter
name|formatter
init|=
operator|new
name|Formatter
argument_list|(
name|sb
argument_list|)
decl_stmt|;
DECL|method|LsImageVisitor (String filename)
specifier|public
name|LsImageVisitor
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
DECL|method|LsImageVisitor (String filename, boolean printToScreen)
specifier|public
name|LsImageVisitor
parameter_list|(
name|String
name|filename
parameter_list|,
name|boolean
name|printToScreen
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|filename
argument_list|,
name|printToScreen
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start a new line of output, reset values.    */
DECL|method|newLine ()
specifier|private
name|void
name|newLine
parameter_list|()
block|{
name|numBlocks
operator|=
literal|0
expr_stmt|;
name|perms
operator|=
name|username
operator|=
name|group
operator|=
name|path
operator|=
name|linkTarget
operator|=
literal|""
expr_stmt|;
name|filesize
operator|=
literal|0l
expr_stmt|;
name|replication
operator|=
literal|0
expr_stmt|;
name|inInode
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * All the values have been gathered.  Print them to the console in an    * ls-style format.    */
DECL|field|widthRepl
specifier|private
specifier|final
specifier|static
name|int
name|widthRepl
init|=
literal|2
decl_stmt|;
DECL|field|widthUser
specifier|private
specifier|final
specifier|static
name|int
name|widthUser
init|=
literal|8
decl_stmt|;
DECL|field|widthGroup
specifier|private
specifier|final
specifier|static
name|int
name|widthGroup
init|=
literal|10
decl_stmt|;
DECL|field|widthSize
specifier|private
specifier|final
specifier|static
name|int
name|widthSize
init|=
literal|10
decl_stmt|;
DECL|field|widthMod
specifier|private
specifier|final
specifier|static
name|int
name|widthMod
init|=
literal|10
decl_stmt|;
DECL|field|lsStr
specifier|private
specifier|final
specifier|static
name|String
name|lsStr
init|=
literal|" %"
operator|+
name|widthRepl
operator|+
literal|"s %"
operator|+
name|widthUser
operator|+
literal|"s %"
operator|+
name|widthGroup
operator|+
literal|"s %"
operator|+
name|widthSize
operator|+
literal|"d %"
operator|+
name|widthMod
operator|+
literal|"s %s"
decl_stmt|;
DECL|method|printLine ()
specifier|private
name|void
name|printLine
parameter_list|()
throws|throws
name|IOException
block|{
name|sb
operator|.
name|append
argument_list|(
name|numBlocks
operator|<
literal|0
condition|?
literal|"d"
else|:
literal|"-"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|perms
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|linkTarget
operator|.
name|length
argument_list|()
condition|)
block|{
name|path
operator|=
name|path
operator|+
literal|" -> "
operator|+
name|linkTarget
expr_stmt|;
block|}
name|formatter
operator|.
name|format
argument_list|(
name|lsStr
argument_list|,
name|replication
operator|>
literal|0
condition|?
name|replication
else|:
literal|"-"
argument_list|,
name|username
argument_list|,
name|group
argument_list|,
name|filesize
argument_list|,
name|modTime
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// clear string builder
name|inInode
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|finish ()
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finishAbnormally ()
name|void
name|finishAbnormally
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Input ended unexpectedly."
argument_list|)
expr_stmt|;
name|super
operator|.
name|finishAbnormally
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|leaveEnclosingElement ()
name|void
name|leaveEnclosingElement
parameter_list|()
throws|throws
name|IOException
block|{
name|ImageElement
name|elem
init|=
name|elemQ
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|elem
operator|==
name|ImageElement
operator|.
name|INODE
condition|)
name|printLine
argument_list|()
expr_stmt|;
block|}
comment|// Maintain state of location within the image tree and record
comment|// values needed to display the inode in ls-style format.
annotation|@
name|Override
DECL|method|visit (ImageElement element, String value)
name|void
name|visit
parameter_list|(
name|ImageElement
name|element
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inInode
condition|)
block|{
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|INODE_PATH
case|:
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
name|path
operator|=
literal|"/"
expr_stmt|;
else|else
name|path
operator|=
name|value
expr_stmt|;
break|break;
case|case
name|PERMISSION_STRING
case|:
name|perms
operator|=
name|value
expr_stmt|;
break|break;
case|case
name|REPLICATION
case|:
name|replication
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|USER_NAME
case|:
name|username
operator|=
name|value
expr_stmt|;
break|break;
case|case
name|GROUP_NAME
case|:
name|group
operator|=
name|value
expr_stmt|;
break|break;
case|case
name|NUM_BYTES
case|:
name|filesize
operator|+=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|MODIFICATION_TIME
case|:
name|modTime
operator|=
name|value
expr_stmt|;
break|break;
case|case
name|SYMLINK
case|:
name|linkTarget
operator|=
name|value
expr_stmt|;
break|break;
default|default:
comment|// This is OK.  We're not looking for all the values.
break|break;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|visitEnclosingElement (ImageElement element)
name|void
name|visitEnclosingElement
parameter_list|(
name|ImageElement
name|element
parameter_list|)
throws|throws
name|IOException
block|{
name|elemQ
operator|.
name|push
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
name|ImageElement
operator|.
name|INODE
condition|)
name|newLine
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|visitEnclosingElement (ImageElement element, ImageElement key, String value)
name|void
name|visitEnclosingElement
parameter_list|(
name|ImageElement
name|element
parameter_list|,
name|ImageElement
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|elemQ
operator|.
name|push
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
name|ImageElement
operator|.
name|INODE
condition|)
name|newLine
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|element
operator|==
name|ImageElement
operator|.
name|BLOCKS
condition|)
name|numBlocks
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

