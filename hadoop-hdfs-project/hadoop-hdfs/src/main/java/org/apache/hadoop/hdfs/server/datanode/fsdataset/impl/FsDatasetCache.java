begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_CACHE_REVOCATION_TIMEOUT_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_CACHE_REVOCATION_TIMEOUT_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_CACHE_REVOCATION_POLLING_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_CACHE_REVOCATION_POLLING_MS_DEFAULT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|time
operator|.
name|DurationFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ExtendedBlockId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DNConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DatanodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Manages caching for an FsDatasetImpl by using the mmap(2) and mlock(2)  * system calls to lock blocks into memory. Block checksums are verified upon  * entry into the cache.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|FsDatasetCache
specifier|public
class|class
name|FsDatasetCache
block|{
comment|/**    * MappableBlocks that we know about.    */
DECL|class|Value
specifier|private
specifier|static
specifier|final
class|class
name|Value
block|{
DECL|field|state
specifier|final
name|State
name|state
decl_stmt|;
DECL|field|mappableBlock
specifier|final
name|MappableBlock
name|mappableBlock
decl_stmt|;
DECL|method|Value (MappableBlock mappableBlock, State state)
name|Value
parameter_list|(
name|MappableBlock
name|mappableBlock
parameter_list|,
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|mappableBlock
operator|=
name|mappableBlock
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
block|}
DECL|enum|State
specifier|private
enum|enum
name|State
block|{
comment|/**      * The MappableBlock is in the process of being cached.      */
DECL|enumConstant|CACHING
name|CACHING
block|,
comment|/**      * The MappableBlock was in the process of being cached, but it was      * cancelled.  Only the FsDatasetCache#WorkerTask can remove cancelled      * MappableBlock objects.      */
DECL|enumConstant|CACHING_CANCELLED
name|CACHING_CANCELLED
block|,
comment|/**      * The MappableBlock is in the cache.      */
DECL|enumConstant|CACHED
name|CACHED
block|,
comment|/**      * The MappableBlock is in the process of uncaching.      */
DECL|enumConstant|UNCACHING
name|UNCACHING
block|;
comment|/**      * Whether we should advertise this block as cached to the NameNode and      * clients.      */
DECL|method|shouldAdvertise ()
specifier|public
name|boolean
name|shouldAdvertise
parameter_list|()
block|{
return|return
operator|(
name|this
operator|==
name|CACHED
operator|)
return|;
block|}
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FsDatasetCache
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Stores MappableBlock objects and the states they're in.    */
DECL|field|mappableBlockMap
specifier|private
specifier|final
name|HashMap
argument_list|<
name|ExtendedBlockId
argument_list|,
name|Value
argument_list|>
name|mappableBlockMap
init|=
operator|new
name|HashMap
argument_list|<
name|ExtendedBlockId
argument_list|,
name|Value
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|numBlocksCached
specifier|private
specifier|final
name|AtomicLong
name|numBlocksCached
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|dataset
specifier|private
specifier|final
name|FsDatasetImpl
name|dataset
decl_stmt|;
DECL|field|uncachingExecutor
specifier|private
specifier|final
name|ThreadPoolExecutor
name|uncachingExecutor
decl_stmt|;
DECL|field|deferredUncachingExecutor
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|deferredUncachingExecutor
decl_stmt|;
DECL|field|revocationMs
specifier|private
specifier|final
name|long
name|revocationMs
decl_stmt|;
DECL|field|revocationPollingMs
specifier|private
specifier|final
name|long
name|revocationPollingMs
decl_stmt|;
comment|/**    * A specific cacheLoader could cache block either to DRAM or    * to persistent memory.    */
DECL|field|cacheLoader
specifier|private
specifier|final
name|MappableBlockLoader
name|cacheLoader
decl_stmt|;
DECL|field|memCacheStats
specifier|private
specifier|final
name|MemoryCacheStats
name|memCacheStats
decl_stmt|;
comment|/**    * Number of cache commands that could not be completed successfully    */
DECL|field|numBlocksFailedToCache
specifier|final
name|AtomicLong
name|numBlocksFailedToCache
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Number of uncache commands that could not be completed successfully    */
DECL|field|numBlocksFailedToUncache
specifier|final
name|AtomicLong
name|numBlocksFailedToUncache
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|FsDatasetCache (FsDatasetImpl dataset)
specifier|public
name|FsDatasetCache
parameter_list|(
name|FsDatasetImpl
name|dataset
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dataset
operator|=
name|dataset
expr_stmt|;
name|ThreadFactory
name|workerFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"FsDatasetCache-%d-"
operator|+
name|dataset
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|uncachingExecutor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|workerFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|uncachingExecutor
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|deferredUncachingExecutor
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|workerFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|revocationMs
operator|=
name|dataset
operator|.
name|datanode
operator|.
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|DFS_DATANODE_CACHE_REVOCATION_TIMEOUT_MS
argument_list|,
name|DFS_DATANODE_CACHE_REVOCATION_TIMEOUT_MS_DEFAULT
argument_list|)
expr_stmt|;
name|long
name|confRevocationPollingMs
init|=
name|dataset
operator|.
name|datanode
operator|.
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|DFS_DATANODE_CACHE_REVOCATION_POLLING_MS
argument_list|,
name|DFS_DATANODE_CACHE_REVOCATION_POLLING_MS_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|minRevocationPollingMs
init|=
name|revocationMs
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|minRevocationPollingMs
operator|<
name|confRevocationPollingMs
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"configured value "
operator|+
name|confRevocationPollingMs
operator|+
literal|"for "
operator|+
name|DFS_DATANODE_CACHE_REVOCATION_POLLING_MS
operator|+
literal|" is too high.  It must not be more than half of the "
operator|+
literal|"value of "
operator|+
name|DFS_DATANODE_CACHE_REVOCATION_TIMEOUT_MS
operator|+
literal|".  Reconfigure this to "
operator|+
name|minRevocationPollingMs
argument_list|)
throw|;
block|}
name|this
operator|.
name|revocationPollingMs
operator|=
name|confRevocationPollingMs
expr_stmt|;
comment|// Both lazy writer and read cache are sharing this statistics.
name|this
operator|.
name|memCacheStats
operator|=
operator|new
name|MemoryCacheStats
argument_list|(
name|dataset
operator|.
name|datanode
operator|.
name|getDnConf
argument_list|()
operator|.
name|getMaxLockedMemory
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheLoader
operator|=
name|MappableBlockLoaderFactory
operator|.
name|createCacheLoader
argument_list|(
name|this
operator|.
name|getDnConf
argument_list|()
argument_list|)
expr_stmt|;
name|cacheLoader
operator|.
name|initialize
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if pmem cache is enabled.    */
DECL|method|isPmemCacheEnabled ()
specifier|private
name|boolean
name|isPmemCacheEnabled
parameter_list|()
block|{
return|return
operator|!
name|cacheLoader
operator|.
name|isTransientCache
argument_list|()
return|;
block|}
DECL|method|getDnConf ()
name|DNConf
name|getDnConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|dataset
operator|.
name|datanode
operator|.
name|getDnConf
argument_list|()
return|;
block|}
DECL|method|getMemCacheStats ()
name|MemoryCacheStats
name|getMemCacheStats
parameter_list|()
block|{
return|return
name|memCacheStats
return|;
block|}
comment|/**    * Get the cache path if the replica is cached into persistent memory.    */
DECL|method|getReplicaCachePath (String bpid, long blockId)
name|String
name|getReplicaCachePath
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|blockId
parameter_list|)
block|{
if|if
condition|(
name|cacheLoader
operator|.
name|isTransientCache
argument_list|()
operator|||
operator|!
name|isCached
argument_list|(
name|bpid
argument_list|,
name|blockId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExtendedBlockId
name|key
init|=
operator|new
name|ExtendedBlockId
argument_list|(
name|blockId
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
return|return
name|PmemVolumeManager
operator|.
name|getInstance
argument_list|()
operator|.
name|getCachePath
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Get cache address on persistent memory for read operation.    * The cache address comes from PMDK lib function when mapping    * block to persistent memory.    *    * @param bpid    blockPoolId    * @param blockId blockId    * @return address    */
DECL|method|getCacheAddress (String bpid, long blockId)
name|long
name|getCacheAddress
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|blockId
parameter_list|)
block|{
if|if
condition|(
name|cacheLoader
operator|.
name|isTransientCache
argument_list|()
operator|||
operator|!
name|isCached
argument_list|(
name|bpid
argument_list|,
name|blockId
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|cacheLoader
operator|.
name|isNativeLoader
argument_list|()
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|ExtendedBlockId
name|key
init|=
operator|new
name|ExtendedBlockId
argument_list|(
name|blockId
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|MappableBlock
name|mappableBlock
init|=
name|mappableBlockMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|mappableBlock
decl_stmt|;
return|return
name|mappableBlock
operator|.
name|getAddress
argument_list|()
return|;
block|}
comment|/**    * @return List of cached blocks suitable for translation into a    * {@link BlockListAsLongs} for a cache report.    */
DECL|method|getCachedBlocks (String bpid)
specifier|synchronized
name|List
argument_list|<
name|Long
argument_list|>
name|getCachedBlocks
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|ExtendedBlockId
argument_list|,
name|Value
argument_list|>
argument_list|>
name|iter
init|=
name|mappableBlockMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|ExtendedBlockId
argument_list|,
name|Value
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
operator|.
name|equals
argument_list|(
name|bpid
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|state
operator|.
name|shouldAdvertise
argument_list|()
condition|)
block|{
name|blocks
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|blocks
return|;
block|}
comment|/**    * Attempt to begin caching a block.    */
DECL|method|cacheBlock (long blockId, String bpid, String blockFileName, long length, long genstamp, Executor volumeExecutor)
specifier|synchronized
name|void
name|cacheBlock
parameter_list|(
name|long
name|blockId
parameter_list|,
name|String
name|bpid
parameter_list|,
name|String
name|blockFileName
parameter_list|,
name|long
name|length
parameter_list|,
name|long
name|genstamp
parameter_list|,
name|Executor
name|volumeExecutor
parameter_list|)
block|{
name|ExtendedBlockId
name|key
init|=
operator|new
name|ExtendedBlockId
argument_list|(
name|blockId
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|Value
name|prevValue
init|=
name|mappableBlockMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevValue
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block with id {}, pool {} already exists in the "
operator|+
literal|"FsDatasetCache with state {}"
argument_list|,
name|blockId
argument_list|,
name|bpid
argument_list|,
name|prevValue
operator|.
name|state
argument_list|)
expr_stmt|;
name|numBlocksFailedToCache
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return;
block|}
name|mappableBlockMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Value
argument_list|(
literal|null
argument_list|,
name|State
operator|.
name|CACHING
argument_list|)
argument_list|)
expr_stmt|;
name|volumeExecutor
operator|.
name|execute
argument_list|(
operator|new
name|CachingTask
argument_list|(
name|key
argument_list|,
name|blockFileName
argument_list|,
name|length
argument_list|,
name|genstamp
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initiating caching for Block with id {}, pool {}"
argument_list|,
name|blockId
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
block|}
DECL|method|uncacheBlock (String bpid, long blockId)
specifier|synchronized
name|void
name|uncacheBlock
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|blockId
parameter_list|)
block|{
name|ExtendedBlockId
name|key
init|=
operator|new
name|ExtendedBlockId
argument_list|(
name|blockId
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|Value
name|prevValue
init|=
name|mappableBlockMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|boolean
name|deferred
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|dataset
operator|.
name|datanode
operator|.
name|getShortCircuitRegistry
argument_list|()
operator|.
name|processBlockMunlockRequest
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|deferred
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|prevValue
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block with id {}, pool {} does not need to be uncached, "
operator|+
literal|"because it is not currently in the mappableBlockMap."
argument_list|,
name|blockId
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
name|numBlocksFailedToUncache
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|prevValue
operator|.
name|state
condition|)
block|{
case|case
name|CACHING
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cancelling caching for block with id {}, pool {}."
argument_list|,
name|blockId
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
name|mappableBlockMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Value
argument_list|(
name|prevValue
operator|.
name|mappableBlock
argument_list|,
name|State
operator|.
name|CACHING_CANCELLED
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CACHED
case|:
name|mappableBlockMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Value
argument_list|(
name|prevValue
operator|.
name|mappableBlock
argument_list|,
name|State
operator|.
name|UNCACHING
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|deferred
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} is anchored, and can't be uncached now.  Scheduling it "
operator|+
literal|"for uncaching in {} "
argument_list|,
name|key
argument_list|,
name|DurationFormatUtils
operator|.
name|formatDurationHMS
argument_list|(
name|revocationPollingMs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|deferredUncachingExecutor
operator|.
name|schedule
argument_list|(
operator|new
name|UncachingTask
argument_list|(
name|key
argument_list|,
name|revocationMs
argument_list|)
argument_list|,
name|revocationPollingMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} has been scheduled for immediate uncaching."
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|uncachingExecutor
operator|.
name|execute
argument_list|(
operator|new
name|UncachingTask
argument_list|(
name|key
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block with id {}, pool {} does not need to be uncached, "
operator|+
literal|"because it is in state {}."
argument_list|,
name|blockId
argument_list|,
name|bpid
argument_list|,
name|prevValue
operator|.
name|state
argument_list|)
expr_stmt|;
name|numBlocksFailedToUncache
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|/**    * Try to reserve more bytes.    *    * @param count    The number of bytes to add.  We will round this    *                 up to the page size.    *    * @return         The new number of usedBytes if we succeeded;    *                 -1 if we failed.    */
DECL|method|reserve (long count)
name|long
name|reserve
parameter_list|(
name|long
name|count
parameter_list|)
block|{
return|return
name|memCacheStats
operator|.
name|reserve
argument_list|(
name|count
argument_list|)
return|;
block|}
comment|/**    * Release some bytes that we're using.    *    * @param count    The number of bytes to release.  We will round this    *                 up to the page size.    *    * @return         The new number of usedBytes.    */
DECL|method|release (long count)
name|long
name|release
parameter_list|(
name|long
name|count
parameter_list|)
block|{
return|return
name|memCacheStats
operator|.
name|release
argument_list|(
name|count
argument_list|)
return|;
block|}
comment|/**    * Release some bytes that we're using rounded down to the page size.    *    * @param count    The number of bytes to release.  We will round this    *                 down to the page size.    *    * @return         The new number of usedBytes.    */
DECL|method|releaseRoundDown (long count)
name|long
name|releaseRoundDown
parameter_list|(
name|long
name|count
parameter_list|)
block|{
return|return
name|memCacheStats
operator|.
name|releaseRoundDown
argument_list|(
name|count
argument_list|)
return|;
block|}
comment|/**    * Get the OS page size.    *    * @return the OS page size.    */
DECL|method|getOsPageSize ()
name|long
name|getOsPageSize
parameter_list|()
block|{
return|return
name|memCacheStats
operator|.
name|getPageSize
argument_list|()
return|;
block|}
comment|/**    * Round up to the OS page size.    */
DECL|method|roundUpPageSize (long count)
name|long
name|roundUpPageSize
parameter_list|(
name|long
name|count
parameter_list|)
block|{
return|return
name|memCacheStats
operator|.
name|roundUpPageSize
argument_list|(
name|count
argument_list|)
return|;
block|}
comment|/**    * Background worker that mmaps, mlocks, and checksums a block    */
DECL|class|CachingTask
specifier|private
class|class
name|CachingTask
implements|implements
name|Runnable
block|{
DECL|field|key
specifier|private
specifier|final
name|ExtendedBlockId
name|key
decl_stmt|;
DECL|field|blockFileName
specifier|private
specifier|final
name|String
name|blockFileName
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
DECL|field|genstamp
specifier|private
specifier|final
name|long
name|genstamp
decl_stmt|;
DECL|method|CachingTask (ExtendedBlockId key, String blockFileName, long length, long genstamp)
name|CachingTask
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|,
name|String
name|blockFileName
parameter_list|,
name|long
name|length
parameter_list|,
name|long
name|genstamp
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|blockFileName
operator|=
name|blockFileName
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|genstamp
operator|=
name|genstamp
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|FileInputStream
name|blockIn
init|=
literal|null
decl_stmt|,
name|metaIn
init|=
literal|null
decl_stmt|;
name|MappableBlock
name|mappableBlock
init|=
literal|null
decl_stmt|;
name|ExtendedBlock
name|extBlk
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|key
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|key
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|length
argument_list|,
name|genstamp
argument_list|)
decl_stmt|;
name|long
name|newUsedBytes
init|=
name|cacheLoader
operator|.
name|reserve
argument_list|(
name|key
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|boolean
name|reservedBytes
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|newUsedBytes
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cache "
operator|+
name|key
operator|+
literal|": could not reserve "
operator|+
literal|"more bytes in the cache: "
operator|+
name|cacheLoader
operator|.
name|getCacheCapacity
argument_list|()
operator|+
literal|" exceeded when try to reserve "
operator|+
name|length
operator|+
literal|"bytes."
argument_list|)
expr_stmt|;
return|return;
block|}
name|reservedBytes
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|blockIn
operator|=
operator|(
name|FileInputStream
operator|)
name|dataset
operator|.
name|getBlockInputStream
argument_list|(
name|extBlk
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|metaIn
operator|=
name|DatanodeUtil
operator|.
name|getMetaDataInputStream
argument_list|(
name|extBlk
argument_list|,
name|dataset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cache "
operator|+
name|key
operator|+
literal|": Underlying blocks are not backed by files."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to cache "
operator|+
name|key
operator|+
literal|": failed to find backing "
operator|+
literal|"files."
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cache "
operator|+
name|key
operator|+
literal|": failed to open file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|mappableBlock
operator|=
name|cacheLoader
operator|.
name|load
argument_list|(
name|length
argument_list|,
name|blockIn
argument_list|,
name|metaIn
argument_list|,
name|blockFileName
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|e
parameter_list|)
block|{
comment|// Exception message is bogus since this wasn't caused by a file read
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cache "
operator|+
name|key
operator|+
literal|": checksum verification failed."
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cache the block [key="
operator|+
name|key
operator|+
literal|"]!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|FsDatasetCache
operator|.
name|this
init|)
block|{
name|Value
name|value
init|=
name|mappableBlockMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|value
operator|.
name|state
operator|==
name|State
operator|.
name|CACHING
operator|||
name|value
operator|.
name|state
operator|==
name|State
operator|.
name|CACHING_CANCELLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|state
operator|==
name|State
operator|.
name|CACHING_CANCELLED
condition|)
block|{
name|mappableBlockMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caching of "
operator|+
name|key
operator|+
literal|" was cancelled."
argument_list|)
expr_stmt|;
return|return;
block|}
name|mappableBlockMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Value
argument_list|(
name|mappableBlock
argument_list|,
name|State
operator|.
name|CACHED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully cached {}.  We are now caching {} bytes in"
operator|+
literal|" total."
argument_list|,
name|key
argument_list|,
name|newUsedBytes
argument_list|)
expr_stmt|;
name|dataset
operator|.
name|datanode
operator|.
name|getShortCircuitRegistry
argument_list|()
operator|.
name|processBlockMlockEvent
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|numBlocksCached
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dataset
operator|.
name|datanode
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrBlocksCached
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|blockIn
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|metaIn
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|reservedBytes
condition|)
block|{
name|cacheLoader
operator|.
name|release
argument_list|(
name|key
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caching of {} was aborted.  We are now caching only {} "
operator|+
literal|"bytes in total."
argument_list|,
name|key
argument_list|,
name|cacheLoader
operator|.
name|getCacheUsed
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|mappableBlock
argument_list|)
expr_stmt|;
name|numBlocksFailedToCache
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|FsDatasetCache
operator|.
name|this
init|)
block|{
name|mappableBlockMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|UncachingTask
specifier|private
class|class
name|UncachingTask
implements|implements
name|Runnable
block|{
DECL|field|key
specifier|private
specifier|final
name|ExtendedBlockId
name|key
decl_stmt|;
DECL|field|revocationTimeMs
specifier|private
specifier|final
name|long
name|revocationTimeMs
decl_stmt|;
DECL|method|UncachingTask (ExtendedBlockId key, long revocationDelayMs)
name|UncachingTask
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|,
name|long
name|revocationDelayMs
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
if|if
condition|(
name|revocationDelayMs
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|revocationTimeMs
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|revocationTimeMs
operator|=
name|revocationDelayMs
operator|+
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|shouldDefer ()
specifier|private
name|boolean
name|shouldDefer
parameter_list|()
block|{
comment|/* If revocationTimeMs == 0, this is an immediate uncache request.        * No clients were anchored at the time we made the request. */
if|if
condition|(
name|revocationTimeMs
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|/* Let's check if any clients still have this block anchored. */
name|boolean
name|anchored
init|=
operator|!
name|dataset
operator|.
name|datanode
operator|.
name|getShortCircuitRegistry
argument_list|()
operator|.
name|processBlockMunlockRequest
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|anchored
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Uncaching {} now that it is no longer in use "
operator|+
literal|"by any clients."
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|long
name|delta
init|=
name|revocationTimeMs
operator|-
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Forcibly uncaching {} after {} "
operator|+
literal|"because client(s) {} refused to stop using it."
argument_list|,
name|key
argument_list|,
name|DurationFormatUtils
operator|.
name|formatDurationHMS
argument_list|(
name|revocationTimeMs
argument_list|)
argument_list|,
name|dataset
operator|.
name|datanode
operator|.
name|getShortCircuitRegistry
argument_list|()
operator|.
name|getClientNames
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Replica {} still can't be uncached because some "
operator|+
literal|"clients continue to use it.  Will wait for {}"
argument_list|,
name|key
argument_list|,
name|DurationFormatUtils
operator|.
name|formatDurationHMS
argument_list|(
name|delta
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Value
name|value
decl_stmt|;
if|if
condition|(
name|shouldDefer
argument_list|()
condition|)
block|{
name|deferredUncachingExecutor
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|revocationPollingMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|FsDatasetCache
operator|.
name|this
init|)
block|{
name|value
operator|=
name|mappableBlockMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|value
operator|.
name|state
operator|==
name|State
operator|.
name|UNCACHING
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|value
operator|.
name|mappableBlock
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|FsDatasetCache
operator|.
name|this
init|)
block|{
name|mappableBlockMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|long
name|newUsedBytes
init|=
name|cacheLoader
operator|.
name|release
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|mappableBlock
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|numBlocksCached
operator|.
name|addAndGet
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dataset
operator|.
name|datanode
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrBlocksUncached
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|revocationTimeMs
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Uncaching of {} completed. usedBytes = {}"
argument_list|,
name|key
argument_list|,
name|newUsedBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deferred uncaching of {} completed. usedBytes = {}"
argument_list|,
name|key
argument_list|,
name|newUsedBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Stats related methods for FSDatasetMBean
comment|/**    * Get the approximate amount of DRAM cache space used.    */
DECL|method|getCacheUsed ()
specifier|public
name|long
name|getCacheUsed
parameter_list|()
block|{
return|return
name|memCacheStats
operator|.
name|getCacheUsed
argument_list|()
return|;
block|}
comment|/**    * Get the approximate amount of persistent memory cache space used.    * TODO: advertise this metric to NameNode by FSDatasetMBean    */
DECL|method|getPmemCacheUsed ()
specifier|public
name|long
name|getPmemCacheUsed
parameter_list|()
block|{
if|if
condition|(
name|isPmemCacheEnabled
argument_list|()
condition|)
block|{
return|return
name|cacheLoader
operator|.
name|getCacheUsed
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Get the maximum amount of bytes we can cache on DRAM.  This is a constant.    */
DECL|method|getCacheCapacity ()
specifier|public
name|long
name|getCacheCapacity
parameter_list|()
block|{
return|return
name|memCacheStats
operator|.
name|getCacheCapacity
argument_list|()
return|;
block|}
comment|/**    * Get cache capacity of persistent memory.    * TODO: advertise this metric to NameNode by FSDatasetMBean    */
DECL|method|getPmemCacheCapacity ()
specifier|public
name|long
name|getPmemCacheCapacity
parameter_list|()
block|{
if|if
condition|(
name|isPmemCacheEnabled
argument_list|()
condition|)
block|{
return|return
name|cacheLoader
operator|.
name|getCacheCapacity
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|getNumBlocksFailedToCache ()
specifier|public
name|long
name|getNumBlocksFailedToCache
parameter_list|()
block|{
return|return
name|numBlocksFailedToCache
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getNumBlocksFailedToUncache ()
specifier|public
name|long
name|getNumBlocksFailedToUncache
parameter_list|()
block|{
return|return
name|numBlocksFailedToUncache
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getNumBlocksCached ()
specifier|public
name|long
name|getNumBlocksCached
parameter_list|()
block|{
return|return
name|numBlocksCached
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|isCached (String bpid, long blockId)
specifier|public
specifier|synchronized
name|boolean
name|isCached
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|blockId
parameter_list|)
block|{
name|ExtendedBlockId
name|block
init|=
operator|new
name|ExtendedBlockId
argument_list|(
name|blockId
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|Value
name|val
init|=
name|mappableBlockMap
operator|.
name|get
argument_list|(
name|block
argument_list|)
decl_stmt|;
return|return
operator|(
name|val
operator|!=
literal|null
operator|)
operator|&&
name|val
operator|.
name|state
operator|.
name|shouldAdvertise
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCacheLoader ()
name|MappableBlockLoader
name|getCacheLoader
parameter_list|()
block|{
return|return
name|cacheLoader
return|;
block|}
comment|/**    * This method can be executed during DataNode shutdown.    */
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
name|cacheLoader
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

