begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * A double-buffer for edits. New edits are written into the first buffer  * while the second is available to be flushed. Each time the double-buffer  * is flushed, the two internal buffers are swapped. This allows edits  * to progress concurrently to flushes without allocating new buffers each  * time.  */
end_comment

begin_class
DECL|class|EditsDoubleBuffer
class|class
name|EditsDoubleBuffer
block|{
DECL|field|bufCurrent
specifier|private
name|TxnBuffer
name|bufCurrent
decl_stmt|;
comment|// current buffer for writing
DECL|field|bufReady
specifier|private
name|TxnBuffer
name|bufReady
decl_stmt|;
comment|// buffer ready for flushing
DECL|field|initBufferSize
specifier|private
specifier|final
name|int
name|initBufferSize
decl_stmt|;
DECL|method|EditsDoubleBuffer (int defaultBufferSize)
specifier|public
name|EditsDoubleBuffer
parameter_list|(
name|int
name|defaultBufferSize
parameter_list|)
block|{
name|initBufferSize
operator|=
name|defaultBufferSize
expr_stmt|;
name|bufCurrent
operator|=
operator|new
name|TxnBuffer
argument_list|(
name|initBufferSize
argument_list|)
expr_stmt|;
name|bufReady
operator|=
operator|new
name|TxnBuffer
argument_list|(
name|initBufferSize
argument_list|)
expr_stmt|;
block|}
DECL|method|writeOp (FSEditLogOp op)
specifier|public
name|void
name|writeOp
parameter_list|(
name|FSEditLogOp
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|bufCurrent
operator|.
name|writeOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
DECL|method|writeRaw (byte[] bytes, int offset, int length)
name|void
name|writeRaw
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|bufCurrent
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bufCurrent
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bufReady
argument_list|)
expr_stmt|;
name|int
name|bufSize
init|=
name|bufCurrent
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|bufSize
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"FSEditStream has "
operator|+
name|bufSize
operator|+
literal|" bytes still to be flushed and cannot be closed."
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|bufCurrent
argument_list|,
name|bufReady
argument_list|)
expr_stmt|;
name|bufCurrent
operator|=
name|bufReady
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|setReadyToFlush ()
name|void
name|setReadyToFlush
parameter_list|()
block|{
assert|assert
name|isFlushed
argument_list|()
operator|:
literal|"previous data not flushed yet"
assert|;
name|TxnBuffer
name|tmp
init|=
name|bufReady
decl_stmt|;
name|bufReady
operator|=
name|bufCurrent
expr_stmt|;
name|bufCurrent
operator|=
name|tmp
expr_stmt|;
block|}
comment|/**    * Writes the content of the "ready" buffer to the given output stream,    * and resets it. Does not swap any buffers.    */
DECL|method|flushTo (OutputStream out)
name|void
name|flushTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|bufReady
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// write data to file
name|bufReady
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// erase all data in the buffer
block|}
DECL|method|shouldForceSync ()
name|boolean
name|shouldForceSync
parameter_list|()
block|{
return|return
name|bufCurrent
operator|.
name|size
argument_list|()
operator|>=
name|initBufferSize
return|;
block|}
DECL|method|getCurrentBuf ()
name|DataOutputBuffer
name|getCurrentBuf
parameter_list|()
block|{
return|return
name|bufCurrent
return|;
block|}
DECL|method|isFlushed ()
specifier|public
name|boolean
name|isFlushed
parameter_list|()
block|{
return|return
name|bufReady
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
DECL|method|countBufferedBytes ()
specifier|public
name|int
name|countBufferedBytes
parameter_list|()
block|{
return|return
name|bufReady
operator|.
name|size
argument_list|()
operator|+
name|bufCurrent
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * @return the transaction ID of the first transaction ready to be flushed     */
DECL|method|getFirstReadyTxId ()
specifier|public
name|long
name|getFirstReadyTxId
parameter_list|()
block|{
assert|assert
name|bufReady
operator|.
name|firstTxId
operator|>
literal|0
assert|;
return|return
name|bufReady
operator|.
name|firstTxId
return|;
block|}
comment|/**    * @return the number of transactions that are ready to be flushed    */
DECL|method|countReadyTxns ()
specifier|public
name|int
name|countReadyTxns
parameter_list|()
block|{
return|return
name|bufReady
operator|.
name|numTxns
return|;
block|}
DECL|class|TxnBuffer
specifier|private
specifier|static
class|class
name|TxnBuffer
extends|extends
name|DataOutputBuffer
block|{
DECL|field|firstTxId
name|long
name|firstTxId
decl_stmt|;
DECL|field|numTxns
name|int
name|numTxns
decl_stmt|;
DECL|field|writer
specifier|private
name|Writer
name|writer
decl_stmt|;
DECL|method|TxnBuffer (int initBufferSize)
specifier|public
name|TxnBuffer
parameter_list|(
name|int
name|initBufferSize
parameter_list|)
block|{
name|super
argument_list|(
name|initBufferSize
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|FSEditLogOp
operator|.
name|Writer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|writeOp (FSEditLogOp op)
specifier|public
name|void
name|writeOp
parameter_list|(
name|FSEditLogOp
name|op
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|firstTxId
operator|==
name|HdfsConstants
operator|.
name|INVALID_TXID
condition|)
block|{
name|firstTxId
operator|=
name|op
operator|.
name|txid
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|op
operator|.
name|txid
operator|>
name|firstTxId
assert|;
block|}
name|writer
operator|.
name|writeOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|numTxns
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|DataOutputBuffer
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|firstTxId
operator|=
name|HdfsConstants
operator|.
name|INVALID_TXID
expr_stmt|;
name|numTxns
operator|=
literal|0
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

