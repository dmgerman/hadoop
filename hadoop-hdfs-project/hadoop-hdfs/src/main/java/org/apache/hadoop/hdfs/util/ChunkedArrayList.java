begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Simplified List implementation which stores elements as a list  * of chunks, each chunk having a maximum size. This improves over  * using an ArrayList in that creating a large list will never require  * a large amount of contiguous heap space -- thus reducing the likelihood  * of triggering a CMS compaction pause due to heap fragmentation.  *   * The first chunks allocated are small, but each additional chunk is  * 50% larger than the previous, ramping up to a configurable maximum  * chunk size. Reasonable defaults are provided which should be a good  * balance between not making any large allocations while still retaining  * decent performance.  *  * This currently only supports a small subset of List operations --  * namely addition and iteration.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ChunkedArrayList
specifier|public
class|class
name|ChunkedArrayList
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractList
argument_list|<
name|T
argument_list|>
block|{
comment|/**    * The chunks which make up the full list.    */
DECL|field|chunks
specifier|private
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|chunks
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|/**    * Cache of the last element in the 'chunks' array above.    * This speeds up the add operation measurably.    */
DECL|field|lastChunk
specifier|private
name|List
argument_list|<
name|T
argument_list|>
name|lastChunk
init|=
literal|null
decl_stmt|;
comment|/**    * The capacity with which the last chunk was allocated.    */
DECL|field|lastChunkCapacity
specifier|private
name|int
name|lastChunkCapacity
decl_stmt|;
comment|/**    * The capacity of the first chunk to allocate in a cleared list.    */
DECL|field|initialChunkCapacity
specifier|private
specifier|final
name|int
name|initialChunkCapacity
decl_stmt|;
comment|/**    * The maximum number of elements for any chunk.    */
DECL|field|maxChunkSize
specifier|private
specifier|final
name|int
name|maxChunkSize
decl_stmt|;
comment|/**    * Total number of elements in the list.    */
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
comment|/**    * Default initial size is 6 elements, since typical minimum object    * size is 64 bytes, and this leaves enough space for the object    * header.    */
DECL|field|DEFAULT_INITIAL_CHUNK_CAPACITY
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_INITIAL_CHUNK_CAPACITY
init|=
literal|6
decl_stmt|;
comment|/**    * Default max size is 8K elements - which, at 8 bytes per element    * should be about 64KB -- small enough to easily fit in contiguous    * free heap space even with a fair amount of fragmentation.    */
DECL|field|DEFAULT_MAX_CHUNK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_CHUNK_SIZE
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
DECL|method|ChunkedArrayList ()
specifier|public
name|ChunkedArrayList
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_INITIAL_CHUNK_CAPACITY
argument_list|,
name|DEFAULT_MAX_CHUNK_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param initialChunkCapacity the capacity of the first chunk to be    * allocated    * @param maxChunkSize the maximum size of any chunk allocated    */
DECL|method|ChunkedArrayList (int initialChunkCapacity, int maxChunkSize)
specifier|public
name|ChunkedArrayList
parameter_list|(
name|int
name|initialChunkCapacity
parameter_list|,
name|int
name|maxChunkSize
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|maxChunkSize
operator|>=
name|initialChunkCapacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialChunkCapacity
operator|=
name|initialChunkCapacity
expr_stmt|;
name|this
operator|.
name|maxChunkSize
operator|=
name|maxChunkSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|chunks
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|add (T e)
specifier|public
name|boolean
name|add
parameter_list|(
name|T
name|e
parameter_list|)
block|{
if|if
condition|(
name|lastChunk
operator|==
literal|null
condition|)
block|{
name|addChunk
argument_list|(
name|initialChunkCapacity
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastChunk
operator|.
name|size
argument_list|()
operator|>=
name|lastChunkCapacity
condition|)
block|{
name|int
name|newCapacity
init|=
name|lastChunkCapacity
operator|+
operator|(
name|lastChunkCapacity
operator|>>
literal|1
operator|)
decl_stmt|;
name|addChunk
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|newCapacity
argument_list|,
name|maxChunkSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|size
operator|++
expr_stmt|;
return|return
name|lastChunk
operator|.
name|add
argument_list|(
name|e
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|chunks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lastChunk
operator|=
literal|null
expr_stmt|;
name|lastChunkCapacity
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|addChunk (int capacity)
specifier|private
name|void
name|addChunk
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|lastChunk
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
name|chunks
operator|.
name|add
argument_list|(
name|lastChunk
argument_list|)
expr_stmt|;
name|lastChunkCapacity
operator|=
name|capacity
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNumChunks ()
name|int
name|getNumChunks
parameter_list|()
block|{
return|return
name|chunks
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMaxChunkSize ()
name|int
name|getMaxChunkSize
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|T
argument_list|>
name|chunk
range|:
name|chunks
control|)
block|{
name|size
operator|=
name|Math
operator|.
name|max
argument_list|(
name|size
argument_list|,
name|chunk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|get (int arg0)
specifier|public
name|T
name|get
parameter_list|(
name|int
name|arg0
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" does not support random access"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

