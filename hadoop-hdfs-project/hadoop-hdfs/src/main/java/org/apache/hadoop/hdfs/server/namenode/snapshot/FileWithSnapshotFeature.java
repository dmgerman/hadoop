begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|QuotaCounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_comment
comment|/**  * Feature for file with snapshot-related information.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FileWithSnapshotFeature
specifier|public
class|class
name|FileWithSnapshotFeature
implements|implements
name|INode
operator|.
name|Feature
block|{
DECL|field|diffs
specifier|private
specifier|final
name|FileDiffList
name|diffs
decl_stmt|;
DECL|field|isCurrentFileDeleted
specifier|private
name|boolean
name|isCurrentFileDeleted
init|=
literal|false
decl_stmt|;
DECL|method|FileWithSnapshotFeature (FileDiffList diffs)
specifier|public
name|FileWithSnapshotFeature
parameter_list|(
name|FileDiffList
name|diffs
parameter_list|)
block|{
name|this
operator|.
name|diffs
operator|=
name|diffs
operator|!=
literal|null
condition|?
name|diffs
else|:
operator|new
name|FileDiffList
argument_list|()
expr_stmt|;
block|}
DECL|method|isCurrentFileDeleted ()
specifier|public
name|boolean
name|isCurrentFileDeleted
parameter_list|()
block|{
return|return
name|isCurrentFileDeleted
return|;
block|}
comment|/**     * We need to distinguish two scenarios:    * 1) the file is still in the current file directory, it has been modified     *    before while it is included in some snapshot    * 2) the file is not in the current file directory (deleted), but it is in    *    some snapshot, thus we still keep this inode    * For both scenarios the file has snapshot feature. We set     * {@link #isCurrentFileDeleted} to true for 2).    */
DECL|method|deleteCurrentFile ()
specifier|public
name|void
name|deleteCurrentFile
parameter_list|()
block|{
name|isCurrentFileDeleted
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getDiffs ()
specifier|public
name|FileDiffList
name|getDiffs
parameter_list|()
block|{
return|return
name|diffs
return|;
block|}
comment|/** @return the max replication factor in diffs */
DECL|method|getMaxBlockRepInDiffs ()
specifier|public
name|short
name|getMaxBlockRepInDiffs
parameter_list|()
block|{
name|short
name|max
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileDiff
name|d
range|:
name|getDiffs
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
specifier|final
name|short
name|replication
init|=
name|d
operator|.
name|snapshotINode
operator|.
name|getFileReplication
argument_list|()
decl_stmt|;
if|if
condition|(
name|replication
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|replication
expr_stmt|;
block|}
block|}
block|}
return|return
name|max
return|;
block|}
DECL|method|changedBetweenSnapshots (INodeFile file, Snapshot from, Snapshot to)
name|boolean
name|changedBetweenSnapshots
parameter_list|(
name|INodeFile
name|file
parameter_list|,
name|Snapshot
name|from
parameter_list|,
name|Snapshot
name|to
parameter_list|)
block|{
name|int
index|[]
name|diffIndexPair
init|=
name|diffs
operator|.
name|changedBetweenSnapshots
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|diffIndexPair
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|earlierDiffIndex
init|=
name|diffIndexPair
index|[
literal|0
index|]
decl_stmt|;
name|int
name|laterDiffIndex
init|=
name|diffIndexPair
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FileDiff
argument_list|>
name|diffList
init|=
name|diffs
operator|.
name|asList
argument_list|()
decl_stmt|;
specifier|final
name|long
name|earlierLength
init|=
name|diffList
operator|.
name|get
argument_list|(
name|earlierDiffIndex
argument_list|)
operator|.
name|getFileSize
argument_list|()
decl_stmt|;
specifier|final
name|long
name|laterLength
init|=
name|laterDiffIndex
operator|==
name|diffList
operator|.
name|size
argument_list|()
condition|?
name|file
operator|.
name|computeFileSize
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
else|:
name|diffList
operator|.
name|get
argument_list|(
name|laterDiffIndex
argument_list|)
operator|.
name|getFileSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|earlierLength
operator|!=
name|laterLength
condition|)
block|{
comment|// file length has been changed
return|return
literal|true
return|;
block|}
name|INodeFileAttributes
name|earlierAttr
init|=
literal|null
decl_stmt|;
comment|// check the metadata
for|for
control|(
name|int
name|i
init|=
name|earlierDiffIndex
init|;
name|i
operator|<
name|laterDiffIndex
condition|;
name|i
operator|++
control|)
block|{
name|FileDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
name|earlierAttr
operator|=
name|diff
operator|.
name|snapshotINode
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|earlierAttr
operator|==
literal|null
condition|)
block|{
comment|// no meta-change at all, return false
return|return
literal|false
return|;
block|}
name|INodeFileAttributes
name|laterAttr
init|=
name|diffs
operator|.
name|getSnapshotINode
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Snapshot
operator|.
name|getSnapshotId
argument_list|(
name|from
argument_list|)
argument_list|,
name|Snapshot
operator|.
name|getSnapshotId
argument_list|(
name|to
argument_list|)
argument_list|)
argument_list|,
name|file
argument_list|)
decl_stmt|;
return|return
operator|!
name|earlierAttr
operator|.
name|metadataEquals
argument_list|(
name|laterAttr
argument_list|)
return|;
block|}
DECL|method|getDetailedString ()
specifier|public
name|String
name|getDetailedString
parameter_list|()
block|{
return|return
operator|(
name|isCurrentFileDeleted
argument_list|()
condition|?
literal|"(DELETED), "
else|:
literal|", "
operator|)
operator|+
name|diffs
return|;
block|}
DECL|method|cleanFile (INode.ReclaimContext reclaimContext, final INodeFile file, final int snapshotId, int priorSnapshotId, byte storagePolicyId)
specifier|public
name|void
name|cleanFile
parameter_list|(
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|,
specifier|final
name|INodeFile
name|file
parameter_list|,
specifier|final
name|int
name|snapshotId
parameter_list|,
name|int
name|priorSnapshotId
parameter_list|,
name|byte
name|storagePolicyId
parameter_list|)
block|{
if|if
condition|(
name|snapshotId
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
condition|)
block|{
comment|// delete the current file while the file has snapshot feature
if|if
condition|(
operator|!
name|isCurrentFileDeleted
argument_list|()
condition|)
block|{
name|file
operator|.
name|recordModification
argument_list|(
name|priorSnapshotId
argument_list|)
expr_stmt|;
name|deleteCurrentFile
argument_list|()
expr_stmt|;
block|}
specifier|final
name|BlockStoragePolicy
name|policy
init|=
name|reclaimContext
operator|.
name|storagePolicySuite
argument_list|()
operator|.
name|getPolicy
argument_list|(
name|storagePolicyId
argument_list|)
decl_stmt|;
name|QuotaCounts
name|old
init|=
name|file
operator|.
name|storagespaceConsumed
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|collectBlocksAndClear
argument_list|(
name|reclaimContext
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QuotaCounts
name|current
init|=
name|file
operator|.
name|storagespaceConsumed
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|add
argument_list|(
name|old
operator|.
name|subtract
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// delete the snapshot
name|priorSnapshotId
operator|=
name|getDiffs
argument_list|()
operator|.
name|updatePrior
argument_list|(
name|snapshotId
argument_list|,
name|priorSnapshotId
argument_list|)
expr_stmt|;
name|diffs
operator|.
name|deleteSnapshotDiff
argument_list|(
name|reclaimContext
argument_list|,
name|snapshotId
argument_list|,
name|priorSnapshotId
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clearDiffs ()
specifier|public
name|void
name|clearDiffs
parameter_list|()
block|{
name|this
operator|.
name|diffs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|updateQuotaAndCollectBlocks (INode.ReclaimContext reclaimContext, INodeFile file, FileDiff removed)
specifier|public
name|void
name|updateQuotaAndCollectBlocks
parameter_list|(
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|,
name|INodeFile
name|file
parameter_list|,
name|FileDiff
name|removed
parameter_list|)
block|{
name|byte
name|storagePolicyID
init|=
name|file
operator|.
name|getStoragePolicyID
argument_list|()
decl_stmt|;
name|BlockStoragePolicy
name|bsp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|storagePolicyID
operator|!=
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
condition|)
block|{
name|bsp
operator|=
name|reclaimContext
operator|.
name|storagePolicySuite
argument_list|()
operator|.
name|getPolicy
argument_list|(
name|file
operator|.
name|getStoragePolicyID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QuotaCounts
name|oldCounts
init|=
name|file
operator|.
name|storagespaceConsumed
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|long
name|oldStoragespace
decl_stmt|;
if|if
condition|(
name|removed
operator|.
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
name|short
name|replication
init|=
name|removed
operator|.
name|snapshotINode
operator|.
name|getFileReplication
argument_list|()
decl_stmt|;
name|short
name|currentRepl
init|=
name|file
operator|.
name|getPreferredBlockReplication
argument_list|()
decl_stmt|;
if|if
condition|(
name|replication
operator|>
name|currentRepl
condition|)
block|{
name|long
name|oldFileSizeNoRep
init|=
name|currentRepl
operator|==
literal|0
condition|?
name|file
operator|.
name|computeFileSize
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
else|:
name|oldCounts
operator|.
name|getStorageSpace
argument_list|()
operator|/
name|file
operator|.
name|getPreferredBlockReplication
argument_list|()
decl_stmt|;
name|oldStoragespace
operator|=
name|oldFileSizeNoRep
operator|*
name|replication
expr_stmt|;
name|oldCounts
operator|.
name|setStorageSpace
argument_list|(
name|oldStoragespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|bsp
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|StorageType
argument_list|>
name|oldTypeChosen
init|=
name|bsp
operator|.
name|chooseStorageTypes
argument_list|(
name|replication
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|oldTypeChosen
control|)
block|{
if|if
condition|(
name|t
operator|.
name|supportTypeQuota
argument_list|()
condition|)
block|{
name|oldCounts
operator|.
name|addTypeSpace
argument_list|(
name|t
argument_list|,
name|oldFileSizeNoRep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|AclFeature
name|aclFeature
init|=
name|removed
operator|.
name|getSnapshotINode
argument_list|()
operator|.
name|getAclFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|aclFeature
operator|!=
literal|null
condition|)
block|{
name|AclStorage
operator|.
name|removeAclFeature
argument_list|(
name|aclFeature
argument_list|)
expr_stmt|;
block|}
block|}
name|getDiffs
argument_list|()
operator|.
name|combineAndCollectSnapshotBlocks
argument_list|(
name|reclaimContext
argument_list|,
name|file
argument_list|,
name|removed
argument_list|)
expr_stmt|;
name|QuotaCounts
name|current
init|=
name|file
operator|.
name|storagespaceConsumed
argument_list|(
name|bsp
argument_list|)
decl_stmt|;
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|add
argument_list|(
name|oldCounts
operator|.
name|subtract
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * If some blocks at the end of the block list no longer belongs to    * any inode, collect them and update the block list.    */
DECL|method|collectBlocksAndClear ( INode.ReclaimContext reclaimContext, final INodeFile file)
specifier|public
name|void
name|collectBlocksAndClear
parameter_list|(
name|INode
operator|.
name|ReclaimContext
name|reclaimContext
parameter_list|,
specifier|final
name|INodeFile
name|file
parameter_list|)
block|{
comment|// check if everything is deleted.
if|if
condition|(
name|isCurrentFileDeleted
argument_list|()
operator|&&
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|file
operator|.
name|clearFile
argument_list|(
name|reclaimContext
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// find max file size.
specifier|final
name|long
name|max
decl_stmt|;
name|FileDiff
name|diff
init|=
name|getDiffs
argument_list|()
operator|.
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|isCurrentFileDeleted
argument_list|()
condition|)
block|{
name|max
operator|=
name|diff
operator|==
literal|null
condition|?
literal|0
else|:
name|diff
operator|.
name|getFileSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|file
operator|.
name|computeFileSize
argument_list|()
expr_stmt|;
block|}
comment|// Collect blocks that should be deleted
name|FileDiff
name|last
init|=
name|diffs
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|BlockInfo
index|[]
name|snapshotBlocks
init|=
name|last
operator|==
literal|null
condition|?
literal|null
else|:
name|last
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshotBlocks
operator|==
literal|null
condition|)
name|file
operator|.
name|collectBlocksBeyondMax
argument_list|(
name|max
argument_list|,
name|reclaimContext
operator|.
name|collectedBlocks
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|file
operator|.
name|collectBlocksBeyondSnapshot
argument_list|(
name|snapshotBlocks
argument_list|,
name|reclaimContext
operator|.
name|collectedBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

