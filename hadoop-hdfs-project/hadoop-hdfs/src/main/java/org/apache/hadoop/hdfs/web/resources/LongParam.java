begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_comment
comment|/** Long parameter. */
end_comment

begin_class
DECL|class|LongParam
specifier|abstract
class|class
name|LongParam
extends|extends
name|Param
argument_list|<
name|Long
argument_list|,
name|LongParam
operator|.
name|Domain
argument_list|>
block|{
DECL|method|LongParam (final Domain domain, final Long value, final Long min, final Long max)
name|LongParam
parameter_list|(
specifier|final
name|Domain
name|domain
parameter_list|,
specifier|final
name|Long
name|value
parameter_list|,
specifier|final
name|Long
name|min
parameter_list|,
specifier|final
name|Long
name|max
parameter_list|)
block|{
name|super
argument_list|(
name|domain
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|checkRange
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRange (final Long min, final Long max)
specifier|private
name|void
name|checkRange
parameter_list|(
specifier|final
name|Long
name|min
parameter_list|,
specifier|final
name|Long
name|max
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|min
operator|!=
literal|null
operator|&&
name|value
operator|<
name|min
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid parameter range: "
operator|+
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|domain
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"< "
operator|+
name|domain
operator|.
name|toString
argument_list|(
name|min
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|max
operator|!=
literal|null
operator|&&
name|value
operator|>
name|max
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid parameter range: "
operator|+
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|domain
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"> "
operator|+
name|domain
operator|.
name|toString
argument_list|(
name|max
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|domain
operator|.
name|toString
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** @return the parameter value as a string */
annotation|@
name|Override
DECL|method|getValueString ()
specifier|public
name|String
name|getValueString
parameter_list|()
block|{
return|return
name|domain
operator|.
name|toString
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** The domain of the parameter. */
DECL|class|Domain
specifier|static
specifier|final
class|class
name|Domain
extends|extends
name|Param
operator|.
name|Domain
argument_list|<
name|Long
argument_list|>
block|{
comment|/** The radix of the number. */
DECL|field|radix
specifier|final
name|int
name|radix
decl_stmt|;
DECL|method|Domain (final String paramName)
name|Domain
parameter_list|(
specifier|final
name|String
name|paramName
parameter_list|)
block|{
name|this
argument_list|(
name|paramName
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|Domain (final String paramName, final int radix)
name|Domain
parameter_list|(
specifier|final
name|String
name|paramName
parameter_list|,
specifier|final
name|int
name|radix
parameter_list|)
block|{
name|super
argument_list|(
name|paramName
argument_list|)
expr_stmt|;
name|this
operator|.
name|radix
operator|=
name|radix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDomain ()
specifier|public
name|String
name|getDomain
parameter_list|()
block|{
return|return
literal|"<"
operator|+
name|NULL
operator|+
literal|" | long in radix "
operator|+
name|radix
operator|+
literal|">"
return|;
block|}
annotation|@
name|Override
DECL|method|parse (final String str)
name|Long
name|parse
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
try|try
block|{
return|return
name|NULL
operator|.
name|equals
argument_list|(
name|str
argument_list|)
condition|?
literal|null
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|str
argument_list|,
name|radix
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse \""
operator|+
name|str
operator|+
literal|"\" as a radix-"
operator|+
name|radix
operator|+
literal|" long integer."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Convert a Long to a String. */
DECL|method|toString (final Long n)
name|String
name|toString
parameter_list|(
specifier|final
name|Long
name|n
parameter_list|)
block|{
return|return
name|n
operator|==
literal|null
condition|?
name|NULL
else|:
name|Long
operator|.
name|toString
argument_list|(
name|n
argument_list|,
name|radix
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

