begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|EnumCounters
import|;
end_import

begin_comment
comment|/**  * The counter to be computed for content types such as file, directory and symlink,  * and the storage type usage such as SSD, DISK, ARCHIVE.  */
end_comment

begin_class
DECL|class|ContentCounts
specifier|public
class|class
name|ContentCounts
block|{
DECL|field|contents
specifier|private
name|EnumCounters
argument_list|<
name|Content
argument_list|>
name|contents
decl_stmt|;
DECL|field|types
specifier|private
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|types
decl_stmt|;
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|contents
specifier|private
name|EnumCounters
argument_list|<
name|Content
argument_list|>
name|contents
decl_stmt|;
comment|// storage spaces used by corresponding storage types
DECL|field|types
specifier|private
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|types
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|contents
operator|=
operator|new
name|EnumCounters
argument_list|<
name|Content
argument_list|>
argument_list|(
name|Content
operator|.
name|class
argument_list|)
expr_stmt|;
name|types
operator|=
operator|new
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|file (long file)
specifier|public
name|Builder
name|file
parameter_list|(
name|long
name|file
parameter_list|)
block|{
name|contents
operator|.
name|set
argument_list|(
name|Content
operator|.
name|FILE
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|directory (long directory)
specifier|public
name|Builder
name|directory
parameter_list|(
name|long
name|directory
parameter_list|)
block|{
name|contents
operator|.
name|set
argument_list|(
name|Content
operator|.
name|DIRECTORY
argument_list|,
name|directory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|symlink (long symlink)
specifier|public
name|Builder
name|symlink
parameter_list|(
name|long
name|symlink
parameter_list|)
block|{
name|contents
operator|.
name|set
argument_list|(
name|Content
operator|.
name|SYMLINK
argument_list|,
name|symlink
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|length (long length)
specifier|public
name|Builder
name|length
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|contents
operator|.
name|set
argument_list|(
name|Content
operator|.
name|LENGTH
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|storagespace (long storagespace)
specifier|public
name|Builder
name|storagespace
parameter_list|(
name|long
name|storagespace
parameter_list|)
block|{
name|contents
operator|.
name|set
argument_list|(
name|Content
operator|.
name|DISKSPACE
argument_list|,
name|storagespace
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|snapshot (long snapshot)
specifier|public
name|Builder
name|snapshot
parameter_list|(
name|long
name|snapshot
parameter_list|)
block|{
name|contents
operator|.
name|set
argument_list|(
name|Content
operator|.
name|SNAPSHOT
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|snapshotable_directory (long snapshotable_directory)
specifier|public
name|Builder
name|snapshotable_directory
parameter_list|(
name|long
name|snapshotable_directory
parameter_list|)
block|{
name|contents
operator|.
name|set
argument_list|(
name|Content
operator|.
name|SNAPSHOTTABLE_DIRECTORY
argument_list|,
name|snapshotable_directory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|ContentCounts
name|build
parameter_list|()
block|{
return|return
operator|new
name|ContentCounts
argument_list|(
name|contents
argument_list|,
name|types
argument_list|)
return|;
block|}
block|}
DECL|method|ContentCounts (EnumCounters<Content> contents, EnumCounters<StorageType> types)
specifier|private
name|ContentCounts
parameter_list|(
name|EnumCounters
argument_list|<
name|Content
argument_list|>
name|contents
parameter_list|,
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|types
parameter_list|)
block|{
name|this
operator|.
name|contents
operator|=
name|contents
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
block|}
comment|// Get the number of files.
DECL|method|getFileCount ()
specifier|public
name|long
name|getFileCount
parameter_list|()
block|{
return|return
name|contents
operator|.
name|get
argument_list|(
name|Content
operator|.
name|FILE
argument_list|)
return|;
block|}
comment|// Get the number of directories.
DECL|method|getDirectoryCount ()
specifier|public
name|long
name|getDirectoryCount
parameter_list|()
block|{
return|return
name|contents
operator|.
name|get
argument_list|(
name|Content
operator|.
name|DIRECTORY
argument_list|)
return|;
block|}
comment|// Get the number of symlinks.
DECL|method|getSymlinkCount ()
specifier|public
name|long
name|getSymlinkCount
parameter_list|()
block|{
return|return
name|contents
operator|.
name|get
argument_list|(
name|Content
operator|.
name|SYMLINK
argument_list|)
return|;
block|}
comment|// Get the total of file length in bytes.
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|contents
operator|.
name|get
argument_list|(
name|Content
operator|.
name|LENGTH
argument_list|)
return|;
block|}
comment|// Get the total of storage space usage in bytes including replication.
DECL|method|getStoragespace ()
specifier|public
name|long
name|getStoragespace
parameter_list|()
block|{
return|return
name|contents
operator|.
name|get
argument_list|(
name|Content
operator|.
name|DISKSPACE
argument_list|)
return|;
block|}
comment|// Get the number of snapshots
DECL|method|getSnapshotCount ()
specifier|public
name|long
name|getSnapshotCount
parameter_list|()
block|{
return|return
name|contents
operator|.
name|get
argument_list|(
name|Content
operator|.
name|SNAPSHOT
argument_list|)
return|;
block|}
comment|// Get the number of snapshottable directories.
DECL|method|getSnapshotableDirectoryCount ()
specifier|public
name|long
name|getSnapshotableDirectoryCount
parameter_list|()
block|{
return|return
name|contents
operator|.
name|get
argument_list|(
name|Content
operator|.
name|SNAPSHOTTABLE_DIRECTORY
argument_list|)
return|;
block|}
DECL|method|getTypeSpaces ()
specifier|public
name|long
index|[]
name|getTypeSpaces
parameter_list|()
block|{
return|return
name|types
operator|.
name|asArray
argument_list|()
return|;
block|}
DECL|method|getTypeSpace (StorageType t)
specifier|public
name|long
name|getTypeSpace
parameter_list|(
name|StorageType
name|t
parameter_list|)
block|{
return|return
name|types
operator|.
name|get
argument_list|(
name|t
argument_list|)
return|;
block|}
DECL|method|addContent (Content c, long val)
specifier|public
name|void
name|addContent
parameter_list|(
name|Content
name|c
parameter_list|,
name|long
name|val
parameter_list|)
block|{
name|contents
operator|.
name|add
argument_list|(
name|c
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|addContents (ContentCounts that)
specifier|public
name|void
name|addContents
parameter_list|(
name|ContentCounts
name|that
parameter_list|)
block|{
name|contents
operator|.
name|add
argument_list|(
name|that
operator|.
name|contents
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|that
operator|.
name|types
argument_list|)
expr_stmt|;
block|}
DECL|method|addTypeSpace (StorageType t, long val)
specifier|public
name|void
name|addTypeSpace
parameter_list|(
name|StorageType
name|t
parameter_list|,
name|long
name|val
parameter_list|)
block|{
name|types
operator|.
name|add
argument_list|(
name|t
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|addTypeSpaces (EnumCounters<StorageType> that)
specifier|public
name|void
name|addTypeSpaces
parameter_list|(
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|that
parameter_list|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|that
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

