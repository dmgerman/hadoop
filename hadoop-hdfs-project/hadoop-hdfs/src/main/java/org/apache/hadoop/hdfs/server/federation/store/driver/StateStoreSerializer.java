begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store.driver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|BaseRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Serializer to store and retrieve data in the State Store.  */
end_comment

begin_class
DECL|class|StateStoreSerializer
specifier|public
specifier|abstract
class|class
name|StateStoreSerializer
block|{
comment|/** Singleton for the serializer instance. */
DECL|field|defaultSerializer
specifier|private
specifier|static
name|StateStoreSerializer
name|defaultSerializer
decl_stmt|;
comment|/**    * Get the default serializer based.    * @return Singleton serializer.    */
DECL|method|getSerializer ()
specifier|public
specifier|static
name|StateStoreSerializer
name|getSerializer
parameter_list|()
block|{
return|return
name|getSerializer
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get a serializer based on the provided configuration.    * @param conf Configuration. Default if null.    * @return Singleton serializer.    */
DECL|method|getSerializer (Configuration conf)
specifier|public
specifier|static
name|StateStoreSerializer
name|getSerializer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|StateStoreSerializer
operator|.
name|class
init|)
block|{
if|if
condition|(
name|defaultSerializer
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|defaultSerializer
operator|=
name|newSerializer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|defaultSerializer
return|;
block|}
else|else
block|{
return|return
name|newSerializer
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
DECL|method|newSerializer (final Configuration conf)
specifier|private
specifier|static
name|StateStoreSerializer
name|newSerializer
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|StateStoreSerializer
argument_list|>
name|serializerName
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFSConfigKeys
operator|.
name|FEDERATION_STORE_SERIALIZER_CLASS
argument_list|,
name|DFSConfigKeys
operator|.
name|FEDERATION_STORE_SERIALIZER_CLASS_DEFAULT
argument_list|,
name|StateStoreSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|serializerName
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Create a new record.    * @param clazz Class of the new record.    * @return New record.    */
DECL|method|newRecord (Class<T> clazz)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newRecord
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|getSerializer
argument_list|(
literal|null
argument_list|)
operator|.
name|newRecordInstance
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/**    * Create a new record.    * @param clazz Class of the new record.    * @return New record.    */
DECL|method|newRecordInstance (Class<T> clazz)
specifier|public
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|T
name|newRecordInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
function_decl|;
comment|/**    * Serialize a record into a byte array.    * @param record Record to serialize.    * @return Byte array with the serialized record.    */
DECL|method|serialize (BaseRecord record)
specifier|public
specifier|abstract
name|byte
index|[]
name|serialize
parameter_list|(
name|BaseRecord
name|record
parameter_list|)
function_decl|;
comment|/**    * Serialize a record into a string.    * @param record Record to serialize.    * @return String with the serialized record.    */
DECL|method|serializeString (BaseRecord record)
specifier|public
specifier|abstract
name|String
name|serializeString
parameter_list|(
name|BaseRecord
name|record
parameter_list|)
function_decl|;
comment|/**    * Deserialize a bytes array into a record.    * @param byteArray Byte array to deserialize.    * @param clazz Class of the record.    * @return New record.    * @throws IOException If it cannot deserialize the record.    */
DECL|method|deserialize ( byte[] byteArray, Class<T> clazz)
specifier|public
specifier|abstract
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|T
name|deserialize
parameter_list|(
name|byte
index|[]
name|byteArray
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Deserialize a string into a record.    * @param data String with the data to deserialize.    * @param clazz Class of the record.    * @return New record.    * @throws IOException If it cannot deserialize the record.    */
DECL|method|deserialize ( String data, Class<T> clazz)
specifier|public
specifier|abstract
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
name|T
name|deserialize
parameter_list|(
name|String
name|data
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

