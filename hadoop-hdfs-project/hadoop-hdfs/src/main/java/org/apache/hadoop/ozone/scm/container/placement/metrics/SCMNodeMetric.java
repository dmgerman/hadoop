begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.container.placement.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * SCM Node Metric that is used in the placement classes.  */
end_comment

begin_class
DECL|class|SCMNodeMetric
specifier|public
class|class
name|SCMNodeMetric
implements|implements
name|DatanodeMetric
argument_list|<
name|SCMNodeStat
argument_list|,
name|Long
argument_list|>
block|{
DECL|field|stat
specifier|private
name|SCMNodeStat
name|stat
decl_stmt|;
comment|/**    * Constructs an SCMNode Metric.    *    * @param stat - SCMNodeStat.    */
DECL|method|SCMNodeMetric (SCMNodeStat stat)
specifier|public
name|SCMNodeMetric
parameter_list|(
name|SCMNodeStat
name|stat
parameter_list|)
block|{
name|this
operator|.
name|stat
operator|=
name|stat
expr_stmt|;
block|}
comment|/**    * Set the capacity, used and remaining space on a datanode.    *    * @param capacity in bytes    * @param used in bytes    * @param remaining in bytes    */
annotation|@
name|VisibleForTesting
DECL|method|SCMNodeMetric (long capacity, long used, long remaining)
specifier|public
name|SCMNodeMetric
parameter_list|(
name|long
name|capacity
parameter_list|,
name|long
name|used
parameter_list|,
name|long
name|remaining
parameter_list|)
block|{
name|this
operator|.
name|stat
operator|=
operator|new
name|SCMNodeStat
argument_list|()
expr_stmt|;
name|this
operator|.
name|stat
operator|.
name|set
argument_list|(
name|capacity
argument_list|,
name|used
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @param o - Other Object    * @return - True if *this* object is greater than argument.    */
annotation|@
name|Override
DECL|method|isGreater (SCMNodeStat o)
specifier|public
name|boolean
name|isGreater
parameter_list|(
name|SCMNodeStat
name|o
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|o
argument_list|,
literal|"Argument cannot be null"
argument_list|)
expr_stmt|;
comment|// if zero, replace with 1 for the division to work.
name|long
name|thisDenominator
init|=
operator|(
name|this
operator|.
name|stat
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
name|this
operator|.
name|stat
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|otherDenominator
init|=
operator|(
name|o
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
name|o
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|float
name|thisNodeWeight
init|=
name|stat
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|/
operator|(
name|float
operator|)
name|thisDenominator
decl_stmt|;
name|float
name|oNodeWeight
init|=
name|o
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|/
operator|(
name|float
operator|)
name|otherDenominator
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|thisNodeWeight
operator|-
name|oNodeWeight
argument_list|)
operator|>
literal|0.000001
condition|)
block|{
return|return
name|thisNodeWeight
operator|>
name|oNodeWeight
return|;
block|}
comment|// if these nodes are have similar weight then return the node with more
comment|// free space as the greater node.
return|return
name|stat
operator|.
name|getRemaining
argument_list|()
operator|.
name|isGreater
argument_list|(
name|o
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Inverse of isGreater.    *    * @param o - other object.    * @return True if *this* object is Lesser than argument.    */
annotation|@
name|Override
DECL|method|isLess (SCMNodeStat o)
specifier|public
name|boolean
name|isLess
parameter_list|(
name|SCMNodeStat
name|o
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|o
argument_list|,
literal|"Argument cannot be null"
argument_list|)
expr_stmt|;
comment|// if zero, replace with 1 for the division to work.
name|long
name|thisDenominator
init|=
operator|(
name|this
operator|.
name|stat
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
name|this
operator|.
name|stat
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|otherDenominator
init|=
operator|(
name|o
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
name|o
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|float
name|thisNodeWeight
init|=
name|stat
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|/
operator|(
name|float
operator|)
name|thisDenominator
decl_stmt|;
name|float
name|oNodeWeight
init|=
name|o
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|/
operator|(
name|float
operator|)
name|otherDenominator
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|thisNodeWeight
operator|-
name|oNodeWeight
argument_list|)
operator|>
literal|0.000001
condition|)
block|{
return|return
name|thisNodeWeight
operator|<
name|oNodeWeight
return|;
block|}
comment|// if these nodes are have similar weight then return the node with less
comment|// free space as the lesser node.
return|return
name|stat
operator|.
name|getRemaining
argument_list|()
operator|.
name|isLess
argument_list|(
name|o
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns true if the object has same values. Because of issues with    * equals, and loss of type information this interface supports isEqual.    *    * @param o object to compare.    * @return True, if the values match.    * TODO : Consider if it makes sense to add remaining to this equation.    */
annotation|@
name|Override
DECL|method|isEqual (SCMNodeStat o)
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|SCMNodeStat
name|o
parameter_list|)
block|{
name|float
name|thisNodeWeight
init|=
name|stat
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|/
operator|(
name|float
operator|)
name|stat
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|float
name|oNodeWeight
init|=
name|o
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
operator|/
operator|(
name|float
operator|)
name|o
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|Math
operator|.
name|abs
argument_list|(
name|thisNodeWeight
operator|-
name|oNodeWeight
argument_list|)
operator|<
literal|0.000001
return|;
block|}
comment|/**    * A resourceCheck, defined by resourceNeeded.    * For example, S could be bytes required    * and DatanodeMetric can reply by saying it can be met or not.    *    * @param resourceNeeded -  ResourceNeeded in its own metric.    * @return boolean, True if this resource requirement can be met.    */
annotation|@
name|Override
DECL|method|hasResources (Long resourceNeeded)
specifier|public
name|boolean
name|hasResources
parameter_list|(
name|Long
name|resourceNeeded
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Returns the metric.    *    * @return T, the object that represents this metric.    */
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|SCMNodeStat
name|get
parameter_list|()
block|{
return|return
name|stat
return|;
block|}
comment|/**    * Sets the value of this metric.    *    * @param value - value of the metric.    */
annotation|@
name|Override
DECL|method|set (SCMNodeStat value)
specifier|public
name|void
name|set
parameter_list|(
name|SCMNodeStat
name|value
parameter_list|)
block|{
name|stat
operator|.
name|set
argument_list|(
name|value
operator|.
name|getCapacity
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|value
operator|.
name|getScmUsed
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|value
operator|.
name|getRemaining
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a value of to the base.    *    * @param value - value    */
annotation|@
name|Override
DECL|method|add (SCMNodeStat value)
specifier|public
name|void
name|add
parameter_list|(
name|SCMNodeStat
name|value
parameter_list|)
block|{
name|stat
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * subtract a value.    *    * @param value value    */
annotation|@
name|Override
DECL|method|subtract (SCMNodeStat value)
specifier|public
name|void
name|subtract
parameter_list|(
name|SCMNodeStat
name|value
parameter_list|)
block|{
name|stat
operator|.
name|subtract
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compares this object with the specified object for order.  Returns a    * negative integer, zero, or a positive integer as this object is less    * than, equal to, or greater than the specified object.    *    * @param o the object to be compared.    * @return a negative integer, zero, or a positive integer as this object is    * less than, equal to, or greater than the specified object.    * @throws NullPointerException if the specified object is null    * @throws ClassCastException   if the specified object's type prevents it    *                              from being compared to this object.    */
annotation|@
name|Override
DECL|method|compareTo (SCMNodeStat o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|SCMNodeStat
name|o
parameter_list|)
block|{
if|if
condition|(
name|isEqual
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|isGreater
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SCMNodeMetric
name|that
init|=
operator|(
name|SCMNodeMetric
operator|)
name|o
decl_stmt|;
return|return
name|stat
operator|!=
literal|null
condition|?
name|stat
operator|.
name|equals
argument_list|(
name|that
operator|.
name|stat
argument_list|)
else|:
name|that
operator|.
name|stat
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|stat
operator|!=
literal|null
condition|?
name|stat
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
block|}
end_class

end_unit

