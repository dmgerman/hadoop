begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.diskbalancer.command
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|command
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DiskBalancerWorkStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|DiskBalancerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DiskBalancerCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_comment
comment|/**  * Gets the current status of disk balancer command.  */
end_comment

begin_class
DECL|class|QueryCommand
specifier|public
class|class
name|QueryCommand
extends|extends
name|Command
block|{
comment|/**    * Constructs QueryCommand.    *    * @param conf - Configuration.    */
DECL|method|QueryCommand (Configuration conf)
specifier|public
name|QueryCommand
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|addValidCommandParameters
argument_list|(
name|DiskBalancerCLI
operator|.
name|QUERY
argument_list|,
literal|"Queries the status of disk plan running on a given datanode."
argument_list|)
expr_stmt|;
name|addValidCommandParameters
argument_list|(
name|DiskBalancerCLI
operator|.
name|VERBOSE
argument_list|,
literal|"Prints verbose results."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Executes the Client Calls.    *    * @param cmd - CommandLine    */
annotation|@
name|Override
DECL|method|execute (CommandLine cmd)
specifier|public
name|void
name|execute
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing \"query plan\" command."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DiskBalancerCLI
operator|.
name|QUERY
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCommandOptions
argument_list|(
name|DiskBalancerCLI
operator|.
name|QUERY
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|String
name|nodeName
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|DiskBalancerCLI
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|nodeName
operator|=
name|nodeName
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
name|nodeAddress
init|=
name|nodeName
decl_stmt|;
comment|// if the string is not name:port format use the default port.
if|if
condition|(
operator|!
name|nodeName
operator|.
name|matches
argument_list|(
literal|"[^\\:]+:[0-9]{2,5}"
argument_list|)
condition|)
block|{
name|int
name|defaultIPC
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|getConf
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_ADDRESS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_IPC_ADDRESS_DEFAULT
argument_list|)
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|nodeAddress
operator|=
name|nodeName
operator|+
literal|":"
operator|+
name|defaultIPC
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using default data node port :  {}"
argument_list|,
name|nodeAddress
argument_list|)
expr_stmt|;
block|}
name|ClientDatanodeProtocol
name|dataNode
init|=
name|getDataNodeProxy
argument_list|(
name|nodeAddress
argument_list|)
decl_stmt|;
try|try
block|{
name|DiskBalancerWorkStatus
name|workStatus
init|=
name|dataNode
operator|.
name|queryDiskBalancerPlan
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Plan File: %s%nPlan ID: %s%nResult: %s%n"
argument_list|,
name|workStatus
operator|.
name|getPlanFile
argument_list|()
argument_list|,
name|workStatus
operator|.
name|getPlanID
argument_list|()
argument_list|,
name|workStatus
operator|.
name|getResult
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DiskBalancerCLI
operator|.
name|VERBOSE
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%s"
argument_list|,
name|workStatus
operator|.
name|currentStateString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DiskBalancerException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Query plan failed. ex: {}"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Gets extended help for this command.    */
annotation|@
name|Override
DECL|method|printHelp ()
specifier|public
name|void
name|printHelp
parameter_list|()
block|{
name|String
name|header
init|=
literal|"Query Plan queries a given data node about the "
operator|+
literal|"current state of disk balancer execution.\n\n"
decl_stmt|;
name|String
name|footer
init|=
literal|"\nQuery command retrievs the plan ID and the current "
operator|+
literal|"running state. "
decl_stmt|;
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
literal|"hdfs diskbalancer -query<hostname>  [options]"
argument_list|,
name|header
argument_list|,
name|DiskBalancerCLI
operator|.
name|getQueryOptions
argument_list|()
argument_list|,
name|footer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

