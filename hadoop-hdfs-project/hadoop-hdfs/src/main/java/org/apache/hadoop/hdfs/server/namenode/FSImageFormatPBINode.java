begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoContiguous
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoStriped
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatProtobuf
operator|.
name|LoaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatProtobuf
operator|.
name|SaverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|FileSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|FilesUnderConstructionSection
operator|.
name|FileUnderConstructionEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeDirectorySection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|AclFeatureProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|XAttrCompactProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|XAttrFeatureProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|QuotaByStorageTypeEntryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|QuotaByStorageTypeFeatureProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|EnumCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSImageFormatPBINode
specifier|public
specifier|final
class|class
name|FSImageFormatPBINode
block|{
DECL|field|USER_GROUP_STRID_MASK
specifier|private
specifier|final
specifier|static
name|long
name|USER_GROUP_STRID_MASK
init|=
operator|(
literal|1
operator|<<
literal|24
operator|)
operator|-
literal|1
decl_stmt|;
DECL|field|USER_STRID_OFFSET
specifier|private
specifier|final
specifier|static
name|int
name|USER_STRID_OFFSET
init|=
literal|40
decl_stmt|;
DECL|field|GROUP_STRID_OFFSET
specifier|private
specifier|final
specifier|static
name|int
name|GROUP_STRID_OFFSET
init|=
literal|16
decl_stmt|;
DECL|field|ACL_ENTRY_NAME_MASK
specifier|private
specifier|static
specifier|final
name|int
name|ACL_ENTRY_NAME_MASK
init|=
operator|(
literal|1
operator|<<
literal|24
operator|)
operator|-
literal|1
decl_stmt|;
DECL|field|ACL_ENTRY_NAME_OFFSET
specifier|private
specifier|static
specifier|final
name|int
name|ACL_ENTRY_NAME_OFFSET
init|=
literal|6
decl_stmt|;
DECL|field|ACL_ENTRY_TYPE_OFFSET
specifier|private
specifier|static
specifier|final
name|int
name|ACL_ENTRY_TYPE_OFFSET
init|=
literal|3
decl_stmt|;
DECL|field|ACL_ENTRY_SCOPE_OFFSET
specifier|private
specifier|static
specifier|final
name|int
name|ACL_ENTRY_SCOPE_OFFSET
init|=
literal|5
decl_stmt|;
DECL|field|ACL_ENTRY_PERM_MASK
specifier|private
specifier|static
specifier|final
name|int
name|ACL_ENTRY_PERM_MASK
init|=
literal|7
decl_stmt|;
DECL|field|ACL_ENTRY_TYPE_MASK
specifier|private
specifier|static
specifier|final
name|int
name|ACL_ENTRY_TYPE_MASK
init|=
literal|3
decl_stmt|;
DECL|field|ACL_ENTRY_SCOPE_MASK
specifier|private
specifier|static
specifier|final
name|int
name|ACL_ENTRY_SCOPE_MASK
init|=
literal|1
decl_stmt|;
DECL|field|FSACTION_VALUES
specifier|private
specifier|static
specifier|final
name|FsAction
index|[]
name|FSACTION_VALUES
init|=
name|FsAction
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|field|ACL_ENTRY_SCOPE_VALUES
specifier|private
specifier|static
specifier|final
name|AclEntryScope
index|[]
name|ACL_ENTRY_SCOPE_VALUES
init|=
name|AclEntryScope
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|field|ACL_ENTRY_TYPE_VALUES
specifier|private
specifier|static
specifier|final
name|AclEntryType
index|[]
name|ACL_ENTRY_TYPE_VALUES
init|=
name|AclEntryType
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|field|XATTR_NAMESPACE_MASK
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_NAMESPACE_MASK
init|=
literal|3
decl_stmt|;
DECL|field|XATTR_NAMESPACE_OFFSET
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_NAMESPACE_OFFSET
init|=
literal|30
decl_stmt|;
DECL|field|XATTR_NAME_MASK
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_NAME_MASK
init|=
operator|(
literal|1
operator|<<
literal|24
operator|)
operator|-
literal|1
decl_stmt|;
DECL|field|XATTR_NAME_OFFSET
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_NAME_OFFSET
init|=
literal|6
decl_stmt|;
comment|/* See the comments in fsimage.proto for an explanation of the following. */
DECL|field|XATTR_NAMESPACE_EXT_OFFSET
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_NAMESPACE_EXT_OFFSET
init|=
literal|5
decl_stmt|;
DECL|field|XATTR_NAMESPACE_EXT_MASK
specifier|private
specifier|static
specifier|final
name|int
name|XATTR_NAMESPACE_EXT_MASK
init|=
literal|1
decl_stmt|;
DECL|field|XATTR_NAMESPACE_VALUES
specifier|private
specifier|static
specifier|final
name|XAttr
operator|.
name|NameSpace
index|[]
name|XATTR_NAMESPACE_VALUES
init|=
name|XAttr
operator|.
name|NameSpace
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSImageFormatPBINode
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|Loader
specifier|public
specifier|final
specifier|static
class|class
name|Loader
block|{
DECL|method|loadPermission (long id, final String[] stringTable)
specifier|public
specifier|static
name|PermissionStatus
name|loadPermission
parameter_list|(
name|long
name|id
parameter_list|,
specifier|final
name|String
index|[]
name|stringTable
parameter_list|)
block|{
name|short
name|perm
init|=
call|(
name|short
call|)
argument_list|(
name|id
operator|&
operator|(
operator|(
literal|1
operator|<<
name|GROUP_STRID_OFFSET
operator|)
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|int
name|gsid
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|id
operator|>>
name|GROUP_STRID_OFFSET
operator|)
operator|&
name|USER_GROUP_STRID_MASK
argument_list|)
decl_stmt|;
name|int
name|usid
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|id
operator|>>
name|USER_STRID_OFFSET
operator|)
operator|&
name|USER_GROUP_STRID_MASK
argument_list|)
decl_stmt|;
return|return
operator|new
name|PermissionStatus
argument_list|(
name|stringTable
index|[
name|usid
index|]
argument_list|,
name|stringTable
index|[
name|gsid
index|]
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|perm
argument_list|)
argument_list|)
return|;
block|}
DECL|method|loadAclEntries ( AclFeatureProto proto, final String[] stringTable)
specifier|public
specifier|static
name|ImmutableList
argument_list|<
name|AclEntry
argument_list|>
name|loadAclEntries
parameter_list|(
name|AclFeatureProto
name|proto
parameter_list|,
specifier|final
name|String
index|[]
name|stringTable
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|AclEntry
argument_list|>
name|b
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|v
range|:
name|proto
operator|.
name|getEntriesList
argument_list|()
control|)
block|{
name|int
name|p
init|=
name|v
operator|&
name|ACL_ENTRY_PERM_MASK
decl_stmt|;
name|int
name|t
init|=
operator|(
name|v
operator|>>
name|ACL_ENTRY_TYPE_OFFSET
operator|)
operator|&
name|ACL_ENTRY_TYPE_MASK
decl_stmt|;
name|int
name|s
init|=
operator|(
name|v
operator|>>
name|ACL_ENTRY_SCOPE_OFFSET
operator|)
operator|&
name|ACL_ENTRY_SCOPE_MASK
decl_stmt|;
name|int
name|nid
init|=
operator|(
name|v
operator|>>
name|ACL_ENTRY_NAME_OFFSET
operator|)
operator|&
name|ACL_ENTRY_NAME_MASK
decl_stmt|;
name|String
name|name
init|=
name|stringTable
index|[
name|nid
index|]
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|setPermission
argument_list|(
name|FSACTION_VALUES
index|[
name|p
index|]
argument_list|)
operator|.
name|setScope
argument_list|(
name|ACL_ENTRY_SCOPE_VALUES
index|[
name|s
index|]
argument_list|)
operator|.
name|setType
argument_list|(
name|ACL_ENTRY_TYPE_VALUES
index|[
name|t
index|]
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|loadXAttrs ( XAttrFeatureProto proto, final String[] stringTable)
specifier|public
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|loadXAttrs
parameter_list|(
name|XAttrFeatureProto
name|proto
parameter_list|,
specifier|final
name|String
index|[]
name|stringTable
parameter_list|)
block|{
name|List
argument_list|<
name|XAttr
argument_list|>
name|b
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|XAttrCompactProto
name|xAttrCompactProto
range|:
name|proto
operator|.
name|getXAttrsList
argument_list|()
control|)
block|{
name|int
name|v
init|=
name|xAttrCompactProto
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|nid
init|=
operator|(
name|v
operator|>>
name|XATTR_NAME_OFFSET
operator|)
operator|&
name|XATTR_NAME_MASK
decl_stmt|;
name|int
name|ns
init|=
operator|(
name|v
operator|>>
name|XATTR_NAMESPACE_OFFSET
operator|)
operator|&
name|XATTR_NAMESPACE_MASK
decl_stmt|;
name|ns
operator||=
operator|(
operator|(
name|v
operator|>>
name|XATTR_NAMESPACE_EXT_OFFSET
operator|)
operator|&
name|XATTR_NAMESPACE_EXT_MASK
operator|)
operator|<<
literal|2
expr_stmt|;
name|String
name|name
init|=
name|stringTable
index|[
name|nid
index|]
decl_stmt|;
name|byte
index|[]
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|xAttrCompactProto
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|xAttrCompactProto
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|add
argument_list|(
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setNameSpace
argument_list|(
name|XATTR_NAMESPACE_VALUES
index|[
name|ns
index|]
argument_list|)
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
DECL|method|loadQuotaByStorageTypeEntries ( QuotaByStorageTypeFeatureProto proto)
specifier|public
specifier|static
name|ImmutableList
argument_list|<
name|QuotaByStorageTypeEntry
argument_list|>
name|loadQuotaByStorageTypeEntries
parameter_list|(
name|QuotaByStorageTypeFeatureProto
name|proto
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|QuotaByStorageTypeEntry
argument_list|>
name|b
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|QuotaByStorageTypeEntryProto
name|quotaEntry
range|:
name|proto
operator|.
name|getQuotasList
argument_list|()
control|)
block|{
name|StorageType
name|type
init|=
name|PBHelperClient
operator|.
name|convertStorageType
argument_list|(
name|quotaEntry
operator|.
name|getStorageType
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|quota
init|=
name|quotaEntry
operator|.
name|getQuota
argument_list|()
decl_stmt|;
name|b
operator|.
name|add
argument_list|(
operator|new
name|QuotaByStorageTypeEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setStorageType
argument_list|(
name|type
argument_list|)
operator|.
name|setQuota
argument_list|(
name|quota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|loadINodeDirectory (INodeSection.INode n, LoaderContext state)
specifier|public
specifier|static
name|INodeDirectory
name|loadINodeDirectory
parameter_list|(
name|INodeSection
operator|.
name|INode
name|n
parameter_list|,
name|LoaderContext
name|state
parameter_list|)
block|{
assert|assert
name|n
operator|.
name|getType
argument_list|()
operator|==
name|INodeSection
operator|.
name|INode
operator|.
name|Type
operator|.
name|DIRECTORY
assert|;
name|INodeSection
operator|.
name|INodeDirectory
name|d
init|=
name|n
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
specifier|final
name|PermissionStatus
name|permissions
init|=
name|loadPermission
argument_list|(
name|d
operator|.
name|getPermission
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|INodeDirectory
name|dir
init|=
operator|new
name|INodeDirectory
argument_list|(
name|n
operator|.
name|getId
argument_list|()
argument_list|,
name|n
operator|.
name|getName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|permissions
argument_list|,
name|d
operator|.
name|getModificationTime
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|nsQuota
init|=
name|d
operator|.
name|getNsQuota
argument_list|()
decl_stmt|,
name|dsQuota
init|=
name|d
operator|.
name|getDsQuota
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsQuota
operator|>=
literal|0
operator|||
name|dsQuota
operator|>=
literal|0
condition|)
block|{
name|dir
operator|.
name|addDirectoryWithQuotaFeature
argument_list|(
operator|new
name|DirectoryWithQuotaFeature
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpaceQuota
argument_list|(
name|nsQuota
argument_list|)
operator|.
name|storageSpaceQuota
argument_list|(
name|dsQuota
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|typeQuotas
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|hasTypeQuotas
argument_list|()
condition|)
block|{
name|ImmutableList
argument_list|<
name|QuotaByStorageTypeEntry
argument_list|>
name|qes
init|=
name|loadQuotaByStorageTypeEntries
argument_list|(
name|d
operator|.
name|getTypeQuotas
argument_list|()
argument_list|)
decl_stmt|;
name|typeQuotas
operator|=
operator|new
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
expr_stmt|;
for|for
control|(
name|QuotaByStorageTypeEntry
name|qe
range|:
name|qes
control|)
block|{
if|if
condition|(
name|qe
operator|.
name|getQuota
argument_list|()
operator|>=
literal|0
operator|&&
name|qe
operator|.
name|getStorageType
argument_list|()
operator|!=
literal|null
operator|&&
name|qe
operator|.
name|getStorageType
argument_list|()
operator|.
name|supportTypeQuota
argument_list|()
condition|)
block|{
name|typeQuotas
operator|.
name|set
argument_list|(
name|qe
operator|.
name|getStorageType
argument_list|()
argument_list|,
name|qe
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|typeQuotas
operator|.
name|anyGreaterOrEqual
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|DirectoryWithQuotaFeature
name|q
init|=
name|dir
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
name|dir
operator|.
name|addDirectoryWithQuotaFeature
argument_list|(
operator|new
name|DirectoryWithQuotaFeature
operator|.
name|Builder
argument_list|()
operator|.
name|typeQuotas
argument_list|(
name|typeQuotas
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|.
name|setQuota
argument_list|(
name|typeQuotas
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|d
operator|.
name|hasAcl
argument_list|()
condition|)
block|{
name|int
index|[]
name|entries
init|=
name|AclEntryStatusFormat
operator|.
name|toInt
argument_list|(
name|loadAclEntries
argument_list|(
name|d
operator|.
name|getAcl
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|dir
operator|.
name|addAclFeature
argument_list|(
operator|new
name|AclFeature
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|.
name|hasXAttrs
argument_list|()
condition|)
block|{
name|dir
operator|.
name|addXAttrFeature
argument_list|(
operator|new
name|XAttrFeature
argument_list|(
name|loadXAttrs
argument_list|(
name|d
operator|.
name|getXAttrs
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dir
return|;
block|}
DECL|method|updateBlocksMap (INodeFile file, BlockManager bm)
specifier|public
specifier|static
name|void
name|updateBlocksMap
parameter_list|(
name|INodeFile
name|file
parameter_list|,
name|BlockManager
name|bm
parameter_list|)
block|{
comment|// Add file->block mapping
specifier|final
name|BlockInfo
index|[]
name|blocks
init|=
name|file
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|blocks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|file
operator|.
name|setBlock
argument_list|(
name|i
argument_list|,
name|bm
operator|.
name|addBlockCollectionWithCheck
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|dir
specifier|private
specifier|final
name|FSDirectory
name|dir
decl_stmt|;
DECL|field|fsn
specifier|private
specifier|final
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|parent
specifier|private
specifier|final
name|FSImageFormatProtobuf
operator|.
name|Loader
name|parent
decl_stmt|;
DECL|method|Loader (FSNamesystem fsn, final FSImageFormatProtobuf.Loader parent)
name|Loader
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
specifier|final
name|FSImageFormatProtobuf
operator|.
name|Loader
name|parent
parameter_list|)
block|{
name|this
operator|.
name|fsn
operator|=
name|fsn
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|fsn
operator|.
name|dir
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
DECL|method|loadINodeDirectorySection (InputStream in)
name|void
name|loadINodeDirectorySection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INodeReference
argument_list|>
name|refList
init|=
name|parent
operator|.
name|getLoaderContext
argument_list|()
operator|.
name|getRefList
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|INodeDirectorySection
operator|.
name|DirEntry
name|e
init|=
name|INodeDirectorySection
operator|.
name|DirEntry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// note that in is a LimitedInputStream
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|INodeDirectory
name|p
init|=
name|dir
operator|.
name|getInode
argument_list|(
name|e
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|id
range|:
name|e
operator|.
name|getChildrenList
argument_list|()
control|)
block|{
name|INode
name|child
init|=
name|dir
operator|.
name|getInode
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|addToParent
argument_list|(
name|p
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|refId
range|:
name|e
operator|.
name|getRefChildrenList
argument_list|()
control|)
block|{
name|INodeReference
name|ref
init|=
name|refList
operator|.
name|get
argument_list|(
name|refId
argument_list|)
decl_stmt|;
name|addToParent
argument_list|(
name|p
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadINodeSection (InputStream in, StartupProgress prog, Step currentStep)
name|void
name|loadINodeSection
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|StartupProgress
name|prog
parameter_list|,
name|Step
name|currentStep
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeSection
name|s
init|=
name|INodeSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|dir
operator|.
name|resetLastInodeId
argument_list|(
name|s
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|numInodes
init|=
name|s
operator|.
name|getNumInodes
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading "
operator|+
name|numInodes
operator|+
literal|" INodes."
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|currentStep
argument_list|,
name|numInodes
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|currentStep
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numInodes
condition|;
operator|++
name|i
control|)
block|{
name|INodeSection
operator|.
name|INode
name|p
init|=
name|INodeSection
operator|.
name|INode
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getId
argument_list|()
operator|==
name|INodeId
operator|.
name|ROOT_INODE_ID
condition|)
block|{
name|loadRootINode
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|INode
name|n
init|=
name|loadINode
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|dir
operator|.
name|addToInodeMap
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Load the under-construction files section, and update the lease map      */
DECL|method|loadFilesUnderConstructionSection (InputStream in)
name|void
name|loadFilesUnderConstructionSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|FileUnderConstructionEntry
name|entry
init|=
name|FileUnderConstructionEntry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|// update the lease manager
name|INodeFile
name|file
init|=
name|dir
operator|.
name|getInode
argument_list|(
name|entry
operator|.
name|getInodeId
argument_list|()
argument_list|)
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|FileUnderConstructionFeature
name|uc
init|=
name|file
operator|.
name|getFileUnderConstructionFeature
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|uc
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// file must be under-construction
name|fsn
operator|.
name|leaseManager
operator|.
name|addLease
argument_list|(
name|uc
operator|.
name|getClientName
argument_list|()
argument_list|,
name|entry
operator|.
name|getInodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addToParent (INodeDirectory parent, INode child)
specifier|private
name|void
name|addToParent
parameter_list|(
name|INodeDirectory
name|parent
parameter_list|,
name|INode
name|child
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
name|dir
operator|.
name|rootDir
operator|&&
name|FSDirectory
operator|.
name|isReservedName
argument_list|(
name|child
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"File name \""
operator|+
name|child
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"\" is reserved. Please "
operator|+
literal|" change the name of the existing file or directory to another "
operator|+
literal|"name before upgrading to this release."
argument_list|)
throw|;
block|}
comment|// NOTE: This does not update space counts for parents
if|if
condition|(
operator|!
name|parent
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
condition|)
block|{
return|return;
block|}
name|dir
operator|.
name|cacheName
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|updateBlocksMap
argument_list|(
name|child
operator|.
name|asFile
argument_list|()
argument_list|,
name|fsn
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadINode (INodeSection.INode n)
specifier|private
name|INode
name|loadINode
parameter_list|(
name|INodeSection
operator|.
name|INode
name|n
parameter_list|)
block|{
switch|switch
condition|(
name|n
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FILE
case|:
return|return
name|loadINodeFile
argument_list|(
name|n
argument_list|)
return|;
case|case
name|DIRECTORY
case|:
return|return
name|loadINodeDirectory
argument_list|(
name|n
argument_list|,
name|parent
operator|.
name|getLoaderContext
argument_list|()
argument_list|)
return|;
case|case
name|SYMLINK
case|:
return|return
name|loadINodeSymlink
argument_list|(
name|n
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
literal|null
return|;
block|}
DECL|method|loadINodeFile (INodeSection.INode n)
specifier|private
name|INodeFile
name|loadINodeFile
parameter_list|(
name|INodeSection
operator|.
name|INode
name|n
parameter_list|)
block|{
assert|assert
name|n
operator|.
name|getType
argument_list|()
operator|==
name|INodeSection
operator|.
name|INode
operator|.
name|Type
operator|.
name|FILE
assert|;
name|INodeSection
operator|.
name|INodeFile
name|f
init|=
name|n
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockProto
argument_list|>
name|bp
init|=
name|f
operator|.
name|getBlocksList
argument_list|()
decl_stmt|;
name|short
name|replication
init|=
operator|(
name|short
operator|)
name|f
operator|.
name|getReplication
argument_list|()
decl_stmt|;
name|boolean
name|isStriped
init|=
name|f
operator|.
name|getIsStriped
argument_list|()
decl_stmt|;
name|LoaderContext
name|state
init|=
name|parent
operator|.
name|getLoaderContext
argument_list|()
decl_stmt|;
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|ErasureCodingPolicyManager
operator|.
name|getSystemDefaultPolicy
argument_list|()
decl_stmt|;
name|BlockInfo
index|[]
name|blocks
init|=
operator|new
name|BlockInfo
index|[
name|bp
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bp
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|BlockProto
name|b
init|=
name|bp
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isStriped
condition|)
block|{
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|BlockInfoStriped
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|b
argument_list|)
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|BlockInfoContiguous
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|b
argument_list|)
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|PermissionStatus
name|permissions
init|=
name|loadPermission
argument_list|(
name|f
operator|.
name|getPermission
argument_list|()
argument_list|,
name|parent
operator|.
name|getLoaderContext
argument_list|()
operator|.
name|getStringTable
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|INodeFile
name|file
init|=
operator|new
name|INodeFile
argument_list|(
name|n
operator|.
name|getId
argument_list|()
argument_list|,
name|n
operator|.
name|getName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|permissions
argument_list|,
name|f
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|f
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|blocks
argument_list|,
name|replication
argument_list|,
name|f
operator|.
name|getPreferredBlockSize
argument_list|()
argument_list|,
operator|(
name|byte
operator|)
name|f
operator|.
name|getStoragePolicyID
argument_list|()
argument_list|,
name|isStriped
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|hasAcl
argument_list|()
condition|)
block|{
name|int
index|[]
name|entries
init|=
name|AclEntryStatusFormat
operator|.
name|toInt
argument_list|(
name|loadAclEntries
argument_list|(
name|f
operator|.
name|getAcl
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|addAclFeature
argument_list|(
operator|new
name|AclFeature
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|hasXAttrs
argument_list|()
condition|)
block|{
name|file
operator|.
name|addXAttrFeature
argument_list|(
operator|new
name|XAttrFeature
argument_list|(
name|loadXAttrs
argument_list|(
name|f
operator|.
name|getXAttrs
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// under-construction information
if|if
condition|(
name|f
operator|.
name|hasFileUC
argument_list|()
condition|)
block|{
name|INodeSection
operator|.
name|FileUnderConstructionFeature
name|uc
init|=
name|f
operator|.
name|getFileUC
argument_list|()
decl_stmt|;
name|file
operator|.
name|toUnderConstruction
argument_list|(
name|uc
operator|.
name|getClientName
argument_list|()
argument_list|,
name|uc
operator|.
name|getClientMachine
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|blocks
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|BlockInfo
name|lastBlk
init|=
name|file
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
comment|// replace the last block of file
specifier|final
name|BlockInfo
name|ucBlk
decl_stmt|;
if|if
condition|(
name|isStriped
condition|)
block|{
name|BlockInfoStriped
name|striped
init|=
operator|(
name|BlockInfoStriped
operator|)
name|lastBlk
decl_stmt|;
name|ucBlk
operator|=
operator|new
name|BlockInfoStriped
argument_list|(
name|striped
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ucBlk
operator|=
operator|new
name|BlockInfoContiguous
argument_list|(
name|lastBlk
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
name|ucBlk
operator|.
name|convertToBlockUnderConstruction
argument_list|(
name|HdfsServerConstants
operator|.
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|file
operator|.
name|setBlock
argument_list|(
name|file
operator|.
name|numBlocks
argument_list|()
operator|-
literal|1
argument_list|,
name|ucBlk
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|file
return|;
block|}
DECL|method|loadINodeSymlink (INodeSection.INode n)
specifier|private
name|INodeSymlink
name|loadINodeSymlink
parameter_list|(
name|INodeSection
operator|.
name|INode
name|n
parameter_list|)
block|{
assert|assert
name|n
operator|.
name|getType
argument_list|()
operator|==
name|INodeSection
operator|.
name|INode
operator|.
name|Type
operator|.
name|SYMLINK
assert|;
name|INodeSection
operator|.
name|INodeSymlink
name|s
init|=
name|n
operator|.
name|getSymlink
argument_list|()
decl_stmt|;
specifier|final
name|PermissionStatus
name|permissions
init|=
name|loadPermission
argument_list|(
name|s
operator|.
name|getPermission
argument_list|()
argument_list|,
name|parent
operator|.
name|getLoaderContext
argument_list|()
operator|.
name|getStringTable
argument_list|()
argument_list|)
decl_stmt|;
name|INodeSymlink
name|sym
init|=
operator|new
name|INodeSymlink
argument_list|(
name|n
operator|.
name|getId
argument_list|()
argument_list|,
name|n
operator|.
name|getName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|permissions
argument_list|,
name|s
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|s
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|s
operator|.
name|getTarget
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|sym
return|;
block|}
DECL|method|loadRootINode (INodeSection.INode p)
specifier|private
name|void
name|loadRootINode
parameter_list|(
name|INodeSection
operator|.
name|INode
name|p
parameter_list|)
block|{
name|INodeDirectory
name|root
init|=
name|loadINodeDirectory
argument_list|(
name|p
argument_list|,
name|parent
operator|.
name|getLoaderContext
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|QuotaCounts
name|q
init|=
name|root
operator|.
name|getQuotaCounts
argument_list|()
decl_stmt|;
specifier|final
name|long
name|nsQuota
init|=
name|q
operator|.
name|getNameSpace
argument_list|()
decl_stmt|;
specifier|final
name|long
name|dsQuota
init|=
name|q
operator|.
name|getStorageSpace
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsQuota
operator|!=
operator|-
literal|1
operator|||
name|dsQuota
operator|!=
operator|-
literal|1
condition|)
block|{
name|dir
operator|.
name|rootDir
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|setQuota
argument_list|(
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
expr_stmt|;
block|}
specifier|final
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|typeQuotas
init|=
name|q
operator|.
name|getTypeSpaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeQuotas
operator|.
name|anyGreaterOrEqual
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|dir
operator|.
name|rootDir
operator|.
name|getDirectoryWithQuotaFeature
argument_list|()
operator|.
name|setQuota
argument_list|(
name|typeQuotas
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|rootDir
operator|.
name|cloneModificationTime
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|dir
operator|.
name|rootDir
operator|.
name|clonePermissionStatus
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// root dir supports having extended attributes according to POSIX
specifier|final
name|XAttrFeature
name|f
init|=
name|root
operator|.
name|getXAttrFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|dir
operator|.
name|rootDir
operator|.
name|addXAttrFeature
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|Saver
specifier|public
specifier|final
specifier|static
class|class
name|Saver
block|{
DECL|method|buildPermissionStatus (INodeAttributes n, final SaverContext.DeduplicationMap<String> stringMap)
specifier|private
specifier|static
name|long
name|buildPermissionStatus
parameter_list|(
name|INodeAttributes
name|n
parameter_list|,
specifier|final
name|SaverContext
operator|.
name|DeduplicationMap
argument_list|<
name|String
argument_list|>
name|stringMap
parameter_list|)
block|{
name|long
name|userId
init|=
name|stringMap
operator|.
name|getId
argument_list|(
name|n
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|groupId
init|=
name|stringMap
operator|.
name|getId
argument_list|(
name|n
operator|.
name|getGroupName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|userId
operator|&
name|USER_GROUP_STRID_MASK
operator|)
operator|<<
name|USER_STRID_OFFSET
operator|)
operator||
operator|(
operator|(
name|groupId
operator|&
name|USER_GROUP_STRID_MASK
operator|)
operator|<<
name|GROUP_STRID_OFFSET
operator|)
operator||
name|n
operator|.
name|getFsPermissionShort
argument_list|()
return|;
block|}
DECL|method|buildAclEntries (AclFeature f, final SaverContext.DeduplicationMap<String> map)
specifier|private
specifier|static
name|AclFeatureProto
operator|.
name|Builder
name|buildAclEntries
parameter_list|(
name|AclFeature
name|f
parameter_list|,
specifier|final
name|SaverContext
operator|.
name|DeduplicationMap
argument_list|<
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|AclFeatureProto
operator|.
name|Builder
name|b
init|=
name|AclFeatureProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|,
name|e
init|;
name|pos
operator|<
name|f
operator|.
name|getEntriesSize
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|e
operator|=
name|f
operator|.
name|getEntryAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|int
name|nameId
init|=
name|map
operator|.
name|getId
argument_list|(
name|AclEntryStatusFormat
operator|.
name|getName
argument_list|(
name|e
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|v
init|=
operator|(
operator|(
name|nameId
operator|&
name|ACL_ENTRY_NAME_MASK
operator|)
operator|<<
name|ACL_ENTRY_NAME_OFFSET
operator|)
operator||
operator|(
name|AclEntryStatusFormat
operator|.
name|getType
argument_list|(
name|e
argument_list|)
operator|.
name|ordinal
argument_list|()
operator|<<
name|ACL_ENTRY_TYPE_OFFSET
operator|)
operator||
operator|(
name|AclEntryStatusFormat
operator|.
name|getScope
argument_list|(
name|e
argument_list|)
operator|.
name|ordinal
argument_list|()
operator|<<
name|ACL_ENTRY_SCOPE_OFFSET
operator|)
operator||
operator|(
name|AclEntryStatusFormat
operator|.
name|getPermission
argument_list|(
name|e
argument_list|)
operator|.
name|ordinal
argument_list|()
operator|)
decl_stmt|;
name|b
operator|.
name|addEntries
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
DECL|method|buildXAttrs (XAttrFeature f, final SaverContext.DeduplicationMap<String> stringMap)
specifier|private
specifier|static
name|XAttrFeatureProto
operator|.
name|Builder
name|buildXAttrs
parameter_list|(
name|XAttrFeature
name|f
parameter_list|,
specifier|final
name|SaverContext
operator|.
name|DeduplicationMap
argument_list|<
name|String
argument_list|>
name|stringMap
parameter_list|)
block|{
name|XAttrFeatureProto
operator|.
name|Builder
name|b
init|=
name|XAttrFeatureProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|XAttr
name|a
range|:
name|f
operator|.
name|getXAttrs
argument_list|()
control|)
block|{
name|XAttrCompactProto
operator|.
name|Builder
name|xAttrCompactBuilder
init|=
name|XAttrCompactProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|int
name|nsOrd
init|=
name|a
operator|.
name|getNameSpace
argument_list|()
operator|.
name|ordinal
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nsOrd
operator|<
literal|8
argument_list|,
literal|"Too many namespaces."
argument_list|)
expr_stmt|;
name|int
name|v
init|=
operator|(
operator|(
name|nsOrd
operator|&
name|XATTR_NAMESPACE_MASK
operator|)
operator|<<
name|XATTR_NAMESPACE_OFFSET
operator|)
operator||
operator|(
operator|(
name|stringMap
operator|.
name|getId
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|&
name|XATTR_NAME_MASK
operator|)
operator|<<
name|XATTR_NAME_OFFSET
operator|)
decl_stmt|;
name|v
operator||=
operator|(
operator|(
operator|(
name|nsOrd
operator|>>
literal|2
operator|)
operator|&
name|XATTR_NAMESPACE_EXT_MASK
operator|)
operator|<<
name|XATTR_NAMESPACE_EXT_OFFSET
operator|)
expr_stmt|;
name|xAttrCompactBuilder
operator|.
name|setName
argument_list|(
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xAttrCompactBuilder
operator|.
name|setValue
argument_list|(
name|PBHelperClient
operator|.
name|getByteString
argument_list|(
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|addXAttrs
argument_list|(
name|xAttrCompactBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
specifier|private
specifier|static
name|QuotaByStorageTypeFeatureProto
operator|.
name|Builder
DECL|method|buildQuotaByStorageTypeEntries (QuotaCounts q)
name|buildQuotaByStorageTypeEntries
parameter_list|(
name|QuotaCounts
name|q
parameter_list|)
block|{
name|QuotaByStorageTypeFeatureProto
operator|.
name|Builder
name|b
init|=
name|QuotaByStorageTypeFeatureProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getTypesSupportingQuota
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|QuotaByStorageTypeEntryProto
operator|.
name|Builder
name|eb
init|=
name|QuotaByStorageTypeEntryProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStorageType
argument_list|(
name|PBHelperClient
operator|.
name|convertStorageType
argument_list|(
name|t
argument_list|)
argument_list|)
operator|.
name|setQuota
argument_list|(
name|q
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|addQuotas
argument_list|(
name|eb
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
return|;
block|}
DECL|method|buildINodeFile ( INodeFileAttributes file, final SaverContext state)
specifier|public
specifier|static
name|INodeSection
operator|.
name|INodeFile
operator|.
name|Builder
name|buildINodeFile
parameter_list|(
name|INodeFileAttributes
name|file
parameter_list|,
specifier|final
name|SaverContext
name|state
parameter_list|)
block|{
name|INodeSection
operator|.
name|INodeFile
operator|.
name|Builder
name|b
init|=
name|INodeSection
operator|.
name|INodeFile
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAccessTime
argument_list|(
name|file
operator|.
name|getAccessTime
argument_list|()
argument_list|)
operator|.
name|setModificationTime
argument_list|(
name|file
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|setPermission
argument_list|(
name|buildPermissionStatus
argument_list|(
name|file
argument_list|,
name|state
operator|.
name|getStringMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPreferredBlockSize
argument_list|(
name|file
operator|.
name|getPreferredBlockSize
argument_list|()
argument_list|)
operator|.
name|setReplication
argument_list|(
name|file
operator|.
name|getFileReplication
argument_list|()
argument_list|)
operator|.
name|setStoragePolicyID
argument_list|(
name|file
operator|.
name|getLocalStoragePolicyID
argument_list|()
argument_list|)
operator|.
name|setIsStriped
argument_list|(
name|file
operator|.
name|isStriped
argument_list|()
argument_list|)
decl_stmt|;
name|AclFeature
name|f
init|=
name|file
operator|.
name|getAclFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setAcl
argument_list|(
name|buildAclEntries
argument_list|(
name|f
argument_list|,
name|state
operator|.
name|getStringMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XAttrFeature
name|xAttrFeature
init|=
name|file
operator|.
name|getXAttrFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|xAttrFeature
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setXAttrs
argument_list|(
name|buildXAttrs
argument_list|(
name|xAttrFeature
argument_list|,
name|state
operator|.
name|getStringMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
DECL|method|buildINodeDirectory ( INodeDirectoryAttributes dir, final SaverContext state)
specifier|public
specifier|static
name|INodeSection
operator|.
name|INodeDirectory
operator|.
name|Builder
name|buildINodeDirectory
parameter_list|(
name|INodeDirectoryAttributes
name|dir
parameter_list|,
specifier|final
name|SaverContext
name|state
parameter_list|)
block|{
name|QuotaCounts
name|quota
init|=
name|dir
operator|.
name|getQuotaCounts
argument_list|()
decl_stmt|;
name|INodeSection
operator|.
name|INodeDirectory
operator|.
name|Builder
name|b
init|=
name|INodeSection
operator|.
name|INodeDirectory
operator|.
name|newBuilder
argument_list|()
operator|.
name|setModificationTime
argument_list|(
name|dir
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|setNsQuota
argument_list|(
name|quota
operator|.
name|getNameSpace
argument_list|()
argument_list|)
operator|.
name|setDsQuota
argument_list|(
name|quota
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
operator|.
name|setPermission
argument_list|(
name|buildPermissionStatus
argument_list|(
name|dir
argument_list|,
name|state
operator|.
name|getStringMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|quota
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|anyGreaterOrEqual
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|b
operator|.
name|setTypeQuotas
argument_list|(
name|buildQuotaByStorageTypeEntries
argument_list|(
name|quota
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AclFeature
name|f
init|=
name|dir
operator|.
name|getAclFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setAcl
argument_list|(
name|buildAclEntries
argument_list|(
name|f
argument_list|,
name|state
operator|.
name|getStringMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|XAttrFeature
name|xAttrFeature
init|=
name|dir
operator|.
name|getXAttrFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|xAttrFeature
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setXAttrs
argument_list|(
name|buildXAttrs
argument_list|(
name|xAttrFeature
argument_list|,
name|state
operator|.
name|getStringMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
DECL|field|fsn
specifier|private
specifier|final
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|summary
specifier|private
specifier|final
name|FileSummary
operator|.
name|Builder
name|summary
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|SaveNamespaceContext
name|context
decl_stmt|;
DECL|field|parent
specifier|private
specifier|final
name|FSImageFormatProtobuf
operator|.
name|Saver
name|parent
decl_stmt|;
DECL|method|Saver (FSImageFormatProtobuf.Saver parent, FileSummary.Builder summary)
name|Saver
parameter_list|(
name|FSImageFormatProtobuf
operator|.
name|Saver
name|parent
parameter_list|,
name|FileSummary
operator|.
name|Builder
name|summary
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|summary
operator|=
name|summary
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|parent
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|fsn
operator|=
name|context
operator|.
name|getSourceNamesystem
argument_list|()
expr_stmt|;
block|}
DECL|method|serializeINodeDirectorySection (OutputStream out)
name|void
name|serializeINodeDirectorySection
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|INodeWithAdditionalFields
argument_list|>
name|iter
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINodeMap
argument_list|()
operator|.
name|getMapIterator
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|INodeReference
argument_list|>
name|refList
init|=
name|parent
operator|.
name|getSaverContext
argument_list|()
operator|.
name|getRefList
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|INodeWithAdditionalFields
name|n
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|n
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|n
operator|.
name|asDirectory
argument_list|()
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|INodeDirectorySection
operator|.
name|DirEntry
operator|.
name|Builder
name|b
init|=
name|INodeDirectorySection
operator|.
name|DirEntry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setParent
argument_list|(
name|n
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|INode
name|inode
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|inode
operator|.
name|isReference
argument_list|()
condition|)
block|{
name|b
operator|.
name|addChildren
argument_list|(
name|inode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refList
operator|.
name|add
argument_list|(
name|inode
operator|.
name|asReference
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|addRefChildren
argument_list|(
name|refList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|INodeDirectorySection
operator|.
name|DirEntry
name|e
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|e
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|%
name|FSImageFormatProtobuf
operator|.
name|Saver
operator|.
name|CHECK_CANCEL_INTERVAL
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
name|parent
operator|.
name|commitSection
argument_list|(
name|summary
argument_list|,
name|FSImageFormatProtobuf
operator|.
name|SectionName
operator|.
name|INODE_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|serializeINodeSection (OutputStream out)
name|void
name|serializeINodeSection
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeMap
name|inodesMap
init|=
name|fsn
operator|.
name|dir
operator|.
name|getINodeMap
argument_list|()
decl_stmt|;
name|INodeSection
operator|.
name|Builder
name|b
init|=
name|INodeSection
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLastInodeId
argument_list|(
name|fsn
operator|.
name|dir
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
operator|.
name|setNumInodes
argument_list|(
name|inodesMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|INodeSection
name|s
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|s
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|INodeWithAdditionalFields
argument_list|>
name|iter
init|=
name|inodesMap
operator|.
name|getMapIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|INodeWithAdditionalFields
name|n
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|save
argument_list|(
name|out
argument_list|,
name|n
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|%
name|FSImageFormatProtobuf
operator|.
name|Saver
operator|.
name|CHECK_CANCEL_INTERVAL
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
name|parent
operator|.
name|commitSection
argument_list|(
name|summary
argument_list|,
name|FSImageFormatProtobuf
operator|.
name|SectionName
operator|.
name|INODE
argument_list|)
expr_stmt|;
block|}
DECL|method|serializeFilesUCSection (OutputStream out)
name|void
name|serializeFilesUCSection
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|Long
argument_list|>
name|filesWithUC
init|=
name|fsn
operator|.
name|getLeaseManager
argument_list|()
operator|.
name|getINodeIdWithLeases
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|filesWithUC
control|)
block|{
name|INode
name|inode
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getInode
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fail to find inode "
operator|+
name|id
operator|+
literal|" when saving the leases."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|INodeFile
name|file
init|=
name|inode
operator|.
name|asFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isUnderConstruction
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fail to save the lease for inode id "
operator|+
name|id
operator|+
literal|" as the file is not under construction"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|path
init|=
name|file
operator|.
name|getFullPathName
argument_list|()
decl_stmt|;
name|FileUnderConstructionEntry
operator|.
name|Builder
name|b
init|=
name|FileUnderConstructionEntry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setInodeId
argument_list|(
name|file
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setFullPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FileUnderConstructionEntry
name|e
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|e
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|commitSection
argument_list|(
name|summary
argument_list|,
name|FSImageFormatProtobuf
operator|.
name|SectionName
operator|.
name|FILES_UNDERCONSTRUCTION
argument_list|)
expr_stmt|;
block|}
DECL|method|save (OutputStream out, INode n)
specifier|private
name|void
name|save
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|INode
name|n
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|n
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|save
argument_list|(
name|out
argument_list|,
name|n
operator|.
name|asDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|save
argument_list|(
name|out
argument_list|,
name|n
operator|.
name|asFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
name|save
argument_list|(
name|out
argument_list|,
name|n
operator|.
name|asSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|save (OutputStream out, INodeDirectory n)
specifier|private
name|void
name|save
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|INodeDirectory
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeSection
operator|.
name|INodeDirectory
operator|.
name|Builder
name|b
init|=
name|buildINodeDirectory
argument_list|(
name|n
argument_list|,
name|parent
operator|.
name|getSaverContext
argument_list|()
argument_list|)
decl_stmt|;
name|INodeSection
operator|.
name|INode
name|r
init|=
name|buildINodeCommon
argument_list|(
name|n
argument_list|)
operator|.
name|setType
argument_list|(
name|INodeSection
operator|.
name|INode
operator|.
name|Type
operator|.
name|DIRECTORY
argument_list|)
operator|.
name|setDirectory
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|r
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|save (OutputStream out, INodeFile n)
specifier|private
name|void
name|save
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|INodeFile
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeSection
operator|.
name|INodeFile
operator|.
name|Builder
name|b
init|=
name|buildINodeFile
argument_list|(
name|n
argument_list|,
name|parent
operator|.
name|getSaverContext
argument_list|()
argument_list|)
decl_stmt|;
name|BlockInfo
index|[]
name|blocks
init|=
name|n
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|blocks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Block
name|block
range|:
name|n
operator|.
name|getBlocks
argument_list|()
control|)
block|{
name|b
operator|.
name|addBlocks
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|FileUnderConstructionFeature
name|uc
init|=
name|n
operator|.
name|getFileUnderConstructionFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|uc
operator|!=
literal|null
condition|)
block|{
name|INodeSection
operator|.
name|FileUnderConstructionFeature
name|f
init|=
name|INodeSection
operator|.
name|FileUnderConstructionFeature
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClientName
argument_list|(
name|uc
operator|.
name|getClientName
argument_list|()
argument_list|)
operator|.
name|setClientMachine
argument_list|(
name|uc
operator|.
name|getClientMachine
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|b
operator|.
name|setFileUC
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|INodeSection
operator|.
name|INode
name|r
init|=
name|buildINodeCommon
argument_list|(
name|n
argument_list|)
operator|.
name|setType
argument_list|(
name|INodeSection
operator|.
name|INode
operator|.
name|Type
operator|.
name|FILE
argument_list|)
operator|.
name|setFile
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|r
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|save (OutputStream out, INodeSymlink n)
specifier|private
name|void
name|save
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|INodeSymlink
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|SaverContext
name|state
init|=
name|parent
operator|.
name|getSaverContext
argument_list|()
decl_stmt|;
name|INodeSection
operator|.
name|INodeSymlink
operator|.
name|Builder
name|b
init|=
name|INodeSection
operator|.
name|INodeSymlink
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPermission
argument_list|(
name|buildPermissionStatus
argument_list|(
name|n
argument_list|,
name|state
operator|.
name|getStringMap
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setTarget
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|n
operator|.
name|getSymlink
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setModificationTime
argument_list|(
name|n
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|setAccessTime
argument_list|(
name|n
operator|.
name|getAccessTime
argument_list|()
argument_list|)
decl_stmt|;
name|INodeSection
operator|.
name|INode
name|r
init|=
name|buildINodeCommon
argument_list|(
name|n
argument_list|)
operator|.
name|setType
argument_list|(
name|INodeSection
operator|.
name|INode
operator|.
name|Type
operator|.
name|SYMLINK
argument_list|)
operator|.
name|setSymlink
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|r
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|buildINodeCommon (INode n)
specifier|private
name|INodeSection
operator|.
name|INode
operator|.
name|Builder
name|buildINodeCommon
parameter_list|(
name|INode
name|n
parameter_list|)
block|{
return|return
name|INodeSection
operator|.
name|INode
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|n
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|n
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|FSImageFormatPBINode ()
specifier|private
name|FSImageFormatPBINode
parameter_list|()
block|{   }
block|}
end_class

end_unit

