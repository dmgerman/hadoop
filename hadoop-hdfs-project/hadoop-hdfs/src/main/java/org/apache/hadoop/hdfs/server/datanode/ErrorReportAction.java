begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_comment
comment|/**  * A ErrorReportAction is an instruction issued by BPOfferService to   * BPServiceActor about a particular block encapsulated in errorMessage.  */
end_comment

begin_class
DECL|class|ErrorReportAction
specifier|public
class|class
name|ErrorReportAction
implements|implements
name|BPServiceActorAction
block|{
DECL|field|errorCode
specifier|final
name|int
name|errorCode
decl_stmt|;
DECL|field|errorMessage
specifier|final
name|String
name|errorMessage
decl_stmt|;
DECL|method|ErrorReportAction (int errorCode, String errorMessage)
specifier|public
name|ErrorReportAction
parameter_list|(
name|int
name|errorCode
parameter_list|,
name|String
name|errorMessage
parameter_list|)
block|{
name|this
operator|.
name|errorCode
operator|=
name|errorCode
expr_stmt|;
name|this
operator|.
name|errorMessage
operator|=
name|errorMessage
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reportTo (DatanodeProtocolClientSideTranslatorPB bpNamenode, DatanodeRegistration bpRegistration)
specifier|public
name|void
name|reportTo
parameter_list|(
name|DatanodeProtocolClientSideTranslatorPB
name|bpNamenode
parameter_list|,
name|DatanodeRegistration
name|bpRegistration
parameter_list|)
throws|throws
name|BPServiceActorActionException
block|{
try|try
block|{
name|bpNamenode
operator|.
name|errorReport
argument_list|(
name|bpRegistration
argument_list|,
name|errorCode
argument_list|,
name|errorMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BPServiceActorActionException
argument_list|(
literal|"Error reporting "
operator|+
literal|"an error to namenode: "
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|errorCode
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|errorMessage
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|errorMessage
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|ErrorReportAction
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ErrorReportAction
name|other
init|=
operator|(
name|ErrorReportAction
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|errorCode
operator|!=
name|other
operator|.
name|errorCode
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|errorMessage
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|errorMessage
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|errorMessage
operator|.
name|equals
argument_list|(
name|other
operator|.
name|errorMessage
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

