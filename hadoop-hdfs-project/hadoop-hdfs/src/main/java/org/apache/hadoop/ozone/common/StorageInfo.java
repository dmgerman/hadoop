begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|NodeType
import|;
end_import

begin_comment
comment|/**  * Common class for storage information. This class defines the common  * properties and functions to set them , write them into the version file  * and read them from the version file.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StorageInfo
specifier|public
class|class
name|StorageInfo
block|{
DECL|field|properties
specifier|private
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|/**    * Property to hold node type.    */
DECL|field|NODE_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|NODE_TYPE
init|=
literal|"nodeType"
decl_stmt|;
comment|/**    * Property to hold ID of the cluster.    */
DECL|field|CLUSTER_ID
specifier|private
specifier|static
specifier|final
name|String
name|CLUSTER_ID
init|=
literal|"clusterID"
decl_stmt|;
comment|/**    * Property to hold creation time of the storage.    */
DECL|field|CREATION_TIME
specifier|private
specifier|static
specifier|final
name|String
name|CREATION_TIME
init|=
literal|"cTime"
decl_stmt|;
comment|/**    * Constructs StorageInfo instance.    * @param type    *          Type of the node using the storage    * @param cid    *          Cluster ID    * @param cT    *          Cluster creation Time     * @throws IOException    */
DECL|method|StorageInfo (NodeType type, String cid, long cT)
specifier|public
name|StorageInfo
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|String
name|cid
parameter_list|,
name|long
name|cT
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|cT
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|NODE_TYPE
argument_list|,
name|type
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|CLUSTER_ID
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|CREATION_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|cT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|StorageInfo (NodeType type, File propertiesFile)
specifier|public
name|StorageInfo
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|File
name|propertiesFile
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|properties
operator|=
name|readFrom
argument_list|(
name|propertiesFile
argument_list|)
expr_stmt|;
name|verifyNodeType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|verifyClusterId
argument_list|()
expr_stmt|;
name|verifyCreationTime
argument_list|()
expr_stmt|;
block|}
DECL|method|getNodeType ()
specifier|public
name|NodeType
name|getNodeType
parameter_list|()
block|{
return|return
name|NodeType
operator|.
name|valueOf
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|NODE_TYPE
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getClusterID ()
specifier|public
name|String
name|getClusterID
parameter_list|()
block|{
return|return
name|properties
operator|.
name|getProperty
argument_list|(
name|CLUSTER_ID
argument_list|)
return|;
block|}
DECL|method|getCreationTime ()
specifier|public
name|Long
name|getCreationTime
parameter_list|()
block|{
name|String
name|creationTime
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|CREATION_TIME
argument_list|)
decl_stmt|;
if|if
condition|(
name|creationTime
operator|!=
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|creationTime
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getProperty (String key)
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|properties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|setProperty (String key, String value)
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setClusterId (String clusterId)
specifier|public
name|void
name|setClusterId
parameter_list|(
name|String
name|clusterId
parameter_list|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|CLUSTER_ID
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNodeType (NodeType type)
specifier|private
name|void
name|verifyNodeType
parameter_list|(
name|NodeType
name|type
parameter_list|)
throws|throws
name|InconsistentStorageStateException
block|{
name|NodeType
name|nodeType
init|=
name|getNodeType
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
name|nodeType
condition|)
block|{
throw|throw
operator|new
name|InconsistentStorageStateException
argument_list|(
literal|"Expected NodeType: "
operator|+
name|type
operator|+
literal|", but found: "
operator|+
name|nodeType
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyClusterId ()
specifier|private
name|void
name|verifyClusterId
parameter_list|()
throws|throws
name|InconsistentStorageStateException
block|{
name|String
name|clusterId
init|=
name|getClusterID
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clusterId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InconsistentStorageStateException
argument_list|(
literal|"Cluster ID not found"
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyCreationTime ()
specifier|private
name|void
name|verifyCreationTime
parameter_list|()
block|{
name|Long
name|creationTime
init|=
name|getCreationTime
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|creationTime
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTo (File to)
specifier|public
name|void
name|writeTo
parameter_list|(
name|File
name|to
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RandomAccessFile
name|file
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|to
argument_list|,
literal|"rws"
argument_list|)
init|;
name|FileOutputStream
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
operator|.
name|getFD
argument_list|()
argument_list|)
init|)
block|{
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|/*      * If server is interrupted before this line,      * the version file will remain unchanged.      */
name|properties
operator|.
name|store
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|/*      * Now the new fields are flushed to the head of the file, but file      * length can still be larger then required and therefore the file can      * contain whole or corrupted fields from its old contents in the end.      * If server is interrupted here and restarted later these extra fields      * either should not effect server behavior or should be handled      * by the server correctly.      */
name|file
operator|.
name|setLength
argument_list|(
name|out
operator|.
name|getChannel
argument_list|()
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFrom (File from)
specifier|private
name|Properties
name|readFrom
parameter_list|(
name|File
name|from
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RandomAccessFile
name|file
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|from
argument_list|,
literal|"rws"
argument_list|)
init|;
name|FileInputStream
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
operator|.
name|getFD
argument_list|()
argument_list|)
init|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
block|}
comment|/**    * Generate new clusterID.    *    * clusterID is a persistent attribute of the cluster.    * It is generated when the cluster is created and remains the same    * during the life cycle of the cluster.  When a new SCM node is initialized,    * if this is a new cluster, a new clusterID is generated and stored.    * @return new clusterID    */
DECL|method|newClusterID ()
specifier|public
specifier|static
name|String
name|newClusterID
parameter_list|()
block|{
return|return
literal|"CID-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

