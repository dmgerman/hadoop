begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|StorageContainerDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|RegisteredCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|SCMCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ScmBlockLocationProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerReportsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ReportState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMHeartbeatResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMNodeAddressList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMRegisteredCmdResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMReregisterCmdResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMVersionRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMVersionResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SendContainerReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|ScmBlockLocationProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerDatanodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerDatanodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|block
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|block
operator|.
name|BlockManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
operator|.
name|SCMNodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|AllocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|DeleteBlockResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocol
operator|.
name|ScmBlockLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocol
operator|.
name|StorageContainerLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|ScmBlockLocationProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ScmBlockLocationProtocolProtos
operator|.
name|DeleteScmBlockResult
operator|.
name|Result
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DB_CACHE_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DB_CACHE_SIZE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HANDLER_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HANDLER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|terminate
import|;
end_import

begin_comment
comment|/**  * StorageContainerManager is the main entry point for the service that provides  * information about which SCM nodes host containers.  *  * DataNodes report to StorageContainerManager using heartbeat  * messages. SCM allocates containers and returns a pipeline.  *  * A client once it gets a pipeline (a list of datanodes) will connect to the  * datanodes and create a container, which then can be used to store data.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"CBLOCK"
block|,
literal|"OZONE"
block|,
literal|"HBASE"
block|}
argument_list|)
DECL|class|StorageContainerManager
specifier|public
class|class
name|StorageContainerManager
implements|implements
name|StorageContainerDatanodeProtocol
implements|,
name|StorageContainerLocationProtocol
implements|,
name|ScmBlockLocationProtocol
implements|,
name|SCMMXBean
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StorageContainerManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * NodeManager and container Managers for SCM.    */
DECL|field|scmNodeManager
specifier|private
specifier|final
name|NodeManager
name|scmNodeManager
decl_stmt|;
DECL|field|scmContainerManager
specifier|private
specifier|final
name|Mapping
name|scmContainerManager
decl_stmt|;
DECL|field|scmBlockManager
specifier|private
specifier|final
name|BlockManager
name|scmBlockManager
decl_stmt|;
comment|/** The RPC server that listens to requests from DataNodes. */
DECL|field|datanodeRpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|datanodeRpcServer
decl_stmt|;
DECL|field|datanodeRpcAddress
specifier|private
specifier|final
name|InetSocketAddress
name|datanodeRpcAddress
decl_stmt|;
comment|/** The RPC server that listens to requests from clients. */
DECL|field|clientRpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|clientRpcServer
decl_stmt|;
DECL|field|clientRpcAddress
specifier|private
specifier|final
name|InetSocketAddress
name|clientRpcAddress
decl_stmt|;
comment|/** The RPC server that listens to requests from block service clients. */
DECL|field|blockRpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|blockRpcServer
decl_stmt|;
DECL|field|blockRpcAddress
specifier|private
specifier|final
name|InetSocketAddress
name|blockRpcAddress
decl_stmt|;
DECL|field|httpServer
specifier|private
specifier|final
name|StorageContainerManagerHttpServer
name|httpServer
decl_stmt|;
comment|/** SCM mxbean. */
DECL|field|scmInfoBeanName
specifier|private
name|ObjectName
name|scmInfoBeanName
decl_stmt|;
comment|/** SCM super user. */
DECL|field|scmUsername
specifier|private
specifier|final
name|String
name|scmUsername
decl_stmt|;
DECL|field|scmAdminUsernames
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|scmAdminUsernames
decl_stmt|;
comment|/**    * Creates a new StorageContainerManager.  Configuration will be updated with    * information on the actual listening addresses used for RPC servers.    *    * @param conf configuration    */
DECL|method|StorageContainerManager (OzoneConfiguration conf)
specifier|public
name|StorageContainerManager
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|handlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_SCM_HANDLER_COUNT_KEY
argument_list|,
name|OZONE_SCM_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|cacheSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_SCM_DB_CACHE_SIZE_MB
argument_list|,
name|OZONE_SCM_DB_CACHE_SIZE_DEFAULT
argument_list|)
decl_stmt|;
comment|// TODO : Fix the ClusterID generation code.
name|scmNodeManager
operator|=
operator|new
name|SCMNodeManager
argument_list|(
name|conf
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|scmContainerManager
operator|=
operator|new
name|ContainerMapping
argument_list|(
name|conf
argument_list|,
name|scmNodeManager
argument_list|,
name|cacheSize
argument_list|)
expr_stmt|;
name|scmBlockManager
operator|=
operator|new
name|BlockManagerImpl
argument_list|(
name|conf
argument_list|,
name|scmNodeManager
argument_list|,
name|scmContainerManager
argument_list|,
name|cacheSize
argument_list|)
expr_stmt|;
name|scmAdminUsernames
operator|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ADMINISTRATORS
argument_list|)
expr_stmt|;
name|scmUsername
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|scmAdminUsernames
operator|.
name|contains
argument_list|(
name|scmUsername
argument_list|)
condition|)
block|{
name|scmAdminUsernames
operator|.
name|add
argument_list|(
name|scmUsername
argument_list|)
expr_stmt|;
block|}
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|StorageContainerDatanodeProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|ScmBlockLocationProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|BlockingService
name|dnProtoPbService
init|=
name|StorageContainerDatanodeProtocolProtos
operator|.
name|StorageContainerDatanodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
operator|new
name|StorageContainerDatanodeProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|datanodeRpcAddr
init|=
name|OzoneClientUtils
operator|.
name|getScmDataNodeBindAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|datanodeRpcServer
operator|=
name|startRpcServer
argument_list|(
name|conf
argument_list|,
name|datanodeRpcAddr
argument_list|,
name|StorageContainerDatanodeProtocolPB
operator|.
name|class
argument_list|,
name|dnProtoPbService
argument_list|,
name|handlerCount
argument_list|)
expr_stmt|;
name|datanodeRpcAddress
operator|=
name|OzoneClientUtils
operator|.
name|updateRPCListenAddress
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|,
name|datanodeRpcAddr
argument_list|,
name|datanodeRpcServer
argument_list|)
expr_stmt|;
comment|// SCM Container Service RPC
name|BlockingService
name|storageProtoPbService
init|=
name|StorageContainerLocationProtocolProtos
operator|.
name|StorageContainerLocationProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
operator|new
name|StorageContainerLocationProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|scmAddress
init|=
name|OzoneClientUtils
operator|.
name|getScmClientBindAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientRpcServer
operator|=
name|startRpcServer
argument_list|(
name|conf
argument_list|,
name|scmAddress
argument_list|,
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|,
name|storageProtoPbService
argument_list|,
name|handlerCount
argument_list|)
expr_stmt|;
name|clientRpcAddress
operator|=
name|OzoneClientUtils
operator|.
name|updateRPCListenAddress
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
name|scmAddress
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
comment|// SCM Block Service RPC
name|BlockingService
name|blockProtoPbService
init|=
name|ScmBlockLocationProtocolProtos
operator|.
name|ScmBlockLocationProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
operator|new
name|ScmBlockLocationProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|scmBlockAddress
init|=
name|OzoneClientUtils
operator|.
name|getScmBlockClientBindAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|blockRpcServer
operator|=
name|startRpcServer
argument_list|(
name|conf
argument_list|,
name|scmBlockAddress
argument_list|,
name|ScmBlockLocationProtocolPB
operator|.
name|class
argument_list|,
name|blockProtoPbService
argument_list|,
name|handlerCount
argument_list|)
expr_stmt|;
name|blockRpcAddress
operator|=
name|OzoneClientUtils
operator|.
name|updateRPCListenAddress
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY
argument_list|,
name|scmBlockAddress
argument_list|,
name|blockRpcServer
argument_list|)
expr_stmt|;
name|httpServer
operator|=
operator|new
name|StorageContainerManagerHttpServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|registerMXBean
argument_list|()
expr_stmt|;
block|}
comment|/**    * Builds a message for logging startup information about an RPC server.    *    * @param description RPC server description    * @param addr RPC server listening address    * @return server startup message    */
DECL|method|buildRpcServerStartMessage (String description, InetSocketAddress addr)
specifier|private
specifier|static
name|String
name|buildRpcServerStartMessage
parameter_list|(
name|String
name|description
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|!=
literal|null
condition|?
name|String
operator|.
name|format
argument_list|(
literal|"%s is listening at %s"
argument_list|,
name|description
argument_list|,
name|addr
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|String
operator|.
name|format
argument_list|(
literal|"%s not started"
argument_list|,
name|description
argument_list|)
return|;
block|}
comment|/**    * Starts an RPC server, if configured.    *    * @param conf configuration    * @param addr configured address of RPC server    * @param protocol RPC protocol provided by RPC server    * @param instance RPC protocol implementation instance    * @param handlerCount RPC server handler count    *    * @return RPC server    * @throws IOException if there is an I/O error while creating RPC server    */
DECL|method|startRpcServer (OzoneConfiguration conf, InetSocketAddress addr, Class<?> protocol, BlockingService instance, int handlerCount)
specifier|private
specifier|static
name|RPC
operator|.
name|Server
name|startRpcServer
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|BlockingService
name|instance
parameter_list|,
name|int
name|handlerCount
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|Server
name|rpcServer
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
operator|.
name|setInstance
argument_list|(
name|instance
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|handlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|instance
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
return|return
name|rpcServer
return|;
block|}
DECL|method|registerMXBean ()
specifier|private
name|void
name|registerMXBean
parameter_list|()
block|{
name|this
operator|.
name|scmInfoBeanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"StorageContainerManager"
argument_list|,
literal|"StorageContainerManagerInfo"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterMXBean ()
specifier|private
name|void
name|unregisterMXBean
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|scmInfoBeanName
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|this
operator|.
name|scmInfoBeanName
argument_list|)
expr_stmt|;
name|this
operator|.
name|scmInfoBeanName
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Main entry point for starting StorageContainerManager.    *    * @param argv arguments    * @throws IOException if startup fails due to I/O error    */
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|IOException
block|{
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|StorageContainerManager
operator|.
name|class
argument_list|,
name|argv
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
try|try
block|{
name|StorageContainerManager
name|scm
init|=
operator|new
name|StorageContainerManager
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|scm
operator|.
name|start
argument_list|()
expr_stmt|;
name|scm
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start the StorageContainerManager."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns a SCMCommandRepose from the SCM Command.    * @param cmd - Cmd    * @return SCMCommandResponseProto    * @throws InvalidProtocolBufferException    */
annotation|@
name|VisibleForTesting
DECL|method|getCommandResponse (SCMCommand cmd)
specifier|public
specifier|static
name|SCMCommandResponseProto
name|getCommandResponse
parameter_list|(
name|SCMCommand
name|cmd
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|Type
name|type
init|=
name|cmd
operator|.
name|getType
argument_list|()
decl_stmt|;
name|SCMCommandResponseProto
operator|.
name|Builder
name|builder
init|=
name|SCMCommandResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|registeredCommand
case|:
return|return
name|builder
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|registeredCommand
argument_list|)
operator|.
name|setRegisteredProto
argument_list|(
name|SCMRegisteredCmdResponseProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
case|case
name|versionCommand
case|:
return|return
name|builder
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|versionCommand
argument_list|)
operator|.
name|setVersionProto
argument_list|(
name|SCMVersionResponseProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
case|case
name|sendContainerReport
case|:
return|return
name|builder
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|sendContainerReport
argument_list|)
operator|.
name|setSendReport
argument_list|(
name|SendContainerReportProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
case|case
name|reregisterCommand
case|:
return|return
name|builder
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|reregisterCommand
argument_list|)
operator|.
name|setReregisterProto
argument_list|(
name|SCMReregisterCmdResponseProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRegisteredResponse ( SCMCommand cmd, SCMNodeAddressList addressList)
specifier|public
specifier|static
name|SCMRegisteredCmdResponseProto
name|getRegisteredResponse
parameter_list|(
name|SCMCommand
name|cmd
parameter_list|,
name|SCMNodeAddressList
name|addressList
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|cmd
operator|.
name|getClass
argument_list|()
operator|==
name|RegisteredCommand
operator|.
name|class
argument_list|)
expr_stmt|;
name|RegisteredCommand
name|rCmd
init|=
operator|(
name|RegisteredCommand
operator|)
name|cmd
decl_stmt|;
name|StorageContainerDatanodeProtocolProtos
operator|.
name|Type
name|type
init|=
name|cmd
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|Type
operator|.
name|registeredCommand
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Registered command is not well "
operator|+
literal|"formed. Internal Error."
argument_list|)
throw|;
block|}
return|return
name|SCMRegisteredCmdResponseProto
operator|.
name|newBuilder
argument_list|()
comment|//TODO : Fix this later when we have multiple SCM support.
comment|//.setAddressList(addressList)
operator|.
name|setErrorCode
argument_list|(
name|rCmd
operator|.
name|getError
argument_list|()
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|rCmd
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|.
name|setDatanodeUUID
argument_list|(
name|rCmd
operator|.
name|getDatanodeUUID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Asks SCM where a container should be allocated. SCM responds with the set    * of datanodes that should be used creating this container.    *    * @param containerName - Name of the container.    * @return Pipeline.    * @throws IOException    */
annotation|@
name|Override
DECL|method|allocateContainer (String containerName)
specifier|public
name|Pipeline
name|allocateContainer
parameter_list|(
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAdminAccess
argument_list|()
expr_stmt|;
return|return
name|scmContainerManager
operator|.
name|allocateContainer
argument_list|(
name|containerName
argument_list|,
name|ScmClient
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|getContainer (String containerName)
specifier|public
name|Pipeline
name|getContainer
parameter_list|(
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAdminAccess
argument_list|()
expr_stmt|;
return|return
name|scmContainerManager
operator|.
name|getContainer
argument_list|(
name|containerName
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|listContainer (String startName, String prefixName, int count)
specifier|public
name|List
argument_list|<
name|Pipeline
argument_list|>
name|listContainer
parameter_list|(
name|String
name|startName
parameter_list|,
name|String
name|prefixName
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scmContainerManager
operator|.
name|listContainer
argument_list|(
name|startName
argument_list|,
name|prefixName
argument_list|,
name|count
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|deleteContainer (String containerName)
specifier|public
name|void
name|deleteContainer
parameter_list|(
name|String
name|containerName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAdminAccess
argument_list|()
expr_stmt|;
name|scmContainerManager
operator|.
name|deleteContainer
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Queries a list of Node Statuses.    *    * @param nodeStatuses    * @param queryScope    * @param poolName @return List of Datanodes.    */
annotation|@
name|Override
DECL|method|queryNode (EnumSet<NodeState> nodeStatuses, OzoneProtos.QueryScope queryScope, String poolName)
specifier|public
name|OzoneProtos
operator|.
name|NodePool
name|queryNode
parameter_list|(
name|EnumSet
argument_list|<
name|NodeState
argument_list|>
name|nodeStatuses
parameter_list|,
name|OzoneProtos
operator|.
name|QueryScope
name|queryScope
parameter_list|,
name|String
name|poolName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|queryScope
operator|==
name|OzoneProtos
operator|.
name|QueryScope
operator|.
name|POOL
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not Supported yet"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|datanodes
init|=
name|queryNode
argument_list|(
name|nodeStatuses
argument_list|)
decl_stmt|;
name|OzoneProtos
operator|.
name|NodePool
operator|.
name|Builder
name|poolBuilder
init|=
name|OzoneProtos
operator|.
name|NodePool
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeID
name|datanode
range|:
name|datanodes
control|)
block|{
name|OzoneProtos
operator|.
name|Node
name|node
init|=
name|OzoneProtos
operator|.
name|Node
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|datanode
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
operator|.
name|addAllNodeStates
argument_list|(
name|nodeStatuses
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|poolBuilder
operator|.
name|addNodes
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|poolBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Queries a list of Node that match a set of statuses.    *<p>    * For example, if the nodeStatuses is HEALTHY and RAFT_MEMBER,    * then this call will return all healthy nodes which members in    * Raft pipeline.    *<p>    * Right now we don't support operations, so we assume it is an AND operation    * between the operators.    *    * @param nodeStatuses - A set of NodeStates.    * @return List of Datanodes.    */
DECL|method|queryNode (EnumSet<NodeState> nodeStatuses)
specifier|public
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|queryNode
parameter_list|(
name|EnumSet
argument_list|<
name|NodeState
argument_list|>
name|nodeStatuses
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nodeStatuses
argument_list|,
literal|"Node Query set cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nodeStatuses
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
literal|"No valid arguments "
operator|+
literal|"in the query set"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|resultList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|DatanodeID
argument_list|>
name|currentSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeState
name|nodeState
range|:
name|nodeStatuses
control|)
block|{
name|Set
argument_list|<
name|DatanodeID
argument_list|>
name|nextSet
init|=
name|queryNodeState
argument_list|(
name|nodeState
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|nextSet
operator|==
literal|null
operator|)
operator|||
operator|(
name|nextSet
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|// Right now we only support AND operation. So intersect with
comment|// any empty set is null.
return|return
name|resultList
return|;
block|}
comment|// First time we have to add all the elements, next time we have to
comment|// do an intersection operation on the set.
if|if
condition|(
name|currentSet
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|currentSet
operator|.
name|addAll
argument_list|(
name|nextSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentSet
operator|.
name|retainAll
argument_list|(
name|nextSet
argument_list|)
expr_stmt|;
block|}
block|}
name|resultList
operator|.
name|addAll
argument_list|(
name|currentSet
argument_list|)
expr_stmt|;
return|return
name|resultList
return|;
block|}
comment|/**    * Query the System for Nodes.    *    * @param nodeState - NodeState that we are interested in matching.    * @return Set of Datanodes that match the NodeState.    */
DECL|method|queryNodeState (NodeState nodeState)
specifier|private
name|Set
argument_list|<
name|DatanodeID
argument_list|>
name|queryNodeState
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
if|if
condition|(
name|nodeState
operator|==
name|NodeState
operator|.
name|RAFT_MEMBER
operator|||
name|nodeState
operator|==
name|NodeState
operator|.
name|FREE_NODE
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Not implemented yet"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|DatanodeID
argument_list|>
name|returnSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|tmp
init|=
name|getScmNodeManager
argument_list|()
operator|.
name|getNodes
argument_list|(
name|nodeState
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|tmp
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|tmp
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|returnSet
operator|.
name|addAll
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|returnSet
return|;
block|}
comment|/**    * Asks SCM where a container should be allocated. SCM responds with the set    * of datanodes that should be used creating this container.    *    * @param containerName - Name of the container.    * @param replicationFactor - replication factor.    * @return Pipeline.    * @throws IOException    */
annotation|@
name|Override
DECL|method|allocateContainer (String containerName, ScmClient.ReplicationFactor replicationFactor)
specifier|public
name|Pipeline
name|allocateContainer
parameter_list|(
name|String
name|containerName
parameter_list|,
name|ScmClient
operator|.
name|ReplicationFactor
name|replicationFactor
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAdminAccess
argument_list|()
expr_stmt|;
return|return
name|scmContainerManager
operator|.
name|allocateContainer
argument_list|(
name|containerName
argument_list|,
name|replicationFactor
argument_list|)
return|;
block|}
comment|/**    * Returns listening address of StorageLocation Protocol RPC server.    *    * @return listen address of StorageLocation RPC server    */
annotation|@
name|VisibleForTesting
DECL|method|getClientRpcAddress ()
specifier|public
name|InetSocketAddress
name|getClientRpcAddress
parameter_list|()
block|{
return|return
name|clientRpcAddress
return|;
block|}
annotation|@
name|Override
DECL|method|getClientRpcPort ()
specifier|public
name|String
name|getClientRpcPort
parameter_list|()
block|{
name|InetSocketAddress
name|addr
init|=
name|getClientRpcAddress
argument_list|()
decl_stmt|;
return|return
name|addr
operator|==
literal|null
condition|?
literal|"0"
else|:
name|Integer
operator|.
name|toString
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns listening address of StorageDatanode Protocol RPC server.    *    * @return Address where datanode are communicating.    */
DECL|method|getDatanodeRpcAddress ()
specifier|public
name|InetSocketAddress
name|getDatanodeRpcAddress
parameter_list|()
block|{
return|return
name|datanodeRpcAddress
return|;
block|}
annotation|@
name|Override
DECL|method|getDatanodeRpcPort ()
specifier|public
name|String
name|getDatanodeRpcPort
parameter_list|()
block|{
name|InetSocketAddress
name|addr
init|=
name|getDatanodeRpcAddress
argument_list|()
decl_stmt|;
return|return
name|addr
operator|==
literal|null
condition|?
literal|"0"
else|:
name|Integer
operator|.
name|toString
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Start service.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"StorageContainerLocationProtocol RPC server"
argument_list|,
name|clientRpcAddress
argument_list|)
argument_list|)
expr_stmt|;
name|clientRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"ScmBlockLocationProtocol RPC server"
argument_list|,
name|blockRpcAddress
argument_list|)
argument_list|)
expr_stmt|;
name|blockRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"RPC server for DataNodes"
argument_list|,
name|datanodeRpcAddress
argument_list|)
argument_list|)
expr_stmt|;
name|datanodeRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop service.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping block service RPC server"
argument_list|)
expr_stmt|;
name|blockRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Storage Container Manager blockRpcServer stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the StorageContainerLocationProtocol RPC server"
argument_list|)
expr_stmt|;
name|clientRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Storage Container Manager clientRpcServer stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the RPC server for DataNodes"
argument_list|)
expr_stmt|;
name|datanodeRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Storage Container Manager datanodeRpcServer stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping Storage Container Manager HTTP server."
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Storage Container Manager HTTP server stop failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|unregisterMXBean
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|scmContainerManager
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|scmBlockManager
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|scmNodeManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until service has completed shutdown.    */
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
try|try
block|{
name|blockRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
name|clientRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
name|datanodeRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted during StorageContainerManager join."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns SCM version.    *    * @return Version info.    */
annotation|@
name|Override
DECL|method|getVersion ( SCMVersionRequestProto versionRequest)
specifier|public
name|SCMVersionResponseProto
name|getVersion
parameter_list|(
name|SCMVersionRequestProto
name|versionRequest
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getScmNodeManager
argument_list|()
operator|.
name|getVersion
argument_list|(
name|versionRequest
argument_list|)
operator|.
name|getProtobufMessage
argument_list|()
return|;
block|}
comment|/**    * Used by data node to send a Heartbeat.    *    * @param datanodeID - Datanode ID.    * @param nodeReport - Node Report    * @param reportState - Container report ready info.    * @return - SCMHeartbeatResponseProto    * @throws IOException    */
annotation|@
name|Override
DECL|method|sendHeartbeat (DatanodeID datanodeID, SCMNodeReport nodeReport, ReportState reportState)
specifier|public
name|SCMHeartbeatResponseProto
name|sendHeartbeat
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|,
name|SCMNodeReport
name|nodeReport
parameter_list|,
name|ReportState
name|reportState
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SCMCommand
argument_list|>
name|commands
init|=
name|getScmNodeManager
argument_list|()
operator|.
name|sendHeartbeat
argument_list|(
name|datanodeID
argument_list|,
name|nodeReport
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SCMCommandResponseProto
argument_list|>
name|cmdResponses
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SCMCommand
name|cmd
range|:
name|commands
control|)
block|{
name|cmdResponses
operator|.
name|add
argument_list|(
name|getCommandResponse
argument_list|(
name|cmd
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|SCMHeartbeatResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllCommands
argument_list|(
name|cmdResponses
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Register Datanode.    *    * @param datanodeID - DatanodID.    * @param scmAddresses - List of SCMs this datanode is configured to    * communicate.    * @return SCM Command.    */
annotation|@
name|Override
specifier|public
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMRegisteredCmdResponseProto
DECL|method|register (DatanodeID datanodeID, String[] scmAddresses)
name|register
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|,
name|String
index|[]
name|scmAddresses
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO : Return the list of Nodes that forms the SCM HA.
return|return
name|getRegisteredResponse
argument_list|(
name|scmNodeManager
operator|.
name|register
argument_list|(
name|datanodeID
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Send a container report.    *    * @param reports -- Container report    * @return HeartbeatRespose.nullcommand.    * @throws IOException    */
annotation|@
name|Override
specifier|public
name|SCMHeartbeatResponseProto
DECL|method|sendContainerReport (ContainerReportsProto reports)
name|sendContainerReport
parameter_list|(
name|ContainerReportsProto
name|reports
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO : fix this in the server side code changes for handling this request
comment|// correctly.
name|List
argument_list|<
name|SCMCommandResponseProto
argument_list|>
name|cmdResponses
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|SCMHeartbeatResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllCommands
argument_list|(
name|cmdResponses
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns the Number of Datanodes that are communicating with SCM.    *    * @param nodestate Healthy, Dead etc.    * @return int -- count    */
DECL|method|getNodeCount (NodeState nodestate)
specifier|public
name|int
name|getNodeCount
parameter_list|(
name|NodeState
name|nodestate
parameter_list|)
block|{
return|return
name|scmNodeManager
operator|.
name|getNodeCount
argument_list|(
name|nodestate
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeCount ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getNodeCount
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|countMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeState
name|state
range|:
name|NodeState
operator|.
name|values
argument_list|()
control|)
block|{
name|countMap
operator|.
name|put
argument_list|(
name|state
operator|.
name|toString
argument_list|()
argument_list|,
name|scmNodeManager
operator|.
name|getNodeCount
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|countMap
return|;
block|}
comment|/**    * Returns node manager.    * @return - Node Manager    */
annotation|@
name|VisibleForTesting
DECL|method|getScmNodeManager ()
specifier|public
name|NodeManager
name|getScmNodeManager
parameter_list|()
block|{
return|return
name|scmNodeManager
return|;
block|}
comment|/**    * Get block locations.    * @param keys batch of block keys to retrieve.    * @return set of allocated blocks.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getBlockLocations (final Set<String> keys)
specifier|public
name|Set
argument_list|<
name|AllocatedBlock
argument_list|>
name|getBlockLocations
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|AllocatedBlock
argument_list|>
name|locatedBlocks
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|Pipeline
name|pipeline
init|=
name|scmBlockManager
operator|.
name|getBlock
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|AllocatedBlock
name|block
init|=
operator|new
name|AllocatedBlock
operator|.
name|Builder
argument_list|()
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|locatedBlocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
return|return
name|locatedBlocks
return|;
block|}
comment|/**    * Asks SCM where a block should be allocated. SCM responds with the set    * of datanodes and leader that should be used creating this block.    *    * @param size - size of the block.    * @return - allocated block accessing info (key, pipeline and leader).    * @throws IOException    */
annotation|@
name|Override
DECL|method|allocateBlock (final long size)
specifier|public
name|AllocatedBlock
name|allocateBlock
parameter_list|(
specifier|final
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scmBlockManager
operator|.
name|allocateBlock
argument_list|(
name|size
argument_list|)
return|;
block|}
comment|/**    * Delete blocks.    * @param keys batch of block keys to delete.    * @return deletion results.    */
DECL|method|deleteBlocks (final Set<String> keys)
specifier|public
name|List
argument_list|<
name|DeleteBlockResult
argument_list|>
name|deleteBlocks
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|DeleteBlockResult
argument_list|>
name|results
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|Result
name|resultCode
decl_stmt|;
try|try
block|{
name|scmBlockManager
operator|.
name|deleteBlock
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|resultCode
operator|=
name|Result
operator|.
name|success
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SCMException
name|scmEx
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fail to delete block: {}"
argument_list|,
name|key
argument_list|,
name|scmEx
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|scmEx
operator|.
name|getResult
argument_list|()
condition|)
block|{
case|case
name|CHILL_MODE_EXCEPTION
case|:
name|resultCode
operator|=
name|Result
operator|.
name|chillMode
expr_stmt|;
break|break;
case|case
name|FAILED_TO_FIND_BLOCK
case|:
name|resultCode
operator|=
name|Result
operator|.
name|errorNotFound
expr_stmt|;
break|break;
default|default:
name|resultCode
operator|=
name|Result
operator|.
name|unknownFailure
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fail to delete block: {}"
argument_list|,
name|key
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|resultCode
operator|=
name|Result
operator|.
name|unknownFailure
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
operator|new
name|DeleteBlockResult
argument_list|(
name|key
argument_list|,
name|resultCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getPpcRemoteUsername ()
specifier|public
name|String
name|getPpcRemoteUsername
parameter_list|()
block|{
name|UserGroupInformation
name|user
init|=
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
return|return
name|user
operator|==
literal|null
condition|?
literal|null
else|:
name|user
operator|.
name|getUserName
argument_list|()
return|;
block|}
DECL|method|checkAdminAccess ()
specifier|private
name|void
name|checkAdminAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|remoteUser
init|=
name|getPpcRemoteUsername
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|scmAdminUsernames
operator|.
name|contains
argument_list|(
name|remoteUser
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Access denied for user "
operator|+
name|remoteUser
operator|+
literal|". Superuser privilege is required."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

