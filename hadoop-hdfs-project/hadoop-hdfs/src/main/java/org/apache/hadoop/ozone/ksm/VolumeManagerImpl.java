begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ksm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|exceptions
operator|.
name|KSMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|VolumeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_USER_MAX_VOLUME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_USER_MAX_VOLUME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|exceptions
operator|.
name|KSMException
operator|.
name|ResultCodes
import|;
end_import

begin_comment
comment|/**  * KSM volume management code.  */
end_comment

begin_class
DECL|class|VolumeManagerImpl
specifier|public
class|class
name|VolumeManagerImpl
implements|implements
name|VolumeManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VolumeManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|metadataManager
specifier|private
specifier|final
name|MetadataManager
name|metadataManager
decl_stmt|;
DECL|field|maxUserVolumeCount
specifier|private
specifier|final
name|int
name|maxUserVolumeCount
decl_stmt|;
comment|/**    * Constructor.    * @param conf - Ozone configuration.    * @throws IOException    */
DECL|method|VolumeManagerImpl (MetadataManager metadataManager, OzoneConfiguration conf)
specifier|public
name|VolumeManagerImpl
parameter_list|(
name|MetadataManager
name|metadataManager
parameter_list|,
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|metadataManager
operator|=
name|metadataManager
expr_stmt|;
name|this
operator|.
name|maxUserVolumeCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_KSM_USER_MAX_VOLUME
argument_list|,
name|OZONE_KSM_USER_MAX_VOLUME_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|// Helpers to add and delete volume from user list
DECL|method|addVolumeToOwnerList (String volume, String owner, List<Map.Entry<byte[], byte[]>> putBatch)
specifier|private
name|void
name|addVolumeToOwnerList
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|putBatch
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the volume list
name|byte
index|[]
name|dbUserKey
init|=
name|metadataManager
operator|.
name|getUserKey
argument_list|(
name|owner
argument_list|)
decl_stmt|;
name|byte
index|[]
name|volumeList
init|=
name|metadataManager
operator|.
name|get
argument_list|(
name|dbUserKey
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|prevVolList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|volumeList
operator|!=
literal|null
condition|)
block|{
name|VolumeList
name|vlist
init|=
name|VolumeList
operator|.
name|parseFrom
argument_list|(
name|volumeList
argument_list|)
decl_stmt|;
name|prevVolList
operator|.
name|addAll
argument_list|(
name|vlist
operator|.
name|getVolumeNamesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the volume count
if|if
condition|(
name|prevVolList
operator|.
name|size
argument_list|()
operator|>=
name|maxUserVolumeCount
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Too many volumes for user:{}"
argument_list|,
name|owner
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
name|ResultCodes
operator|.
name|FAILED_TOO_MANY_USER_VOLUMES
argument_list|)
throw|;
block|}
comment|// Add the new volume to the list
name|prevVolList
operator|.
name|add
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|VolumeList
name|newVolList
init|=
name|VolumeList
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllVolumeNames
argument_list|(
name|prevVolList
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|putBatch
operator|.
name|add
argument_list|(
name|batchEntry
argument_list|(
name|dbUserKey
argument_list|,
name|newVolList
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|delVolumeFromOwnerList (String volume, String owner, List<Map.Entry<byte[], byte[]>> putBatch, List<byte[]> deleteBatch)
specifier|private
name|void
name|delVolumeFromOwnerList
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|putBatch
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|deleteBatch
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the volume list
name|byte
index|[]
name|dbUserKey
init|=
name|metadataManager
operator|.
name|getUserKey
argument_list|(
name|owner
argument_list|)
decl_stmt|;
name|byte
index|[]
name|volumeList
init|=
name|metadataManager
operator|.
name|get
argument_list|(
name|dbUserKey
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|prevVolList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|volumeList
operator|!=
literal|null
condition|)
block|{
name|VolumeList
name|vlist
init|=
name|VolumeList
operator|.
name|parseFrom
argument_list|(
name|volumeList
argument_list|)
decl_stmt|;
name|prevVolList
operator|.
name|addAll
argument_list|(
name|vlist
operator|.
name|getVolumeNamesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|KSMException
argument_list|(
name|ResultCodes
operator|.
name|FAILED_USER_NOT_FOUND
argument_list|)
throw|;
block|}
comment|// Remove the volume from the list
name|prevVolList
operator|.
name|remove
argument_list|(
name|volume
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevVolList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|deleteBatch
operator|.
name|add
argument_list|(
name|dbUserKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|VolumeList
name|newVolList
init|=
name|VolumeList
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllVolumeNames
argument_list|(
name|prevVolList
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|putBatch
operator|.
name|add
argument_list|(
name|batchEntry
argument_list|(
name|dbUserKey
argument_list|,
name|newVolList
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|batchEntry (byte[] key, byte[] value)
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|batchEntry
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Creates a volume.    * @param args - KsmVolumeArgs.    */
annotation|@
name|Override
DECL|method|createVolume (KsmVolumeArgs args)
specifier|public
name|void
name|createVolume
parameter_list|(
name|KsmVolumeArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|batch
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|args
operator|.
name|getVolume
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|volumeInfo
init|=
name|metadataManager
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
comment|// Check of the volume already exists
if|if
condition|(
name|volumeInfo
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"volume:{} already exists"
argument_list|,
name|args
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
name|ResultCodes
operator|.
name|FAILED_VOLUME_ALREADY_EXISTS
argument_list|)
throw|;
block|}
comment|// Write the vol info
name|VolumeInfo
name|newVolumeInfo
init|=
name|args
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|batch
operator|.
name|add
argument_list|(
name|batchEntry
argument_list|(
name|dbVolumeKey
argument_list|,
name|newVolumeInfo
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add volume to user list
name|addVolumeToOwnerList
argument_list|(
name|args
operator|.
name|getVolume
argument_list|()
argument_list|,
name|args
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|batch
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|batchPut
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"created volume:{} user:{}"
argument_list|,
name|args
operator|.
name|getVolume
argument_list|()
argument_list|,
name|args
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|DBException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Volume creation failed for user:{} volname:{}"
argument_list|,
name|args
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|args
operator|.
name|getVolume
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Changes the owner of a volume.    *    * @param volume - Name of the volume.    * @param owner - Name of the owner.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setOwner (String volume, String owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|putBatch
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|deleteBatch
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|byte
index|[]
name|volInfo
init|=
name|metadataManager
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KSMException
argument_list|(
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|VolumeInfo
name|volumeInfo
init|=
name|VolumeInfo
operator|.
name|parseFrom
argument_list|(
name|volInfo
argument_list|)
decl_stmt|;
name|KsmVolumeArgs
name|volumeArgs
init|=
name|KsmVolumeArgs
operator|.
name|getFromProtobuf
argument_list|(
name|volumeInfo
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equalsIgnoreCase
argument_list|(
name|volumeInfo
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|delVolumeFromOwnerList
argument_list|(
name|volume
argument_list|,
name|volumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|putBatch
argument_list|,
name|deleteBatch
argument_list|)
expr_stmt|;
name|addVolumeToOwnerList
argument_list|(
name|volume
argument_list|,
name|owner
argument_list|,
name|putBatch
argument_list|)
expr_stmt|;
name|KsmVolumeArgs
name|newVolumeArgs
init|=
name|KsmVolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolume
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
operator|.
name|setAdminName
argument_list|(
name|volumeArgs
operator|.
name|getAdminName
argument_list|()
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|owner
argument_list|)
operator|.
name|setQuotaInBytes
argument_list|(
name|volumeArgs
operator|.
name|getQuotaInBytes
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|VolumeInfo
name|newVolumeInfo
init|=
name|newVolumeArgs
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|putBatch
operator|.
name|add
argument_list|(
name|batchEntry
argument_list|(
name|dbVolumeKey
argument_list|,
name|newVolumeInfo
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|batchPutDelete
argument_list|(
name|putBatch
argument_list|,
name|deleteBatch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Changing volume ownership failed for user:{} volume:{}"
argument_list|,
name|owner
argument_list|,
name|volume
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Changes the Quota on a volume.    *    * @param volume - Name of the volume.    * @param quota - Quota in bytes.    * @throws IOException    */
DECL|method|setQuota (String volume, long quota)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|volume
parameter_list|,
name|long
name|quota
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|byte
index|[]
name|volInfo
init|=
name|metadataManager
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KSMException
argument_list|(
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|VolumeInfo
name|volumeInfo
init|=
name|VolumeInfo
operator|.
name|parseFrom
argument_list|(
name|volInfo
argument_list|)
decl_stmt|;
name|KsmVolumeArgs
name|volumeArgs
init|=
name|KsmVolumeArgs
operator|.
name|getFromProtobuf
argument_list|(
name|volumeInfo
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equalsIgnoreCase
argument_list|(
name|volumeInfo
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|KsmVolumeArgs
name|newVolumeArgs
init|=
name|KsmVolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolume
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
operator|.
name|setAdminName
argument_list|(
name|volumeArgs
operator|.
name|getAdminName
argument_list|()
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|volumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|)
operator|.
name|setQuotaInBytes
argument_list|(
name|quota
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|VolumeInfo
name|newVolumeInfo
init|=
name|newVolumeArgs
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|put
argument_list|(
name|dbVolumeKey
argument_list|,
name|newVolumeInfo
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Changing volume quota failed for volume:{} quota:{}"
argument_list|,
name|volume
argument_list|,
name|quota
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Gets the volume information.    * @param volume - Volume name.    * @return VolumeArgs or exception is thrown.    * @throws IOException    */
DECL|method|getVolumeInfo (String volume)
specifier|public
name|KsmVolumeArgs
name|getVolumeInfo
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|byte
index|[]
name|volInfo
init|=
name|metadataManager
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KSMException
argument_list|(
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|VolumeInfo
name|volumeInfo
init|=
name|VolumeInfo
operator|.
name|parseFrom
argument_list|(
name|volInfo
argument_list|)
decl_stmt|;
name|KsmVolumeArgs
name|volumeArgs
init|=
name|KsmVolumeArgs
operator|.
name|getFromProtobuf
argument_list|(
name|volumeInfo
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equalsIgnoreCase
argument_list|(
name|volumeInfo
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|volumeArgs
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Info volume failed for volume:{}"
argument_list|,
name|volume
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Deletes an existing empty volume.    *    * @param volume - Name of the volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteVolume (String volume)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|putBatch
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|deleteBatch
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|byte
index|[]
name|volInfo
init|=
name|metadataManager
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|KSMException
argument_list|(
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|metadataManager
operator|.
name|isVolumeEmpty
argument_list|(
name|volume
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|KSMException
argument_list|(
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_EMPTY
argument_list|)
throw|;
block|}
name|VolumeInfo
name|volumeInfo
init|=
name|VolumeInfo
operator|.
name|parseFrom
argument_list|(
name|volInfo
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equalsIgnoreCase
argument_list|(
name|volumeInfo
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the volume from the owner list
comment|// as well as delete the volume entry
name|delVolumeFromOwnerList
argument_list|(
name|volume
argument_list|,
name|volumeInfo
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|putBatch
argument_list|,
name|deleteBatch
argument_list|)
expr_stmt|;
name|deleteBatch
operator|.
name|add
argument_list|(
name|dbVolumeKey
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|batchPutDelete
argument_list|(
name|putBatch
argument_list|,
name|deleteBatch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Delete volume failed for volume:{}"
argument_list|,
name|volume
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

