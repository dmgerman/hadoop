begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockLocalPathInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockMetadataHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FSDataset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_comment
comment|/**  * BlockReaderLocal enables local short circuited reads. If the DFS client is on  * the same machine as the datanode, then the client can read files directly  * from the local file system rather than going through the datanode for better  * performance.<br>  * {@link BlockReaderLocal} works as follows:  *<ul>  *<li>The client performing short circuit reads must be configured at the  * datanode.</li>  *<li>The client gets the path to the file where block is stored using  * {@link org.apache.hadoop.hdfs.protocol.ClientDatanodeProtocol#getBlockLocalPathInfo(ExtendedBlock, Token)}  * RPC call</li>  *<li>Client uses kerberos authentication to connect to the datanode over RPC,  * if security is enabled.</li>  *</ul>  */
end_comment

begin_class
DECL|class|BlockReaderLocal
class|class
name|BlockReaderLocal
extends|extends
name|RemoteBlockReader2
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DFSClient
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Stores the cache and proxy for a local datanode.
DECL|class|LocalDatanodeInfo
specifier|private
specifier|static
class|class
name|LocalDatanodeInfo
block|{
DECL|field|proxy
specifier|private
name|ClientDatanodeProtocol
name|proxy
init|=
literal|null
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|BlockLocalPathInfo
argument_list|>
name|cache
decl_stmt|;
DECL|method|LocalDatanodeInfo ()
name|LocalDatanodeInfo
parameter_list|()
block|{
specifier|final
name|int
name|cacheSize
init|=
literal|10000
decl_stmt|;
specifier|final
name|float
name|hashTableLoadFactor
init|=
literal|0.75f
decl_stmt|;
name|int
name|hashTableCapacity
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|cacheSize
operator|/
name|hashTableLoadFactor
argument_list|)
operator|+
literal|1
decl_stmt|;
name|cache
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|ExtendedBlock
argument_list|,
name|BlockLocalPathInfo
argument_list|>
argument_list|(
name|hashTableCapacity
argument_list|,
name|hashTableLoadFactor
argument_list|,
literal|true
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|ExtendedBlock
argument_list|,
name|BlockLocalPathInfo
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|cacheSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getDatanodeProxy ( DatanodeInfo node, Configuration conf, int socketTimeout)
specifier|private
specifier|synchronized
name|ClientDatanodeProtocol
name|getDatanodeProxy
parameter_list|(
name|DatanodeInfo
name|node
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|socketTimeout
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
name|proxy
operator|=
name|DFSUtil
operator|.
name|createClientDatanodeProtocolProxy
argument_list|(
name|node
argument_list|,
name|conf
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
block|}
return|return
name|proxy
return|;
block|}
DECL|method|resetDatanodeProxy ()
specifier|private
specifier|synchronized
name|void
name|resetDatanodeProxy
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|proxy
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|proxy
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getBlockLocalPathInfo (ExtendedBlock b)
specifier|private
name|BlockLocalPathInfo
name|getBlockLocalPathInfo
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|b
argument_list|)
return|;
block|}
DECL|method|setBlockLocalPathInfo (ExtendedBlock b, BlockLocalPathInfo info)
specifier|private
name|void
name|setBlockLocalPathInfo
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|BlockLocalPathInfo
name|info
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|removeBlockLocalPathInfo (ExtendedBlock b)
specifier|private
name|void
name|removeBlockLocalPathInfo
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Multiple datanodes could be running on the local machine. Store proxies in
comment|// a map keyed by the ipc port of the datanode.
DECL|field|localDatanodeInfoMap
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|LocalDatanodeInfo
argument_list|>
name|localDatanodeInfoMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|LocalDatanodeInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|dataIn
specifier|private
specifier|final
name|FileInputStream
name|dataIn
decl_stmt|;
comment|// reader for the data file
DECL|field|checksumIn
specifier|private
name|FileInputStream
name|checksumIn
decl_stmt|;
comment|// reader for the checksum file
DECL|field|offsetFromChunkBoundary
specifier|private
name|int
name|offsetFromChunkBoundary
decl_stmt|;
DECL|field|dataBuff
name|ByteBuffer
name|dataBuff
init|=
literal|null
decl_stmt|;
DECL|field|checksumBuff
name|ByteBuffer
name|checksumBuff
init|=
literal|null
decl_stmt|;
comment|/**    * The only way this object can be instantiated.    */
DECL|method|newBlockReader (Configuration conf, String file, ExtendedBlock blk, Token<BlockTokenIdentifier> token, DatanodeInfo node, int socketTimeout, long startOffset, long length)
specifier|static
name|BlockReaderLocal
name|newBlockReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|file
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|DatanodeInfo
name|node
parameter_list|,
name|int
name|socketTimeout
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|LocalDatanodeInfo
name|localDatanodeInfo
init|=
name|getLocalDatanodeInfo
argument_list|(
name|node
operator|.
name|getIpcPort
argument_list|()
argument_list|)
decl_stmt|;
comment|// check the cache first
name|BlockLocalPathInfo
name|pathinfo
init|=
name|localDatanodeInfo
operator|.
name|getBlockLocalPathInfo
argument_list|(
name|blk
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathinfo
operator|==
literal|null
condition|)
block|{
name|pathinfo
operator|=
name|getBlockPathInfo
argument_list|(
name|blk
argument_list|,
name|node
argument_list|,
name|conf
argument_list|,
name|socketTimeout
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
comment|// check to see if the file exists. It may so happen that the
comment|// HDFS file has been deleted and this block-lookup is occurring
comment|// on behalf of a new HDFS file. This time, the block file could
comment|// be residing in a different portion of the fs.data.dir directory.
comment|// In this case, we remove this entry from the cache. The next
comment|// call to this method will re-populate the cache.
name|FileInputStream
name|dataIn
init|=
literal|null
decl_stmt|;
name|FileInputStream
name|checksumIn
init|=
literal|null
decl_stmt|;
name|BlockReaderLocal
name|localBlockReader
init|=
literal|null
decl_stmt|;
name|boolean
name|skipChecksumCheck
init|=
name|skipChecksumCheck
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// get a local file system
name|File
name|blkfile
init|=
operator|new
name|File
argument_list|(
name|pathinfo
operator|.
name|getBlockPath
argument_list|()
argument_list|)
decl_stmt|;
name|dataIn
operator|=
operator|new
name|FileInputStream
argument_list|(
name|blkfile
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"New BlockReaderLocal for file "
operator|+
name|blkfile
operator|+
literal|" of size "
operator|+
name|blkfile
operator|.
name|length
argument_list|()
operator|+
literal|" startOffset "
operator|+
name|startOffset
operator|+
literal|" length "
operator|+
name|length
operator|+
literal|" short circuit checksum "
operator|+
name|skipChecksumCheck
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipChecksumCheck
condition|)
block|{
comment|// get the metadata file
name|File
name|metafile
init|=
operator|new
name|File
argument_list|(
name|pathinfo
operator|.
name|getMetaPath
argument_list|()
argument_list|)
decl_stmt|;
name|checksumIn
operator|=
operator|new
name|FileInputStream
argument_list|(
name|metafile
argument_list|)
expr_stmt|;
comment|// read and handle the common header here. For now just a version
name|BlockMetadataHeader
name|header
init|=
name|BlockMetadataHeader
operator|.
name|readHeader
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|checksumIn
argument_list|)
argument_list|)
decl_stmt|;
name|short
name|version
init|=
name|header
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|!=
name|FSDataset
operator|.
name|METADATA_VERSION
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Wrong version ("
operator|+
name|version
operator|+
literal|") for metadata file for "
operator|+
name|blk
operator|+
literal|" ignoring ..."
argument_list|)
expr_stmt|;
block|}
name|DataChecksum
name|checksum
init|=
name|header
operator|.
name|getChecksum
argument_list|()
decl_stmt|;
name|long
name|firstChunkOffset
init|=
name|startOffset
operator|-
operator|(
name|startOffset
operator|%
name|checksum
operator|.
name|getBytesPerChecksum
argument_list|()
operator|)
decl_stmt|;
name|localBlockReader
operator|=
operator|new
name|BlockReaderLocal
argument_list|(
name|conf
argument_list|,
name|file
argument_list|,
name|blk
argument_list|,
name|token
argument_list|,
name|startOffset
argument_list|,
name|length
argument_list|,
name|pathinfo
argument_list|,
name|checksum
argument_list|,
literal|true
argument_list|,
name|dataIn
argument_list|,
name|firstChunkOffset
argument_list|,
name|checksumIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|localBlockReader
operator|=
operator|new
name|BlockReaderLocal
argument_list|(
name|conf
argument_list|,
name|file
argument_list|,
name|blk
argument_list|,
name|token
argument_list|,
name|startOffset
argument_list|,
name|length
argument_list|,
name|pathinfo
argument_list|,
name|dataIn
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// remove from cache
name|localDatanodeInfo
operator|.
name|removeBlockLocalPathInfo
argument_list|(
name|blk
argument_list|)
expr_stmt|;
name|DFSClient
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"BlockReaderLocal: Removing "
operator|+
name|blk
operator|+
literal|" from cache because local file "
operator|+
name|pathinfo
operator|.
name|getBlockPath
argument_list|()
operator|+
literal|" could not be opened."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|localBlockReader
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|dataIn
operator|!=
literal|null
condition|)
block|{
name|dataIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|checksumIn
operator|!=
literal|null
condition|)
block|{
name|checksumIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|localBlockReader
return|;
block|}
DECL|method|getLocalDatanodeInfo (int port)
specifier|private
specifier|static
specifier|synchronized
name|LocalDatanodeInfo
name|getLocalDatanodeInfo
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|LocalDatanodeInfo
name|ldInfo
init|=
name|localDatanodeInfoMap
operator|.
name|get
argument_list|(
name|port
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldInfo
operator|==
literal|null
condition|)
block|{
name|ldInfo
operator|=
operator|new
name|LocalDatanodeInfo
argument_list|()
expr_stmt|;
name|localDatanodeInfoMap
operator|.
name|put
argument_list|(
name|port
argument_list|,
name|ldInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|ldInfo
return|;
block|}
DECL|method|getBlockPathInfo (ExtendedBlock blk, DatanodeInfo node, Configuration conf, int timeout, Token<BlockTokenIdentifier> token)
specifier|private
specifier|static
name|BlockLocalPathInfo
name|getBlockPathInfo
parameter_list|(
name|ExtendedBlock
name|blk
parameter_list|,
name|DatanodeInfo
name|node
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|timeout
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|LocalDatanodeInfo
name|localDatanodeInfo
init|=
name|getLocalDatanodeInfo
argument_list|(
name|node
operator|.
name|ipcPort
argument_list|)
decl_stmt|;
name|BlockLocalPathInfo
name|pathinfo
init|=
literal|null
decl_stmt|;
name|ClientDatanodeProtocol
name|proxy
init|=
name|localDatanodeInfo
operator|.
name|getDatanodeProxy
argument_list|(
name|node
argument_list|,
name|conf
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
try|try
block|{
comment|// make RPC to local datanode to find local pathnames of blocks
name|pathinfo
operator|=
name|proxy
operator|.
name|getBlockLocalPathInfo
argument_list|(
name|blk
argument_list|,
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathinfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cached location of block "
operator|+
name|blk
operator|+
literal|" as "
operator|+
name|pathinfo
argument_list|)
expr_stmt|;
block|}
name|localDatanodeInfo
operator|.
name|setBlockLocalPathInfo
argument_list|(
name|blk
argument_list|,
name|pathinfo
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|localDatanodeInfo
operator|.
name|resetDatanodeProxy
argument_list|()
expr_stmt|;
comment|// Reset proxy on error
throw|throw
name|e
throw|;
block|}
return|return
name|pathinfo
return|;
block|}
DECL|method|skipChecksumCheck (Configuration conf)
specifier|private
specifier|static
name|boolean
name|skipChecksumCheck
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_DEFAULT
argument_list|)
return|;
block|}
DECL|method|BlockReaderLocal (Configuration conf, String hdfsfile, ExtendedBlock block, Token<BlockTokenIdentifier> token, long startOffset, long length, BlockLocalPathInfo pathinfo, FileInputStream dataIn)
specifier|private
name|BlockReaderLocal
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|hdfsfile
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|long
name|length
parameter_list|,
name|BlockLocalPathInfo
name|pathinfo
parameter_list|,
name|FileInputStream
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|hdfsfile
argument_list|,
name|block
argument_list|,
name|token
argument_list|,
name|startOffset
argument_list|,
name|length
argument_list|,
name|pathinfo
argument_list|,
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|DataChecksum
operator|.
name|CHECKSUM_NULL
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|false
argument_list|,
name|dataIn
argument_list|,
name|startOffset
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockReaderLocal (Configuration conf, String hdfsfile, ExtendedBlock block, Token<BlockTokenIdentifier> token, long startOffset, long length, BlockLocalPathInfo pathinfo, DataChecksum checksum, boolean verifyChecksum, FileInputStream dataIn, long firstChunkOffset, FileInputStream checksumIn)
specifier|private
name|BlockReaderLocal
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|hdfsfile
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|long
name|length
parameter_list|,
name|BlockLocalPathInfo
name|pathinfo
parameter_list|,
name|DataChecksum
name|checksum
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|,
name|FileInputStream
name|dataIn
parameter_list|,
name|long
name|firstChunkOffset
parameter_list|,
name|FileInputStream
name|checksumIn
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|hdfsfile
argument_list|,
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|dataIn
operator|.
name|getChannel
argument_list|()
argument_list|,
name|checksum
argument_list|,
name|verifyChecksum
argument_list|,
name|startOffset
argument_list|,
name|firstChunkOffset
argument_list|,
name|length
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataIn
operator|=
name|dataIn
expr_stmt|;
name|this
operator|.
name|checksumIn
operator|=
name|checksumIn
expr_stmt|;
name|this
operator|.
name|offsetFromChunkBoundary
operator|=
call|(
name|int
call|)
argument_list|(
name|startOffset
operator|-
name|firstChunkOffset
argument_list|)
expr_stmt|;
name|dataBuff
operator|=
name|bufferPool
operator|.
name|getBuffer
argument_list|(
name|bytesPerChecksum
operator|*
literal|64
argument_list|)
expr_stmt|;
name|checksumBuff
operator|=
name|bufferPool
operator|.
name|getBuffer
argument_list|(
name|checksumSize
operator|*
literal|64
argument_list|)
expr_stmt|;
comment|//Initially the buffers have nothing to read.
name|dataBuff
operator|.
name|flip
argument_list|()
expr_stmt|;
name|checksumBuff
operator|.
name|flip
argument_list|()
expr_stmt|;
name|long
name|toSkip
init|=
name|firstChunkOffset
decl_stmt|;
while|while
condition|(
name|toSkip
operator|>
literal|0
condition|)
block|{
name|long
name|skipped
init|=
name|dataIn
operator|.
name|skip
argument_list|(
name|toSkip
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipped
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't initialize input stream"
argument_list|)
throw|;
block|}
name|toSkip
operator|-=
name|skipped
expr_stmt|;
block|}
if|if
condition|(
name|checksumIn
operator|!=
literal|null
condition|)
block|{
name|long
name|checkSumOffset
init|=
operator|(
name|firstChunkOffset
operator|/
name|bytesPerChecksum
operator|)
operator|*
name|checksumSize
decl_stmt|;
while|while
condition|(
name|checkSumOffset
operator|>
literal|0
condition|)
block|{
name|long
name|skipped
init|=
name|checksumIn
operator|.
name|skip
argument_list|(
name|checkSumOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipped
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't initialize checksum input stream"
argument_list|)
throw|;
block|}
name|checkSumOffset
operator|-=
name|skipped
expr_stmt|;
block|}
block|}
block|}
DECL|method|readIntoBuffer (FileInputStream stream, ByteBuffer buf)
specifier|private
name|int
name|readIntoBuffer
parameter_list|(
name|FileInputStream
name|stream
parameter_list|,
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bytesRead
init|=
name|stream
operator|.
name|getChannel
argument_list|()
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|<
literal|0
condition|)
block|{
comment|//EOF
return|return
name|bytesRead
return|;
block|}
while|while
condition|(
name|buf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|n
init|=
name|stream
operator|.
name|getChannel
argument_list|()
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
comment|//EOF
return|return
name|bytesRead
return|;
block|}
name|bytesRead
operator|+=
name|n
expr_stmt|;
block|}
return|return
name|bytesRead
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buf, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"read off "
operator|+
name|off
operator|+
literal|" len "
operator|+
name|len
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|verifyChecksum
condition|)
block|{
return|return
name|dataIn
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|dataRead
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|dataBuff
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
name|dataBuff
operator|.
name|clear
argument_list|()
expr_stmt|;
name|checksumBuff
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dataRead
operator|=
name|readIntoBuffer
argument_list|(
name|dataIn
argument_list|,
name|dataBuff
argument_list|)
expr_stmt|;
name|readIntoBuffer
argument_list|(
name|checksumIn
argument_list|,
name|checksumBuff
argument_list|)
expr_stmt|;
name|checksumBuff
operator|.
name|flip
argument_list|()
expr_stmt|;
name|dataBuff
operator|.
name|flip
argument_list|()
expr_stmt|;
if|if
condition|(
name|verifyChecksum
condition|)
block|{
name|checksum
operator|.
name|verifyChunkedSums
argument_list|(
name|dataBuff
argument_list|,
name|checksumBuff
argument_list|,
name|filename
argument_list|,
name|this
operator|.
name|startOffset
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dataRead
operator|=
name|dataBuff
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dataRead
operator|>
literal|0
condition|)
block|{
name|int
name|nRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|dataRead
operator|-
name|offsetFromChunkBoundary
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|offsetFromChunkBoundary
operator|>
literal|0
condition|)
block|{
name|dataBuff
operator|.
name|position
argument_list|(
name|offsetFromChunkBoundary
argument_list|)
expr_stmt|;
comment|// Its either end of file or dataRead is greater than the
comment|// offsetFromChunkBoundary
name|offsetFromChunkBoundary
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|nRead
operator|>
literal|0
condition|)
block|{
name|dataBuff
operator|.
name|get
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|nRead
argument_list|)
expr_stmt|;
return|return
name|nRead
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|skip (long n)
specifier|public
specifier|synchronized
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"skip "
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|verifyChecksum
condition|)
block|{
return|return
name|dataIn
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|dataIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|checksumIn
operator|!=
literal|null
condition|)
block|{
name|checksumIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dataBuff
operator|!=
literal|null
condition|)
block|{
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
name|dataBuff
argument_list|)
expr_stmt|;
name|dataBuff
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|checksumBuff
operator|!=
literal|null
condition|)
block|{
name|bufferPool
operator|.
name|returnBuffer
argument_list|(
name|checksumBuff
argument_list|)
expr_stmt|;
name|checksumBuff
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

