begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CachePool
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Represents an entry in the PathBasedCache on the NameNode.  *  * This is an implementation class, not part of the public API.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|PathBasedCacheEntry
specifier|public
specifier|final
class|class
name|PathBasedCacheEntry
block|{
DECL|field|entryId
specifier|private
specifier|final
name|long
name|entryId
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|replication
specifier|private
specifier|final
name|short
name|replication
decl_stmt|;
DECL|field|pool
specifier|private
specifier|final
name|CachePool
name|pool
decl_stmt|;
DECL|method|PathBasedCacheEntry (long entryId, String path, short replication, CachePool pool)
specifier|public
name|PathBasedCacheEntry
parameter_list|(
name|long
name|entryId
parameter_list|,
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|,
name|CachePool
name|pool
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|entryId
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|entryId
operator|=
name|entryId
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|replication
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|this
operator|.
name|replication
operator|=
name|replication
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
DECL|method|getEntryId ()
specifier|public
name|long
name|getEntryId
parameter_list|()
block|{
return|return
name|entryId
return|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getPool ()
specifier|public
name|CachePool
name|getPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
DECL|method|getReplication ()
specifier|public
name|short
name|getReplication
parameter_list|()
block|{
return|return
name|replication
return|;
block|}
DECL|method|toDirective ()
specifier|public
name|PathBasedCacheDirective
name|toDirective
parameter_list|()
block|{
return|return
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setId
argument_list|(
name|entryId
argument_list|)
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
name|replication
argument_list|)
operator|.
name|setPool
argument_list|(
name|pool
operator|.
name|getPoolName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"{ entryId:"
argument_list|)
operator|.
name|append
argument_list|(
name|entryId
argument_list|)
operator|.
name|append
argument_list|(
literal|", path:"
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|", replication:"
argument_list|)
operator|.
name|append
argument_list|(
name|replication
argument_list|)
operator|.
name|append
argument_list|(
literal|", pool:"
argument_list|)
operator|.
name|append
argument_list|(
name|pool
argument_list|)
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PathBasedCacheEntry
name|other
init|=
operator|(
name|PathBasedCacheEntry
operator|)
name|o
decl_stmt|;
return|return
name|entryId
operator|==
name|other
operator|.
name|entryId
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|entryId
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

