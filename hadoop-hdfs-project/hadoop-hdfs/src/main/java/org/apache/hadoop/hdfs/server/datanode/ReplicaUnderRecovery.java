begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReplicaRecoveryInfo
import|;
end_import

begin_comment
comment|/**  * This class represents replicas that are under block recovery  * It has a recovery id that is equal to the generation stamp   * that the replica will be bumped to after recovery  * The recovery id is used to handle multiple concurrent block recoveries.  * A recovery with higher recovery id preempts recoveries with a lower id.  *  */
end_comment

begin_class
DECL|class|ReplicaUnderRecovery
specifier|public
class|class
name|ReplicaUnderRecovery
extends|extends
name|ReplicaInfo
block|{
DECL|field|original
specifier|private
name|ReplicaInfo
name|original
decl_stmt|;
comment|// the original replica that needs to be recovered
DECL|field|recoveryId
specifier|private
name|long
name|recoveryId
decl_stmt|;
comment|// recovery id; it is also the generation stamp
comment|// that the replica will be bumped to after recovery
DECL|method|ReplicaUnderRecovery (ReplicaInfo replica, long recoveryId)
specifier|public
name|ReplicaUnderRecovery
parameter_list|(
name|ReplicaInfo
name|replica
parameter_list|,
name|long
name|recoveryId
parameter_list|)
block|{
name|super
argument_list|(
name|replica
argument_list|,
name|replica
operator|.
name|getVolume
argument_list|()
argument_list|,
name|replica
operator|.
name|getDir
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|replica
operator|.
name|getState
argument_list|()
operator|!=
name|ReplicaState
operator|.
name|FINALIZED
operator|&&
name|replica
operator|.
name|getState
argument_list|()
operator|!=
name|ReplicaState
operator|.
name|RBW
operator|&&
name|replica
operator|.
name|getState
argument_list|()
operator|!=
name|ReplicaState
operator|.
name|RWR
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot recover replica: "
operator|+
name|replica
argument_list|)
throw|;
block|}
name|this
operator|.
name|original
operator|=
name|replica
expr_stmt|;
name|this
operator|.
name|recoveryId
operator|=
name|recoveryId
expr_stmt|;
block|}
comment|/**    * Copy constructor.    * @param from where to copy from    */
DECL|method|ReplicaUnderRecovery (ReplicaUnderRecovery from)
specifier|public
name|ReplicaUnderRecovery
parameter_list|(
name|ReplicaUnderRecovery
name|from
parameter_list|)
block|{
name|super
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|this
operator|.
name|original
operator|=
name|from
operator|.
name|getOriginalReplica
argument_list|()
expr_stmt|;
name|this
operator|.
name|recoveryId
operator|=
name|from
operator|.
name|getRecoveryID
argument_list|()
expr_stmt|;
block|}
comment|/**     * Get the recovery id    * @return the generation stamp that the replica will be bumped to     */
DECL|method|getRecoveryID ()
specifier|public
name|long
name|getRecoveryID
parameter_list|()
block|{
return|return
name|recoveryId
return|;
block|}
comment|/**     * Set the recovery id    * @param recoveryId the new recoveryId    */
DECL|method|setRecoveryID (long recoveryId)
specifier|public
name|void
name|setRecoveryID
parameter_list|(
name|long
name|recoveryId
parameter_list|)
block|{
if|if
condition|(
name|recoveryId
operator|>
name|this
operator|.
name|recoveryId
condition|)
block|{
name|this
operator|.
name|recoveryId
operator|=
name|recoveryId
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The new rcovery id: "
operator|+
name|recoveryId
operator|+
literal|" must be greater than the current one: "
operator|+
name|this
operator|.
name|recoveryId
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the original replica that's under recovery    * @return the original replica under recovery    */
DECL|method|getOriginalReplica ()
specifier|public
name|ReplicaInfo
name|getOriginalReplica
parameter_list|()
block|{
return|return
name|original
return|;
block|}
annotation|@
name|Override
comment|//ReplicaInfo
DECL|method|isUnlinked ()
specifier|public
name|boolean
name|isUnlinked
parameter_list|()
block|{
return|return
name|original
operator|.
name|isUnlinked
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|//ReplicaInfo
DECL|method|setUnlinked ()
specifier|public
name|void
name|setUnlinked
parameter_list|()
block|{
name|original
operator|.
name|setUnlinked
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|//ReplicaInfo
DECL|method|getState ()
specifier|public
name|ReplicaState
name|getState
parameter_list|()
block|{
return|return
name|ReplicaState
operator|.
name|RUR
return|;
block|}
annotation|@
name|Override
DECL|method|getVisibleLength ()
specifier|public
name|long
name|getVisibleLength
parameter_list|()
block|{
return|return
name|original
operator|.
name|getVisibleLength
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesOnDisk ()
specifier|public
name|long
name|getBytesOnDisk
parameter_list|()
block|{
return|return
name|original
operator|.
name|getBytesOnDisk
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|//org.apache.hadoop.hdfs.protocol.Block
DECL|method|setBlockId (long blockId)
specifier|public
name|void
name|setBlockId
parameter_list|(
name|long
name|blockId
parameter_list|)
block|{
name|super
operator|.
name|setBlockId
argument_list|(
name|blockId
argument_list|)
expr_stmt|;
name|original
operator|.
name|setBlockId
argument_list|(
name|blockId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|//org.apache.hadoop.hdfs.protocol.Block
DECL|method|setGenerationStamp (long gs)
specifier|public
name|void
name|setGenerationStamp
parameter_list|(
name|long
name|gs
parameter_list|)
block|{
name|super
operator|.
name|setGenerationStamp
argument_list|(
name|gs
argument_list|)
expr_stmt|;
name|original
operator|.
name|setGenerationStamp
argument_list|(
name|gs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|//org.apache.hadoop.hdfs.protocol.Block
DECL|method|setNumBytes (long numBytes)
specifier|public
name|void
name|setNumBytes
parameter_list|(
name|long
name|numBytes
parameter_list|)
block|{
name|super
operator|.
name|setNumBytes
argument_list|(
name|numBytes
argument_list|)
expr_stmt|;
name|original
operator|.
name|setNumBytes
argument_list|(
name|numBytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|//ReplicaInfo
DECL|method|setDir (File dir)
specifier|public
name|void
name|setDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|super
operator|.
name|setDir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|original
operator|.
name|setDir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|//ReplicaInfo
DECL|method|setVolume (FsVolumeSpi vol)
name|void
name|setVolume
parameter_list|(
name|FsVolumeSpi
name|vol
parameter_list|)
block|{
name|super
operator|.
name|setVolume
argument_list|(
name|vol
argument_list|)
expr_stmt|;
name|original
operator|.
name|setVolume
argument_list|(
name|vol
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// Object
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// Object
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|"\n  recoveryId="
operator|+
name|recoveryId
operator|+
literal|"\n  original="
operator|+
name|original
return|;
block|}
DECL|method|createInfo ()
specifier|public
name|ReplicaRecoveryInfo
name|createInfo
parameter_list|()
block|{
return|return
operator|new
name|ReplicaRecoveryInfo
argument_list|(
name|original
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|original
operator|.
name|getBytesOnDisk
argument_list|()
argument_list|,
name|original
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|original
operator|.
name|getState
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

