begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_READ_LOCK_REPORTING_THRESHOLD_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_READ_LOCK_REPORTING_THRESHOLD_MS_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * FSTreeTraverser traverse directory recursively and process files  * in batches.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSTreeTraverser
specifier|public
specifier|abstract
class|class
name|FSTreeTraverser
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSTreeTraverser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|FSDirectory
name|dir
decl_stmt|;
DECL|field|readLockReportingThresholdMs
specifier|private
name|long
name|readLockReportingThresholdMs
decl_stmt|;
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
DECL|method|FSTreeTraverser (FSDirectory dir, Configuration conf)
specifier|public
name|FSTreeTraverser
parameter_list|(
name|FSDirectory
name|dir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|readLockReportingThresholdMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_READ_LOCK_REPORTING_THRESHOLD_MS_KEY
argument_list|,
name|DFS_NAMENODE_READ_LOCK_REPORTING_THRESHOLD_MS_DEFAULT
argument_list|)
expr_stmt|;
name|timer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
block|}
DECL|method|getFSDirectory ()
specifier|public
name|FSDirectory
name|getFSDirectory
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
comment|/**    * Iterate through all files directly inside parent, and recurse down    * directories. The listing is done in batch, and can optionally start after    * a position. The iteration of the inode tree is done in a depth-first    * fashion. But instead of holding all {@link INodeDirectory}'s in memory    * on the fly, only the path components to the current inode is held. This    * is to reduce memory consumption.    *    * @param parent    *          The inode id of parent directory    * @param startId    *          Id of the start inode.    * @param startAfter    *          Full path of a file the traverse should start after.    * @param traverseInfo    *          info which may required for processing the child's.    * @throws IOException    * @throws InterruptedException    */
DECL|method|traverseDir (final INodeDirectory parent, final long startId, byte[] startAfter, final TraverseInfo traverseInfo)
specifier|protected
name|void
name|traverseDir
parameter_list|(
specifier|final
name|INodeDirectory
name|parent
parameter_list|,
specifier|final
name|long
name|startId
parameter_list|,
name|byte
index|[]
name|startAfter
parameter_list|,
specifier|final
name|TraverseInfo
name|traverseInfo
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|startAfters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|INode
name|curr
init|=
name|parent
decl_stmt|;
comment|// construct startAfters all the way up to the zone inode.
name|startAfters
operator|.
name|add
argument_list|(
name|startAfter
argument_list|)
expr_stmt|;
while|while
condition|(
name|curr
operator|.
name|getId
argument_list|()
operator|!=
name|startId
condition|)
block|{
name|startAfters
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|curr
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
expr_stmt|;
name|curr
operator|=
name|curr
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|curr
operator|=
name|traverseDirInt
argument_list|(
name|startId
argument_list|,
name|parent
argument_list|,
name|startAfters
argument_list|,
name|traverseInfo
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|startAfters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|curr
operator|==
literal|null
condition|)
block|{
comment|// lock was reacquired, re-resolve path.
name|curr
operator|=
name|resolvePaths
argument_list|(
name|startId
argument_list|,
name|startAfters
argument_list|)
expr_stmt|;
block|}
name|curr
operator|=
name|traverseDirInt
argument_list|(
name|startId
argument_list|,
name|curr
argument_list|,
name|startAfters
argument_list|,
name|traverseInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Iterates the parent directory, and add direct children files to current    * batch. If batch size meets configured threshold, current batch will be    * submitted for the processing.    *<p>    * Locks could be released and reacquired when a batch submission is    * finished.    *    * @param startId    *          Id of the start inode.    * @return The inode which was just processed, if lock is held in the entire    *         process. Null if lock is released.    * @throws IOException    * @throws InterruptedException    */
DECL|method|traverseDirInt (final long startId, INode curr, List<byte[]> startAfters, final TraverseInfo traverseInfo)
specifier|protected
name|INode
name|traverseDirInt
parameter_list|(
specifier|final
name|long
name|startId
parameter_list|,
name|INode
name|curr
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|startAfters
parameter_list|,
specifier|final
name|TraverseInfo
name|traverseInfo
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
assert|assert
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
assert|assert
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|hasReadLock
argument_list|()
assert|;
name|long
name|lockStartTime
init|=
name|timer
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|curr
argument_list|,
literal|"Current inode can't be null"
argument_list|)
expr_stmt|;
name|checkINodeReady
argument_list|(
name|startId
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectory
name|parent
init|=
name|curr
operator|.
name|isDirectory
argument_list|()
condition|?
name|curr
operator|.
name|asDirectory
argument_list|()
else|:
name|curr
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|parent
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Traversing directory {}"
argument_list|,
name|parent
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|startAfter
init|=
name|startAfters
operator|.
name|get
argument_list|(
name|startAfters
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|lockReleased
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|INodeDirectory
operator|.
name|nextChild
argument_list|(
name|children
argument_list|,
name|startAfter
argument_list|)
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|INode
name|inode
init|=
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|processFileInode
argument_list|(
name|inode
argument_list|,
name|traverseInfo
argument_list|)
condition|)
block|{
comment|// inode wasn't processes. Recurse down if it's a dir,
comment|// skip otherwise.
if|if
condition|(
operator|!
name|inode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|canTraverseDir
argument_list|(
name|inode
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// add 1 level to the depth-first search.
name|curr
operator|=
name|inode
expr_stmt|;
if|if
condition|(
operator|!
name|startAfters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|startAfters
operator|.
name|remove
argument_list|(
name|startAfters
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|startAfters
operator|.
name|add
argument_list|(
name|curr
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startAfters
operator|.
name|add
argument_list|(
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
expr_stmt|;
return|return
name|lockReleased
condition|?
literal|null
else|:
name|curr
return|;
block|}
if|if
condition|(
name|shouldSubmitCurrentBatch
argument_list|()
condition|)
block|{
specifier|final
name|byte
index|[]
name|currentStartAfter
init|=
name|inode
operator|.
name|getLocalNameBytes
argument_list|()
decl_stmt|;
specifier|final
name|String
name|parentPath
init|=
name|parent
operator|.
name|getFullPathName
argument_list|()
decl_stmt|;
name|lockReleased
operator|=
literal|true
expr_stmt|;
name|readUnlock
argument_list|()
expr_stmt|;
name|submitCurrentBatch
argument_list|(
name|startId
argument_list|)
expr_stmt|;
try|try
block|{
name|throttle
argument_list|()
expr_stmt|;
name|checkPauseForTesting
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|readLock
argument_list|()
expr_stmt|;
name|lockStartTime
operator|=
name|timer
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
name|checkINodeReady
argument_list|(
name|startId
argument_list|)
expr_stmt|;
comment|// Things could have changed when the lock was released.
comment|// Re-resolve the parent inode.
name|FSPermissionChecker
name|pc
init|=
name|dir
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|INode
name|newParent
init|=
name|dir
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|parentPath
argument_list|,
name|FSDirectory
operator|.
name|DirOp
operator|.
name|READ
argument_list|)
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|newParent
operator|==
literal|null
operator|||
operator|!
name|newParent
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
condition|)
block|{
comment|// parent dir is deleted or recreated. We're done.
return|return
literal|null
return|;
block|}
name|children
operator|=
name|parent
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
comment|// -1 to counter the ++ on the for loop
name|i
operator|=
name|INodeDirectory
operator|.
name|nextChild
argument_list|(
name|children
argument_list|,
name|currentStartAfter
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|timer
operator|.
name|monotonicNow
argument_list|()
operator|-
name|lockStartTime
operator|)
operator|>
name|readLockReportingThresholdMs
condition|)
block|{
name|readUnlock
argument_list|()
expr_stmt|;
try|try
block|{
name|throttle
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|readLock
argument_list|()
expr_stmt|;
name|lockStartTime
operator|=
name|timer
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Successfully finished this dir, adjust pointers to 1 level up, and
comment|// startAfter this dir.
name|startAfters
operator|.
name|remove
argument_list|(
name|startAfters
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|startAfters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|startAfters
operator|.
name|remove
argument_list|(
name|startAfters
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|startAfters
operator|.
name|add
argument_list|(
name|curr
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|curr
operator|=
name|curr
operator|.
name|getParent
argument_list|()
expr_stmt|;
return|return
name|lockReleased
condition|?
literal|null
else|:
name|curr
return|;
block|}
comment|/**    * Resolve the cursor of traverse to an inode.    *<p>    * The parent of the lowest level startAfter is returned. If somewhere in the    * middle of startAfters changed, the parent of the lowest unchanged level is    * returned.    *    * @param startId    *          Id of the start inode.    * @param startAfters    *          the cursor, represented by a list of path bytes.    * @return the parent inode corresponding to the startAfters, or null if the    *         furthest parent is deleted.    */
DECL|method|resolvePaths (final long startId, List<byte[]> startAfters)
specifier|private
name|INode
name|resolvePaths
parameter_list|(
specifier|final
name|long
name|startId
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|startAfters
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If the readlock was reacquired, we need to resolve the paths again
comment|// in case things have changed. If our cursor file/dir is changed,
comment|// continue from the next one.
name|INode
name|zoneNode
init|=
name|dir
operator|.
name|getInode
argument_list|(
name|startId
argument_list|)
decl_stmt|;
if|if
condition|(
name|zoneNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Zone "
operator|+
name|startId
operator|+
literal|" is deleted."
argument_list|)
throw|;
block|}
name|INodeDirectory
name|parent
init|=
name|zoneNode
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startAfters
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|startAfters
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
comment|// last startAfter does not need to be resolved, since search for
comment|// nextChild will cover that automatically.
break|break;
block|}
name|INode
name|curr
init|=
name|parent
operator|.
name|getChild
argument_list|(
name|startAfters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|curr
operator|==
literal|null
condition|)
block|{
comment|// inode at this level has changed. Update startAfters to point to
comment|// the next dir at the parent level (and dropping any startAfters
comment|// at lower levels).
for|for
control|(
init|;
name|i
operator|<
name|startAfters
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|startAfters
operator|.
name|remove
argument_list|(
name|startAfters
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|parent
operator|=
name|curr
operator|.
name|asDirectory
argument_list|()
expr_stmt|;
block|}
return|return
name|parent
return|;
block|}
DECL|method|readLock ()
specifier|protected
name|void
name|readLock
parameter_list|()
block|{
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|dir
operator|.
name|readLock
argument_list|()
expr_stmt|;
block|}
DECL|method|readUnlock ()
specifier|protected
name|void
name|readUnlock
parameter_list|()
block|{
name|dir
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|readUnlock
argument_list|(
literal|"FSTreeTraverser"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPauseForTesting ()
specifier|protected
specifier|abstract
name|void
name|checkPauseForTesting
parameter_list|()
throws|throws
name|InterruptedException
function_decl|;
comment|/**    * Process an Inode. Add to current batch if it's a file, no-op otherwise.    *    * @param inode    *          the inode    * @return true if inode is added to currentBatch and should be process for    *         next operation. false otherwise: could be inode is not a file.    * @throws IOException    * @throws InterruptedException    */
DECL|method|processFileInode (INode inode, TraverseInfo traverseInfo)
specifier|protected
specifier|abstract
name|boolean
name|processFileInode
parameter_list|(
name|INode
name|inode
parameter_list|,
name|TraverseInfo
name|traverseInfo
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Check whether current batch can be submitted for the processing.    *    * @return true if batch size meets meet the condition, otherwise false.    */
DECL|method|shouldSubmitCurrentBatch ()
specifier|protected
specifier|abstract
name|boolean
name|shouldSubmitCurrentBatch
parameter_list|()
function_decl|;
comment|/**    * Check whether inode is ready for traverse. Throws IOE if it's not.    *    * @param startId    *          Id of the start inode.    * @throws IOException    */
DECL|method|checkINodeReady (long startId)
specifier|protected
specifier|abstract
name|void
name|checkINodeReady
parameter_list|(
name|long
name|startId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Submit the current batch for processing.    *    * @param startId    *          Id of the start inode.    * @throws IOException    * @throws InterruptedException    */
DECL|method|submitCurrentBatch (long startId)
specifier|protected
specifier|abstract
name|void
name|submitCurrentBatch
parameter_list|(
name|long
name|startId
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
comment|/**    * Throttles the FSTreeTraverser.    *    * @throws InterruptedException    */
DECL|method|throttle ()
specifier|protected
specifier|abstract
name|void
name|throttle
parameter_list|()
throws|throws
name|InterruptedException
function_decl|;
comment|/**    * Check whether dir is traversable or not.    *    * @param inode    *          Dir inode    * @return true if dir is traversable otherwise false.    * @throws IOException    */
DECL|method|canTraverseDir (INode inode)
specifier|protected
specifier|abstract
name|boolean
name|canTraverseDir
parameter_list|(
name|INode
name|inode
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Class will represent the additional info required for traverse.    */
DECL|class|TraverseInfo
specifier|public
specifier|static
class|class
name|TraverseInfo
block|{    }
block|}
end_class

end_unit

