begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.checker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
operator|.
name|CheckContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * A utility class that encapsulates checking storage locations during DataNode  * startup.  *  * Some of this code was extracted from the DataNode class.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|StorageLocationChecker
specifier|public
class|class
name|StorageLocationChecker
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StorageLocationChecker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|delegateChecker
specifier|private
specifier|final
name|AsyncChecker
argument_list|<
name|CheckContext
argument_list|,
name|VolumeCheckResult
argument_list|>
name|delegateChecker
decl_stmt|;
DECL|field|timer
specifier|private
specifier|final
name|Timer
name|timer
decl_stmt|;
comment|/**    * Max allowed time for a disk check in milliseconds. If the check    * doesn't complete within this time we declare the disk as dead.    */
DECL|field|maxAllowedTimeForCheckMs
specifier|private
specifier|final
name|long
name|maxAllowedTimeForCheckMs
decl_stmt|;
comment|/**    * Expected filesystem permissions on the storage directory.    */
DECL|field|expectedPermission
specifier|private
specifier|final
name|FsPermission
name|expectedPermission
decl_stmt|;
comment|/**    * Maximum number of volume failures that can be tolerated without    * declaring a fatal error.    */
DECL|field|maxVolumeFailuresTolerated
specifier|private
specifier|final
name|int
name|maxVolumeFailuresTolerated
decl_stmt|;
DECL|method|StorageLocationChecker (Configuration conf, Timer timer)
specifier|public
name|StorageLocationChecker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Timer
name|timer
parameter_list|)
throws|throws
name|DiskErrorException
block|{
name|maxAllowedTimeForCheckMs
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|DFS_DATANODE_DISK_CHECK_TIMEOUT_KEY
argument_list|,
name|DFS_DATANODE_DISK_CHECK_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxAllowedTimeForCheckMs
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid value configured for "
operator|+
name|DFS_DATANODE_DISK_CHECK_TIMEOUT_KEY
operator|+
literal|" - "
operator|+
name|maxAllowedTimeForCheckMs
operator|+
literal|" (should be> 0)"
argument_list|)
throw|;
block|}
name|expectedPermission
operator|=
operator|new
name|FsPermission
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATANODE_DATA_DIR_PERMISSION_KEY
argument_list|,
name|DFS_DATANODE_DATA_DIR_PERMISSION_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|maxVolumeFailuresTolerated
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
argument_list|,
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxVolumeFailuresTolerated
operator|<
name|DataNode
operator|.
name|MAX_VOLUME_FAILURE_TOLERATED_LIMIT
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid value configured for "
operator|+
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
operator|+
literal|" - "
operator|+
name|maxVolumeFailuresTolerated
operator|+
literal|" "
operator|+
name|DataNode
operator|.
name|MAX_VOLUME_FAILURES_TOLERATED_MSG
argument_list|)
throw|;
block|}
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
name|delegateChecker
operator|=
operator|new
name|ThrottledAsyncChecker
argument_list|<>
argument_list|(
name|timer
argument_list|,
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DISK_CHECK_MIN_GAP_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DISK_CHECK_MIN_GAP_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"StorageLocationChecker thread %d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initiate a check on the supplied storage volumes and return    * a list of healthy volumes.    *    * StorageLocations are returned in the same order as the input    * for compatibility with existing unit tests.    *    * @param conf HDFS configuration.    * @param dataDirs list of volumes to check.    * @return returns a list of healthy volumes. Returns an empty list if    *         there are no healthy volumes.    *    * @throws InterruptedException if the check was interrupted.    * @throws IOException if the number of failed volumes exceeds the    *                     maximum allowed or if there are no good    *                     volumes.    */
DECL|method|check ( final Configuration conf, final Collection<StorageLocation> dataDirs)
specifier|public
name|List
argument_list|<
name|StorageLocation
argument_list|>
name|check
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|StorageLocation
argument_list|>
name|dataDirs
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
specifier|final
name|HashMap
argument_list|<
name|StorageLocation
argument_list|,
name|Boolean
argument_list|>
name|goodLocations
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|StorageLocation
argument_list|>
name|failedLocations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|StorageLocation
argument_list|,
name|ListenableFuture
argument_list|<
name|VolumeCheckResult
argument_list|>
argument_list|>
name|futures
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|final
name|LocalFileSystem
name|localFS
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|CheckContext
name|context
init|=
operator|new
name|CheckContext
argument_list|(
name|localFS
argument_list|,
name|expectedPermission
argument_list|)
decl_stmt|;
comment|// Start parallel disk check operations on all StorageLocations.
for|for
control|(
name|StorageLocation
name|location
range|:
name|dataDirs
control|)
block|{
name|goodLocations
operator|.
name|put
argument_list|(
name|location
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ListenableFuture
argument_list|<
name|VolumeCheckResult
argument_list|>
argument_list|>
name|olf
init|=
name|delegateChecker
operator|.
name|schedule
argument_list|(
name|location
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|olf
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|futures
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|olf
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxVolumeFailuresTolerated
operator|>=
name|dataDirs
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid value configured for "
operator|+
name|DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY
operator|+
literal|" - "
operator|+
name|maxVolumeFailuresTolerated
operator|+
literal|". Value configured is>= "
operator|+
literal|"to the number of configured volumes ("
operator|+
name|dataDirs
operator|.
name|size
argument_list|()
operator|+
literal|")."
argument_list|)
throw|;
block|}
specifier|final
name|long
name|checkStartTimeMs
init|=
name|timer
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
comment|// Retrieve the results of the disk checks.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StorageLocation
argument_list|,
name|ListenableFuture
argument_list|<
name|VolumeCheckResult
argument_list|>
argument_list|>
name|entry
range|:
name|futures
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Determine how much time we can allow for this check to complete.
comment|// The cumulative wait time cannot exceed maxAllowedTimeForCheck.
specifier|final
name|long
name|waitSoFarMs
init|=
operator|(
name|timer
operator|.
name|monotonicNow
argument_list|()
operator|-
name|checkStartTimeMs
operator|)
decl_stmt|;
specifier|final
name|long
name|timeLeftMs
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|maxAllowedTimeForCheckMs
operator|-
name|waitSoFarMs
argument_list|)
decl_stmt|;
specifier|final
name|StorageLocation
name|location
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|VolumeCheckResult
name|result
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|timeLeftMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|HEALTHY
case|:
break|break;
case|case
name|DEGRADED
case|:
name|LOG
operator|.
name|warn
argument_list|(
literal|"StorageLocation {} appears to be degraded."
argument_list|,
name|location
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAILED
case|:
name|LOG
operator|.
name|warn
argument_list|(
literal|"StorageLocation {} detected as failed."
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|failedLocations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|goodLocations
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected health check result {} for StorageLocation {}"
argument_list|,
name|result
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|TimeoutException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception checking StorageLocation "
operator|+
name|location
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|failedLocations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|goodLocations
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxVolumeFailuresTolerated
operator|==
name|DataNode
operator|.
name|MAX_VOLUME_FAILURE_TOLERATED_LIMIT
condition|)
block|{
if|if
condition|(
name|dataDirs
operator|.
name|size
argument_list|()
operator|==
name|failedLocations
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"Too many failed volumes - "
operator|+
literal|"current valid volumes: "
operator|+
name|goodLocations
operator|.
name|size
argument_list|()
operator|+
literal|", volumes configured: "
operator|+
name|dataDirs
operator|.
name|size
argument_list|()
operator|+
literal|", volumes failed: "
operator|+
name|failedLocations
operator|.
name|size
argument_list|()
operator|+
literal|", volume failures tolerated: "
operator|+
name|maxVolumeFailuresTolerated
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|failedLocations
operator|.
name|size
argument_list|()
operator|>
name|maxVolumeFailuresTolerated
condition|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"Too many failed volumes - "
operator|+
literal|"current valid volumes: "
operator|+
name|goodLocations
operator|.
name|size
argument_list|()
operator|+
literal|", volumes configured: "
operator|+
name|dataDirs
operator|.
name|size
argument_list|()
operator|+
literal|", volumes failed: "
operator|+
name|failedLocations
operator|.
name|size
argument_list|()
operator|+
literal|", volume failures tolerated: "
operator|+
name|maxVolumeFailuresTolerated
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|goodLocations
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"All directories in "
operator|+
name|DFS_DATANODE_DATA_DIR_KEY
operator|+
literal|" are invalid: "
operator|+
name|failedLocations
argument_list|)
throw|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|goodLocations
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|shutdownAndWait (int gracePeriod, TimeUnit timeUnit)
specifier|public
name|void
name|shutdownAndWait
parameter_list|(
name|int
name|gracePeriod
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
try|try
block|{
name|delegateChecker
operator|.
name|shutdownAndWait
argument_list|(
name|gracePeriod
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"StorageLocationChecker interrupted during shutdown."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

