begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web.dtp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
operator|.
name|dtp
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|DefaultHttp2Headers
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2ConnectionEncoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2Exception
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2FrameAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2Headers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_class
DECL|class|DtpHttp2FrameListener
class|class
name|DtpHttp2FrameListener
extends|extends
name|Http2FrameAdapter
block|{
DECL|field|encoder
specifier|private
name|Http2ConnectionEncoder
name|encoder
decl_stmt|;
DECL|method|encoder (Http2ConnectionEncoder encoder)
specifier|public
name|void
name|encoder
parameter_list|(
name|Http2ConnectionEncoder
name|encoder
parameter_list|)
block|{
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onHeadersRead (ChannelHandlerContext ctx, int streamId, Http2Headers headers, int streamDependency, short weight, boolean exclusive, int padding, boolean endStream)
specifier|public
name|void
name|onHeadersRead
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|int
name|streamId
parameter_list|,
name|Http2Headers
name|headers
parameter_list|,
name|int
name|streamDependency
parameter_list|,
name|short
name|weight
parameter_list|,
name|boolean
name|exclusive
parameter_list|,
name|int
name|padding
parameter_list|,
name|boolean
name|endStream
parameter_list|)
throws|throws
name|Http2Exception
block|{
name|encoder
operator|.
name|writeHeaders
argument_list|(
name|ctx
argument_list|,
name|streamId
argument_list|,
operator|new
name|DefaultHttp2Headers
argument_list|()
operator|.
name|status
argument_list|(
name|HttpResponseStatus
operator|.
name|OK
operator|.
name|codeAsText
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|ctx
operator|.
name|newPromise
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|writeData
argument_list|(
name|ctx
argument_list|,
name|streamId
argument_list|,
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|buffer
argument_list|()
operator|.
name|writeBytes
argument_list|(
literal|"HTTP/2 DTP"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|ctx
operator|.
name|newPromise
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

