begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CheckpointConf
specifier|public
class|class
name|CheckpointConf
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CheckpointConf
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** How often to checkpoint regardless of number of txns */
DECL|field|checkpointPeriod
specifier|private
specifier|final
name|long
name|checkpointPeriod
decl_stmt|;
comment|// in seconds
comment|/** How often to poll the NN to check checkpointTxnCount */
DECL|field|checkpointCheckPeriod
specifier|private
specifier|final
name|long
name|checkpointCheckPeriod
decl_stmt|;
comment|// in seconds
comment|/** checkpoint once every this many transactions, regardless of time */
DECL|field|checkpointTxnCount
specifier|private
specifier|final
name|long
name|checkpointTxnCount
decl_stmt|;
comment|/** maxium number of retries when merge errors occur */
DECL|field|maxRetriesOnMergeError
specifier|private
specifier|final
name|int
name|maxRetriesOnMergeError
decl_stmt|;
comment|/** The output dir for legacy OIV image */
DECL|field|legacyOivImageDir
specifier|private
specifier|final
name|String
name|legacyOivImageDir
decl_stmt|;
comment|/**   * multiplier on the checkpoint period to allow other nodes to do the checkpointing, when not the   * 'primary' checkpoint node   */
DECL|field|quietMultiplier
specifier|private
name|double
name|quietMultiplier
decl_stmt|;
DECL|method|CheckpointConf (Configuration conf)
specifier|public
name|CheckpointConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|checkpointCheckPeriod
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_CHECKPOINT_CHECK_PERIOD_KEY
argument_list|,
name|DFS_NAMENODE_CHECKPOINT_CHECK_PERIOD_DEFAULT
argument_list|)
expr_stmt|;
name|checkpointPeriod
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_CHECKPOINT_PERIOD_KEY
argument_list|,
name|DFS_NAMENODE_CHECKPOINT_PERIOD_DEFAULT
argument_list|)
expr_stmt|;
name|checkpointTxnCount
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_CHECKPOINT_TXNS_KEY
argument_list|,
name|DFS_NAMENODE_CHECKPOINT_TXNS_DEFAULT
argument_list|)
expr_stmt|;
name|maxRetriesOnMergeError
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_CHECKPOINT_MAX_RETRIES_KEY
argument_list|,
name|DFS_NAMENODE_CHECKPOINT_MAX_RETRIES_DEFAULT
argument_list|)
expr_stmt|;
name|legacyOivImageDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_LEGACY_OIV_IMAGE_DIR_KEY
argument_list|)
expr_stmt|;
name|quietMultiplier
operator|=
name|conf
operator|.
name|getDouble
argument_list|(
name|DFS_NAMENODE_CHECKPOINT_QUIET_MULTIPLIER_KEY
argument_list|,
name|DFS_NAMENODE_CHECKPOINT_QUIET_MULTIPLIER_DEFAULT
argument_list|)
expr_stmt|;
name|warnForDeprecatedConfigs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|warnForDeprecatedConfigs (Configuration conf)
specifier|private
specifier|static
name|void
name|warnForDeprecatedConfigs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"fs.checkpoint.size"
argument_list|,
literal|"dfs.namenode.checkpoint.size"
argument_list|)
control|)
block|{
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration key "
operator|+
name|key
operator|+
literal|" is deprecated! Ignoring..."
operator|+
literal|" Instead please specify a value for "
operator|+
name|DFS_NAMENODE_CHECKPOINT_TXNS_KEY
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getPeriod ()
specifier|public
name|long
name|getPeriod
parameter_list|()
block|{
return|return
name|checkpointPeriod
return|;
block|}
DECL|method|getCheckPeriod ()
specifier|public
name|long
name|getCheckPeriod
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|checkpointCheckPeriod
argument_list|,
name|checkpointPeriod
argument_list|)
return|;
block|}
DECL|method|getTxnCount ()
specifier|public
name|long
name|getTxnCount
parameter_list|()
block|{
return|return
name|checkpointTxnCount
return|;
block|}
DECL|method|getMaxRetriesOnMergeError ()
specifier|public
name|int
name|getMaxRetriesOnMergeError
parameter_list|()
block|{
return|return
name|maxRetriesOnMergeError
return|;
block|}
DECL|method|getLegacyOivImageDir ()
specifier|public
name|String
name|getLegacyOivImageDir
parameter_list|()
block|{
return|return
name|legacyOivImageDir
return|;
block|}
DECL|method|getQuietPeriod ()
specifier|public
name|double
name|getQuietPeriod
parameter_list|()
block|{
return|return
name|this
operator|.
name|checkpointPeriod
operator|*
name|this
operator|.
name|quietMultiplier
return|;
block|}
block|}
end_class

end_unit

