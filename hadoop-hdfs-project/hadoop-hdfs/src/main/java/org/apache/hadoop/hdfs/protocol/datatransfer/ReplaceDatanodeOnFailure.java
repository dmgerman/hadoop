begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_comment
comment|/**  * The setting of replace-datanode-on-failure feature.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ReplaceDatanodeOnFailure
specifier|public
class|class
name|ReplaceDatanodeOnFailure
block|{
comment|/** The replacement policies */
DECL|enum|Policy
specifier|public
enum|enum
name|Policy
block|{
comment|/** The feature is disabled in the entire site. */
DECL|enumConstant|DISABLE
name|DISABLE
parameter_list|(
name|Condition
operator|.
name|FALSE
parameter_list|)
operator|,
comment|/** Never add a new datanode. */
DECL|enumConstant|NEVER
constructor|NEVER(Condition.FALSE
block|)
enum|,
comment|/** @see ReplaceDatanodeOnFailure.Condition#DEFAULT */
DECL|enumConstant|DEFAULT
name|DEFAULT
parameter_list|(
name|Condition
operator|.
name|DEFAULT
parameter_list|)
operator|,
comment|/** Always add a new datanode when an existing datanode is removed. */
DECL|enumConstant|ALWAYS
constructor|ALWAYS(Condition.TRUE
block|)
class|;
end_class

begin_decl_stmt
DECL|field|condition
specifier|private
specifier|final
name|Condition
name|condition
decl_stmt|;
end_decl_stmt

begin_constructor
DECL|method|Policy (Condition condition)
specifier|private
name|Policy
parameter_list|(
name|Condition
name|condition
parameter_list|)
block|{
name|this
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
block|}
end_constructor

begin_function
DECL|method|getCondition ()
name|Condition
name|getCondition
parameter_list|()
block|{
return|return
name|condition
return|;
block|}
end_function

begin_comment
unit|}
comment|/** Datanode replacement condition */
end_comment

begin_interface
DECL|interface|Condition
unit|private
specifier|static
interface|interface
name|Condition
block|{
comment|/** Return true unconditionally. */
DECL|field|TRUE
specifier|static
specifier|final
name|Condition
name|TRUE
init|=
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|satisfy
parameter_list|(
name|short
name|replication
parameter_list|,
name|DatanodeInfo
index|[]
name|existings
parameter_list|,
name|int
name|nExistings
parameter_list|,
name|boolean
name|isAppend
parameter_list|,
name|boolean
name|isHflushed
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|/** Return false unconditionally. */
DECL|field|FALSE
specifier|static
specifier|final
name|Condition
name|FALSE
init|=
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|satisfy
parameter_list|(
name|short
name|replication
parameter_list|,
name|DatanodeInfo
index|[]
name|existings
parameter_list|,
name|int
name|nExistings
parameter_list|,
name|boolean
name|isAppend
parameter_list|,
name|boolean
name|isHflushed
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
comment|/**      * DEFAULT condition:      *   Let r be the replication number.      *   Let n be the number of existing datanodes.      *   Add a new datanode only if r>= 3 and either      *   (1) floor(r/2)>= n; or      *   (2) r> n and the block is hflushed/appended.      */
DECL|field|DEFAULT
specifier|static
specifier|final
name|Condition
name|DEFAULT
init|=
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|satisfy
parameter_list|(
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|existings
parameter_list|,
specifier|final
name|int
name|n
parameter_list|,
specifier|final
name|boolean
name|isAppend
parameter_list|,
specifier|final
name|boolean
name|isHflushed
parameter_list|)
block|{
if|if
condition|(
name|replication
operator|<
literal|3
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|n
operator|<=
operator|(
name|replication
operator|/
literal|2
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|isAppend
operator|||
name|isHflushed
return|;
block|}
block|}
block|}
block|}
decl_stmt|;
comment|/** Is the condition satisfied? */
DECL|method|satisfy (short replication, DatanodeInfo[] existings, int nExistings, boolean isAppend, boolean isHflushed)
specifier|public
name|boolean
name|satisfy
parameter_list|(
name|short
name|replication
parameter_list|,
name|DatanodeInfo
index|[]
name|existings
parameter_list|,
name|int
name|nExistings
parameter_list|,
name|boolean
name|isAppend
parameter_list|,
name|boolean
name|isHflushed
parameter_list|)
function_decl|;
block|}
end_interface

begin_decl_stmt
DECL|field|policy
specifier|private
specifier|final
name|Policy
name|policy
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|bestEffort
specifier|private
specifier|final
name|boolean
name|bestEffort
decl_stmt|;
end_decl_stmt

begin_constructor
DECL|method|ReplaceDatanodeOnFailure (Policy policy, boolean bestEffort)
specifier|public
name|ReplaceDatanodeOnFailure
parameter_list|(
name|Policy
name|policy
parameter_list|,
name|boolean
name|bestEffort
parameter_list|)
block|{
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
name|this
operator|.
name|bestEffort
operator|=
name|bestEffort
expr_stmt|;
block|}
end_constructor

begin_comment
comment|/** Check if the feature is enabled. */
end_comment

begin_function
DECL|method|checkEnabled ()
specifier|public
name|void
name|checkEnabled
parameter_list|()
block|{
if|if
condition|(
name|policy
operator|==
name|Policy
operator|.
name|DISABLE
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This feature is disabled.  Please refer to "
operator|+
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|ENABLE_KEY
operator|+
literal|" configuration property."
argument_list|)
throw|;
block|}
block|}
end_function

begin_comment
comment|/**    * Best effort means that the client will try to replace the failed datanode    * (provided that the policy is satisfied), however, it will continue the    * write operation in case that the datanode replacement also fails.    *     * @return Suppose the datanode replacement fails.    *     false: An exception should be thrown so that the write will fail.    *     true : The write should be resumed with the remaining datandoes.    */
end_comment

begin_function
DECL|method|isBestEffort ()
specifier|public
name|boolean
name|isBestEffort
parameter_list|()
block|{
return|return
name|bestEffort
return|;
block|}
end_function

begin_comment
comment|/** Does it need a replacement according to the policy? */
end_comment

begin_function
DECL|method|satisfy ( final short replication, final DatanodeInfo[] existings, final boolean isAppend, final boolean isHflushed)
specifier|public
name|boolean
name|satisfy
parameter_list|(
specifier|final
name|short
name|replication
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|existings
parameter_list|,
specifier|final
name|boolean
name|isAppend
parameter_list|,
specifier|final
name|boolean
name|isHflushed
parameter_list|)
block|{
specifier|final
name|int
name|n
init|=
name|existings
operator|==
literal|null
condition|?
literal|0
else|:
name|existings
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
operator|||
name|n
operator|>=
name|replication
condition|)
block|{
comment|//don't need to add datanode for any policy.
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|policy
operator|.
name|getCondition
argument_list|()
operator|.
name|satisfy
argument_list|(
name|replication
argument_list|,
name|existings
argument_list|,
name|n
argument_list|,
name|isAppend
argument_list|,
name|isHflushed
argument_list|)
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|policy
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/** Get the setting from configuration. */
end_comment

begin_function
DECL|method|get (final Configuration conf)
specifier|public
specifier|static
name|ReplaceDatanodeOnFailure
name|get
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Policy
name|policy
init|=
name|getPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|bestEffort
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|BEST_EFFORT_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|BEST_EFFORT_DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReplaceDatanodeOnFailure
argument_list|(
name|policy
argument_list|,
name|bestEffort
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getPolicy (final Configuration conf)
specifier|private
specifier|static
name|Policy
name|getPolicy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|boolean
name|enabled
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|ENABLE_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|ENABLE_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return
name|Policy
operator|.
name|DISABLE
return|;
block|}
specifier|final
name|String
name|policy
init|=
name|conf
operator|.
name|get
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|POLICY_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|POLICY_DEFAULT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|Policy
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Policy
name|p
init|=
name|Policy
operator|.
name|values
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|policy
argument_list|)
condition|)
block|{
return|return
name|p
return|;
block|}
block|}
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Illegal configuration value for "
operator|+
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|POLICY_KEY
operator|+
literal|": "
operator|+
name|policy
argument_list|)
throw|;
block|}
end_function

begin_comment
comment|/** Write the setting to configuration. */
end_comment

begin_function
DECL|method|write (final Policy policy, final boolean bestEffort, final Configuration conf)
specifier|public
specifier|static
name|void
name|write
parameter_list|(
specifier|final
name|Policy
name|policy
parameter_list|,
specifier|final
name|boolean
name|bestEffort
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|ENABLE_KEY
argument_list|,
name|policy
operator|!=
name|Policy
operator|.
name|DISABLE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|POLICY_KEY
argument_list|,
name|policy
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|BlockWrite
operator|.
name|ReplaceDatanodeOnFailure
operator|.
name|BEST_EFFORT_KEY
argument_list|,
name|bestEffort
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

