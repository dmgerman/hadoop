begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Represents a peer that we communicate with by using blocking I/O   * on a UNIX domain socket.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DomainPeer
specifier|public
class|class
name|DomainPeer
implements|implements
name|Peer
block|{
DECL|field|socket
specifier|private
specifier|final
name|DomainSocket
name|socket
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|OutputStream
name|out
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|InputStream
name|in
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|ReadableByteChannel
name|channel
decl_stmt|;
DECL|method|DomainPeer (DomainSocket socket)
specifier|public
name|DomainPeer
parameter_list|(
name|DomainSocket
name|socket
parameter_list|)
block|{
name|this
operator|.
name|socket
operator|=
name|socket
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|socket
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|socket
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|socket
operator|.
name|getChannel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInputStreamChannel ()
specifier|public
name|ReadableByteChannel
name|getInputStreamChannel
parameter_list|()
block|{
return|return
name|channel
return|;
block|}
annotation|@
name|Override
DECL|method|setReadTimeout (int timeoutMs)
specifier|public
name|void
name|setReadTimeout
parameter_list|(
name|int
name|timeoutMs
parameter_list|)
throws|throws
name|IOException
block|{
name|socket
operator|.
name|setAttribute
argument_list|(
name|DomainSocket
operator|.
name|RECEIVE_TIMEOUT
argument_list|,
name|timeoutMs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReceiveBufferSize ()
specifier|public
name|int
name|getReceiveBufferSize
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|socket
operator|.
name|getAttribute
argument_list|(
name|DomainSocket
operator|.
name|RECEIVE_BUFFER_SIZE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTcpNoDelay ()
specifier|public
name|boolean
name|getTcpNoDelay
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* No TCP, no TCP_NODELAY. */
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setWriteTimeout (int timeoutMs)
specifier|public
name|void
name|setWriteTimeout
parameter_list|(
name|int
name|timeoutMs
parameter_list|)
throws|throws
name|IOException
block|{
name|socket
operator|.
name|setAttribute
argument_list|(
name|DomainSocket
operator|.
name|SEND_TIMEOUT
argument_list|,
name|timeoutMs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
operator|!
name|socket
operator|.
name|isOpen
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRemoteAddressString ()
specifier|public
name|String
name|getRemoteAddressString
parameter_list|()
block|{
return|return
literal|"unix:"
operator|+
name|socket
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalAddressString ()
specifier|public
name|String
name|getLocalAddressString
parameter_list|()
block|{
return|return
literal|"<local>"
return|;
block|}
annotation|@
name|Override
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputStream ()
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|out
return|;
block|}
annotation|@
name|Override
DECL|method|isLocal ()
specifier|public
name|boolean
name|isLocal
parameter_list|()
block|{
comment|/* UNIX domain sockets can only be used for local communication. */
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DomainPeer("
operator|+
name|getRemoteAddressString
argument_list|()
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|getDomainSocket ()
specifier|public
name|DomainSocket
name|getDomainSocket
parameter_list|()
block|{
return|return
name|socket
return|;
block|}
block|}
end_class

end_unit

