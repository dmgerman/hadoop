begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectoryWithSnapshotFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_comment
comment|/**  * An anonymous reference to an inode.  *  * This class and its subclasses are used to support multiple access paths.  * A file/directory may have multiple access paths when it is stored in some  * snapshots and it is renamed/moved to other locations.  *   * For example,  * (1) Suppose we have /abc/foo, say the inode of foo is inode(id=1000,name=foo)  * (2) create snapshot s0 for /abc  * (3) mv /abc/foo /xyz/bar, i.e. inode(id=1000,name=...) is renamed from "foo"  *     to "bar" and its parent becomes /xyz.  *   * Then, /xyz/bar and /abc/.snapshot/s0/foo are two different access paths to  * the same inode, inode(id=1000,name=bar).  *  * With references, we have the following  * - /abc has a child ref(id=1001,name=foo).  * - /xyz has a child ref(id=1002)   * - Both ref(id=1001,name=foo) and ref(id=1002) point to another reference,  *   ref(id=1003,count=2).  * - Finally, ref(id=1003,count=2) points to inode(id=1000,name=bar).  *   * Note 1: For a reference without name, e.g. ref(id=1002), it uses the name  *         of the referred inode.  * Note 2: getParent() always returns the parent in the current state, e.g.  *         inode(id=1000,name=bar).getParent() returns /xyz but not /abc.  */
end_comment

begin_class
DECL|class|INodeReference
specifier|public
specifier|abstract
class|class
name|INodeReference
extends|extends
name|INode
block|{
comment|/**    * Try to remove the given reference and then return the reference count.    * If the given inode is not a reference, return -1;    */
DECL|method|tryRemoveReference (INode inode)
specifier|public
specifier|static
name|int
name|tryRemoveReference
parameter_list|(
name|INode
name|inode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|inode
operator|.
name|isReference
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|removeReference
argument_list|(
name|inode
operator|.
name|asReference
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Remove the given reference and then return the reference count.    * If the referred inode is not a WithCount, return -1;    */
DECL|method|removeReference (INodeReference ref)
specifier|private
specifier|static
name|int
name|removeReference
parameter_list|(
name|INodeReference
name|ref
parameter_list|)
block|{
specifier|final
name|INode
name|referred
init|=
name|ref
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|referred
operator|instanceof
name|WithCount
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|WithCount
name|wc
init|=
operator|(
name|WithCount
operator|)
name|referred
decl_stmt|;
name|wc
operator|.
name|removeReference
argument_list|(
name|ref
argument_list|)
expr_stmt|;
return|return
name|wc
operator|.
name|getReferenceCount
argument_list|()
return|;
block|}
comment|/**    * When destroying a reference node (WithName or DstReference), we call this    * method to identify the snapshot which is the latest snapshot before the    * reference node's creation.     */
DECL|method|getPriorSnapshot (INodeReference ref)
specifier|static
name|int
name|getPriorSnapshot
parameter_list|(
name|INodeReference
name|ref
parameter_list|)
block|{
name|WithCount
name|wc
init|=
operator|(
name|WithCount
operator|)
name|ref
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|WithName
name|wn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|DstReference
condition|)
block|{
name|wn
operator|=
name|wc
operator|.
name|getLastWithName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|instanceof
name|WithName
condition|)
block|{
name|wn
operator|=
name|wc
operator|.
name|getPriorWithName
argument_list|(
operator|(
name|WithName
operator|)
name|ref
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wn
operator|!=
literal|null
condition|)
block|{
name|INode
name|referred
init|=
name|wc
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|referred
operator|.
name|isFile
argument_list|()
operator|&&
name|referred
operator|.
name|asFile
argument_list|()
operator|.
name|isWithSnapshot
argument_list|()
condition|)
block|{
return|return
name|referred
operator|.
name|asFile
argument_list|()
operator|.
name|getDiffs
argument_list|()
operator|.
name|getPrior
argument_list|(
name|wn
operator|.
name|lastSnapshotId
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|referred
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|referred
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
return|return
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|getPrior
argument_list|(
name|wn
operator|.
name|lastSnapshotId
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
return|;
block|}
DECL|field|referred
specifier|private
name|INode
name|referred
decl_stmt|;
DECL|method|INodeReference (INode parent, INode referred)
specifier|public
name|INodeReference
parameter_list|(
name|INode
name|parent
parameter_list|,
name|INode
name|referred
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|referred
operator|=
name|referred
expr_stmt|;
block|}
DECL|method|getReferredINode ()
specifier|public
specifier|final
name|INode
name|getReferredINode
parameter_list|()
block|{
return|return
name|referred
return|;
block|}
annotation|@
name|Override
DECL|method|isReference ()
specifier|public
specifier|final
name|boolean
name|isReference
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|asReference ()
specifier|public
specifier|final
name|INodeReference
name|asReference
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|isFile ()
specifier|public
specifier|final
name|boolean
name|isFile
parameter_list|()
block|{
return|return
name|referred
operator|.
name|isFile
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|asFile ()
specifier|public
specifier|final
name|INodeFile
name|asFile
parameter_list|()
block|{
return|return
name|referred
operator|.
name|asFile
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isDirectory ()
specifier|public
specifier|final
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
name|referred
operator|.
name|isDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|asDirectory ()
specifier|public
specifier|final
name|INodeDirectory
name|asDirectory
parameter_list|()
block|{
return|return
name|referred
operator|.
name|asDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isSymlink ()
specifier|public
specifier|final
name|boolean
name|isSymlink
parameter_list|()
block|{
return|return
name|referred
operator|.
name|isSymlink
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|asSymlink ()
specifier|public
specifier|final
name|INodeSymlink
name|asSymlink
parameter_list|()
block|{
return|return
name|referred
operator|.
name|asSymlink
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalNameBytes ()
specifier|public
name|byte
index|[]
name|getLocalNameBytes
parameter_list|()
block|{
return|return
name|referred
operator|.
name|getLocalNameBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setLocalName (byte[] name)
specifier|public
name|void
name|setLocalName
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
name|referred
operator|.
name|setLocalName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
specifier|final
name|long
name|getId
parameter_list|()
block|{
return|return
name|referred
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPermissionStatus (int snapshotId)
specifier|public
specifier|final
name|PermissionStatus
name|getPermissionStatus
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|getPermissionStatus
argument_list|(
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUserName (int snapshotId)
specifier|public
specifier|final
name|String
name|getUserName
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|getUserName
argument_list|(
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setUser (String user)
specifier|final
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|referred
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getGroupName (int snapshotId)
specifier|public
specifier|final
name|String
name|getGroupName
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|getGroupName
argument_list|(
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setGroup (String group)
specifier|final
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|referred
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFsPermission (int snapshotId)
specifier|public
specifier|final
name|FsPermission
name|getFsPermission
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|getFsPermission
argument_list|(
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAclFeature (int snapshotId)
specifier|final
name|AclFeature
name|getAclFeature
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|getAclFeature
argument_list|(
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addAclFeature (AclFeature aclFeature)
specifier|final
name|void
name|addAclFeature
parameter_list|(
name|AclFeature
name|aclFeature
parameter_list|)
block|{
name|referred
operator|.
name|addAclFeature
argument_list|(
name|aclFeature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeAclFeature ()
specifier|final
name|void
name|removeAclFeature
parameter_list|()
block|{
name|referred
operator|.
name|removeAclFeature
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getXAttrFeature (int snapshotId)
specifier|final
name|XAttrFeature
name|getXAttrFeature
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|getXAttrFeature
argument_list|(
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addXAttrFeature (XAttrFeature xAttrFeature)
specifier|final
name|void
name|addXAttrFeature
parameter_list|(
name|XAttrFeature
name|xAttrFeature
parameter_list|)
block|{
name|referred
operator|.
name|addXAttrFeature
argument_list|(
name|xAttrFeature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeXAttrFeature ()
specifier|final
name|void
name|removeXAttrFeature
parameter_list|()
block|{
name|referred
operator|.
name|removeXAttrFeature
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFsPermissionShort ()
specifier|public
specifier|final
name|short
name|getFsPermissionShort
parameter_list|()
block|{
return|return
name|referred
operator|.
name|getFsPermissionShort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setPermission (FsPermission permission)
name|void
name|setPermission
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
block|{
name|referred
operator|.
name|setPermission
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPermissionLong ()
specifier|public
name|long
name|getPermissionLong
parameter_list|()
block|{
return|return
name|referred
operator|.
name|getPermissionLong
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getModificationTime (int snapshotId)
specifier|public
specifier|final
name|long
name|getModificationTime
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|getModificationTime
argument_list|(
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateModificationTime (long mtime, int latestSnapshotId)
specifier|public
specifier|final
name|INode
name|updateModificationTime
parameter_list|(
name|long
name|mtime
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|updateModificationTime
argument_list|(
name|mtime
argument_list|,
name|latestSnapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setModificationTime (long modificationTime)
specifier|public
specifier|final
name|void
name|setModificationTime
parameter_list|(
name|long
name|modificationTime
parameter_list|)
block|{
name|referred
operator|.
name|setModificationTime
argument_list|(
name|modificationTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAccessTime (int snapshotId)
specifier|public
specifier|final
name|long
name|getAccessTime
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|getAccessTime
argument_list|(
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setAccessTime (long accessTime)
specifier|public
specifier|final
name|void
name|setAccessTime
parameter_list|(
name|long
name|accessTime
parameter_list|)
block|{
name|referred
operator|.
name|setAccessTime
argument_list|(
name|accessTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStoragePolicyID ()
specifier|public
specifier|final
name|byte
name|getStoragePolicyID
parameter_list|()
block|{
return|return
name|referred
operator|.
name|getStoragePolicyID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalStoragePolicyID ()
specifier|public
specifier|final
name|byte
name|getLocalStoragePolicyID
parameter_list|()
block|{
return|return
name|referred
operator|.
name|getLocalStoragePolicyID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|recordModification (int latestSnapshotId)
specifier|final
name|void
name|recordModification
parameter_list|(
name|int
name|latestSnapshotId
parameter_list|)
block|{
name|referred
operator|.
name|recordModification
argument_list|(
name|latestSnapshotId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// used by WithCount
DECL|method|cleanSubtree ( ReclaimContext reclaimContext, int snapshot, int prior)
specifier|public
name|void
name|cleanSubtree
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|,
name|int
name|snapshot
parameter_list|,
name|int
name|prior
parameter_list|)
block|{
name|referred
operator|.
name|cleanSubtree
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// used by WithCount
DECL|method|destroyAndCollectBlocks (ReclaimContext reclaimContext)
specifier|public
name|void
name|destroyAndCollectBlocks
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|)
block|{
if|if
condition|(
name|removeReference
argument_list|(
name|this
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|referred
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|reclaimContext
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|computeContentSummary (int snapshotId, ContentSummaryComputationContext summary)
specifier|public
name|ContentSummaryComputationContext
name|computeContentSummary
parameter_list|(
name|int
name|snapshotId
parameter_list|,
name|ContentSummaryComputationContext
name|summary
parameter_list|)
throws|throws
name|AccessControlException
block|{
return|return
name|referred
operator|.
name|computeContentSummary
argument_list|(
name|snapshotId
argument_list|,
name|summary
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|computeQuotaUsage (BlockStoragePolicySuite bsps, byte blockStoragePolicyId, boolean useCache, int lastSnapshotId)
specifier|public
name|QuotaCounts
name|computeQuotaUsage
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|byte
name|blockStoragePolicyId
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|int
name|lastSnapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|computeQuotaUsage
argument_list|(
name|bsps
argument_list|,
name|blockStoragePolicyId
argument_list|,
name|useCache
argument_list|,
name|lastSnapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSnapshotINode (int snapshotId)
specifier|public
specifier|final
name|INodeAttributes
name|getSnapshotINode
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|referred
operator|.
name|getSnapshotINode
argument_list|(
name|snapshotId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQuotaCounts ()
specifier|public
name|QuotaCounts
name|getQuotaCounts
parameter_list|()
block|{
return|return
name|referred
operator|.
name|getQuotaCounts
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
specifier|final
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|referred
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dumpTreeRecursively (PrintWriter out, StringBuilder prefix, final int snapshot)
specifier|public
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuilder
name|prefix
parameter_list|,
specifier|final
name|int
name|snapshot
parameter_list|)
block|{
name|super
operator|.
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|instanceof
name|DstReference
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|", dstSnapshotId="
operator|+
operator|(
operator|(
name|DstReference
operator|)
name|this
operator|)
operator|.
name|dstSnapshotId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|instanceof
name|WithCount
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|", count="
operator|+
operator|(
operator|(
name|WithCount
operator|)
name|this
operator|)
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefix
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"->"
argument_list|)
expr_stmt|;
name|getReferredINode
argument_list|()
operator|.
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|b
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
DECL|method|getDstSnapshotId ()
specifier|public
name|int
name|getDstSnapshotId
parameter_list|()
block|{
return|return
name|Snapshot
operator|.
name|CURRENT_STATE_ID
return|;
block|}
comment|/** An anonymous reference with reference count. */
DECL|class|WithCount
specifier|public
specifier|static
class|class
name|WithCount
extends|extends
name|INodeReference
block|{
DECL|field|withNameList
specifier|private
specifier|final
name|List
argument_list|<
name|WithName
argument_list|>
name|withNameList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Compare snapshot with IDs, where null indicates the current status thus      * is greater than any non-null snapshot.      */
DECL|field|WITHNAME_COMPARATOR
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|WithName
argument_list|>
name|WITHNAME_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|WithName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|WithName
name|left
parameter_list|,
name|WithName
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|lastSnapshotId
operator|-
name|right
operator|.
name|lastSnapshotId
return|;
block|}
block|}
decl_stmt|;
DECL|method|WithCount (INodeReference parent, INode referred)
specifier|public
name|WithCount
parameter_list|(
name|INodeReference
name|parent
parameter_list|,
name|INode
name|referred
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|referred
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|referred
operator|.
name|isReference
argument_list|()
argument_list|)
expr_stmt|;
name|referred
operator|.
name|setParentReference
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|getReferenceCount ()
specifier|public
name|int
name|getReferenceCount
parameter_list|()
block|{
name|int
name|count
init|=
name|withNameList
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|getParentReference
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/** Increment and then return the reference count. */
DECL|method|addReference (INodeReference ref)
specifier|public
name|void
name|addReference
parameter_list|(
name|INodeReference
name|ref
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|instanceof
name|WithName
condition|)
block|{
name|WithName
name|refWithName
init|=
operator|(
name|WithName
operator|)
name|ref
decl_stmt|;
name|int
name|i
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|withNameList
argument_list|,
name|refWithName
argument_list|,
name|WITHNAME_COMPARATOR
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|i
operator|<
literal|0
argument_list|)
expr_stmt|;
name|withNameList
operator|.
name|add
argument_list|(
operator|-
name|i
operator|-
literal|1
argument_list|,
name|refWithName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|instanceof
name|DstReference
condition|)
block|{
name|setParentReference
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Decrement and then return the reference count. */
DECL|method|removeReference (INodeReference ref)
specifier|public
name|void
name|removeReference
parameter_list|(
name|INodeReference
name|ref
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|instanceof
name|WithName
condition|)
block|{
name|int
name|i
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|withNameList
argument_list|,
operator|(
name|WithName
operator|)
name|ref
argument_list|,
name|WITHNAME_COMPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|withNameList
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ref
operator|==
name|getParentReference
argument_list|()
condition|)
block|{
name|setParent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Return the last WithName reference if there is any, null otherwise. */
DECL|method|getLastWithName ()
specifier|public
name|WithName
name|getLastWithName
parameter_list|()
block|{
return|return
name|withNameList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|withNameList
operator|.
name|get
argument_list|(
name|withNameList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|getPriorWithName (WithName post)
name|WithName
name|getPriorWithName
parameter_list|(
name|WithName
name|post
parameter_list|)
block|{
name|int
name|i
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|withNameList
argument_list|,
name|post
argument_list|,
name|WITHNAME_COMPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
return|return
name|withNameList
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|withNameList
operator|.
name|get
argument_list|(
operator|-
name|i
operator|-
literal|2
argument_list|)
return|;
block|}
block|}
comment|/**      * @return the WithName/DstReference node contained in the given snapshot.      */
DECL|method|getParentRef (int snapshotId)
specifier|public
name|INodeReference
name|getParentRef
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|withNameList
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|end
condition|)
block|{
name|int
name|mid
init|=
name|start
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|sid
init|=
name|withNameList
operator|.
name|get
argument_list|(
name|mid
argument_list|)
operator|.
name|lastSnapshotId
decl_stmt|;
if|if
condition|(
name|sid
operator|==
name|snapshotId
condition|)
block|{
return|return
name|withNameList
operator|.
name|get
argument_list|(
name|mid
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|sid
operator|<
name|snapshotId
condition|)
block|{
name|start
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
name|mid
expr_stmt|;
block|}
block|}
if|if
condition|(
name|start
operator|<
name|withNameList
operator|.
name|size
argument_list|()
operator|&&
name|withNameList
operator|.
name|get
argument_list|(
name|start
argument_list|)
operator|.
name|lastSnapshotId
operator|>=
name|snapshotId
condition|)
block|{
return|return
name|withNameList
operator|.
name|get
argument_list|(
name|start
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|getParentReference
argument_list|()
return|;
block|}
block|}
block|}
comment|/** A reference with a fixed name. */
DECL|class|WithName
specifier|public
specifier|static
class|class
name|WithName
extends|extends
name|INodeReference
block|{
DECL|field|name
specifier|private
specifier|final
name|byte
index|[]
name|name
decl_stmt|;
comment|/**      * The id of the last snapshot in the src tree when this WithName node was       * generated. When calculating the quota usage of the referred node, only       * the files/dirs existing when this snapshot was taken will be counted for       * this WithName node and propagated along its ancestor path.      */
DECL|field|lastSnapshotId
specifier|private
specifier|final
name|int
name|lastSnapshotId
decl_stmt|;
DECL|method|WithName (INodeDirectory parent, WithCount referred, byte[] name, int lastSnapshotId)
specifier|public
name|WithName
parameter_list|(
name|INodeDirectory
name|parent
parameter_list|,
name|WithCount
name|referred
parameter_list|,
name|byte
index|[]
name|name
parameter_list|,
name|int
name|lastSnapshotId
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|referred
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|lastSnapshotId
operator|=
name|lastSnapshotId
expr_stmt|;
name|referred
operator|.
name|addReference
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLocalNameBytes ()
specifier|public
specifier|final
name|byte
index|[]
name|getLocalNameBytes
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|setLocalName (byte[] name)
specifier|public
specifier|final
name|void
name|setLocalName
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot set name: "
operator|+
name|getClass
argument_list|()
operator|+
literal|" is immutable."
argument_list|)
throw|;
block|}
DECL|method|getLastSnapshotId ()
specifier|public
name|int
name|getLastSnapshotId
parameter_list|()
block|{
return|return
name|lastSnapshotId
return|;
block|}
annotation|@
name|Override
DECL|method|computeContentSummary ( int snapshotId, ContentSummaryComputationContext summary)
specifier|public
specifier|final
name|ContentSummaryComputationContext
name|computeContentSummary
parameter_list|(
name|int
name|snapshotId
parameter_list|,
name|ContentSummaryComputationContext
name|summary
parameter_list|)
block|{
specifier|final
name|int
name|s
init|=
name|snapshotId
operator|<
name|lastSnapshotId
condition|?
name|snapshotId
else|:
name|lastSnapshotId
decl_stmt|;
comment|// only count storagespace for WithName
specifier|final
name|QuotaCounts
name|q
init|=
name|computeQuotaUsage
argument_list|(
name|summary
operator|.
name|getBlockStoragePolicySuite
argument_list|()
argument_list|,
name|getStoragePolicyID
argument_list|()
argument_list|,
literal|false
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|summary
operator|.
name|getCounts
argument_list|()
operator|.
name|addContent
argument_list|(
name|Content
operator|.
name|DISKSPACE
argument_list|,
name|q
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
name|summary
operator|.
name|getCounts
argument_list|()
operator|.
name|addTypeSpaces
argument_list|(
name|q
operator|.
name|getTypeSpaces
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|summary
return|;
block|}
annotation|@
name|Override
DECL|method|computeQuotaUsage (BlockStoragePolicySuite bsps, byte blockStoragePolicyId, boolean useCache, int lastSnapshotId)
specifier|public
specifier|final
name|QuotaCounts
name|computeQuotaUsage
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|byte
name|blockStoragePolicyId
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|int
name|lastSnapshotId
parameter_list|)
block|{
comment|// if this.lastSnapshotId< lastSnapshotId, the rename of the referred
comment|// node happened before the rename of its ancestor. This should be
comment|// impossible since for WithName node we only count its children at the
comment|// time of the rename.
name|Preconditions
operator|.
name|checkState
argument_list|(
name|lastSnapshotId
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|||
name|this
operator|.
name|lastSnapshotId
operator|>=
name|lastSnapshotId
argument_list|)
expr_stmt|;
specifier|final
name|INode
name|referred
init|=
name|this
operator|.
name|getReferredINode
argument_list|()
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
comment|// We will continue the quota usage computation using the same snapshot id
comment|// as time line (if the given snapshot id is valid). Also, we cannot use
comment|// cache for the referred node since its cached quota may have already
comment|// been updated by changes in the current tree.
name|int
name|id
init|=
name|lastSnapshotId
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
condition|?
name|lastSnapshotId
else|:
name|this
operator|.
name|lastSnapshotId
decl_stmt|;
return|return
name|referred
operator|.
name|computeQuotaUsage
argument_list|(
name|bsps
argument_list|,
name|blockStoragePolicyId
argument_list|,
literal|false
argument_list|,
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cleanSubtree (ReclaimContext reclaimContext, final int snapshot, int prior)
specifier|public
name|void
name|cleanSubtree
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|,
specifier|final
name|int
name|snapshot
parameter_list|,
name|int
name|prior
parameter_list|)
block|{
comment|// since WithName node resides in deleted list acting as a snapshot copy,
comment|// the parameter snapshot must be non-null
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|snapshot
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
comment|// if prior is NO_SNAPSHOT_ID, we need to check snapshot belonging to the
comment|// previous WithName instance
if|if
condition|(
name|prior
operator|==
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
condition|)
block|{
name|prior
operator|=
name|getPriorSnapshot
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prior
operator|!=
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
operator|&&
name|Snapshot
operator|.
name|ID_INTEGER_COMPARATOR
operator|.
name|compare
argument_list|(
name|snapshot
argument_list|,
name|prior
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
comment|// record the old quota delta
name|QuotaCounts
name|old
init|=
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|getCountsCopy
argument_list|()
decl_stmt|;
name|getReferredINode
argument_list|()
operator|.
name|cleanSubtree
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
name|INodeReference
name|ref
init|=
name|getReferredINode
argument_list|()
operator|.
name|getParentReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|QuotaCounts
name|current
init|=
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|getCountsCopy
argument_list|()
decl_stmt|;
name|current
operator|.
name|subtract
argument_list|(
name|old
argument_list|)
expr_stmt|;
comment|// we need to update the quota usage along the parent path from ref
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|addUpdatePath
argument_list|(
name|ref
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|snapshot
operator|<
name|lastSnapshotId
condition|)
block|{
comment|// for a WithName node, when we compute its quota usage, we only count
comment|// in all the nodes existing at the time of the corresponding rename op.
comment|// Thus if we are deleting a snapshot before/at the snapshot associated
comment|// with lastSnapshotId, we do not need to update the quota upwards.
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|setCounts
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroyAndCollectBlocks (ReclaimContext reclaimContext)
specifier|public
name|void
name|destroyAndCollectBlocks
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|)
block|{
name|int
name|snapshot
init|=
name|getSelfSnapshot
argument_list|()
decl_stmt|;
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|add
argument_list|(
name|computeQuotaUsage
argument_list|(
name|reclaimContext
operator|.
name|bsps
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeReference
argument_list|(
name|this
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|getReferredINode
argument_list|()
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|reclaimContext
operator|.
name|getCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|prior
init|=
name|getPriorSnapshot
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|INode
name|referred
init|=
name|getReferredINode
argument_list|()
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshot
operator|!=
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
condition|)
block|{
if|if
condition|(
name|prior
operator|!=
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
operator|&&
name|snapshot
operator|<=
name|prior
condition|)
block|{
comment|// the snapshot to be deleted has been deleted while traversing
comment|// the src tree of the previous rename operation. This usually
comment|// happens when rename's src and dst are under the same
comment|// snapshottable directory. E.g., the following operation sequence:
comment|// 1. create snapshot s1 on /test
comment|// 2. rename /test/foo/bar to /test/foo2/bar
comment|// 3. create snapshot s2 on /test
comment|// 4. rename foo2 again
comment|// 5. delete snapshot s2
return|return;
block|}
name|ReclaimContext
name|newCtx
init|=
name|reclaimContext
operator|.
name|getCopy
argument_list|()
decl_stmt|;
name|referred
operator|.
name|cleanSubtree
argument_list|(
name|newCtx
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
name|INodeReference
name|ref
init|=
name|getReferredINode
argument_list|()
operator|.
name|getParentReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
comment|// we need to update the quota usage along the parent path from ref
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|addUpdatePath
argument_list|(
name|ref
argument_list|,
name|newCtx
operator|.
name|quotaDelta
argument_list|()
operator|.
name|getCountsCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getSelfSnapshot ()
specifier|private
name|int
name|getSelfSnapshot
parameter_list|()
block|{
name|INode
name|referred
init|=
name|getReferredINode
argument_list|()
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|int
name|snapshot
init|=
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
decl_stmt|;
if|if
condition|(
name|referred
operator|.
name|isFile
argument_list|()
operator|&&
name|referred
operator|.
name|asFile
argument_list|()
operator|.
name|isWithSnapshot
argument_list|()
condition|)
block|{
name|snapshot
operator|=
name|referred
operator|.
name|asFile
argument_list|()
operator|.
name|getDiffs
argument_list|()
operator|.
name|getPrior
argument_list|(
name|lastSnapshotId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|referred
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|referred
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|snapshot
operator|=
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|getPrior
argument_list|(
name|lastSnapshotId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|snapshot
return|;
block|}
block|}
DECL|class|DstReference
specifier|public
specifier|static
class|class
name|DstReference
extends|extends
name|INodeReference
block|{
comment|/**      * Record the latest snapshot of the dst subtree before the rename. For      * later operations on the moved/renamed files/directories, if the latest      * snapshot is after this dstSnapshot, changes will be recorded to the      * latest snapshot. Otherwise changes will be recorded to the snapshot      * belonging to the src of the rename.      *       * {@link Snapshot#NO_SNAPSHOT_ID} means no dstSnapshot (e.g., src of the      * first-time rename).      */
DECL|field|dstSnapshotId
specifier|private
specifier|final
name|int
name|dstSnapshotId
decl_stmt|;
annotation|@
name|Override
DECL|method|getDstSnapshotId ()
specifier|public
specifier|final
name|int
name|getDstSnapshotId
parameter_list|()
block|{
return|return
name|dstSnapshotId
return|;
block|}
DECL|method|DstReference (INodeDirectory parent, WithCount referred, final int dstSnapshotId)
specifier|public
name|DstReference
parameter_list|(
name|INodeDirectory
name|parent
parameter_list|,
name|WithCount
name|referred
parameter_list|,
specifier|final
name|int
name|dstSnapshotId
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|referred
argument_list|)
expr_stmt|;
name|this
operator|.
name|dstSnapshotId
operator|=
name|dstSnapshotId
expr_stmt|;
name|referred
operator|.
name|addReference
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cleanSubtree (ReclaimContext reclaimContext, int snapshot, int prior)
specifier|public
name|void
name|cleanSubtree
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|,
name|int
name|snapshot
parameter_list|,
name|int
name|prior
parameter_list|)
block|{
if|if
condition|(
name|snapshot
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|&&
name|prior
operator|==
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
condition|)
block|{
name|destroyAndCollectBlocks
argument_list|(
name|reclaimContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if prior is NO_SNAPSHOT_ID, we need to check snapshot belonging to
comment|// the previous WithName instance
if|if
condition|(
name|prior
operator|==
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
condition|)
block|{
name|prior
operator|=
name|getPriorSnapshot
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|// if prior is not NO_SNAPSHOT_ID, and prior is not before the
comment|// to-be-deleted snapshot, we can quit here and leave the snapshot
comment|// deletion work to the src tree of rename
if|if
condition|(
name|snapshot
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|&&
name|prior
operator|!=
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
operator|&&
name|Snapshot
operator|.
name|ID_INTEGER_COMPARATOR
operator|.
name|compare
argument_list|(
name|snapshot
argument_list|,
name|prior
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|getReferredINode
argument_list|()
operator|.
name|cleanSubtree
argument_list|(
name|reclaimContext
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      *<br>      * To destroy a DstReference node, we first remove its link with the       * referred node. If the reference number of the referred node is&lt;= 0,      * we destroy the subtree of the referred node. Otherwise, we clean the      * referred node's subtree and delete everything created after the last       * rename operation, i.e., everything outside of the scope of the prior       * WithName nodes.      * @param reclaimContext      */
annotation|@
name|Override
DECL|method|destroyAndCollectBlocks (ReclaimContext reclaimContext)
specifier|public
name|void
name|destroyAndCollectBlocks
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|)
block|{
comment|// since we count everything of the subtree for the quota usage of a
comment|// dst reference node, here we should just simply do a quota computation.
comment|// then to avoid double counting, we pass a different QuotaDelta to other
comment|// calls
name|reclaimContext
operator|.
name|quotaDelta
argument_list|()
operator|.
name|add
argument_list|(
name|computeQuotaUsage
argument_list|(
name|reclaimContext
operator|.
name|bsps
argument_list|)
argument_list|)
expr_stmt|;
name|ReclaimContext
name|newCtx
init|=
name|reclaimContext
operator|.
name|getCopy
argument_list|()
decl_stmt|;
if|if
condition|(
name|removeReference
argument_list|(
name|this
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|getReferredINode
argument_list|()
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|newCtx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we will clean everything, including files, directories, and
comment|// snapshots, that were created after this prior snapshot
name|int
name|prior
init|=
name|getPriorSnapshot
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// prior must be non-null, otherwise we do not have any previous
comment|// WithName nodes, and the reference number will be 0.
name|Preconditions
operator|.
name|checkState
argument_list|(
name|prior
operator|!=
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
argument_list|)
expr_stmt|;
comment|// identify the snapshot created after prior
name|int
name|snapshot
init|=
name|getSelfSnapshot
argument_list|(
name|prior
argument_list|)
decl_stmt|;
name|INode
name|referred
init|=
name|getReferredINode
argument_list|()
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|referred
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|// if referred is a file, it must be a file with snapshot since we did
comment|// recordModification before the rename
name|INodeFile
name|file
init|=
name|referred
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|file
operator|.
name|isWithSnapshot
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure we mark the file as deleted
name|file
operator|.
name|getFileWithSnapshotFeature
argument_list|()
operator|.
name|deleteCurrentFile
argument_list|()
expr_stmt|;
comment|// when calling cleanSubtree of the referred node, since we
comment|// compute quota usage updates before calling this destroy
comment|// function, we use true for countDiffChange
name|referred
operator|.
name|cleanSubtree
argument_list|(
name|newCtx
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|referred
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// similarly, if referred is a directory, it must be an
comment|// INodeDirectory with snapshot
name|INodeDirectory
name|dir
init|=
name|referred
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|dir
operator|.
name|isWithSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryWithSnapshotFeature
operator|.
name|destroyDstSubtree
argument_list|(
name|newCtx
argument_list|,
name|dir
argument_list|,
name|snapshot
argument_list|,
name|prior
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSelfSnapshot (final int prior)
specifier|private
name|int
name|getSelfSnapshot
parameter_list|(
specifier|final
name|int
name|prior
parameter_list|)
block|{
name|WithCount
name|wc
init|=
operator|(
name|WithCount
operator|)
name|getReferredINode
argument_list|()
operator|.
name|asReference
argument_list|()
decl_stmt|;
name|INode
name|referred
init|=
name|wc
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|int
name|lastSnapshot
init|=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
decl_stmt|;
if|if
condition|(
name|referred
operator|.
name|isFile
argument_list|()
operator|&&
name|referred
operator|.
name|asFile
argument_list|()
operator|.
name|isWithSnapshot
argument_list|()
condition|)
block|{
name|lastSnapshot
operator|=
name|referred
operator|.
name|asFile
argument_list|()
operator|.
name|getDiffs
argument_list|()
operator|.
name|getLastSnapshotId
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|referred
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|referred
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|lastSnapshot
operator|=
name|sf
operator|.
name|getLastSnapshotId
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastSnapshot
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|&&
name|lastSnapshot
operator|!=
name|prior
condition|)
block|{
return|return
name|lastSnapshot
return|;
block|}
else|else
block|{
return|return
name|Snapshot
operator|.
name|CURRENT_STATE_ID
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

