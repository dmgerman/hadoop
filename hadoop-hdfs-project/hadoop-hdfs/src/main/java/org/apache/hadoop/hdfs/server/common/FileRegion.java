begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ProvidedStorageLocation
import|;
end_import

begin_comment
comment|/**  * This class is used to represent provided blocks that are file regions,  * i.e., can be described using (path, offset, length).  */
end_comment

begin_class
DECL|class|FileRegion
specifier|public
class|class
name|FileRegion
implements|implements
name|BlockAlias
block|{
DECL|field|pair
specifier|private
specifier|final
name|Pair
argument_list|<
name|Block
argument_list|,
name|ProvidedStorageLocation
argument_list|>
name|pair
decl_stmt|;
DECL|field|bpid
specifier|private
specifier|final
name|String
name|bpid
decl_stmt|;
DECL|method|FileRegion (long blockId, Path path, long offset, long length, String bpid, long genStamp)
specifier|public
name|FileRegion
parameter_list|(
name|long
name|blockId
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|String
name|bpid
parameter_list|,
name|long
name|genStamp
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Block
argument_list|(
name|blockId
argument_list|,
name|length
argument_list|,
name|genStamp
argument_list|)
argument_list|,
operator|new
name|ProvidedStorageLocation
argument_list|(
name|path
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
block|}
DECL|method|FileRegion (long blockId, Path path, long offset, long length, String bpid)
specifier|public
name|FileRegion
parameter_list|(
name|long
name|blockId
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
name|this
argument_list|(
name|blockId
argument_list|,
name|path
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|bpid
argument_list|,
name|HdfsConstants
operator|.
name|GRANDFATHER_GENERATION_STAMP
argument_list|)
expr_stmt|;
block|}
DECL|method|FileRegion (long blockId, Path path, long offset, long length, long genStamp)
specifier|public
name|FileRegion
parameter_list|(
name|long
name|blockId
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|long
name|genStamp
parameter_list|)
block|{
name|this
argument_list|(
name|blockId
argument_list|,
name|path
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|null
argument_list|,
name|genStamp
argument_list|)
expr_stmt|;
block|}
DECL|method|FileRegion (Block block, ProvidedStorageLocation providedStorageLocation)
specifier|public
name|FileRegion
parameter_list|(
name|Block
name|block
parameter_list|,
name|ProvidedStorageLocation
name|providedStorageLocation
parameter_list|)
block|{
name|this
operator|.
name|pair
operator|=
name|Pair
operator|.
name|of
argument_list|(
name|block
argument_list|,
name|providedStorageLocation
argument_list|)
expr_stmt|;
name|this
operator|.
name|bpid
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|FileRegion (Block block, ProvidedStorageLocation providedStorageLocation, String bpid)
specifier|public
name|FileRegion
parameter_list|(
name|Block
name|block
parameter_list|,
name|ProvidedStorageLocation
name|providedStorageLocation
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
name|this
operator|.
name|pair
operator|=
name|Pair
operator|.
name|of
argument_list|(
name|block
argument_list|,
name|providedStorageLocation
argument_list|)
expr_stmt|;
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
block|}
DECL|method|FileRegion (long blockId, Path path, long offset, long length)
specifier|public
name|FileRegion
parameter_list|(
name|long
name|blockId
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
argument_list|(
name|blockId
argument_list|,
name|path
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlock ()
specifier|public
name|Block
name|getBlock
parameter_list|()
block|{
return|return
name|pair
operator|.
name|getKey
argument_list|()
return|;
block|}
DECL|method|getProvidedStorageLocation ()
specifier|public
name|ProvidedStorageLocation
name|getProvidedStorageLocation
parameter_list|()
block|{
return|return
name|pair
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|this
operator|.
name|bpid
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileRegion
name|that
init|=
operator|(
name|FileRegion
operator|)
name|o
decl_stmt|;
return|return
name|pair
operator|.
name|equals
argument_list|(
name|that
operator|.
name|pair
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|pair
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

