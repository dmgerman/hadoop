begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Exception thrown when too many exceptions occur while gathering  * responses to a quorum call.   */
end_comment

begin_class
DECL|class|QuorumException
class|class
name|QuorumException
extends|extends
name|IOException
block|{
comment|/**    * Create a QuorumException instance with a descriptive message detailing    * the underlying exceptions, as well as any successful responses which    * were returned.    * @param<K> the keys for the quorum calls    * @param<V> the success response type    * @param successes any successful responses returned    * @param exceptions the exceptions returned    */
DECL|method|create ( String simpleMsg, Map<K, V> successes, Map<K, Throwable> exceptions)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|QuorumException
name|create
parameter_list|(
name|String
name|simpleMsg
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|successes
parameter_list|,
name|Map
argument_list|<
name|K
argument_list|,
name|Throwable
argument_list|>
name|exceptions
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Must pass exceptions"
argument_list|)
expr_stmt|;
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|simpleMsg
argument_list|)
operator|.
name|append
argument_list|(
literal|". "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|successes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|successes
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" successful responses:\n"
argument_list|)
expr_stmt|;
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|useForNull
argument_list|(
literal|"null"
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|": "
argument_list|)
operator|.
name|appendTo
argument_list|(
name|msg
argument_list|,
name|successes
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
name|exceptions
operator|.
name|size
argument_list|()
operator|+
literal|" exceptions thrown:\n"
argument_list|)
expr_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Throwable
argument_list|>
name|e
range|:
name|exceptions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|RuntimeException
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QuorumException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|QuorumException (String msg)
specifier|private
name|QuorumException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
block|}
end_class

end_unit

