begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ksm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmBucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|exceptions
operator|.
name|KSMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|DB_KEY_DELIMITER
import|;
end_import

begin_comment
comment|/**  * KSM bucket manager.  */
end_comment

begin_class
DECL|class|BucketManagerImpl
specifier|public
class|class
name|BucketManagerImpl
implements|implements
name|BucketManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BucketManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * MetadataManager is used for accessing KSM MetadataDB and ReadWriteLock.    */
DECL|field|metadataManager
specifier|private
specifier|final
name|MetadataManager
name|metadataManager
decl_stmt|;
comment|/**    * Constructs BucketManager.    * @param metadataManager    */
DECL|method|BucketManagerImpl (MetadataManager metadataManager)
specifier|public
name|BucketManagerImpl
parameter_list|(
name|MetadataManager
name|metadataManager
parameter_list|)
block|{
name|this
operator|.
name|metadataManager
operator|=
name|metadataManager
expr_stmt|;
block|}
comment|/**    * MetadataDB is maintained in MetadataManager and shared between    * BucketManager and VolumeManager. (and also by KeyManager)    *    * BucketManager uses MetadataDB to store bucket level information.    *    * Keys used in BucketManager for storing data into MetadataDB    * for BucketInfo:    * {volume/bucket} -> bucketInfo    *    * Work flow of create bucket:    *    * -> Check if the Volume exists in metadataDB, if not throw    * VolumeNotFoundException.    * -> Else check if the Bucket exists in metadataDB, if so throw    * BucketExistException    * -> Else update MetadataDB with VolumeInfo.    */
comment|/**    * Creates a bucket.    * @param args - KsmBucketArgs.    */
annotation|@
name|Override
DECL|method|createBucket (KsmBucketArgs args)
specifier|public
name|void
name|createBucket
parameter_list|(
name|KsmBucketArgs
name|args
parameter_list|)
throws|throws
name|KSMException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|String
name|volumeNameString
init|=
name|args
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketNameString
init|=
name|args
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
try|try
block|{
comment|//bucket key: {volume/bucket}
name|String
name|bucketKeyString
init|=
name|volumeNameString
operator|+
name|DB_KEY_DELIMITER
operator|+
name|bucketNameString
decl_stmt|;
name|byte
index|[]
name|volumeName
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|volumeNameString
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bucketKey
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|bucketKeyString
argument_list|)
decl_stmt|;
comment|//Check if the volume exists
if|if
condition|(
name|metadataManager
operator|.
name|get
argument_list|(
name|volumeName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"volume: {} not found "
argument_list|,
name|volumeNameString
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
literal|"Volume doesn't exist"
argument_list|,
name|KSMException
operator|.
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
comment|//Check if bucket already exists
if|if
condition|(
name|metadataManager
operator|.
name|get
argument_list|(
name|bucketKey
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"bucket: {} already exists "
argument_list|,
name|bucketNameString
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
literal|"Bucket already exist"
argument_list|,
name|KSMException
operator|.
name|ResultCodes
operator|.
name|FAILED_BUCKET_ALREADY_EXISTS
argument_list|)
throw|;
block|}
name|metadataManager
operator|.
name|put
argument_list|(
name|bucketKey
argument_list|,
name|args
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"created bucket: {} in volume: {}"
argument_list|,
name|bucketNameString
argument_list|,
name|volumeNameString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DBException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Bucket creation failed for bucket:{} in volume:{}"
argument_list|,
name|volumeNameString
argument_list|,
name|bucketNameString
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|KSMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|KSMException
operator|.
name|ResultCodes
operator|.
name|FAILED_INTERNAL_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

