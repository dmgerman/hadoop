begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.balancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|DataEncryptionKeyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The class provides utilities for key and token management.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|KeyManager
specifier|public
class|class
name|KeyManager
implements|implements
name|Closeable
implements|,
name|DataEncryptionKeyFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeyManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|namenode
specifier|private
specifier|final
name|NamenodeProtocol
name|namenode
decl_stmt|;
DECL|field|isBlockTokenEnabled
specifier|private
specifier|final
name|boolean
name|isBlockTokenEnabled
decl_stmt|;
DECL|field|encryptDataTransfer
specifier|private
specifier|final
name|boolean
name|encryptDataTransfer
decl_stmt|;
DECL|field|shouldRun
specifier|private
name|boolean
name|shouldRun
decl_stmt|;
DECL|field|blockTokenSecretManager
specifier|private
specifier|final
name|BlockTokenSecretManager
name|blockTokenSecretManager
decl_stmt|;
DECL|field|blockKeyUpdater
specifier|private
specifier|final
name|BlockKeyUpdater
name|blockKeyUpdater
decl_stmt|;
DECL|field|encryptionKey
specifier|private
name|DataEncryptionKey
name|encryptionKey
decl_stmt|;
comment|/**    * Timer object for querying the current time. Separated out for    * unit testing.    */
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
DECL|method|KeyManager (String blockpoolID, NamenodeProtocol namenode, boolean encryptDataTransfer, Configuration conf)
specifier|public
name|KeyManager
parameter_list|(
name|String
name|blockpoolID
parameter_list|,
name|NamenodeProtocol
name|namenode
parameter_list|,
name|boolean
name|encryptDataTransfer
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|namenode
operator|=
name|namenode
expr_stmt|;
name|this
operator|.
name|encryptDataTransfer
operator|=
name|encryptDataTransfer
expr_stmt|;
name|this
operator|.
name|timer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
specifier|final
name|ExportedBlockKeys
name|keys
init|=
name|namenode
operator|.
name|getBlockKeys
argument_list|()
decl_stmt|;
name|this
operator|.
name|isBlockTokenEnabled
operator|=
name|keys
operator|.
name|isBlockTokenEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
name|isBlockTokenEnabled
condition|)
block|{
name|long
name|updateInterval
init|=
name|keys
operator|.
name|getKeyUpdateInterval
argument_list|()
decl_stmt|;
name|long
name|tokenLifetime
init|=
name|keys
operator|.
name|getTokenLifetime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Block token params received from NN: update interval="
operator|+
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|updateInterval
argument_list|)
operator|+
literal|", token lifetime="
operator|+
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|tokenLifetime
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|encryptionAlgorithm
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATA_ENCRYPTION_ALGORITHM_KEY
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|enableProtobuf
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_PROTOBUF_ENABLE
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_ACCESS_TOKEN_PROTOBUF_ENABLE_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|blockTokenSecretManager
operator|=
operator|new
name|BlockTokenSecretManager
argument_list|(
name|updateInterval
argument_list|,
name|tokenLifetime
argument_list|,
name|blockpoolID
argument_list|,
name|encryptionAlgorithm
argument_list|,
name|enableProtobuf
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockTokenSecretManager
operator|.
name|addKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
comment|// sync block keys with NN more frequently than NN updates its block keys
name|this
operator|.
name|blockKeyUpdater
operator|=
operator|new
name|BlockKeyUpdater
argument_list|(
name|updateInterval
operator|/
literal|4
argument_list|)
expr_stmt|;
name|this
operator|.
name|shouldRun
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|blockTokenSecretManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|blockKeyUpdater
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|startBlockKeyUpdater ()
specifier|public
name|void
name|startBlockKeyUpdater
parameter_list|()
block|{
if|if
condition|(
name|blockKeyUpdater
operator|!=
literal|null
condition|)
block|{
name|blockKeyUpdater
operator|.
name|daemon
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Get an access token for a block. */
DECL|method|getAccessToken (ExtendedBlock eb, StorageType[] storageTypes, String[] storageIds)
specifier|public
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|getAccessToken
parameter_list|(
name|ExtendedBlock
name|eb
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|String
index|[]
name|storageIds
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isBlockTokenEnabled
condition|)
block|{
return|return
name|BlockTokenSecretManager
operator|.
name|DUMMY_TOKEN
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|shouldRun
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot get access token since BlockKeyUpdater is not running"
argument_list|)
throw|;
block|}
return|return
name|blockTokenSecretManager
operator|.
name|generateToken
argument_list|(
literal|null
argument_list|,
name|eb
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|REPLACE
argument_list|,
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|COPY
argument_list|)
argument_list|,
name|storageTypes
argument_list|,
name|storageIds
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|newDataEncryptionKey ()
specifier|public
name|DataEncryptionKey
name|newDataEncryptionKey
parameter_list|()
block|{
if|if
condition|(
name|encryptDataTransfer
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|encryptionKey
operator|==
literal|null
operator|||
name|encryptionKey
operator|.
name|expiryDate
operator|<
name|timer
operator|.
name|now
argument_list|()
condition|)
block|{
comment|// Encryption Key (EK) is generated from Block Key (BK).
comment|// Check if EK is expired, and generate a new one using the current BK
comment|// if so, otherwise continue to use the previously generated EK.
comment|//
comment|// It's important to make sure that when EK is not expired, the BK
comment|// used to generate the EK is not expired and removed, because
comment|// the same BK will be used to re-generate the EK
comment|// by BlockTokenSecretManager.
comment|//
comment|// The current implementation ensures that when an EK is not expired
comment|// (within tokenLifetime), the BK that's used to generate it
comment|// still has at least "keyUpdateInterval" of life time before
comment|// the BK gets expired and removed.
comment|// See BlockTokenSecretManager for details.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generating new data encryption key because current key "
operator|+
operator|(
name|encryptionKey
operator|==
literal|null
condition|?
literal|"is null."
else|:
literal|"expired on "
operator|+
name|encryptionKey
operator|.
name|expiryDate
operator|)
argument_list|)
expr_stmt|;
name|encryptionKey
operator|=
name|blockTokenSecretManager
operator|.
name|generateDataEncryptionKey
argument_list|()
expr_stmt|;
block|}
return|return
name|encryptionKey
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
try|try
block|{
if|if
condition|(
name|blockKeyUpdater
operator|!=
literal|null
condition|)
block|{
name|blockKeyUpdater
operator|.
name|daemon
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception shutting down access key updater thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Periodically updates access keys.    */
DECL|class|BlockKeyUpdater
class|class
name|BlockKeyUpdater
implements|implements
name|Runnable
implements|,
name|Closeable
block|{
DECL|field|daemon
specifier|private
specifier|final
name|Daemon
name|daemon
init|=
operator|new
name|Daemon
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|sleepInterval
specifier|private
specifier|final
name|long
name|sleepInterval
decl_stmt|;
DECL|method|BlockKeyUpdater (final long sleepInterval)
name|BlockKeyUpdater
parameter_list|(
specifier|final
name|long
name|sleepInterval
parameter_list|)
block|{
name|this
operator|.
name|sleepInterval
operator|=
name|sleepInterval
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Update block keys every "
operator|+
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|sleepInterval
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|shouldRun
condition|)
block|{
try|try
block|{
name|blockTokenSecretManager
operator|.
name|addKeys
argument_list|(
name|namenode
operator|.
name|getBlockKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to set keys"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepInterval
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"InterruptedException in block key updater thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in block key updater thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|shouldRun
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|daemon
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception shutting down key updater thread"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

