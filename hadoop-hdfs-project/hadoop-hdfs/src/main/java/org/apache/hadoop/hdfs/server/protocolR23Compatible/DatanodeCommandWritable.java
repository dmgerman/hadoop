begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_comment
comment|/**  * Base class for data-node command.  * Issued by the name-node to notify data-nodes what should be done.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DatanodeCommandWritable
specifier|public
specifier|abstract
class|class
name|DatanodeCommandWritable
extends|extends
name|ServerCommandWritable
block|{
DECL|method|DatanodeCommandWritable ()
specifier|public
name|DatanodeCommandWritable
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|DatanodeCommandWritable (int action)
name|DatanodeCommandWritable
parameter_list|(
name|int
name|action
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
comment|/** Method to convert from writable type to internal type */
DECL|method|convert ()
specifier|public
specifier|abstract
name|DatanodeCommand
name|convert
parameter_list|()
function_decl|;
DECL|method|convert (DatanodeCommand[] cmds)
specifier|public
specifier|static
name|DatanodeCommandWritable
index|[]
name|convert
parameter_list|(
name|DatanodeCommand
index|[]
name|cmds
parameter_list|)
block|{
name|DatanodeCommandWritable
index|[]
name|ret
init|=
operator|new
name|DatanodeCommandWritable
index|[
name|cmds
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cmds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|DatanodeCommandHelper
operator|.
name|convert
argument_list|(
name|cmds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|convert (DatanodeCommandWritable[] cmds)
specifier|public
specifier|static
name|DatanodeCommand
index|[]
name|convert
parameter_list|(
name|DatanodeCommandWritable
index|[]
name|cmds
parameter_list|)
block|{
if|if
condition|(
name|cmds
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DatanodeCommand
index|[]
name|ret
init|=
operator|new
name|DatanodeCommand
index|[
name|cmds
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cmds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|cmds
index|[
name|i
index|]
operator|.
name|convert
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

