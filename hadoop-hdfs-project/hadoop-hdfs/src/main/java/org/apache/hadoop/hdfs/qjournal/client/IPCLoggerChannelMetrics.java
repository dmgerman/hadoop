begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableQuantiles
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * The metrics for a journal from the writer's perspective.  */
end_comment

begin_class
annotation|@
name|Metrics
argument_list|(
name|about
operator|=
literal|"Journal client metrics"
argument_list|,
name|context
operator|=
literal|"dfs"
argument_list|)
DECL|class|IPCLoggerChannelMetrics
class|class
name|IPCLoggerChannelMetrics
block|{
DECL|field|registry
specifier|final
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"NameNode"
argument_list|)
decl_stmt|;
DECL|field|ch
specifier|private
specifier|volatile
name|IPCLoggerChannel
name|ch
decl_stmt|;
DECL|field|writeEndToEndLatencyQuantiles
specifier|private
specifier|final
name|MutableQuantiles
index|[]
name|writeEndToEndLatencyQuantiles
decl_stmt|;
DECL|field|writeRpcLatencyQuantiles
specifier|private
specifier|final
name|MutableQuantiles
index|[]
name|writeRpcLatencyQuantiles
decl_stmt|;
comment|/**    * In the case of the NN transitioning between states, edit logs are closed    * and reopened. Thus, the IPCLoggerChannel instance that writes to a    * given JournalNode may change over the lifetime of the process.    * However, metrics2 doesn't have a function to unregister a set of metrics    * and fails if a new metrics class is registered with the same name    * as the existing one. Hence, we have to maintain our own registry    * ("multiton") here, so that we have exactly one metrics instance    * per JournalNode, and switch out the pointer to the underlying    * IPCLoggerChannel instance.    */
DECL|field|REGISTRY
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IPCLoggerChannelMetrics
argument_list|>
name|REGISTRY
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|IPCLoggerChannelMetrics (IPCLoggerChannel ch)
specifier|private
name|IPCLoggerChannelMetrics
parameter_list|(
name|IPCLoggerChannel
name|ch
parameter_list|)
block|{
name|this
operator|.
name|ch
operator|=
name|ch
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|int
index|[]
name|intervals
init|=
name|conf
operator|.
name|getInts
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_METRICS_PERCENTILES_INTERVALS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|intervals
operator|!=
literal|null
condition|)
block|{
name|writeEndToEndLatencyQuantiles
operator|=
operator|new
name|MutableQuantiles
index|[
name|intervals
operator|.
name|length
index|]
expr_stmt|;
name|writeRpcLatencyQuantiles
operator|=
operator|new
name|MutableQuantiles
index|[
name|intervals
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writeEndToEndLatencyQuantiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|interval
init|=
name|intervals
index|[
name|i
index|]
decl_stmt|;
name|writeEndToEndLatencyQuantiles
index|[
name|i
index|]
operator|=
name|registry
operator|.
name|newQuantiles
argument_list|(
literal|"writesE2E"
operator|+
name|interval
operator|+
literal|"s"
argument_list|,
literal|"End-to-end time for write operations"
argument_list|,
literal|"ops"
argument_list|,
literal|"LatencyMicros"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|writeRpcLatencyQuantiles
index|[
name|i
index|]
operator|=
name|registry
operator|.
name|newQuantiles
argument_list|(
literal|"writesRpc"
operator|+
name|interval
operator|+
literal|"s"
argument_list|,
literal|"RPC RTT for write operations"
argument_list|,
literal|"ops"
argument_list|,
literal|"LatencyMicros"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writeEndToEndLatencyQuantiles
operator|=
literal|null
expr_stmt|;
name|writeRpcLatencyQuantiles
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|setChannel (IPCLoggerChannel ch)
specifier|private
name|void
name|setChannel
parameter_list|(
name|IPCLoggerChannel
name|ch
parameter_list|)
block|{
assert|assert
name|ch
operator|.
name|getRemoteAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|ch
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
assert|;
name|this
operator|.
name|ch
operator|=
name|ch
expr_stmt|;
block|}
DECL|method|create (IPCLoggerChannel ch)
specifier|static
name|IPCLoggerChannelMetrics
name|create
parameter_list|(
name|IPCLoggerChannel
name|ch
parameter_list|)
block|{
name|String
name|name
init|=
name|getName
argument_list|(
name|ch
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|REGISTRY
init|)
block|{
name|IPCLoggerChannelMetrics
name|m
init|=
name|REGISTRY
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|setChannel
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
operator|new
name|IPCLoggerChannelMetrics
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|register
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|REGISTRY
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
block|}
DECL|method|getName (IPCLoggerChannel ch)
specifier|private
specifier|static
name|String
name|getName
parameter_list|(
name|IPCLoggerChannel
name|ch
parameter_list|)
block|{
name|InetSocketAddress
name|addr
init|=
name|ch
operator|.
name|getRemoteAddress
argument_list|()
decl_stmt|;
name|String
name|addrStr
init|=
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
decl_stmt|;
comment|// IPv6 addresses have colons, which aren't allowed as part of
comment|// MBean names. Replace with '.'
name|addrStr
operator|=
name|addrStr
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
return|return
literal|"IPCLoggerChannel-"
operator|+
name|addrStr
operator|+
literal|"-"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
literal|"Is the remote logger out of sync with the quorum"
argument_list|)
DECL|method|isOutOfSync ()
specifier|public
name|String
name|isOutOfSync
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|toString
argument_list|(
name|ch
operator|.
name|isOutOfSync
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Metric
argument_list|(
literal|"The number of transactions the remote log is lagging behind the "
operator|+
literal|"quorum"
argument_list|)
DECL|method|getCurrentLagTxns ()
specifier|public
name|long
name|getCurrentLagTxns
parameter_list|()
block|{
return|return
name|ch
operator|.
name|getLagTxns
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
literal|"The number of milliseconds the remote log is lagging behind the "
operator|+
literal|"quorum"
argument_list|)
DECL|method|getLagTimeMillis ()
specifier|public
name|long
name|getLagTimeMillis
parameter_list|()
block|{
return|return
name|ch
operator|.
name|getLagTimeMillis
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
literal|"The number of bytes of pending data to be sent to the remote node"
argument_list|)
DECL|method|getQueuedEditsSize ()
specifier|public
name|int
name|getQueuedEditsSize
parameter_list|()
block|{
return|return
name|ch
operator|.
name|getQueuedEditsSize
argument_list|()
return|;
block|}
DECL|method|addWriteEndToEndLatency (long micros)
specifier|public
name|void
name|addWriteEndToEndLatency
parameter_list|(
name|long
name|micros
parameter_list|)
block|{
if|if
condition|(
name|writeEndToEndLatencyQuantiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MutableQuantiles
name|q
range|:
name|writeEndToEndLatencyQuantiles
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|micros
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addWriteRpcLatency (long micros)
specifier|public
name|void
name|addWriteRpcLatency
parameter_list|(
name|long
name|micros
parameter_list|)
block|{
if|if
condition|(
name|writeRpcLatencyQuantiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MutableQuantiles
name|q
range|:
name|writeRpcLatencyQuantiles
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|micros
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

