begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocol.commands
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|RegisteredCmdResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|RegisteredCmdResponseProto
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMCommandResponseProto
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Response to Datanode Register call.  */
end_comment

begin_class
DECL|class|RegisteredCommand
specifier|public
class|class
name|RegisteredCommand
extends|extends
name|SCMCommand
argument_list|<
name|RegisteredCmdResponseProto
argument_list|>
block|{
DECL|field|datanodeUUID
specifier|private
name|String
name|datanodeUUID
decl_stmt|;
DECL|field|clusterID
specifier|private
name|String
name|clusterID
decl_stmt|;
DECL|field|error
specifier|private
name|ErrorCode
name|error
decl_stmt|;
DECL|method|RegisteredCommand (final ErrorCode error, final String datanodeUUID, final String clusterID)
specifier|public
name|RegisteredCommand
parameter_list|(
specifier|final
name|ErrorCode
name|error
parameter_list|,
specifier|final
name|String
name|datanodeUUID
parameter_list|,
specifier|final
name|String
name|clusterID
parameter_list|)
block|{
name|this
operator|.
name|datanodeUUID
operator|=
name|datanodeUUID
expr_stmt|;
name|this
operator|.
name|clusterID
operator|=
name|clusterID
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
comment|/**    * Returns a new builder.    *    * @return - Builder    */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Returns the type of this command.    *    * @return Type    */
annotation|@
name|Override
DECL|method|getType ()
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|registeredCmd
return|;
block|}
comment|/**    * Returns datanode UUID.    * @return - Datanode ID.    */
DECL|method|getDatanodeUUID ()
specifier|public
name|String
name|getDatanodeUUID
parameter_list|()
block|{
return|return
name|datanodeUUID
return|;
block|}
comment|/**    * Returns cluster ID.    * @return -- ClusterID    */
DECL|method|getClusterID ()
specifier|public
name|String
name|getClusterID
parameter_list|()
block|{
return|return
name|clusterID
return|;
block|}
comment|/**    * Returns ErrorCode.    * @return - ErrorCode    */
DECL|method|getError ()
specifier|public
name|ErrorCode
name|getError
parameter_list|()
block|{
return|return
name|error
return|;
block|}
comment|/**    * Gets the protobuf message of this object.    *    * @return A protobuf message.    */
annotation|@
name|Override
DECL|method|getProtoBufMessage ()
name|RegisteredCmdResponseProto
name|getProtoBufMessage
parameter_list|()
block|{
return|return
name|RegisteredCmdResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterID
argument_list|(
name|this
operator|.
name|clusterID
argument_list|)
operator|.
name|setDatanodeUUID
argument_list|(
name|this
operator|.
name|datanodeUUID
argument_list|)
operator|.
name|setErrorCode
argument_list|(
name|this
operator|.
name|error
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * A builder class to verify all values are sane.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|datanodeUUID
specifier|private
name|String
name|datanodeUUID
decl_stmt|;
DECL|field|clusterID
specifier|private
name|String
name|clusterID
decl_stmt|;
DECL|field|error
specifier|private
name|ErrorCode
name|error
decl_stmt|;
comment|/**      * sets UUID.      *      * @param dnUUID - datanode UUID      * @return Builder      */
DECL|method|setDatanodeUUID (String dnUUID)
specifier|public
name|Builder
name|setDatanodeUUID
parameter_list|(
name|String
name|dnUUID
parameter_list|)
block|{
name|this
operator|.
name|datanodeUUID
operator|=
name|dnUUID
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Create this object from a Protobuf message.      *      * @param response - RegisteredCmdResponseProto      * @return RegisteredCommand      */
DECL|method|getFromProtobuf (RegisteredCmdResponseProto response)
specifier|public
name|RegisteredCommand
name|getFromProtobuf
parameter_list|(
name|RegisteredCmdResponseProto
name|response
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return
operator|new
name|RegisteredCommand
argument_list|(
name|response
operator|.
name|getErrorCode
argument_list|()
argument_list|,
name|response
operator|.
name|hasDatanodeUUID
argument_list|()
condition|?
name|response
operator|.
name|getDatanodeUUID
argument_list|()
else|:
literal|""
argument_list|,
name|response
operator|.
name|hasClusterID
argument_list|()
condition|?
name|response
operator|.
name|getClusterID
argument_list|()
else|:
literal|""
argument_list|)
return|;
block|}
comment|/**      * Sets cluster ID.      *      * @param cluster - clusterID      * @return Builder      */
DECL|method|setClusterID (String cluster)
specifier|public
name|Builder
name|setClusterID
parameter_list|(
name|String
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|clusterID
operator|=
name|cluster
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets Error code.      *      * @param errorCode - error code      * @return Builder      */
DECL|method|setErrorCode (ErrorCode errorCode)
specifier|public
name|Builder
name|setErrorCode
parameter_list|(
name|ErrorCode
name|errorCode
parameter_list|)
block|{
name|this
operator|.
name|error
operator|=
name|errorCode
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Build the command object.      *      * @return RegisteredCommand      */
DECL|method|build ()
specifier|public
name|RegisteredCommand
name|build
parameter_list|()
block|{
if|if
condition|(
operator|(
name|this
operator|.
name|error
operator|==
name|ErrorCode
operator|.
name|success
operator|)
operator|&&
operator|(
name|this
operator|.
name|datanodeUUID
operator|==
literal|null
operator|||
name|this
operator|.
name|datanodeUUID
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|this
operator|.
name|clusterID
operator|==
literal|null
operator|||
name|this
operator|.
name|clusterID
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"On success, RegisteredCommand "
operator|+
literal|"needs datanodeUUID and ClusterID."
argument_list|)
throw|;
block|}
return|return
operator|new
name|RegisteredCommand
argument_list|(
name|this
operator|.
name|error
argument_list|,
name|this
operator|.
name|datanodeUUID
argument_list|,
name|this
operator|.
name|clusterID
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

