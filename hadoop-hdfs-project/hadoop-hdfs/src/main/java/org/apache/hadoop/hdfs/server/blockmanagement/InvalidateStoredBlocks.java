begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|LightWeightHashSet
import|;
end_import

begin_comment
comment|/**  * Subclass of InvalidateBlocks used by the BlockManager to  * track blocks on each storage that are scheduled to be invalidated.  */
end_comment

begin_class
DECL|class|InvalidateStoredBlocks
specifier|public
class|class
name|InvalidateStoredBlocks
extends|extends
name|InvalidateBlocks
block|{
DECL|field|datanodeManager
specifier|private
specifier|final
name|DatanodeManager
name|datanodeManager
decl_stmt|;
DECL|method|InvalidateStoredBlocks (DatanodeManager datanodeManager)
name|InvalidateStoredBlocks
parameter_list|(
name|DatanodeManager
name|datanodeManager
parameter_list|)
block|{
name|this
operator|.
name|datanodeManager
operator|=
name|datanodeManager
expr_stmt|;
block|}
comment|/** Print the contents to out. */
DECL|method|dump (final PrintWriter out)
specifier|synchronized
name|void
name|dump
parameter_list|(
specifier|final
name|PrintWriter
name|out
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|numStorages
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Metasave: Blocks "
operator|+
name|numBlocks
argument_list|()
operator|+
literal|" waiting deletion from "
operator|+
name|size
operator|+
literal|" datanodes."
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|storageIds
init|=
name|getStorageIDs
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|storageId
range|:
name|storageIds
control|)
block|{
name|LightWeightHashSet
argument_list|<
name|Block
argument_list|>
name|blocks
init|=
name|getBlocks
argument_list|(
name|storageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|blocks
operator|!=
literal|null
operator|&&
operator|!
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|datanodeManager
operator|.
name|getDatanode
argument_list|(
name|storageId
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|invalidateWork ( final String storageId, final DatanodeDescriptor dn)
specifier|synchronized
name|List
argument_list|<
name|Block
argument_list|>
name|invalidateWork
parameter_list|(
specifier|final
name|String
name|storageId
parameter_list|,
specifier|final
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Block
argument_list|>
name|toInvalidate
init|=
name|pollNumBlocks
argument_list|(
name|storageId
argument_list|,
name|datanodeManager
operator|.
name|blockInvalidateLimit
argument_list|)
decl_stmt|;
if|if
condition|(
name|toInvalidate
operator|!=
literal|null
condition|)
block|{
name|dn
operator|.
name|addBlocksToBeInvalidated
argument_list|(
name|toInvalidate
argument_list|)
expr_stmt|;
block|}
return|return
name|toInvalidate
return|;
block|}
block|}
end_class

end_unit

