begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.block
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|block
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|DeleteBlocksCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|DeletedBlocksTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|Mapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|BackgroundService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|BackgroundTaskQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|BackgroundTaskResult
operator|.
name|EmptyTaskResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * A background service running in SCM to delete blocks. This service scans  * block deletion log in certain interval and caches block deletion commands  * in {@link org.apache.hadoop.ozone.scm.node.CommandQueue}, asynchronously  * SCM HB thread polls cached commands and sends them to datanode for physical  * processing.  */
end_comment

begin_class
DECL|class|SCMBlockDeletingService
specifier|public
class|class
name|SCMBlockDeletingService
extends|extends
name|BackgroundService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMBlockDeletingService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// ThreadPoolSize=2, 1 for scheduler and the other for the scanner.
DECL|field|BLOCK_DELETING_SERVICE_CORE_POOL_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|BLOCK_DELETING_SERVICE_CORE_POOL_SIZE
init|=
literal|2
decl_stmt|;
DECL|field|deletedBlockLog
specifier|private
specifier|final
name|DeletedBlockLog
name|deletedBlockLog
decl_stmt|;
DECL|field|mappingService
specifier|private
specifier|final
name|Mapping
name|mappingService
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
comment|// Default container size is 5G and block size is 256MB, a full container
comment|// at most contains 20 blocks. At most each TX contains 20 blocks.
comment|// When SCM sends block deletion TXs to datanode, each command we allow
comment|// at most 50 containers so that will limit number of to be deleted blocks
comment|// less than 1000.
comment|// TODO - a better throttle algorithm
comment|// Note, this is not an accurate limit of blocks. When we scan
comment|// the log, worst case we may get 50 TX for 50 different datanodes,
comment|// that will cause the deletion message sent by SCM extremely small.
comment|// As a result, the deletion will be slow. An improvement is to scan
comment|// log multiple times until we get enough TXs for each datanode, or
comment|// the entire log is scanned.
DECL|field|BLOCK_DELETE_TX_PER_REQUEST_LIMIT
specifier|private
specifier|static
specifier|final
name|int
name|BLOCK_DELETE_TX_PER_REQUEST_LIMIT
init|=
literal|50
decl_stmt|;
DECL|method|SCMBlockDeletingService (DeletedBlockLog deletedBlockLog, Mapping mapper, NodeManager nodeManager, int interval, long serviceTimeout)
specifier|public
name|SCMBlockDeletingService
parameter_list|(
name|DeletedBlockLog
name|deletedBlockLog
parameter_list|,
name|Mapping
name|mapper
parameter_list|,
name|NodeManager
name|nodeManager
parameter_list|,
name|int
name|interval
parameter_list|,
name|long
name|serviceTimeout
parameter_list|)
block|{
name|super
argument_list|(
literal|"SCMBlockDeletingService"
argument_list|,
name|interval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|BLOCK_DELETING_SERVICE_CORE_POOL_SIZE
argument_list|,
name|serviceTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletedBlockLog
operator|=
name|deletedBlockLog
expr_stmt|;
name|this
operator|.
name|mappingService
operator|=
name|mapper
expr_stmt|;
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTasks ()
specifier|public
name|BackgroundTaskQueue
name|getTasks
parameter_list|()
block|{
name|BackgroundTaskQueue
name|queue
init|=
operator|new
name|BackgroundTaskQueue
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|DeletedBlockTransactionScanner
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|queue
return|;
block|}
DECL|class|DeletedBlockTransactionScanner
specifier|private
class|class
name|DeletedBlockTransactionScanner
implements|implements
name|BackgroundTask
argument_list|<
name|EmptyTaskResult
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|EmptyTaskResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Scan SCM DB in HB interval and collect a throttled list of
comment|// to delete blocks.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running DeletedBlockTransactionScanner"
argument_list|)
expr_stmt|;
name|DatanodeDeletedBlockTransactions
name|transactions
init|=
name|getToDeleteContainerBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|transactions
operator|!=
literal|null
operator|&&
operator|!
name|transactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|transactions
operator|.
name|getDatanodes
argument_list|()
operator|.
name|forEach
argument_list|(
name|datanodeID
lambda|->
block|{
name|List
argument_list|<
name|DeletedBlocksTransaction
argument_list|>
name|dnTXs
init|=
name|transactions
operator|.
name|getDatanodeTransactions
argument_list|(
name|datanodeID
argument_list|)
decl_stmt|;
comment|// TODO commandQueue needs a cap.
comment|// We should stop caching new commands if num of un-processed
comment|// command is bigger than a limit, e.g 50. In case datanode goes
comment|// offline for sometime, the cached commands be flooded.
name|nodeManager
operator|.
name|addDatanodeCommand
argument_list|(
name|datanodeID
argument_list|,
operator|new
name|DeleteBlocksCommand
argument_list|(
name|dnTXs
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added delete block command for datanode {} in the queue,"
operator|+
literal|" number of delete block transactions: {}, TxID list: {}"
argument_list|,
name|datanodeID
argument_list|,
name|dnTXs
operator|.
name|size
argument_list|()
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|transactions
operator|.
name|getTransactionIDList
argument_list|(
name|datanodeID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|EmptyTaskResult
operator|.
name|newResult
argument_list|()
return|;
block|}
comment|// Scan deleteBlocks.db to get a number of to-delete blocks.
comment|// this is going to be properly throttled.
DECL|method|getToDeleteContainerBlocks ()
specifier|private
name|DatanodeDeletedBlockTransactions
name|getToDeleteContainerBlocks
parameter_list|()
block|{
name|DatanodeDeletedBlockTransactions
name|dnTXs
init|=
operator|new
name|DatanodeDeletedBlockTransactions
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DeletedBlocksTransaction
argument_list|>
name|txs
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Get a limited number of TXs to send via HB at a time.
name|txs
operator|=
name|deletedBlockLog
operator|.
name|getTransactions
argument_list|(
name|BLOCK_DELETE_TX_PER_REQUEST_LIMIT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scanned deleted blocks log and got {} delTX to process"
argument_list|,
name|txs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We may tolerant a number of failures for sometime
comment|// but if it continues to fail, at some point we need to raise
comment|// an exception and probably fail the SCM ? At present, it simply
comment|// continues to retry the scanning.
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get block deletion transactions from delTX log"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|txs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DeletedBlocksTransaction
name|tx
range|:
name|txs
control|)
block|{
try|try
block|{
name|ContainerInfo
name|info
init|=
name|mappingService
operator|.
name|getContainer
argument_list|(
name|tx
operator|.
name|getContainerName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Find out the datanode where this TX is supposed to send to.
name|info
operator|.
name|getPipeline
argument_list|()
operator|.
name|getMachines
argument_list|()
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
name|dnTXs
operator|.
name|addTransaction
argument_list|(
name|entry
argument_list|,
name|tx
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container {} not found, continue to process next"
argument_list|,
name|tx
operator|.
name|getContainerName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|dnTXs
return|;
block|}
block|}
comment|/**    * A wrapper class to hold info about datanode and all deleted block    * transactions that will be sent to this datanode.    */
DECL|class|DatanodeDeletedBlockTransactions
specifier|private
specifier|static
class|class
name|DatanodeDeletedBlockTransactions
block|{
comment|// A list of TXs mapped to a certain datanode ID.
DECL|field|transactions
specifier|private
specifier|final
name|Map
argument_list|<
name|DatanodeID
argument_list|,
name|List
argument_list|<
name|DeletedBlocksTransaction
argument_list|>
argument_list|>
name|transactions
decl_stmt|;
DECL|method|DatanodeDeletedBlockTransactions ()
name|DatanodeDeletedBlockTransactions
parameter_list|()
block|{
name|this
operator|.
name|transactions
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
DECL|method|addTransaction (DatanodeID dnID, DeletedBlocksTransaction tx)
name|void
name|addTransaction
parameter_list|(
name|DatanodeID
name|dnID
parameter_list|,
name|DeletedBlocksTransaction
name|tx
parameter_list|)
block|{
if|if
condition|(
name|transactions
operator|.
name|containsKey
argument_list|(
name|dnID
argument_list|)
condition|)
block|{
name|transactions
operator|.
name|get
argument_list|(
name|dnID
argument_list|)
operator|.
name|add
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|DeletedBlocksTransaction
argument_list|>
name|first
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|first
operator|.
name|add
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|transactions
operator|.
name|put
argument_list|(
name|dnID
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transaction added: {}<- TX({})"
argument_list|,
name|dnID
argument_list|,
name|tx
operator|.
name|getTxID
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getDatanodes ()
name|Set
argument_list|<
name|DatanodeID
argument_list|>
name|getDatanodes
parameter_list|()
block|{
return|return
name|transactions
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|isEmpty ()
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|transactions
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|hasTransactions (DatanodeID dnID)
name|boolean
name|hasTransactions
parameter_list|(
name|DatanodeID
name|dnID
parameter_list|)
block|{
return|return
name|transactions
operator|.
name|containsKey
argument_list|(
name|dnID
argument_list|)
operator|&&
operator|!
name|transactions
operator|.
name|get
argument_list|(
name|dnID
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getDatanodeTransactions (DatanodeID dnID)
name|List
argument_list|<
name|DeletedBlocksTransaction
argument_list|>
name|getDatanodeTransactions
parameter_list|(
name|DatanodeID
name|dnID
parameter_list|)
block|{
return|return
name|transactions
operator|.
name|get
argument_list|(
name|dnID
argument_list|)
return|;
block|}
DECL|method|getTransactionIDList (DatanodeID dnID)
name|List
argument_list|<
name|String
argument_list|>
name|getTransactionIDList
parameter_list|(
name|DatanodeID
name|dnID
parameter_list|)
block|{
if|if
condition|(
name|hasTransactions
argument_list|(
name|dnID
argument_list|)
condition|)
block|{
return|return
name|transactions
operator|.
name|get
argument_list|(
name|dnID
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DeletedBlocksTransaction
operator|::
name|getTxID
argument_list|)
operator|.
name|map
argument_list|(
name|String
operator|::
name|valueOf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

