begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|XAttrHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|EncryptionZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|KeyVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|CRYPTO_XATTR_ENCRYPTION_ZONE
import|;
end_import

begin_comment
comment|/**  * Manages the list of encryption zones in the filesystem.  *<p/>  * The EncryptionZoneManager has its own lock, but relies on the FSDirectory  * lock being held for many operations. The FSDirectory lock should not be  * taken if the manager lock is already held.  */
end_comment

begin_class
DECL|class|EncryptionZoneManager
specifier|public
class|class
name|EncryptionZoneManager
block|{
DECL|field|LOG
specifier|public
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EncryptionZoneManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * EncryptionZoneInt is the internal representation of an encryption zone. The    * external representation of an EZ is embodied in an EncryptionZone and    * contains the EZ's pathname.    */
DECL|class|EncryptionZoneInt
specifier|private
class|class
name|EncryptionZoneInt
block|{
DECL|field|keyId
specifier|private
specifier|final
name|String
name|keyId
decl_stmt|;
DECL|field|inodeId
specifier|private
specifier|final
name|long
name|inodeId
decl_stmt|;
DECL|field|keyVersions
specifier|private
specifier|final
name|HashSet
argument_list|<
name|KeyVersion
argument_list|>
name|keyVersions
decl_stmt|;
DECL|field|latestVersion
specifier|private
name|KeyVersion
name|latestVersion
decl_stmt|;
DECL|method|EncryptionZoneInt (long inodeId, String keyId)
name|EncryptionZoneInt
parameter_list|(
name|long
name|inodeId
parameter_list|,
name|String
name|keyId
parameter_list|)
block|{
name|this
operator|.
name|keyId
operator|=
name|keyId
expr_stmt|;
name|this
operator|.
name|inodeId
operator|=
name|inodeId
expr_stmt|;
name|keyVersions
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
name|latestVersion
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getLatestKeyVersion ()
name|KeyVersion
name|getLatestKeyVersion
parameter_list|()
block|{
return|return
name|latestVersion
return|;
block|}
DECL|method|addKeyVersion (KeyVersion version)
name|void
name|addKeyVersion
parameter_list|(
name|KeyVersion
name|version
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keyVersions
operator|.
name|contains
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key {} has new key version {}"
argument_list|,
name|keyId
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|keyVersions
operator|.
name|add
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
comment|// Always set the latestVersion to not get stuck on an old version in
comment|// racy situations. Should eventually converge thanks to the
comment|// monitor.
name|latestVersion
operator|=
name|version
expr_stmt|;
block|}
DECL|method|getKeyId ()
name|String
name|getKeyId
parameter_list|()
block|{
return|return
name|keyId
return|;
block|}
DECL|method|getINodeId ()
name|long
name|getINodeId
parameter_list|()
block|{
return|return
name|inodeId
return|;
block|}
block|}
comment|/**    * Protects the<tt>encryptionZones</tt> map and its contents.    */
DECL|field|lock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
decl_stmt|;
DECL|method|readLock ()
specifier|private
name|void
name|readLock
parameter_list|()
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
DECL|method|readUnlock ()
specifier|private
name|void
name|readUnlock
parameter_list|()
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|method|writeLock ()
specifier|private
name|void
name|writeLock
parameter_list|()
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
DECL|method|writeUnlock ()
specifier|private
name|void
name|writeUnlock
parameter_list|()
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|method|hasWriteLock ()
specifier|public
name|boolean
name|hasWriteLock
parameter_list|()
block|{
return|return
name|lock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
return|;
block|}
DECL|method|hasReadLock ()
specifier|public
name|boolean
name|hasReadLock
parameter_list|()
block|{
return|return
name|lock
operator|.
name|getReadHoldCount
argument_list|()
operator|>
literal|0
operator|||
name|hasWriteLock
argument_list|()
return|;
block|}
DECL|field|encryptionZones
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|EncryptionZoneInt
argument_list|>
name|encryptionZones
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|FSDirectory
name|dir
decl_stmt|;
DECL|field|monitor
specifier|private
specifier|final
name|ScheduledExecutorService
name|monitor
decl_stmt|;
DECL|field|provider
specifier|private
specifier|final
name|KeyProvider
name|provider
decl_stmt|;
comment|/**    * Construct a new EncryptionZoneManager.    *    * @param dir Enclosing FSDirectory    */
DECL|method|EncryptionZoneManager (FSDirectory dir, Configuration conf, KeyProvider provider)
specifier|public
name|EncryptionZoneManager
parameter_list|(
name|FSDirectory
name|dir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|KeyProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|lock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
name|encryptionZones
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|EncryptionZoneInt
argument_list|>
argument_list|()
expr_stmt|;
name|monitor
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
name|EncryptionZoneMonitor
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|refreshMs
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEY_VERSION_REFRESH_INTERVAL_MS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEY_VERSION_REFRESH_INTERVAL_MS_DEFAULT
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|refreshMs
operator|>=
literal|0
argument_list|,
literal|"%s cannot be negative"
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEY_VERSION_REFRESH_INTERVAL_MS_KEY
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|EncryptionZoneMonitor
argument_list|()
argument_list|,
literal|0
argument_list|,
name|refreshMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Periodically wakes up to fetch the latest version of each encryption    * zone key.    */
DECL|class|EncryptionZoneMonitor
specifier|private
class|class
name|EncryptionZoneMonitor
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Monitor waking up to refresh encryption zone key versions"
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|toFetch
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|KeyVersion
argument_list|>
name|toUpdate
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// Determine the keyIds to fetch
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|EncryptionZoneInt
name|ezi
range|:
name|encryptionZones
operator|.
name|values
argument_list|()
control|)
block|{
name|toFetch
operator|.
name|put
argument_list|(
name|ezi
operator|.
name|getINodeId
argument_list|()
argument_list|,
name|ezi
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readUnlock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found {} keys to check"
argument_list|,
name|toFetch
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fetch the key versions while not holding the lock
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|toFetch
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|KeyVersion
name|version
init|=
name|provider
operator|.
name|getCurrentKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|toUpdate
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while getting the current key for {} {}"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Fetched {} key versions from KeyProvider"
argument_list|,
name|toUpdate
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update the key versions for each encryption zone
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|KeyVersion
argument_list|>
name|entry
range|:
name|toUpdate
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EncryptionZoneInt
name|ezi
init|=
name|encryptionZones
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// zone might have been removed in the intervening time
if|if
condition|(
name|ezi
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ezi
operator|.
name|addKeyVersion
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Forces the EncryptionZoneMonitor to run, waiting until completion.    */
annotation|@
name|VisibleForTesting
DECL|method|kickMonitor ()
specifier|public
name|void
name|kickMonitor
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
name|future
init|=
name|monitor
operator|.
name|submit
argument_list|(
operator|new
name|EncryptionZoneMonitor
argument_list|()
argument_list|)
decl_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|/**    * Immediately fetches the latest KeyVersion for an encryption zone,    * also updating the encryption zone.    *    * @param iip of the encryption zone    * @return latest KeyVersion    * @throws IOException on KeyProvider error    */
DECL|method|updateLatestKeyVersion (INodesInPath iip)
name|KeyVersion
name|updateLatestKeyVersion
parameter_list|(
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|IOException
block|{
name|EncryptionZoneInt
name|ezi
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|ezi
operator|=
name|getEncryptionZoneForPath
argument_list|(
name|iip
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ezi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot update KeyVersion since iip is not within"
operator|+
literal|" an encryption zone"
argument_list|)
throw|;
block|}
comment|// Do not hold the lock while doing KeyProvider operations
name|KeyVersion
name|version
init|=
name|provider
operator|.
name|getCurrentKey
argument_list|(
name|ezi
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|ezi
operator|.
name|addKeyVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|version
return|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Add a new encryption zone.    *<p/>    * Called while holding the FSDirectory lock.    *    * @param inodeId of the encryption zone    * @param keyId   encryption zone key id    */
DECL|method|addEncryptionZone (Long inodeId, String keyId)
name|void
name|addEncryptionZone
parameter_list|(
name|Long
name|inodeId
parameter_list|,
name|String
name|keyId
parameter_list|)
block|{
assert|assert
name|dir
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|EncryptionZoneInt
name|ez
init|=
operator|new
name|EncryptionZoneInt
argument_list|(
name|inodeId
argument_list|,
name|keyId
argument_list|)
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|encryptionZones
operator|.
name|put
argument_list|(
name|inodeId
argument_list|,
name|ez
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Remove an encryption zone.    *<p/>    * Called while holding the FSDirectory lock.    */
DECL|method|removeEncryptionZone (Long inodeId)
name|void
name|removeEncryptionZone
parameter_list|(
name|Long
name|inodeId
parameter_list|)
block|{
assert|assert
name|dir
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|encryptionZones
operator|.
name|remove
argument_list|(
name|inodeId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns true if an IIP is within an encryption zone.    *<p/>    * Called while holding the FSDirectory lock.    */
DECL|method|isInAnEZ (INodesInPath iip)
name|boolean
name|isInAnEZ
parameter_list|(
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
block|{
assert|assert
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|(
name|getEncryptionZoneForPath
argument_list|(
name|iip
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns the path of the EncryptionZoneInt.    *<p/>    * Called while holding the FSDirectory lock.    */
DECL|method|getFullPathName (EncryptionZoneInt ezi)
specifier|private
name|String
name|getFullPathName
parameter_list|(
name|EncryptionZoneInt
name|ezi
parameter_list|)
block|{
assert|assert
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
return|return
name|dir
operator|.
name|getInode
argument_list|(
name|ezi
operator|.
name|getINodeId
argument_list|()
argument_list|)
operator|.
name|getFullPathName
argument_list|()
return|;
block|}
DECL|method|getLatestKeyVersion (final INodesInPath iip)
name|KeyVersion
name|getLatestKeyVersion
parameter_list|(
specifier|final
name|INodesInPath
name|iip
parameter_list|)
block|{
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|EncryptionZoneInt
name|ezi
init|=
name|getEncryptionZoneForPath
argument_list|(
name|iip
argument_list|)
decl_stmt|;
if|if
condition|(
name|ezi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ezi
operator|.
name|getLatestKeyVersion
argument_list|()
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return true if the provided<tt>keyVersionName</tt> is the name of a    * valid KeyVersion for the encryption zone of<tt>iip</tt>,    * and<tt>iip</tt> is within an encryption zone.    */
DECL|method|isValidKeyVersion (final INodesInPath iip, String keyVersionName)
name|boolean
name|isValidKeyVersion
parameter_list|(
specifier|final
name|INodesInPath
name|iip
parameter_list|,
name|String
name|keyVersionName
parameter_list|)
block|{
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|EncryptionZoneInt
name|ezi
init|=
name|getEncryptionZoneForPath
argument_list|(
name|iip
argument_list|)
decl_stmt|;
if|if
condition|(
name|ezi
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|KeyVersion
name|ezVersion
range|:
name|ezi
operator|.
name|keyVersions
control|)
block|{
if|if
condition|(
name|keyVersionName
operator|.
name|equals
argument_list|(
name|ezVersion
operator|.
name|getVersionName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Looks up the EncryptionZoneInt for a path within an encryption zone.    * Returns null if path is not within an EZ.    *<p/>    * Must be called while holding the manager lock.    */
DECL|method|getEncryptionZoneForPath (INodesInPath iip)
specifier|private
name|EncryptionZoneInt
name|getEncryptionZoneForPath
parameter_list|(
name|INodesInPath
name|iip
parameter_list|)
block|{
assert|assert
name|hasReadLock
argument_list|()
assert|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|iip
argument_list|)
expr_stmt|;
specifier|final
name|INode
index|[]
name|inodes
init|=
name|iip
operator|.
name|getINodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|inodes
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|INode
name|inode
init|=
name|inodes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|inode
operator|!=
literal|null
condition|)
block|{
specifier|final
name|EncryptionZoneInt
name|ezi
init|=
name|encryptionZones
operator|.
name|get
argument_list|(
name|inode
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ezi
operator|!=
literal|null
condition|)
block|{
return|return
name|ezi
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Throws an exception if the provided path cannot be renamed into the    * destination because of differing encryption zones.    *<p/>    * Called while holding the FSDirectory lock.    *    * @param srcIIP source IIP    * @param dstIIP destination IIP    * @param src    source path, used for debugging    * @throws IOException if the src cannot be renamed to the dst    */
DECL|method|checkMoveValidity (INodesInPath srcIIP, INodesInPath dstIIP, String src)
name|void
name|checkMoveValidity
parameter_list|(
name|INodesInPath
name|srcIIP
parameter_list|,
name|INodesInPath
name|dstIIP
parameter_list|,
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|EncryptionZoneInt
name|srcEZI
init|=
name|getEncryptionZoneForPath
argument_list|(
name|srcIIP
argument_list|)
decl_stmt|;
specifier|final
name|EncryptionZoneInt
name|dstEZI
init|=
name|getEncryptionZoneForPath
argument_list|(
name|dstIIP
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|srcInEZ
init|=
operator|(
name|srcEZI
operator|!=
literal|null
operator|)
decl_stmt|;
specifier|final
name|boolean
name|dstInEZ
init|=
operator|(
name|dstEZI
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|srcInEZ
condition|)
block|{
if|if
condition|(
operator|!
name|dstInEZ
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|src
operator|+
literal|" can't be moved from an encryption zone."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dstInEZ
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|src
operator|+
literal|" can't be moved into an encryption zone."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|srcInEZ
operator|||
name|dstInEZ
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|srcEZI
operator|!=
literal|null
argument_list|,
literal|"couldn't find src EZ?"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|dstEZI
operator|!=
literal|null
argument_list|,
literal|"couldn't find dst EZ?"
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcEZI
operator|!=
name|dstEZI
condition|)
block|{
specifier|final
name|String
name|srcEZPath
init|=
name|getFullPathName
argument_list|(
name|srcEZI
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dstEZPath
init|=
name|getFullPathName
argument_list|(
name|dstEZI
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" can't be moved from encryption zone "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|srcEZPath
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" to encryption zone "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|dstEZPath
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create a new encryption zone.    *<p/>    * Called while holding the FSDirectory lock.    */
DECL|method|createEncryptionZone (String src, String keyId, KeyVersion keyVersion)
name|XAttr
name|createEncryptionZone
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|keyId
parameter_list|,
name|KeyVersion
name|keyVersion
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|dir
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|dir
operator|.
name|isNonEmptyDirectory
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Attempt to create an encryption zone for a non-empty directory."
argument_list|)
throw|;
block|}
specifier|final
name|INodesInPath
name|srcIIP
init|=
name|dir
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|EncryptionZoneInt
name|ezi
init|=
name|getEncryptionZoneForPath
argument_list|(
name|srcIIP
argument_list|)
decl_stmt|;
if|if
condition|(
name|ezi
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Directory "
operator|+
name|src
operator|+
literal|" is already in an "
operator|+
literal|"encryption zone. ("
operator|+
name|getFullPathName
argument_list|(
name|ezi
argument_list|)
operator|+
literal|")"
argument_list|)
throw|;
block|}
specifier|final
name|XAttr
name|keyIdXAttr
init|=
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|CRYPTO_XATTR_ENCRYPTION_ZONE
argument_list|,
name|keyId
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xattrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|xattrs
operator|.
name|add
argument_list|(
name|keyIdXAttr
argument_list|)
expr_stmt|;
comment|// updating the xattr will call addEncryptionZone,
comment|// done this way to handle edit log loading
name|dir
operator|.
name|unprotectedSetXAttrs
argument_list|(
name|src
argument_list|,
name|xattrs
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|XAttrSetFlag
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-get the new encryption zone add the latest key version
name|ezi
operator|=
name|getEncryptionZoneForPath
argument_list|(
name|srcIIP
argument_list|)
expr_stmt|;
name|ezi
operator|.
name|addKeyVersion
argument_list|(
name|keyVersion
argument_list|)
expr_stmt|;
return|return
name|keyIdXAttr
return|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Return the current list of encryption zones.    *<p/>    * Called while holding the FSDirectory lock.    */
DECL|method|listEncryptionZones ()
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|listEncryptionZones
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|ret
init|=
name|Lists
operator|.
name|newArrayListWithExpectedSize
argument_list|(
name|encryptionZones
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|EncryptionZoneInt
name|ezi
range|:
name|encryptionZones
operator|.
name|values
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|EncryptionZone
argument_list|(
name|getFullPathName
argument_list|(
name|ezi
argument_list|)
argument_list|,
name|ezi
operator|.
name|getKeyId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

