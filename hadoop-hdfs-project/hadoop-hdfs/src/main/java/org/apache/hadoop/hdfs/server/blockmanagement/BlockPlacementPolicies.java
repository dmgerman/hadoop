begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BlockPlacementPolicies
specifier|public
class|class
name|BlockPlacementPolicies
block|{
DECL|field|replicationPolicy
specifier|private
specifier|final
name|BlockPlacementPolicy
name|replicationPolicy
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|final
name|BlockPlacementPolicy
name|ecPolicy
decl_stmt|;
DECL|method|BlockPlacementPolicies (Configuration conf, FSClusterStats stats, NetworkTopology clusterMap, Host2NodesMap host2datanodeMap)
specifier|public
name|BlockPlacementPolicies
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSClusterStats
name|stats
parameter_list|,
name|NetworkTopology
name|clusterMap
parameter_list|,
name|Host2NodesMap
name|host2datanodeMap
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|BlockPlacementPolicy
argument_list|>
name|replicatorClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_REPLICATOR_CLASSNAME_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_REPLICATOR_CLASSNAME_DEFAULT
argument_list|,
name|BlockPlacementPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|replicationPolicy
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|replicatorClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|replicationPolicy
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|stats
argument_list|,
name|clusterMap
argument_list|,
name|host2datanodeMap
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|BlockPlacementPolicy
argument_list|>
name|blockPlacementECClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_PLACEMENT_EC_CLASSNAME_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_PLACEMENT_EC_CLASSNAME_DEFAULT
argument_list|,
name|BlockPlacementPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|ecPolicy
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|blockPlacementECClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ecPolicy
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|stats
argument_list|,
name|clusterMap
argument_list|,
name|host2datanodeMap
argument_list|)
expr_stmt|;
block|}
DECL|method|getPolicy (BlockType blockType)
specifier|public
name|BlockPlacementPolicy
name|getPolicy
parameter_list|(
name|BlockType
name|blockType
parameter_list|)
block|{
switch|switch
condition|(
name|blockType
condition|)
block|{
case|case
name|CONTIGUOUS
case|:
return|return
name|replicationPolicy
return|;
case|case
name|STRIPED
case|:
return|return
name|ecPolicy
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"getPolicy received a BlockType that isn't supported."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

