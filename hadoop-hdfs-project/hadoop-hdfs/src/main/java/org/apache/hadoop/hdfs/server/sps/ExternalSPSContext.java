begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.sps
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|sps
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsLocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|NameNodeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|SPSService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class used to connect to Namenode and gets the required information to  * SPS from Namenode state.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ExternalSPSContext
specifier|public
class|class
name|ExternalSPSContext
implements|implements
name|Context
argument_list|<
name|String
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExternalSPSContext
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|service
specifier|private
name|SPSService
argument_list|<
name|String
argument_list|>
name|service
decl_stmt|;
DECL|field|nnc
specifier|private
name|NameNodeConnector
name|nnc
init|=
literal|null
decl_stmt|;
DECL|field|createDefaultSuite
specifier|private
name|BlockStoragePolicySuite
name|createDefaultSuite
init|=
name|BlockStoragePolicySuite
operator|.
name|createDefaultSuite
argument_list|()
decl_stmt|;
DECL|method|ExternalSPSContext (SPSService<String> service, NameNodeConnector nnc)
specifier|public
name|ExternalSPSContext
parameter_list|(
name|SPSService
argument_list|<
name|String
argument_list|>
name|service
parameter_list|,
name|NameNodeConnector
name|nnc
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|nnc
operator|=
name|nnc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|service
operator|.
name|isRunning
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isInSafeMode ()
specifier|public
name|boolean
name|isInSafeMode
parameter_list|()
block|{
try|try
block|{
return|return
name|nnc
operator|!=
literal|null
condition|?
name|nnc
operator|.
name|getDistributedFileSystem
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
else|:
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while creating Namenode Connector.."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isMoverRunning ()
specifier|public
name|boolean
name|isMoverRunning
parameter_list|()
block|{
try|try
block|{
name|FSDataOutputStream
name|out
init|=
name|nnc
operator|.
name|getDistributedFileSystem
argument_list|()
operator|.
name|append
argument_list|(
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while checking mover is running.."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFileID (String path)
specifier|public
name|long
name|getFileID
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|AccessControlException
throws|,
name|ParentNotDirectoryException
block|{
name|HdfsFileStatus
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
operator|(
name|HdfsFileStatus
operator|)
name|nnc
operator|.
name|getDistributedFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Fetched the fileID:{} for the path:{}"
argument_list|,
name|fs
operator|.
name|getFileId
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while getting file is for the given path:{}."
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|fs
operator|!=
literal|null
condition|?
name|fs
operator|.
name|getFileId
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getNetworkTopology ()
specifier|public
name|NetworkTopology
name|getNetworkTopology
parameter_list|()
block|{
return|return
name|NetworkTopology
operator|.
name|getInstance
argument_list|(
name|service
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isFileExist (String filePath)
specifier|public
name|boolean
name|isFileExist
parameter_list|(
name|String
name|filePath
parameter_list|)
block|{
try|try
block|{
return|return
name|nnc
operator|.
name|getDistributedFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|filePath
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while getting file is for the given path:{}"
argument_list|,
name|filePath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getStoragePolicy (byte policyId)
specifier|public
name|BlockStoragePolicy
name|getStoragePolicy
parameter_list|(
name|byte
name|policyId
parameter_list|)
block|{
return|return
name|createDefaultSuite
operator|.
name|getPolicy
argument_list|(
name|policyId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addDropPreviousSPSWorkAtDNs ()
specifier|public
name|void
name|addDropPreviousSPSWorkAtDNs
parameter_list|()
block|{
comment|// Nothing todo
block|}
annotation|@
name|Override
DECL|method|removeSPSHint (String inodeId)
specifier|public
name|void
name|removeSPSHint
parameter_list|(
name|String
name|inodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|nnc
operator|.
name|getDistributedFileSystem
argument_list|()
operator|.
name|removeXAttr
argument_list|(
operator|new
name|Path
argument_list|(
name|inodeId
argument_list|)
argument_list|,
name|HdfsServerConstants
operator|.
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNumLiveDataNodes ()
specifier|public
name|int
name|getNumLiveDataNodes
parameter_list|()
block|{
try|try
block|{
return|return
name|nnc
operator|.
name|getDistributedFileSystem
argument_list|()
operator|.
name|getDataNodeStats
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
operator|.
name|length
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while getting number of live datanodes."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getFileInfo (String path)
specifier|public
name|HdfsFileStatus
name|getFileInfo
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|HdfsLocatedFileStatus
name|fileInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileInfo
operator|=
name|nnc
operator|.
name|getDistributedFileSystem
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getLocatedFileInfo
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Path:{} doesn't exists!"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|fileInfo
return|;
block|}
annotation|@
name|Override
DECL|method|getLiveDatanodeStorageReport ()
specifier|public
name|DatanodeStorageReport
index|[]
name|getLiveDatanodeStorageReport
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|nnc
operator|.
name|getLiveDatanodeStorageReport
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|checkDNSpaceForScheduling (DatanodeInfo dn, StorageType type, long estimatedSize)
specifier|public
name|boolean
name|checkDNSpaceForScheduling
parameter_list|(
name|DatanodeInfo
name|dn
parameter_list|,
name|StorageType
name|type
parameter_list|,
name|long
name|estimatedSize
parameter_list|)
block|{
comment|// TODO: Instead of calling namenode for checking the available space, it
comment|// can be optimized by maintaining local cache of datanode storage report
comment|// and do the computations. This local cache can be refreshed per file or
comment|// periodic fashion.
try|try
block|{
return|return
name|nnc
operator|.
name|getNNProtocolConnection
argument_list|()
operator|.
name|checkDNSpaceForScheduling
argument_list|(
name|dn
argument_list|,
name|type
argument_list|,
name|estimatedSize
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Verify the given datanode:{} is good and has "
operator|+
literal|"estimated space in it."
argument_list|,
name|dn
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNextSPSPath ()
specifier|public
name|String
name|getNextSPSPath
parameter_list|()
block|{
try|try
block|{
return|return
name|nnc
operator|.
name|getNNProtocolConnection
argument_list|()
operator|.
name|getNextSPSPath
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while getting next sps path id from Namenode."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeSPSPathId (String pathId)
specifier|public
name|void
name|removeSPSPathId
parameter_list|(
name|String
name|pathId
parameter_list|)
block|{
comment|// We need not specifically implement for external.
block|}
annotation|@
name|Override
DECL|method|removeAllSPSPathIds ()
specifier|public
name|void
name|removeAllSPSPathIds
parameter_list|()
block|{
comment|// We need not specifically implement for external.
block|}
block|}
end_class

end_unit

