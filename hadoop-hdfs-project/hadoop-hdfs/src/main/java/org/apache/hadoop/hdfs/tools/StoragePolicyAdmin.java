begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|TableListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This class implements block storage policy operations.  */
end_comment

begin_class
DECL|class|StoragePolicyAdmin
specifier|public
class|class
name|StoragePolicyAdmin
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|MAX_LINE_WIDTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LINE_WIDTH
init|=
literal|80
decl_stmt|;
DECL|method|main (String[] argsArray)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argsArray
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|StoragePolicyAdmin
name|admin
init|=
operator|new
name|StoragePolicyAdmin
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|admin
operator|.
name|run
argument_list|(
name|argsArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDFS (Configuration conf)
specifier|private
specifier|static
name|DistributedFileSystem
name|getDFS
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"FileSystem "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
operator|+
literal|" is not an HDFS file system"
argument_list|)
throw|;
block|}
return|return
operator|(
name|DistributedFileSystem
operator|)
name|fs
return|;
block|}
comment|/**    * NN exceptions contain the stack trace as part of the exception message.    * When it's a known error, pretty-print the error and squish the stack trace.    */
DECL|method|prettifyException (Exception e)
specifier|private
specifier|static
name|String
name|prettifyException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|0
index|]
return|;
block|}
DECL|method|getOptionDescriptionListing ()
specifier|private
specifier|static
name|TableListing
name|getOptionDescriptionListing
parameter_list|()
block|{
return|return
operator|new
name|TableListing
operator|.
name|Builder
argument_list|()
operator|.
name|addField
argument_list|(
literal|""
argument_list|)
operator|.
name|addField
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
operator|.
name|wrapWidth
argument_list|(
name|MAX_LINE_WIDTH
argument_list|)
operator|.
name|hideHeaders
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|StoragePolicyAdmin (Configuration conf)
specifier|public
name|StoragePolicyAdmin
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|printUsage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
specifier|final
name|Command
name|command
init|=
name|determineCommand
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand command '"
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|args
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Command names must start with dashes."
argument_list|)
expr_stmt|;
block|}
name|printUsage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|argsList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|command
operator|.
name|run
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|argsList
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|interface|Command
interface|interface
name|Command
block|{
DECL|method|getName ()
name|String
name|getName
parameter_list|()
function_decl|;
DECL|method|getShortUsage ()
name|String
name|getShortUsage
parameter_list|()
function_decl|;
DECL|method|getLongUsage ()
name|String
name|getLongUsage
parameter_list|()
function_decl|;
DECL|method|run (Configuration conf, List<String> args)
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/** Command to list all the existing storage policies */
DECL|class|ListStoragePoliciesCommand
specifier|private
specifier|static
class|class
name|ListStoragePoliciesCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-listPolicies"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|"]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"List all the existing block storage policies.\n"
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockStoragePolicy
index|[]
name|policies
init|=
name|dfs
operator|.
name|getStoragePolicies
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Block Storage Policies:"
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockStoragePolicy
name|policy
range|:
name|policies
control|)
block|{
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
comment|/** Command to get the storage policy of a file/directory */
DECL|class|GetStoragePolicyCommand
specifier|private
specifier|static
class|class
name|GetStoragePolicyCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-getStoragePolicy"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" -path<path>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
specifier|final
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<path>"
argument_list|,
literal|"The path of the file/directory for getting the storage policy"
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Get the storage policy of a file/directory.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|path
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-path"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify the path with -path.\nUsage:"
operator|+
name|getLongUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|HdfsFileStatus
name|status
init|=
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|getFileInfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"File/Directory does not exist: "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
name|byte
name|storagePolicyId
init|=
name|status
operator|.
name|getStoragePolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|storagePolicyId
operator|==
name|BlockStoragePolicySuite
operator|.
name|ID_UNSPECIFIED
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The storage policy of "
operator|+
name|path
operator|+
literal|" is unspecified"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|BlockStoragePolicy
index|[]
name|policies
init|=
name|dfs
operator|.
name|getStoragePolicies
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockStoragePolicy
name|p
range|:
name|policies
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getId
argument_list|()
operator|==
name|storagePolicyId
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The storage policy of "
operator|+
name|path
operator|+
literal|":\n"
operator|+
name|p
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot identify the storage policy for "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
block|}
comment|/** Command to set the storage policy to a file/directory */
DECL|class|SetStoragePolicyCommand
specifier|private
specifier|static
class|class
name|SetStoragePolicyCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-setStoragePolicy"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" -path<path> -policy<policy>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<path>"
argument_list|,
literal|"The path of the file/directory to set storage"
operator|+
literal|" policy"
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<policy>"
argument_list|,
literal|"The name of the block storage policy"
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Set the storage policy to a file/directory.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|path
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-path"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify the path for setting the storage "
operator|+
literal|"policy.\nUsage: "
operator|+
name|getLongUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
specifier|final
name|String
name|policyName
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-policy"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|policyName
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify the policy name.\nUsage: "
operator|+
name|getLongUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
specifier|final
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|setStoragePolicy
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Set storage policy "
operator|+
name|policyName
operator|+
literal|" on "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|class|HelpCommand
specifier|private
specifier|static
class|class
name|HelpCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-help"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"[-help<command-name>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
specifier|final
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<command-name>"
argument_list|,
literal|"The command for which to get "
operator|+
literal|"detailed help. If no command is specified, print detailed help for "
operator|+
literal|"all commands"
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Get detailed help about a command.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|Command
name|command
range|:
name|COMMANDS
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|command
operator|.
name|getLongUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"You must give exactly one argument to -help."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|final
name|String
name|commandName
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// prepend a dash to match against the command names
specifier|final
name|Command
name|command
init|=
name|determineCommand
argument_list|(
literal|"-"
operator|+
name|commandName
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Unknown command '"
operator|+
name|commandName
operator|+
literal|"'.\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Valid help command names are:\n"
argument_list|)
expr_stmt|;
name|String
name|separator
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Command
name|c
range|:
name|COMMANDS
control|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|separator
operator|+
name|c
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|", "
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|command
operator|.
name|getLongUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|field|COMMANDS
specifier|private
specifier|static
specifier|final
name|Command
index|[]
name|COMMANDS
init|=
block|{
operator|new
name|ListStoragePoliciesCommand
argument_list|()
block|,
operator|new
name|SetStoragePolicyCommand
argument_list|()
block|,
operator|new
name|GetStoragePolicyCommand
argument_list|()
block|,
operator|new
name|HelpCommand
argument_list|()
block|}
decl_stmt|;
DECL|method|printUsage (boolean longUsage)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|boolean
name|longUsage
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: bin/hdfs storagepolicies [COMMAND]"
argument_list|)
expr_stmt|;
for|for
control|(
name|Command
name|command
range|:
name|COMMANDS
control|)
block|{
if|if
condition|(
name|longUsage
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|command
operator|.
name|getLongUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"          "
operator|+
name|command
operator|.
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
DECL|method|determineCommand (String commandName)
specifier|private
specifier|static
name|Command
name|determineCommand
parameter_list|(
name|String
name|commandName
parameter_list|)
block|{
for|for
control|(
name|Command
name|COMMAND
range|:
name|COMMANDS
control|)
block|{
if|if
condition|(
name|COMMAND
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|commandName
argument_list|)
condition|)
block|{
return|return
name|COMMAND
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

