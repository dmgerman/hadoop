begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
operator|.
name|Conf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|Peer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**   * Utility class to create BlockReader implementations.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BlockReaderFactory
specifier|public
class|class
name|BlockReaderFactory
block|{
comment|/**    * Parameters for creating a BlockReader.    *    * Before you add something to here: think about whether it's already included    * in Conf (or should be).    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Params
specifier|public
specifier|static
class|class
name|Params
block|{
DECL|field|conf
specifier|private
specifier|final
name|Conf
name|conf
decl_stmt|;
comment|/**      * The peer that this BlockReader will be connected to.      * You must set this.      */
DECL|field|peer
specifier|private
name|Peer
name|peer
init|=
literal|null
decl_stmt|;
comment|/**      * The file name that this BlockReader pertains to.      * This is optional and only used for display and logging purposes.      */
DECL|field|file
specifier|private
name|String
name|file
init|=
literal|null
decl_stmt|;
comment|/**      * The block that this BlockReader is reading.      * You must set this.      */
DECL|field|block
specifier|private
name|ExtendedBlock
name|block
init|=
literal|null
decl_stmt|;
comment|/**      * The BlockTokenIdentifier to use, or null to use none.      */
DECL|field|blockToken
specifier|private
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
init|=
literal|null
decl_stmt|;
comment|/**      * The offset in the block to start reading at.      */
DECL|field|startOffset
specifier|private
name|long
name|startOffset
init|=
literal|0
decl_stmt|;
comment|/**      * The total number of bytes we might want to read, or -1 to assume no      * limit.      */
DECL|field|len
specifier|private
name|long
name|len
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * The buffer size to use.      *      * If this is not set, we will use the default from the Conf.      */
DECL|field|bufferSize
specifier|private
name|int
name|bufferSize
decl_stmt|;
comment|/**      * Whether or not we should verify the checksum.      *      * This is used instead of conf.verifyChecksum, because there are some      * cases when we may want to explicitly turn off checksum verification,      * such as when the caller has explicitly asked for a file to be opened      * without checksum verification.      */
DECL|field|verifyChecksum
specifier|private
name|boolean
name|verifyChecksum
init|=
literal|true
decl_stmt|;
comment|/**      * Whether or not we should try to use short circuit local reads.      */
DECL|field|shortCircuitLocalReads
specifier|private
name|boolean
name|shortCircuitLocalReads
init|=
literal|false
decl_stmt|;
comment|/**      * The name of the client using this BlockReader, for logging and      * debugging purposes.      */
DECL|field|clientName
specifier|private
name|String
name|clientName
init|=
literal|""
decl_stmt|;
comment|/**      * The DataNode on which this Block resides.      * You must set this.      */
DECL|field|datanodeID
specifier|private
name|DatanodeID
name|datanodeID
init|=
literal|null
decl_stmt|;
DECL|method|Params (Conf conf)
specifier|public
name|Params
parameter_list|(
name|Conf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|conf
operator|.
name|ioBufferSize
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Conf
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getPeer ()
specifier|public
name|Peer
name|getPeer
parameter_list|()
block|{
return|return
name|peer
return|;
block|}
DECL|method|setPeer (Peer peer)
specifier|public
name|Params
name|setPeer
parameter_list|(
name|Peer
name|peer
parameter_list|)
block|{
name|this
operator|.
name|peer
operator|=
name|peer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getFile ()
specifier|public
name|String
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
DECL|method|setFile (String file)
specifier|public
name|Params
name|setFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getBlock ()
specifier|public
name|ExtendedBlock
name|getBlock
parameter_list|()
block|{
return|return
name|block
return|;
block|}
DECL|method|setBlock (ExtendedBlock block)
specifier|public
name|Params
name|setBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
block|{
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getBlockToken ()
specifier|public
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|getBlockToken
parameter_list|()
block|{
return|return
name|blockToken
return|;
block|}
DECL|method|setBlockToken (Token<BlockTokenIdentifier> blockToken)
specifier|public
name|Params
name|setBlockToken
parameter_list|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
block|{
name|this
operator|.
name|blockToken
operator|=
name|blockToken
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getStartOffset ()
specifier|public
name|long
name|getStartOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
DECL|method|setStartOffset (long startOffset)
specifier|public
name|Params
name|setStartOffset
parameter_list|(
name|long
name|startOffset
parameter_list|)
block|{
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getLen ()
specifier|public
name|long
name|getLen
parameter_list|()
block|{
return|return
name|len
return|;
block|}
DECL|method|setLen (long len)
specifier|public
name|Params
name|setLen
parameter_list|(
name|long
name|len
parameter_list|)
block|{
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getBufferSize ()
specifier|public
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|bufferSize
return|;
block|}
DECL|method|setBufferSize (int bufferSize)
specifier|public
name|Params
name|setBufferSize
parameter_list|(
name|int
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getVerifyChecksum ()
specifier|public
name|boolean
name|getVerifyChecksum
parameter_list|()
block|{
return|return
name|verifyChecksum
return|;
block|}
DECL|method|setVerifyChecksum (boolean verifyChecksum)
specifier|public
name|Params
name|setVerifyChecksum
parameter_list|(
name|boolean
name|verifyChecksum
parameter_list|)
block|{
name|this
operator|.
name|verifyChecksum
operator|=
name|verifyChecksum
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getShortCircuitLocalReads ()
specifier|public
name|boolean
name|getShortCircuitLocalReads
parameter_list|()
block|{
return|return
name|shortCircuitLocalReads
return|;
block|}
DECL|method|setShortCircuitLocalReads (boolean on)
specifier|public
name|Params
name|setShortCircuitLocalReads
parameter_list|(
name|boolean
name|on
parameter_list|)
block|{
name|this
operator|.
name|shortCircuitLocalReads
operator|=
name|on
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getClientName ()
specifier|public
name|String
name|getClientName
parameter_list|()
block|{
return|return
name|clientName
return|;
block|}
DECL|method|setClientName (String clientName)
specifier|public
name|Params
name|setClientName
parameter_list|(
name|String
name|clientName
parameter_list|)
block|{
name|this
operator|.
name|clientName
operator|=
name|clientName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDatanodeID (DatanodeID datanodeID)
specifier|public
name|Params
name|setDatanodeID
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|)
block|{
name|this
operator|.
name|datanodeID
operator|=
name|datanodeID
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getDatanodeID ()
specifier|public
name|DatanodeID
name|getDatanodeID
parameter_list|()
block|{
return|return
name|datanodeID
return|;
block|}
block|}
comment|/**    * Create a new BlockReader specifically to satisfy a read.    * This method also sends the OP_READ_BLOCK request.    *     * @param params            The parameters    *    * @return                  New BlockReader instance    * @throws IOException      If there was an error creating the BlockReader    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|newBlockReader (Params params)
specifier|public
specifier|static
name|BlockReader
name|newBlockReader
parameter_list|(
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|params
operator|.
name|getPeer
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|params
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|params
operator|.
name|getDatanodeID
argument_list|()
argument_list|)
expr_stmt|;
comment|// First, let's set the read and write timeouts appropriately.
comment|// This will keep us from blocking forever if something goes wrong during
comment|// network communication.
name|Peer
name|peer
init|=
name|params
operator|.
name|getPeer
argument_list|()
decl_stmt|;
name|peer
operator|.
name|setReadTimeout
argument_list|(
name|params
operator|.
name|getConf
argument_list|()
operator|.
name|socketTimeout
argument_list|)
expr_stmt|;
name|peer
operator|.
name|setWriteTimeout
argument_list|(
name|HdfsServerConstants
operator|.
name|WRITE_TIMEOUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|getConf
argument_list|()
operator|.
name|useLegacyBlockReader
condition|)
block|{
comment|// The legacy BlockReader doesn't require that the Peers it uses
comment|// have associated ReadableByteChannels.  This makes it easier to use
comment|// with some older Socket classes like, say, SocksSocketImpl.
comment|//
comment|// TODO: create a wrapper class that makes channel-less sockets look like
comment|// they have a channel, so that we can finally remove the legacy
comment|// RemoteBlockReader.  See HDFS-2534.
return|return
name|RemoteBlockReader
operator|.
name|newBlockReader
argument_list|(
name|params
argument_list|)
return|;
block|}
else|else
block|{
comment|// The usual block reader.
return|return
name|RemoteBlockReader2
operator|.
name|newBlockReader
argument_list|(
name|params
argument_list|)
return|;
block|}
block|}
comment|/**    * File name to print when accessing a block directly (from servlets)    * @param s Address of the block location    * @param poolId Block pool ID of the block    * @param blockId Block ID of the block    * @return string that has a file name for debug purposes    */
DECL|method|getFileName (final InetSocketAddress s, final String poolId, final long blockId)
specifier|public
specifier|static
name|String
name|getFileName
parameter_list|(
specifier|final
name|InetSocketAddress
name|s
parameter_list|,
specifier|final
name|String
name|poolId
parameter_list|,
specifier|final
name|long
name|blockId
parameter_list|)
block|{
return|return
name|s
operator|.
name|toString
argument_list|()
operator|+
literal|":"
operator|+
name|poolId
operator|+
literal|":"
operator|+
name|blockId
return|;
block|}
block|}
end_class

end_unit

