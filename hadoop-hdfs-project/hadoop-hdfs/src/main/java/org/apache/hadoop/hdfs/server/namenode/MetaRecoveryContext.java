begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/** Context data for an ongoing NameNode metadata recovery process. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MetaRecoveryContext
specifier|public
specifier|final
class|class
name|MetaRecoveryContext
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetaRecoveryContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|FORCE_NONE
specifier|public
specifier|final
specifier|static
name|int
name|FORCE_NONE
init|=
literal|0
decl_stmt|;
DECL|field|FORCE_FIRST_CHOICE
specifier|public
specifier|final
specifier|static
name|int
name|FORCE_FIRST_CHOICE
init|=
literal|1
decl_stmt|;
DECL|field|FORCE_ALL
specifier|public
specifier|final
specifier|static
name|int
name|FORCE_ALL
init|=
literal|2
decl_stmt|;
DECL|field|force
specifier|private
name|int
name|force
decl_stmt|;
comment|/** Exception thrown when the user has requested processing to stop. */
DECL|class|RequestStopException
specifier|static
specifier|public
class|class
name|RequestStopException
extends|extends
name|IOException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|RequestStopException (String msg)
specifier|public
name|RequestStopException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|MetaRecoveryContext (int force)
specifier|public
name|MetaRecoveryContext
parameter_list|(
name|int
name|force
parameter_list|)
block|{
name|this
operator|.
name|force
operator|=
name|force
expr_stmt|;
block|}
comment|/**    * Display a prompt to the user and get his or her choice.    *      * @param prompt      The prompt to display    * @param default     First choice (will be taken if autoChooseDefault is    *                    true)    * @param choices     Other choies    *    * @return            The choice that was taken    * @throws IOException    */
DECL|method|ask (String prompt, String firstChoice, String... choices)
specifier|public
name|String
name|ask
parameter_list|(
name|String
name|prompt
parameter_list|,
name|String
name|firstChoice
parameter_list|,
name|String
modifier|...
name|choices
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|prompt
argument_list|)
expr_stmt|;
if|if
condition|(
name|force
operator|>
name|FORCE_NONE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"automatically choosing "
operator|+
name|firstChoice
argument_list|)
expr_stmt|;
return|return
name|firstChoice
return|;
block|}
name|StringBuilder
name|responseBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|c
init|=
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
operator|||
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
name|responseBuilder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|String
name|response
init|=
name|responseBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|equalsIgnoreCase
argument_list|(
name|firstChoice
argument_list|)
condition|)
return|return
name|firstChoice
return|;
for|for
control|(
name|String
name|c
range|:
name|choices
control|)
block|{
if|if
condition|(
name|response
operator|.
name|equalsIgnoreCase
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"I'm sorry, I cannot understand your response.\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|editLogLoaderPrompt (String prompt, MetaRecoveryContext recovery, String contStr)
specifier|public
specifier|static
name|void
name|editLogLoaderPrompt
parameter_list|(
name|String
name|prompt
parameter_list|,
name|MetaRecoveryContext
name|recovery
parameter_list|,
name|String
name|contStr
parameter_list|)
throws|throws
name|IOException
throws|,
name|RequestStopException
block|{
if|if
condition|(
name|recovery
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|prompt
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|prompt
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
name|recovery
operator|.
name|ask
argument_list|(
literal|"\nEnter 'c' to continue, "
operator|+
name|contStr
operator|+
literal|"\n"
operator|+
literal|"Enter 's' to stop reading the edit log here, abandoning any later "
operator|+
literal|"edits\n"
operator|+
literal|"Enter 'q' to quit without saving\n"
operator|+
literal|"Enter 'a' to always select the first choice in the future "
operator|+
literal|"without prompting. "
operator|+
literal|"(c/s/q/a)\n"
argument_list|,
literal|"c"
argument_list|,
literal|"s"
argument_list|,
literal|"q"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Continuing"
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|answer
operator|.
name|equals
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RequestStopException
argument_list|(
literal|"user requested stop"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|.
name|equals
argument_list|(
literal|"q"
argument_list|)
condition|)
block|{
name|recovery
operator|.
name|quit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|recovery
operator|.
name|setForce
argument_list|(
name|FORCE_FIRST_CHOICE
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/** Log a message and quit */
DECL|method|quit ()
specifier|public
name|void
name|quit
parameter_list|()
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exiting on user request."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getForce ()
specifier|public
name|int
name|getForce
parameter_list|()
block|{
return|return
name|this
operator|.
name|force
return|;
block|}
DECL|method|setForce (int force)
specifier|public
name|void
name|setForce
parameter_list|(
name|int
name|force
parameter_list|)
block|{
name|this
operator|.
name|force
operator|=
name|force
expr_stmt|;
block|}
block|}
end_class

end_unit

