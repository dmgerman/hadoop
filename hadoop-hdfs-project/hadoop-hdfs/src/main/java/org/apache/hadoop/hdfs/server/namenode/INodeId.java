begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * An id which uniquely identifies an inode  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|INodeId
class|class
name|INodeId
implements|implements
name|Comparable
argument_list|<
name|INodeId
argument_list|>
block|{
comment|/**    * The last reserved inode id. Reserve id 1 to 1000 for potential future    * usage. The id won't be recycled and is not expected to wrap around in a    * very long time. Root inode id will be 1001.    */
DECL|field|LAST_RESERVED_ID
specifier|public
specifier|static
specifier|final
name|long
name|LAST_RESERVED_ID
init|=
literal|1000L
decl_stmt|;
comment|/**    * The inode id validation of lease check will be skipped when the request    * uses GRANDFATHER_INODE_ID for backward compatibility.    */
DECL|field|GRANDFATHER_INODE_ID
specifier|public
specifier|static
specifier|final
name|long
name|GRANDFATHER_INODE_ID
init|=
literal|0
decl_stmt|;
DECL|field|lastInodeId
specifier|private
name|AtomicLong
name|lastInodeId
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/**    * Create a new instance, initialized to LAST_RESERVED_ID.    */
DECL|method|INodeId ()
name|INodeId
parameter_list|()
block|{
name|lastInodeId
operator|.
name|set
argument_list|(
name|INodeId
operator|.
name|LAST_RESERVED_ID
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the last allocated inode id when fsimage is loaded or editlog is    * applied.    * @throws IOException    */
DECL|method|resetLastInodeId (long newValue)
name|void
name|resetLastInodeId
parameter_list|(
name|long
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|newValue
operator|<
name|getLastInodeId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't reset lastInodeId to be less than its current value "
operator|+
name|getLastInodeId
argument_list|()
operator|+
literal|", newValue="
operator|+
name|newValue
argument_list|)
throw|;
block|}
name|lastInodeId
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
DECL|method|resetLastInodeIdWithoutChecking (long newValue)
name|void
name|resetLastInodeIdWithoutChecking
parameter_list|(
name|long
name|newValue
parameter_list|)
block|{
name|lastInodeId
operator|.
name|set
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
DECL|method|getLastInodeId ()
name|long
name|getLastInodeId
parameter_list|()
block|{
return|return
name|lastInodeId
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * First increment the counter and then get the id.    */
DECL|method|allocateNewInodeId ()
name|long
name|allocateNewInodeId
parameter_list|()
block|{
return|return
name|lastInodeId
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// Comparable
DECL|method|compareTo (INodeId that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|INodeId
name|that
parameter_list|)
block|{
name|long
name|id1
init|=
name|this
operator|.
name|getLastInodeId
argument_list|()
decl_stmt|;
name|long
name|id2
init|=
name|that
operator|.
name|getLastInodeId
argument_list|()
decl_stmt|;
return|return
name|id1
operator|<
name|id2
condition|?
operator|-
literal|1
else|:
name|id1
operator|>
name|id2
condition|?
literal|1
else|:
literal|0
return|;
block|}
annotation|@
name|Override
comment|// Object
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|INodeId
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|INodeId
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
comment|// Object
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|long
name|id
init|=
name|getLastInodeId
argument_list|()
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|id
operator|^
operator|(
name|id
operator|>>>
literal|32
operator|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

