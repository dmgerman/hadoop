begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DatanodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|CloseableReferenceCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * The underlying volume used to store replica.  *   * It uses the {@link FsDatasetImpl} object for synchronization.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|class|FsVolumeImpl
specifier|public
class|class
name|FsVolumeImpl
implements|implements
name|FsVolumeSpi
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FsVolumeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dataset
specifier|private
specifier|final
name|FsDatasetImpl
name|dataset
decl_stmt|;
DECL|field|storageID
specifier|private
specifier|final
name|String
name|storageID
decl_stmt|;
DECL|field|storageType
specifier|private
specifier|final
name|StorageType
name|storageType
decl_stmt|;
DECL|field|bpSlices
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BlockPoolSlice
argument_list|>
name|bpSlices
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|BlockPoolSlice
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|currentDir
specifier|private
specifier|final
name|File
name|currentDir
decl_stmt|;
comment|//<StorageDirectory>/current
DECL|field|usage
specifier|private
specifier|final
name|DF
name|usage
decl_stmt|;
DECL|field|reserved
specifier|private
specifier|final
name|long
name|reserved
decl_stmt|;
DECL|field|reference
specifier|private
name|CloseableReferenceCount
name|reference
init|=
operator|new
name|CloseableReferenceCount
argument_list|()
decl_stmt|;
comment|// Disk space reserved for blocks (RBW or Re-replicating) open for write.
DECL|field|reservedForReplicas
specifier|private
name|AtomicLong
name|reservedForReplicas
decl_stmt|;
DECL|field|recentReserved
specifier|private
name|long
name|recentReserved
init|=
literal|0
decl_stmt|;
comment|// Capacity configured. This is useful when we want to
comment|// limit the visible capacity for tests. If negative, then we just
comment|// query from the filesystem.
DECL|field|configuredCapacity
specifier|protected
specifier|volatile
name|long
name|configuredCapacity
decl_stmt|;
comment|/**    * Per-volume worker pool that processes new blocks to cache.    * The maximum number of workers per volume is bounded (configurable via    * dfs.datanode.fsdatasetcache.max.threads.per.volume) to limit resource    * contention.    */
DECL|field|cacheExecutor
specifier|protected
name|ThreadPoolExecutor
name|cacheExecutor
decl_stmt|;
DECL|method|FsVolumeImpl (FsDatasetImpl dataset, String storageID, File currentDir, Configuration conf, StorageType storageType)
name|FsVolumeImpl
parameter_list|(
name|FsDatasetImpl
name|dataset
parameter_list|,
name|String
name|storageID
parameter_list|,
name|File
name|currentDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dataset
operator|=
name|dataset
expr_stmt|;
name|this
operator|.
name|storageID
operator|=
name|storageID
expr_stmt|;
name|this
operator|.
name|reserved
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|reservedForReplicas
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentDir
operator|=
name|currentDir
expr_stmt|;
name|File
name|parent
init|=
name|currentDir
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|this
operator|.
name|usage
operator|=
operator|new
name|DF
argument_list|(
name|parent
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|storageType
operator|=
name|storageType
expr_stmt|;
name|this
operator|.
name|configuredCapacity
operator|=
operator|-
literal|1
expr_stmt|;
name|cacheExecutor
operator|=
name|initializeCacheExecutor
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeCacheExecutor (File parent)
specifier|protected
name|ThreadPoolExecutor
name|initializeCacheExecutor
parameter_list|(
name|File
name|parent
parameter_list|)
block|{
if|if
condition|(
name|storageType
operator|.
name|isTransient
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|dataset
operator|.
name|datanode
operator|==
literal|null
condition|)
block|{
comment|// FsVolumeImpl is used in test.
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|maxNumThreads
init|=
name|dataset
operator|.
name|datanode
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FSDATASETCACHE_MAX_THREADS_PER_VOLUME_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FSDATASETCACHE_MAX_THREADS_PER_VOLUME_DEFAULT
argument_list|)
decl_stmt|;
name|ThreadFactory
name|workerFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"FsVolumeImplWorker-"
operator|+
name|parent
operator|.
name|toString
argument_list|()
operator|+
literal|"-%d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|maxNumThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|workerFactory
argument_list|)
decl_stmt|;
name|executor
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
DECL|method|printReferenceTraceInfo (String op)
specifier|private
name|void
name|printReferenceTraceInfo
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|StackTraceElement
index|[]
name|stack
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|ste
range|:
name|stack
control|)
block|{
switch|switch
condition|(
name|ste
operator|.
name|getMethodName
argument_list|()
condition|)
block|{
case|case
literal|"getDfsUsed"
case|:
case|case
literal|"getBlockPoolUsed"
case|:
case|case
literal|"getAvailable"
case|:
case|case
literal|"getVolumeMap"
case|:
return|return;
default|default:
break|break;
block|}
block|}
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Reference count: "
operator|+
name|op
operator|+
literal|" "
operator|+
name|this
operator|+
literal|": "
operator|+
name|this
operator|.
name|reference
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|trace
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increase the reference count. The caller must increase the reference count    * before issuing IOs.    *    * @throws IOException if the volume is already closed.    */
DECL|method|reference ()
specifier|private
name|void
name|reference
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
name|this
operator|.
name|reference
operator|.
name|reference
argument_list|()
expr_stmt|;
if|if
condition|(
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|printReferenceTraceInfo
argument_list|(
literal|"incr"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Decrease the reference count.    */
DECL|method|unreference ()
specifier|private
name|void
name|unreference
parameter_list|()
block|{
if|if
condition|(
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|printReferenceTraceInfo
argument_list|(
literal|"desc"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|reference
operator|.
name|getReferenceCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Decrease reference count<= 0 on "
operator|+
name|this
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|checkReference
argument_list|()
expr_stmt|;
name|this
operator|.
name|reference
operator|.
name|unreference
argument_list|()
expr_stmt|;
block|}
DECL|class|FsVolumeReferenceImpl
specifier|private
specifier|static
class|class
name|FsVolumeReferenceImpl
implements|implements
name|FsVolumeReference
block|{
DECL|field|volume
specifier|private
name|FsVolumeImpl
name|volume
decl_stmt|;
DECL|method|FsVolumeReferenceImpl (FsVolumeImpl volume)
name|FsVolumeReferenceImpl
parameter_list|(
name|FsVolumeImpl
name|volume
parameter_list|)
throws|throws
name|ClosedChannelException
block|{
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
name|volume
operator|.
name|reference
argument_list|()
expr_stmt|;
block|}
comment|/**      * Decreases the reference count.      * @throws IOException it never throws IOException.      */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|volume
operator|!=
literal|null
condition|)
block|{
name|volume
operator|.
name|unreference
argument_list|()
expr_stmt|;
name|volume
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getVolume ()
specifier|public
name|FsVolumeSpi
name|getVolume
parameter_list|()
block|{
return|return
name|this
operator|.
name|volume
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|obtainReference ()
specifier|public
name|FsVolumeReference
name|obtainReference
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
return|return
operator|new
name|FsVolumeReferenceImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|checkReference ()
specifier|private
name|void
name|checkReference
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|reference
operator|.
name|getReferenceCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close this volume and wait all other threads to release the reference count    * on this volume.    * @throws IOException if the volume is closed or the waiting is interrupted.    */
DECL|method|closeAndWait ()
name|void
name|closeAndWait
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|reference
operator|.
name|setClosed
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedChannelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The volume has already closed."
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|int
name|SLEEP_MILLIS
init|=
literal|500
decl_stmt|;
while|while
condition|(
name|this
operator|.
name|reference
operator|.
name|getReferenceCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The reference count for %s is %d, wait to be 0."
argument_list|,
name|this
argument_list|,
name|reference
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_MILLIS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getCurrentDir ()
name|File
name|getCurrentDir
parameter_list|()
block|{
return|return
name|currentDir
return|;
block|}
DECL|method|getRbwDir (String bpid)
name|File
name|getRbwDir
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getRbwDir
argument_list|()
return|;
block|}
DECL|method|getLazyPersistDir (String bpid)
name|File
name|getLazyPersistDir
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getLazypersistDir
argument_list|()
return|;
block|}
DECL|method|getTmpDir (String bpid)
name|File
name|getTmpDir
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getTmpDir
argument_list|()
return|;
block|}
DECL|method|onBlockFileDeletion (String bpid, long value)
name|void
name|onBlockFileDeletion
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|decDfsUsed
argument_list|(
name|bpid
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTransientStorage
argument_list|()
condition|)
block|{
name|dataset
operator|.
name|releaseLockedMemory
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onMetaFileDeletion (String bpid, long value)
name|void
name|onMetaFileDeletion
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|decDfsUsed
argument_list|(
name|bpid
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|decDfsUsed (String bpid, long value)
specifier|private
name|void
name|decDfsUsed
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|dataset
init|)
block|{
name|BlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|bp
operator|.
name|decDfsUsed
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|incDfsUsed (String bpid, long value)
name|void
name|incDfsUsed
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|dataset
init|)
block|{
name|BlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|bp
operator|.
name|incDfsUsed
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDfsUsed ()
specifier|public
name|long
name|getDfsUsed
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|dfsUsed
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|dataset
init|)
block|{
for|for
control|(
name|BlockPoolSlice
name|s
range|:
name|bpSlices
operator|.
name|values
argument_list|()
control|)
block|{
name|dfsUsed
operator|+=
name|s
operator|.
name|getDfsUsed
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dfsUsed
return|;
block|}
DECL|method|getBlockPoolUsed (String bpid)
name|long
name|getBlockPoolUsed
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getDfsUsed
argument_list|()
return|;
block|}
comment|/**    * Return either the configured capacity of the file system if configured; or    * the capacity of the file system excluding space reserved for non-HDFS.    *     * @return the unreserved number of bytes left in this filesystem. May be    *         zero.    */
annotation|@
name|VisibleForTesting
DECL|method|getCapacity ()
specifier|public
name|long
name|getCapacity
parameter_list|()
block|{
if|if
condition|(
name|configuredCapacity
operator|<
literal|0
condition|)
block|{
name|long
name|remaining
init|=
name|usage
operator|.
name|getCapacity
argument_list|()
operator|-
name|reserved
decl_stmt|;
return|return
name|remaining
operator|>
literal|0
condition|?
name|remaining
else|:
literal|0
return|;
block|}
return|return
name|configuredCapacity
return|;
block|}
comment|/**    * This function MUST NOT be used outside of tests.    *    * @param capacity    */
annotation|@
name|VisibleForTesting
DECL|method|setCapacityForTesting (long capacity)
specifier|public
name|void
name|setCapacityForTesting
parameter_list|(
name|long
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|configuredCapacity
operator|=
name|capacity
expr_stmt|;
block|}
comment|/*    * Calculate the available space of the filesystem, excluding space reserved    * for non-HDFS and space reserved for RBW    *     * @return the available number of bytes left in this filesystem. May be zero.    */
annotation|@
name|Override
DECL|method|getAvailable ()
specifier|public
name|long
name|getAvailable
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|remaining
init|=
name|getCapacity
argument_list|()
operator|-
name|getDfsUsed
argument_list|()
operator|-
name|reservedForReplicas
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|available
init|=
name|usage
operator|.
name|getAvailable
argument_list|()
operator|-
name|reserved
operator|-
name|reservedForReplicas
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|>
name|available
condition|)
block|{
name|remaining
operator|=
name|available
expr_stmt|;
block|}
return|return
operator|(
name|remaining
operator|>
literal|0
operator|)
condition|?
name|remaining
else|:
literal|0
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getReservedForReplicas ()
specifier|public
name|long
name|getReservedForReplicas
parameter_list|()
block|{
return|return
name|reservedForReplicas
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRecentReserved ()
name|long
name|getRecentReserved
parameter_list|()
block|{
return|return
name|recentReserved
return|;
block|}
DECL|method|getReserved ()
name|long
name|getReserved
parameter_list|()
block|{
return|return
name|reserved
return|;
block|}
DECL|method|getBlockPoolSlice (String bpid)
name|BlockPoolSlice
name|getBlockPoolSlice
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"block pool "
operator|+
name|bpid
operator|+
literal|" is not found"
argument_list|)
throw|;
block|}
return|return
name|bp
return|;
block|}
annotation|@
name|Override
DECL|method|getBasePath ()
specifier|public
name|String
name|getBasePath
parameter_list|()
block|{
return|return
name|currentDir
operator|.
name|getParent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isTransientStorage ()
specifier|public
name|boolean
name|isTransientStorage
parameter_list|()
block|{
return|return
name|storageType
operator|.
name|isTransient
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPath (String bpid)
specifier|public
name|String
name|getPath
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getDirectory
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getFinalizedDir (String bpid)
specifier|public
name|File
name|getFinalizedDir
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getFinalizedDir
argument_list|()
return|;
block|}
comment|/**    * Make a deep copy of the list of currently active BPIDs    */
annotation|@
name|Override
DECL|method|getBlockPoolList ()
specifier|public
name|String
index|[]
name|getBlockPoolList
parameter_list|()
block|{
return|return
name|bpSlices
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|bpSlices
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Temporary files. They get moved to the finalized block directory when    * the block is finalized.    */
DECL|method|createTmpFile (String bpid, Block b)
name|File
name|createTmpFile
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Block
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkReference
argument_list|()
expr_stmt|;
name|reserveSpaceForReplica
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|createTmpFile
argument_list|(
name|b
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|releaseReservedSpace
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|reserveSpaceForReplica (long bytesToReserve)
specifier|public
name|void
name|reserveSpaceForReplica
parameter_list|(
name|long
name|bytesToReserve
parameter_list|)
block|{
if|if
condition|(
name|bytesToReserve
operator|!=
literal|0
condition|)
block|{
name|reservedForReplicas
operator|.
name|addAndGet
argument_list|(
name|bytesToReserve
argument_list|)
expr_stmt|;
name|recentReserved
operator|=
name|bytesToReserve
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|releaseReservedSpace (long bytesToRelease)
specifier|public
name|void
name|releaseReservedSpace
parameter_list|(
name|long
name|bytesToRelease
parameter_list|)
block|{
if|if
condition|(
name|bytesToRelease
operator|!=
literal|0
condition|)
block|{
name|long
name|oldReservation
decl_stmt|,
name|newReservation
decl_stmt|;
do|do
block|{
name|oldReservation
operator|=
name|reservedForReplicas
operator|.
name|get
argument_list|()
expr_stmt|;
name|newReservation
operator|=
name|oldReservation
operator|-
name|bytesToRelease
expr_stmt|;
if|if
condition|(
name|newReservation
operator|<
literal|0
condition|)
block|{
comment|// Failsafe, this should never occur in practice, but if it does we
comment|// don't want to start advertising more space than we have available.
name|newReservation
operator|=
literal|0
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|reservedForReplicas
operator|.
name|compareAndSet
argument_list|(
name|oldReservation
argument_list|,
name|newReservation
argument_list|)
condition|)
do|;
block|}
block|}
annotation|@
name|Override
DECL|method|releaseLockedMemory (long bytesToRelease)
specifier|public
name|void
name|releaseLockedMemory
parameter_list|(
name|long
name|bytesToRelease
parameter_list|)
block|{
if|if
condition|(
name|isTransientStorage
argument_list|()
condition|)
block|{
name|dataset
operator|.
name|releaseLockedMemory
argument_list|(
name|bytesToRelease
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enum|SubdirFilter
specifier|private
enum|enum
name|SubdirFilter
implements|implements
name|FilenameFilter
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|accept (File dir, String name)
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|startsWith
argument_list|(
literal|"subdir"
argument_list|)
return|;
block|}
block|}
DECL|enum|BlockFileFilter
specifier|private
enum|enum
name|BlockFileFilter
implements|implements
name|FilenameFilter
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|accept (File dir, String name)
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|!
name|name
operator|.
name|endsWith
argument_list|(
literal|".meta"
argument_list|)
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
name|Block
operator|.
name|BLOCK_FILE_PREFIX
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|nextSorted (List<String> arr, String prev)
specifier|public
specifier|static
name|String
name|nextSorted
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|arr
parameter_list|,
name|String
name|prev
parameter_list|)
block|{
name|int
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|res
operator|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|prev
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|<
literal|0
condition|)
block|{
name|res
operator|=
operator|-
literal|1
operator|-
name|res
expr_stmt|;
block|}
else|else
block|{
name|res
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|res
operator|>=
name|arr
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|arr
operator|.
name|get
argument_list|(
name|res
argument_list|)
return|;
block|}
DECL|class|BlockIteratorState
specifier|private
specifier|static
class|class
name|BlockIteratorState
block|{
DECL|method|BlockIteratorState ()
name|BlockIteratorState
parameter_list|()
block|{
name|lastSavedMs
operator|=
name|iterStartMs
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|curFinalizedDir
operator|=
literal|null
expr_stmt|;
name|curFinalizedSubDir
operator|=
literal|null
expr_stmt|;
name|curEntry
operator|=
literal|null
expr_stmt|;
name|atEnd
operator|=
literal|false
expr_stmt|;
block|}
comment|// The wall-clock ms since the epoch at which this iterator was last saved.
annotation|@
name|JsonProperty
DECL|field|lastSavedMs
specifier|private
name|long
name|lastSavedMs
decl_stmt|;
comment|// The wall-clock ms since the epoch at which this iterator was created.
annotation|@
name|JsonProperty
DECL|field|iterStartMs
specifier|private
name|long
name|iterStartMs
decl_stmt|;
annotation|@
name|JsonProperty
DECL|field|curFinalizedDir
specifier|private
name|String
name|curFinalizedDir
decl_stmt|;
annotation|@
name|JsonProperty
DECL|field|curFinalizedSubDir
specifier|private
name|String
name|curFinalizedSubDir
decl_stmt|;
annotation|@
name|JsonProperty
DECL|field|curEntry
specifier|private
name|String
name|curEntry
decl_stmt|;
annotation|@
name|JsonProperty
DECL|field|atEnd
specifier|private
name|boolean
name|atEnd
decl_stmt|;
block|}
comment|/**    * A BlockIterator implementation for FsVolumeImpl.    */
DECL|class|BlockIteratorImpl
specifier|private
class|class
name|BlockIteratorImpl
implements|implements
name|FsVolumeSpi
operator|.
name|BlockIterator
block|{
DECL|field|bpidDir
specifier|private
specifier|final
name|File
name|bpidDir
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|bpid
specifier|private
specifier|final
name|String
name|bpid
decl_stmt|;
DECL|field|maxStalenessMs
specifier|private
name|long
name|maxStalenessMs
init|=
literal|0
decl_stmt|;
DECL|field|cache
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|cache
decl_stmt|;
DECL|field|cacheMs
specifier|private
name|long
name|cacheMs
decl_stmt|;
DECL|field|state
specifier|private
name|BlockIteratorState
name|state
decl_stmt|;
DECL|method|BlockIteratorImpl (String bpid, String name)
name|BlockIteratorImpl
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|bpidDir
operator|=
operator|new
name|File
argument_list|(
name|currentDir
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
name|rewind
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the next subdirectory within the block pool slice.      *      * @return         The next subdirectory within the block pool slice, or      *                   null if there are no more.      */
DECL|method|getNextSubDir (String prev, File dir)
specifier|private
name|String
name|getNextSubDir
parameter_list|(
name|String
name|prev
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|IOUtils
operator|.
name|listDirectory
argument_list|(
name|dir
argument_list|,
name|SubdirFilter
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|cache
operator|=
literal|null
expr_stmt|;
name|cacheMs
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getNextSubDir({}, {}): no subdirectories found in {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|String
name|nextSubDir
init|=
name|nextSorted
argument_list|(
name|children
argument_list|,
name|prev
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextSubDir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getNextSubDir({}, {}): no more subdirectories found in {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getNextSubDir({}, {}): picking next subdirectory {} "
operator|+
literal|"within {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|nextSubDir
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nextSubDir
return|;
block|}
DECL|method|getNextFinalizedDir ()
specifier|private
name|String
name|getNextFinalizedDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|bpidDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"current"
argument_list|,
literal|"finalized"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
return|return
name|getNextSubDir
argument_list|(
name|state
operator|.
name|curFinalizedDir
argument_list|,
name|dir
argument_list|)
return|;
block|}
DECL|method|getNextFinalizedSubDir ()
specifier|private
name|String
name|getNextFinalizedSubDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|curFinalizedDir
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|bpidDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"current"
argument_list|,
literal|"finalized"
argument_list|,
name|state
operator|.
name|curFinalizedDir
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
return|return
name|getNextSubDir
argument_list|(
name|state
operator|.
name|curFinalizedSubDir
argument_list|,
name|dir
argument_list|)
return|;
block|}
DECL|method|getSubdirEntries ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getSubdirEntries
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|curFinalizedSubDir
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|// There are no entries in the null subdir.
block|}
name|long
name|now
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|long
name|delta
init|=
name|now
operator|-
name|cacheMs
decl_stmt|;
if|if
condition|(
name|delta
operator|<
name|maxStalenessMs
condition|)
block|{
return|return
name|cache
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getSubdirEntries({}, {}): purging entries cache for {} "
operator|+
literal|"after {} ms."
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|state
operator|.
name|curFinalizedSubDir
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|cache
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|File
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|bpidDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"current"
argument_list|,
literal|"finalized"
argument_list|,
name|state
operator|.
name|curFinalizedDir
argument_list|,
name|state
operator|.
name|curFinalizedSubDir
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|IOUtils
operator|.
name|listDirectory
argument_list|(
name|dir
argument_list|,
name|BlockFileFilter
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|entries
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getSubdirEntries({}, {}): no entries found in {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getSubdirEntries({}, {}): listed {} entries in {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cache
operator|=
name|entries
expr_stmt|;
name|cacheMs
operator|=
name|now
expr_stmt|;
return|return
name|cache
return|;
block|}
comment|/**      * Get the next block.<p/>      *      * Each volume has a hierarchical structure.<p/>      *      *<code>      * BPID B0      *   finalized/      *     subdir0      *       subdir0      *         blk_000      *         blk_001      *       ...      *     subdir1      *       subdir0      *         ...      *   rbw/      *</code>      *      * When we run out of entries at one level of the structure, we search      * progressively higher levels.  For example, when we run out of blk_      * entries in a subdirectory, we search for the next subdirectory.      * And so on.      */
annotation|@
name|Override
DECL|method|nextBlock ()
specifier|public
name|ExtendedBlock
name|nextBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|atEnd
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|getSubdirEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
name|state
operator|.
name|curEntry
operator|=
name|nextSorted
argument_list|(
name|entries
argument_list|,
name|state
operator|.
name|curEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|curEntry
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"nextBlock({}, {}): advancing from {} to next "
operator|+
literal|"subdirectory."
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|state
operator|.
name|curFinalizedSubDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
name|Block
operator|.
name|filename2id
argument_list|(
name|state
operator|.
name|curEntry
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"nextBlock({}, {}): advancing to {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|block
argument_list|)
expr_stmt|;
return|return
name|block
return|;
block|}
block|}
name|state
operator|.
name|curFinalizedSubDir
operator|=
name|getNextFinalizedSubDir
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|curFinalizedSubDir
operator|==
literal|null
condition|)
block|{
name|state
operator|.
name|curFinalizedDir
operator|=
name|getNextFinalizedDir
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|curFinalizedDir
operator|==
literal|null
condition|)
block|{
name|state
operator|.
name|atEnd
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|state
operator|.
name|atEnd
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"nextBlock({}, {}): I/O error"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|atEnd ()
specifier|public
name|boolean
name|atEnd
parameter_list|()
block|{
return|return
name|state
operator|.
name|atEnd
return|;
block|}
annotation|@
name|Override
DECL|method|rewind ()
specifier|public
name|void
name|rewind
parameter_list|()
block|{
name|cache
operator|=
literal|null
expr_stmt|;
name|cacheMs
operator|=
literal|0
expr_stmt|;
name|state
operator|=
operator|new
name|BlockIteratorState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|save ()
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|IOException
block|{
name|state
operator|.
name|lastSavedMs
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|getTempSaveFile
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
init|)
block|{
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValue
argument_list|(
name|writer
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|getTempSaveFile
argument_list|()
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"save({}, {}): error deleting temporary file."
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Files
operator|.
name|move
argument_list|(
name|getTempSaveFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|getSaveFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"save({}, {}): saved {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|load ()
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|File
name|file
init|=
name|getSaveFile
argument_list|()
decl_stmt|;
name|this
operator|.
name|state
operator|=
name|mapper
operator|.
name|reader
argument_list|(
name|BlockIteratorState
operator|.
name|class
argument_list|)
operator|.
name|readValue
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"load({}, {}): loaded iterator {} from {}: {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|name
argument_list|,
name|file
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSaveFile ()
name|File
name|getSaveFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|bpidDir
argument_list|,
name|name
operator|+
literal|".cursor"
argument_list|)
return|;
block|}
DECL|method|getTempSaveFile ()
name|File
name|getTempSaveFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|bpidDir
argument_list|,
name|name
operator|+
literal|".cursor.tmp"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setMaxStalenessMs (long maxStalenessMs)
specifier|public
name|void
name|setMaxStalenessMs
parameter_list|(
name|long
name|maxStalenessMs
parameter_list|)
block|{
name|this
operator|.
name|maxStalenessMs
operator|=
name|maxStalenessMs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// No action needed for this volume implementation.
block|}
annotation|@
name|Override
DECL|method|getIterStartMs ()
specifier|public
name|long
name|getIterStartMs
parameter_list|()
block|{
return|return
name|state
operator|.
name|iterStartMs
return|;
block|}
annotation|@
name|Override
DECL|method|getLastSavedMs ()
specifier|public
name|long
name|getLastSavedMs
parameter_list|()
block|{
return|return
name|state
operator|.
name|lastSavedMs
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|bpid
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|newBlockIterator (String bpid, String name)
specifier|public
name|BlockIterator
name|newBlockIterator
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|BlockIteratorImpl
argument_list|(
name|bpid
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadBlockIterator (String bpid, String name)
specifier|public
name|BlockIterator
name|loadBlockIterator
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockIteratorImpl
name|iter
init|=
operator|new
name|BlockIteratorImpl
argument_list|(
name|bpid
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|iter
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|iter
return|;
block|}
annotation|@
name|Override
DECL|method|getDataset ()
specifier|public
name|FsDatasetSpi
name|getDataset
parameter_list|()
block|{
return|return
name|dataset
return|;
block|}
comment|/**    * RBW files. They get moved to the finalized block directory when    * the block is finalized.    */
DECL|method|createRbwFile (String bpid, Block b)
name|File
name|createRbwFile
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Block
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkReference
argument_list|()
expr_stmt|;
name|reserveSpaceForReplica
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|createRbwFile
argument_list|(
name|b
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|releaseReservedSpace
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
comment|/**    *    * @param bytesReserved Space that was reserved during    *     block creation. Now that the block is being finalized we    *     can free up this space.    * @return    * @throws IOException    */
DECL|method|addFinalizedBlock (String bpid, Block b, File f, long bytesReserved)
name|File
name|addFinalizedBlock
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Block
name|b
parameter_list|,
name|File
name|f
parameter_list|,
name|long
name|bytesReserved
parameter_list|)
throws|throws
name|IOException
block|{
name|releaseReservedSpace
argument_list|(
name|bytesReserved
argument_list|)
expr_stmt|;
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|addFinalizedBlock
argument_list|(
name|b
argument_list|,
name|f
argument_list|)
return|;
block|}
DECL|method|getCacheExecutor ()
name|Executor
name|getCacheExecutor
parameter_list|()
block|{
return|return
name|cacheExecutor
return|;
block|}
DECL|method|checkDirs ()
name|void
name|checkDirs
parameter_list|()
throws|throws
name|DiskErrorException
block|{
comment|// TODO:FEDERATION valid synchronization
for|for
control|(
name|BlockPoolSlice
name|s
range|:
name|bpSlices
operator|.
name|values
argument_list|()
control|)
block|{
name|s
operator|.
name|checkDirs
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getVolumeMap (ReplicaMap volumeMap, final RamDiskReplicaTracker ramDiskReplicaMap)
name|void
name|getVolumeMap
parameter_list|(
name|ReplicaMap
name|volumeMap
parameter_list|,
specifier|final
name|RamDiskReplicaTracker
name|ramDiskReplicaMap
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|BlockPoolSlice
name|s
range|:
name|bpSlices
operator|.
name|values
argument_list|()
control|)
block|{
name|s
operator|.
name|getVolumeMap
argument_list|(
name|volumeMap
argument_list|,
name|ramDiskReplicaMap
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getVolumeMap (String bpid, ReplicaMap volumeMap, final RamDiskReplicaTracker ramDiskReplicaMap)
name|void
name|getVolumeMap
parameter_list|(
name|String
name|bpid
parameter_list|,
name|ReplicaMap
name|volumeMap
parameter_list|,
specifier|final
name|RamDiskReplicaTracker
name|ramDiskReplicaMap
parameter_list|)
throws|throws
name|IOException
block|{
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getVolumeMap
argument_list|(
name|volumeMap
argument_list|,
name|ramDiskReplicaMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|currentDir
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cacheExecutor
operator|!=
literal|null
condition|)
block|{
name|cacheExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|BlockPoolSlice
argument_list|>
argument_list|>
name|set
init|=
name|bpSlices
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|BlockPoolSlice
argument_list|>
name|entry
range|:
name|set
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|shutdown
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addBlockPool (String bpid, Configuration conf)
name|void
name|addBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|addBlockPool
argument_list|(
name|bpid
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|addBlockPool (String bpid, Configuration conf, Timer timer)
name|void
name|addBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Timer
name|timer
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|bpdir
init|=
operator|new
name|File
argument_list|(
name|currentDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|BlockPoolSlice
name|bp
decl_stmt|;
if|if
condition|(
name|timer
operator|==
literal|null
condition|)
block|{
name|bp
operator|=
operator|new
name|BlockPoolSlice
argument_list|(
name|bpid
argument_list|,
name|this
argument_list|,
name|bpdir
argument_list|,
name|conf
argument_list|,
operator|new
name|Timer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bp
operator|=
operator|new
name|BlockPoolSlice
argument_list|(
name|bpid
argument_list|,
name|this
argument_list|,
name|bpdir
argument_list|,
name|conf
argument_list|,
name|timer
argument_list|)
expr_stmt|;
block|}
name|bpSlices
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|bp
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdownBlockPool (String bpid, BlockListAsLongs blocksListsAsLongs)
name|void
name|shutdownBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|BlockListAsLongs
name|blocksListsAsLongs
parameter_list|)
block|{
name|BlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|bp
operator|.
name|shutdown
argument_list|(
name|blocksListsAsLongs
argument_list|)
expr_stmt|;
block|}
name|bpSlices
operator|.
name|remove
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
block|}
DECL|method|isBPDirEmpty (String bpid)
name|boolean
name|isBPDirEmpty
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|volumeCurrentDir
init|=
name|this
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|bpDir
init|=
operator|new
name|File
argument_list|(
name|volumeCurrentDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|File
name|bpCurrentDir
init|=
operator|new
name|File
argument_list|(
name|bpDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
decl_stmt|;
name|File
name|finalizedDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_FINALIZED
argument_list|)
decl_stmt|;
name|File
name|rbwDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_RBW
argument_list|)
decl_stmt|;
if|if
condition|(
name|finalizedDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|DatanodeUtil
operator|.
name|dirNoFilesRecursive
argument_list|(
name|finalizedDir
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|rbwDir
operator|.
name|exists
argument_list|()
operator|&&
name|FileUtil
operator|.
name|list
argument_list|(
name|rbwDir
argument_list|)
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|deleteBPDirectories (String bpid, boolean force)
name|void
name|deleteBPDirectories
parameter_list|(
name|String
name|bpid
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|volumeCurrentDir
init|=
name|this
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|bpDir
init|=
operator|new
name|File
argument_list|(
name|volumeCurrentDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bpDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// nothing to be deleted
return|return;
block|}
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|bpDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_TMP
argument_list|)
decl_stmt|;
name|File
name|bpCurrentDir
init|=
operator|new
name|File
argument_list|(
name|bpDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
decl_stmt|;
name|File
name|finalizedDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_FINALIZED
argument_list|)
decl_stmt|;
name|File
name|lazypersistDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_LAZY_PERSIST
argument_list|)
decl_stmt|;
name|File
name|rbwDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_RBW
argument_list|)
decl_stmt|;
if|if
condition|(
name|force
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|bpDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|rbwDir
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|rbwDir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|DatanodeUtil
operator|.
name|dirNoFilesRecursive
argument_list|(
name|finalizedDir
argument_list|)
operator|||
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|finalizedDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|finalizedDir
argument_list|)
throw|;
block|}
if|if
condition|(
name|lazypersistDir
operator|.
name|exists
argument_list|()
operator|&&
operator|(
operator|(
operator|!
name|DatanodeUtil
operator|.
name|dirNoFilesRecursive
argument_list|(
name|lazypersistDir
argument_list|)
operator|||
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|lazypersistDir
argument_list|)
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|lazypersistDir
argument_list|)
throw|;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|bpCurrentDir
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|bpCurrentDir
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|bpCurrentDir
argument_list|)
throw|;
block|}
for|for
control|(
name|File
name|f
range|:
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|bpDir
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|bpDir
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|bpDir
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getStorageID ()
specifier|public
name|String
name|getStorageID
parameter_list|()
block|{
return|return
name|storageID
return|;
block|}
annotation|@
name|Override
DECL|method|getStorageType ()
specifier|public
name|StorageType
name|getStorageType
parameter_list|()
block|{
return|return
name|storageType
return|;
block|}
DECL|method|toDatanodeStorage ()
name|DatanodeStorage
name|toDatanodeStorage
parameter_list|()
block|{
return|return
operator|new
name|DatanodeStorage
argument_list|(
name|storageID
argument_list|,
name|DatanodeStorage
operator|.
name|State
operator|.
name|NORMAL
argument_list|,
name|storageType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

