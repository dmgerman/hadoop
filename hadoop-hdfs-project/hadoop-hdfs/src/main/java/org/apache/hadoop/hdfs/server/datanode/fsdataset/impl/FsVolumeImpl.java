begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FileIoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|BlockMetadataHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
operator|.
name|VolumeCheckResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DatanodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|LocalReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|LocalReplicaInPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DirectoryScanner
operator|.
name|BlockDirFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DirectoryScanner
operator|.
name|ReportCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|RamDiskReplicaTracker
operator|.
name|RamDiskReplica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|CloseableReferenceCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * The underlying volume used to store replica.  *   * It uses the {@link FsDatasetImpl} object for synchronization.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|class|FsVolumeImpl
specifier|public
class|class
name|FsVolumeImpl
implements|implements
name|FsVolumeSpi
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FsVolumeImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|WRITER
specifier|private
specifier|static
specifier|final
name|ObjectWriter
name|WRITER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
decl_stmt|;
DECL|field|READER
specifier|private
specifier|static
specifier|final
name|ObjectReader
name|READER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readerFor
argument_list|(
name|BlockIteratorState
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dataset
specifier|private
specifier|final
name|FsDatasetImpl
name|dataset
decl_stmt|;
DECL|field|storageID
specifier|private
specifier|final
name|String
name|storageID
decl_stmt|;
DECL|field|storageType
specifier|private
specifier|final
name|StorageType
name|storageType
decl_stmt|;
DECL|field|bpSlices
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BlockPoolSlice
argument_list|>
name|bpSlices
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|BlockPoolSlice
argument_list|>
argument_list|()
decl_stmt|;
comment|// Refers to the base StorageLocation used to construct this volume
comment|// (i.e., does not include STORAGE_DIR_CURRENT in
comment|//<location>/STORAGE_DIR_CURRENT/)
DECL|field|storageLocation
specifier|private
specifier|final
name|StorageLocation
name|storageLocation
decl_stmt|;
DECL|field|currentDir
specifier|private
specifier|final
name|File
name|currentDir
decl_stmt|;
comment|//<StorageDirectory>/current
DECL|field|usage
specifier|private
specifier|final
name|DF
name|usage
decl_stmt|;
DECL|field|reserved
specifier|private
specifier|final
name|long
name|reserved
decl_stmt|;
DECL|field|reference
specifier|private
name|CloseableReferenceCount
name|reference
init|=
operator|new
name|CloseableReferenceCount
argument_list|()
decl_stmt|;
comment|// Disk space reserved for blocks (RBW or Re-replicating) open for write.
DECL|field|reservedForReplicas
specifier|private
name|AtomicLong
name|reservedForReplicas
decl_stmt|;
DECL|field|recentReserved
specifier|private
name|long
name|recentReserved
init|=
literal|0
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// Capacity configured. This is useful when we want to
comment|// limit the visible capacity for tests. If negative, then we just
comment|// query from the filesystem.
DECL|field|configuredCapacity
specifier|protected
specifier|volatile
name|long
name|configuredCapacity
decl_stmt|;
DECL|field|fileIoProvider
specifier|private
specifier|final
name|FileIoProvider
name|fileIoProvider
decl_stmt|;
comment|/**    * Per-volume worker pool that processes new blocks to cache.    * The maximum number of workers per volume is bounded (configurable via    * dfs.datanode.fsdatasetcache.max.threads.per.volume) to limit resource    * contention.    */
DECL|field|cacheExecutor
specifier|protected
name|ThreadPoolExecutor
name|cacheExecutor
decl_stmt|;
DECL|method|FsVolumeImpl ( FsDatasetImpl dataset, String storageID, StorageDirectory sd, FileIoProvider fileIoProvider, Configuration conf)
name|FsVolumeImpl
parameter_list|(
name|FsDatasetImpl
name|dataset
parameter_list|,
name|String
name|storageID
parameter_list|,
name|StorageDirectory
name|sd
parameter_list|,
name|FileIoProvider
name|fileIoProvider
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sd
operator|.
name|getStorageLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"StorageLocation specified for storage directory "
operator|+
name|sd
operator|+
literal|" is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|dataset
operator|=
name|dataset
expr_stmt|;
name|this
operator|.
name|storageID
operator|=
name|storageID
expr_stmt|;
name|this
operator|.
name|reservedForReplicas
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|storageLocation
operator|=
name|sd
operator|.
name|getStorageLocation
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentDir
operator|=
name|sd
operator|.
name|getCurrentDir
argument_list|()
expr_stmt|;
name|File
name|parent
init|=
name|currentDir
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|this
operator|.
name|usage
operator|=
operator|new
name|DF
argument_list|(
name|parent
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|storageType
operator|=
name|storageLocation
operator|.
name|getStorageType
argument_list|()
expr_stmt|;
name|this
operator|.
name|reserved
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_KEY
operator|+
literal|"."
operator|+
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|storageType
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DU_RESERVED_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuredCapacity
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fileIoProvider
operator|=
name|fileIoProvider
expr_stmt|;
name|cacheExecutor
operator|=
name|initializeCacheExecutor
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeCacheExecutor (File parent)
specifier|protected
name|ThreadPoolExecutor
name|initializeCacheExecutor
parameter_list|(
name|File
name|parent
parameter_list|)
block|{
if|if
condition|(
name|storageType
operator|.
name|isTransient
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|dataset
operator|.
name|datanode
operator|==
literal|null
condition|)
block|{
comment|// FsVolumeImpl is used in test.
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|maxNumThreads
init|=
name|dataset
operator|.
name|datanode
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FSDATASETCACHE_MAX_THREADS_PER_VOLUME_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FSDATASETCACHE_MAX_THREADS_PER_VOLUME_DEFAULT
argument_list|)
decl_stmt|;
name|ThreadFactory
name|workerFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"FsVolumeImplWorker-"
operator|+
name|parent
operator|.
name|toString
argument_list|()
operator|+
literal|"-%d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|maxNumThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|workerFactory
argument_list|)
decl_stmt|;
name|executor
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
DECL|method|printReferenceTraceInfo (String op)
specifier|private
name|void
name|printReferenceTraceInfo
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|StackTraceElement
index|[]
name|stack
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|ste
range|:
name|stack
control|)
block|{
switch|switch
condition|(
name|ste
operator|.
name|getMethodName
argument_list|()
condition|)
block|{
case|case
literal|"getDfsUsed"
case|:
case|case
literal|"getBlockPoolUsed"
case|:
case|case
literal|"getAvailable"
case|:
case|case
literal|"getVolumeMap"
case|:
return|return;
default|default:
break|break;
block|}
block|}
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Reference count: "
operator|+
name|op
operator|+
literal|" "
operator|+
name|this
operator|+
literal|": "
operator|+
name|this
operator|.
name|reference
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
expr_stmt|;
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|trace
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increase the reference count. The caller must increase the reference count    * before issuing IOs.    *    * @throws IOException if the volume is already closed.    */
DECL|method|reference ()
specifier|private
name|void
name|reference
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
name|this
operator|.
name|reference
operator|.
name|reference
argument_list|()
expr_stmt|;
if|if
condition|(
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|printReferenceTraceInfo
argument_list|(
literal|"incr"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Decrease the reference count.    */
DECL|method|unreference ()
specifier|private
name|void
name|unreference
parameter_list|()
block|{
if|if
condition|(
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|printReferenceTraceInfo
argument_list|(
literal|"desc"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|reference
operator|.
name|getReferenceCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Decrease reference count<= 0 on "
operator|+
name|this
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|checkReference
argument_list|()
expr_stmt|;
name|this
operator|.
name|reference
operator|.
name|unreference
argument_list|()
expr_stmt|;
block|}
DECL|class|FsVolumeReferenceImpl
specifier|private
specifier|static
class|class
name|FsVolumeReferenceImpl
implements|implements
name|FsVolumeReference
block|{
DECL|field|volume
specifier|private
name|FsVolumeImpl
name|volume
decl_stmt|;
DECL|method|FsVolumeReferenceImpl (FsVolumeImpl volume)
name|FsVolumeReferenceImpl
parameter_list|(
name|FsVolumeImpl
name|volume
parameter_list|)
throws|throws
name|ClosedChannelException
block|{
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
name|volume
operator|.
name|reference
argument_list|()
expr_stmt|;
block|}
comment|/**      * Decreases the reference count.      * @throws IOException it never throws IOException.      */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|volume
operator|!=
literal|null
condition|)
block|{
name|volume
operator|.
name|unreference
argument_list|()
expr_stmt|;
name|volume
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getVolume ()
specifier|public
name|FsVolumeSpi
name|getVolume
parameter_list|()
block|{
return|return
name|this
operator|.
name|volume
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|obtainReference ()
specifier|public
name|FsVolumeReference
name|obtainReference
parameter_list|()
throws|throws
name|ClosedChannelException
block|{
return|return
operator|new
name|FsVolumeReferenceImpl
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|checkReference ()
specifier|private
name|void
name|checkReference
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|reference
operator|.
name|getReferenceCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getReferenceCount ()
name|int
name|getReferenceCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|reference
operator|.
name|getReferenceCount
argument_list|()
return|;
block|}
comment|/**    * Close this volume.    * @throws IOException if the volume is closed.    */
DECL|method|setClosed ()
name|void
name|setClosed
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|reference
operator|.
name|setClosed
argument_list|()
expr_stmt|;
name|dataset
operator|.
name|stopAllDataxceiverThreads
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedChannelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The volume has already closed."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check whether this volume has successfully been closed.    */
DECL|method|checkClosed ()
name|boolean
name|checkClosed
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|reference
operator|.
name|getReferenceCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The reference count for %s is %d, wait to be 0."
argument_list|,
name|this
argument_list|,
name|reference
operator|.
name|getReferenceCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCurrentDir ()
name|File
name|getCurrentDir
parameter_list|()
block|{
return|return
name|currentDir
return|;
block|}
DECL|method|getRbwDir (String bpid)
specifier|protected
name|File
name|getRbwDir
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getRbwDir
argument_list|()
return|;
block|}
DECL|method|getLazyPersistDir (String bpid)
specifier|protected
name|File
name|getLazyPersistDir
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getLazypersistDir
argument_list|()
return|;
block|}
DECL|method|getTmpDir (String bpid)
specifier|protected
name|File
name|getTmpDir
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getTmpDir
argument_list|()
return|;
block|}
DECL|method|onBlockFileDeletion (String bpid, long value)
name|void
name|onBlockFileDeletion
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|decDfsUsedAndNumBlocks
argument_list|(
name|bpid
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTransientStorage
argument_list|()
condition|)
block|{
name|dataset
operator|.
name|releaseLockedMemory
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onMetaFileDeletion (String bpid, long value)
name|void
name|onMetaFileDeletion
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|decDfsUsedAndNumBlocks
argument_list|(
name|bpid
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|decDfsUsedAndNumBlocks (String bpid, long value, boolean blockFileDeleted)
specifier|private
name|void
name|decDfsUsedAndNumBlocks
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|value
parameter_list|,
name|boolean
name|blockFileDeleted
parameter_list|)
block|{
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|dataset
operator|.
name|acquireDatasetLock
argument_list|()
init|)
block|{
name|BlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|bp
operator|.
name|decDfsUsed
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockFileDeleted
condition|)
block|{
name|bp
operator|.
name|decrNumBlocks
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|incDfsUsedAndNumBlocks (String bpid, long value)
name|void
name|incDfsUsedAndNumBlocks
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|value
parameter_list|)
block|{
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|dataset
operator|.
name|acquireDatasetLock
argument_list|()
init|)
block|{
name|BlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|bp
operator|.
name|incDfsUsed
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|bp
operator|.
name|incrNumBlocks
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|incDfsUsed (String bpid, long value)
name|void
name|incDfsUsed
parameter_list|(
name|String
name|bpid
parameter_list|,
name|long
name|value
parameter_list|)
block|{
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|dataset
operator|.
name|acquireDatasetLock
argument_list|()
init|)
block|{
name|BlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|bp
operator|.
name|incDfsUsed
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDfsUsed ()
specifier|public
name|long
name|getDfsUsed
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|dfsUsed
init|=
literal|0
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|lock
init|=
name|dataset
operator|.
name|acquireDatasetLock
argument_list|()
init|)
block|{
for|for
control|(
name|BlockPoolSlice
name|s
range|:
name|bpSlices
operator|.
name|values
argument_list|()
control|)
block|{
name|dfsUsed
operator|+=
name|s
operator|.
name|getDfsUsed
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dfsUsed
return|;
block|}
DECL|method|getBlockPoolUsed (String bpid)
name|long
name|getBlockPoolUsed
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getDfsUsed
argument_list|()
return|;
block|}
comment|/**    * Return either the configured capacity of the file system if configured; or    * the capacity of the file system excluding space reserved for non-HDFS.    *     * @return the unreserved number of bytes left in this filesystem. May be    *         zero.    */
annotation|@
name|VisibleForTesting
DECL|method|getCapacity ()
specifier|public
name|long
name|getCapacity
parameter_list|()
block|{
if|if
condition|(
name|configuredCapacity
operator|<
literal|0
condition|)
block|{
name|long
name|remaining
init|=
name|usage
operator|.
name|getCapacity
argument_list|()
operator|-
name|reserved
decl_stmt|;
return|return
name|remaining
operator|>
literal|0
condition|?
name|remaining
else|:
literal|0
return|;
block|}
return|return
name|configuredCapacity
return|;
block|}
comment|/**    * This function MUST NOT be used outside of tests.    *    * @param capacity    */
annotation|@
name|VisibleForTesting
DECL|method|setCapacityForTesting (long capacity)
specifier|public
name|void
name|setCapacityForTesting
parameter_list|(
name|long
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|configuredCapacity
operator|=
name|capacity
expr_stmt|;
block|}
comment|/*    * Calculate the available space of the filesystem, excluding space reserved    * for non-HDFS and space reserved for RBW    *     * @return the available number of bytes left in this filesystem. May be zero.    */
annotation|@
name|Override
DECL|method|getAvailable ()
specifier|public
name|long
name|getAvailable
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|remaining
init|=
name|getCapacity
argument_list|()
operator|-
name|getDfsUsed
argument_list|()
operator|-
name|getReservedForReplicas
argument_list|()
decl_stmt|;
name|long
name|available
init|=
name|usage
operator|.
name|getAvailable
argument_list|()
operator|-
name|getRemainingReserved
argument_list|()
operator|-
name|getReservedForReplicas
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|>
name|available
condition|)
block|{
name|remaining
operator|=
name|available
expr_stmt|;
block|}
return|return
operator|(
name|remaining
operator|>
literal|0
operator|)
condition|?
name|remaining
else|:
literal|0
return|;
block|}
DECL|method|getActualNonDfsUsed ()
name|long
name|getActualNonDfsUsed
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|usage
operator|.
name|getUsed
argument_list|()
operator|-
name|getDfsUsed
argument_list|()
return|;
block|}
DECL|method|getRemainingReserved ()
specifier|private
name|long
name|getRemainingReserved
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|actualNonDfsUsed
init|=
name|getActualNonDfsUsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualNonDfsUsed
operator|<
name|reserved
condition|)
block|{
return|return
name|reserved
operator|-
name|actualNonDfsUsed
return|;
block|}
return|return
literal|0L
return|;
block|}
comment|/**    * Unplanned Non-DFS usage, i.e. Extra usage beyond reserved.    *    * @return    * @throws IOException    */
DECL|method|getNonDfsUsed ()
specifier|public
name|long
name|getNonDfsUsed
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|actualNonDfsUsed
init|=
name|getActualNonDfsUsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualNonDfsUsed
operator|<
name|reserved
condition|)
block|{
return|return
literal|0L
return|;
block|}
return|return
name|actualNonDfsUsed
operator|-
name|reserved
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDfAvailable ()
name|long
name|getDfAvailable
parameter_list|()
block|{
return|return
name|usage
operator|.
name|getAvailable
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getReservedForReplicas ()
specifier|public
name|long
name|getReservedForReplicas
parameter_list|()
block|{
return|return
name|reservedForReplicas
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRecentReserved ()
name|long
name|getRecentReserved
parameter_list|()
block|{
return|return
name|recentReserved
return|;
block|}
DECL|method|getReserved ()
name|long
name|getReserved
parameter_list|()
block|{
return|return
name|reserved
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBlockPoolSlice (String bpid)
name|BlockPoolSlice
name|getBlockPoolSlice
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"block pool "
operator|+
name|bpid
operator|+
literal|" is not found"
argument_list|)
throw|;
block|}
return|return
name|bp
return|;
block|}
annotation|@
name|Override
DECL|method|getBaseURI ()
specifier|public
name|URI
name|getBaseURI
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|currentDir
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|toURI
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUsageStats (Configuration conf)
specifier|public
name|DF
name|getUsageStats
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|currentDir
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|new
name|DF
argument_list|(
operator|new
name|File
argument_list|(
name|currentDir
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get disk statistics for volume "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getStorageLocation ()
specifier|public
name|StorageLocation
name|getStorageLocation
parameter_list|()
block|{
return|return
name|storageLocation
return|;
block|}
annotation|@
name|Override
DECL|method|isTransientStorage ()
specifier|public
name|boolean
name|isTransientStorage
parameter_list|()
block|{
return|return
name|storageType
operator|.
name|isTransient
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getFinalizedDir (String bpid)
specifier|public
name|File
name|getFinalizedDir
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getFinalizedDir
argument_list|()
return|;
block|}
comment|/**    * Make a deep copy of the list of currently active BPIDs    */
annotation|@
name|Override
DECL|method|getBlockPoolList ()
specifier|public
name|String
index|[]
name|getBlockPoolList
parameter_list|()
block|{
return|return
name|bpSlices
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|bpSlices
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Temporary files. They get moved to the finalized block directory when    * the block is finalized.    */
DECL|method|createTmpFile (String bpid, Block b)
name|File
name|createTmpFile
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Block
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkReference
argument_list|()
expr_stmt|;
name|reserveSpaceForReplica
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|createTmpFile
argument_list|(
name|b
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|releaseReservedSpace
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|reserveSpaceForReplica (long bytesToReserve)
specifier|public
name|void
name|reserveSpaceForReplica
parameter_list|(
name|long
name|bytesToReserve
parameter_list|)
block|{
if|if
condition|(
name|bytesToReserve
operator|!=
literal|0
condition|)
block|{
name|reservedForReplicas
operator|.
name|addAndGet
argument_list|(
name|bytesToReserve
argument_list|)
expr_stmt|;
name|recentReserved
operator|=
name|bytesToReserve
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|releaseReservedSpace (long bytesToRelease)
specifier|public
name|void
name|releaseReservedSpace
parameter_list|(
name|long
name|bytesToRelease
parameter_list|)
block|{
if|if
condition|(
name|bytesToRelease
operator|!=
literal|0
condition|)
block|{
name|long
name|oldReservation
decl_stmt|,
name|newReservation
decl_stmt|;
do|do
block|{
name|oldReservation
operator|=
name|reservedForReplicas
operator|.
name|get
argument_list|()
expr_stmt|;
name|newReservation
operator|=
name|oldReservation
operator|-
name|bytesToRelease
expr_stmt|;
if|if
condition|(
name|newReservation
operator|<
literal|0
condition|)
block|{
comment|// Failsafe, this should never occur in practice, but if it does we
comment|// don't want to start advertising more space than we have available.
name|newReservation
operator|=
literal|0
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|reservedForReplicas
operator|.
name|compareAndSet
argument_list|(
name|oldReservation
argument_list|,
name|newReservation
argument_list|)
condition|)
do|;
block|}
block|}
annotation|@
name|Override
DECL|method|releaseLockedMemory (long bytesToRelease)
specifier|public
name|void
name|releaseLockedMemory
parameter_list|(
name|long
name|bytesToRelease
parameter_list|)
block|{
if|if
condition|(
name|isTransientStorage
argument_list|()
condition|)
block|{
name|dataset
operator|.
name|releaseLockedMemory
argument_list|(
name|bytesToRelease
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enum|SubdirFilter
specifier|private
enum|enum
name|SubdirFilter
implements|implements
name|FilenameFilter
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|accept (File dir, String name)
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|startsWith
argument_list|(
literal|"subdir"
argument_list|)
return|;
block|}
block|}
DECL|enum|BlockFileFilter
specifier|private
enum|enum
name|BlockFileFilter
implements|implements
name|FilenameFilter
block|{
DECL|enumConstant|INSTANCE
name|INSTANCE
block|;
annotation|@
name|Override
DECL|method|accept (File dir, String name)
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|!
name|name
operator|.
name|endsWith
argument_list|(
literal|".meta"
argument_list|)
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
name|Block
operator|.
name|BLOCK_FILE_PREFIX
argument_list|)
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|nextSorted (List<String> arr, String prev)
specifier|public
specifier|static
name|String
name|nextSorted
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|arr
parameter_list|,
name|String
name|prev
parameter_list|)
block|{
name|int
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|res
operator|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|arr
argument_list|,
name|prev
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|<
literal|0
condition|)
block|{
name|res
operator|=
operator|-
literal|1
operator|-
name|res
expr_stmt|;
block|}
else|else
block|{
name|res
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|res
operator|>=
name|arr
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|arr
operator|.
name|get
argument_list|(
name|res
argument_list|)
return|;
block|}
DECL|class|BlockIteratorState
specifier|private
specifier|static
class|class
name|BlockIteratorState
block|{
DECL|method|BlockIteratorState ()
name|BlockIteratorState
parameter_list|()
block|{
name|lastSavedMs
operator|=
name|iterStartMs
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|curFinalizedDir
operator|=
literal|null
expr_stmt|;
name|curFinalizedSubDir
operator|=
literal|null
expr_stmt|;
name|curEntry
operator|=
literal|null
expr_stmt|;
name|atEnd
operator|=
literal|false
expr_stmt|;
block|}
comment|// The wall-clock ms since the epoch at which this iterator was last saved.
annotation|@
name|JsonProperty
DECL|field|lastSavedMs
specifier|private
name|long
name|lastSavedMs
decl_stmt|;
comment|// The wall-clock ms since the epoch at which this iterator was created.
annotation|@
name|JsonProperty
DECL|field|iterStartMs
specifier|private
name|long
name|iterStartMs
decl_stmt|;
annotation|@
name|JsonProperty
DECL|field|curFinalizedDir
specifier|private
name|String
name|curFinalizedDir
decl_stmt|;
annotation|@
name|JsonProperty
DECL|field|curFinalizedSubDir
specifier|private
name|String
name|curFinalizedSubDir
decl_stmt|;
annotation|@
name|JsonProperty
DECL|field|curEntry
specifier|private
name|String
name|curEntry
decl_stmt|;
annotation|@
name|JsonProperty
DECL|field|atEnd
specifier|private
name|boolean
name|atEnd
decl_stmt|;
block|}
comment|/**    * A BlockIterator implementation for FsVolumeImpl.    */
DECL|class|BlockIteratorImpl
specifier|private
class|class
name|BlockIteratorImpl
implements|implements
name|FsVolumeSpi
operator|.
name|BlockIterator
block|{
DECL|field|bpidDir
specifier|private
specifier|final
name|File
name|bpidDir
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|bpid
specifier|private
specifier|final
name|String
name|bpid
decl_stmt|;
DECL|field|maxStalenessMs
specifier|private
name|long
name|maxStalenessMs
init|=
literal|0
decl_stmt|;
DECL|field|cache
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|cache
decl_stmt|;
DECL|field|cacheMs
specifier|private
name|long
name|cacheMs
decl_stmt|;
DECL|field|state
specifier|private
name|BlockIteratorState
name|state
decl_stmt|;
DECL|method|BlockIteratorImpl (String bpid, String name)
name|BlockIteratorImpl
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|bpidDir
operator|=
operator|new
name|File
argument_list|(
name|currentDir
argument_list|,
name|bpid
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
name|rewind
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the next subdirectory within the block pool slice.      *      * @return         The next subdirectory within the block pool slice, or      *                   null if there are no more.      */
DECL|method|getNextSubDir (String prev, File dir)
specifier|private
name|String
name|getNextSubDir
parameter_list|(
name|String
name|prev
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|fileIoProvider
operator|.
name|listDirectory
argument_list|(
name|FsVolumeImpl
operator|.
name|this
argument_list|,
name|dir
argument_list|,
name|SubdirFilter
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|cache
operator|=
literal|null
expr_stmt|;
name|cacheMs
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getNextSubDir({}, {}): no subdirectories found in {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|String
name|nextSubDir
init|=
name|nextSorted
argument_list|(
name|children
argument_list|,
name|prev
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextSubDir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getNextSubDir({}, {}): no more subdirectories found in {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getNextSubDir({}, {}): picking next subdirectory {} "
operator|+
literal|"within {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|nextSubDir
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nextSubDir
return|;
block|}
DECL|method|getNextFinalizedDir ()
specifier|private
name|String
name|getNextFinalizedDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|bpidDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"current"
argument_list|,
literal|"finalized"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
return|return
name|getNextSubDir
argument_list|(
name|state
operator|.
name|curFinalizedDir
argument_list|,
name|dir
argument_list|)
return|;
block|}
DECL|method|getNextFinalizedSubDir ()
specifier|private
name|String
name|getNextFinalizedSubDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|curFinalizedDir
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|bpidDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"current"
argument_list|,
literal|"finalized"
argument_list|,
name|state
operator|.
name|curFinalizedDir
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
return|return
name|getNextSubDir
argument_list|(
name|state
operator|.
name|curFinalizedSubDir
argument_list|,
name|dir
argument_list|)
return|;
block|}
DECL|method|getSubdirEntries ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getSubdirEntries
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|curFinalizedSubDir
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|// There are no entries in the null subdir.
block|}
name|long
name|now
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|long
name|delta
init|=
name|now
operator|-
name|cacheMs
decl_stmt|;
if|if
condition|(
name|delta
operator|<
name|maxStalenessMs
condition|)
block|{
return|return
name|cache
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getSubdirEntries({}, {}): purging entries cache for {} "
operator|+
literal|"after {} ms."
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|state
operator|.
name|curFinalizedSubDir
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|cache
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|File
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|bpidDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"current"
argument_list|,
literal|"finalized"
argument_list|,
name|state
operator|.
name|curFinalizedDir
argument_list|,
name|state
operator|.
name|curFinalizedSubDir
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|fileIoProvider
operator|.
name|listDirectory
argument_list|(
name|FsVolumeImpl
operator|.
name|this
argument_list|,
name|dir
argument_list|,
name|BlockFileFilter
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|entries
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getSubdirEntries({}, {}): no entries found in {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getSubdirEntries({}, {}): listed {} entries in {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cache
operator|=
name|entries
expr_stmt|;
name|cacheMs
operator|=
name|now
expr_stmt|;
return|return
name|cache
return|;
block|}
comment|/**      * Get the next block.<p/>      *      * Each volume has a hierarchical structure.<p/>      *      *<code>      * BPID B0      *   finalized/      *     subdir0      *       subdir0      *         blk_000      *         blk_001      *       ...      *     subdir1      *       subdir0      *         ...      *   rbw/      *</code>      *      * When we run out of entries at one level of the structure, we search      * progressively higher levels.  For example, when we run out of blk_      * entries in a subdirectory, we search for the next subdirectory.      * And so on.      */
annotation|@
name|Override
DECL|method|nextBlock ()
specifier|public
name|ExtendedBlock
name|nextBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|atEnd
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|getSubdirEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
name|state
operator|.
name|curEntry
operator|=
name|nextSorted
argument_list|(
name|entries
argument_list|,
name|state
operator|.
name|curEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|curEntry
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"nextBlock({}, {}): advancing from {} to next "
operator|+
literal|"subdirectory."
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|state
operator|.
name|curFinalizedSubDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
name|Block
operator|.
name|filename2id
argument_list|(
name|state
operator|.
name|curEntry
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|expectedBlockDir
init|=
name|DatanodeUtil
operator|.
name|idToBlockDir
argument_list|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
argument_list|,
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|actualBlockDir
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"."
argument_list|,
name|state
operator|.
name|curFinalizedDir
argument_list|,
name|state
operator|.
name|curFinalizedSubDir
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expectedBlockDir
operator|.
name|equals
argument_list|(
name|actualBlockDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"nextBlock({}, {}): block id {} found in invalid "
operator|+
literal|"directory.  Expected directory: {}.  "
operator|+
literal|"Actual directory: {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|expectedBlockDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|actualBlockDir
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|File
name|blkFile
init|=
name|getBlockFile
argument_list|(
name|bpid
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|File
name|metaFile
init|=
name|FsDatasetUtil
operator|.
name|findMetaFile
argument_list|(
name|blkFile
argument_list|)
decl_stmt|;
name|block
operator|.
name|setGenerationStamp
argument_list|(
name|Block
operator|.
name|getGenerationStamp
argument_list|(
name|metaFile
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|.
name|setNumBytes
argument_list|(
name|blkFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"nextBlock({}, {}): advancing to {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|block
argument_list|)
expr_stmt|;
return|return
name|block
return|;
block|}
block|}
name|state
operator|.
name|curFinalizedSubDir
operator|=
name|getNextFinalizedSubDir
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|curFinalizedSubDir
operator|==
literal|null
condition|)
block|{
name|state
operator|.
name|curFinalizedDir
operator|=
name|getNextFinalizedDir
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|curFinalizedDir
operator|==
literal|null
condition|)
block|{
name|state
operator|.
name|atEnd
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|state
operator|.
name|atEnd
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"nextBlock({}, {}): I/O error"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|getBlockFile (String bpid, ExtendedBlock blk)
specifier|private
name|File
name|getBlockFile
parameter_list|(
name|String
name|bpid
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|File
argument_list|(
name|DatanodeUtil
operator|.
name|idToBlockDir
argument_list|(
name|getFinalizedDir
argument_list|(
name|bpid
argument_list|)
argument_list|,
name|blk
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|blk
operator|.
name|getBlockName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|atEnd ()
specifier|public
name|boolean
name|atEnd
parameter_list|()
block|{
return|return
name|state
operator|.
name|atEnd
return|;
block|}
annotation|@
name|Override
DECL|method|rewind ()
specifier|public
name|void
name|rewind
parameter_list|()
block|{
name|cache
operator|=
literal|null
expr_stmt|;
name|cacheMs
operator|=
literal|0
expr_stmt|;
name|state
operator|=
operator|new
name|BlockIteratorState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|save ()
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|IOException
block|{
name|state
operator|.
name|lastSavedMs
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|fileIoProvider
operator|.
name|getFileOutputStream
argument_list|(
name|FsVolumeImpl
operator|.
name|this
argument_list|,
name|getTempSaveFile
argument_list|()
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
init|)
block|{
name|WRITER
operator|.
name|writeValue
argument_list|(
name|writer
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|fileIoProvider
operator|.
name|delete
argument_list|(
name|FsVolumeImpl
operator|.
name|this
argument_list|,
name|getTempSaveFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fileIoProvider
operator|.
name|move
argument_list|(
name|FsVolumeImpl
operator|.
name|this
argument_list|,
name|getTempSaveFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|getSaveFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"save({}, {}): saved {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|WRITER
operator|.
name|writeValueAsString
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|load ()
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|getSaveFile
argument_list|()
decl_stmt|;
name|this
operator|.
name|state
operator|=
name|READER
operator|.
name|readValue
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"load({}, {}): loaded iterator {} from {}: {}"
argument_list|,
name|storageID
argument_list|,
name|bpid
argument_list|,
name|name
argument_list|,
name|file
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
name|WRITER
operator|.
name|writeValueAsString
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSaveFile ()
name|File
name|getSaveFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|bpidDir
argument_list|,
name|name
operator|+
literal|".cursor"
argument_list|)
return|;
block|}
DECL|method|getTempSaveFile ()
name|File
name|getTempSaveFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|bpidDir
argument_list|,
name|name
operator|+
literal|".cursor.tmp"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setMaxStalenessMs (long maxStalenessMs)
specifier|public
name|void
name|setMaxStalenessMs
parameter_list|(
name|long
name|maxStalenessMs
parameter_list|)
block|{
name|this
operator|.
name|maxStalenessMs
operator|=
name|maxStalenessMs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// No action needed for this volume implementation.
block|}
annotation|@
name|Override
DECL|method|getIterStartMs ()
specifier|public
name|long
name|getIterStartMs
parameter_list|()
block|{
return|return
name|state
operator|.
name|iterStartMs
return|;
block|}
annotation|@
name|Override
DECL|method|getLastSavedMs ()
specifier|public
name|long
name|getLastSavedMs
parameter_list|()
block|{
return|return
name|state
operator|.
name|lastSavedMs
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|bpid
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|newBlockIterator (String bpid, String name)
specifier|public
name|BlockIterator
name|newBlockIterator
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|BlockIteratorImpl
argument_list|(
name|bpid
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadBlockIterator (String bpid, String name)
specifier|public
name|BlockIterator
name|loadBlockIterator
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockIteratorImpl
name|iter
init|=
operator|new
name|BlockIteratorImpl
argument_list|(
name|bpid
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|iter
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|iter
return|;
block|}
annotation|@
name|Override
DECL|method|getDataset ()
specifier|public
name|FsDatasetSpi
argument_list|<
name|?
extends|extends
name|FsVolumeSpi
argument_list|>
name|getDataset
parameter_list|()
block|{
return|return
name|dataset
return|;
block|}
comment|/**    * RBW files. They get moved to the finalized block directory when    * the block is finalized.    */
DECL|method|createRbwFile (String bpid, Block b)
name|File
name|createRbwFile
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Block
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkReference
argument_list|()
expr_stmt|;
name|reserveSpaceForReplica
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|createRbwFile
argument_list|(
name|b
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|releaseReservedSpace
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
comment|/**    *    * @param bytesReserved Space that was reserved during    *     block creation. Now that the block is being finalized we    *     can free up this space.    * @return    * @throws IOException    */
DECL|method|addFinalizedBlock (String bpid, Block b, ReplicaInfo replicaInfo, long bytesReserved)
name|ReplicaInfo
name|addFinalizedBlock
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Block
name|b
parameter_list|,
name|ReplicaInfo
name|replicaInfo
parameter_list|,
name|long
name|bytesReserved
parameter_list|)
throws|throws
name|IOException
block|{
name|releaseReservedSpace
argument_list|(
name|bytesReserved
argument_list|)
expr_stmt|;
name|File
name|dest
init|=
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|addFinalizedBlock
argument_list|(
name|b
argument_list|,
name|replicaInfo
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReplicaBuilder
argument_list|(
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
operator|.
name|setBlock
argument_list|(
name|replicaInfo
argument_list|)
operator|.
name|setFsVolume
argument_list|(
name|this
argument_list|)
operator|.
name|setDirectoryToUse
argument_list|(
name|dest
operator|.
name|getParentFile
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getCacheExecutor ()
name|Executor
name|getCacheExecutor
parameter_list|()
block|{
return|return
name|cacheExecutor
return|;
block|}
DECL|method|checkDirs ()
name|void
name|checkDirs
parameter_list|()
throws|throws
name|DiskErrorException
block|{
comment|// TODO:FEDERATION valid synchronization
for|for
control|(
name|BlockPoolSlice
name|s
range|:
name|bpSlices
operator|.
name|values
argument_list|()
control|)
block|{
name|s
operator|.
name|checkDirs
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|check (VolumeCheckContext ignored)
specifier|public
name|VolumeCheckResult
name|check
parameter_list|(
name|VolumeCheckContext
name|ignored
parameter_list|)
throws|throws
name|DiskErrorException
block|{
comment|// TODO:FEDERATION valid synchronization
for|for
control|(
name|BlockPoolSlice
name|s
range|:
name|bpSlices
operator|.
name|values
argument_list|()
control|)
block|{
name|s
operator|.
name|checkDirs
argument_list|()
expr_stmt|;
block|}
return|return
name|VolumeCheckResult
operator|.
name|HEALTHY
return|;
block|}
DECL|method|getVolumeMap (ReplicaMap volumeMap, final RamDiskReplicaTracker ramDiskReplicaMap)
name|void
name|getVolumeMap
parameter_list|(
name|ReplicaMap
name|volumeMap
parameter_list|,
specifier|final
name|RamDiskReplicaTracker
name|ramDiskReplicaMap
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|BlockPoolSlice
name|s
range|:
name|bpSlices
operator|.
name|values
argument_list|()
control|)
block|{
name|s
operator|.
name|getVolumeMap
argument_list|(
name|volumeMap
argument_list|,
name|ramDiskReplicaMap
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getVolumeMap (String bpid, ReplicaMap volumeMap, final RamDiskReplicaTracker ramDiskReplicaMap)
name|void
name|getVolumeMap
parameter_list|(
name|String
name|bpid
parameter_list|,
name|ReplicaMap
name|volumeMap
parameter_list|,
specifier|final
name|RamDiskReplicaTracker
name|ramDiskReplicaMap
parameter_list|)
throws|throws
name|IOException
block|{
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getVolumeMap
argument_list|(
name|volumeMap
argument_list|,
name|ramDiskReplicaMap
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumBlocks ()
name|long
name|getNumBlocks
parameter_list|()
block|{
name|long
name|numBlocks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockPoolSlice
name|s
range|:
name|bpSlices
operator|.
name|values
argument_list|()
control|)
block|{
name|numBlocks
operator|+=
name|s
operator|.
name|getNumOfBlocks
argument_list|()
expr_stmt|;
block|}
return|return
name|numBlocks
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|currentDir
operator|!=
literal|null
condition|?
name|currentDir
operator|.
name|getParent
argument_list|()
else|:
literal|"NULL"
return|;
block|}
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cacheExecutor
operator|!=
literal|null
condition|)
block|{
name|cacheExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|BlockPoolSlice
argument_list|>
argument_list|>
name|set
init|=
name|bpSlices
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|BlockPoolSlice
argument_list|>
name|entry
range|:
name|set
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|shutdown
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addBlockPool (String bpid, Configuration c)
name|void
name|addBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Configuration
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|addBlockPool
argument_list|(
name|bpid
argument_list|,
name|c
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|addBlockPool (String bpid, Configuration c, Timer timer)
name|void
name|addBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Configuration
name|c
parameter_list|,
name|Timer
name|timer
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|bpdir
init|=
operator|new
name|File
argument_list|(
name|currentDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|BlockPoolSlice
name|bp
decl_stmt|;
if|if
condition|(
name|timer
operator|==
literal|null
condition|)
block|{
name|bp
operator|=
operator|new
name|BlockPoolSlice
argument_list|(
name|bpid
argument_list|,
name|this
argument_list|,
name|bpdir
argument_list|,
name|c
argument_list|,
operator|new
name|Timer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bp
operator|=
operator|new
name|BlockPoolSlice
argument_list|(
name|bpid
argument_list|,
name|this
argument_list|,
name|bpdir
argument_list|,
name|c
argument_list|,
name|timer
argument_list|)
expr_stmt|;
block|}
name|bpSlices
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|bp
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdownBlockPool (String bpid, BlockListAsLongs blocksListsAsLongs)
name|void
name|shutdownBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|BlockListAsLongs
name|blocksListsAsLongs
parameter_list|)
block|{
name|BlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|bp
operator|.
name|shutdown
argument_list|(
name|blocksListsAsLongs
argument_list|)
expr_stmt|;
block|}
name|bpSlices
operator|.
name|remove
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
block|}
DECL|method|isBPDirEmpty (String bpid)
name|boolean
name|isBPDirEmpty
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|volumeCurrentDir
init|=
name|this
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|bpDir
init|=
operator|new
name|File
argument_list|(
name|volumeCurrentDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|File
name|bpCurrentDir
init|=
operator|new
name|File
argument_list|(
name|bpDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
decl_stmt|;
name|File
name|finalizedDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_FINALIZED
argument_list|)
decl_stmt|;
name|File
name|rbwDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_RBW
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileIoProvider
operator|.
name|exists
argument_list|(
name|this
argument_list|,
name|finalizedDir
argument_list|)
operator|&&
operator|!
name|DatanodeUtil
operator|.
name|dirNoFilesRecursive
argument_list|(
name|this
argument_list|,
name|finalizedDir
argument_list|,
name|fileIoProvider
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|fileIoProvider
operator|.
name|exists
argument_list|(
name|this
argument_list|,
name|rbwDir
argument_list|)
operator|&&
name|fileIoProvider
operator|.
name|list
argument_list|(
name|this
argument_list|,
name|rbwDir
argument_list|)
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|deleteBPDirectories (String bpid, boolean force)
name|void
name|deleteBPDirectories
parameter_list|(
name|String
name|bpid
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|volumeCurrentDir
init|=
name|this
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
name|File
name|bpDir
init|=
operator|new
name|File
argument_list|(
name|volumeCurrentDir
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bpDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// nothing to be deleted
return|return;
block|}
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|bpDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_TMP
argument_list|)
decl_stmt|;
name|File
name|bpCurrentDir
init|=
operator|new
name|File
argument_list|(
name|bpDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_CURRENT
argument_list|)
decl_stmt|;
name|File
name|finalizedDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_FINALIZED
argument_list|)
decl_stmt|;
name|File
name|lazypersistDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_LAZY_PERSIST
argument_list|)
decl_stmt|;
name|File
name|rbwDir
init|=
operator|new
name|File
argument_list|(
name|bpCurrentDir
argument_list|,
name|DataStorage
operator|.
name|STORAGE_DIR_RBW
argument_list|)
decl_stmt|;
if|if
condition|(
name|force
condition|)
block|{
name|fileIoProvider
operator|.
name|fullyDelete
argument_list|(
name|this
argument_list|,
name|bpDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|fileIoProvider
operator|.
name|delete
argument_list|(
name|this
argument_list|,
name|rbwDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|rbwDir
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|DatanodeUtil
operator|.
name|dirNoFilesRecursive
argument_list|(
name|this
argument_list|,
name|finalizedDir
argument_list|,
name|fileIoProvider
argument_list|)
operator|||
operator|!
name|fileIoProvider
operator|.
name|fullyDelete
argument_list|(
name|this
argument_list|,
name|finalizedDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|finalizedDir
argument_list|)
throw|;
block|}
if|if
condition|(
name|lazypersistDir
operator|.
name|exists
argument_list|()
operator|&&
operator|(
operator|(
operator|!
name|DatanodeUtil
operator|.
name|dirNoFilesRecursive
argument_list|(
name|this
argument_list|,
name|lazypersistDir
argument_list|,
name|fileIoProvider
argument_list|)
operator|||
operator|!
name|fileIoProvider
operator|.
name|fullyDelete
argument_list|(
name|this
argument_list|,
name|lazypersistDir
argument_list|)
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|lazypersistDir
argument_list|)
throw|;
block|}
name|fileIoProvider
operator|.
name|fullyDelete
argument_list|(
name|this
argument_list|,
name|tmpDir
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
name|fileIoProvider
operator|.
name|listFiles
argument_list|(
name|this
argument_list|,
name|bpCurrentDir
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|fileIoProvider
operator|.
name|delete
argument_list|(
name|this
argument_list|,
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|fileIoProvider
operator|.
name|delete
argument_list|(
name|this
argument_list|,
name|bpCurrentDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|bpCurrentDir
argument_list|)
throw|;
block|}
for|for
control|(
name|File
name|f
range|:
name|fileIoProvider
operator|.
name|listFiles
argument_list|(
name|this
argument_list|,
name|bpDir
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|fileIoProvider
operator|.
name|delete
argument_list|(
name|this
argument_list|,
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|fileIoProvider
operator|.
name|delete
argument_list|(
name|this
argument_list|,
name|bpDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete "
operator|+
name|bpDir
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getStorageID ()
specifier|public
name|String
name|getStorageID
parameter_list|()
block|{
return|return
name|storageID
return|;
block|}
annotation|@
name|Override
DECL|method|getStorageType ()
specifier|public
name|StorageType
name|getStorageType
parameter_list|()
block|{
return|return
name|storageType
return|;
block|}
DECL|method|toDatanodeStorage ()
name|DatanodeStorage
name|toDatanodeStorage
parameter_list|()
block|{
return|return
operator|new
name|DatanodeStorage
argument_list|(
name|storageID
argument_list|,
name|DatanodeStorage
operator|.
name|State
operator|.
name|NORMAL
argument_list|,
name|storageType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadLastPartialChunkChecksum ( File blockFile, File metaFile)
specifier|public
name|byte
index|[]
name|loadLastPartialChunkChecksum
parameter_list|(
name|File
name|blockFile
parameter_list|,
name|File
name|metaFile
parameter_list|)
throws|throws
name|IOException
block|{
comment|// readHeader closes the temporary FileInputStream.
name|DataChecksum
name|dcs
init|=
name|BlockMetadataHeader
operator|.
name|readHeader
argument_list|(
name|fileIoProvider
operator|.
name|getFileInputStream
argument_list|(
name|this
argument_list|,
name|metaFile
argument_list|)
argument_list|)
operator|.
name|getChecksum
argument_list|()
decl_stmt|;
specifier|final
name|int
name|checksumSize
init|=
name|dcs
operator|.
name|getChecksumSize
argument_list|()
decl_stmt|;
specifier|final
name|long
name|onDiskLen
init|=
name|blockFile
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bytesPerChecksum
init|=
name|dcs
operator|.
name|getBytesPerChecksum
argument_list|()
decl_stmt|;
if|if
condition|(
name|onDiskLen
operator|%
name|bytesPerChecksum
operator|==
literal|0
condition|)
block|{
comment|// the last chunk is a complete one. No need to preserve its checksum
comment|// because it will not be modified.
return|return
literal|null
return|;
block|}
name|long
name|offsetInChecksum
init|=
name|BlockMetadataHeader
operator|.
name|getHeaderSize
argument_list|()
operator|+
operator|(
name|onDiskLen
operator|/
name|bytesPerChecksum
operator|)
operator|*
name|checksumSize
decl_stmt|;
name|byte
index|[]
name|lastChecksum
init|=
operator|new
name|byte
index|[
name|checksumSize
index|]
decl_stmt|;
try|try
init|(
name|RandomAccessFile
name|raf
init|=
name|fileIoProvider
operator|.
name|getRandomAccessFile
argument_list|(
name|this
argument_list|,
name|metaFile
argument_list|,
literal|"r"
argument_list|)
init|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|offsetInChecksum
argument_list|)
expr_stmt|;
name|int
name|readBytes
init|=
name|raf
operator|.
name|read
argument_list|(
name|lastChecksum
argument_list|,
literal|0
argument_list|,
name|checksumSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|readBytes
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected to read "
operator|+
name|checksumSize
operator|+
literal|" bytes from offset "
operator|+
name|offsetInChecksum
operator|+
literal|" but reached end of file."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|readBytes
operator|!=
name|checksumSize
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected to read "
operator|+
name|checksumSize
operator|+
literal|" bytes from offset "
operator|+
name|offsetInChecksum
operator|+
literal|" but read "
operator|+
name|readBytes
operator|+
literal|" bytes."
argument_list|)
throw|;
block|}
block|}
return|return
name|lastChecksum
return|;
block|}
DECL|method|append (String bpid, ReplicaInfo replicaInfo, long newGS, long estimateBlockLen)
specifier|public
name|ReplicaInPipeline
name|append
parameter_list|(
name|String
name|bpid
parameter_list|,
name|ReplicaInfo
name|replicaInfo
parameter_list|,
name|long
name|newGS
parameter_list|,
name|long
name|estimateBlockLen
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bytesReserved
init|=
name|estimateBlockLen
operator|-
name|replicaInfo
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|getAvailable
argument_list|()
operator|<
name|bytesReserved
condition|)
block|{
throw|throw
operator|new
name|DiskOutOfSpaceException
argument_list|(
literal|"Insufficient space for appending to "
operator|+
name|replicaInfo
argument_list|)
throw|;
block|}
assert|assert
name|replicaInfo
operator|.
name|getVolume
argument_list|()
operator|==
name|this
operator|:
literal|"The volume of the replica should be the same as this volume"
assert|;
comment|// construct a RBW replica with the new GS
name|File
name|newBlkFile
init|=
operator|new
name|File
argument_list|(
name|getRbwDir
argument_list|(
name|bpid
argument_list|)
argument_list|,
name|replicaInfo
operator|.
name|getBlockName
argument_list|()
argument_list|)
decl_stmt|;
name|LocalReplicaInPipeline
name|newReplicaInfo
init|=
operator|new
name|ReplicaBuilder
argument_list|(
name|ReplicaState
operator|.
name|RBW
argument_list|)
operator|.
name|setBlockId
argument_list|(
name|replicaInfo
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|replicaInfo
operator|.
name|getNumBytes
argument_list|()
argument_list|)
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
operator|.
name|setFsVolume
argument_list|(
name|this
argument_list|)
operator|.
name|setDirectoryToUse
argument_list|(
name|newBlkFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
operator|.
name|setWriterThread
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
operator|.
name|setBytesToReserve
argument_list|(
name|bytesReserved
argument_list|)
operator|.
name|buildLocalReplicaInPipeline
argument_list|()
decl_stmt|;
comment|// load last checksum and datalen
name|LocalReplica
name|localReplica
init|=
operator|(
name|LocalReplica
operator|)
name|replicaInfo
decl_stmt|;
name|byte
index|[]
name|lastChunkChecksum
init|=
name|loadLastPartialChunkChecksum
argument_list|(
name|localReplica
operator|.
name|getBlockFile
argument_list|()
argument_list|,
name|localReplica
operator|.
name|getMetaFile
argument_list|()
argument_list|)
decl_stmt|;
name|newReplicaInfo
operator|.
name|setLastChecksumAndDataLen
argument_list|(
name|replicaInfo
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|lastChunkChecksum
argument_list|)
expr_stmt|;
comment|// rename meta file to rbw directory
comment|// rename block file to rbw directory
name|newReplicaInfo
operator|.
name|moveReplicaFrom
argument_list|(
name|replicaInfo
argument_list|,
name|newBlkFile
argument_list|)
expr_stmt|;
name|reserveSpaceForReplica
argument_list|(
name|bytesReserved
argument_list|)
expr_stmt|;
return|return
name|newReplicaInfo
return|;
block|}
DECL|method|createRbw (ExtendedBlock b)
specifier|public
name|ReplicaInPipeline
name|createRbw
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|createRbwFile
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|LocalReplicaInPipeline
name|newReplicaInfo
init|=
operator|new
name|ReplicaBuilder
argument_list|(
name|ReplicaState
operator|.
name|RBW
argument_list|)
operator|.
name|setBlockId
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setGenerationStamp
argument_list|(
name|b
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
operator|.
name|setFsVolume
argument_list|(
name|this
argument_list|)
operator|.
name|setDirectoryToUse
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
argument_list|)
operator|.
name|setBytesToReserve
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
operator|.
name|buildLocalReplicaInPipeline
argument_list|()
decl_stmt|;
return|return
name|newReplicaInfo
return|;
block|}
DECL|method|convertTemporaryToRbw (ExtendedBlock b, ReplicaInfo temp)
specifier|public
name|ReplicaInPipeline
name|convertTemporaryToRbw
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|ReplicaInfo
name|temp
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|blockId
init|=
name|b
operator|.
name|getBlockId
argument_list|()
decl_stmt|;
specifier|final
name|long
name|expectedGs
init|=
name|b
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
specifier|final
name|long
name|visible
init|=
name|b
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
specifier|final
name|long
name|numBytes
init|=
name|temp
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
comment|// move block files to the rbw directory
name|BlockPoolSlice
name|bpslice
init|=
name|getBlockPoolSlice
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|File
name|dest
init|=
name|FsDatasetImpl
operator|.
name|moveBlockFiles
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|,
name|temp
argument_list|,
name|bpslice
operator|.
name|getRbwDir
argument_list|()
argument_list|)
decl_stmt|;
comment|// create RBW
specifier|final
name|LocalReplicaInPipeline
name|rbw
init|=
operator|new
name|ReplicaBuilder
argument_list|(
name|ReplicaState
operator|.
name|RBW
argument_list|)
operator|.
name|setBlockId
argument_list|(
name|blockId
argument_list|)
operator|.
name|setLength
argument_list|(
name|numBytes
argument_list|)
operator|.
name|setGenerationStamp
argument_list|(
name|expectedGs
argument_list|)
operator|.
name|setFsVolume
argument_list|(
name|this
argument_list|)
operator|.
name|setDirectoryToUse
argument_list|(
name|dest
operator|.
name|getParentFile
argument_list|()
argument_list|)
operator|.
name|setWriterThread
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
operator|.
name|setBytesToReserve
argument_list|(
literal|0
argument_list|)
operator|.
name|buildLocalReplicaInPipeline
argument_list|()
decl_stmt|;
name|rbw
operator|.
name|setBytesAcked
argument_list|(
name|visible
argument_list|)
expr_stmt|;
comment|// load last checksum and datalen
specifier|final
name|File
name|destMeta
init|=
name|FsDatasetUtil
operator|.
name|getMetaFile
argument_list|(
name|dest
argument_list|,
name|b
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|lastChunkChecksum
init|=
name|loadLastPartialChunkChecksum
argument_list|(
name|dest
argument_list|,
name|destMeta
argument_list|)
decl_stmt|;
name|rbw
operator|.
name|setLastChecksumAndDataLen
argument_list|(
name|numBytes
argument_list|,
name|lastChunkChecksum
argument_list|)
expr_stmt|;
return|return
name|rbw
return|;
block|}
DECL|method|createTemporary (ExtendedBlock b)
specifier|public
name|ReplicaInPipeline
name|createTemporary
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create a temporary file to hold block in the designated volume
name|File
name|f
init|=
name|createTmpFile
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|b
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|LocalReplicaInPipeline
name|newReplicaInfo
init|=
operator|new
name|ReplicaBuilder
argument_list|(
name|ReplicaState
operator|.
name|TEMPORARY
argument_list|)
operator|.
name|setBlockId
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setGenerationStamp
argument_list|(
name|b
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
operator|.
name|setDirectoryToUse
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
argument_list|)
operator|.
name|setBytesToReserve
argument_list|(
name|b
operator|.
name|getLocalBlock
argument_list|()
operator|.
name|getNumBytes
argument_list|()
argument_list|)
operator|.
name|setFsVolume
argument_list|(
name|this
argument_list|)
operator|.
name|buildLocalReplicaInPipeline
argument_list|()
decl_stmt|;
return|return
name|newReplicaInfo
return|;
block|}
DECL|method|updateRURCopyOnTruncate (ReplicaInfo rur, String bpid, long newBlockId, long recoveryId, long newlength)
specifier|public
name|ReplicaInPipeline
name|updateRURCopyOnTruncate
parameter_list|(
name|ReplicaInfo
name|rur
parameter_list|,
name|String
name|bpid
parameter_list|,
name|long
name|newBlockId
parameter_list|,
name|long
name|recoveryId
parameter_list|,
name|long
name|newlength
parameter_list|)
throws|throws
name|IOException
block|{
name|rur
operator|.
name|breakHardLinksIfNeeded
argument_list|()
expr_stmt|;
name|File
index|[]
name|copiedReplicaFiles
init|=
name|copyReplicaWithNewBlockIdAndGS
argument_list|(
name|rur
argument_list|,
name|bpid
argument_list|,
name|newBlockId
argument_list|,
name|recoveryId
argument_list|)
decl_stmt|;
name|File
name|blockFile
init|=
name|copiedReplicaFiles
index|[
literal|1
index|]
decl_stmt|;
name|File
name|metaFile
init|=
name|copiedReplicaFiles
index|[
literal|0
index|]
decl_stmt|;
name|LocalReplica
operator|.
name|truncateBlock
argument_list|(
name|rur
operator|.
name|getVolume
argument_list|()
argument_list|,
name|blockFile
argument_list|,
name|metaFile
argument_list|,
name|rur
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|newlength
argument_list|,
name|fileIoProvider
argument_list|)
expr_stmt|;
name|LocalReplicaInPipeline
name|newReplicaInfo
init|=
operator|new
name|ReplicaBuilder
argument_list|(
name|ReplicaState
operator|.
name|RBW
argument_list|)
operator|.
name|setBlockId
argument_list|(
name|newBlockId
argument_list|)
operator|.
name|setGenerationStamp
argument_list|(
name|recoveryId
argument_list|)
operator|.
name|setFsVolume
argument_list|(
name|this
argument_list|)
operator|.
name|setDirectoryToUse
argument_list|(
name|blockFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
operator|.
name|setBytesToReserve
argument_list|(
name|newlength
argument_list|)
operator|.
name|buildLocalReplicaInPipeline
argument_list|()
decl_stmt|;
comment|// In theory, this rbw replica needs to reload last chunk checksum,
comment|// but it is immediately converted to finalized state within the same lock,
comment|// so no need to update it.
return|return
name|newReplicaInfo
return|;
block|}
DECL|method|copyReplicaWithNewBlockIdAndGS ( ReplicaInfo replicaInfo, String bpid, long newBlkId, long newGS)
specifier|private
name|File
index|[]
name|copyReplicaWithNewBlockIdAndGS
parameter_list|(
name|ReplicaInfo
name|replicaInfo
parameter_list|,
name|String
name|bpid
parameter_list|,
name|long
name|newBlkId
parameter_list|,
name|long
name|newGS
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|blockFileName
init|=
name|Block
operator|.
name|BLOCK_FILE_PREFIX
operator|+
name|newBlkId
decl_stmt|;
name|FsVolumeImpl
name|v
init|=
operator|(
name|FsVolumeImpl
operator|)
name|replicaInfo
operator|.
name|getVolume
argument_list|()
decl_stmt|;
specifier|final
name|File
name|tmpDir
init|=
name|v
operator|.
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getTmpDir
argument_list|()
decl_stmt|;
specifier|final
name|File
name|destDir
init|=
name|DatanodeUtil
operator|.
name|idToBlockDir
argument_list|(
name|tmpDir
argument_list|,
name|newBlkId
argument_list|)
decl_stmt|;
specifier|final
name|File
name|dstBlockFile
init|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
name|blockFileName
argument_list|)
decl_stmt|;
specifier|final
name|File
name|dstMetaFile
init|=
name|FsDatasetUtil
operator|.
name|getMetaFile
argument_list|(
name|dstBlockFile
argument_list|,
name|newGS
argument_list|)
decl_stmt|;
return|return
name|FsDatasetImpl
operator|.
name|copyBlockFiles
argument_list|(
name|replicaInfo
argument_list|,
name|dstMetaFile
argument_list|,
name|dstBlockFile
argument_list|,
literal|true
argument_list|,
name|DFSUtilClient
operator|.
name|getSmallBufferSize
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compileReport (String bpid, LinkedList<ScanInfo> report, ReportCompiler reportCompiler)
specifier|public
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|compileReport
parameter_list|(
name|String
name|bpid
parameter_list|,
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|report
parameter_list|,
name|ReportCompiler
name|reportCompiler
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
return|return
name|compileReport
argument_list|(
name|getFinalizedDir
argument_list|(
name|bpid
argument_list|)
argument_list|,
name|getFinalizedDir
argument_list|(
name|bpid
argument_list|)
argument_list|,
name|report
argument_list|,
name|reportCompiler
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileIoProvider ()
specifier|public
name|FileIoProvider
name|getFileIoProvider
parameter_list|()
block|{
return|return
name|fileIoProvider
return|;
block|}
DECL|method|compileReport (File bpFinalizedDir, File dir, LinkedList<ScanInfo> report, ReportCompiler reportCompiler)
specifier|private
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|compileReport
parameter_list|(
name|File
name|bpFinalizedDir
parameter_list|,
name|File
name|dir
parameter_list|,
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|report
parameter_list|,
name|ReportCompiler
name|reportCompiler
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|reportCompiler
operator|.
name|throttle
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileNames
decl_stmt|;
try|try
block|{
name|fileNames
operator|=
name|fileIoProvider
operator|.
name|listDirectory
argument_list|(
name|this
argument_list|,
name|dir
argument_list|,
name|BlockDirFilter
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occured while compiling report: "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
comment|// Initiate a check on disk failure.
name|dataset
operator|.
name|datanode
operator|.
name|checkDiskErrorAsync
argument_list|()
expr_stmt|;
comment|// Ignore this directory and proceed.
return|return
name|report
return|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|fileNames
argument_list|)
expr_stmt|;
comment|/*      * Assumption: In the sorted list of files block file appears immediately      * before block metadata file. This is true for the current naming      * convention for block file blk_<blockid> and meta file      * blk_<blockid>_<genstamp>.meta      */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Make sure this thread can make a timely exit. With a low throttle
comment|// rate, completing a run can take a looooong time.
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|()
throw|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|fileNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|compileReport
argument_list|(
name|bpFinalizedDir
argument_list|,
name|file
argument_list|,
name|report
argument_list|,
name|reportCompiler
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|Block
operator|.
name|isBlockFilename
argument_list|(
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|isBlockMetaFile
argument_list|(
name|Block
operator|.
name|BLOCK_FILE_PREFIX
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|blockId
init|=
name|Block
operator|.
name|getBlockId
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|verifyFileLocation
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|bpFinalizedDir
argument_list|,
name|blockId
argument_list|)
expr_stmt|;
name|report
operator|.
name|add
argument_list|(
operator|new
name|ScanInfo
argument_list|(
name|blockId
argument_list|,
literal|null
argument_list|,
name|file
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|File
name|blockFile
init|=
name|file
decl_stmt|;
name|long
name|blockId
init|=
name|Block
operator|.
name|filename2id
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|metaFile
init|=
literal|null
decl_stmt|;
comment|// Skip all the files that start with block name until
comment|// getting to the metafile for the block
while|while
condition|(
name|i
operator|+
literal|1
operator|<
name|fileNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|File
name|blkMetaFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|fileNames
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|blkMetaFile
operator|.
name|isFile
argument_list|()
operator|&&
name|blkMetaFile
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|blockFile
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|isBlockMetaFile
argument_list|(
name|blockFile
operator|.
name|getName
argument_list|()
argument_list|,
name|blkMetaFile
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|metaFile
operator|=
name|blkMetaFile
expr_stmt|;
break|break;
block|}
block|}
name|verifyFileLocation
argument_list|(
name|blockFile
argument_list|,
name|bpFinalizedDir
argument_list|,
name|blockId
argument_list|)
expr_stmt|;
name|report
operator|.
name|add
argument_list|(
operator|new
name|ScanInfo
argument_list|(
name|blockId
argument_list|,
name|blockFile
argument_list|,
name|metaFile
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
comment|/**    * Helper method to determine if a file name is consistent with a block.    * meta-data file    *    * @param blockId the block ID    * @param metaFile the file to check    * @return whether the file name is a block meta-data file name    */
DECL|method|isBlockMetaFile (String blockId, String metaFile)
specifier|private
specifier|static
name|boolean
name|isBlockMetaFile
parameter_list|(
name|String
name|blockId
parameter_list|,
name|String
name|metaFile
parameter_list|)
block|{
return|return
name|metaFile
operator|.
name|startsWith
argument_list|(
name|blockId
argument_list|)
operator|&&
name|metaFile
operator|.
name|endsWith
argument_list|(
name|Block
operator|.
name|METADATA_EXTENSION
argument_list|)
return|;
block|}
comment|/**    * Verify whether the actual directory location of block file has the    * expected directory path computed using its block ID.    */
DECL|method|verifyFileLocation (File actualBlockFile, File bpFinalizedDir, long blockId)
specifier|private
name|void
name|verifyFileLocation
parameter_list|(
name|File
name|actualBlockFile
parameter_list|,
name|File
name|bpFinalizedDir
parameter_list|,
name|long
name|blockId
parameter_list|)
block|{
name|File
name|expectedBlockDir
init|=
name|DatanodeUtil
operator|.
name|idToBlockDir
argument_list|(
name|bpFinalizedDir
argument_list|,
name|blockId
argument_list|)
decl_stmt|;
name|File
name|actualBlockDir
init|=
name|actualBlockFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualBlockDir
operator|.
name|compareTo
argument_list|(
name|expectedBlockDir
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Block: "
operator|+
name|blockId
operator|+
literal|" found in invalid directory.  Expected directory: "
operator|+
name|expectedBlockDir
operator|+
literal|".  Actual directory: "
operator|+
name|actualBlockDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|moveBlockToTmpLocation (ExtendedBlock block, ReplicaInfo replicaInfo, int smallBufferSize, Configuration conf)
specifier|public
name|ReplicaInfo
name|moveBlockToTmpLocation
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|ReplicaInfo
name|replicaInfo
parameter_list|,
name|int
name|smallBufferSize
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|File
index|[]
name|blockFiles
init|=
name|FsDatasetImpl
operator|.
name|copyBlockFiles
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|,
name|replicaInfo
argument_list|,
name|getTmpDir
argument_list|(
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
argument_list|,
name|replicaInfo
operator|.
name|isOnTransientStorage
argument_list|()
argument_list|,
name|smallBufferSize
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ReplicaInfo
name|newReplicaInfo
init|=
operator|new
name|ReplicaBuilder
argument_list|(
name|ReplicaState
operator|.
name|TEMPORARY
argument_list|)
operator|.
name|setBlockId
argument_list|(
name|replicaInfo
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setGenerationStamp
argument_list|(
name|replicaInfo
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
operator|.
name|setFsVolume
argument_list|(
name|this
argument_list|)
operator|.
name|setDirectoryToUse
argument_list|(
name|blockFiles
index|[
literal|0
index|]
operator|.
name|getParentFile
argument_list|()
argument_list|)
operator|.
name|setBytesToReserve
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|newReplicaInfo
operator|.
name|setNumBytes
argument_list|(
name|blockFiles
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newReplicaInfo
return|;
block|}
DECL|method|copyBlockToLazyPersistLocation (String bpId, long blockId, long genStamp, ReplicaInfo replicaInfo, int smallBufferSize, Configuration conf)
specifier|public
name|File
index|[]
name|copyBlockToLazyPersistLocation
parameter_list|(
name|String
name|bpId
parameter_list|,
name|long
name|blockId
parameter_list|,
name|long
name|genStamp
parameter_list|,
name|ReplicaInfo
name|replicaInfo
parameter_list|,
name|int
name|smallBufferSize
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|lazyPersistDir
init|=
name|getLazyPersistDir
argument_list|(
name|bpId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lazyPersistDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|lazyPersistDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|FsDatasetImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"LazyWriter failed to create "
operator|+
name|lazyPersistDir
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"LazyWriter fail to find or "
operator|+
literal|"create lazy persist dir: "
operator|+
name|lazyPersistDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// No FsDatasetImpl lock for the file copy
name|File
index|[]
name|targetFiles
init|=
name|FsDatasetImpl
operator|.
name|copyBlockFiles
argument_list|(
name|blockId
argument_list|,
name|genStamp
argument_list|,
name|replicaInfo
argument_list|,
name|lazyPersistDir
argument_list|,
literal|true
argument_list|,
name|smallBufferSize
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|targetFiles
return|;
block|}
DECL|method|incrNumBlocks (String bpid)
specifier|public
name|void
name|incrNumBlocks
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|incrNumBlocks
argument_list|()
expr_stmt|;
block|}
DECL|method|resolveDuplicateReplicas (String bpid, ReplicaInfo memBlockInfo, ReplicaInfo diskBlockInfo, ReplicaMap volumeMap)
specifier|public
name|void
name|resolveDuplicateReplicas
parameter_list|(
name|String
name|bpid
parameter_list|,
name|ReplicaInfo
name|memBlockInfo
parameter_list|,
name|ReplicaInfo
name|diskBlockInfo
parameter_list|,
name|ReplicaMap
name|volumeMap
parameter_list|)
throws|throws
name|IOException
block|{
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|resolveDuplicateReplicas
argument_list|(
name|memBlockInfo
argument_list|,
name|diskBlockInfo
argument_list|,
name|volumeMap
argument_list|)
expr_stmt|;
block|}
DECL|method|activateSavedReplica (String bpid, ReplicaInfo replicaInfo, RamDiskReplica replicaState)
specifier|public
name|ReplicaInfo
name|activateSavedReplica
parameter_list|(
name|String
name|bpid
parameter_list|,
name|ReplicaInfo
name|replicaInfo
parameter_list|,
name|RamDiskReplica
name|replicaState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|activateSavedReplica
argument_list|(
name|replicaInfo
argument_list|,
name|replicaState
argument_list|)
return|;
block|}
block|}
end_class

end_unit

