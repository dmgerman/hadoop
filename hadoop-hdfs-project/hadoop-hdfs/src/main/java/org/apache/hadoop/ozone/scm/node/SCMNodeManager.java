begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnregisteredNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|StorageContainerNodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|VersionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|RegisteredCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|SCMCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|RegisteredCmdResponseProto
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|SCMVersionRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_comment
comment|/**  * Maintains information about the Datanodes on SCM side.  *<p>  * Heartbeats under SCM is very simple compared to HDFS heartbeatManager.  *<p>  * Here we maintain 3 maps, and we propagate a node from healthyNodesMap to  * staleNodesMap to deadNodesMap. This moving of a node from one map to another  * is controlled by 4 configuration variables. These variables define how many  * heartbeats must go missing for the node to move from one map to another.  *<p>  * Each heartbeat that SCMNodeManager receives is  put into heartbeatQueue. The  * worker thread wakes up and grabs that heartbeat from the queue. The worker  * thread will lookup the healthynodes map and update the timestamp if the entry  * is there. if not it will look up stale and deadnodes map.  *<p>  * The getNode(byState) functions make copy of node maps and then creates a list  * based on that. It should be assumed that these get functions always report  * *stale* information. For example, getting the deadNodeCount followed by  * getNodes(DEAD) could very well produce totally different count. Also  * getNodeCount(HEALTHY) + getNodeCount(DEAD) + getNodeCode(STALE), is not  * guaranteed to add up to the total nodes that we know off. Please treat all  * get functions in this file as a snap-shot of information that is inconsistent  * as soon as you read it.  */
end_comment

begin_class
DECL|class|SCMNodeManager
specifier|public
class|class
name|SCMNodeManager
implements|implements
name|NodeManager
implements|,
name|StorageContainerNodeProtocol
block|{
annotation|@
name|VisibleForTesting
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMNodeManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Key = NodeID, value = timestamp.    */
DECL|field|healthyNodes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|healthyNodes
decl_stmt|;
DECL|field|staleNodes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|staleNodes
decl_stmt|;
DECL|field|deadNodes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|deadNodes
decl_stmt|;
DECL|field|heartbeatQueue
specifier|private
specifier|final
name|Queue
argument_list|<
name|DatanodeID
argument_list|>
name|heartbeatQueue
decl_stmt|;
DECL|field|nodes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DatanodeID
argument_list|>
name|nodes
decl_stmt|;
DECL|field|healthyNodeCount
specifier|private
specifier|final
name|AtomicInteger
name|healthyNodeCount
decl_stmt|;
DECL|field|staleNodeCount
specifier|private
specifier|final
name|AtomicInteger
name|staleNodeCount
decl_stmt|;
DECL|field|deadNodeCount
specifier|private
specifier|final
name|AtomicInteger
name|deadNodeCount
decl_stmt|;
DECL|field|totalNodes
specifier|private
specifier|final
name|AtomicInteger
name|totalNodes
decl_stmt|;
DECL|field|staleNodeIntervalMs
specifier|private
specifier|final
name|long
name|staleNodeIntervalMs
decl_stmt|;
DECL|field|deadNodeIntervalMs
specifier|private
specifier|final
name|long
name|deadNodeIntervalMs
decl_stmt|;
DECL|field|heartbeatCheckerIntervalMs
specifier|private
specifier|final
name|long
name|heartbeatCheckerIntervalMs
decl_stmt|;
DECL|field|datanodeHBIntervalSeconds
specifier|private
specifier|final
name|long
name|datanodeHBIntervalSeconds
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|final
name|ScheduledExecutorService
name|executorService
decl_stmt|;
DECL|field|lastHBcheckStart
specifier|private
name|long
name|lastHBcheckStart
decl_stmt|;
DECL|field|lastHBcheckFinished
specifier|private
name|long
name|lastHBcheckFinished
init|=
literal|0
decl_stmt|;
DECL|field|lastHBProcessedCount
specifier|private
name|long
name|lastHBProcessedCount
decl_stmt|;
DECL|field|chillModeNodeCount
specifier|private
name|int
name|chillModeNodeCount
decl_stmt|;
DECL|field|maxHBToProcessPerLoop
specifier|private
specifier|final
name|int
name|maxHBToProcessPerLoop
decl_stmt|;
DECL|field|clusterID
specifier|private
specifier|final
name|String
name|clusterID
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|VersionInfo
name|version
decl_stmt|;
DECL|field|inManualChillMode
specifier|private
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|inManualChillMode
decl_stmt|;
DECL|field|commandQueue
specifier|private
specifier|final
name|CommandQueue
name|commandQueue
decl_stmt|;
comment|/**    * Constructs SCM machine Manager.    */
DECL|method|SCMNodeManager (Configuration conf, String clusterID)
specifier|public
name|SCMNodeManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|clusterID
parameter_list|)
block|{
name|heartbeatQueue
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
expr_stmt|;
name|healthyNodes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|deadNodes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|staleNodes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|nodes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|healthyNodeCount
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|staleNodeCount
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|deadNodeCount
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|totalNodes
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterID
operator|=
name|clusterID
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|VersionInfo
operator|.
name|getLatestVersion
argument_list|()
expr_stmt|;
name|commandQueue
operator|=
operator|new
name|CommandQueue
argument_list|()
expr_stmt|;
comment|// TODO: Support this value as a Percentage of known machines.
name|chillModeNodeCount
operator|=
literal|1
expr_stmt|;
name|staleNodeIntervalMs
operator|=
name|OzoneClientUtils
operator|.
name|getStaleNodeInterval
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|deadNodeIntervalMs
operator|=
name|OzoneClientUtils
operator|.
name|getDeadNodeInterval
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|heartbeatCheckerIntervalMs
operator|=
name|OzoneClientUtils
operator|.
name|getScmheartbeatCheckerInterval
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|datanodeHBIntervalSeconds
operator|=
name|OzoneClientUtils
operator|.
name|getScmHeartbeatInterval
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|maxHBToProcessPerLoop
operator|=
name|OzoneClientUtils
operator|.
name|getMaxHBToProcessPerLoop
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|executorService
operator|=
name|HadoopExecutors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"SCM Heartbeat Processing Thread - %d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|inManualChillMode
operator|=
name|Optional
operator|.
name|absent
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|heartbeatCheckerIntervalMs
operator|>
literal|0
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|heartbeatCheckerIntervalMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Removes a data node from the management of this Node Manager.    *    * @param node - DataNode.    * @throws UnregisteredNodeException    */
annotation|@
name|Override
DECL|method|removeNode (DatanodeID node)
specifier|public
name|void
name|removeNode
parameter_list|(
name|DatanodeID
name|node
parameter_list|)
throws|throws
name|UnregisteredNodeException
block|{
comment|// TODO : Fix me.
block|}
comment|/**    * Gets all datanodes that are in a certain state. This function works by    * taking a snapshot of the current collection and then returning the list    * from that collection. This means that real map might have changed by the    * time we return this list.    *    * @return List of Datanodes that are known to SCM in the requested state.    */
annotation|@
name|Override
DECL|method|getNodes (NODESTATE nodestate)
specifier|public
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|getNodes
parameter_list|(
name|NODESTATE
name|nodestate
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|set
decl_stmt|;
switch|switch
condition|(
name|nodestate
condition|)
block|{
case|case
name|HEALTHY
case|:
synchronized|synchronized
init|(
name|this
init|)
block|{
name|set
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|healthyNodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STALE
case|:
synchronized|synchronized
init|(
name|this
init|)
block|{
name|set
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|staleNodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEAD
case|:
synchronized|synchronized
init|(
name|this
init|)
block|{
name|set
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|deadNodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown node state requested."
argument_list|)
throw|;
block|}
return|return
name|set
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
name|nodes
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns all datanodes that are known to SCM.    *    * @return List of DatanodeIDs    */
annotation|@
name|Override
DECL|method|getAllNodes ()
specifier|public
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|getAllNodes
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|DatanodeID
argument_list|>
name|set
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|set
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|nodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|set
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
name|nodes
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the minimum number of nodes to get out of Chill mode.    *    * @return int    */
annotation|@
name|Override
DECL|method|getMinimumChillModeNodes ()
specifier|public
name|int
name|getMinimumChillModeNodes
parameter_list|()
block|{
return|return
name|chillModeNodeCount
return|;
block|}
comment|/**    * Sets the Minimum chill mode nodes count, used only in testing.    *    * @param count - Number of nodes.    */
annotation|@
name|VisibleForTesting
DECL|method|setMinimumChillModeNodes (int count)
specifier|public
name|void
name|setMinimumChillModeNodes
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|chillModeNodeCount
operator|=
name|count
expr_stmt|;
block|}
comment|/**    * Reports if we have exited out of chill mode.    *    * @return true if we are out of chill mode.    */
annotation|@
name|Override
DECL|method|isOutOfNodeChillMode ()
specifier|public
name|boolean
name|isOutOfNodeChillMode
parameter_list|()
block|{
if|if
condition|(
name|inManualChillMode
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
operator|!
name|inManualChillMode
operator|.
name|get
argument_list|()
return|;
block|}
return|return
operator|(
name|totalNodes
operator|.
name|get
argument_list|()
operator|>=
name|getMinimumChillModeNodes
argument_list|()
operator|)
return|;
block|}
comment|/**    * Clears the manual chill mode.    */
annotation|@
name|Override
DECL|method|clearChillModeFlag ()
specifier|public
name|void
name|clearChillModeFlag
parameter_list|()
block|{
name|this
operator|.
name|inManualChillMode
operator|=
name|Optional
operator|.
name|absent
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns chill mode Status string.    * @return String    */
annotation|@
name|Override
DECL|method|getChillModeStatus ()
specifier|public
name|String
name|getChillModeStatus
parameter_list|()
block|{
if|if
condition|(
name|inManualChillMode
operator|.
name|isPresent
argument_list|()
operator|&&
name|inManualChillMode
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|"Manual chill mode is set to true."
operator|+
name|getNodeStatus
argument_list|()
return|;
block|}
if|if
condition|(
name|inManualChillMode
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|inManualChillMode
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|"Manual chill mode is set to false."
operator|+
name|getNodeStatus
argument_list|()
return|;
block|}
if|if
condition|(
name|isOutOfNodeChillMode
argument_list|()
condition|)
block|{
return|return
literal|"Out of chill mode."
operator|+
name|getNodeStatus
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|"Still in chill mode. Waiting on nodes to report in."
operator|+
name|getNodeStatus
argument_list|()
return|;
block|}
block|}
comment|/**    * Returns a node status string.    * @return - String    */
DECL|method|getNodeStatus ()
specifier|private
name|String
name|getNodeStatus
parameter_list|()
block|{
specifier|final
name|String
name|chillModeStatus
init|=
literal|" %d of out of total "
operator|+
literal|"%d nodes have reported in."
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|chillModeStatus
argument_list|,
name|totalNodes
operator|.
name|get
argument_list|()
argument_list|,
name|getMinimumChillModeNodes
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the status of Manual chill Mode flag.    *    * @return true if forceEnterChillMode has been called, false if    * forceExitChillMode or status is not set. eg. clearChillModeFlag.    */
annotation|@
name|Override
DECL|method|isInManualChillMode ()
specifier|public
name|boolean
name|isInManualChillMode
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|inManualChillMode
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|inManualChillMode
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Forcefully exits the chill mode even if we have not met the minimum    * criteria of exiting the chill mode.    */
annotation|@
name|Override
DECL|method|forceExitChillMode ()
specifier|public
name|void
name|forceExitChillMode
parameter_list|()
block|{
name|this
operator|.
name|inManualChillMode
operator|=
name|Optional
operator|.
name|of
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Forcefully enters chill mode, even if all chill mode conditions are met.    */
annotation|@
name|Override
DECL|method|forceEnterChillMode ()
specifier|public
name|void
name|forceEnterChillMode
parameter_list|()
block|{
name|this
operator|.
name|inManualChillMode
operator|=
name|Optional
operator|.
name|of
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the Number of Datanodes by State they are in.    *    * @return int -- count    */
annotation|@
name|Override
DECL|method|getNodeCount (NODESTATE nodestate)
specifier|public
name|int
name|getNodeCount
parameter_list|(
name|NODESTATE
name|nodestate
parameter_list|)
block|{
switch|switch
condition|(
name|nodestate
condition|)
block|{
case|case
name|HEALTHY
case|:
return|return
name|healthyNodeCount
operator|.
name|get
argument_list|()
return|;
case|case
name|STALE
case|:
return|return
name|staleNodeCount
operator|.
name|get
argument_list|()
return|;
case|case
name|DEAD
case|:
return|return
name|deadNodeCount
operator|.
name|get
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown node state requested."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Used for testing.    *    * @return true if the HB check is done.    */
annotation|@
name|VisibleForTesting
DECL|method|waitForHeartbeatThead ()
specifier|public
name|boolean
name|waitForHeartbeatThead
parameter_list|()
block|{
return|return
name|lastHBcheckFinished
operator|!=
literal|0
return|;
block|}
comment|/**    * This is the real worker thread that processes the HB queue. We do the    * following things in this thread.    *<p>    * Process the Heartbeats that are in the HB Queue. Move Stale or Dead node to    * healthy if we got a heartbeat from them. Move Stales Node to dead node    * table if it is needed. Move healthy nodes to stale nodes if it is needed.    *<p>    * if it is a new node, we call register node and add it to the list of nodes.    * This will be replaced when we support registration of a node in SCM.    *    * @see Thread#run()    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|lastHBcheckStart
operator|=
name|monotonicNow
argument_list|()
expr_stmt|;
name|lastHBProcessedCount
operator|=
literal|0
expr_stmt|;
comment|// Process the whole queue.
while|while
condition|(
operator|!
name|heartbeatQueue
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|lastHBProcessedCount
operator|<
name|maxHBToProcessPerLoop
operator|)
condition|)
block|{
name|DatanodeID
name|datanodeID
init|=
name|heartbeatQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|handleHeartbeat
argument_list|(
name|datanodeID
argument_list|)
expr_stmt|;
block|}
comment|// we are shutting down or something give up processing the rest of
comment|// HBs. This will terminate the HB processing thread.
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Current Thread is isInterrupted, shutting down HB "
operator|+
literal|"processing thread for Node Manager."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|lastHBProcessedCount
operator|>=
name|maxHBToProcessPerLoop
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"SCM is being flooded by heartbeats. Not able to keep up with"
operator|+
literal|" the heartbeat counts. Processed {} heartbeats. Breaking out of"
operator|+
literal|" loop. Leaving rest to be processed later. "
argument_list|,
name|lastHBProcessedCount
argument_list|)
expr_stmt|;
block|}
comment|// Iterate over the Stale nodes and decide if we need to move any node to
comment|// dead State.
name|long
name|currentTime
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|staleNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|currentTime
operator|-
name|entry
operator|.
name|getValue
argument_list|()
operator|>
name|deadNodeIntervalMs
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|moveStaleNodeToDead
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Iterate over the healthy nodes and decide if we need to move any node to
comment|// Stale State.
name|currentTime
operator|=
name|monotonicNow
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|healthyNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|currentTime
operator|-
name|entry
operator|.
name|getValue
argument_list|()
operator|>
name|staleNodeIntervalMs
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|moveHealthyNodeToStale
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|lastHBcheckFinished
operator|=
name|monotonicNow
argument_list|()
expr_stmt|;
name|monitorHBProcessingTime
argument_list|()
expr_stmt|;
comment|// we purposefully make this non-deterministic. Instead of using a
comment|// scheduleAtFixedFrequency  we will just go to sleep
comment|// and wake up at the next rendezvous point, which is currentTime +
comment|// heartbeatCheckerIntervalMs. This leads to the issue that we are now
comment|// heart beating not at a fixed cadence, but clock tick + time taken to
comment|// work.
comment|//
comment|// This time taken to work can skew the heartbeat processor thread.
comment|// The reason why we don't care is because of the following reasons.
comment|//
comment|// 1. checkerInterval is general many magnitudes faster than datanode HB
comment|// frequency.
comment|//
comment|// 2. if we have too much nodes, the SCM would be doing only HB
comment|// processing, this could lead to SCM's CPU starvation. With this
comment|// approach we always guarantee that  HB thread sleeps for a little while.
comment|//
comment|// 3. It is possible that we will never finish processing the HB's in the
comment|// thread. But that means we have a mis-configured system. We will warn
comment|// the users by logging that information.
comment|//
comment|// 4. And the most important reason, heartbeats are not blocked even if
comment|// this thread does not run, they will go into the processing queue.
if|if
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|executorService
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|heartbeatCheckerIntervalMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Current Thread is interrupted, shutting down HB processing "
operator|+
literal|"thread for Node Manager."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If we have taken too much time for HB processing, log that information.    */
DECL|method|monitorHBProcessingTime ()
specifier|private
name|void
name|monitorHBProcessingTime
parameter_list|()
block|{
if|if
condition|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|lastHBcheckFinished
operator|-
name|lastHBcheckStart
argument_list|)
operator|>
name|datanodeHBIntervalSeconds
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Total time spend processing datanode HB's is greater than "
operator|+
literal|"configured values for datanode heartbeats. Please adjust the"
operator|+
literal|" heartbeat configs. Time Spend on HB processing: {} seconds "
operator|+
literal|"Datanode heartbeat Interval: {} seconds , heartbeats "
operator|+
literal|"processed: {}"
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|lastHBcheckFinished
operator|-
name|lastHBcheckStart
argument_list|)
argument_list|,
name|datanodeHBIntervalSeconds
argument_list|,
name|lastHBProcessedCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Moves a Healthy node to a Stale node state.    *    * @param entry - Map Entry    */
DECL|method|moveHealthyNodeToStale (Map.Entry<String, Long> entry)
specifier|private
name|void
name|moveHealthyNodeToStale
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Moving healthy node to stale: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|healthyNodes
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|healthyNodeCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|staleNodes
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|staleNodeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Moves a Stale node to a dead node state.    *    * @param entry - Map Entry    */
DECL|method|moveStaleNodeToDead (Map.Entry<String, Long> entry)
specifier|private
name|void
name|moveStaleNodeToDead
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Moving stale node to dead: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|staleNodes
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|staleNodeCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|deadNodes
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|deadNodeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Handles a single heartbeat from a datanode.    *    * @param datanodeID - datanode ID.    */
DECL|method|handleHeartbeat (DatanodeID datanodeID)
specifier|private
name|void
name|handleHeartbeat
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|)
block|{
name|lastHBProcessedCount
operator|++
expr_stmt|;
comment|// If this node is already in the list of known and healthy nodes
comment|// just update the last timestamp and return.
if|if
condition|(
name|healthyNodes
operator|.
name|containsKey
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
name|healthyNodes
operator|.
name|put
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// A stale node has heartbeat us we need to remove the node from stale
comment|// list and move to healthy list.
if|if
condition|(
name|staleNodes
operator|.
name|containsKey
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
name|staleNodes
operator|.
name|remove
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|healthyNodes
operator|.
name|put
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
name|healthyNodeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|staleNodeCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// A dead node has heartbeat us, we need to remove that node from dead
comment|// node list and move it to the healthy list.
if|if
condition|(
name|deadNodes
operator|.
name|containsKey
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
name|deadNodes
operator|.
name|remove
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|healthyNodes
operator|.
name|put
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
name|deadNodeCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|healthyNodeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Closes this stream and releases any system resources associated with it. If    * the stream is already closed then invoking this method has no effect.    *    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to shutdown NodeManager properly."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLastHBProcessedCount ()
name|long
name|getLastHBProcessedCount
parameter_list|()
block|{
return|return
name|lastHBProcessedCount
return|;
block|}
comment|/**    * Gets the version info from SCM.    *    * @param versionRequest - version Request.    * @return - returns SCM version info and other required information needed by    * datanode.    */
annotation|@
name|Override
DECL|method|getVersion (SCMVersionRequestProto versionRequest)
specifier|public
name|VersionResponse
name|getVersion
parameter_list|(
name|SCMVersionRequestProto
name|versionRequest
parameter_list|)
block|{
return|return
name|VersionResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|this
operator|.
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Register the node if the node finds that it is not registered with any    * SCM.    *    * @param datanodeID - Send datanodeID with Node info. This function    *                   generates and assigns new datanode ID for the datanode.    *                   This allows SCM to be run independent of Namenode if    *                   required.    *    * @return SCMHeartbeatResponseProto    */
annotation|@
name|Override
DECL|method|register (DatanodeID datanodeID)
specifier|public
name|SCMCommand
name|register
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|)
block|{
name|SCMCommand
name|errorCode
init|=
name|verifyDatanodeUUID
argument_list|(
name|datanodeID
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorCode
operator|!=
literal|null
condition|)
block|{
return|return
name|errorCode
return|;
block|}
name|DatanodeID
name|newDatanodeID
init|=
operator|new
name|DatanodeID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|datanodeID
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|newDatanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|newDatanodeID
argument_list|)
expr_stmt|;
name|totalNodes
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|healthyNodes
operator|.
name|put
argument_list|(
name|newDatanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
name|healthyNodeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Data node with ID: {} Registered."
argument_list|,
name|newDatanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|RegisteredCommand
operator|.
name|newBuilder
argument_list|()
operator|.
name|setErrorCode
argument_list|(
name|ErrorCode
operator|.
name|success
argument_list|)
operator|.
name|setDatanodeUUID
argument_list|(
name|newDatanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|this
operator|.
name|clusterID
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Verifies the datanode does not have a valid UUID already.    *    * @param datanodeID - Datanode UUID.    * @return SCMCommand    */
DECL|method|verifyDatanodeUUID (DatanodeID datanodeID)
specifier|private
name|SCMCommand
name|verifyDatanodeUUID
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|)
block|{
comment|// Make sure that we return the right error code, so that
comment|// data node can log the correct error. if it is already registered then
comment|// datanode should move to heartbeat state. It implies that somehow we
comment|// have an error where the data node is trying to re-register.
comment|//
comment|// We are going to let the datanode know that there is an error but allow it
comment|// to recover by sending it the right info that is needed for recovery.
if|if
condition|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
operator|!=
literal|null
operator|&&
name|nodes
operator|.
name|containsKey
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Datanode is already registered. Datanode: {}"
argument_list|,
name|datanodeID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|RegisteredCommand
operator|.
name|newBuilder
argument_list|()
operator|.
name|setErrorCode
argument_list|(
name|ErrorCode
operator|.
name|errorNodeAlreadyRegistered
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|this
operator|.
name|clusterID
argument_list|)
operator|.
name|setDatanodeUUID
argument_list|(
name|datanodeID
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Send heartbeat to indicate the datanode is alive and doing well.    *    * @param datanodeID - Datanode ID.    * @return SCMheartbeat response.    * @throws IOException    */
annotation|@
name|Override
DECL|method|sendHeartbeat (DatanodeID datanodeID)
specifier|public
name|List
argument_list|<
name|SCMCommand
argument_list|>
name|sendHeartbeat
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|)
block|{
comment|// Checking for NULL to make sure that we don't get
comment|// an exception from ConcurrentList.
comment|// This could be a problem in tests, if this function is invoked via
comment|// protobuf, transport layer will guarantee that this is not null.
if|if
condition|(
name|datanodeID
operator|!=
literal|null
condition|)
block|{
name|heartbeatQueue
operator|.
name|add
argument_list|(
name|datanodeID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Datanode ID in heartbeat is null"
argument_list|)
expr_stmt|;
block|}
return|return
name|commandQueue
operator|.
name|getCommand
argument_list|(
name|datanodeID
argument_list|)
return|;
block|}
block|}
end_class

end_unit

