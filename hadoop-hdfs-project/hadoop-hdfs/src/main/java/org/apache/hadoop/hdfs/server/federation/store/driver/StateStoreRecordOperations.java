begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store.driver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|BaseRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|AtMostOnce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|Idempotent
import|;
end_import

begin_comment
comment|/**  * Operations for a driver to manage records in the State Store.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|interface|StateStoreRecordOperations
specifier|public
interface|interface
name|StateStoreRecordOperations
block|{
comment|/**    * Get all records of the requested record class from the data store. To use    * the default implementations in this class, getAll must return new instances    * of the records on each call. It is recommended to override the default    * implementations for better performance.    *    * @param clazz Class of record to fetch.    * @return List of all records that match the clazz.    * @throws IOException Throws exception if unable to query the data store.    */
annotation|@
name|Idempotent
DECL|method|get (Class<T> clazz)
argument_list|<
name|T
extends|extends
name|BaseRecord
argument_list|>
name|QueryResult
argument_list|<
name|T
argument_list|>
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get all records of the requested record class from the data store. To use    * the default implementations in this class, getAll must return new instances    * of the records on each call. It is recommended to override the default    * implementations for better performance.    *    * @param clazz Class of record to fetch.    * @param sub Sub path.    * @return List of all records that match the clazz and the sub path.    * @throws IOException    */
annotation|@
name|Idempotent
DECL|method|get (Class<T> clazz, String sub)
argument_list|<
name|T
extends|extends
name|BaseRecord
argument_list|>
name|QueryResult
argument_list|<
name|T
argument_list|>
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|sub
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get a single record from the store that matches the query.    *    * @param clazz Class of record to fetch.    * @param query Map of field names and objects to filter results.    * @return A single record matching the query. Null if there are no matching    *         records or more than one matching record in the store.    * @throws IOException If multiple records match or if the data store cannot    *           be queried.    */
annotation|@
name|Idempotent
DECL|method|get (Class<T> clazz, Map<String, String> query)
argument_list|<
name|T
extends|extends
name|BaseRecord
argument_list|>
name|T
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|query
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get multiple records from the store that match a query. This method    * assumes the underlying driver does not support filtering. If the driver    * supports filtering it should overwrite this method.    *    * @param clazz Class of record to fetch.    * @param query Map of field names and objects to filter results.    * @return Records of type clazz that match the query or empty list if none    *         are found.    * @throws IOException Throws exception if unable to query the data store.    */
annotation|@
name|Idempotent
DECL|method|getMultiple ( Class<T> clazz, Map<String, String> query)
argument_list|<
name|T
extends|extends
name|BaseRecord
argument_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getMultiple
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|query
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Creates a single record. Optionally updates an existing record with same    * primary key.    *    * @param record The record to insert or update.    * @param allowUpdate True if update of exiting record is allowed.    * @param errorIfExists True if an error should be returned when inserting    *          an existing record. Only used if allowUpdate = false.    * @return True if the operation was successful.    *    * @throws IOException Throws exception if unable to query the data store.    */
annotation|@
name|AtMostOnce
DECL|method|put ( T record, boolean allowUpdate, boolean errorIfExists)
argument_list|<
name|T
extends|extends
name|BaseRecord
argument_list|>
name|boolean
name|put
parameter_list|(
name|T
name|record
parameter_list|,
name|boolean
name|allowUpdate
parameter_list|,
name|boolean
name|errorIfExists
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Creates multiple records. Optionally updates existing records that have    * the same primary key.    *    * @param records List of data records to update or create. All records must    *                be of class clazz.    * @param clazz Record class of records.    * @param allowUpdate True if update of exiting record is allowed.    * @param errorIfExists True if an error should be returned when inserting    *          an existing record. Only used if allowUpdate = false.    * @return true if all operations were successful.    *    * @throws IOException Throws exception if unable to query the data store.    */
annotation|@
name|AtMostOnce
DECL|method|putAll ( List<T> records, boolean allowUpdate, boolean errorIfExists)
argument_list|<
name|T
extends|extends
name|BaseRecord
argument_list|>
name|boolean
name|putAll
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|records
parameter_list|,
name|boolean
name|allowUpdate
parameter_list|,
name|boolean
name|errorIfExists
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove a single record.    *    * @param record Record to be removed.    * @return true If the record was successfully removed. False if the record    *              could not be removed or not stored.    * @throws IOException Throws exception if unable to query the data store.    */
annotation|@
name|AtMostOnce
DECL|method|remove (T record)
argument_list|<
name|T
extends|extends
name|BaseRecord
argument_list|>
name|boolean
name|remove
parameter_list|(
name|T
name|record
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove all records of this class from the store.    *    * @param clazz Class of records to remove.    * @return True if successful.    * @throws IOException Throws exception if unable to query the data store.    */
annotation|@
name|AtMostOnce
DECL|method|removeAll (Class<T> clazz)
argument_list|<
name|T
extends|extends
name|BaseRecord
argument_list|>
name|boolean
name|removeAll
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Remove multiple records of a specific class that match a query. Requires    * the getAll implementation to fetch fresh records on each call.    *    * @param clazz Class of record to remove.    * @param filter matching filter to remove.    * @return The number of records removed.    * @throws IOException Throws exception if unable to query the data store.    */
annotation|@
name|AtMostOnce
DECL|method|remove (Class<T> clazz, Map<String, String> filter)
argument_list|<
name|T
extends|extends
name|BaseRecord
argument_list|>
name|int
name|remove
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filter
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

