begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSExceptionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnresolvedPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeAttributeProvider
operator|.
name|AccessControlEnforcer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**   * Class that helps in checking file system permission.  * The state of this class need not be synchronized as it has data structures that  * are read-only.  *   * Some of the helper methods are guarded by {@link FSNamesystem#readLock()}.  */
end_comment

begin_class
DECL|class|FSPermissionChecker
specifier|public
class|class
name|FSPermissionChecker
implements|implements
name|AccessControlEnforcer
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getPath (byte[][] components, int start, int end)
specifier|private
specifier|static
name|String
name|getPath
parameter_list|(
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|DFSUtil
operator|.
name|byteArray2PathString
argument_list|(
name|components
argument_list|,
name|start
argument_list|,
name|end
operator|-
name|start
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/** @return a string for throwing {@link AccessControlException} */
DECL|method|toAccessControlString (INodeAttributes inodeAttrib, String path, FsAction access)
specifier|private
name|String
name|toAccessControlString
parameter_list|(
name|INodeAttributes
name|inodeAttrib
parameter_list|,
name|String
name|path
parameter_list|,
name|FsAction
name|access
parameter_list|)
block|{
return|return
name|toAccessControlString
argument_list|(
name|inodeAttrib
argument_list|,
name|path
argument_list|,
name|access
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** @return a string for throwing {@link AccessControlException} */
DECL|method|toAccessControlString (INodeAttributes inodeAttrib, String path, FsAction access, boolean deniedFromAcl)
specifier|private
name|String
name|toAccessControlString
parameter_list|(
name|INodeAttributes
name|inodeAttrib
parameter_list|,
name|String
name|path
parameter_list|,
name|FsAction
name|access
parameter_list|,
name|boolean
name|deniedFromAcl
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Permission denied: "
argument_list|)
operator|.
name|append
argument_list|(
literal|"user="
argument_list|)
operator|.
name|append
argument_list|(
name|getUser
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"access="
argument_list|)
operator|.
name|append
argument_list|(
name|access
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"inode=\""
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|"\":"
argument_list|)
operator|.
name|append
argument_list|(
name|inodeAttrib
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|inodeAttrib
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|inodeAttrib
operator|.
name|isDirectory
argument_list|()
condition|?
literal|'d'
else|:
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|inodeAttrib
operator|.
name|getFsPermission
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deniedFromAcl
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|fsOwner
specifier|private
specifier|final
name|String
name|fsOwner
decl_stmt|;
DECL|field|supergroup
specifier|private
specifier|final
name|String
name|supergroup
decl_stmt|;
DECL|field|callerUgi
specifier|private
specifier|final
name|UserGroupInformation
name|callerUgi
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|groups
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|groups
decl_stmt|;
DECL|field|isSuper
specifier|private
specifier|final
name|boolean
name|isSuper
decl_stmt|;
DECL|field|attributeProvider
specifier|private
specifier|final
name|INodeAttributeProvider
name|attributeProvider
decl_stmt|;
DECL|method|FSPermissionChecker (String fsOwner, String supergroup, UserGroupInformation callerUgi, INodeAttributeProvider attributeProvider)
specifier|protected
name|FSPermissionChecker
parameter_list|(
name|String
name|fsOwner
parameter_list|,
name|String
name|supergroup
parameter_list|,
name|UserGroupInformation
name|callerUgi
parameter_list|,
name|INodeAttributeProvider
name|attributeProvider
parameter_list|)
block|{
name|this
operator|.
name|fsOwner
operator|=
name|fsOwner
expr_stmt|;
name|this
operator|.
name|supergroup
operator|=
name|supergroup
expr_stmt|;
name|this
operator|.
name|callerUgi
operator|=
name|callerUgi
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|callerUgi
operator|.
name|getGroups
argument_list|()
expr_stmt|;
name|user
operator|=
name|callerUgi
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
name|isSuper
operator|=
name|user
operator|.
name|equals
argument_list|(
name|fsOwner
argument_list|)
operator|||
name|groups
operator|.
name|contains
argument_list|(
name|supergroup
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributeProvider
operator|=
name|attributeProvider
expr_stmt|;
block|}
DECL|method|isMemberOfGroup (String group)
specifier|public
name|boolean
name|isMemberOfGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
return|return
name|groups
operator|.
name|contains
argument_list|(
name|group
argument_list|)
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|isSuperUser ()
specifier|public
name|boolean
name|isSuperUser
parameter_list|()
block|{
return|return
name|isSuper
return|;
block|}
DECL|method|getAttributesProvider ()
specifier|public
name|INodeAttributeProvider
name|getAttributesProvider
parameter_list|()
block|{
return|return
name|attributeProvider
return|;
block|}
DECL|method|getAccessControlEnforcer ()
specifier|private
name|AccessControlEnforcer
name|getAccessControlEnforcer
parameter_list|()
block|{
return|return
operator|(
name|attributeProvider
operator|!=
literal|null
operator|)
condition|?
name|attributeProvider
operator|.
name|getExternalAccessControlEnforcer
argument_list|(
name|this
argument_list|)
else|:
name|this
return|;
block|}
comment|/**    * Verify if the caller has the required permission. This will result into     * an exception if the caller is not allowed to access the resource.    */
DECL|method|checkSuperuserPrivilege ()
specifier|public
name|void
name|checkSuperuserPrivilege
parameter_list|()
throws|throws
name|AccessControlException
block|{
if|if
condition|(
operator|!
name|isSuperUser
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Access denied for user "
operator|+
name|getUser
argument_list|()
operator|+
literal|". Superuser privilege is required"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check whether current user have permissions to access the path.    * Traverse is always checked.    *    * Parent path means the parent directory for the path.    * Ancestor path means the last (the closest) existing ancestor directory    * of the path.    * Note that if the parent path exists,    * then the parent path and the ancestor path are the same.    *    * For example, suppose the path is "/foo/bar/baz".    * No matter baz is a file or a directory,    * the parent path is "/foo/bar".    * If bar exists, then the ancestor path is also "/foo/bar".    * If bar does not exist and foo exists,    * then the ancestor path is "/foo".    * Further, if both foo and bar do not exist,    * then the ancestor path is "/".    *    * @param doCheckOwner Require user to be the owner of the path?    * @param ancestorAccess The access required by the ancestor of the path.    * @param parentAccess The access required by the parent of the path.    * @param access The access required by the path.    * @param subAccess If path is a directory,    * it is the access required of the path and all the sub-directories.    * If path is not a directory, there is no effect.    * @param ignoreEmptyDir Ignore permission checking for empty directory?    * @throws AccessControlException    *     * Guarded by {@link FSNamesystem#readLock()}    * Caller of this method must hold that lock.    */
DECL|method|checkPermission (INodesInPath inodesInPath, boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess, FsAction access, FsAction subAccess, boolean ignoreEmptyDir)
name|void
name|checkPermission
parameter_list|(
name|INodesInPath
name|inodesInPath
parameter_list|,
name|boolean
name|doCheckOwner
parameter_list|,
name|FsAction
name|ancestorAccess
parameter_list|,
name|FsAction
name|parentAccess
parameter_list|,
name|FsAction
name|access
parameter_list|,
name|FsAction
name|subAccess
parameter_list|,
name|boolean
name|ignoreEmptyDir
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ACCESS CHECK: "
operator|+
name|this
operator|+
literal|", doCheckOwner="
operator|+
name|doCheckOwner
operator|+
literal|", ancestorAccess="
operator|+
name|ancestorAccess
operator|+
literal|", parentAccess="
operator|+
name|parentAccess
operator|+
literal|", access="
operator|+
name|access
operator|+
literal|", subAccess="
operator|+
name|subAccess
operator|+
literal|", ignoreEmptyDir="
operator|+
name|ignoreEmptyDir
argument_list|)
expr_stmt|;
block|}
comment|// check if (parentAccess != null)&& file exists, then check sb
comment|// If resolveLink, the check is performed on the link target.
specifier|final
name|int
name|snapshotId
init|=
name|inodesInPath
operator|.
name|getPathSnapshotId
argument_list|()
decl_stmt|;
specifier|final
name|INode
index|[]
name|inodes
init|=
name|inodesInPath
operator|.
name|getINodesArray
argument_list|()
decl_stmt|;
specifier|final
name|INodeAttributes
index|[]
name|inodeAttrs
init|=
operator|new
name|INodeAttributes
index|[
name|inodes
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|components
init|=
name|inodesInPath
operator|.
name|getPathComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inodes
operator|.
name|length
operator|&&
name|inodes
index|[
name|i
index|]
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|inodeAttrs
index|[
name|i
index|]
operator|=
name|getINodeAttrs
argument_list|(
name|components
argument_list|,
name|i
argument_list|,
name|inodes
index|[
name|i
index|]
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
name|String
name|path
init|=
name|inodesInPath
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|int
name|ancestorIndex
init|=
name|inodes
operator|.
name|length
operator|-
literal|2
decl_stmt|;
name|AccessControlEnforcer
name|enforcer
init|=
name|getAccessControlEnforcer
argument_list|()
decl_stmt|;
name|enforcer
operator|.
name|checkPermission
argument_list|(
name|fsOwner
argument_list|,
name|supergroup
argument_list|,
name|callerUgi
argument_list|,
name|inodeAttrs
argument_list|,
name|inodes
argument_list|,
name|components
argument_list|,
name|snapshotId
argument_list|,
name|path
argument_list|,
name|ancestorIndex
argument_list|,
name|doCheckOwner
argument_list|,
name|ancestorAccess
argument_list|,
name|parentAccess
argument_list|,
name|access
argument_list|,
name|subAccess
argument_list|,
name|ignoreEmptyDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check permission only for the given inode (not checking the children's    * access).    *    * @param inode the inode to check.    * @param snapshotId the snapshot id.    * @param access the target access.    * @throws AccessControlException    */
DECL|method|checkPermission (INode inode, int snapshotId, FsAction access)
name|void
name|checkPermission
parameter_list|(
name|INode
name|inode
parameter_list|,
name|int
name|snapshotId
parameter_list|,
name|FsAction
name|access
parameter_list|)
throws|throws
name|AccessControlException
block|{
try|try
block|{
name|byte
index|[]
index|[]
name|localComponents
init|=
block|{
name|inode
operator|.
name|getLocalNameBytes
argument_list|()
block|}
decl_stmt|;
name|INodeAttributes
index|[]
name|iNodeAttr
init|=
block|{
name|inode
operator|.
name|getSnapshotINode
argument_list|(
name|snapshotId
argument_list|)
block|}
decl_stmt|;
name|AccessControlEnforcer
name|enforcer
init|=
name|getAccessControlEnforcer
argument_list|()
decl_stmt|;
name|enforcer
operator|.
name|checkPermission
argument_list|(
name|fsOwner
argument_list|,
name|supergroup
argument_list|,
name|callerUgi
argument_list|,
name|iNodeAttr
argument_list|,
comment|// single inode attr in the array
operator|new
name|INode
index|[]
block|{
name|inode
block|}
argument_list|,
comment|// single inode in the array
name|localComponents
argument_list|,
name|snapshotId
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
comment|// this will skip checkTraverse() because
comment|// not checking ancestor here
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|access
argument_list|,
comment|// the target access to be checked against the inode
literal|null
argument_list|,
comment|// passing null sub access avoids checking children
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|toAccessControlString
argument_list|(
name|inode
argument_list|,
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|access
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|checkPermission (String fsOwner, String supergroup, UserGroupInformation callerUgi, INodeAttributes[] inodeAttrs, INode[] inodes, byte[][] components, int snapshotId, String path, int ancestorIndex, boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess, FsAction access, FsAction subAccess, boolean ignoreEmptyDir)
specifier|public
name|void
name|checkPermission
parameter_list|(
name|String
name|fsOwner
parameter_list|,
name|String
name|supergroup
parameter_list|,
name|UserGroupInformation
name|callerUgi
parameter_list|,
name|INodeAttributes
index|[]
name|inodeAttrs
parameter_list|,
name|INode
index|[]
name|inodes
parameter_list|,
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|snapshotId
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|ancestorIndex
parameter_list|,
name|boolean
name|doCheckOwner
parameter_list|,
name|FsAction
name|ancestorAccess
parameter_list|,
name|FsAction
name|parentAccess
parameter_list|,
name|FsAction
name|access
parameter_list|,
name|FsAction
name|subAccess
parameter_list|,
name|boolean
name|ignoreEmptyDir
parameter_list|)
throws|throws
name|AccessControlException
block|{
for|for
control|(
init|;
name|ancestorIndex
operator|>=
literal|0
operator|&&
name|inodes
index|[
name|ancestorIndex
index|]
operator|==
literal|null
condition|;
name|ancestorIndex
operator|--
control|)
empty_stmt|;
try|try
block|{
name|checkTraverse
argument_list|(
name|inodeAttrs
argument_list|,
name|inodes
argument_list|,
name|components
argument_list|,
name|ancestorIndex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnresolvedPathException
decl||
name|ParentNotDirectoryException
name|ex
parameter_list|)
block|{
comment|// must tunnel these exceptions out to avoid breaking interface for
comment|// external enforcer
throw|throw
operator|new
name|TraverseAccessControlException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
specifier|final
name|INodeAttributes
name|last
init|=
name|inodeAttrs
index|[
name|inodeAttrs
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|parentAccess
operator|!=
literal|null
operator|&&
name|parentAccess
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
operator|&&
name|inodeAttrs
operator|.
name|length
operator|>
literal|1
operator|&&
name|last
operator|!=
literal|null
condition|)
block|{
name|checkStickyBit
argument_list|(
name|inodeAttrs
argument_list|,
name|components
argument_list|,
name|inodeAttrs
operator|.
name|length
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ancestorAccess
operator|!=
literal|null
operator|&&
name|inodeAttrs
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|check
argument_list|(
name|inodeAttrs
argument_list|,
name|components
argument_list|,
name|ancestorIndex
argument_list|,
name|ancestorAccess
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentAccess
operator|!=
literal|null
operator|&&
name|inodeAttrs
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|check
argument_list|(
name|inodeAttrs
argument_list|,
name|components
argument_list|,
name|inodeAttrs
operator|.
name|length
operator|-
literal|2
argument_list|,
name|parentAccess
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|access
operator|!=
literal|null
condition|)
block|{
name|check
argument_list|(
name|inodeAttrs
argument_list|,
name|components
argument_list|,
name|inodeAttrs
operator|.
name|length
operator|-
literal|1
argument_list|,
name|access
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subAccess
operator|!=
literal|null
condition|)
block|{
name|INode
name|rawLast
init|=
name|inodes
index|[
name|inodeAttrs
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|checkSubAccess
argument_list|(
name|components
argument_list|,
name|inodeAttrs
operator|.
name|length
operator|-
literal|1
argument_list|,
name|rawLast
argument_list|,
name|snapshotId
argument_list|,
name|subAccess
argument_list|,
name|ignoreEmptyDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doCheckOwner
condition|)
block|{
name|checkOwner
argument_list|(
name|inodeAttrs
argument_list|,
name|components
argument_list|,
name|inodeAttrs
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getINodeAttrs (byte[][] pathByNameArr, int pathIdx, INode inode, int snapshotId)
specifier|private
name|INodeAttributes
name|getINodeAttrs
parameter_list|(
name|byte
index|[]
index|[]
name|pathByNameArr
parameter_list|,
name|int
name|pathIdx
parameter_list|,
name|INode
name|inode
parameter_list|,
name|int
name|snapshotId
parameter_list|)
block|{
name|INodeAttributes
name|inodeAttrs
init|=
name|inode
operator|.
name|getSnapshotINode
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
if|if
condition|(
name|getAttributesProvider
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|elements
init|=
operator|new
name|String
index|[
name|pathIdx
operator|+
literal|1
index|]
decl_stmt|;
comment|/**        * {@link INode#getPathComponents(String)} returns a null component        * for the root only path "/". Assign an empty string if so.        */
if|if
condition|(
name|pathByNameArr
operator|.
name|length
operator|==
literal|1
operator|&&
name|pathByNameArr
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|elements
index|[
literal|0
index|]
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|elements
index|[
name|i
index|]
operator|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|pathByNameArr
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|inodeAttrs
operator|=
name|getAttributesProvider
argument_list|()
operator|.
name|getAttributes
argument_list|(
name|elements
argument_list|,
name|inodeAttrs
argument_list|)
expr_stmt|;
block|}
return|return
name|inodeAttrs
return|;
block|}
comment|/** Guarded by {@link FSNamesystem#readLock()} */
DECL|method|checkOwner (INodeAttributes[] inodes, byte[][] components, int i)
specifier|private
name|void
name|checkOwner
parameter_list|(
name|INodeAttributes
index|[]
name|inodes
parameter_list|,
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|inodes
index|[
name|i
index|]
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Permission denied. user="
operator|+
name|getUser
argument_list|()
operator|+
literal|" is not the owner of inode="
operator|+
name|getPath
argument_list|(
name|components
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
throw|;
block|}
comment|/** Guarded by {@link FSNamesystem#readLock()}    * @throws AccessControlException    * @throws ParentNotDirectoryException    * @throws UnresolvedPathException    */
DECL|method|checkTraverse (INodeAttributes[] inodeAttrs, INode[] inodes, byte[][] components, int last)
specifier|private
name|void
name|checkTraverse
parameter_list|(
name|INodeAttributes
index|[]
name|inodeAttrs
parameter_list|,
name|INode
index|[]
name|inodes
parameter_list|,
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|last
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|UnresolvedPathException
throws|,
name|ParentNotDirectoryException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|last
condition|;
name|i
operator|++
control|)
block|{
name|checkIsDirectory
argument_list|(
name|inodes
index|[
name|i
index|]
argument_list|,
name|components
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|inodeAttrs
argument_list|,
name|components
argument_list|,
name|i
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Guarded by {@link FSNamesystem#readLock()} */
DECL|method|checkSubAccess (byte[][] components, int pathIdx, INode inode, int snapshotId, FsAction access, boolean ignoreEmptyDir)
specifier|private
name|void
name|checkSubAccess
parameter_list|(
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|pathIdx
parameter_list|,
name|INode
name|inode
parameter_list|,
name|int
name|snapshotId
parameter_list|,
name|FsAction
name|access
parameter_list|,
name|boolean
name|ignoreEmptyDir
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|inode
operator|==
literal|null
operator|||
operator|!
name|inode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Each inode in the subtree has a level. The root inode has level 0.
comment|// List subINodePath tracks the inode path in the subtree during
comment|// traversal. The root inode is not stored because it is already in array
comment|// components. The list index is (level - 1).
name|ArrayList
argument_list|<
name|INodeDirectory
argument_list|>
name|subINodePath
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// The stack of levels matches the stack of directory inodes.
name|Stack
argument_list|<
name|Integer
argument_list|>
name|levels
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
name|levels
operator|.
name|push
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Level 0 is the root
name|Stack
argument_list|<
name|INodeDirectory
argument_list|>
name|directories
init|=
operator|new
name|Stack
argument_list|<
name|INodeDirectory
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|directories
operator|.
name|push
argument_list|(
name|inode
operator|.
name|asDirectory
argument_list|()
argument_list|)
init|;
operator|!
name|directories
operator|.
name|isEmpty
argument_list|()
condition|;
control|)
block|{
name|INodeDirectory
name|d
init|=
name|directories
operator|.
name|pop
argument_list|()
decl_stmt|;
name|int
name|level
init|=
name|levels
operator|.
name|pop
argument_list|()
decl_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|cList
init|=
name|d
operator|.
name|getChildrenList
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|cList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ignoreEmptyDir
operator|)
condition|)
block|{
comment|//TODO have to figure this out with inodeattribute provider
name|INodeAttributes
name|inodeAttr
init|=
name|getINodeAttrs
argument_list|(
name|components
argument_list|,
name|pathIdx
argument_list|,
name|d
argument_list|,
name|snapshotId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasPermission
argument_list|(
name|inodeAttr
argument_list|,
name|access
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|toAccessControlString
argument_list|(
name|inodeAttr
argument_list|,
name|d
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|access
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|level
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|level
operator|-
literal|1
operator|<
name|subINodePath
operator|.
name|size
argument_list|()
condition|)
block|{
name|subINodePath
operator|.
name|set
argument_list|(
name|level
operator|-
literal|1
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|level
operator|-
literal|1
operator|==
name|subINodePath
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|subINodePath
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inodeAttr
operator|.
name|getFsPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
condition|)
block|{
for|for
control|(
name|INode
name|child
range|:
name|cList
control|)
block|{
name|INodeAttributes
name|childInodeAttr
init|=
name|getINodeAttrs
argument_list|(
name|components
argument_list|,
name|pathIdx
argument_list|,
name|child
argument_list|,
name|snapshotId
argument_list|)
decl_stmt|;
if|if
condition|(
name|isStickyBitViolated
argument_list|(
name|inodeAttr
argument_list|,
name|childInodeAttr
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|allComponentList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|pathIdx
condition|;
operator|++
name|i
control|)
block|{
name|allComponentList
operator|.
name|add
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|level
condition|;
operator|++
name|i
control|)
block|{
name|allComponentList
operator|.
name|add
argument_list|(
name|subINodePath
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|allComponentList
operator|.
name|add
argument_list|(
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|pathIdx
operator|+
name|level
decl_stmt|;
name|byte
index|[]
index|[]
name|allComponents
init|=
name|allComponentList
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{}
argument_list|)
decl_stmt|;
name|throwStickyBitException
argument_list|(
name|getPath
argument_list|(
name|allComponents
argument_list|,
literal|0
argument_list|,
name|index
operator|+
literal|1
argument_list|)
argument_list|,
name|child
argument_list|,
name|getPath
argument_list|(
name|allComponents
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
argument_list|,
name|inode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|INode
name|child
range|:
name|cList
control|)
block|{
if|if
condition|(
name|child
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|directories
operator|.
name|push
argument_list|(
name|child
operator|.
name|asDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|levels
operator|.
name|push
argument_list|(
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Guarded by {@link FSNamesystem#readLock()} */
DECL|method|check (INodeAttributes[] inodes, byte[][] components, int i, FsAction access)
specifier|private
name|void
name|check
parameter_list|(
name|INodeAttributes
index|[]
name|inodes
parameter_list|,
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|i
parameter_list|,
name|FsAction
name|access
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|INodeAttributes
name|inode
init|=
operator|(
name|i
operator|>=
literal|0
operator|)
condition|?
name|inodes
index|[
name|i
index|]
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|inode
operator|!=
literal|null
operator|&&
operator|!
name|hasPermission
argument_list|(
name|inode
argument_list|,
name|access
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|toAccessControlString
argument_list|(
name|inode
argument_list|,
name|getPath
argument_list|(
name|components
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
argument_list|,
name|access
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// return whether access is permitted.  note it neither requires a path or
comment|// throws so the caller can build the path only if required for an exception.
comment|// very beneficial for subaccess checks!
DECL|method|hasPermission (INodeAttributes inode, FsAction access)
specifier|private
name|boolean
name|hasPermission
parameter_list|(
name|INodeAttributes
name|inode
parameter_list|,
name|FsAction
name|access
parameter_list|)
block|{
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|FsPermission
name|mode
init|=
name|inode
operator|.
name|getFsPermission
argument_list|()
decl_stmt|;
specifier|final
name|AclFeature
name|aclFeature
init|=
name|inode
operator|.
name|getAclFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|aclFeature
operator|!=
literal|null
condition|)
block|{
comment|// It's possible that the inode has a default ACL but no access ACL.
name|int
name|firstEntry
init|=
name|aclFeature
operator|.
name|getEntryAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|AclEntryStatusFormat
operator|.
name|getScope
argument_list|(
name|firstEntry
argument_list|)
operator|==
name|AclEntryScope
operator|.
name|ACCESS
condition|)
block|{
return|return
name|hasAclPermission
argument_list|(
name|inode
argument_list|,
name|access
argument_list|,
name|mode
argument_list|,
name|aclFeature
argument_list|)
return|;
block|}
block|}
specifier|final
name|FsAction
name|checkAction
decl_stmt|;
if|if
condition|(
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|inode
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
comment|//user class
name|checkAction
operator|=
name|mode
operator|.
name|getUserAction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isMemberOfGroup
argument_list|(
name|inode
operator|.
name|getGroupName
argument_list|()
argument_list|)
condition|)
block|{
comment|//group class
name|checkAction
operator|=
name|mode
operator|.
name|getGroupAction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//other class
name|checkAction
operator|=
name|mode
operator|.
name|getOtherAction
argument_list|()
expr_stmt|;
block|}
return|return
name|checkAction
operator|.
name|implies
argument_list|(
name|access
argument_list|)
return|;
block|}
comment|/**    * Checks requested access against an Access Control List.  This method relies    * on finding the ACL data in the relevant portions of {@link FsPermission} and    * {@link AclFeature} as implemented in the logic of {@link AclStorage}.  This    * method also relies on receiving the ACL entries in sorted order.  This is    * assumed to be true, because the ACL modification methods in    * {@link AclTransformation} sort the resulting entries.    *    * More specifically, this method depends on these invariants in an ACL:    * - The list must be sorted.    * - Each entry in the list must be unique by scope + type + name.    * - There is exactly one each of the unnamed user/group/other entries.    * - The mask entry must not have a name.    * - The other entry must not have a name.    * - Default entries may be present, but they are ignored during enforcement.    *    * @param inode INodeAttributes accessed inode    * @param snapshotId int snapshot ID    * @param access FsAction requested permission    * @param mode FsPermission mode from inode    * @param aclFeature AclFeature of inode    * @throws AccessControlException if the ACL denies permission    */
DECL|method|hasAclPermission (INodeAttributes inode, FsAction access, FsPermission mode, AclFeature aclFeature)
specifier|private
name|boolean
name|hasAclPermission
parameter_list|(
name|INodeAttributes
name|inode
parameter_list|,
name|FsAction
name|access
parameter_list|,
name|FsPermission
name|mode
parameter_list|,
name|AclFeature
name|aclFeature
parameter_list|)
block|{
name|boolean
name|foundMatch
init|=
literal|false
decl_stmt|;
comment|// Use owner entry from permission bits if user is owner.
if|if
condition|(
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|inode
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|mode
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|access
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|foundMatch
operator|=
literal|true
expr_stmt|;
block|}
comment|// Check named user and group entries if user was not denied by owner entry.
if|if
condition|(
operator|!
name|foundMatch
condition|)
block|{
for|for
control|(
name|int
name|pos
init|=
literal|0
init|,
name|entry
init|;
name|pos
operator|<
name|aclFeature
operator|.
name|getEntriesSize
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|entry
operator|=
name|aclFeature
operator|.
name|getEntryAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|AclEntryStatusFormat
operator|.
name|getScope
argument_list|(
name|entry
argument_list|)
operator|==
name|AclEntryScope
operator|.
name|DEFAULT
condition|)
block|{
break|break;
block|}
name|AclEntryType
name|type
init|=
name|AclEntryStatusFormat
operator|.
name|getType
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|AclEntryStatusFormat
operator|.
name|getName
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|AclEntryType
operator|.
name|USER
condition|)
block|{
comment|// Use named user entry with mask from permission bits applied if user
comment|// matches name.
if|if
condition|(
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|FsAction
name|masked
init|=
name|AclEntryStatusFormat
operator|.
name|getPermission
argument_list|(
name|entry
argument_list|)
operator|.
name|and
argument_list|(
name|mode
operator|.
name|getGroupAction
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|masked
operator|.
name|implies
argument_list|(
name|access
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|foundMatch
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|AclEntryType
operator|.
name|GROUP
condition|)
block|{
comment|// Use group entry (unnamed or named) with mask from permission bits
comment|// applied if user is a member and entry grants access.  If user is a
comment|// member of multiple groups that have entries that grant access, then
comment|// it doesn't matter which is chosen, so exit early after first match.
name|String
name|group
init|=
name|name
operator|==
literal|null
condition|?
name|inode
operator|.
name|getGroupName
argument_list|()
else|:
name|name
decl_stmt|;
if|if
condition|(
name|isMemberOfGroup
argument_list|(
name|group
argument_list|)
condition|)
block|{
name|FsAction
name|masked
init|=
name|AclEntryStatusFormat
operator|.
name|getPermission
argument_list|(
name|entry
argument_list|)
operator|.
name|and
argument_list|(
name|mode
operator|.
name|getGroupAction
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|masked
operator|.
name|implies
argument_list|(
name|access
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|foundMatch
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Use other entry if user was not denied by an earlier match.
return|return
operator|!
name|foundMatch
operator|&&
name|mode
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|access
argument_list|)
return|;
block|}
comment|/** Guarded by {@link FSNamesystem#readLock()} */
DECL|method|checkStickyBit (INodeAttributes[] inodes, byte[][] components, int index)
specifier|private
name|void
name|checkStickyBit
parameter_list|(
name|INodeAttributes
index|[]
name|inodes
parameter_list|,
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|INodeAttributes
name|parent
init|=
name|inodes
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|getFsPermission
argument_list|()
operator|.
name|getStickyBit
argument_list|()
condition|)
block|{
return|return;
block|}
name|INodeAttributes
name|inode
init|=
name|inodes
index|[
name|index
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|isStickyBitViolated
argument_list|(
name|parent
argument_list|,
name|inode
argument_list|)
condition|)
block|{
return|return;
block|}
name|throwStickyBitException
argument_list|(
name|getPath
argument_list|(
name|components
argument_list|,
literal|0
argument_list|,
name|index
operator|+
literal|1
argument_list|)
argument_list|,
name|inode
argument_list|,
name|getPath
argument_list|(
name|components
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/** Return true when sticky bit is violated. */
DECL|method|isStickyBitViolated (INodeAttributes parent, INodeAttributes inode)
specifier|private
name|boolean
name|isStickyBitViolated
parameter_list|(
name|INodeAttributes
name|parent
parameter_list|,
name|INodeAttributes
name|inode
parameter_list|)
block|{
comment|// If this user is the directory owner, return
if|if
condition|(
name|parent
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if this user is the file owner, return
if|if
condition|(
name|inode
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|throwStickyBitException ( String inodePath, INodeAttributes inode, String parentPath, INodeAttributes parent)
specifier|private
name|void
name|throwStickyBitException
parameter_list|(
name|String
name|inodePath
parameter_list|,
name|INodeAttributes
name|inode
parameter_list|,
name|String
name|parentPath
parameter_list|,
name|INodeAttributes
name|parent
parameter_list|)
throws|throws
name|AccessControlException
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|FSExceptionMessages
operator|.
name|PERMISSION_DENIED_BY_STICKY_BIT
operator|+
literal|": user=%s, path=\"%s\":%s:%s:%s%s, "
operator|+
literal|"parent=\"%s\":%s:%s:%s%s"
argument_list|,
name|user
argument_list|,
name|inodePath
argument_list|,
name|inode
operator|.
name|getUserName
argument_list|()
argument_list|,
name|inode
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|inode
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"d"
else|:
literal|"-"
argument_list|,
name|inode
operator|.
name|getFsPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|parentPath
argument_list|,
name|parent
operator|.
name|getUserName
argument_list|()
argument_list|,
name|parent
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|parent
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"d"
else|:
literal|"-"
argument_list|,
name|parent
operator|.
name|getFsPermission
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|/**    * Whether a cache pool can be accessed by the current context    *    * @param pool CachePool being accessed    * @param access type of action being performed on the cache pool    * @throws AccessControlException if pool cannot be accessed    */
DECL|method|checkPermission (CachePool pool, FsAction access)
specifier|public
name|void
name|checkPermission
parameter_list|(
name|CachePool
name|pool
parameter_list|,
name|FsAction
name|access
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|FsPermission
name|mode
init|=
name|pool
operator|.
name|getMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSuperUser
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|pool
operator|.
name|getOwnerName
argument_list|()
argument_list|)
operator|&&
name|mode
operator|.
name|getUserAction
argument_list|()
operator|.
name|implies
argument_list|(
name|access
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isMemberOfGroup
argument_list|(
name|pool
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|&&
name|mode
operator|.
name|getGroupAction
argument_list|()
operator|.
name|implies
argument_list|(
name|access
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|pool
operator|.
name|getOwnerName
argument_list|()
argument_list|)
operator|&&
operator|!
name|isMemberOfGroup
argument_list|(
name|pool
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|&&
name|mode
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|access
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Permission denied while accessing pool "
operator|+
name|pool
operator|.
name|getPoolName
argument_list|()
operator|+
literal|": user "
operator|+
name|getUser
argument_list|()
operator|+
literal|" does not have "
operator|+
name|access
operator|.
name|toString
argument_list|()
operator|+
literal|" permissions."
argument_list|)
throw|;
block|}
comment|/**    * Verifies that all existing ancestors are directories.  If a permission    * checker is provided then the user must have exec access.  Ancestor    * symlinks will throw an unresolved exception, and resolveLink determines    * if the last inode will throw an unresolved exception.  This method    * should always be called after a path is resolved into an IIP.    * @param pc for permission checker, null for no checking    * @param iip path to verify    * @param resolveLink whether last inode may be a symlink    * @throws AccessControlException    * @throws UnresolvedPathException    * @throws ParentNotDirectoryException    */
DECL|method|checkTraverse (FSPermissionChecker pc, INodesInPath iip, boolean resolveLink)
specifier|static
name|void
name|checkTraverse
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|UnresolvedPathException
throws|,
name|ParentNotDirectoryException
block|{
try|try
block|{
if|if
condition|(
name|pc
operator|==
literal|null
operator|||
name|pc
operator|.
name|isSuperUser
argument_list|()
condition|)
block|{
name|checkSimpleTraverse
argument_list|(
name|iip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pc
operator|.
name|checkPermission
argument_list|(
name|iip
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TraverseAccessControlException
name|tace
parameter_list|)
block|{
comment|// unwrap the non-ACE (unresolved, parent not dir) exception
comment|// tunneled out of checker.
name|tace
operator|.
name|throwCause
argument_list|()
expr_stmt|;
block|}
comment|// maybe check that the last inode is a symlink
if|if
condition|(
name|resolveLink
condition|)
block|{
name|int
name|last
init|=
name|iip
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
name|checkNotSymlink
argument_list|(
name|iip
operator|.
name|getINode
argument_list|(
name|last
argument_list|)
argument_list|,
name|iip
operator|.
name|getPathComponents
argument_list|()
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
block|}
comment|// rudimentary permission-less directory check
DECL|method|checkSimpleTraverse (INodesInPath iip)
specifier|private
specifier|static
name|void
name|checkSimpleTraverse
parameter_list|(
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|UnresolvedPathException
throws|,
name|ParentNotDirectoryException
block|{
name|byte
index|[]
index|[]
name|components
init|=
name|iip
operator|.
name|getPathComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iip
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|INode
name|inode
init|=
name|iip
operator|.
name|getINode
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|checkIsDirectory
argument_list|(
name|inode
argument_list|,
name|components
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkIsDirectory (INode inode, byte[][] components, int i)
specifier|private
specifier|static
name|void
name|checkIsDirectory
parameter_list|(
name|INode
name|inode
parameter_list|,
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|UnresolvedPathException
throws|,
name|ParentNotDirectoryException
block|{
if|if
condition|(
name|inode
operator|!=
literal|null
operator|&&
operator|!
name|inode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|checkNotSymlink
argument_list|(
name|inode
argument_list|,
name|components
argument_list|,
name|i
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParentNotDirectoryException
argument_list|(
name|getPath
argument_list|(
name|components
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
operator|+
literal|" (is not a directory)"
argument_list|)
throw|;
block|}
block|}
DECL|method|checkNotSymlink (INode inode, byte[][] components, int i)
specifier|private
specifier|static
name|void
name|checkNotSymlink
parameter_list|(
name|INode
name|inode
parameter_list|,
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|UnresolvedPathException
block|{
if|if
condition|(
name|inode
operator|!=
literal|null
operator|&&
name|inode
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
specifier|final
name|int
name|last
init|=
name|components
operator|.
name|length
operator|-
literal|1
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|getPath
argument_list|(
name|components
argument_list|,
literal|0
argument_list|,
name|last
argument_list|)
decl_stmt|;
specifier|final
name|String
name|preceding
init|=
name|getPath
argument_list|(
name|components
argument_list|,
literal|0
argument_list|,
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|remainder
init|=
name|getPath
argument_list|(
name|components
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|last
argument_list|)
decl_stmt|;
specifier|final
name|String
name|target
init|=
name|inode
operator|.
name|asSymlink
argument_list|()
operator|.
name|getSymlinkString
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
specifier|final
name|String
name|link
init|=
name|inode
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"UnresolvedPathException "
operator|+
literal|" path: "
operator|+
name|path
operator|+
literal|" preceding: "
operator|+
name|preceding
operator|+
literal|" count: "
operator|+
name|i
operator|+
literal|" link: "
operator|+
name|link
operator|+
literal|" target: "
operator|+
name|target
operator|+
literal|" remainder: "
operator|+
name|remainder
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|UnresolvedPathException
argument_list|(
name|path
argument_list|,
name|preceding
argument_list|,
name|remainder
argument_list|,
name|target
argument_list|)
throw|;
block|}
block|}
comment|//used to tunnel non-ACE exceptions encountered during path traversal.
comment|//ops that create inodes are expected to throw ParentNotDirectoryExceptions.
comment|//the signature of other methods requires the PNDE to be thrown as an ACE.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|TraverseAccessControlException
specifier|static
class|class
name|TraverseAccessControlException
extends|extends
name|AccessControlException
block|{
DECL|method|TraverseAccessControlException (IOException ioe)
name|TraverseAccessControlException
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|super
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
DECL|method|throwCause ()
specifier|public
name|void
name|throwCause
parameter_list|()
throws|throws
name|UnresolvedPathException
throws|,
name|ParentNotDirectoryException
throws|,
name|AccessControlException
block|{
name|Throwable
name|ioe
init|=
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioe
operator|instanceof
name|UnresolvedPathException
condition|)
block|{
throw|throw
operator|(
name|UnresolvedPathException
operator|)
name|ioe
throw|;
block|}
if|if
condition|(
name|ioe
operator|instanceof
name|ParentNotDirectoryException
condition|)
block|{
throw|throw
operator|(
name|ParentNotDirectoryException
operator|)
name|ioe
throw|;
block|}
throw|throw
name|this
throw|;
block|}
block|}
block|}
end_class

end_unit

