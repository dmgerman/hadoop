begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|WordUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CachePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|TableListing
operator|.
name|Justification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * This class implements command-line operations on the HDFS Cache.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CacheAdmin
specifier|public
class|class
name|CacheAdmin
extends|extends
name|Configured
implements|implements
name|Tool
block|{
comment|/**    * Maximum length for printed lines    */
DECL|field|MAX_LINE_WIDTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LINE_WIDTH
init|=
literal|80
decl_stmt|;
DECL|method|CacheAdmin ()
specifier|public
name|CacheAdmin
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|CacheAdmin (Configuration conf)
specifier|public
name|CacheAdmin
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|printUsage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|Command
name|command
init|=
name|determineCommand
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand command '"
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|args
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Command names must start with dashes."
argument_list|)
expr_stmt|;
block|}
name|printUsage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|args
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|argsList
operator|.
name|add
argument_list|(
name|args
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|command
operator|.
name|run
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|argsList
argument_list|)
return|;
block|}
DECL|method|main (String[] argsArray)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argsArray
parameter_list|)
throws|throws
name|IOException
block|{
name|CacheAdmin
name|cacheAdmin
init|=
operator|new
name|CacheAdmin
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|cacheAdmin
operator|.
name|run
argument_list|(
name|argsArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDFS (Configuration conf)
specifier|private
specifier|static
name|DistributedFileSystem
name|getDFS
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"FileSystem "
operator|+
name|fs
operator|.
name|getUri
argument_list|()
operator|+
literal|" is not an HDFS file system"
argument_list|)
throw|;
block|}
return|return
operator|(
name|DistributedFileSystem
operator|)
name|fs
return|;
block|}
comment|/**    * NN exceptions contain the stack trace as part of the exception message.    * When it's a known error, pretty-print the error and squish the stack trace.    */
DECL|method|prettifyException (Exception e)
specifier|private
specifier|static
name|String
name|prettifyException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|0
index|]
return|;
block|}
DECL|method|getOptionDescriptionListing ()
specifier|private
specifier|static
name|TableListing
name|getOptionDescriptionListing
parameter_list|()
block|{
name|TableListing
name|listing
init|=
operator|new
name|TableListing
operator|.
name|Builder
argument_list|()
operator|.
name|addField
argument_list|(
literal|""
argument_list|)
operator|.
name|addField
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
operator|.
name|wrapWidth
argument_list|(
name|MAX_LINE_WIDTH
argument_list|)
operator|.
name|hideHeaders
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|listing
return|;
block|}
DECL|interface|Command
interface|interface
name|Command
block|{
DECL|method|getName ()
name|String
name|getName
parameter_list|()
function_decl|;
DECL|method|getShortUsage ()
name|String
name|getShortUsage
parameter_list|()
function_decl|;
DECL|method|getLongUsage ()
name|String
name|getLongUsage
parameter_list|()
function_decl|;
DECL|method|run (Configuration conf, List<String> args)
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|AddPathBasedCacheDirectiveCommand
specifier|private
specifier|static
class|class
name|AddPathBasedCacheDirectiveCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-addDirective"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" -path<path> -replication<replication> -pool<pool-name>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<path>"
argument_list|,
literal|"A path to cache. The path can be "
operator|+
literal|"a directory or a file."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<replication>"
argument_list|,
literal|"The cache replication factor to use. "
operator|+
literal|"Defaults to 1."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<pool-name>"
argument_list|,
literal|"The pool to which the directive will be "
operator|+
literal|"added. You must have write permission on the cache pool "
operator|+
literal|"in order to add new directives."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Add a new PathBasedCache directive.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-path"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a path with -path."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|short
name|replication
init|=
literal|1
decl_stmt|;
name|String
name|replicationString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-replication"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicationString
operator|!=
literal|null
condition|)
block|{
name|replication
operator|=
name|Short
operator|.
name|parseShort
argument_list|(
name|replicationString
argument_list|)
expr_stmt|;
block|}
name|String
name|poolName
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-pool"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolName
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a pool name with -pool."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand argument: "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|PathBasedCacheDirective
name|directive
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|setReplication
argument_list|(
name|replication
argument_list|)
operator|.
name|setPool
argument_list|(
name|poolName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|id
init|=
name|dfs
operator|.
name|addPathBasedCacheDirective
argument_list|(
name|directive
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Added PathBasedCache entry "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|class|RemovePathBasedCacheDirectiveCommand
specifier|private
specifier|static
class|class
name|RemovePathBasedCacheDirectiveCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-removeDirective"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|"<id>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<id>"
argument_list|,
literal|"The id of the cache directive to remove.  "
operator|+
literal|"You must have write permission on the pool of the "
operator|+
literal|"directive in order to remove it.  To see a list "
operator|+
literal|"of PathBasedCache directive IDs, use the -listDirectives command."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Remove a cache directive.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|idString
init|=
name|StringUtils
operator|.
name|popFirstNonOption
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|idString
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a directive ID to remove."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|long
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|idString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid directive ID "
operator|+
name|idString
operator|+
literal|": expected "
operator|+
literal|"a numeric value."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|id
operator|<=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid directive ID "
operator|+
name|id
operator|+
literal|": ids must "
operator|+
literal|"be greater than 0."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand argument: "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|removePathBasedCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed PathBasedCache directive "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|class|RemovePathBasedCacheDirectivesCommand
specifier|private
specifier|static
class|class
name|RemovePathBasedCacheDirectivesCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-removeDirectives"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" -path<path>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"-path<path>"
argument_list|,
literal|"The path of the cache directives to remove.  "
operator|+
literal|"You must have write permission on the pool of the directive in order "
operator|+
literal|"to remove it.  To see a list of cache directives, use the "
operator|+
literal|"-listDirectives command."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Remove every cache directive with the specified path.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-path"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a path with -path."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand argument: "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|PathBasedCacheDirective
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listPathBasedCacheDirectives
argument_list|(
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PathBasedCacheDirective
name|directive
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|removePathBasedCacheDirective
argument_list|(
name|directive
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed PathBasedCache directive "
operator|+
name|directive
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exitCode
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed every PathBasedCache directive with path "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
block|}
DECL|class|ListPathBasedCacheDirectiveCommand
specifier|private
specifier|static
class|class
name|ListPathBasedCacheDirectiveCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-listDirectives"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" [-path<path>] [-pool<pool>]]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<path>"
argument_list|,
literal|"List only "
operator|+
literal|"PathBasedCache directives with this path. "
operator|+
literal|"Note that if there is a PathBasedCache directive for<path> "
operator|+
literal|"in a cache pool that we don't have read access for, it "
operator|+
literal|"will not be listed."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<pool>"
argument_list|,
literal|"List only path cache directives in that pool."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"List PathBasedCache directives.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|PathBasedCacheDirective
operator|.
name|Builder
name|builder
init|=
operator|new
name|PathBasedCacheDirective
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|String
name|pathFilter
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-path"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathFilter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|pathFilter
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|poolFilter
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-pool"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolFilter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPool
argument_list|(
name|poolFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand argument: "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|TableListing
name|tableListing
init|=
operator|new
name|TableListing
operator|.
name|Builder
argument_list|()
operator|.
name|addField
argument_list|(
literal|"ID"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"POOL"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"PATH"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|PathBasedCacheDirective
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listPathBasedCacheDirectives
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numEntries
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PathBasedCacheDirective
name|directive
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|row
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|""
operator|+
name|directive
operator|.
name|getId
argument_list|()
block|,
name|directive
operator|.
name|getPool
argument_list|()
block|,
name|directive
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
block|,         }
decl_stmt|;
name|tableListing
operator|.
name|addRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|numEntries
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found %d entr%s\n"
argument_list|,
name|numEntries
argument_list|,
name|numEntries
operator|==
literal|1
condition|?
literal|"y"
else|:
literal|"ies"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|numEntries
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|tableListing
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|class|AddCachePoolCommand
specifier|private
specifier|static
class|class
name|AddCachePoolCommand
implements|implements
name|Command
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"-addPool"
decl_stmt|;
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|NAME
operator|+
literal|"<name> [-owner<owner>] "
operator|+
literal|"[-group<group>] [-mode<mode>] [-weight<weight>]]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<name>"
argument_list|,
literal|"Name of the new pool."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<owner>"
argument_list|,
literal|"Username of the owner of the pool. "
operator|+
literal|"Defaults to the current user."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<group>"
argument_list|,
literal|"Group of the pool. "
operator|+
literal|"Defaults to the primary group name of the current user."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<mode>"
argument_list|,
literal|"UNIX-style permissions for the pool. "
operator|+
literal|"Permissions are specified in octal, e.g. 0755. "
operator|+
literal|"By default, this is set to "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"0%03o"
argument_list|,
name|FsPermission
operator|.
name|getCachePoolDefault
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<weight>"
argument_list|,
literal|"Weight of the pool. "
operator|+
literal|"This is a relative measure of the importance of the pool used "
operator|+
literal|"during cache resource management. By default, it is set to "
operator|+
name|CachePool
operator|.
name|DEFAULT_WEIGHT
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Add a new cache pool.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|owner
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-owner"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
name|owner
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
name|String
name|group
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-group"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
name|String
name|modeString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-mode"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|int
name|mode
decl_stmt|;
if|if
condition|(
name|modeString
operator|==
literal|null
condition|)
block|{
name|mode
operator|=
name|FsPermission
operator|.
name|getCachePoolDefault
argument_list|()
operator|.
name|toShort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mode
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|modeString
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
name|String
name|weightString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-weight"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|int
name|weight
decl_stmt|;
if|if
condition|(
name|weightString
operator|==
literal|null
condition|)
block|{
name|weight
operator|=
name|CachePool
operator|.
name|DEFAULT_WEIGHT
expr_stmt|;
block|}
else|else
block|{
name|weight
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|weightString
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|StringUtils
operator|.
name|popFirstNonOption
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a name when creating a "
operator|+
literal|"cache pool."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Can't understand arguments: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CachePoolInfo
name|info
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|name
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|owner
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|group
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|mode
argument_list|)
argument_list|)
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully added cache pool "
operator|+
name|name
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|class|ModifyCachePoolCommand
specifier|private
specifier|static
class|class
name|ModifyCachePoolCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-modifyPool"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|"<name> [-owner<owner>] "
operator|+
literal|"[-group<group>] [-mode<mode>] [-weight<weight>]]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<name>"
argument_list|,
literal|"Name of the pool to modify."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<owner>"
argument_list|,
literal|"Username of the owner of the pool"
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<group>"
argument_list|,
literal|"Groupname of the group of the pool."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<mode>"
argument_list|,
literal|"Unix-style permissions of the pool in octal."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<weight>"
argument_list|,
literal|"Weight of the pool."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
name|WordUtils
operator|.
name|wrap
argument_list|(
literal|"Modifies the metadata of an existing cache pool. "
operator|+
literal|"See usage of "
operator|+
name|AddCachePoolCommand
operator|.
name|NAME
operator|+
literal|" for more details"
argument_list|,
name|MAX_LINE_WIDTH
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|owner
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-owner"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|String
name|group
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-group"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|String
name|modeString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-mode"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Integer
name|mode
init|=
operator|(
name|modeString
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|modeString
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|String
name|weightString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-weight"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Integer
name|weight
init|=
operator|(
name|weightString
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|weightString
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|StringUtils
operator|.
name|popFirstNonOption
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a name when creating a "
operator|+
literal|"cache pool."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Can't understand arguments: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|CachePoolInfo
name|info
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setOwnerName
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setGroupName
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|mode
operator|.
name|shortValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|weight
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|changed
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify at least one attribute to "
operator|+
literal|"change in the cache pool."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Successfully modified cache pool "
operator|+
name|name
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|" to have "
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prefix
operator|+
literal|"owner name "
operator|+
name|owner
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|" and "
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prefix
operator|+
literal|"group name "
operator|+
name|group
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|" and "
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prefix
operator|+
literal|"mode "
operator|+
operator|new
name|FsPermission
argument_list|(
name|mode
operator|.
name|shortValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|" and "
expr_stmt|;
block|}
if|if
condition|(
name|weight
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prefix
operator|+
literal|"weight "
operator|+
name|weight
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|" and "
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|class|RemoveCachePoolCommand
specifier|private
specifier|static
class|class
name|RemoveCachePoolCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-removePool"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|"<name>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
name|WordUtils
operator|.
name|wrap
argument_list|(
literal|"Remove a cache pool. This also uncaches paths "
operator|+
literal|"associated with the pool.\n\n"
argument_list|,
name|MAX_LINE_WIDTH
argument_list|)
operator|+
literal|"<name>  Name of the cache pool to remove.\n"
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|popFirstNonOption
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a name when deleting a "
operator|+
literal|"cache pool."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Can't understand arguments: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully removed cache pool "
operator|+
name|name
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|class|ListCachePoolsCommand
specifier|private
specifier|static
class|class
name|ListCachePoolsCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-listPools"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" [name]]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"[name]"
argument_list|,
literal|"If specified, list only the named cache pool."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
name|WordUtils
operator|.
name|wrap
argument_list|(
literal|"Display information about one or more cache pools, "
operator|+
literal|"e.g. name, owner, group, permissions, etc."
argument_list|,
name|MAX_LINE_WIDTH
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|popFirstNonOption
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Can't understand arguments: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TableListing
name|listing
init|=
operator|new
name|TableListing
operator|.
name|Builder
argument_list|()
operator|.
name|addField
argument_list|(
literal|"NAME"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"OWNER"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"GROUP"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"MODE"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"WEIGHT"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|numResults
init|=
literal|0
decl_stmt|;
try|try
block|{
name|RemoteIterator
argument_list|<
name|CachePoolInfo
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachePoolInfo
name|info
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|info
operator|.
name|getPoolName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|listing
operator|.
name|addRow
argument_list|(
operator|new
name|String
index|[]
block|{
name|info
operator|.
name|getPoolName
argument_list|()
block|,
name|info
operator|.
name|getOwnerName
argument_list|()
block|,
name|info
operator|.
name|getGroupName
argument_list|()
block|,
name|info
operator|.
name|getMode
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|info
operator|.
name|getWeight
argument_list|()
operator|.
name|toString
argument_list|()
block|,             }
argument_list|)
expr_stmt|;
operator|++
name|numResults
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found %d result%s.\n"
argument_list|,
name|numResults
argument_list|,
operator|(
name|numResults
operator|==
literal|1
condition|?
literal|""
else|:
literal|"s"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|numResults
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|listing
argument_list|)
expr_stmt|;
block|}
comment|// If there are no results, we return 1 (failure exit code);
comment|// otherwise we return 0 (success exit code).
return|return
operator|(
name|numResults
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
block|}
DECL|class|HelpCommand
specifier|private
specifier|static
class|class
name|HelpCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-help"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"[-help<command-name>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<command-name>"
argument_list|,
literal|"The command for which to get "
operator|+
literal|"detailed help. If no command is specified, print detailed help for "
operator|+
literal|"all commands"
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Get detailed help about a command.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|Command
name|command
range|:
name|COMMANDS
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|command
operator|.
name|getLongUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"You must give exactly one argument to -help."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|String
name|commandName
init|=
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Command
name|command
init|=
name|determineCommand
argument_list|(
name|commandName
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Sorry, I don't know the command '"
operator|+
name|commandName
operator|+
literal|"'.\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Valid command names are:\n"
argument_list|)
expr_stmt|;
name|String
name|separator
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Command
name|c
range|:
name|COMMANDS
control|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|separator
operator|+
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|", "
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|command
operator|.
name|getLongUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|field|COMMANDS
specifier|private
specifier|static
name|Command
index|[]
name|COMMANDS
init|=
block|{
operator|new
name|AddPathBasedCacheDirectiveCommand
argument_list|()
block|,
operator|new
name|RemovePathBasedCacheDirectiveCommand
argument_list|()
block|,
operator|new
name|RemovePathBasedCacheDirectivesCommand
argument_list|()
block|,
operator|new
name|ListPathBasedCacheDirectiveCommand
argument_list|()
block|,
operator|new
name|AddCachePoolCommand
argument_list|()
block|,
operator|new
name|ModifyCachePoolCommand
argument_list|()
block|,
operator|new
name|RemoveCachePoolCommand
argument_list|()
block|,
operator|new
name|ListCachePoolsCommand
argument_list|()
block|,
operator|new
name|HelpCommand
argument_list|()
block|,   }
decl_stmt|;
DECL|method|printUsage (boolean longUsage)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|boolean
name|longUsage
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: bin/hdfs cacheadmin [COMMAND]"
argument_list|)
expr_stmt|;
for|for
control|(
name|Command
name|command
range|:
name|COMMANDS
control|)
block|{
if|if
condition|(
name|longUsage
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|command
operator|.
name|getLongUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"          "
operator|+
name|command
operator|.
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
DECL|method|determineCommand (String commandName)
specifier|private
specifier|static
name|Command
name|determineCommand
parameter_list|(
name|String
name|commandName
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COMMANDS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|COMMANDS
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|commandName
argument_list|)
condition|)
block|{
return|return
name|COMMANDS
index|[
name|i
index|]
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

