begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|text
operator|.
name|WordUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
operator|.
name|Expiration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|TableListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|TableListing
operator|.
name|Justification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * This class implements command-line operations on the HDFS Cache.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CacheAdmin
specifier|public
class|class
name|CacheAdmin
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|method|CacheAdmin ()
specifier|public
name|CacheAdmin
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|CacheAdmin (Configuration conf)
specifier|public
name|CacheAdmin
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|AdminHelper
operator|.
name|printUsage
argument_list|(
literal|false
argument_list|,
literal|"cacheadmin"
argument_list|,
name|COMMANDS
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|AdminHelper
operator|.
name|Command
name|command
init|=
name|AdminHelper
operator|.
name|determineCommand
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|COMMANDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand command '"
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|args
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Command names must start with dashes."
argument_list|)
expr_stmt|;
block|}
name|AdminHelper
operator|.
name|printUsage
argument_list|(
literal|false
argument_list|,
literal|"cacheadmin"
argument_list|,
name|COMMANDS
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|args
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|argsList
operator|.
name|add
argument_list|(
name|args
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|command
operator|.
name|run
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|argsList
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|main (String[] argsArray)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argsArray
parameter_list|)
throws|throws
name|Exception
block|{
name|CacheAdmin
name|cacheAdmin
init|=
operator|new
name|CacheAdmin
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|cacheAdmin
argument_list|,
name|argsArray
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
DECL|method|parseExpirationString (String ttlString)
specifier|private
specifier|static
name|CacheDirectiveInfo
operator|.
name|Expiration
name|parseExpirationString
parameter_list|(
name|String
name|ttlString
parameter_list|)
throws|throws
name|IOException
block|{
name|CacheDirectiveInfo
operator|.
name|Expiration
name|ex
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ttlString
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ttlString
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"never"
argument_list|)
condition|)
block|{
name|ex
operator|=
name|CacheDirectiveInfo
operator|.
name|Expiration
operator|.
name|NEVER
expr_stmt|;
block|}
else|else
block|{
name|long
name|ttl
init|=
name|DFSUtil
operator|.
name|parseRelativeTime
argument_list|(
name|ttlString
argument_list|)
decl_stmt|;
name|ex
operator|=
name|CacheDirectiveInfo
operator|.
name|Expiration
operator|.
name|newRelative
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ex
return|;
block|}
DECL|class|AddCacheDirectiveInfoCommand
specifier|private
specifier|static
class|class
name|AddCacheDirectiveInfoCommand
implements|implements
name|AdminHelper
operator|.
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-addDirective"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" -path<path> -pool<pool-name> "
operator|+
literal|"[-force] "
operator|+
literal|"[-replication<replication>] [-ttl<time-to-live>]]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|AdminHelper
operator|.
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<path>"
argument_list|,
literal|"A path to cache. The path can be "
operator|+
literal|"a directory or a file."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<pool-name>"
argument_list|,
literal|"The pool to which the directive will be "
operator|+
literal|"added. You must have write permission on the cache pool "
operator|+
literal|"in order to add new directives."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"-force"
argument_list|,
literal|"Skips checking of cache pool resource limits."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<replication>"
argument_list|,
literal|"The cache replication factor to use. "
operator|+
literal|"Defaults to 1."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<time-to-live>"
argument_list|,
literal|"How long the directive is "
operator|+
literal|"valid. Can be specified in minutes, hours, and days, e.g. "
operator|+
literal|"30m, 4h, 2d. Valid units are [smhd]."
operator|+
literal|" \"never\" indicates a directive that never expires."
operator|+
literal|" If unspecified, the directive never expires."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Add a new cache directive.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CacheDirectiveInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-path"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a path with -path."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|builder
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|poolName
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-pool"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolName
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a pool name with -pool."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|builder
operator|.
name|setPool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|boolean
name|force
init|=
name|StringUtils
operator|.
name|popOption
argument_list|(
literal|"-force"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|String
name|replicationString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-replication"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicationString
operator|!=
literal|null
condition|)
block|{
name|Short
name|replication
init|=
name|Short
operator|.
name|parseShort
argument_list|(
name|replicationString
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setReplication
argument_list|(
name|replication
argument_list|)
expr_stmt|;
block|}
name|String
name|ttlString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-ttl"
argument_list|,
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|Expiration
name|ex
init|=
name|parseExpirationString
argument_list|(
name|ttlString
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setExpiration
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error while parsing ttl value: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand argument: "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|AdminHelper
operator|.
name|getDFS
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|CacheDirectiveInfo
name|directive
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CacheFlag
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|force
condition|)
block|{
name|flags
operator|.
name|add
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|long
name|id
init|=
name|dfs
operator|.
name|addCacheDirective
argument_list|(
name|directive
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Added cache directive "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|class|RemoveCacheDirectiveInfoCommand
specifier|private
specifier|static
class|class
name|RemoveCacheDirectiveInfoCommand
implements|implements
name|AdminHelper
operator|.
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-removeDirective"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|"<id>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|AdminHelper
operator|.
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<id>"
argument_list|,
literal|"The id of the cache directive to remove.  "
operator|+
literal|"You must have write permission on the pool of the "
operator|+
literal|"directive in order to remove it.  To see a list "
operator|+
literal|"of cache directive IDs, use the -listDirectives command."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Remove a cache directive.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|idString
init|=
name|StringUtils
operator|.
name|popFirstNonOption
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|idString
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a directive ID to remove."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|long
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|idString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid directive ID "
operator|+
name|idString
operator|+
literal|": expected "
operator|+
literal|"a numeric value."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|id
operator|<=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid directive ID "
operator|+
name|id
operator|+
literal|": ids must "
operator|+
literal|"be greater than 0."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand argument: "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|AdminHelper
operator|.
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|getClient
argument_list|()
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed cached directive "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|class|ModifyCacheDirectiveInfoCommand
specifier|private
specifier|static
class|class
name|ModifyCacheDirectiveInfoCommand
implements|implements
name|AdminHelper
operator|.
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-modifyDirective"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" -id<id> [-path<path>] [-force] [-replication<replication>] "
operator|+
literal|"[-pool<pool-name>] [-ttl<time-to-live>]]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|AdminHelper
operator|.
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<id>"
argument_list|,
literal|"The ID of the directive to modify (required)"
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<path>"
argument_list|,
literal|"A path to cache. The path can be "
operator|+
literal|"a directory or a file. (optional)"
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"-force"
argument_list|,
literal|"Skips checking of cache pool resource limits."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<replication>"
argument_list|,
literal|"The cache replication factor to use. "
operator|+
literal|"(optional)"
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<pool-name>"
argument_list|,
literal|"The pool to which the directive will be "
operator|+
literal|"added. You must have write permission on the cache pool "
operator|+
literal|"in order to move a directive into it. (optional)"
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<time-to-live>"
argument_list|,
literal|"How long the directive is "
operator|+
literal|"valid. Can be specified in minutes, hours, and days, e.g. "
operator|+
literal|"30m, 4h, 2d. Valid units are [smhd]."
operator|+
literal|" \"never\" indicates a directive that never expires."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Modify a cache directive.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CacheDirectiveInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|boolean
name|modified
init|=
literal|false
decl_stmt|;
name|String
name|idString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-id"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|idString
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a directive ID with -id."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|builder
operator|.
name|setId
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|idString
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-path"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|modified
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|force
init|=
name|StringUtils
operator|.
name|popOption
argument_list|(
literal|"-force"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|String
name|replicationString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-replication"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicationString
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setReplication
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
name|replicationString
argument_list|)
argument_list|)
expr_stmt|;
name|modified
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|poolName
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-pool"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|modified
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|ttlString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-ttl"
argument_list|,
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|Expiration
name|ex
init|=
name|parseExpirationString
argument_list|(
name|ttlString
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setExpiration
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|modified
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error while parsing ttl value: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand argument: "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|modified
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No modifications were specified."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|AdminHelper
operator|.
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CacheFlag
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|force
condition|)
block|{
name|flags
operator|.
name|add
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dfs
operator|.
name|modifyCacheDirective
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Modified cache directive "
operator|+
name|idString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|class|RemoveCacheDirectiveInfosCommand
specifier|private
specifier|static
class|class
name|RemoveCacheDirectiveInfosCommand
implements|implements
name|AdminHelper
operator|.
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-removeDirectives"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" -path<path>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|AdminHelper
operator|.
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"-path<path>"
argument_list|,
literal|"The path of the cache directives to remove.  "
operator|+
literal|"You must have write permission on the pool of the directive in order "
operator|+
literal|"to remove it.  To see a list of cache directives, use the "
operator|+
literal|"-listDirectives command."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Remove every cache directive with the specified path.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-path"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a path with -path."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand argument: "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
try|try
block|{
name|DistributedFileSystem
name|dfs
init|=
name|AdminHelper
operator|.
name|getDFS
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CacheDirectiveEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|removeCacheDirective
argument_list|(
name|entry
operator|.
name|getInfo
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed cache directive "
operator|+
name|entry
operator|.
name|getInfo
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|2
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|exitCode
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removed every cache directive with path "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
block|}
DECL|class|ListCacheDirectiveInfoCommand
specifier|private
specifier|static
class|class
name|ListCacheDirectiveInfoCommand
implements|implements
name|AdminHelper
operator|.
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-listDirectives"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" [-stats] [-path<path>] [-pool<pool>] [-id<id>]"
operator|+
literal|"]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|AdminHelper
operator|.
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"-stats"
argument_list|,
literal|"List path-based cache directive statistics."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<path>"
argument_list|,
literal|"List only "
operator|+
literal|"cache directives with this path. "
operator|+
literal|"Note that if there is a cache directive for<path> "
operator|+
literal|"in a cache pool that we don't have read access for, it "
operator|+
literal|"will not be listed."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<pool>"
argument_list|,
literal|"List only path cache directives in that pool."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<id>"
argument_list|,
literal|"List the cache directive with this id."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"List cache directives.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CacheDirectiveInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|String
name|pathFilter
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-path"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathFilter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPath
argument_list|(
operator|new
name|Path
argument_list|(
name|pathFilter
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|poolFilter
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-pool"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolFilter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPool
argument_list|(
name|poolFilter
argument_list|)
expr_stmt|;
block|}
name|boolean
name|printStats
init|=
name|StringUtils
operator|.
name|popOption
argument_list|(
literal|"-stats"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|String
name|idFilter
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-id"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|idFilter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setId
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|idFilter
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't understand argument: "
operator|+
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|TableListing
operator|.
name|Builder
name|tableBuilder
init|=
operator|new
name|TableListing
operator|.
name|Builder
argument_list|()
operator|.
name|addField
argument_list|(
literal|"ID"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"POOL"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"REPL"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"EXPIRY"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"PATH"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
decl_stmt|;
if|if
condition|(
name|printStats
condition|)
block|{
name|tableBuilder
operator|.
name|addField
argument_list|(
literal|"BYTES_NEEDED"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"BYTES_CACHED"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"FILES_NEEDED"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"FILES_CACHED"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
block|}
name|TableListing
name|tableListing
init|=
name|tableBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|DistributedFileSystem
name|dfs
init|=
name|AdminHelper
operator|.
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCacheDirectives
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numEntries
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CacheDirectiveEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheDirectiveInfo
name|directive
init|=
name|entry
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|CacheDirectiveStats
name|stats
init|=
name|entry
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|""
operator|+
name|directive
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|""
operator|+
name|directive
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expiry
decl_stmt|;
comment|// This is effectively never, round for nice printing
if|if
condition|(
name|directive
operator|.
name|getExpiration
argument_list|()
operator|.
name|getMillis
argument_list|()
operator|>
name|Expiration
operator|.
name|MAX_RELATIVE_EXPIRY_MS
operator|/
literal|2
condition|)
block|{
name|expiry
operator|=
literal|"never"
expr_stmt|;
block|}
else|else
block|{
name|expiry
operator|=
name|directive
operator|.
name|getExpiration
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
name|expiry
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|directive
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|printStats
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
literal|""
operator|+
name|stats
operator|.
name|getBytesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|""
operator|+
name|stats
operator|.
name|getBytesCached
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|""
operator|+
name|stats
operator|.
name|getFilesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|""
operator|+
name|stats
operator|.
name|getFilesCached
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tableListing
operator|.
name|addRow
argument_list|(
name|row
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|row
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|numEntries
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found %d entr%s%n"
argument_list|,
name|numEntries
argument_list|,
name|numEntries
operator|==
literal|1
condition|?
literal|"y"
else|:
literal|"ies"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|numEntries
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|tableListing
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|class|AddCachePoolCommand
specifier|private
specifier|static
class|class
name|AddCachePoolCommand
implements|implements
name|AdminHelper
operator|.
name|Command
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"-addPool"
decl_stmt|;
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|NAME
operator|+
literal|"<name> [-owner<owner>] "
operator|+
literal|"[-group<group>] [-mode<mode>] [-limit<limit>] "
operator|+
literal|"[-defaultReplication<defaultReplication>] [-maxTtl<maxTtl>]"
operator|+
literal|"]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|AdminHelper
operator|.
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<name>"
argument_list|,
literal|"Name of the new pool."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<owner>"
argument_list|,
literal|"Username of the owner of the pool. "
operator|+
literal|"Defaults to the current user."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<group>"
argument_list|,
literal|"Group of the pool. "
operator|+
literal|"Defaults to the primary group name of the current user."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<mode>"
argument_list|,
literal|"UNIX-style permissions for the pool. "
operator|+
literal|"Permissions are specified in octal, e.g. 0755. "
operator|+
literal|"By default, this is set to "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"0%03o"
argument_list|,
name|FsPermission
operator|.
name|getCachePoolDefault
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<limit>"
argument_list|,
literal|"The maximum number of bytes that can be "
operator|+
literal|"cached by directives in this pool, in aggregate. By default, "
operator|+
literal|"no limit is set."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<defaultReplication>"
argument_list|,
literal|"The default replication "
operator|+
literal|"number for cache directive in the pool. "
operator|+
literal|"If not set, the replication is set to 1"
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<maxTtl>"
argument_list|,
literal|"The maximum allowed time-to-live for "
operator|+
literal|"directives being added to the pool. This can be specified in "
operator|+
literal|"seconds, minutes, hours, and days, e.g. 120s, 30m, 4h, 2d. "
operator|+
literal|"Valid units are [smhd]. By default, no maximum is set. "
operator|+
literal|"A value of \"never\" specifies that there is no limit."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"Add a new cache pool.\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|popFirstNonOption
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a name when creating a "
operator|+
literal|"cache pool."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|CachePoolInfo
name|info
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|owner
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-owner"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setOwnerName
argument_list|(
name|owner
argument_list|)
expr_stmt|;
block|}
name|String
name|group
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-group"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setGroupName
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|String
name|modeString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-mode"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|modeString
operator|!=
literal|null
condition|)
block|{
name|short
name|mode
init|=
name|Short
operator|.
name|parseShort
argument_list|(
name|modeString
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|info
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|limitString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-limit"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Long
name|limit
init|=
name|AdminHelper
operator|.
name|parseLimitString
argument_list|(
name|limitString
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
name|String
name|replicationString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-defaultReplication"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicationString
operator|!=
literal|null
condition|)
block|{
name|short
name|defaultReplication
init|=
name|Short
operator|.
name|parseShort
argument_list|(
name|replicationString
argument_list|)
decl_stmt|;
name|info
operator|.
name|setDefaultReplication
argument_list|(
name|defaultReplication
argument_list|)
expr_stmt|;
block|}
name|String
name|maxTtlString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-maxTtl"
argument_list|,
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|Long
name|maxTtl
init|=
name|AdminHelper
operator|.
name|parseTtlString
argument_list|(
name|maxTtlString
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxTtl
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
name|maxTtl
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error while parsing maxTtl value: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Can't understand arguments: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|AdminHelper
operator|.
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully added cache pool "
operator|+
name|name
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|class|ModifyCachePoolCommand
specifier|private
specifier|static
class|class
name|ModifyCachePoolCommand
implements|implements
name|AdminHelper
operator|.
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-modifyPool"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|"<name> [-owner<owner>] "
operator|+
literal|"[-group<group>] [-mode<mode>] [-limit<limit>] "
operator|+
literal|"[-defaultReplication<defaultReplication>] [-maxTtl<maxTtl>]]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|AdminHelper
operator|.
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<name>"
argument_list|,
literal|"Name of the pool to modify."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<owner>"
argument_list|,
literal|"Username of the owner of the pool"
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<group>"
argument_list|,
literal|"Groupname of the group of the pool."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<mode>"
argument_list|,
literal|"Unix-style permissions of the pool in octal."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<limit>"
argument_list|,
literal|"Maximum number of bytes that can be cached "
operator|+
literal|"by this pool."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<defaultReplication>"
argument_list|,
literal|"Default replication num for "
operator|+
literal|"directives in this pool"
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<maxTtl>"
argument_list|,
literal|"The maximum allowed time-to-live for "
operator|+
literal|"directives being added to the pool."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
name|WordUtils
operator|.
name|wrap
argument_list|(
literal|"Modifies the metadata of an existing cache pool. "
operator|+
literal|"See usage of "
operator|+
name|AddCachePoolCommand
operator|.
name|NAME
operator|+
literal|" for more details."
argument_list|,
name|AdminHelper
operator|.
name|MAX_LINE_WIDTH
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|owner
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-owner"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|String
name|group
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-group"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|String
name|modeString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-mode"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Integer
name|mode
init|=
operator|(
name|modeString
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|modeString
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|String
name|limitString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-limit"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Long
name|limit
init|=
name|AdminHelper
operator|.
name|parseLimitString
argument_list|(
name|limitString
argument_list|)
decl_stmt|;
name|String
name|replicationString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-defaultReplication"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Short
name|defaultReplication
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|replicationString
operator|!=
literal|null
condition|)
block|{
name|defaultReplication
operator|=
name|Short
operator|.
name|parseShort
argument_list|(
name|replicationString
argument_list|)
expr_stmt|;
block|}
name|String
name|maxTtlString
init|=
name|StringUtils
operator|.
name|popOptionWithArgument
argument_list|(
literal|"-maxTtl"
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Long
name|maxTtl
decl_stmt|;
try|try
block|{
name|maxTtl
operator|=
name|AdminHelper
operator|.
name|parseTtlString
argument_list|(
name|maxTtlString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error while parsing maxTtl value: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|String
name|name
init|=
name|StringUtils
operator|.
name|popFirstNonOption
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a name when creating a "
operator|+
literal|"cache pool."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Can't understand arguments: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|CachePoolInfo
name|info
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setOwnerName
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setGroupName
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|mode
operator|.
name|shortValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|defaultReplication
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setDefaultReplication
argument_list|(
name|defaultReplication
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|maxTtl
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
name|maxTtl
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|changed
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify at least one attribute to "
operator|+
literal|"change in the cache pool."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|AdminHelper
operator|.
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|modifyCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Successfully modified cache pool "
operator|+
name|name
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|" to have "
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prefix
operator|+
literal|"owner name "
operator|+
name|owner
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|" and "
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prefix
operator|+
literal|"group name "
operator|+
name|group
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|" and "
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prefix
operator|+
literal|"mode "
operator|+
operator|new
name|FsPermission
argument_list|(
name|mode
operator|.
name|shortValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|" and "
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prefix
operator|+
literal|"limit "
operator|+
name|limit
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|" and "
expr_stmt|;
block|}
if|if
condition|(
name|defaultReplication
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"replication "
operator|+
name|defaultReplication
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|" replication "
expr_stmt|;
block|}
if|if
condition|(
name|maxTtl
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|prefix
operator|+
literal|"max time-to-live "
operator|+
name|maxTtlString
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|class|RemoveCachePoolCommand
specifier|private
specifier|static
class|class
name|RemoveCachePoolCommand
implements|implements
name|AdminHelper
operator|.
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-removePool"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|"<name>]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
name|WordUtils
operator|.
name|wrap
argument_list|(
literal|"Remove a cache pool. This also uncaches paths "
operator|+
literal|"associated with the pool.\n\n"
argument_list|,
name|AdminHelper
operator|.
name|MAX_LINE_WIDTH
argument_list|)
operator|+
literal|"<name>  Name of the cache pool to remove.\n"
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|popFirstNonOption
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a name when deleting a "
operator|+
literal|"cache pool."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Can't understand arguments: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|AdminHelper
operator|.
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|dfs
operator|.
name|removeCachePool
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully removed cache pool "
operator|+
name|name
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|class|ListCachePoolsCommand
specifier|private
specifier|static
class|class
name|ListCachePoolsCommand
implements|implements
name|AdminHelper
operator|.
name|Command
block|{
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"-listPools"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortUsage ()
specifier|public
name|String
name|getShortUsage
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|" [-stats] [<name>]]\n"
return|;
block|}
annotation|@
name|Override
DECL|method|getLongUsage ()
specifier|public
name|String
name|getLongUsage
parameter_list|()
block|{
name|TableListing
name|listing
init|=
name|AdminHelper
operator|.
name|getOptionDescriptionListing
argument_list|()
decl_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"-stats"
argument_list|,
literal|"Display additional cache pool statistics."
argument_list|)
expr_stmt|;
name|listing
operator|.
name|addRow
argument_list|(
literal|"<name>"
argument_list|,
literal|"If specified, list only the named cache pool."
argument_list|)
expr_stmt|;
return|return
name|getShortUsage
argument_list|()
operator|+
literal|"\n"
operator|+
name|WordUtils
operator|.
name|wrap
argument_list|(
literal|"Display information about one or more cache pools, "
operator|+
literal|"e.g. name, owner, group, permissions, etc."
argument_list|,
name|AdminHelper
operator|.
name|MAX_LINE_WIDTH
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|listing
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (Configuration conf, List<String> args)
specifier|public
name|int
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|StringUtils
operator|.
name|popFirstNonOption
argument_list|(
name|args
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|printStats
init|=
name|StringUtils
operator|.
name|popOption
argument_list|(
literal|"-stats"
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Can't understand arguments: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage is "
operator|+
name|getShortUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DistributedFileSystem
name|dfs
init|=
name|AdminHelper
operator|.
name|getDFS
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TableListing
operator|.
name|Builder
name|builder
init|=
operator|new
name|TableListing
operator|.
name|Builder
argument_list|()
operator|.
name|addField
argument_list|(
literal|"NAME"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"OWNER"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"GROUP"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"MODE"
argument_list|,
name|Justification
operator|.
name|LEFT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"LIMIT"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"MAXTTL"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"DEFAULT_REPLICATION"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
decl_stmt|;
if|if
condition|(
name|printStats
condition|)
block|{
name|builder
operator|.
name|addField
argument_list|(
literal|"BYTES_NEEDED"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"BYTES_CACHED"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"BYTES_OVERLIMIT"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"FILES_NEEDED"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
operator|.
name|addField
argument_list|(
literal|"FILES_CACHED"
argument_list|,
name|Justification
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
block|}
name|TableListing
name|listing
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
name|numResults
init|=
literal|0
decl_stmt|;
try|try
block|{
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|iter
init|=
name|dfs
operator|.
name|listCachePools
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachePoolEntry
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|CachePoolInfo
name|info
init|=
name|entry
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|row
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|info
operator|.
name|getPoolName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|info
operator|.
name|getMode
argument_list|()
operator|!=
literal|null
condition|?
name|info
operator|.
name|getMode
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|Long
name|limit
init|=
name|info
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|String
name|limitString
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
name|limit
operator|.
name|equals
argument_list|(
name|CachePoolInfo
operator|.
name|LIMIT_UNLIMITED
argument_list|)
condition|)
block|{
name|limitString
operator|=
literal|"unlimited"
expr_stmt|;
block|}
else|else
block|{
name|limitString
operator|=
literal|""
operator|+
name|limit
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
name|limitString
argument_list|)
expr_stmt|;
name|Long
name|maxTtl
init|=
name|info
operator|.
name|getMaxRelativeExpiryMs
argument_list|()
decl_stmt|;
name|String
name|maxTtlString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|maxTtl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxTtl
operator|==
name|CachePoolInfo
operator|.
name|RELATIVE_EXPIRY_NEVER
condition|)
block|{
name|maxTtlString
operator|=
literal|"never"
expr_stmt|;
block|}
else|else
block|{
name|maxTtlString
operator|=
name|DFSUtil
operator|.
name|durationToString
argument_list|(
name|maxTtl
argument_list|)
expr_stmt|;
block|}
block|}
name|row
operator|.
name|add
argument_list|(
name|maxTtlString
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|""
operator|+
name|info
operator|.
name|getDefaultReplication
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|printStats
condition|)
block|{
name|CachePoolStats
name|stats
init|=
name|entry
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|stats
operator|.
name|getBytesNeeded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|stats
operator|.
name|getBytesCached
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|stats
operator|.
name|getBytesOverlimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|stats
operator|.
name|getFilesNeeded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|stats
operator|.
name|getFilesCached
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|listing
operator|.
name|addRow
argument_list|(
name|row
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|row
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|numResults
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|AdminHelper
operator|.
name|prettifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found %d result%s.%n"
argument_list|,
name|numResults
argument_list|,
operator|(
name|numResults
operator|==
literal|1
condition|?
literal|""
else|:
literal|"s"
operator|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|numResults
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|listing
argument_list|)
expr_stmt|;
block|}
comment|// If list pools succeed, we return 0 (success exit code)
return|return
literal|0
return|;
block|}
block|}
DECL|field|COMMANDS
specifier|private
specifier|static
specifier|final
name|AdminHelper
operator|.
name|Command
index|[]
name|COMMANDS
init|=
block|{
operator|new
name|AddCacheDirectiveInfoCommand
argument_list|()
block|,
operator|new
name|ModifyCacheDirectiveInfoCommand
argument_list|()
block|,
operator|new
name|ListCacheDirectiveInfoCommand
argument_list|()
block|,
operator|new
name|RemoveCacheDirectiveInfoCommand
argument_list|()
block|,
operator|new
name|RemoveCacheDirectiveInfosCommand
argument_list|()
block|,
operator|new
name|AddCachePoolCommand
argument_list|()
block|,
operator|new
name|ModifyCachePoolCommand
argument_list|()
block|,
operator|new
name|RemoveCachePoolCommand
argument_list|()
block|,
operator|new
name|ListCachePoolsCommand
argument_list|()
block|}
decl_stmt|;
block|}
end_class

end_unit

