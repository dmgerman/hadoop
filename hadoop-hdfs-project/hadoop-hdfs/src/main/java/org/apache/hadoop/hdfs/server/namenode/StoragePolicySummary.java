begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_comment
comment|/**  * Aggregate the storage type information for a set of blocks  *  */
end_comment

begin_class
DECL|class|StoragePolicySummary
specifier|public
class|class
name|StoragePolicySummary
block|{
DECL|field|storageComboCounts
name|Map
argument_list|<
name|StorageTypeAllocation
argument_list|,
name|Long
argument_list|>
name|storageComboCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|storagePolicies
specifier|final
name|BlockStoragePolicy
index|[]
name|storagePolicies
decl_stmt|;
DECL|field|totalBlocks
name|int
name|totalBlocks
decl_stmt|;
DECL|method|StoragePolicySummary (BlockStoragePolicy[] storagePolicies)
name|StoragePolicySummary
parameter_list|(
name|BlockStoragePolicy
index|[]
name|storagePolicies
parameter_list|)
block|{
name|this
operator|.
name|storagePolicies
operator|=
name|storagePolicies
expr_stmt|;
block|}
comment|// Add a storage type combination
DECL|method|add (StorageType[] storageTypes, BlockStoragePolicy policy)
name|void
name|add
parameter_list|(
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|BlockStoragePolicy
name|policy
parameter_list|)
block|{
name|StorageTypeAllocation
name|storageCombo
init|=
operator|new
name|StorageTypeAllocation
argument_list|(
name|storageTypes
argument_list|,
name|policy
argument_list|)
decl_stmt|;
name|Long
name|count
init|=
name|storageComboCounts
operator|.
name|get
argument_list|(
name|storageCombo
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|storageComboCounts
operator|.
name|put
argument_list|(
name|storageCombo
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|storageCombo
operator|.
name|setActualStoragePolicy
argument_list|(
name|getStoragePolicy
argument_list|(
name|storageCombo
operator|.
name|getStorageTypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storageComboCounts
operator|.
name|put
argument_list|(
name|storageCombo
argument_list|,
name|count
operator|.
name|longValue
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|totalBlocks
operator|++
expr_stmt|;
block|}
comment|// sort the storageType combinations based on the total blocks counts
comment|// in descending order
DECL|method|sortByComparator ( Map<StorageTypeAllocation, Long> unsortMap)
specifier|static
name|List
argument_list|<
name|Entry
argument_list|<
name|StorageTypeAllocation
argument_list|,
name|Long
argument_list|>
argument_list|>
name|sortByComparator
parameter_list|(
name|Map
argument_list|<
name|StorageTypeAllocation
argument_list|,
name|Long
argument_list|>
name|unsortMap
parameter_list|)
block|{
name|List
argument_list|<
name|Entry
argument_list|<
name|StorageTypeAllocation
argument_list|,
name|Long
argument_list|>
argument_list|>
name|storageAllocations
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|unsortMap
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Sorting the list based on values
name|Collections
operator|.
name|sort
argument_list|(
name|storageAllocations
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|StorageTypeAllocation
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|StorageTypeAllocation
argument_list|,
name|Long
argument_list|>
name|o1
parameter_list|,
name|Entry
argument_list|<
name|StorageTypeAllocation
argument_list|,
name|Long
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|o2
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o1
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|storageAllocations
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|compliantBlocksSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|compliantBlocksSB
operator|.
name|append
argument_list|(
literal|"\nBlocks satisfying the specified storage policy:"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nStorage Policy"
operator|+
literal|"                  # of blocks       % of blocks\n"
argument_list|)
expr_stmt|;
name|StringBuilder
name|nonCompliantBlocksSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Formatter
name|compliantFormatter
init|=
operator|new
name|Formatter
argument_list|(
name|compliantBlocksSB
argument_list|)
decl_stmt|;
name|Formatter
name|nonCompliantFormatter
init|=
operator|new
name|Formatter
argument_list|(
name|nonCompliantBlocksSB
argument_list|)
decl_stmt|;
name|NumberFormat
name|percentFormat
init|=
name|NumberFormat
operator|.
name|getPercentInstance
argument_list|()
decl_stmt|;
name|percentFormat
operator|.
name|setMinimumFractionDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|percentFormat
operator|.
name|setMaximumFractionDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StorageTypeAllocation
argument_list|,
name|Long
argument_list|>
name|storageComboCount
range|:
name|sortByComparator
argument_list|(
name|storageComboCounts
argument_list|)
control|)
block|{
name|double
name|percent
init|=
operator|(
name|double
operator|)
name|storageComboCount
operator|.
name|getValue
argument_list|()
operator|/
operator|(
name|double
operator|)
name|totalBlocks
decl_stmt|;
name|StorageTypeAllocation
name|sta
init|=
name|storageComboCount
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|sta
operator|.
name|policyMatches
argument_list|()
condition|)
block|{
name|compliantFormatter
operator|.
name|format
argument_list|(
literal|"%-25s %10d  %20s%n"
argument_list|,
name|sta
operator|.
name|getStoragePolicyDescriptor
argument_list|()
argument_list|,
name|storageComboCount
operator|.
name|getValue
argument_list|()
argument_list|,
name|percentFormat
operator|.
name|format
argument_list|(
name|percent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nonCompliantBlocksSB
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nonCompliantBlocksSB
operator|.
name|append
argument_list|(
literal|"\nBlocks NOT satisfying the specified storage policy:"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\nStorage Policy                  "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Specified Storage Policy      # of blocks       % of blocks\n"
argument_list|)
expr_stmt|;
block|}
name|nonCompliantFormatter
operator|.
name|format
argument_list|(
literal|"%-35s %-20s %10d  %20s%n"
argument_list|,
name|sta
operator|.
name|getStoragePolicyDescriptor
argument_list|()
argument_list|,
name|sta
operator|.
name|getSpecifiedStoragePolicy
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|storageComboCount
operator|.
name|getValue
argument_list|()
argument_list|,
name|percentFormat
operator|.
name|format
argument_list|(
name|percent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nonCompliantBlocksSB
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nonCompliantBlocksSB
operator|.
name|append
argument_list|(
literal|"\nAll blocks satisfy specified storage policy.\n"
argument_list|)
expr_stmt|;
block|}
name|compliantFormatter
operator|.
name|close
argument_list|()
expr_stmt|;
name|nonCompliantFormatter
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|compliantBlocksSB
operator|.
name|toString
argument_list|()
operator|+
name|nonCompliantBlocksSB
return|;
block|}
comment|/**    *     * @param storageTypes - sorted array of storageTypes    * @return Storage Policy which matches the specific storage Combination    */
DECL|method|getStoragePolicy (StorageType[] storageTypes)
specifier|private
name|BlockStoragePolicy
name|getStoragePolicy
parameter_list|(
name|StorageType
index|[]
name|storageTypes
parameter_list|)
block|{
for|for
control|(
name|BlockStoragePolicy
name|storagePolicy
range|:
name|storagePolicies
control|)
block|{
name|StorageType
index|[]
name|policyStorageTypes
init|=
name|storagePolicy
operator|.
name|getStorageTypes
argument_list|()
decl_stmt|;
name|policyStorageTypes
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|policyStorageTypes
argument_list|,
name|policyStorageTypes
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|policyStorageTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|policyStorageTypes
operator|.
name|length
operator|<=
name|storageTypes
operator|.
name|length
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|policyStorageTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|policyStorageTypes
index|[
name|i
index|]
operator|!=
name|storageTypes
index|[
name|i
index|]
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|<
name|policyStorageTypes
operator|.
name|length
condition|)
block|{
continue|continue;
block|}
name|int
name|j
init|=
name|policyStorageTypes
operator|.
name|length
decl_stmt|;
for|for
control|(
init|;
name|j
operator|<
name|storageTypes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|policyStorageTypes
index|[
name|i
operator|-
literal|1
index|]
operator|!=
name|storageTypes
index|[
name|j
index|]
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|j
operator|==
name|storageTypes
operator|.
name|length
condition|)
block|{
return|return
name|storagePolicy
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Internal class which represents a unique Storage type combination    *    */
DECL|class|StorageTypeAllocation
specifier|static
class|class
name|StorageTypeAllocation
block|{
DECL|field|specifiedStoragePolicy
specifier|private
specifier|final
name|BlockStoragePolicy
name|specifiedStoragePolicy
decl_stmt|;
DECL|field|storageTypes
specifier|private
specifier|final
name|StorageType
index|[]
name|storageTypes
decl_stmt|;
DECL|field|actualStoragePolicy
specifier|private
name|BlockStoragePolicy
name|actualStoragePolicy
decl_stmt|;
DECL|method|StorageTypeAllocation (StorageType[] storageTypes, BlockStoragePolicy specifiedStoragePolicy)
name|StorageTypeAllocation
parameter_list|(
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|BlockStoragePolicy
name|specifiedStoragePolicy
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|storageTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|storageTypes
operator|=
name|storageTypes
expr_stmt|;
name|this
operator|.
name|specifiedStoragePolicy
operator|=
name|specifiedStoragePolicy
expr_stmt|;
block|}
DECL|method|getStorageTypes ()
name|StorageType
index|[]
name|getStorageTypes
parameter_list|()
block|{
return|return
name|storageTypes
return|;
block|}
DECL|method|getSpecifiedStoragePolicy ()
name|BlockStoragePolicy
name|getSpecifiedStoragePolicy
parameter_list|()
block|{
return|return
name|specifiedStoragePolicy
return|;
block|}
DECL|method|setActualStoragePolicy (BlockStoragePolicy actualStoragePolicy)
name|void
name|setActualStoragePolicy
parameter_list|(
name|BlockStoragePolicy
name|actualStoragePolicy
parameter_list|)
block|{
name|this
operator|.
name|actualStoragePolicy
operator|=
name|actualStoragePolicy
expr_stmt|;
block|}
DECL|method|getActualStoragePolicy ()
name|BlockStoragePolicy
name|getActualStoragePolicy
parameter_list|()
block|{
return|return
name|actualStoragePolicy
return|;
block|}
DECL|method|getStorageAllocationAsString (Map<StorageType, Integer> storageType_countmap)
specifier|private
specifier|static
name|String
name|getStorageAllocationAsString
parameter_list|(
name|Map
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
name|storageType_countmap
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
name|storageTypeCountEntry
range|:
name|storageType_countmap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|storageTypeCountEntry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|":"
operator|+
name|storageTypeCountEntry
operator|.
name|getValue
argument_list|()
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getStorageAllocationAsString ()
specifier|private
name|String
name|getStorageAllocationAsString
parameter_list|()
block|{
name|Map
argument_list|<
name|StorageType
argument_list|,
name|Integer
argument_list|>
name|storageType_countmap
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|storageTypes
control|)
block|{
name|Integer
name|count
init|=
name|storageType_countmap
operator|.
name|get
argument_list|(
name|storageType
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|storageType_countmap
operator|.
name|put
argument_list|(
name|storageType
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storageType_countmap
operator|.
name|put
argument_list|(
name|storageType
argument_list|,
name|count
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|getStorageAllocationAsString
argument_list|(
name|storageType_countmap
argument_list|)
operator|)
return|;
block|}
DECL|method|getStoragePolicyDescriptor ()
name|String
name|getStoragePolicyDescriptor
parameter_list|()
block|{
name|StringBuilder
name|storagePolicyDescriptorSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|actualStoragePolicy
operator|!=
literal|null
condition|)
block|{
name|storagePolicyDescriptorSB
operator|.
name|append
argument_list|(
name|getStorageAllocationAsString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|actualStoragePolicy
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storagePolicyDescriptorSB
operator|.
name|append
argument_list|(
name|getStorageAllocationAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|storagePolicyDescriptorSB
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|policyMatches ()
name|boolean
name|policyMatches
parameter_list|()
block|{
return|return
name|specifiedStoragePolicy
operator|.
name|equals
argument_list|(
name|actualStoragePolicy
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|specifiedStoragePolicy
operator|.
name|getName
argument_list|()
operator|+
literal|"|"
operator|+
name|getStoragePolicyDescriptor
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|specifiedStoragePolicy
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|storageTypes
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object another)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|another
parameter_list|)
block|{
return|return
operator|(
name|another
operator|instanceof
name|StorageTypeAllocation
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|specifiedStoragePolicy
argument_list|,
operator|(
operator|(
name|StorageTypeAllocation
operator|)
name|another
operator|)
operator|.
name|specifiedStoragePolicy
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|storageTypes
argument_list|,
operator|(
operator|(
name|StorageTypeAllocation
operator|)
name|another
operator|)
operator|.
name|storageTypes
argument_list|)
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

