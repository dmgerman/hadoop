begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * An implementation of a protocol for accessing filesystems over HTTPS. The  * following implementation provides a limited, read-only interface to a  * filesystem over HTTPS.  *  * @see org.apache.hadoop.hdfs.server.namenode.ListPathsServlet  * @see org.apache.hadoop.hdfs.server.namenode.FileDataServlet  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|HsftpFileSystem
specifier|public
class|class
name|HsftpFileSystem
extends|extends
name|HftpFileSystem
block|{
DECL|field|TOKEN_KIND
specifier|public
specifier|static
specifier|final
name|Text
name|TOKEN_KIND
init|=
operator|new
name|Text
argument_list|(
literal|"HSFTP delegation"
argument_list|)
decl_stmt|;
DECL|field|SCHEME
specifier|public
specifier|static
specifier|final
name|String
name|SCHEME
init|=
literal|"hsftp"
decl_stmt|;
comment|/**    * Return the protocol scheme for the FileSystem.    *<p/>    *    * @return<code>hsftp</code>    */
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|SCHEME
return|;
block|}
comment|/**    * Return the underlying protocol that is used to talk to the namenode.    */
annotation|@
name|Override
DECL|method|getUnderlyingProtocol ()
specifier|protected
name|String
name|getUnderlyingProtocol
parameter_list|()
block|{
return|return
literal|"https"
return|;
block|}
annotation|@
name|Override
DECL|method|initConnectionFactoryAndTokenAspect (Configuration conf)
specifier|protected
name|void
name|initConnectionFactoryAndTokenAspect
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|tokenAspect
operator|=
operator|new
name|TokenAspect
argument_list|<
name|HftpFileSystem
argument_list|>
argument_list|(
name|this
argument_list|,
name|TOKEN_KIND
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|URLConnectionFactory
argument_list|(
name|URLConnectionFactory
operator|.
name|DEFAULT_SOCKET_TIMEOUT
argument_list|)
expr_stmt|;
try|try
block|{
name|connectionFactory
operator|.
name|setConnConfigurator
argument_list|(
name|URLConnectionFactory
operator|.
name|newSslConnConfigurator
argument_list|(
name|URLConnectionFactory
operator|.
name|DEFAULT_SOCKET_TIMEOUT
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDefaultPort ()
specifier|protected
name|int
name|getDefaultPort
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_PORT_DEFAULT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

