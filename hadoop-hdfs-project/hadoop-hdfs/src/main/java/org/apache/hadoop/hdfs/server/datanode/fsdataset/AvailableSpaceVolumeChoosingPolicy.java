begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_comment
comment|/**  * A DN volume choosing policy which takes into account the amount of free  * space on each of the available volumes when considering where to assign a  * new replica allocation. By default this policy prefers assigning replicas to  * those volumes with more available free space, so as to over time balance the  * available space of all the volumes within a DN.  * Use fine-grained locks to enable choosing volumes of different storage  * types concurrently.  */
end_comment

begin_class
DECL|class|AvailableSpaceVolumeChoosingPolicy
specifier|public
class|class
name|AvailableSpaceVolumeChoosingPolicy
parameter_list|<
name|V
extends|extends
name|FsVolumeSpi
parameter_list|>
implements|implements
name|VolumeChoosingPolicy
argument_list|<
name|V
argument_list|>
implements|,
name|Configurable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AvailableSpaceVolumeChoosingPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|syncLocks
specifier|private
name|Object
index|[]
name|syncLocks
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|balancedSpaceThreshold
specifier|private
name|long
name|balancedSpaceThreshold
init|=
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_DEFAULT
decl_stmt|;
DECL|field|balancedPreferencePercent
specifier|private
name|float
name|balancedPreferencePercent
init|=
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT
decl_stmt|;
DECL|method|AvailableSpaceVolumeChoosingPolicy (Random random)
name|AvailableSpaceVolumeChoosingPolicy
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|initLocks
argument_list|()
expr_stmt|;
block|}
DECL|method|AvailableSpaceVolumeChoosingPolicy ()
specifier|public
name|AvailableSpaceVolumeChoosingPolicy
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Random
argument_list|()
argument_list|)
expr_stmt|;
name|initLocks
argument_list|()
expr_stmt|;
block|}
DECL|method|initLocks ()
specifier|private
name|void
name|initLocks
parameter_list|()
block|{
name|int
name|numStorageTypes
init|=
name|StorageType
operator|.
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
name|syncLocks
operator|=
operator|new
name|Object
index|[
name|numStorageTypes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStorageTypes
condition|;
name|i
operator|++
control|)
block|{
name|syncLocks
index|[
name|i
index|]
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|balancedSpaceThreshold
operator|=
name|conf
operator|.
name|getLongBytes
argument_list|(
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY
argument_list|,
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
name|balancedPreferencePercent
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY
argument_list|,
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Available space volume choosing policy initialized: "
operator|+
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY
operator|+
literal|" = "
operator|+
name|balancedSpaceThreshold
operator|+
literal|", "
operator|+
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY
operator|+
literal|" = "
operator|+
name|balancedPreferencePercent
argument_list|)
expr_stmt|;
if|if
condition|(
name|balancedPreferencePercent
operator|>
literal|1.0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The value of "
operator|+
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY
operator|+
literal|" is greater than 1.0 but should be in the range 0.0 - 1.0"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|balancedPreferencePercent
operator|<
literal|0.5
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The value of "
operator|+
name|DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY
operator|+
literal|" is less than 0.5 so volumes with less available disk space will receive more block allocations"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
comment|// Nothing to do. Only added to fulfill the Configurable contract.
return|return
literal|null
return|;
block|}
DECL|field|roundRobinPolicyBalanced
specifier|private
specifier|final
name|VolumeChoosingPolicy
argument_list|<
name|V
argument_list|>
name|roundRobinPolicyBalanced
init|=
operator|new
name|RoundRobinVolumeChoosingPolicy
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|roundRobinPolicyHighAvailable
specifier|private
specifier|final
name|VolumeChoosingPolicy
argument_list|<
name|V
argument_list|>
name|roundRobinPolicyHighAvailable
init|=
operator|new
name|RoundRobinVolumeChoosingPolicy
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|roundRobinPolicyLowAvailable
specifier|private
specifier|final
name|VolumeChoosingPolicy
argument_list|<
name|V
argument_list|>
name|roundRobinPolicyLowAvailable
init|=
operator|new
name|RoundRobinVolumeChoosingPolicy
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|chooseVolume (List<V> volumes, long replicaSize, String storageId)
specifier|public
name|V
name|chooseVolume
parameter_list|(
name|List
argument_list|<
name|V
argument_list|>
name|volumes
parameter_list|,
name|long
name|replicaSize
parameter_list|,
name|String
name|storageId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|volumes
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|DiskOutOfSpaceException
argument_list|(
literal|"No more available volumes"
argument_list|)
throw|;
block|}
comment|// As all the items in volumes are with the same storage type,
comment|// so only need to get the storage type index of the first item in volumes
name|StorageType
name|storageType
init|=
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|storageType
operator|!=
literal|null
condition|?
name|storageType
operator|.
name|ordinal
argument_list|()
else|:
name|StorageType
operator|.
name|DEFAULT
operator|.
name|ordinal
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|syncLocks
index|[
name|index
index|]
init|)
block|{
return|return
name|doChooseVolume
argument_list|(
name|volumes
argument_list|,
name|replicaSize
argument_list|,
name|storageId
argument_list|)
return|;
block|}
block|}
DECL|method|doChooseVolume (final List<V> volumes, long replicaSize, String storageId)
specifier|private
name|V
name|doChooseVolume
parameter_list|(
specifier|final
name|List
argument_list|<
name|V
argument_list|>
name|volumes
parameter_list|,
name|long
name|replicaSize
parameter_list|,
name|String
name|storageId
parameter_list|)
throws|throws
name|IOException
block|{
name|AvailableSpaceVolumeList
name|volumesWithSpaces
init|=
operator|new
name|AvailableSpaceVolumeList
argument_list|(
name|volumes
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumesWithSpaces
operator|.
name|areAllVolumesWithinFreeSpaceThreshold
argument_list|()
condition|)
block|{
comment|// If they're actually not too far out of whack, fall back on pure round
comment|// robin.
name|V
name|volume
init|=
name|roundRobinPolicyBalanced
operator|.
name|chooseVolume
argument_list|(
name|volumes
argument_list|,
name|replicaSize
argument_list|,
name|storageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"All volumes are within the configured free space balance "
operator|+
literal|"threshold. Selecting "
operator|+
name|volume
operator|+
literal|" for write of block size "
operator|+
name|replicaSize
argument_list|)
expr_stmt|;
block|}
return|return
name|volume
return|;
block|}
else|else
block|{
name|V
name|volume
init|=
literal|null
decl_stmt|;
comment|// If none of the volumes with low free space have enough space for the
comment|// replica, always try to choose a volume with a lot of free space.
name|long
name|mostAvailableAmongLowVolumes
init|=
name|volumesWithSpaces
operator|.
name|getMostAvailableSpaceAmongVolumesWithLowAvailableSpace
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|V
argument_list|>
name|highAvailableVolumes
init|=
name|extractVolumesFromPairs
argument_list|(
name|volumesWithSpaces
operator|.
name|getVolumesWithHighAvailableSpace
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|V
argument_list|>
name|lowAvailableVolumes
init|=
name|extractVolumesFromPairs
argument_list|(
name|volumesWithSpaces
operator|.
name|getVolumesWithLowAvailableSpace
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|preferencePercentScaler
init|=
operator|(
name|highAvailableVolumes
operator|.
name|size
argument_list|()
operator|*
name|balancedPreferencePercent
operator|)
operator|+
operator|(
name|lowAvailableVolumes
operator|.
name|size
argument_list|()
operator|*
operator|(
literal|1
operator|-
name|balancedPreferencePercent
operator|)
operator|)
decl_stmt|;
name|float
name|scaledPreferencePercent
init|=
operator|(
name|highAvailableVolumes
operator|.
name|size
argument_list|()
operator|*
name|balancedPreferencePercent
operator|)
operator|/
name|preferencePercentScaler
decl_stmt|;
if|if
condition|(
name|mostAvailableAmongLowVolumes
operator|<
name|replicaSize
operator|||
name|random
operator|.
name|nextFloat
argument_list|()
operator|<
name|scaledPreferencePercent
condition|)
block|{
name|volume
operator|=
name|roundRobinPolicyHighAvailable
operator|.
name|chooseVolume
argument_list|(
name|highAvailableVolumes
argument_list|,
name|replicaSize
argument_list|,
name|storageId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Volumes are imbalanced. Selecting "
operator|+
name|volume
operator|+
literal|" from high available space volumes for write of block size "
operator|+
name|replicaSize
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|volume
operator|=
name|roundRobinPolicyLowAvailable
operator|.
name|chooseVolume
argument_list|(
name|lowAvailableVolumes
argument_list|,
name|replicaSize
argument_list|,
name|storageId
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Volumes are imbalanced. Selecting "
operator|+
name|volume
operator|+
literal|" from low available space volumes for write of block size "
operator|+
name|replicaSize
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|volume
return|;
block|}
block|}
comment|/**    * Used to keep track of the list of volumes we're choosing from.    */
DECL|class|AvailableSpaceVolumeList
specifier|private
class|class
name|AvailableSpaceVolumeList
block|{
DECL|field|volumes
specifier|private
specifier|final
name|List
argument_list|<
name|AvailableSpaceVolumePair
argument_list|>
name|volumes
decl_stmt|;
DECL|method|AvailableSpaceVolumeList (List<V> volumes)
specifier|public
name|AvailableSpaceVolumeList
parameter_list|(
name|List
argument_list|<
name|V
argument_list|>
name|volumes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|volumes
operator|=
operator|new
name|ArrayList
argument_list|<
name|AvailableSpaceVolumePair
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|V
name|volume
range|:
name|volumes
control|)
block|{
name|this
operator|.
name|volumes
operator|.
name|add
argument_list|(
operator|new
name|AvailableSpaceVolumePair
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return true if all volumes' free space is within the      *         configured threshold, false otherwise.      */
DECL|method|areAllVolumesWithinFreeSpaceThreshold ()
specifier|public
name|boolean
name|areAllVolumesWithinFreeSpaceThreshold
parameter_list|()
block|{
name|long
name|leastAvailable
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|mostAvailable
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AvailableSpaceVolumePair
name|volume
range|:
name|volumes
control|)
block|{
name|leastAvailable
operator|=
name|Math
operator|.
name|min
argument_list|(
name|leastAvailable
argument_list|,
name|volume
operator|.
name|getAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|mostAvailable
operator|=
name|Math
operator|.
name|max
argument_list|(
name|mostAvailable
argument_list|,
name|volume
operator|.
name|getAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|mostAvailable
operator|-
name|leastAvailable
operator|)
operator|<
name|balancedSpaceThreshold
return|;
block|}
comment|/**      * @return the minimum amount of space available on a single volume,      *         across all volumes.      */
DECL|method|getLeastAvailableSpace ()
specifier|private
name|long
name|getLeastAvailableSpace
parameter_list|()
block|{
name|long
name|leastAvailable
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|AvailableSpaceVolumePair
name|volume
range|:
name|volumes
control|)
block|{
name|leastAvailable
operator|=
name|Math
operator|.
name|min
argument_list|(
name|leastAvailable
argument_list|,
name|volume
operator|.
name|getAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|leastAvailable
return|;
block|}
comment|/**      * @return the maximum amount of space available across volumes with low space.      */
DECL|method|getMostAvailableSpaceAmongVolumesWithLowAvailableSpace ()
specifier|public
name|long
name|getMostAvailableSpaceAmongVolumesWithLowAvailableSpace
parameter_list|()
block|{
name|long
name|mostAvailable
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|AvailableSpaceVolumePair
name|volume
range|:
name|getVolumesWithLowAvailableSpace
argument_list|()
control|)
block|{
name|mostAvailable
operator|=
name|Math
operator|.
name|max
argument_list|(
name|mostAvailable
argument_list|,
name|volume
operator|.
name|getAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mostAvailable
return|;
block|}
comment|/**      * @return the list of volumes with relatively low available space.      */
DECL|method|getVolumesWithLowAvailableSpace ()
specifier|public
name|List
argument_list|<
name|AvailableSpaceVolumePair
argument_list|>
name|getVolumesWithLowAvailableSpace
parameter_list|()
block|{
name|long
name|leastAvailable
init|=
name|getLeastAvailableSpace
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AvailableSpaceVolumePair
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|AvailableSpaceVolumePair
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AvailableSpaceVolumePair
name|volume
range|:
name|volumes
control|)
block|{
if|if
condition|(
name|volume
operator|.
name|getAvailable
argument_list|()
operator|<=
name|leastAvailable
operator|+
name|balancedSpaceThreshold
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * @return the list of volumes with a lot of available space.      */
DECL|method|getVolumesWithHighAvailableSpace ()
specifier|public
name|List
argument_list|<
name|AvailableSpaceVolumePair
argument_list|>
name|getVolumesWithHighAvailableSpace
parameter_list|()
block|{
name|long
name|leastAvailable
init|=
name|getLeastAvailableSpace
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AvailableSpaceVolumePair
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|AvailableSpaceVolumePair
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AvailableSpaceVolumePair
name|volume
range|:
name|volumes
control|)
block|{
if|if
condition|(
name|volume
operator|.
name|getAvailable
argument_list|()
operator|>
name|leastAvailable
operator|+
name|balancedSpaceThreshold
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
comment|/**    * Used so that we only check the available space on a given volume once, at    * the beginning of    * {@link AvailableSpaceVolumeChoosingPolicy#chooseVolume}.    */
DECL|class|AvailableSpaceVolumePair
specifier|private
class|class
name|AvailableSpaceVolumePair
block|{
DECL|field|volume
specifier|private
specifier|final
name|V
name|volume
decl_stmt|;
DECL|field|availableSpace
specifier|private
specifier|final
name|long
name|availableSpace
decl_stmt|;
DECL|method|AvailableSpaceVolumePair (V volume)
specifier|public
name|AvailableSpaceVolumePair
parameter_list|(
name|V
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
name|this
operator|.
name|availableSpace
operator|=
name|volume
operator|.
name|getAvailable
argument_list|()
expr_stmt|;
block|}
DECL|method|getAvailable ()
specifier|public
name|long
name|getAvailable
parameter_list|()
block|{
return|return
name|availableSpace
return|;
block|}
DECL|method|getVolume ()
specifier|public
name|V
name|getVolume
parameter_list|()
block|{
return|return
name|volume
return|;
block|}
block|}
DECL|method|extractVolumesFromPairs (List<AvailableSpaceVolumePair> volumes)
specifier|private
name|List
argument_list|<
name|V
argument_list|>
name|extractVolumesFromPairs
parameter_list|(
name|List
argument_list|<
name|AvailableSpaceVolumePair
argument_list|>
name|volumes
parameter_list|)
block|{
name|List
argument_list|<
name|V
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AvailableSpaceVolumePair
name|volume
range|:
name|volumes
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|volume
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

