begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
operator|.
name|ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
operator|.
name|ERROR_ACCESS_TOKEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
operator|.
name|ERROR_INVALID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
operator|.
name|ERROR_UNSUPPORTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
operator|.
name|SUCCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
operator|.
name|DN_CLIENTTRACE_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|now
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ExtendedBlockId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|Peer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|BlockConstructionStage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|DataEncryptionKeyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|BlockOpResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|ClientReadStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpBlockChecksumResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|ReadOpChecksumInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|ReleaseShortCircuitAccessResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|ShortCircuitShmResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
operator|.
name|ShortCircuitFdsUnsupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
operator|.
name|ShortCircuitFdsVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ShortCircuitRegistry
operator|.
name|NewShmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|LengthInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitShm
operator|.
name|SlotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|unix
operator|.
name|DomainSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * Thread for processing incoming/outgoing data stream.  */
end_comment

begin_class
DECL|class|DataXceiver
class|class
name|DataXceiver
extends|extends
name|Receiver
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|DataNode
operator|.
name|LOG
decl_stmt|;
DECL|field|ClientTraceLog
specifier|static
specifier|final
name|Log
name|ClientTraceLog
init|=
name|DataNode
operator|.
name|ClientTraceLog
decl_stmt|;
DECL|field|peer
specifier|private
name|Peer
name|peer
decl_stmt|;
DECL|field|remoteAddress
specifier|private
specifier|final
name|String
name|remoteAddress
decl_stmt|;
comment|// address of remote side
DECL|field|localAddress
specifier|private
specifier|final
name|String
name|localAddress
decl_stmt|;
comment|// local address of this daemon
DECL|field|datanode
specifier|private
specifier|final
name|DataNode
name|datanode
decl_stmt|;
DECL|field|dnConf
specifier|private
specifier|final
name|DNConf
name|dnConf
decl_stmt|;
DECL|field|dataXceiverServer
specifier|private
specifier|final
name|DataXceiverServer
name|dataXceiverServer
decl_stmt|;
DECL|field|connectToDnViaHostname
specifier|private
specifier|final
name|boolean
name|connectToDnViaHostname
decl_stmt|;
DECL|field|opStartTime
specifier|private
name|long
name|opStartTime
decl_stmt|;
comment|//the start time of receiving an Op
DECL|field|socketIn
specifier|private
specifier|final
name|InputStream
name|socketIn
decl_stmt|;
DECL|field|socketOut
specifier|private
name|OutputStream
name|socketOut
decl_stmt|;
DECL|field|blockReceiver
specifier|private
name|BlockReceiver
name|blockReceiver
init|=
literal|null
decl_stmt|;
comment|/**    * Client Name used in previous operation. Not available on first request    * on the socket.    */
DECL|field|previousOpClientName
specifier|private
name|String
name|previousOpClientName
decl_stmt|;
DECL|method|create (Peer peer, DataNode dn, DataXceiverServer dataXceiverServer)
specifier|public
specifier|static
name|DataXceiver
name|create
parameter_list|(
name|Peer
name|peer
parameter_list|,
name|DataNode
name|dn
parameter_list|,
name|DataXceiverServer
name|dataXceiverServer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DataXceiver
argument_list|(
name|peer
argument_list|,
name|dn
argument_list|,
name|dataXceiverServer
argument_list|)
return|;
block|}
DECL|method|DataXceiver (Peer peer, DataNode datanode, DataXceiverServer dataXceiverServer)
specifier|private
name|DataXceiver
parameter_list|(
name|Peer
name|peer
parameter_list|,
name|DataNode
name|datanode
parameter_list|,
name|DataXceiverServer
name|dataXceiverServer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|peer
operator|=
name|peer
expr_stmt|;
name|this
operator|.
name|dnConf
operator|=
name|datanode
operator|.
name|getDnConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|socketIn
operator|=
name|peer
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|this
operator|.
name|socketOut
operator|=
name|peer
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|this
operator|.
name|datanode
operator|=
name|datanode
expr_stmt|;
name|this
operator|.
name|dataXceiverServer
operator|=
name|dataXceiverServer
expr_stmt|;
name|this
operator|.
name|connectToDnViaHostname
operator|=
name|datanode
operator|.
name|getDnConf
argument_list|()
operator|.
name|connectToDnViaHostname
expr_stmt|;
name|remoteAddress
operator|=
name|peer
operator|.
name|getRemoteAddressString
argument_list|()
expr_stmt|;
name|localAddress
operator|=
name|peer
operator|.
name|getLocalAddressString
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of active connections is: "
operator|+
name|datanode
operator|.
name|getXceiverCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update the current thread's name to contain the current status.    * Use this only after this receiver has started on its thread, i.e.,    * outside the constructor.    */
DECL|method|updateCurrentThreadName (String status)
specifier|private
name|void
name|updateCurrentThreadName
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"DataXceiver for client "
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousOpClientName
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|previousOpClientName
argument_list|)
operator|.
name|append
argument_list|(
literal|" at "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|remoteAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" ["
argument_list|)
operator|.
name|append
argument_list|(
name|status
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Return the datanode object. */
DECL|method|getDataNode ()
name|DataNode
name|getDataNode
parameter_list|()
block|{
return|return
name|datanode
return|;
block|}
DECL|method|getOutputStream ()
specifier|private
name|OutputStream
name|getOutputStream
parameter_list|()
block|{
return|return
name|socketOut
return|;
block|}
DECL|method|sendOOB ()
specifier|public
name|void
name|sendOOB
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending OOB to peer: "
operator|+
name|peer
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockReceiver
operator|!=
literal|null
condition|)
name|blockReceiver
operator|.
name|sendOOB
argument_list|()
expr_stmt|;
block|}
comment|/**    * Read/write data from/to the DataXceiverServer.    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|opsProcessed
init|=
literal|0
decl_stmt|;
name|Op
name|op
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dataXceiverServer
operator|.
name|addPeer
argument_list|(
name|peer
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|peer
operator|.
name|setWriteTimeout
argument_list|(
name|datanode
operator|.
name|getDnConf
argument_list|()
operator|.
name|socketWriteTimeout
argument_list|)
expr_stmt|;
name|InputStream
name|input
init|=
name|socketIn
decl_stmt|;
name|IOStreamPair
name|saslStreams
init|=
name|datanode
operator|.
name|saslServer
operator|.
name|receive
argument_list|(
name|peer
argument_list|,
name|socketOut
argument_list|,
name|socketIn
argument_list|,
name|datanode
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
decl_stmt|;
name|input
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|saslStreams
operator|.
name|in
argument_list|,
name|HdfsConstants
operator|.
name|SMALL_BUFFER_SIZE
argument_list|)
expr_stmt|;
name|socketOut
operator|=
name|saslStreams
operator|.
name|out
expr_stmt|;
name|super
operator|.
name|initialize
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
comment|// We process requests in a loop, and stay around for a short timeout.
comment|// This optimistic behaviour allows the other end to reuse connections.
comment|// Setting keepalive timeout to 0 disable this behavior.
do|do
block|{
name|updateCurrentThreadName
argument_list|(
literal|"Waiting for operation #"
operator|+
operator|(
name|opsProcessed
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|opsProcessed
operator|!=
literal|0
condition|)
block|{
assert|assert
name|dnConf
operator|.
name|socketKeepaliveTimeout
operator|>
literal|0
assert|;
name|peer
operator|.
name|setReadTimeout
argument_list|(
name|dnConf
operator|.
name|socketKeepaliveTimeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|peer
operator|.
name|setReadTimeout
argument_list|(
name|dnConf
operator|.
name|socketTimeout
argument_list|)
expr_stmt|;
block|}
name|op
operator|=
name|readOp
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|ignored
parameter_list|)
block|{
comment|// Time out while we wait for client rpc
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
comment|// Since we optimistically expect the next op, it's quite normal to get EOF here.
if|if
condition|(
name|opsProcessed
operator|>
literal|0
operator|&&
operator|(
name|err
operator|instanceof
name|EOFException
operator|||
name|err
operator|instanceof
name|ClosedChannelException
operator|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cached "
operator|+
name|peer
operator|+
literal|" closing after "
operator|+
name|opsProcessed
operator|+
literal|" ops"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|err
throw|;
block|}
break|break;
block|}
comment|// restore normal timeout
if|if
condition|(
name|opsProcessed
operator|!=
literal|0
condition|)
block|{
name|peer
operator|.
name|setReadTimeout
argument_list|(
name|dnConf
operator|.
name|socketTimeout
argument_list|)
expr_stmt|;
block|}
name|opStartTime
operator|=
name|now
argument_list|()
expr_stmt|;
name|processOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
operator|++
name|opsProcessed
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|peer
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|peer
operator|.
name|isClosed
argument_list|()
operator|&&
name|dnConf
operator|.
name|socketKeepaliveTimeout
operator|>
literal|0
operator|)
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|s
init|=
name|datanode
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|":DataXceiver error processing "
operator|+
operator|(
operator|(
name|op
operator|==
literal|null
operator|)
condition|?
literal|"unknown"
else|:
name|op
operator|.
name|name
argument_list|()
operator|)
operator|+
literal|" operation "
operator|+
literal|" src: "
operator|+
name|remoteAddress
operator|+
literal|" dst: "
operator|+
name|localAddress
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|Op
operator|.
name|WRITE_BLOCK
operator|&&
name|t
operator|instanceof
name|ReplicaAlreadyExistsException
condition|)
block|{
comment|// For WRITE_BLOCK, it is okay if the replica already exists since
comment|// client and replication may write the same block to the same datanode
comment|// at the same time.
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|s
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|s
operator|+
literal|"; "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|s
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|datanode
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|":Number of active connections is: "
operator|+
name|datanode
operator|.
name|getXceiverCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateCurrentThreadName
argument_list|(
literal|"Cleaning up"
argument_list|)
expr_stmt|;
if|if
condition|(
name|peer
operator|!=
literal|null
condition|)
block|{
name|dataXceiverServer
operator|.
name|closePeer
argument_list|(
name|peer
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|requestShortCircuitFds (final ExtendedBlock blk, final Token<BlockTokenIdentifier> token, SlotId slotId, int maxVersion)
specifier|public
name|void
name|requestShortCircuitFds
parameter_list|(
specifier|final
name|ExtendedBlock
name|blk
parameter_list|,
specifier|final
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|SlotId
name|slotId
parameter_list|,
name|int
name|maxVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|updateCurrentThreadName
argument_list|(
literal|"Passing file descriptors for block "
operator|+
name|blk
argument_list|)
expr_stmt|;
name|BlockOpResponseProto
operator|.
name|Builder
name|bld
init|=
name|BlockOpResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|FileInputStream
name|fis
index|[]
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|peer
operator|.
name|getDomainSocket
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"You cannot pass file descriptors over "
operator|+
literal|"anything but a UNIX domain socket."
argument_list|)
throw|;
block|}
if|if
condition|(
name|slotId
operator|!=
literal|null
condition|)
block|{
name|boolean
name|isCached
init|=
name|datanode
operator|.
name|data
operator|.
name|isCached
argument_list|(
name|blk
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|blk
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|datanode
operator|.
name|shortCircuitRegistry
operator|.
name|registerSlot
argument_list|(
name|ExtendedBlockId
operator|.
name|fromExtendedBlock
argument_list|(
name|blk
argument_list|)
argument_list|,
name|slotId
argument_list|,
name|isCached
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|fis
operator|=
name|datanode
operator|.
name|requestShortCircuitFdsForRead
argument_list|(
name|blk
argument_list|,
name|token
argument_list|,
name|maxVersion
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|(
name|fis
operator|==
literal|null
operator|)
operator|&&
operator|(
name|slotId
operator|!=
literal|null
operator|)
condition|)
block|{
name|datanode
operator|.
name|shortCircuitRegistry
operator|.
name|unregisterSlot
argument_list|(
name|slotId
argument_list|)
expr_stmt|;
block|}
block|}
name|bld
operator|.
name|setStatus
argument_list|(
name|SUCCESS
argument_list|)
expr_stmt|;
name|bld
operator|.
name|setShortCircuitAccessVersion
argument_list|(
name|DataNode
operator|.
name|CURRENT_BLOCK_FORMAT_VERSION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ShortCircuitFdsVersionException
name|e
parameter_list|)
block|{
name|bld
operator|.
name|setStatus
argument_list|(
name|ERROR_UNSUPPORTED
argument_list|)
expr_stmt|;
name|bld
operator|.
name|setShortCircuitAccessVersion
argument_list|(
name|DataNode
operator|.
name|CURRENT_BLOCK_FORMAT_VERSION
argument_list|)
expr_stmt|;
name|bld
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ShortCircuitFdsUnsupportedException
name|e
parameter_list|)
block|{
name|bld
operator|.
name|setStatus
argument_list|(
name|ERROR_UNSUPPORTED
argument_list|)
expr_stmt|;
name|bld
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|e
parameter_list|)
block|{
name|bld
operator|.
name|setStatus
argument_list|(
name|ERROR_ACCESS_TOKEN
argument_list|)
expr_stmt|;
name|bld
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|bld
operator|.
name|setStatus
argument_list|(
name|ERROR
argument_list|)
expr_stmt|;
name|bld
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|bld
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|socketOut
argument_list|)
expr_stmt|;
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|FileDescriptor
name|fds
index|[]
init|=
operator|new
name|FileDescriptor
index|[
name|fis
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fds
index|[
name|i
index|]
operator|=
name|fis
index|[
name|i
index|]
operator|.
name|getFD
argument_list|()
expr_stmt|;
block|}
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|}
decl_stmt|;
name|peer
operator|.
name|getDomainSocket
argument_list|()
operator|.
name|sendFileDescriptors
argument_list|(
name|fds
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|ClientTraceLog
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|DatanodeRegistration
name|dnR
init|=
name|datanode
operator|.
name|getDNRegistrationForBP
argument_list|(
name|blk
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
name|BlockSender
operator|.
name|ClientTraceLog
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"src: 127.0.0.1, dest: 127.0.0.1, op: REQUEST_SHORT_CIRCUIT_FDS,"
operator|+
literal|" blockid: %s, srvID: %s, success: %b"
argument_list|,
name|blk
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|dnR
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
operator|(
name|fis
operator|!=
literal|null
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|releaseShortCircuitFds (SlotId slotId)
specifier|public
name|void
name|releaseShortCircuitFds
parameter_list|(
name|SlotId
name|slotId
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|error
decl_stmt|;
name|Status
name|status
decl_stmt|;
try|try
block|{
name|datanode
operator|.
name|shortCircuitRegistry
operator|.
name|unregisterSlot
argument_list|(
name|slotId
argument_list|)
expr_stmt|;
name|error
operator|=
literal|null
expr_stmt|;
name|status
operator|=
name|Status
operator|.
name|SUCCESS
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|error
operator|=
literal|"unsupported operation"
expr_stmt|;
name|status
operator|=
name|Status
operator|.
name|ERROR_UNSUPPORTED
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|status
operator|=
name|Status
operator|.
name|ERROR_INVALID
expr_stmt|;
block|}
name|ReleaseShortCircuitAccessResponseProto
operator|.
name|Builder
name|bld
init|=
name|ReleaseShortCircuitAccessResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|bld
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|bld
operator|.
name|setError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
name|bld
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|socketOut
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ClientTraceLog
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|BlockSender
operator|.
name|ClientTraceLog
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"src: 127.0.0.1, dest: 127.0.0.1, op: RELEASE_SHORT_CIRCUIT_FDS,"
operator|+
literal|" shmId: %016x%016x, slotIdx: %d, srvID: %s, success: %b"
argument_list|,
name|slotId
operator|.
name|getShmId
argument_list|()
operator|.
name|getHi
argument_list|()
argument_list|,
name|slotId
operator|.
name|getShmId
argument_list|()
operator|.
name|getLo
argument_list|()
argument_list|,
name|slotId
operator|.
name|getSlotIdx
argument_list|()
argument_list|,
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|success
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|sendShmErrorResponse (Status status, String error)
specifier|private
name|void
name|sendShmErrorResponse
parameter_list|(
name|Status
name|status
parameter_list|,
name|String
name|error
parameter_list|)
throws|throws
name|IOException
block|{
name|ShortCircuitShmResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
operator|.
name|setError
argument_list|(
name|error
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|socketOut
argument_list|)
expr_stmt|;
block|}
DECL|method|sendShmSuccessResponse (DomainSocket sock, NewShmInfo shmInfo)
specifier|private
name|void
name|sendShmSuccessResponse
parameter_list|(
name|DomainSocket
name|sock
parameter_list|,
name|NewShmInfo
name|shmInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|ShortCircuitShmResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|SUCCESS
argument_list|)
operator|.
name|setId
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|shmInfo
operator|.
name|shmId
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|socketOut
argument_list|)
expr_stmt|;
comment|// Send the file descriptor for the shared memory segment.
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0
block|}
decl_stmt|;
name|FileDescriptor
name|shmFdArray
index|[]
init|=
operator|new
name|FileDescriptor
index|[]
block|{
name|shmInfo
operator|.
name|stream
operator|.
name|getFD
argument_list|()
block|}
decl_stmt|;
name|sock
operator|.
name|sendFileDescriptors
argument_list|(
name|shmFdArray
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|requestShortCircuitShm (String clientName)
specifier|public
name|void
name|requestShortCircuitShm
parameter_list|(
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|NewShmInfo
name|shmInfo
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|DomainSocket
name|sock
init|=
name|peer
operator|.
name|getDomainSocket
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sock
operator|==
literal|null
condition|)
block|{
name|sendShmErrorResponse
argument_list|(
name|ERROR_INVALID
argument_list|,
literal|"Bad request from "
operator|+
name|peer
operator|+
literal|": must request a shared "
operator|+
literal|"memory segment over a UNIX domain socket."
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|shmInfo
operator|=
name|datanode
operator|.
name|shortCircuitRegistry
operator|.
name|createNewMemorySegment
argument_list|(
name|clientName
argument_list|,
name|sock
argument_list|)
expr_stmt|;
comment|// After calling #{ShortCircuitRegistry#createNewMemorySegment}, the
comment|// socket is managed by the DomainSocketWatcher, not the DataXceiver.
name|releaseSocket
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|sendShmErrorResponse
argument_list|(
name|ERROR_UNSUPPORTED
argument_list|,
literal|"This datanode has not been configured to support "
operator|+
literal|"short-circuit shared memory segments."
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sendShmErrorResponse
argument_list|(
name|ERROR
argument_list|,
literal|"Failed to create shared file descriptor: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|sendShmSuccessResponse
argument_list|(
name|sock
argument_list|,
name|shmInfo
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ClientTraceLog
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|success
condition|)
block|{
name|BlockSender
operator|.
name|ClientTraceLog
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"cliID: %s, src: 127.0.0.1, dest: 127.0.0.1, "
operator|+
literal|"op: REQUEST_SHORT_CIRCUIT_SHM,"
operator|+
literal|" shmId: %016x%016x, srvID: %s, success: true"
argument_list|,
name|clientName
argument_list|,
name|shmInfo
operator|.
name|shmId
operator|.
name|getHi
argument_list|()
argument_list|,
name|shmInfo
operator|.
name|shmId
operator|.
name|getLo
argument_list|()
argument_list|,
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BlockSender
operator|.
name|ClientTraceLog
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"cliID: %s, src: 127.0.0.1, dest: 127.0.0.1, "
operator|+
literal|"op: REQUEST_SHORT_CIRCUIT_SHM, "
operator|+
literal|"shmId: n/a, srvID: %s, success: false"
argument_list|,
name|clientName
argument_list|,
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
operator|!
name|success
operator|)
operator|&&
operator|(
name|peer
operator|==
literal|null
operator|)
condition|)
block|{
comment|// If we failed to pass the shared memory segment to the client,
comment|// close the UNIX domain socket now.  This will trigger the
comment|// DomainSocketWatcher callback, cleaning up the segment.
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|sock
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|shmInfo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|releaseSocket ()
name|void
name|releaseSocket
parameter_list|()
block|{
name|dataXceiverServer
operator|.
name|releasePeer
argument_list|(
name|peer
argument_list|)
expr_stmt|;
name|peer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readBlock (final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy)
specifier|public
name|void
name|readBlock
parameter_list|(
specifier|final
name|ExtendedBlock
name|block
parameter_list|,
specifier|final
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|,
specifier|final
name|String
name|clientName
parameter_list|,
specifier|final
name|long
name|blockOffset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|,
specifier|final
name|boolean
name|sendChecksum
parameter_list|,
specifier|final
name|CachingStrategy
name|cachingStrategy
parameter_list|)
throws|throws
name|IOException
block|{
name|previousOpClientName
operator|=
name|clientName
expr_stmt|;
name|OutputStream
name|baseStream
init|=
name|getOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|baseStream
argument_list|,
name|HdfsConstants
operator|.
name|SMALL_BUFFER_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|out
argument_list|,
literal|true
argument_list|,
name|block
argument_list|,
name|blockToken
argument_list|,
name|Op
operator|.
name|READ_BLOCK
argument_list|,
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// send the block
name|BlockSender
name|blockSender
init|=
literal|null
decl_stmt|;
name|DatanodeRegistration
name|dnR
init|=
name|datanode
operator|.
name|getDNRegistrationForBP
argument_list|(
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|clientTraceFmt
init|=
name|clientName
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|ClientTraceLog
operator|.
name|isInfoEnabled
argument_list|()
condition|?
name|String
operator|.
name|format
argument_list|(
name|DN_CLIENTTRACE_FORMAT
argument_list|,
name|localAddress
argument_list|,
name|remoteAddress
argument_list|,
literal|"%d"
argument_list|,
literal|"HDFS_READ"
argument_list|,
name|clientName
argument_list|,
literal|"%d"
argument_list|,
name|dnR
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|block
argument_list|,
literal|"%d"
argument_list|)
else|:
name|dnR
operator|+
literal|" Served block "
operator|+
name|block
operator|+
literal|" to "
operator|+
name|remoteAddress
decl_stmt|;
name|updateCurrentThreadName
argument_list|(
literal|"Sending block "
operator|+
name|block
argument_list|)
expr_stmt|;
try|try
block|{
try|try
block|{
name|blockSender
operator|=
operator|new
name|BlockSender
argument_list|(
name|block
argument_list|,
name|blockOffset
argument_list|,
name|length
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|sendChecksum
argument_list|,
name|datanode
argument_list|,
name|clientTraceFmt
argument_list|,
name|cachingStrategy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"opReadBlock "
operator|+
name|block
operator|+
literal|" received exception "
operator|+
name|e
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|sendResponse
argument_list|(
name|ERROR
argument_list|,
name|msg
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// send op status
name|writeSuccessWithChecksumInfo
argument_list|(
name|blockSender
argument_list|,
operator|new
name|DataOutputStream
argument_list|(
name|getOutputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|read
init|=
name|blockSender
operator|.
name|sendBlock
argument_list|(
name|out
argument_list|,
name|baseStream
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// send data
if|if
condition|(
name|blockSender
operator|.
name|didSendEntireByteRange
argument_list|()
condition|)
block|{
comment|// If we sent the entire range, then we should expect the client
comment|// to respond with a Status enum.
try|try
block|{
name|ClientReadStatusProto
name|stat
init|=
name|ClientReadStatusProto
operator|.
name|parseFrom
argument_list|(
name|PBHelper
operator|.
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stat
operator|.
name|hasStatus
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Client "
operator|+
name|peer
operator|.
name|getRemoteAddressString
argument_list|()
operator|+
literal|" did not send a valid status code after reading. "
operator|+
literal|"Will close connection."
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error reading client status response. Will close connection."
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|datanode
operator|.
name|metrics
operator|.
name|incrBytesRead
argument_list|(
operator|(
name|int
operator|)
name|read
argument_list|)
expr_stmt|;
name|datanode
operator|.
name|metrics
operator|.
name|incrBlocksRead
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|ignored
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|dnR
operator|+
literal|":Ignoring exception while serving "
operator|+
name|block
operator|+
literal|" to "
operator|+
name|remoteAddress
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
comment|// Its ok for remote side to close the connection anytime.
name|datanode
operator|.
name|metrics
operator|.
name|incrBlocksRead
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|/* What exactly should we do here?        * Earlier version shutdown() datanode if there is disk error.        */
name|LOG
operator|.
name|warn
argument_list|(
name|dnR
operator|+
literal|":Got exception while serving "
operator|+
name|block
operator|+
literal|" to "
operator|+
name|remoteAddress
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|blockSender
argument_list|)
expr_stmt|;
block|}
comment|//update metrics
name|datanode
operator|.
name|metrics
operator|.
name|addReadBlockOp
argument_list|(
name|elapsed
argument_list|()
argument_list|)
expr_stmt|;
name|datanode
operator|.
name|metrics
operator|.
name|incrReadsFromClient
argument_list|(
name|peer
operator|.
name|isLocal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBlock (final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy)
specifier|public
name|void
name|writeBlock
parameter_list|(
specifier|final
name|ExtendedBlock
name|block
parameter_list|,
specifier|final
name|StorageType
name|storageType
parameter_list|,
specifier|final
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|,
specifier|final
name|String
name|clientname
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|targets
parameter_list|,
specifier|final
name|StorageType
index|[]
name|targetStorageTypes
parameter_list|,
specifier|final
name|DatanodeInfo
name|srcDataNode
parameter_list|,
specifier|final
name|BlockConstructionStage
name|stage
parameter_list|,
specifier|final
name|int
name|pipelineSize
parameter_list|,
specifier|final
name|long
name|minBytesRcvd
parameter_list|,
specifier|final
name|long
name|maxBytesRcvd
parameter_list|,
specifier|final
name|long
name|latestGenerationStamp
parameter_list|,
name|DataChecksum
name|requestedChecksum
parameter_list|,
name|CachingStrategy
name|cachingStrategy
parameter_list|)
throws|throws
name|IOException
block|{
name|previousOpClientName
operator|=
name|clientname
expr_stmt|;
name|updateCurrentThreadName
argument_list|(
literal|"Receiving block "
operator|+
name|block
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|isDatanode
init|=
name|clientname
operator|.
name|length
argument_list|()
operator|==
literal|0
decl_stmt|;
specifier|final
name|boolean
name|isClient
init|=
operator|!
name|isDatanode
decl_stmt|;
specifier|final
name|boolean
name|isTransfer
init|=
name|stage
operator|==
name|BlockConstructionStage
operator|.
name|TRANSFER_RBW
operator|||
name|stage
operator|==
name|BlockConstructionStage
operator|.
name|TRANSFER_FINALIZED
decl_stmt|;
comment|// check single target for transfer-RBW/Finalized
if|if
condition|(
name|isTransfer
operator|&&
name|targets
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|stage
operator|+
literal|" does not support multiple targets "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|targets
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"opWriteBlock: stage="
operator|+
name|stage
operator|+
literal|", clientname="
operator|+
name|clientname
operator|+
literal|"\n  block  ="
operator|+
name|block
operator|+
literal|", newGs="
operator|+
name|latestGenerationStamp
operator|+
literal|", bytesRcvd=["
operator|+
name|minBytesRcvd
operator|+
literal|", "
operator|+
name|maxBytesRcvd
operator|+
literal|"]"
operator|+
literal|"\n  targets="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|targets
argument_list|)
operator|+
literal|"; pipelineSize="
operator|+
name|pipelineSize
operator|+
literal|", srcDataNode="
operator|+
name|srcDataNode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"isDatanode="
operator|+
name|isDatanode
operator|+
literal|", isClient="
operator|+
name|isClient
operator|+
literal|", isTransfer="
operator|+
name|isTransfer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"writeBlock receive buf size "
operator|+
name|peer
operator|.
name|getReceiveBufferSize
argument_list|()
operator|+
literal|" tcp no delay "
operator|+
name|peer
operator|.
name|getTcpNoDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We later mutate block's generation stamp and length, but we need to
comment|// forward the original version of the block to downstream mirrors, so
comment|// make a copy here.
specifier|final
name|ExtendedBlock
name|originalBlock
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|getNumBytes
argument_list|()
operator|==
literal|0
condition|)
block|{
name|block
operator|.
name|setNumBytes
argument_list|(
name|dataXceiverServer
operator|.
name|estimateBlockSize
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Receiving "
operator|+
name|block
operator|+
literal|" src: "
operator|+
name|remoteAddress
operator|+
literal|" dest: "
operator|+
name|localAddress
argument_list|)
expr_stmt|;
comment|// reply to upstream datanode or client
specifier|final
name|DataOutputStream
name|replyOut
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|getOutputStream
argument_list|()
argument_list|,
name|HdfsConstants
operator|.
name|SMALL_BUFFER_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|replyOut
argument_list|,
name|isClient
argument_list|,
name|block
argument_list|,
name|blockToken
argument_list|,
name|Op
operator|.
name|WRITE_BLOCK
argument_list|,
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|DataOutputStream
name|mirrorOut
init|=
literal|null
decl_stmt|;
comment|// stream to next target
name|DataInputStream
name|mirrorIn
init|=
literal|null
decl_stmt|;
comment|// reply from next target
name|Socket
name|mirrorSock
init|=
literal|null
decl_stmt|;
comment|// socket to next target
name|String
name|mirrorNode
init|=
literal|null
decl_stmt|;
comment|// the name:port of next target
name|String
name|firstBadLink
init|=
literal|""
decl_stmt|;
comment|// first datanode that failed in connection setup
name|Status
name|mirrorInStatus
init|=
name|SUCCESS
decl_stmt|;
specifier|final
name|String
name|storageUuid
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isDatanode
operator|||
name|stage
operator|!=
name|BlockConstructionStage
operator|.
name|PIPELINE_CLOSE_RECOVERY
condition|)
block|{
comment|// open a block receiver
name|blockReceiver
operator|=
operator|new
name|BlockReceiver
argument_list|(
name|block
argument_list|,
name|storageType
argument_list|,
name|in
argument_list|,
name|peer
operator|.
name|getRemoteAddressString
argument_list|()
argument_list|,
name|peer
operator|.
name|getLocalAddressString
argument_list|()
argument_list|,
name|stage
argument_list|,
name|latestGenerationStamp
argument_list|,
name|minBytesRcvd
argument_list|,
name|maxBytesRcvd
argument_list|,
name|clientname
argument_list|,
name|srcDataNode
argument_list|,
name|datanode
argument_list|,
name|requestedChecksum
argument_list|,
name|cachingStrategy
argument_list|)
expr_stmt|;
name|storageUuid
operator|=
name|blockReceiver
operator|.
name|getStorageUuid
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|storageUuid
operator|=
name|datanode
operator|.
name|data
operator|.
name|recoverClose
argument_list|(
name|block
argument_list|,
name|latestGenerationStamp
argument_list|,
name|minBytesRcvd
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Connect to downstream machine, if appropriate
comment|//
if|if
condition|(
name|targets
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|InetSocketAddress
name|mirrorTarget
init|=
literal|null
decl_stmt|;
comment|// Connect to backup machine
name|mirrorNode
operator|=
name|targets
index|[
literal|0
index|]
operator|.
name|getXferAddr
argument_list|(
name|connectToDnViaHostname
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connecting to datanode "
operator|+
name|mirrorNode
argument_list|)
expr_stmt|;
block|}
name|mirrorTarget
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|mirrorNode
argument_list|)
expr_stmt|;
name|mirrorSock
operator|=
name|datanode
operator|.
name|newSocket
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|timeoutValue
init|=
name|dnConf
operator|.
name|socketTimeout
operator|+
operator|(
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT_EXTENSION
operator|*
name|targets
operator|.
name|length
operator|)
decl_stmt|;
name|int
name|writeTimeout
init|=
name|dnConf
operator|.
name|socketWriteTimeout
operator|+
operator|(
name|HdfsServerConstants
operator|.
name|WRITE_TIMEOUT_EXTENSION
operator|*
name|targets
operator|.
name|length
operator|)
decl_stmt|;
name|NetUtils
operator|.
name|connect
argument_list|(
name|mirrorSock
argument_list|,
name|mirrorTarget
argument_list|,
name|timeoutValue
argument_list|)
expr_stmt|;
name|mirrorSock
operator|.
name|setSoTimeout
argument_list|(
name|timeoutValue
argument_list|)
expr_stmt|;
name|mirrorSock
operator|.
name|setSendBufferSize
argument_list|(
name|HdfsConstants
operator|.
name|DEFAULT_DATA_SOCKET_SIZE
argument_list|)
expr_stmt|;
name|OutputStream
name|unbufMirrorOut
init|=
name|NetUtils
operator|.
name|getOutputStream
argument_list|(
name|mirrorSock
argument_list|,
name|writeTimeout
argument_list|)
decl_stmt|;
name|InputStream
name|unbufMirrorIn
init|=
name|NetUtils
operator|.
name|getInputStream
argument_list|(
name|mirrorSock
argument_list|)
decl_stmt|;
name|DataEncryptionKeyFactory
name|keyFactory
init|=
name|datanode
operator|.
name|getDataEncryptionKeyFactoryForBlock
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|IOStreamPair
name|saslStreams
init|=
name|datanode
operator|.
name|saslClient
operator|.
name|socketSend
argument_list|(
name|mirrorSock
argument_list|,
name|unbufMirrorOut
argument_list|,
name|unbufMirrorIn
argument_list|,
name|keyFactory
argument_list|,
name|blockToken
argument_list|,
name|targets
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|unbufMirrorOut
operator|=
name|saslStreams
operator|.
name|out
expr_stmt|;
name|unbufMirrorIn
operator|=
name|saslStreams
operator|.
name|in
expr_stmt|;
name|mirrorOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|unbufMirrorOut
argument_list|,
name|HdfsConstants
operator|.
name|SMALL_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|mirrorIn
operator|=
operator|new
name|DataInputStream
argument_list|(
name|unbufMirrorIn
argument_list|)
expr_stmt|;
operator|new
name|Sender
argument_list|(
name|mirrorOut
argument_list|)
operator|.
name|writeBlock
argument_list|(
name|originalBlock
argument_list|,
name|targetStorageTypes
index|[
literal|0
index|]
argument_list|,
name|blockToken
argument_list|,
name|clientname
argument_list|,
name|targets
argument_list|,
name|targetStorageTypes
argument_list|,
name|srcDataNode
argument_list|,
name|stage
argument_list|,
name|pipelineSize
argument_list|,
name|minBytesRcvd
argument_list|,
name|maxBytesRcvd
argument_list|,
name|latestGenerationStamp
argument_list|,
name|requestedChecksum
argument_list|,
name|cachingStrategy
argument_list|)
expr_stmt|;
name|mirrorOut
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// read connect ack (only for clients, not for replication req)
if|if
condition|(
name|isClient
condition|)
block|{
name|BlockOpResponseProto
name|connectAck
init|=
name|BlockOpResponseProto
operator|.
name|parseFrom
argument_list|(
name|PBHelper
operator|.
name|vintPrefixed
argument_list|(
name|mirrorIn
argument_list|)
argument_list|)
decl_stmt|;
name|mirrorInStatus
operator|=
name|connectAck
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|firstBadLink
operator|=
name|connectAck
operator|.
name|getFirstBadLink
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|||
name|mirrorInStatus
operator|!=
name|SUCCESS
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Datanode "
operator|+
name|targets
operator|.
name|length
operator|+
literal|" got response for connect ack "
operator|+
literal|" from downstream datanode with firstbadlink as "
operator|+
name|firstBadLink
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|isClient
condition|)
block|{
name|BlockOpResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|ERROR
argument_list|)
comment|// NB: Unconditionally using the xfer addr w/o hostname
operator|.
name|setFirstBadLink
argument_list|(
name|targets
index|[
literal|0
index|]
operator|.
name|getXferAddr
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|replyOut
argument_list|)
expr_stmt|;
name|replyOut
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|mirrorOut
argument_list|)
expr_stmt|;
name|mirrorOut
operator|=
literal|null
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|mirrorIn
argument_list|)
expr_stmt|;
name|mirrorIn
operator|=
literal|null
expr_stmt|;
name|IOUtils
operator|.
name|closeSocket
argument_list|(
name|mirrorSock
argument_list|)
expr_stmt|;
name|mirrorSock
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|isClient
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|datanode
operator|+
literal|":Exception transfering block "
operator|+
name|block
operator|+
literal|" to mirror "
operator|+
name|mirrorNode
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|datanode
operator|+
literal|":Exception transfering "
operator|+
name|block
operator|+
literal|" to mirror "
operator|+
name|mirrorNode
operator|+
literal|"- continuing without the mirror"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// send connect-ack to source for clients and not transfer-RBW/Finalized
if|if
condition|(
name|isClient
operator|&&
operator|!
name|isTransfer
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|||
name|mirrorInStatus
operator|!=
name|SUCCESS
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Datanode "
operator|+
name|targets
operator|.
name|length
operator|+
literal|" forwarding connect ack to upstream firstbadlink is "
operator|+
name|firstBadLink
argument_list|)
expr_stmt|;
block|}
name|BlockOpResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|mirrorInStatus
argument_list|)
operator|.
name|setFirstBadLink
argument_list|(
name|firstBadLink
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|replyOut
argument_list|)
expr_stmt|;
name|replyOut
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|// receive the block and mirror to the next target
if|if
condition|(
name|blockReceiver
operator|!=
literal|null
condition|)
block|{
name|String
name|mirrorAddr
init|=
operator|(
name|mirrorSock
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|mirrorNode
decl_stmt|;
name|blockReceiver
operator|.
name|receiveBlock
argument_list|(
name|mirrorOut
argument_list|,
name|mirrorIn
argument_list|,
name|replyOut
argument_list|,
name|mirrorAddr
argument_list|,
literal|null
argument_list|,
name|targets
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// send close-ack for transfer-RBW/Finalized
if|if
condition|(
name|isTransfer
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"TRANSFER: send close-ack"
argument_list|)
expr_stmt|;
block|}
name|writeResponse
argument_list|(
name|SUCCESS
argument_list|,
literal|null
argument_list|,
name|replyOut
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update its generation stamp
if|if
condition|(
name|isClient
operator|&&
name|stage
operator|==
name|BlockConstructionStage
operator|.
name|PIPELINE_CLOSE_RECOVERY
condition|)
block|{
name|block
operator|.
name|setGenerationStamp
argument_list|(
name|latestGenerationStamp
argument_list|)
expr_stmt|;
name|block
operator|.
name|setNumBytes
argument_list|(
name|minBytesRcvd
argument_list|)
expr_stmt|;
block|}
comment|// if this write is for a replication request or recovering
comment|// a failed close for client, then confirm block. For other client-writes,
comment|// the block is finalized in the PacketResponder.
if|if
condition|(
name|isDatanode
operator|||
name|stage
operator|==
name|BlockConstructionStage
operator|.
name|PIPELINE_CLOSE_RECOVERY
condition|)
block|{
name|datanode
operator|.
name|closeBlock
argument_list|(
name|block
argument_list|,
name|DataNode
operator|.
name|EMPTY_DEL_HINT
argument_list|,
name|storageUuid
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received "
operator|+
name|block
operator|+
literal|" src: "
operator|+
name|remoteAddress
operator|+
literal|" dest: "
operator|+
name|localAddress
operator|+
literal|" of size "
operator|+
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"opWriteBlock "
operator|+
name|block
operator|+
literal|" received exception "
operator|+
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
comment|// close all opened streams
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|mirrorOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|mirrorIn
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|replyOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeSocket
argument_list|(
name|mirrorSock
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|blockReceiver
argument_list|)
expr_stmt|;
name|blockReceiver
operator|=
literal|null
expr_stmt|;
block|}
comment|//update metrics
name|datanode
operator|.
name|metrics
operator|.
name|addWriteBlockOp
argument_list|(
name|elapsed
argument_list|()
argument_list|)
expr_stmt|;
name|datanode
operator|.
name|metrics
operator|.
name|incrWritesFromClient
argument_list|(
name|peer
operator|.
name|isLocal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|transferBlock (final ExtendedBlock blk, final Token<BlockTokenIdentifier> blockToken, final String clientName, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes)
specifier|public
name|void
name|transferBlock
parameter_list|(
specifier|final
name|ExtendedBlock
name|blk
parameter_list|,
specifier|final
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|,
specifier|final
name|String
name|clientName
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|targets
parameter_list|,
specifier|final
name|StorageType
index|[]
name|targetStorageTypes
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAccess
argument_list|(
name|socketOut
argument_list|,
literal|true
argument_list|,
name|blk
argument_list|,
name|blockToken
argument_list|,
name|Op
operator|.
name|TRANSFER_BLOCK
argument_list|,
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|COPY
argument_list|)
expr_stmt|;
name|previousOpClientName
operator|=
name|clientName
expr_stmt|;
name|updateCurrentThreadName
argument_list|(
name|Op
operator|.
name|TRANSFER_BLOCK
operator|+
literal|" "
operator|+
name|blk
argument_list|)
expr_stmt|;
specifier|final
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|datanode
operator|.
name|transferReplicaForPipelineRecovery
argument_list|(
name|blk
argument_list|,
name|targets
argument_list|,
name|targetStorageTypes
argument_list|,
name|clientName
argument_list|)
expr_stmt|;
name|writeResponse
argument_list|(
name|Status
operator|.
name|SUCCESS
argument_list|,
literal|null
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|calcPartialBlockChecksum (ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn)
specifier|private
name|MD5Hash
name|calcPartialBlockChecksum
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|long
name|requestLength
parameter_list|,
name|DataChecksum
name|checksum
parameter_list|,
name|DataInputStream
name|checksumIn
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|bytesPerCRC
init|=
name|checksum
operator|.
name|getBytesPerChecksum
argument_list|()
decl_stmt|;
specifier|final
name|int
name|csize
init|=
name|checksum
operator|.
name|getChecksumSize
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4
operator|*
literal|1024
index|]
decl_stmt|;
name|MessageDigest
name|digester
init|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
decl_stmt|;
name|long
name|remaining
init|=
name|requestLength
operator|/
name|bytesPerCRC
operator|*
name|csize
decl_stmt|;
for|for
control|(
name|int
name|toDigest
init|=
literal|0
init|;
name|remaining
operator|>
literal|0
condition|;
name|remaining
operator|-=
name|toDigest
control|)
block|{
name|toDigest
operator|=
name|checksumIn
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDigest
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|digester
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|toDigest
argument_list|)
expr_stmt|;
block|}
name|int
name|partialLength
init|=
call|(
name|int
call|)
argument_list|(
name|requestLength
operator|%
name|bytesPerCRC
argument_list|)
decl_stmt|;
if|if
condition|(
name|partialLength
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|partialLength
index|]
decl_stmt|;
specifier|final
name|InputStream
name|blockIn
init|=
name|datanode
operator|.
name|data
operator|.
name|getBlockInputStream
argument_list|(
name|block
argument_list|,
name|requestLength
operator|-
name|partialLength
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Get the CRC of the partialLength.
name|IOUtils
operator|.
name|readFully
argument_list|(
name|blockIn
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|partialLength
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|blockIn
argument_list|)
expr_stmt|;
block|}
name|checksum
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|partialLength
argument_list|)
expr_stmt|;
name|byte
index|[]
name|partialCrc
init|=
operator|new
name|byte
index|[
name|csize
index|]
decl_stmt|;
name|checksum
operator|.
name|writeValue
argument_list|(
name|partialCrc
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|digester
operator|.
name|update
argument_list|(
name|partialCrc
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MD5Hash
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|blockChecksum (final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken)
specifier|public
name|void
name|blockChecksum
parameter_list|(
specifier|final
name|ExtendedBlock
name|block
parameter_list|,
specifier|final
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|checkAccess
argument_list|(
name|out
argument_list|,
literal|true
argument_list|,
name|block
argument_list|,
name|blockToken
argument_list|,
name|Op
operator|.
name|BLOCK_CHECKSUM
argument_list|,
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// client side now can specify a range of the block for checksum
name|long
name|requestLength
init|=
name|block
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|requestLength
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|long
name|visibleLength
init|=
name|datanode
operator|.
name|data
operator|.
name|getReplicaVisibleLength
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|boolean
name|partialBlk
init|=
name|requestLength
operator|<
name|visibleLength
decl_stmt|;
name|updateCurrentThreadName
argument_list|(
literal|"Reading metadata for block "
operator|+
name|block
argument_list|)
expr_stmt|;
specifier|final
name|LengthInputStream
name|metadataIn
init|=
name|datanode
operator|.
name|data
operator|.
name|getMetaDataInputStream
argument_list|(
name|block
argument_list|)
decl_stmt|;
specifier|final
name|DataInputStream
name|checksumIn
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|metadataIn
argument_list|,
name|HdfsConstants
operator|.
name|IO_FILE_BUFFER_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|updateCurrentThreadName
argument_list|(
literal|"Getting checksum for block "
operator|+
name|block
argument_list|)
expr_stmt|;
try|try
block|{
comment|//read metadata file
specifier|final
name|BlockMetadataHeader
name|header
init|=
name|BlockMetadataHeader
operator|.
name|readHeader
argument_list|(
name|checksumIn
argument_list|)
decl_stmt|;
specifier|final
name|DataChecksum
name|checksum
init|=
name|header
operator|.
name|getChecksum
argument_list|()
decl_stmt|;
specifier|final
name|int
name|csize
init|=
name|checksum
operator|.
name|getChecksumSize
argument_list|()
decl_stmt|;
specifier|final
name|int
name|bytesPerCRC
init|=
name|checksum
operator|.
name|getBytesPerChecksum
argument_list|()
decl_stmt|;
specifier|final
name|long
name|crcPerBlock
init|=
name|csize
operator|<=
literal|0
condition|?
literal|0
else|:
operator|(
name|metadataIn
operator|.
name|getLength
argument_list|()
operator|-
name|BlockMetadataHeader
operator|.
name|getHeaderSize
argument_list|()
operator|)
operator|/
name|csize
decl_stmt|;
specifier|final
name|MD5Hash
name|md5
init|=
name|partialBlk
operator|&&
name|crcPerBlock
operator|>
literal|0
condition|?
name|calcPartialBlockChecksum
argument_list|(
name|block
argument_list|,
name|requestLength
argument_list|,
name|checksum
argument_list|,
name|checksumIn
argument_list|)
else|:
name|MD5Hash
operator|.
name|digest
argument_list|(
name|checksumIn
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"block="
operator|+
name|block
operator|+
literal|", bytesPerCRC="
operator|+
name|bytesPerCRC
operator|+
literal|", crcPerBlock="
operator|+
name|crcPerBlock
operator|+
literal|", md5="
operator|+
name|md5
argument_list|)
expr_stmt|;
block|}
comment|//write reply
name|BlockOpResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|SUCCESS
argument_list|)
operator|.
name|setChecksumResponse
argument_list|(
name|OpBlockChecksumResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBytesPerCrc
argument_list|(
name|bytesPerCRC
argument_list|)
operator|.
name|setCrcPerBlock
argument_list|(
name|crcPerBlock
argument_list|)
operator|.
name|setMd5
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|md5
operator|.
name|getDigest
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCrcType
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|checksum
operator|.
name|getChecksumType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|checksumIn
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|metadataIn
argument_list|)
expr_stmt|;
block|}
comment|//update metrics
name|datanode
operator|.
name|metrics
operator|.
name|addBlockChecksumOp
argument_list|(
name|elapsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copyBlock (final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken)
specifier|public
name|void
name|copyBlock
parameter_list|(
specifier|final
name|ExtendedBlock
name|block
parameter_list|,
specifier|final
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|)
throws|throws
name|IOException
block|{
name|updateCurrentThreadName
argument_list|(
literal|"Copying block "
operator|+
name|block
argument_list|)
expr_stmt|;
comment|// Read in the header
if|if
condition|(
name|datanode
operator|.
name|isBlockTokenEnabled
condition|)
block|{
try|try
block|{
name|datanode
operator|.
name|blockPoolTokenSecretManager
operator|.
name|checkAccess
argument_list|(
name|blockToken
argument_list|,
literal|null
argument_list|,
name|block
argument_list|,
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|COPY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid access token in request from "
operator|+
name|remoteAddress
operator|+
literal|" for OP_COPY_BLOCK for block "
operator|+
name|block
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sendResponse
argument_list|(
name|ERROR_ACCESS_TOKEN
argument_list|,
literal|"Invalid access token"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|dataXceiverServer
operator|.
name|balanceThrottler
operator|.
name|acquire
argument_list|()
condition|)
block|{
comment|// not able to start
name|String
name|msg
init|=
literal|"Not able to copy block "
operator|+
name|block
operator|.
name|getBlockId
argument_list|()
operator|+
literal|" "
operator|+
literal|"to "
operator|+
name|peer
operator|.
name|getRemoteAddressString
argument_list|()
operator|+
literal|" because threads "
operator|+
literal|"quota is exceeded."
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|sendResponse
argument_list|(
name|ERROR
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
name|BlockSender
name|blockSender
init|=
literal|null
decl_stmt|;
name|DataOutputStream
name|reply
init|=
literal|null
decl_stmt|;
name|boolean
name|isOpSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
comment|// check if the block exists or not
name|blockSender
operator|=
operator|new
name|BlockSender
argument_list|(
name|block
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|datanode
argument_list|,
literal|null
argument_list|,
name|CachingStrategy
operator|.
name|newDropBehind
argument_list|()
argument_list|)
expr_stmt|;
comment|// set up response stream
name|OutputStream
name|baseStream
init|=
name|getOutputStream
argument_list|()
decl_stmt|;
name|reply
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|baseStream
argument_list|,
name|HdfsConstants
operator|.
name|SMALL_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
comment|// send status first
name|writeSuccessWithChecksumInfo
argument_list|(
name|blockSender
argument_list|,
name|reply
argument_list|)
expr_stmt|;
comment|// send block content to the target
name|long
name|read
init|=
name|blockSender
operator|.
name|sendBlock
argument_list|(
name|reply
argument_list|,
name|baseStream
argument_list|,
name|dataXceiverServer
operator|.
name|balanceThrottler
argument_list|)
decl_stmt|;
name|datanode
operator|.
name|metrics
operator|.
name|incrBytesRead
argument_list|(
operator|(
name|int
operator|)
name|read
argument_list|)
expr_stmt|;
name|datanode
operator|.
name|metrics
operator|.
name|incrBlocksRead
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Copied "
operator|+
name|block
operator|+
literal|" to "
operator|+
name|peer
operator|.
name|getRemoteAddressString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|isOpSuccess
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"opCopyBlock "
operator|+
name|block
operator|+
literal|" received exception "
operator|+
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
name|dataXceiverServer
operator|.
name|balanceThrottler
operator|.
name|release
argument_list|()
expr_stmt|;
if|if
condition|(
name|isOpSuccess
condition|)
block|{
try|try
block|{
comment|// send one last byte to indicate that the resource is cleaned.
name|reply
operator|.
name|writeChar
argument_list|(
literal|'d'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{         }
block|}
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|blockSender
argument_list|)
expr_stmt|;
block|}
comment|//update metrics
name|datanode
operator|.
name|metrics
operator|.
name|addCopyBlockOp
argument_list|(
name|elapsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|replaceBlock (final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource)
specifier|public
name|void
name|replaceBlock
parameter_list|(
specifier|final
name|ExtendedBlock
name|block
parameter_list|,
specifier|final
name|StorageType
name|storageType
parameter_list|,
specifier|final
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|,
specifier|final
name|String
name|delHint
parameter_list|,
specifier|final
name|DatanodeInfo
name|proxySource
parameter_list|)
throws|throws
name|IOException
block|{
name|updateCurrentThreadName
argument_list|(
literal|"Replacing block "
operator|+
name|block
operator|+
literal|" from "
operator|+
name|delHint
argument_list|)
expr_stmt|;
comment|/* read header */
name|block
operator|.
name|setNumBytes
argument_list|(
name|dataXceiverServer
operator|.
name|estimateBlockSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|datanode
operator|.
name|isBlockTokenEnabled
condition|)
block|{
try|try
block|{
name|datanode
operator|.
name|blockPoolTokenSecretManager
operator|.
name|checkAccess
argument_list|(
name|blockToken
argument_list|,
literal|null
argument_list|,
name|block
argument_list|,
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|REPLACE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid access token in request from "
operator|+
name|remoteAddress
operator|+
literal|" for OP_REPLACE_BLOCK for block "
operator|+
name|block
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sendResponse
argument_list|(
name|ERROR_ACCESS_TOKEN
argument_list|,
literal|"Invalid access token"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|dataXceiverServer
operator|.
name|balanceThrottler
operator|.
name|acquire
argument_list|()
condition|)
block|{
comment|// not able to start
name|String
name|msg
init|=
literal|"Not able to receive block "
operator|+
name|block
operator|.
name|getBlockId
argument_list|()
operator|+
literal|" from "
operator|+
name|peer
operator|.
name|getRemoteAddressString
argument_list|()
operator|+
literal|" because threads "
operator|+
literal|"quota is exceeded."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|sendResponse
argument_list|(
name|ERROR
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
name|Socket
name|proxySock
init|=
literal|null
decl_stmt|;
name|DataOutputStream
name|proxyOut
init|=
literal|null
decl_stmt|;
name|Status
name|opStatus
init|=
name|SUCCESS
decl_stmt|;
name|String
name|errMsg
init|=
literal|null
decl_stmt|;
name|BlockReceiver
name|blockReceiver
init|=
literal|null
decl_stmt|;
name|DataInputStream
name|proxyReply
init|=
literal|null
decl_stmt|;
name|DataOutputStream
name|replyOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// get the output stream to the proxy
specifier|final
name|String
name|dnAddr
init|=
name|proxySource
operator|.
name|getXferAddr
argument_list|(
name|connectToDnViaHostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connecting to datanode "
operator|+
name|dnAddr
argument_list|)
expr_stmt|;
block|}
name|InetSocketAddress
name|proxyAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|dnAddr
argument_list|)
decl_stmt|;
name|proxySock
operator|=
name|datanode
operator|.
name|newSocket
argument_list|()
expr_stmt|;
name|NetUtils
operator|.
name|connect
argument_list|(
name|proxySock
argument_list|,
name|proxyAddr
argument_list|,
name|dnConf
operator|.
name|socketTimeout
argument_list|)
expr_stmt|;
name|proxySock
operator|.
name|setSoTimeout
argument_list|(
name|dnConf
operator|.
name|socketTimeout
argument_list|)
expr_stmt|;
name|OutputStream
name|unbufProxyOut
init|=
name|NetUtils
operator|.
name|getOutputStream
argument_list|(
name|proxySock
argument_list|,
name|dnConf
operator|.
name|socketWriteTimeout
argument_list|)
decl_stmt|;
name|InputStream
name|unbufProxyIn
init|=
name|NetUtils
operator|.
name|getInputStream
argument_list|(
name|proxySock
argument_list|)
decl_stmt|;
name|DataEncryptionKeyFactory
name|keyFactory
init|=
name|datanode
operator|.
name|getDataEncryptionKeyFactoryForBlock
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|IOStreamPair
name|saslStreams
init|=
name|datanode
operator|.
name|saslClient
operator|.
name|socketSend
argument_list|(
name|proxySock
argument_list|,
name|unbufProxyOut
argument_list|,
name|unbufProxyIn
argument_list|,
name|keyFactory
argument_list|,
name|blockToken
argument_list|,
name|proxySource
argument_list|)
decl_stmt|;
name|unbufProxyOut
operator|=
name|saslStreams
operator|.
name|out
expr_stmt|;
name|unbufProxyIn
operator|=
name|saslStreams
operator|.
name|in
expr_stmt|;
name|proxyOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|unbufProxyOut
argument_list|,
name|HdfsConstants
operator|.
name|SMALL_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|proxyReply
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|unbufProxyIn
argument_list|,
name|HdfsConstants
operator|.
name|IO_FILE_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
comment|/* send request to the proxy */
operator|new
name|Sender
argument_list|(
name|proxyOut
argument_list|)
operator|.
name|copyBlock
argument_list|(
name|block
argument_list|,
name|blockToken
argument_list|)
expr_stmt|;
comment|// receive the response from the proxy
name|BlockOpResponseProto
name|copyResponse
init|=
name|BlockOpResponseProto
operator|.
name|parseFrom
argument_list|(
name|PBHelper
operator|.
name|vintPrefixed
argument_list|(
name|proxyReply
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyResponse
operator|.
name|getStatus
argument_list|()
operator|!=
name|SUCCESS
condition|)
block|{
if|if
condition|(
name|copyResponse
operator|.
name|getStatus
argument_list|()
operator|==
name|ERROR_ACCESS_TOKEN
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Copy block "
operator|+
name|block
operator|+
literal|" from "
operator|+
name|proxySock
operator|.
name|getRemoteSocketAddress
argument_list|()
operator|+
literal|" failed due to access token error"
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Copy block "
operator|+
name|block
operator|+
literal|" from "
operator|+
name|proxySock
operator|.
name|getRemoteSocketAddress
argument_list|()
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
comment|// get checksum info about the block we're copying
name|ReadOpChecksumInfoProto
name|checksumInfo
init|=
name|copyResponse
operator|.
name|getReadOpChecksumInfo
argument_list|()
decl_stmt|;
name|DataChecksum
name|remoteChecksum
init|=
name|DataTransferProtoUtil
operator|.
name|fromProto
argument_list|(
name|checksumInfo
operator|.
name|getChecksum
argument_list|()
argument_list|)
decl_stmt|;
comment|// open a block receiver and check if the block does not exist
name|blockReceiver
operator|=
operator|new
name|BlockReceiver
argument_list|(
name|block
argument_list|,
name|storageType
argument_list|,
name|proxyReply
argument_list|,
name|proxySock
operator|.
name|getRemoteSocketAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|proxySock
operator|.
name|getLocalSocketAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|datanode
argument_list|,
name|remoteChecksum
argument_list|,
name|CachingStrategy
operator|.
name|newDropBehind
argument_list|()
argument_list|)
expr_stmt|;
comment|// receive a block
name|blockReceiver
operator|.
name|receiveBlock
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|replyOut
argument_list|,
literal|null
argument_list|,
name|dataXceiverServer
operator|.
name|balanceThrottler
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// notify name node
name|datanode
operator|.
name|notifyNamenodeReceivedBlock
argument_list|(
name|block
argument_list|,
name|delHint
argument_list|,
name|blockReceiver
operator|.
name|getStorageUuid
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moved "
operator|+
name|block
operator|+
literal|" from "
operator|+
name|peer
operator|.
name|getRemoteAddressString
argument_list|()
operator|+
literal|", delHint="
operator|+
name|delHint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|opStatus
operator|=
name|ERROR
expr_stmt|;
name|errMsg
operator|=
literal|"opReplaceBlock "
operator|+
name|block
operator|+
literal|" received exception "
operator|+
name|ioe
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
comment|// receive the last byte that indicates the proxy released its thread resource
if|if
condition|(
name|opStatus
operator|==
name|SUCCESS
condition|)
block|{
try|try
block|{
name|proxyReply
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{         }
block|}
comment|// now release the thread resource
name|dataXceiverServer
operator|.
name|balanceThrottler
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// send response back
try|try
block|{
name|sendResponse
argument_list|(
name|opStatus
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error writing reply back to "
operator|+
name|peer
operator|.
name|getRemoteAddressString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|proxyOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|blockReceiver
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|proxyReply
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|replyOut
argument_list|)
expr_stmt|;
block|}
comment|//update metrics
name|datanode
operator|.
name|metrics
operator|.
name|addReplaceBlockOp
argument_list|(
name|elapsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|elapsed ()
specifier|private
name|long
name|elapsed
parameter_list|()
block|{
return|return
name|now
argument_list|()
operator|-
name|opStartTime
return|;
block|}
comment|/**    * Utility function for sending a response.    *     * @param status status message to write    * @param message message to send to the client or other DN    */
DECL|method|sendResponse (Status status, String message)
specifier|private
name|void
name|sendResponse
parameter_list|(
name|Status
name|status
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|writeResponse
argument_list|(
name|status
argument_list|,
name|message
argument_list|,
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeResponse (Status status, String message, OutputStream out)
specifier|private
specifier|static
name|void
name|writeResponse
parameter_list|(
name|Status
name|status
parameter_list|,
name|String
name|message
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockOpResponseProto
operator|.
name|Builder
name|response
init|=
name|BlockOpResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|writeSuccessWithChecksumInfo (BlockSender blockSender, DataOutputStream out)
specifier|private
name|void
name|writeSuccessWithChecksumInfo
parameter_list|(
name|BlockSender
name|blockSender
parameter_list|,
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|ReadOpChecksumInfoProto
name|ckInfo
init|=
name|ReadOpChecksumInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChecksum
argument_list|(
name|DataTransferProtoUtil
operator|.
name|toProto
argument_list|(
name|blockSender
operator|.
name|getChecksum
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setChunkOffset
argument_list|(
name|blockSender
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|BlockOpResponseProto
name|response
init|=
name|BlockOpResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|SUCCESS
argument_list|)
operator|.
name|setReadOpChecksumInfo
argument_list|(
name|ckInfo
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|response
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|checkAccess (OutputStream out, final boolean reply, final ExtendedBlock blk, final Token<BlockTokenIdentifier> t, final Op op, final BlockTokenSecretManager.AccessMode mode)
specifier|private
name|void
name|checkAccess
parameter_list|(
name|OutputStream
name|out
parameter_list|,
specifier|final
name|boolean
name|reply
parameter_list|,
specifier|final
name|ExtendedBlock
name|blk
parameter_list|,
specifier|final
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|t
parameter_list|,
specifier|final
name|Op
name|op
parameter_list|,
specifier|final
name|BlockTokenSecretManager
operator|.
name|AccessMode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|datanode
operator|.
name|isBlockTokenEnabled
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking block access token for block '"
operator|+
name|blk
operator|.
name|getBlockId
argument_list|()
operator|+
literal|"' with mode '"
operator|+
name|mode
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|datanode
operator|.
name|blockPoolTokenSecretManager
operator|.
name|checkAccess
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
name|blk
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|reply
condition|)
block|{
name|BlockOpResponseProto
operator|.
name|Builder
name|resp
init|=
name|BlockOpResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|ERROR_ACCESS_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|BlockTokenSecretManager
operator|.
name|AccessMode
operator|.
name|WRITE
condition|)
block|{
name|DatanodeRegistration
name|dnR
init|=
name|datanode
operator|.
name|getDNRegistrationForBP
argument_list|(
name|blk
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
comment|// NB: Unconditionally using the xfer addr w/o hostname
name|resp
operator|.
name|setFirstBadLink
argument_list|(
name|dnR
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resp
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Block token verification failed: op="
operator|+
name|op
operator|+
literal|", remoteAddress="
operator|+
name|remoteAddress
operator|+
literal|", message="
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

