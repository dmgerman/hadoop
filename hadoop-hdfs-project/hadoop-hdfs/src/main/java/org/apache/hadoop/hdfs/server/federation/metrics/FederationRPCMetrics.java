begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MsInfo
operator|.
name|ProcessName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MsInfo
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRate
import|;
end_import

begin_comment
comment|/**  * Implementation of the RPC metrics collector.  */
end_comment

begin_class
annotation|@
name|Metrics
argument_list|(
name|name
operator|=
literal|"RouterRPCActivity"
argument_list|,
name|about
operator|=
literal|"Router RPC Activity"
argument_list|,
name|context
operator|=
literal|"router"
argument_list|)
DECL|class|FederationRPCMetrics
specifier|public
class|class
name|FederationRPCMetrics
implements|implements
name|FederationRPCMBean
block|{
DECL|field|registry
specifier|private
specifier|final
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"router"
argument_list|)
decl_stmt|;
DECL|field|rpcServer
specifier|private
name|RouterRpcServer
name|rpcServer
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Time for the router to process an operation internally"
argument_list|)
DECL|field|processing
specifier|private
name|MutableRate
name|processing
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Number of operations the Router processed internally"
argument_list|)
DECL|field|processingOp
specifier|private
name|MutableCounterLong
name|processingOp
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Time for the Router to proxy an operation to the Namenodes"
argument_list|)
DECL|field|proxy
specifier|private
name|MutableRate
name|proxy
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Number of operations the Router proxied to a Namenode"
argument_list|)
DECL|field|proxyOp
specifier|private
name|MutableCounterLong
name|proxyOp
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Number of operations to fail to reach NN"
argument_list|)
DECL|field|proxyOpFailureStandby
specifier|private
name|MutableCounterLong
name|proxyOpFailureStandby
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Number of operations to hit a standby NN"
argument_list|)
DECL|field|proxyOpFailureCommunicate
specifier|private
name|MutableCounterLong
name|proxyOpFailureCommunicate
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Number of operations not implemented"
argument_list|)
DECL|field|proxyOpNotImplemented
specifier|private
name|MutableCounterLong
name|proxyOpNotImplemented
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Failed requests due to State Store unavailable"
argument_list|)
DECL|field|routerFailureStateStore
specifier|private
name|MutableCounterLong
name|routerFailureStateStore
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Failed requests due to read only mount point"
argument_list|)
DECL|field|routerFailureReadOnly
specifier|private
name|MutableCounterLong
name|routerFailureReadOnly
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Failed requests due to locked path"
argument_list|)
DECL|field|routerFailureLocked
specifier|private
name|MutableCounterLong
name|routerFailureLocked
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"Failed requests due to safe mode"
argument_list|)
DECL|field|routerFailureSafemode
specifier|private
name|MutableCounterLong
name|routerFailureSafemode
decl_stmt|;
DECL|method|FederationRPCMetrics (Configuration conf, RouterRpcServer rpcServer)
specifier|public
name|FederationRPCMetrics
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RouterRpcServer
name|rpcServer
parameter_list|)
block|{
name|this
operator|.
name|rpcServer
operator|=
name|rpcServer
expr_stmt|;
name|registry
operator|.
name|tag
argument_list|(
name|SessionId
argument_list|,
literal|"RouterRPCSession"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|tag
argument_list|(
name|ProcessName
argument_list|,
literal|"Router"
argument_list|)
expr_stmt|;
block|}
DECL|method|create (Configuration conf, RouterRpcServer rpcServer)
specifier|public
specifier|static
name|FederationRPCMetrics
name|create
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RouterRpcServer
name|rpcServer
parameter_list|)
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
return|return
name|ms
operator|.
name|register
argument_list|(
name|FederationRPCMetrics
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"HDFS Federation RPC Metrics"
argument_list|,
operator|new
name|FederationRPCMetrics
argument_list|(
name|conf
argument_list|,
name|rpcServer
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convert nanoseconds to milliseconds.    * @param ns Time in nanoseconds.    * @return Time in milliseconds.    */
DECL|method|toMs (double ns)
specifier|private
specifier|static
name|double
name|toMs
parameter_list|(
name|double
name|ns
parameter_list|)
block|{
return|return
name|ns
operator|/
literal|1000000
return|;
block|}
comment|/**    * Reset the metrics system.    */
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|ms
operator|.
name|unregisterSource
argument_list|(
name|FederationRPCMetrics
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|incrProxyOpFailureStandby ()
specifier|public
name|void
name|incrProxyOpFailureStandby
parameter_list|()
block|{
name|proxyOpFailureStandby
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProxyOpFailureStandby ()
specifier|public
name|long
name|getProxyOpFailureStandby
parameter_list|()
block|{
return|return
name|proxyOpFailureStandby
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|incrProxyOpFailureCommunicate ()
specifier|public
name|void
name|incrProxyOpFailureCommunicate
parameter_list|()
block|{
name|proxyOpFailureCommunicate
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProxyOpFailureCommunicate ()
specifier|public
name|long
name|getProxyOpFailureCommunicate
parameter_list|()
block|{
return|return
name|proxyOpFailureCommunicate
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|incrProxyOpNotImplemented ()
specifier|public
name|void
name|incrProxyOpNotImplemented
parameter_list|()
block|{
name|proxyOpNotImplemented
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProxyOpNotImplemented ()
specifier|public
name|long
name|getProxyOpNotImplemented
parameter_list|()
block|{
return|return
name|proxyOpNotImplemented
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|incrRouterFailureStateStore ()
specifier|public
name|void
name|incrRouterFailureStateStore
parameter_list|()
block|{
name|routerFailureStateStore
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRouterFailureStateStoreOps ()
specifier|public
name|long
name|getRouterFailureStateStoreOps
parameter_list|()
block|{
return|return
name|routerFailureStateStore
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|incrRouterFailureSafemode ()
specifier|public
name|void
name|incrRouterFailureSafemode
parameter_list|()
block|{
name|routerFailureSafemode
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRouterFailureSafemodeOps ()
specifier|public
name|long
name|getRouterFailureSafemodeOps
parameter_list|()
block|{
return|return
name|routerFailureSafemode
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|incrRouterFailureReadOnly ()
specifier|public
name|void
name|incrRouterFailureReadOnly
parameter_list|()
block|{
name|routerFailureReadOnly
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRouterFailureReadOnlyOps ()
specifier|public
name|long
name|getRouterFailureReadOnlyOps
parameter_list|()
block|{
return|return
name|routerFailureReadOnly
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|incrRouterFailureLocked ()
specifier|public
name|void
name|incrRouterFailureLocked
parameter_list|()
block|{
name|routerFailureLocked
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRouterFailureLockedOps ()
specifier|public
name|long
name|getRouterFailureLockedOps
parameter_list|()
block|{
return|return
name|routerFailureLocked
operator|.
name|value
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRpcServerCallQueue ()
specifier|public
name|int
name|getRpcServerCallQueue
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getServer
argument_list|()
operator|.
name|getCallQueueLen
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRpcServerNumOpenConnections ()
specifier|public
name|int
name|getRpcServerNumOpenConnections
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getServer
argument_list|()
operator|.
name|getNumOpenConnections
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRpcClientNumConnections ()
specifier|public
name|int
name|getRpcClientNumConnections
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
operator|.
name|getNumConnections
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRpcClientNumActiveConnections ()
specifier|public
name|int
name|getRpcClientNumActiveConnections
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
operator|.
name|getNumActiveConnections
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRpcClientNumCreatingConnections ()
specifier|public
name|int
name|getRpcClientNumCreatingConnections
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
operator|.
name|getNumCreatingConnections
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRpcClientNumConnectionPools ()
specifier|public
name|int
name|getRpcClientNumConnectionPools
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
operator|.
name|getNumConnectionPools
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRpcClientConnections ()
specifier|public
name|String
name|getRpcClientConnections
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getRPCClient
argument_list|()
operator|.
name|getJSON
argument_list|()
return|;
block|}
comment|/**    * Add the time to proxy an operation from the moment the Router sends it to    * the Namenode until it replied.    * @param time Proxy time of an operation in nanoseconds.    */
DECL|method|addProxyTime (long time)
specifier|public
name|void
name|addProxyTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|proxy
operator|.
name|add
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|proxyOp
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProxyAvg ()
specifier|public
name|double
name|getProxyAvg
parameter_list|()
block|{
return|return
name|toMs
argument_list|(
name|proxy
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProxyOps ()
specifier|public
name|long
name|getProxyOps
parameter_list|()
block|{
return|return
name|proxyOp
operator|.
name|value
argument_list|()
return|;
block|}
comment|/**    * Add the time to process a request in the Router from the time we receive    * the call until we send it to the Namenode.    * @param time Process time of an operation in nanoseconds.    */
DECL|method|addProcessingTime (long time)
specifier|public
name|void
name|addProcessingTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|processing
operator|.
name|add
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|processingOp
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProcessingAvg ()
specifier|public
name|double
name|getProcessingAvg
parameter_list|()
block|{
return|return
name|toMs
argument_list|(
name|processing
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProcessingOps ()
specifier|public
name|long
name|getProcessingOps
parameter_list|()
block|{
return|return
name|processingOp
operator|.
name|value
argument_list|()
return|;
block|}
block|}
end_class

end_unit

