begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|driver
operator|.
name|StateStoreDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|BaseRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A service to initialize a  * {@link org.apache.hadoop.hdfs.server.federation.store.driver.StateStoreDriver  * StateStoreDriver} and maintain the connection to the data store. There are  * multiple state store driver connections supported:  *<ul>  *<li>File  * {@link org.apache.hadoop.hdfs.server.federation.store.driver.impl.  * StateStoreFileImpl StateStoreFileImpl}  *<li>ZooKeeper  * {@link org.apache.hadoop.hdfs.server.federation.store.driver.impl.  * StateStoreZooKeeperImpl StateStoreZooKeeperImpl}  *</ul>  *<p>  * The service also supports the dynamic registration of record stores like:  *<ul>  *<li>{@link MembershipStore}: state of the Namenodes in the  * federation.  *<li>{@link MountTableStore}: Mount table between to subclusters.  * See {@link org.apache.hadoop.fs.viewfs.ViewFs ViewFs}.  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|StateStoreService
specifier|public
class|class
name|StateStoreService
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StateStoreService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** State Store configuration. */
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/** Identifier for the service. */
DECL|field|identifier
specifier|private
name|String
name|identifier
decl_stmt|;
comment|/** Driver for the back end connection. */
DECL|field|driver
specifier|private
name|StateStoreDriver
name|driver
decl_stmt|;
comment|/** Service to maintain data store connection. */
DECL|field|monitorService
specifier|private
name|StateStoreConnectionMonitorService
name|monitorService
decl_stmt|;
DECL|method|StateStoreService ()
specifier|public
name|StateStoreService
parameter_list|()
block|{
name|super
argument_list|(
name|StateStoreService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize the State Store and the connection to the backend.    *    * @param config Configuration for the State Store.    * @throws IOException    */
annotation|@
name|Override
DECL|method|serviceInit (Configuration config)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
comment|// Create implementation of State Store
name|Class
argument_list|<
name|?
extends|extends
name|StateStoreDriver
argument_list|>
name|driverClass
init|=
name|this
operator|.
name|conf
operator|.
name|getClass
argument_list|(
name|DFSConfigKeys
operator|.
name|FEDERATION_STORE_DRIVER_CLASS
argument_list|,
name|DFSConfigKeys
operator|.
name|FEDERATION_STORE_DRIVER_CLASS_DEFAULT
argument_list|,
name|StateStoreDriver
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|driver
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|driverClass
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|driver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create driver for the State Store"
argument_list|)
throw|;
block|}
comment|// Check the connection to the State Store periodically
name|this
operator|.
name|monitorService
operator|=
operator|new
name|StateStoreConnectionMonitorService
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|addService
argument_list|(
name|monitorService
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|loadDriver
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|closeDriver
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * List of records supported by this State Store.    *    * @return List of supported record classes.    */
DECL|method|getSupportedRecords ()
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|BaseRecord
argument_list|>
argument_list|>
name|getSupportedRecords
parameter_list|()
block|{
comment|// TODO add list of records
return|return
operator|new
name|LinkedList
argument_list|<>
argument_list|()
return|;
block|}
comment|/**    * Load the State Store driver. If successful, refresh cached data tables.    */
DECL|method|loadDriver ()
specifier|public
name|void
name|loadDriver
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|driver
init|)
block|{
if|if
condition|(
operator|!
name|isDriverReady
argument_list|()
condition|)
block|{
name|String
name|driverName
init|=
name|this
operator|.
name|driver
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|driver
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|getIdentifier
argument_list|()
argument_list|,
name|getSupportedRecords
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Connection to the State Store driver {} is open and ready"
argument_list|,
name|driverName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot initialize State Store driver {}"
argument_list|,
name|driverName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Check if the driver is ready to be used.    *    * @return If the driver is ready.    */
DECL|method|isDriverReady ()
specifier|public
name|boolean
name|isDriverReady
parameter_list|()
block|{
return|return
name|this
operator|.
name|driver
operator|.
name|isDriverReady
argument_list|()
return|;
block|}
comment|/**    * Manually shuts down the driver.    *    * @throws Exception If the driver cannot be closed.    */
annotation|@
name|VisibleForTesting
DECL|method|closeDriver ()
specifier|public
name|void
name|closeDriver
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|driver
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the state store driver.    *    * @return State store driver.    */
DECL|method|getDriver ()
specifier|public
name|StateStoreDriver
name|getDriver
parameter_list|()
block|{
return|return
name|this
operator|.
name|driver
return|;
block|}
comment|/**    * Fetch a unique identifier for this state store instance. Typically it is    * the address of the router.    *    * @return Unique identifier for this store.    */
DECL|method|getIdentifier ()
specifier|public
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|this
operator|.
name|identifier
return|;
block|}
comment|/**    * Set a unique synchronization identifier for this store.    *    * @param id Unique identifier, typically the router's RPC address.    */
DECL|method|setIdentifier (String id)
specifier|public
name|void
name|setIdentifier
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|identifier
operator|=
name|id
expr_stmt|;
block|}
block|}
end_class

end_unit

