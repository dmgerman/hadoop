begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockType
import|;
end_import

begin_comment
comment|/**  * Subclass of {@link BlockInfo}, used for a block with replication scheme.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BlockInfoContiguous
specifier|public
class|class
name|BlockInfoContiguous
extends|extends
name|BlockInfo
block|{
DECL|method|BlockInfoContiguous (short size)
specifier|public
name|BlockInfoContiguous
parameter_list|(
name|short
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockInfoContiguous (Block blk, short size)
specifier|public
name|BlockInfoContiguous
parameter_list|(
name|Block
name|blk
parameter_list|,
name|short
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|blk
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that there is enough  space to include num more storages.    * @return first free storage index.    */
DECL|method|ensureCapacity (int num)
specifier|private
name|int
name|ensureCapacity
parameter_list|(
name|int
name|num
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|storages
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
name|int
name|last
init|=
name|numNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|storages
operator|.
name|length
operator|>=
operator|(
name|last
operator|+
name|num
operator|)
condition|)
block|{
return|return
name|last
return|;
block|}
comment|/* Not enough space left. Create a new array. Should normally      * happen only when replication is manually increased by the user. */
name|DatanodeStorageInfo
index|[]
name|old
init|=
name|storages
decl_stmt|;
name|storages
operator|=
operator|new
name|DatanodeStorageInfo
index|[
operator|(
name|last
operator|+
name|num
operator|)
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|old
argument_list|,
literal|0
argument_list|,
name|storages
argument_list|,
literal|0
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|last
return|;
block|}
annotation|@
name|Override
DECL|method|addStorage (DatanodeStorageInfo storage, Block reportedBlock)
name|boolean
name|addStorage
parameter_list|(
name|DatanodeStorageInfo
name|storage
parameter_list|,
name|Block
name|reportedBlock
parameter_list|)
block|{
comment|// find the last null node
name|int
name|lastNode
init|=
name|ensureCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|setStorageInfo
argument_list|(
name|lastNode
argument_list|,
name|storage
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|removeStorage (DatanodeStorageInfo storage)
name|boolean
name|removeStorage
parameter_list|(
name|DatanodeStorageInfo
name|storage
parameter_list|)
block|{
name|int
name|dnIndex
init|=
name|findStorageInfo
argument_list|(
name|storage
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnIndex
operator|<
literal|0
condition|)
block|{
comment|// the node is not found
return|return
literal|false
return|;
block|}
comment|// find the last not null node
name|int
name|lastNode
init|=
name|numNodes
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// replace current node entry by the lastNode one
name|setStorageInfo
argument_list|(
name|dnIndex
argument_list|,
name|getStorageInfo
argument_list|(
name|lastNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the last entry to null
name|setStorageInfo
argument_list|(
name|lastNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|numNodes ()
specifier|public
name|int
name|numNodes
parameter_list|()
block|{
assert|assert
name|this
operator|.
name|storages
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
for|for
control|(
name|int
name|idx
init|=
name|getCapacity
argument_list|()
operator|-
literal|1
init|;
name|idx
operator|>=
literal|0
condition|;
name|idx
operator|--
control|)
block|{
if|if
condition|(
name|getDatanode
argument_list|(
name|idx
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|idx
operator|+
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|isStriped ()
specifier|public
specifier|final
name|boolean
name|isStriped
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockType ()
specifier|public
name|BlockType
name|getBlockType
parameter_list|()
block|{
return|return
name|BlockType
operator|.
name|CONTIGUOUS
return|;
block|}
annotation|@
name|Override
DECL|method|hasNoStorage ()
specifier|final
name|boolean
name|hasNoStorage
parameter_list|()
block|{
return|return
name|getStorageInfo
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
end_class

end_unit

