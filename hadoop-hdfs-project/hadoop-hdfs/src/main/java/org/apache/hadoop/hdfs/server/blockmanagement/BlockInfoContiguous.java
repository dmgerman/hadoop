begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|BlockUCState
import|;
end_import

begin_comment
comment|/**  * Subclass of {@link BlockInfo}, used for a block with replication scheme.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BlockInfoContiguous
specifier|public
class|class
name|BlockInfoContiguous
extends|extends
name|BlockInfo
block|{
DECL|field|EMPTY_ARRAY
specifier|public
specifier|static
specifier|final
name|BlockInfoContiguous
index|[]
name|EMPTY_ARRAY
init|=
block|{}
decl_stmt|;
DECL|method|BlockInfoContiguous (short size)
specifier|public
name|BlockInfoContiguous
parameter_list|(
name|short
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockInfoContiguous (Block blk, short size)
specifier|public
name|BlockInfoContiguous
parameter_list|(
name|Block
name|blk
parameter_list|,
name|short
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|blk
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy construction.    * This is used to convert BlockReplicationInfoUnderConstruction    * @param from BlockReplicationInfo to copy from.    */
DECL|method|BlockInfoContiguous (BlockInfoContiguous from)
specifier|protected
name|BlockInfoContiguous
parameter_list|(
name|BlockInfoContiguous
name|from
parameter_list|)
block|{
name|this
argument_list|(
name|from
argument_list|,
name|from
operator|.
name|getBlockCollection
argument_list|()
operator|.
name|getBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|triplets
operator|=
operator|new
name|Object
index|[
name|from
operator|.
name|triplets
operator|.
name|length
index|]
expr_stmt|;
name|this
operator|.
name|setBlockCollection
argument_list|(
name|from
operator|.
name|getBlockCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlockCollection ()
specifier|public
name|BlockCollection
name|getBlockCollection
parameter_list|()
block|{
return|return
name|bc
return|;
block|}
DECL|method|setBlockCollection (BlockCollection bc)
specifier|public
name|void
name|setBlockCollection
parameter_list|(
name|BlockCollection
name|bc
parameter_list|)
block|{
name|this
operator|.
name|bc
operator|=
name|bc
expr_stmt|;
block|}
DECL|method|isDeleted ()
specifier|public
name|boolean
name|isDeleted
parameter_list|()
block|{
return|return
operator|(
name|bc
operator|==
literal|null
operator|)
return|;
block|}
DECL|method|getDatanode (int index)
specifier|public
name|DatanodeDescriptor
name|getDatanode
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|DatanodeStorageInfo
name|storage
init|=
name|getStorageInfo
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|storage
operator|==
literal|null
condition|?
literal|null
else|:
name|storage
operator|.
name|getDatanodeDescriptor
argument_list|()
return|;
block|}
DECL|method|getStorageInfo (int index)
name|DatanodeStorageInfo
name|getStorageInfo
parameter_list|(
name|int
name|index
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|triplets
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|*
literal|3
operator|<
name|triplets
operator|.
name|length
operator|:
literal|"Index is out of bound"
assert|;
return|return
operator|(
name|DatanodeStorageInfo
operator|)
name|triplets
index|[
name|index
operator|*
literal|3
index|]
return|;
block|}
DECL|method|getPrevious (int index)
specifier|private
name|BlockInfoContiguous
name|getPrevious
parameter_list|(
name|int
name|index
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|triplets
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|*
literal|3
operator|+
literal|1
operator|<
name|triplets
operator|.
name|length
operator|:
literal|"Index is out of bound"
assert|;
name|BlockInfoContiguous
name|info
init|=
operator|(
name|BlockInfoContiguous
operator|)
name|triplets
index|[
name|index
operator|*
literal|3
operator|+
literal|1
index|]
decl_stmt|;
assert|assert
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|BlockInfoContiguous
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|:
literal|"BlockInfo is expected at "
operator|+
name|index
operator|*
literal|3
assert|;
return|return
name|info
return|;
block|}
DECL|method|getNext (int index)
name|BlockInfoContiguous
name|getNext
parameter_list|(
name|int
name|index
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|triplets
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|*
literal|3
operator|+
literal|2
operator|<
name|triplets
operator|.
name|length
operator|:
literal|"Index is out of bound"
assert|;
name|BlockInfoContiguous
name|info
init|=
operator|(
name|BlockInfoContiguous
operator|)
name|triplets
index|[
name|index
operator|*
literal|3
operator|+
literal|2
index|]
decl_stmt|;
assert|assert
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|BlockInfoContiguous
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|:
literal|"BlockInfo is expected at "
operator|+
name|index
operator|*
literal|3
assert|;
return|return
name|info
return|;
block|}
DECL|method|setStorageInfo (int index, DatanodeStorageInfo storage)
specifier|private
name|void
name|setStorageInfo
parameter_list|(
name|int
name|index
parameter_list|,
name|DatanodeStorageInfo
name|storage
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|triplets
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|*
literal|3
operator|<
name|triplets
operator|.
name|length
operator|:
literal|"Index is out of bound"
assert|;
name|triplets
index|[
name|index
operator|*
literal|3
index|]
operator|=
name|storage
expr_stmt|;
block|}
comment|/**    * Return the previous block on the block list for the datanode at    * position index. Set the previous block on the list to "to".    *    * @param index - the datanode index    * @param to - block to be set to previous on the list of blocks    * @return current previous block on the list of blocks    */
DECL|method|setPrevious (int index, BlockInfoContiguous to)
specifier|private
name|BlockInfoContiguous
name|setPrevious
parameter_list|(
name|int
name|index
parameter_list|,
name|BlockInfoContiguous
name|to
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|triplets
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|*
literal|3
operator|+
literal|1
operator|<
name|triplets
operator|.
name|length
operator|:
literal|"Index is out of bound"
assert|;
name|BlockInfoContiguous
name|info
init|=
operator|(
name|BlockInfoContiguous
operator|)
name|triplets
index|[
name|index
operator|*
literal|3
operator|+
literal|1
index|]
decl_stmt|;
name|triplets
index|[
name|index
operator|*
literal|3
operator|+
literal|1
index|]
operator|=
name|to
expr_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Return the next block on the block list for the datanode at    * position index. Set the next block on the list to "to".    *    * @param index - the datanode index    * @param to - block to be set to next on the list of blocks    *    * @return current next block on the list of blocks    */
DECL|method|setNext (int index, BlockInfoContiguous to)
specifier|private
name|BlockInfoContiguous
name|setNext
parameter_list|(
name|int
name|index
parameter_list|,
name|BlockInfoContiguous
name|to
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|triplets
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|*
literal|3
operator|+
literal|2
operator|<
name|triplets
operator|.
name|length
operator|:
literal|"Index is out of bound"
assert|;
name|BlockInfoContiguous
name|info
init|=
operator|(
name|BlockInfoContiguous
operator|)
name|triplets
index|[
name|index
operator|*
literal|3
operator|+
literal|2
index|]
decl_stmt|;
name|triplets
index|[
name|index
operator|*
literal|3
operator|+
literal|2
index|]
operator|=
name|to
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|method|getCapacity ()
specifier|public
name|int
name|getCapacity
parameter_list|()
block|{
assert|assert
name|this
operator|.
name|triplets
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
assert|assert
name|triplets
operator|.
name|length
operator|%
literal|3
operator|==
literal|0
operator|:
literal|"Malformed BlockInfo"
assert|;
return|return
name|triplets
operator|.
name|length
operator|/
literal|3
return|;
block|}
comment|/**    * Ensure that there is enough  space to include num more triplets.    * @return first free triplet index.    */
DECL|method|ensureCapacity (int num)
specifier|private
name|int
name|ensureCapacity
parameter_list|(
name|int
name|num
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|triplets
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
name|int
name|last
init|=
name|numNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|triplets
operator|.
name|length
operator|>=
operator|(
name|last
operator|+
name|num
operator|)
operator|*
literal|3
condition|)
block|{
return|return
name|last
return|;
block|}
comment|/* Not enough space left. Create a new array. Should normally      * happen only when replication is manually increased by the user. */
name|Object
index|[]
name|old
init|=
name|triplets
decl_stmt|;
name|triplets
operator|=
operator|new
name|Object
index|[
operator|(
name|last
operator|+
name|num
operator|)
operator|*
literal|3
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|old
argument_list|,
literal|0
argument_list|,
name|triplets
argument_list|,
literal|0
argument_list|,
name|last
operator|*
literal|3
argument_list|)
expr_stmt|;
return|return
name|last
return|;
block|}
annotation|@
name|Override
DECL|method|addStorage (DatanodeStorageInfo storage, Block reportedBlock)
name|boolean
name|addStorage
parameter_list|(
name|DatanodeStorageInfo
name|storage
parameter_list|,
name|Block
name|reportedBlock
parameter_list|)
block|{
comment|// find the last null node
name|int
name|lastNode
init|=
name|ensureCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|setStorageInfo
argument_list|(
name|lastNode
argument_list|,
name|storage
argument_list|)
expr_stmt|;
name|setNext
argument_list|(
name|lastNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setPrevious
argument_list|(
name|lastNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|removeStorage (DatanodeStorageInfo storage)
name|boolean
name|removeStorage
parameter_list|(
name|DatanodeStorageInfo
name|storage
parameter_list|)
block|{
name|int
name|dnIndex
init|=
name|findStorageInfo
argument_list|(
name|storage
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnIndex
operator|<
literal|0
condition|)
block|{
comment|// the node is not found
return|return
literal|false
return|;
block|}
assert|assert
name|getPrevious
argument_list|(
name|dnIndex
argument_list|)
operator|==
literal|null
operator|&&
name|getNext
argument_list|(
name|dnIndex
argument_list|)
operator|==
literal|null
operator|:
literal|"Block is still in the list and must be removed first."
assert|;
comment|// find the last not null node
name|int
name|lastNode
init|=
name|numNodes
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// replace current node triplet by the lastNode one
name|setStorageInfo
argument_list|(
name|dnIndex
argument_list|,
name|getStorageInfo
argument_list|(
name|lastNode
argument_list|)
argument_list|)
expr_stmt|;
name|setNext
argument_list|(
name|dnIndex
argument_list|,
name|getNext
argument_list|(
name|lastNode
argument_list|)
argument_list|)
expr_stmt|;
name|setPrevious
argument_list|(
name|dnIndex
argument_list|,
name|getPrevious
argument_list|(
name|lastNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the last triplet to null
name|setStorageInfo
argument_list|(
name|lastNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setNext
argument_list|(
name|lastNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setPrevious
argument_list|(
name|lastNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|numNodes ()
specifier|public
name|int
name|numNodes
parameter_list|()
block|{
assert|assert
name|this
operator|.
name|triplets
operator|!=
literal|null
operator|:
literal|"BlockInfo is not initialized"
assert|;
assert|assert
name|triplets
operator|.
name|length
operator|%
literal|3
operator|==
literal|0
operator|:
literal|"Malformed BlockInfo"
assert|;
for|for
control|(
name|int
name|idx
init|=
name|getCapacity
argument_list|()
operator|-
literal|1
init|;
name|idx
operator|>=
literal|0
condition|;
name|idx
operator|--
control|)
block|{
if|if
condition|(
name|getDatanode
argument_list|(
name|idx
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|idx
operator|+
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|replaceBlock (BlockInfo newBlock)
name|void
name|replaceBlock
parameter_list|(
name|BlockInfo
name|newBlock
parameter_list|)
block|{
assert|assert
name|newBlock
operator|instanceof
name|BlockInfoContiguous
assert|;
for|for
control|(
name|int
name|i
init|=
name|this
operator|.
name|numNodes
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|DatanodeStorageInfo
name|storage
init|=
name|this
operator|.
name|getStorageInfo
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|removed
init|=
name|storage
operator|.
name|removeBlock
argument_list|(
name|this
argument_list|)
decl_stmt|;
assert|assert
name|removed
operator|:
literal|"currentBlock not found."
assert|;
specifier|final
name|DatanodeStorageInfo
operator|.
name|AddBlockResult
name|result
init|=
name|storage
operator|.
name|addBlock
argument_list|(
name|newBlock
argument_list|,
name|newBlock
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|==
name|DatanodeStorageInfo
operator|.
name|AddBlockResult
operator|.
name|ADDED
operator|:
literal|"newBlock already exists."
assert|;
block|}
block|}
comment|/**    * Convert a complete block to an under construction block.    * @return BlockInfoUnderConstruction -  an under construction block.    */
DECL|method|convertToBlockUnderConstruction ( BlockUCState s, DatanodeStorageInfo[] targets)
specifier|public
name|BlockInfoContiguousUnderConstruction
name|convertToBlockUnderConstruction
parameter_list|(
name|BlockUCState
name|s
parameter_list|,
name|DatanodeStorageInfo
index|[]
name|targets
parameter_list|)
block|{
if|if
condition|(
name|isComplete
argument_list|()
condition|)
block|{
name|BlockInfoContiguousUnderConstruction
name|ucBlock
init|=
operator|new
name|BlockInfoContiguousUnderConstruction
argument_list|(
name|this
argument_list|,
name|getBlockCollection
argument_list|()
operator|.
name|getPreferredBlockReplication
argument_list|()
argument_list|,
name|s
argument_list|,
name|targets
argument_list|)
decl_stmt|;
name|ucBlock
operator|.
name|setBlockCollection
argument_list|(
name|getBlockCollection
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ucBlock
return|;
block|}
comment|// the block is already under construction
name|BlockInfoContiguousUnderConstruction
name|ucBlock
init|=
operator|(
name|BlockInfoContiguousUnderConstruction
operator|)
name|this
decl_stmt|;
name|ucBlock
operator|.
name|setBlockUCState
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|ucBlock
operator|.
name|setExpectedLocations
argument_list|(
name|targets
argument_list|)
expr_stmt|;
name|ucBlock
operator|.
name|setBlockCollection
argument_list|(
name|getBlockCollection
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ucBlock
return|;
block|}
annotation|@
name|Override
DECL|method|isStriped ()
specifier|public
specifier|final
name|boolean
name|isStriped
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

