begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_comment
comment|/**  * Subclass of {@link BlockInfo}, used for a block with replication scheme.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BlockInfoContiguous
specifier|public
class|class
name|BlockInfoContiguous
extends|extends
name|BlockInfo
block|{
DECL|method|BlockInfoContiguous (short size)
specifier|public
name|BlockInfoContiguous
parameter_list|(
name|short
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockInfoContiguous (Block blk, short size)
specifier|public
name|BlockInfoContiguous
parameter_list|(
name|Block
name|blk
parameter_list|,
name|short
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|blk
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy construction.    * This is used to convert BlockReplicationInfoUnderConstruction    * @param from BlockReplicationInfo to copy from.    */
DECL|method|BlockInfoContiguous (BlockInfo from)
specifier|protected
name|BlockInfoContiguous
parameter_list|(
name|BlockInfo
name|from
parameter_list|)
block|{
name|super
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addStorage (DatanodeStorageInfo storage, Block reportedBlock)
name|void
name|addStorage
parameter_list|(
name|DatanodeStorageInfo
name|storage
parameter_list|,
name|Block
name|reportedBlock
parameter_list|)
block|{
name|ContiguousBlockStorageOp
operator|.
name|addStorage
argument_list|(
name|this
argument_list|,
name|storage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeStorage (DatanodeStorageInfo storage)
name|boolean
name|removeStorage
parameter_list|(
name|DatanodeStorageInfo
name|storage
parameter_list|)
block|{
return|return
name|ContiguousBlockStorageOp
operator|.
name|removeStorage
argument_list|(
name|this
argument_list|,
name|storage
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|numNodes ()
specifier|public
name|int
name|numNodes
parameter_list|()
block|{
return|return
name|ContiguousBlockStorageOp
operator|.
name|numNodes
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|replaceBlock (BlockInfo newBlock)
name|void
name|replaceBlock
parameter_list|(
name|BlockInfo
name|newBlock
parameter_list|)
block|{
name|ContiguousBlockStorageOp
operator|.
name|replaceBlock
argument_list|(
name|this
argument_list|,
name|newBlock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|convertCompleteBlockToUC ( HdfsServerConstants.BlockUCState s, DatanodeStorageInfo[] targets)
name|BlockInfoUnderConstruction
name|convertCompleteBlockToUC
parameter_list|(
name|HdfsServerConstants
operator|.
name|BlockUCState
name|s
parameter_list|,
name|DatanodeStorageInfo
index|[]
name|targets
parameter_list|)
block|{
name|BlockInfoUnderConstructionContiguous
name|ucBlock
init|=
operator|new
name|BlockInfoUnderConstructionContiguous
argument_list|(
name|this
argument_list|,
name|getBlockCollection
argument_list|()
operator|.
name|getPreferredBlockReplication
argument_list|()
argument_list|,
name|s
argument_list|,
name|targets
argument_list|)
decl_stmt|;
name|ucBlock
operator|.
name|setBlockCollection
argument_list|(
name|getBlockCollection
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ucBlock
return|;
block|}
annotation|@
name|Override
DECL|method|hasEmptyStorage ()
name|boolean
name|hasEmptyStorage
parameter_list|()
block|{
return|return
name|ContiguousBlockStorageOp
operator|.
name|hasEmptyStorage
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

