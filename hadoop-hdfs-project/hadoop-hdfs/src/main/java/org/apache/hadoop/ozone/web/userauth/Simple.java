begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.userauth
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|userauth
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|ErrorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|UserArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|interfaces
operator|.
name|UserAuth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Simple is an UserAuth class that is used in the insecure  * mode of ozone. This maps more or less to the simple user scheme in  * HDFS.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Simple
specifier|public
class|class
name|Simple
implements|implements
name|UserAuth
block|{
comment|/**    * Returns the x-ozone-user or the user on behalf of, This is    * used in volume creation path.    *    * @param userArgs - UserArgs    *    * @throws OzoneException    */
annotation|@
name|Override
DECL|method|getOzoneUser (UserArgs userArgs)
specifier|public
name|String
name|getOzoneUser
parameter_list|(
name|UserArgs
name|userArgs
parameter_list|)
throws|throws
name|OzoneException
block|{
assert|assert
name|userArgs
operator|!=
literal|null
operator|:
literal|"userArgs cannot be null"
assert|;
name|HttpHeaders
name|headers
init|=
name|userArgs
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|users
init|=
name|headers
operator|.
name|getRequestHeader
argument_list|(
name|Header
operator|.
name|OZONE_USER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|users
operator|==
literal|null
operator|)
operator|||
operator|(
name|users
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|users
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|BAD_AUTHORIZATION
argument_list|,
name|userArgs
argument_list|)
throw|;
block|}
return|return
name|users
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**    * Returns the user name as a string from the URI and HTTP headers.    *    * @param userArgs - user args    *    * @throws OzoneException -- Allows the underlying system    * to throw, that error will get propagated to clients    */
annotation|@
name|Override
DECL|method|getUser (UserArgs userArgs)
specifier|public
name|String
name|getUser
parameter_list|(
name|UserArgs
name|userArgs
parameter_list|)
throws|throws
name|OzoneException
block|{
assert|assert
name|userArgs
operator|!=
literal|null
operator|:
literal|"userArgs cannot be null"
assert|;
name|HttpHeaders
name|headers
init|=
name|userArgs
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|users
init|=
name|headers
operator|.
name|getRequestHeader
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|users
operator|==
literal|null
operator|||
name|users
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|BAD_AUTHORIZATION
argument_list|,
name|userArgs
argument_list|)
throw|;
block|}
if|if
condition|(
name|users
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|user
init|=
name|users
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|startsWith
argument_list|(
name|Header
operator|.
name|OZONE_SIMPLE_AUTHENTICATION_SCHEME
argument_list|)
condition|)
block|{
name|user
operator|=
name|user
operator|.
name|replace
argument_list|(
name|Header
operator|.
name|OZONE_SIMPLE_AUTHENTICATION_SCHEME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|user
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|BAD_AUTHORIZATION
argument_list|,
name|userArgs
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns true if a user is a Admin - {root and hdfs are treated as admins}.    *    * @param userArgs - User Args    *    * @throws OzoneException -- Allows the underlying system    * to throw, that error will get propagated to clients    */
annotation|@
name|Override
DECL|method|isAdmin (UserArgs userArgs)
specifier|public
name|boolean
name|isAdmin
parameter_list|(
name|UserArgs
name|userArgs
parameter_list|)
throws|throws
name|OzoneException
block|{
assert|assert
name|userArgs
operator|!=
literal|null
operator|:
literal|"userArgs cannot be null"
assert|;
name|String
name|user
init|=
name|getUser
argument_list|(
name|userArgs
argument_list|)
decl_stmt|;
return|return
operator|(
name|user
operator|.
name|compareToIgnoreCase
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_ROOT_USER
argument_list|)
operator|==
literal|0
operator|)
operator|||
operator|(
name|user
operator|.
name|compareToIgnoreCase
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_SIMPLE_HDFS_USER
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
comment|/**    * Returns true if the request is Anonymous.    *    * @param userArgs - user Args    *    * @throws OzoneException -- Allows the underlying system    * to throw, that error will get propagated to clients    */
annotation|@
name|Override
DECL|method|isAnonymous (UserArgs userArgs)
specifier|public
name|boolean
name|isAnonymous
parameter_list|(
name|UserArgs
name|userArgs
parameter_list|)
throws|throws
name|OzoneException
block|{
assert|assert
name|userArgs
operator|!=
literal|null
operator|:
literal|"userArgs cannot be null"
assert|;
return|return
name|getUser
argument_list|(
name|userArgs
argument_list|)
operator|==
literal|null
return|;
block|}
comment|/**    * Returns true if the name is a recognizable user in the system.    *    * @param userName - Name of the user    * @param userArgs - user Args    *    * @throws OzoneException -- Allows the underlying system    * to throw, that error will get propagated to clients    */
annotation|@
name|Override
DECL|method|isUser (String userName, UserArgs userArgs)
specifier|public
name|boolean
name|isUser
parameter_list|(
name|String
name|userName
parameter_list|,
name|UserArgs
name|userArgs
parameter_list|)
throws|throws
name|OzoneException
block|{
comment|// In the simple case, all non-null users names are users :)
return|return
name|userName
operator|!=
literal|null
return|;
block|}
comment|/**    * Returns all the Groups that user is a member of.    *    * @param userArgs - User Args    *    * @return String Array which contains 0 or more group names    *    * @throws OzoneException    */
annotation|@
name|Override
DECL|method|getGroups (UserArgs userArgs)
specifier|public
name|String
index|[]
name|getGroups
parameter_list|(
name|UserArgs
name|userArgs
parameter_list|)
throws|throws
name|OzoneException
block|{
comment|// Not implemented
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

