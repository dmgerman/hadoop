begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|BlockAliasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|impl
operator|.
name|TextFileRegionAliasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DirectoryScanner
operator|.
name|ReportCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|checker
operator|.
name|VolumeCheckResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FileIoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * This class is used to create provided volumes.  */
end_comment

begin_class
DECL|class|ProvidedVolumeImpl
specifier|public
class|class
name|ProvidedVolumeImpl
extends|extends
name|FsVolumeImpl
block|{
DECL|class|ProvidedBlockPoolSlice
specifier|static
class|class
name|ProvidedBlockPoolSlice
block|{
DECL|field|providedVolume
specifier|private
name|ProvidedVolumeImpl
name|providedVolume
decl_stmt|;
DECL|field|aliasMap
specifier|private
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
name|aliasMap
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|bpid
specifier|private
name|String
name|bpid
decl_stmt|;
DECL|field|bpVolumeMap
specifier|private
name|ReplicaMap
name|bpVolumeMap
decl_stmt|;
DECL|method|ProvidedBlockPoolSlice (String bpid, ProvidedVolumeImpl volume, Configuration conf)
name|ProvidedBlockPoolSlice
parameter_list|(
name|String
name|bpid
parameter_list|,
name|ProvidedVolumeImpl
name|volume
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|providedVolume
operator|=
name|volume
expr_stmt|;
name|bpVolumeMap
operator|=
operator|new
name|ReplicaMap
argument_list|(
operator|new
name|AutoCloseableLock
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|BlockAliasMap
argument_list|>
name|fmt
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_CLASS
argument_list|,
name|TextFileRegionAliasMap
operator|.
name|class
argument_list|,
name|BlockAliasMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|aliasMap
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|fmt
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
name|bpVolumeMap
operator|.
name|initBlockPool
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created alias map using class: "
operator|+
name|aliasMap
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlockAliasMap ()
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
name|getBlockAliasMap
parameter_list|()
block|{
return|return
name|aliasMap
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setFileRegionProvider (BlockAliasMap<FileRegion> blockAliasMap)
name|void
name|setFileRegionProvider
parameter_list|(
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
name|blockAliasMap
parameter_list|)
block|{
name|this
operator|.
name|aliasMap
operator|=
name|blockAliasMap
expr_stmt|;
block|}
DECL|method|getVolumeMap (ReplicaMap volumeMap, RamDiskReplicaTracker ramDiskReplicaMap, FileSystem remoteFS)
specifier|public
name|void
name|getVolumeMap
parameter_list|(
name|ReplicaMap
name|volumeMap
parameter_list|,
name|RamDiskReplicaTracker
name|ramDiskReplicaMap
parameter_list|,
name|FileSystem
name|remoteFS
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockAliasMap
operator|.
name|Reader
argument_list|<
name|FileRegion
argument_list|>
name|reader
init|=
name|aliasMap
operator|.
name|getReader
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got null reader from BlockAliasMap "
operator|+
name|aliasMap
operator|+
literal|"; no blocks will be populated"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
name|iter
init|=
name|reader
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileRegion
name|region
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getBlockPoolId
argument_list|()
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getBlockPoolId
argument_list|()
operator|.
name|equals
argument_list|(
name|bpid
argument_list|)
operator|&&
name|containsBlock
argument_list|(
name|providedVolume
operator|.
name|baseURI
argument_list|,
name|region
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|)
condition|)
block|{
name|ReplicaInfo
name|newReplica
init|=
operator|new
name|ReplicaBuilder
argument_list|(
name|ReplicaState
operator|.
name|FINALIZED
argument_list|)
operator|.
name|setBlockId
argument_list|(
name|region
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setURI
argument_list|(
name|region
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|setOffset
argument_list|(
name|region
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|region
operator|.
name|getBlock
argument_list|()
operator|.
name|getNumBytes
argument_list|()
argument_list|)
operator|.
name|setGenerationStamp
argument_list|(
name|region
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
operator|.
name|setFsVolume
argument_list|(
name|providedVolume
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setRemoteFS
argument_list|(
name|remoteFS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ReplicaInfo
name|oldReplica
init|=
name|volumeMap
operator|.
name|get
argument_list|(
name|bpid
argument_list|,
name|newReplica
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldReplica
operator|==
literal|null
condition|)
block|{
name|volumeMap
operator|.
name|add
argument_list|(
name|bpid
argument_list|,
name|newReplica
argument_list|)
expr_stmt|;
name|bpVolumeMap
operator|.
name|add
argument_list|(
name|bpid
argument_list|,
name|newReplica
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"A block with id "
operator|+
name|newReplica
operator|.
name|getBlockId
argument_list|()
operator|+
literal|" already exists in the volumeMap"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|bpVolumeMap
operator|.
name|replicas
argument_list|(
name|bpid
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
DECL|method|shutdown (BlockListAsLongs blocksListsAsLongs)
specifier|public
name|void
name|shutdown
parameter_list|(
name|BlockListAsLongs
name|blocksListsAsLongs
parameter_list|)
block|{
comment|//nothing to do!
block|}
DECL|method|compileReport (LinkedList<ScanInfo> report, ReportCompiler reportCompiler)
specifier|public
name|void
name|compileReport
parameter_list|(
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|report
parameter_list|,
name|ReportCompiler
name|reportCompiler
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|/* refresh the aliasMap and return the list of blocks found.        * the assumption here is that the block ids in the external        * block map, after the refresh, are consistent with those        * from before the refresh, i.e., for blocks which did not change,        * the ids remain the same.        */
name|aliasMap
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|BlockAliasMap
operator|.
name|Reader
argument_list|<
name|FileRegion
argument_list|>
name|reader
init|=
name|aliasMap
operator|.
name|getReader
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got null reader from BlockAliasMap "
operator|+
name|aliasMap
operator|+
literal|"; no blocks will be populated in scan report"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
name|iter
init|=
name|reader
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|reportCompiler
operator|.
name|throttle
argument_list|()
expr_stmt|;
name|FileRegion
name|region
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getBlockPoolId
argument_list|()
operator|.
name|equals
argument_list|(
name|bpid
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding ScanInfo for blkid "
operator|+
name|region
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|report
operator|.
name|add
argument_list|(
operator|new
name|ScanInfo
argument_list|(
name|region
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|providedVolume
argument_list|,
name|region
argument_list|,
name|region
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|field|baseURI
specifier|private
name|URI
name|baseURI
decl_stmt|;
DECL|field|bpSlices
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ProvidedBlockPoolSlice
argument_list|>
name|bpSlices
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ProvidedBlockPoolSlice
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|df
specifier|private
name|ProvidedVolumeDF
name|df
decl_stmt|;
comment|//the remote FileSystem to which this ProvidedVolume points to.
DECL|field|remoteFS
specifier|private
name|FileSystem
name|remoteFS
decl_stmt|;
DECL|method|ProvidedVolumeImpl (FsDatasetImpl dataset, String storageID, StorageDirectory sd, FileIoProvider fileIoProvider, Configuration conf)
name|ProvidedVolumeImpl
parameter_list|(
name|FsDatasetImpl
name|dataset
parameter_list|,
name|String
name|storageID
parameter_list|,
name|StorageDirectory
name|sd
parameter_list|,
name|FileIoProvider
name|fileIoProvider
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dataset
argument_list|,
name|storageID
argument_list|,
name|sd
argument_list|,
name|fileIoProvider
argument_list|,
name|conf
argument_list|)
expr_stmt|;
assert|assert
name|getStorageLocation
argument_list|()
operator|.
name|getStorageType
argument_list|()
operator|==
name|StorageType
operator|.
name|PROVIDED
operator|:
literal|"Only provided storages must use ProvidedVolume"
assert|;
name|baseURI
operator|=
name|getStorageLocation
argument_list|()
operator|.
name|getUri
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|ProvidedVolumeDF
argument_list|>
name|dfClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDER_DF_CLASS
argument_list|,
name|DefaultProvidedVolumeDF
operator|.
name|class
argument_list|,
name|ProvidedVolumeDF
operator|.
name|class
argument_list|)
decl_stmt|;
name|df
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|dfClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|remoteFS
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|baseURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBlockPoolList ()
specifier|public
name|String
index|[]
name|getBlockPoolList
parameter_list|()
block|{
return|return
name|bpSlices
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|bpSlices
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCapacity ()
specifier|public
name|long
name|getCapacity
parameter_list|()
block|{
if|if
condition|(
name|configuredCapacity
operator|<
literal|0
condition|)
block|{
return|return
name|df
operator|.
name|getCapacity
argument_list|()
return|;
block|}
return|return
name|configuredCapacity
return|;
block|}
annotation|@
name|Override
DECL|method|getDfsUsed ()
specifier|public
name|long
name|getDfsUsed
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|df
operator|.
name|getSpaceUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockPoolUsed (String bpid)
name|long
name|getBlockPoolUsed
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bpSlices
operator|.
name|containsKey
argument_list|(
name|bpid
argument_list|)
condition|)
block|{
return|return
name|df
operator|.
name|getBlockPoolUsed
argument_list|(
name|bpid
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"block pool "
operator|+
name|bpid
operator|+
literal|" is not found"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAvailable ()
specifier|public
name|long
name|getAvailable
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|df
operator|.
name|getAvailable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getActualNonDfsUsed ()
name|long
name|getActualNonDfsUsed
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|df
operator|.
name|getSpaceUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNonDfsUsed ()
specifier|public
name|long
name|getNonDfsUsed
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0L
return|;
block|}
annotation|@
name|Override
DECL|method|getBaseURI ()
specifier|public
name|URI
name|getBaseURI
parameter_list|()
block|{
return|return
name|baseURI
return|;
block|}
annotation|@
name|Override
DECL|method|getFinalizedDir (String bpid)
specifier|public
name|File
name|getFinalizedDir
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|reserveSpaceForReplica (long bytesToReserve)
specifier|public
name|void
name|reserveSpaceForReplica
parameter_list|(
name|long
name|bytesToReserve
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|releaseReservedSpace (long bytesToRelease)
specifier|public
name|void
name|releaseReservedSpace
parameter_list|(
name|long
name|bytesToRelease
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
DECL|field|WRITER
specifier|private
specifier|static
specifier|final
name|ObjectWriter
name|WRITER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
decl_stmt|;
DECL|field|READER
specifier|private
specifier|static
specifier|final
name|ObjectReader
name|READER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|reader
argument_list|(
name|ProvidedBlockIteratorState
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|ProvidedBlockIteratorState
specifier|private
specifier|static
class|class
name|ProvidedBlockIteratorState
block|{
DECL|method|ProvidedBlockIteratorState ()
name|ProvidedBlockIteratorState
parameter_list|()
block|{
name|iterStartMs
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
name|lastSavedMs
operator|=
name|iterStartMs
expr_stmt|;
name|atEnd
operator|=
literal|false
expr_stmt|;
name|lastBlockId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// The wall-clock ms since the epoch at which this iterator was last saved.
annotation|@
name|JsonProperty
DECL|field|lastSavedMs
specifier|private
name|long
name|lastSavedMs
decl_stmt|;
comment|// The wall-clock ms since the epoch at which this iterator was created.
annotation|@
name|JsonProperty
DECL|field|iterStartMs
specifier|private
name|long
name|iterStartMs
decl_stmt|;
annotation|@
name|JsonProperty
DECL|field|atEnd
specifier|private
name|boolean
name|atEnd
decl_stmt|;
comment|//The id of the last block read when the state of the iterator is saved.
comment|//This implementation assumes that provided blocks are returned
comment|//in sorted order of the block ids.
annotation|@
name|JsonProperty
DECL|field|lastBlockId
specifier|private
name|long
name|lastBlockId
decl_stmt|;
block|}
DECL|class|ProviderBlockIteratorImpl
specifier|private
class|class
name|ProviderBlockIteratorImpl
implements|implements
name|FsVolumeSpi
operator|.
name|BlockIterator
block|{
DECL|field|bpid
specifier|private
name|String
name|bpid
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|blockAliasMap
specifier|private
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
name|blockAliasMap
decl_stmt|;
DECL|field|blockIterator
specifier|private
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
name|blockIterator
decl_stmt|;
DECL|field|state
specifier|private
name|ProvidedBlockIteratorState
name|state
decl_stmt|;
DECL|method|ProviderBlockIteratorImpl (String bpid, String name, BlockAliasMap<FileRegion> blockAliasMap)
name|ProviderBlockIteratorImpl
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|,
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
name|blockAliasMap
parameter_list|)
block|{
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|blockAliasMap
operator|=
name|blockAliasMap
expr_stmt|;
name|rewind
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|//No action needed
block|}
annotation|@
name|Override
DECL|method|nextBlock ()
specifier|public
name|ExtendedBlock
name|nextBlock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|blockIterator
operator|||
operator|!
name|blockIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FileRegion
name|nextRegion
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|null
operator|==
name|nextRegion
operator|&&
name|blockIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileRegion
name|temp
init|=
name|blockIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|temp
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
operator|<
name|state
operator|.
name|lastBlockId
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|temp
operator|.
name|getBlockPoolId
argument_list|()
operator|.
name|equals
argument_list|(
name|bpid
argument_list|)
condition|)
block|{
name|nextRegion
operator|=
name|temp
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|nextRegion
condition|)
block|{
return|return
literal|null
return|;
block|}
name|state
operator|.
name|lastBlockId
operator|=
name|nextRegion
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
expr_stmt|;
return|return
operator|new
name|ExtendedBlock
argument_list|(
name|bpid
argument_list|,
name|nextRegion
operator|.
name|getBlock
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|atEnd ()
specifier|public
name|boolean
name|atEnd
parameter_list|()
block|{
return|return
name|blockIterator
operator|!=
literal|null
condition|?
operator|!
name|blockIterator
operator|.
name|hasNext
argument_list|()
else|:
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|rewind ()
specifier|public
name|void
name|rewind
parameter_list|()
block|{
name|BlockAliasMap
operator|.
name|Reader
argument_list|<
name|FileRegion
argument_list|>
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|blockAliasMap
operator|.
name|getReader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in getting reader from provided alias map"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|blockIterator
operator|=
name|reader
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|blockIterator
operator|=
literal|null
expr_stmt|;
block|}
name|state
operator|=
operator|new
name|ProvidedBlockIteratorState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|save ()
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|IOException
block|{
comment|//We do not persist the state of this iterator anywhere, locally.
comment|//We just re-scan provided volumes as necessary.
name|state
operator|.
name|lastSavedMs
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setMaxStalenessMs (long maxStalenessMs)
specifier|public
name|void
name|setMaxStalenessMs
parameter_list|(
name|long
name|maxStalenessMs
parameter_list|)
block|{
comment|//do not use max staleness
block|}
annotation|@
name|Override
DECL|method|getIterStartMs ()
specifier|public
name|long
name|getIterStartMs
parameter_list|()
block|{
return|return
name|state
operator|.
name|iterStartMs
return|;
block|}
annotation|@
name|Override
DECL|method|getLastSavedMs ()
specifier|public
name|long
name|getLastSavedMs
parameter_list|()
block|{
return|return
name|state
operator|.
name|lastSavedMs
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|bpid
return|;
block|}
DECL|method|load ()
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
comment|//on load, we just rewind the iterator for provided volumes.
name|rewind
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"load({}, {}): loaded iterator {}: {}"
argument_list|,
name|getStorageID
argument_list|()
argument_list|,
name|bpid
argument_list|,
name|name
argument_list|,
name|WRITER
operator|.
name|writeValueAsString
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|newBlockIterator (String bpid, String name)
specifier|public
name|BlockIterator
name|newBlockIterator
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ProviderBlockIteratorImpl
argument_list|(
name|bpid
argument_list|,
name|name
argument_list|,
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
operator|.
name|getBlockAliasMap
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|loadBlockIterator (String bpid, String name)
specifier|public
name|BlockIterator
name|loadBlockIterator
parameter_list|(
name|String
name|bpid
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ProviderBlockIteratorImpl
name|iter
init|=
operator|new
name|ProviderBlockIteratorImpl
argument_list|(
name|bpid
argument_list|,
name|name
argument_list|,
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
operator|.
name|getBlockAliasMap
argument_list|()
argument_list|)
decl_stmt|;
name|iter
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|iter
return|;
block|}
annotation|@
name|Override
DECL|method|addFinalizedBlock (String bpid, Block b, ReplicaInfo replicaInfo, long bytesReserved)
name|ReplicaInfo
name|addFinalizedBlock
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Block
name|b
parameter_list|,
name|ReplicaInfo
name|replicaInfo
parameter_list|,
name|long
name|bytesReserved
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|check (VolumeCheckContext ignored)
specifier|public
name|VolumeCheckResult
name|check
parameter_list|(
name|VolumeCheckContext
name|ignored
parameter_list|)
throws|throws
name|DiskErrorException
block|{
return|return
name|VolumeCheckResult
operator|.
name|HEALTHY
return|;
block|}
annotation|@
name|Override
DECL|method|getVolumeMap (ReplicaMap volumeMap, final RamDiskReplicaTracker ramDiskReplicaMap)
name|void
name|getVolumeMap
parameter_list|(
name|ReplicaMap
name|volumeMap
parameter_list|,
specifier|final
name|RamDiskReplicaTracker
name|ramDiskReplicaMap
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating volumemap for provided volume "
operator|+
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|ProvidedBlockPoolSlice
name|s
range|:
name|bpSlices
operator|.
name|values
argument_list|()
control|)
block|{
name|s
operator|.
name|getVolumeMap
argument_list|(
name|volumeMap
argument_list|,
name|ramDiskReplicaMap
argument_list|,
name|remoteFS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getProvidedBlockPoolSlice (String bpid)
specifier|private
name|ProvidedBlockPoolSlice
name|getProvidedBlockPoolSlice
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
name|ProvidedBlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"block pool "
operator|+
name|bpid
operator|+
literal|" is not found"
argument_list|)
throw|;
block|}
return|return
name|bp
return|;
block|}
annotation|@
name|Override
DECL|method|getVolumeMap (String bpid, ReplicaMap volumeMap, final RamDiskReplicaTracker ramDiskReplicaMap)
name|void
name|getVolumeMap
parameter_list|(
name|String
name|bpid
parameter_list|,
name|ReplicaMap
name|volumeMap
parameter_list|,
specifier|final
name|RamDiskReplicaTracker
name|ramDiskReplicaMap
parameter_list|)
throws|throws
name|IOException
block|{
name|getProvidedBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getVolumeMap
argument_list|(
name|volumeMap
argument_list|,
name|ramDiskReplicaMap
argument_list|,
name|remoteFS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBlockFormat (String bpid)
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
name|getBlockFormat
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getProvidedBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|getBlockAliasMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|baseURI
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|addBlockPool (String bpid, Configuration conf)
name|void
name|addBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|addBlockPool
argument_list|(
name|bpid
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addBlockPool (String bpid, Configuration conf, Timer timer)
name|void
name|addBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Timer
name|timer
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding block pool "
operator|+
name|bpid
operator|+
literal|" to volume with id "
operator|+
name|getStorageID
argument_list|()
argument_list|)
expr_stmt|;
name|ProvidedBlockPoolSlice
name|bp
decl_stmt|;
name|bp
operator|=
operator|new
name|ProvidedBlockPoolSlice
argument_list|(
name|bpid
argument_list|,
name|this
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|bpSlices
operator|.
name|put
argument_list|(
name|bpid
argument_list|,
name|bp
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cacheExecutor
operator|!=
literal|null
condition|)
block|{
name|cacheExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ProvidedBlockPoolSlice
argument_list|>
argument_list|>
name|set
init|=
name|bpSlices
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ProvidedBlockPoolSlice
argument_list|>
name|entry
range|:
name|set
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|shutdown
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|shutdownBlockPool (String bpid, BlockListAsLongs blocksListsAsLongs)
name|void
name|shutdownBlockPool
parameter_list|(
name|String
name|bpid
parameter_list|,
name|BlockListAsLongs
name|blocksListsAsLongs
parameter_list|)
block|{
name|ProvidedBlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|bp
operator|.
name|shutdown
argument_list|(
name|blocksListsAsLongs
argument_list|)
expr_stmt|;
block|}
name|bpSlices
operator|.
name|remove
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isBPDirEmpty (String bpid)
name|boolean
name|isBPDirEmpty
parameter_list|(
name|String
name|bpid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getProvidedBlockPoolSlice
argument_list|(
name|bpid
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|deleteBPDirectories (String bpid, boolean force)
name|void
name|deleteBPDirectories
parameter_list|(
name|String
name|bpid
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|compileReport (String bpid, LinkedList<ScanInfo> report, ReportCompiler reportCompiler)
specifier|public
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|compileReport
parameter_list|(
name|String
name|bpid
parameter_list|,
name|LinkedList
argument_list|<
name|ScanInfo
argument_list|>
name|report
parameter_list|,
name|ReportCompiler
name|reportCompiler
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Compiling report for volume: "
operator|+
name|this
operator|+
literal|" bpid "
operator|+
name|bpid
argument_list|)
expr_stmt|;
comment|//get the report from the appropriate block pool.
if|if
condition|(
name|bpSlices
operator|.
name|containsKey
argument_list|(
name|bpid
argument_list|)
condition|)
block|{
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
operator|.
name|compileReport
argument_list|(
name|report
argument_list|,
name|reportCompiler
argument_list|)
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
annotation|@
name|Override
DECL|method|append (String bpid, ReplicaInfo replicaInfo, long newGS, long estimateBlockLen)
specifier|public
name|ReplicaInPipeline
name|append
parameter_list|(
name|String
name|bpid
parameter_list|,
name|ReplicaInfo
name|replicaInfo
parameter_list|,
name|long
name|newGS
parameter_list|,
name|long
name|estimateBlockLen
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createRbw (ExtendedBlock b)
specifier|public
name|ReplicaInPipeline
name|createRbw
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|convertTemporaryToRbw (ExtendedBlock b, ReplicaInfo temp)
specifier|public
name|ReplicaInPipeline
name|convertTemporaryToRbw
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|ReplicaInfo
name|temp
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createTemporary (ExtendedBlock b)
specifier|public
name|ReplicaInPipeline
name|createTemporary
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|updateRURCopyOnTruncate (ReplicaInfo rur, String bpid, long newBlockId, long recoveryId, long newlength)
specifier|public
name|ReplicaInPipeline
name|updateRURCopyOnTruncate
parameter_list|(
name|ReplicaInfo
name|rur
parameter_list|,
name|String
name|bpid
parameter_list|,
name|long
name|newBlockId
parameter_list|,
name|long
name|recoveryId
parameter_list|,
name|long
name|newlength
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|moveBlockToTmpLocation (ExtendedBlock block, ReplicaInfo replicaInfo, int smallBufferSize, Configuration conf)
specifier|public
name|ReplicaInfo
name|moveBlockToTmpLocation
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|ReplicaInfo
name|replicaInfo
parameter_list|,
name|int
name|smallBufferSize
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|copyBlockToLazyPersistLocation (String bpId, long blockId, long genStamp, ReplicaInfo replicaInfo, int smallBufferSize, Configuration conf)
specifier|public
name|File
index|[]
name|copyBlockToLazyPersistLocation
parameter_list|(
name|String
name|bpId
parameter_list|,
name|long
name|blockId
parameter_list|,
name|long
name|genStamp
parameter_list|,
name|ReplicaInfo
name|replicaInfo
parameter_list|,
name|int
name|smallBufferSize
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedVolume does not yet support writes"
argument_list|)
throw|;
block|}
DECL|method|getAbsoluteURI (URI uri)
specifier|private
specifier|static
name|URI
name|getAbsoluteURI
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
operator|!
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|// URI is not absolute implies it is for a local file
comment|// normalize the URI
return|return
name|StorageLocation
operator|.
name|normalizeFileURI
argument_list|(
name|uri
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|uri
return|;
block|}
block|}
comment|/**    * @param volumeURI URI of the volume    * @param blockURI URI of the block    * @return true if the {@code blockURI} can belong to the volume or both URIs    * are null.    */
annotation|@
name|VisibleForTesting
DECL|method|containsBlock (URI volumeURI, URI blockURI)
specifier|public
specifier|static
name|boolean
name|containsBlock
parameter_list|(
name|URI
name|volumeURI
parameter_list|,
name|URI
name|blockURI
parameter_list|)
block|{
if|if
condition|(
name|volumeURI
operator|==
literal|null
operator|&&
name|blockURI
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|volumeURI
operator|==
literal|null
operator|||
name|blockURI
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|volumeURI
operator|=
name|getAbsoluteURI
argument_list|(
name|volumeURI
argument_list|)
expr_stmt|;
name|blockURI
operator|=
name|getAbsoluteURI
argument_list|(
name|blockURI
argument_list|)
expr_stmt|;
return|return
operator|!
name|volumeURI
operator|.
name|relativize
argument_list|(
name|blockURI
argument_list|)
operator|.
name|equals
argument_list|(
name|blockURI
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setFileRegionProvider (String bpid, BlockAliasMap<FileRegion> blockAliasMap)
name|void
name|setFileRegionProvider
parameter_list|(
name|String
name|bpid
parameter_list|,
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
name|blockAliasMap
parameter_list|)
throws|throws
name|IOException
block|{
name|ProvidedBlockPoolSlice
name|bp
init|=
name|bpSlices
operator|.
name|get
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"block pool "
operator|+
name|bpid
operator|+
literal|" is not found"
argument_list|)
throw|;
block|}
name|bp
operator|.
name|setFileRegionProvider
argument_list|(
name|blockAliasMap
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

