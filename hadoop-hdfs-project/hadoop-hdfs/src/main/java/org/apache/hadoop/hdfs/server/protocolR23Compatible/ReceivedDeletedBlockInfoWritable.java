begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|BlockWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * A data structure to store Block and delHints together, used to send  * received/deleted ACKs.  */
end_comment

begin_class
DECL|class|ReceivedDeletedBlockInfoWritable
specifier|public
class|class
name|ReceivedDeletedBlockInfoWritable
implements|implements
name|Writable
block|{
DECL|field|block
name|BlockWritable
name|block
decl_stmt|;
DECL|field|statusCode
name|int
name|statusCode
decl_stmt|;
DECL|field|delHints
name|String
name|delHints
decl_stmt|;
DECL|method|ReceivedDeletedBlockInfoWritable ()
specifier|public
name|ReceivedDeletedBlockInfoWritable
parameter_list|()
block|{   }
DECL|method|ReceivedDeletedBlockInfoWritable ( BlockWritable blk, int statusCode, String delHints)
specifier|public
name|ReceivedDeletedBlockInfoWritable
parameter_list|(
name|BlockWritable
name|blk
parameter_list|,
name|int
name|statusCode
parameter_list|,
name|String
name|delHints
parameter_list|)
block|{
name|this
operator|.
name|block
operator|=
name|blk
expr_stmt|;
name|this
operator|.
name|statusCode
operator|=
name|statusCode
expr_stmt|;
name|this
operator|.
name|delHints
operator|=
name|delHints
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|block
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|statusCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|statusCode
operator|==
name|BlockStatus
operator|.
name|DELETED_BLOCK
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|delHints
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|block
operator|=
operator|new
name|BlockWritable
argument_list|()
expr_stmt|;
name|this
operator|.
name|block
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|statusCode
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|statusCode
operator|==
name|BlockStatus
operator|.
name|DELETED_BLOCK
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|this
operator|.
name|delHints
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|block
operator|.
name|toString
argument_list|()
operator|+
literal|", statusCode: "
operator|+
name|statusCode
operator|+
literal|", delHint: "
operator|+
name|delHints
return|;
block|}
DECL|method|convert ( ReceivedDeletedBlockInfoWritable[] rdBlocks)
specifier|public
specifier|static
name|ReceivedDeletedBlockInfo
index|[]
name|convert
parameter_list|(
name|ReceivedDeletedBlockInfoWritable
index|[]
name|rdBlocks
parameter_list|)
block|{
name|ReceivedDeletedBlockInfo
index|[]
name|ret
init|=
operator|new
name|ReceivedDeletedBlockInfo
index|[
name|rdBlocks
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rdBlocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|rdBlocks
index|[
name|i
index|]
operator|.
name|convert
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|convert ( ReceivedDeletedBlockInfo[] blocks)
specifier|public
specifier|static
name|ReceivedDeletedBlockInfoWritable
index|[]
name|convert
parameter_list|(
name|ReceivedDeletedBlockInfo
index|[]
name|blocks
parameter_list|)
block|{
name|ReceivedDeletedBlockInfoWritable
index|[]
name|ret
init|=
operator|new
name|ReceivedDeletedBlockInfoWritable
index|[
name|blocks
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|convert ()
specifier|public
name|ReceivedDeletedBlockInfo
name|convert
parameter_list|()
block|{
return|return
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
name|block
operator|.
name|convert
argument_list|()
argument_list|,
name|BlockStatus
operator|.
name|fromCode
argument_list|(
name|statusCode
argument_list|)
argument_list|,
name|delHints
argument_list|)
return|;
block|}
DECL|method|convert ( ReceivedDeletedBlockInfo b)
specifier|public
specifier|static
name|ReceivedDeletedBlockInfoWritable
name|convert
parameter_list|(
name|ReceivedDeletedBlockInfo
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|ReceivedDeletedBlockInfoWritable
argument_list|(
name|BlockWritable
operator|.
name|convert
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|b
operator|.
name|getStatus
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|b
operator|.
name|getDelHints
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

