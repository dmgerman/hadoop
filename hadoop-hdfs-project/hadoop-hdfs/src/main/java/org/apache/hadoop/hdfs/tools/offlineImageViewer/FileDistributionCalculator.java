begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatProtobuf
operator|.
name|SectionName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|FileSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LimitInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This is the tool for analyzing file sizes in the namespace image. In order to  * run the tool one should define a range of integers<tt>[0, maxSize]</tt> by  * specifying<tt>maxSize</tt> and a<tt>step</tt>. The range of integers is  * divided into segments of size<tt>step</tt>:  *<tt>[0, s<sub>1</sub>, ..., s<sub>n-1</sub>, maxSize]</tt>, and the visitor  * calculates how many files in the system fall into each segment  *<tt>[s<sub>i-1</sub>, s<sub>i</sub>)</tt>. Note that files larger than  *<tt>maxSize</tt> always fall into the very last segment.  *  *<h3>Input.</h3>  *<ul>  *<li><tt>filename</tt> specifies the location of the image file;</li>  *<li><tt>maxSize</tt> determines the range<tt>[0, maxSize]</tt> of files  * sizes considered by the visitor;</li>  *<li><tt>step</tt> the range is divided into segments of size step.</li>  *</ul>  *  *<h3>Output.</h3> The output file is formatted as a tab separated two column  * table: Size and NumFiles. Where Size represents the start of the segment, and  * numFiles is the number of files form the image which size falls in this  * segment.  *  */
end_comment

begin_class
DECL|class|FileDistributionCalculator
specifier|final
class|class
name|FileDistributionCalculator
block|{
DECL|field|MAX_SIZE_DEFAULT
specifier|private
specifier|final
specifier|static
name|long
name|MAX_SIZE_DEFAULT
init|=
literal|0x2000000000L
decl_stmt|;
comment|// 1/8 TB = 2^37
DECL|field|INTERVAL_DEFAULT
specifier|private
specifier|final
specifier|static
name|int
name|INTERVAL_DEFAULT
init|=
literal|0x200000
decl_stmt|;
comment|// 2 MB = 2^21
DECL|field|MAX_INTERVALS
specifier|private
specifier|final
specifier|static
name|int
name|MAX_INTERVALS
init|=
literal|0x8000000
decl_stmt|;
comment|// 128 M = 2^27
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|maxSize
specifier|private
specifier|final
name|long
name|maxSize
decl_stmt|;
DECL|field|steps
specifier|private
specifier|final
name|int
name|steps
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|PrintStream
name|out
decl_stmt|;
DECL|field|distribution
specifier|private
specifier|final
name|int
index|[]
name|distribution
decl_stmt|;
DECL|field|totalFiles
specifier|private
name|int
name|totalFiles
decl_stmt|;
DECL|field|totalDirectories
specifier|private
name|int
name|totalDirectories
decl_stmt|;
DECL|field|totalBlocks
specifier|private
name|int
name|totalBlocks
decl_stmt|;
DECL|field|totalSpace
specifier|private
name|long
name|totalSpace
decl_stmt|;
DECL|field|maxFileSize
specifier|private
name|long
name|maxFileSize
decl_stmt|;
DECL|method|FileDistributionCalculator (Configuration conf, long maxSize, int steps, PrintStream out)
name|FileDistributionCalculator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|maxSize
parameter_list|,
name|int
name|steps
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
operator|==
literal|0
condition|?
name|MAX_SIZE_DEFAULT
else|:
name|maxSize
expr_stmt|;
name|this
operator|.
name|steps
operator|=
name|steps
operator|==
literal|0
condition|?
name|INTERVAL_DEFAULT
else|:
name|steps
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|long
name|numIntervals
init|=
name|this
operator|.
name|maxSize
operator|/
name|this
operator|.
name|steps
decl_stmt|;
comment|// avoid OutOfMemoryError when allocating an array
name|Preconditions
operator|.
name|checkState
argument_list|(
name|numIntervals
operator|<=
name|MAX_INTERVALS
argument_list|,
literal|"Too many distribution intervals (maxSize/step): "
operator|+
name|numIntervals
operator|+
literal|", should be less than "
operator|+
operator|(
name|MAX_INTERVALS
operator|+
literal|1
operator|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|this
operator|.
name|distribution
operator|=
operator|new
name|int
index|[
literal|1
operator|+
call|(
name|int
call|)
argument_list|(
name|numIntervals
argument_list|)
index|]
expr_stmt|;
block|}
DECL|method|visit (RandomAccessFile file)
name|void
name|visit
parameter_list|(
name|RandomAccessFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|FSImageUtil
operator|.
name|checkFileFormat
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unrecognized FSImage"
argument_list|)
throw|;
block|}
name|FileSummary
name|summary
init|=
name|FSImageUtil
operator|.
name|loadSummary
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
init|(
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
operator|.
name|getFD
argument_list|()
argument_list|)
init|)
block|{
for|for
control|(
name|FileSummary
operator|.
name|Section
name|s
range|:
name|summary
operator|.
name|getSectionsList
argument_list|()
control|)
block|{
if|if
condition|(
name|SectionName
operator|.
name|fromString
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
name|SectionName
operator|.
name|INODE
condition|)
block|{
continue|continue;
block|}
name|in
operator|.
name|getChannel
argument_list|()
operator|.
name|position
argument_list|(
name|s
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|FSImageUtil
operator|.
name|wrapInputStreamForCompression
argument_list|(
name|conf
argument_list|,
name|summary
operator|.
name|getCodec
argument_list|()
argument_list|,
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|LimitInputStream
argument_list|(
name|in
argument_list|,
name|s
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|output
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|run (InputStream in)
specifier|private
name|void
name|run
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeSection
name|s
init|=
name|INodeSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|getNumInodes
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|INodeSection
operator|.
name|INode
name|p
init|=
name|INodeSection
operator|.
name|INode
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|INodeSection
operator|.
name|INode
operator|.
name|Type
operator|.
name|FILE
condition|)
block|{
operator|++
name|totalFiles
expr_stmt|;
name|INodeSection
operator|.
name|INodeFile
name|f
init|=
name|p
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|totalBlocks
operator|+=
name|f
operator|.
name|getBlocksCount
argument_list|()
expr_stmt|;
name|long
name|fileSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockProto
name|b
range|:
name|f
operator|.
name|getBlocksList
argument_list|()
control|)
block|{
name|fileSize
operator|+=
name|b
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
name|maxFileSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|fileSize
argument_list|,
name|maxFileSize
argument_list|)
expr_stmt|;
name|totalSpace
operator|+=
name|fileSize
operator|*
name|f
operator|.
name|getReplication
argument_list|()
expr_stmt|;
name|int
name|bucket
init|=
name|fileSize
operator|>
name|maxSize
condition|?
name|distribution
operator|.
name|length
operator|-
literal|1
else|:
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|fileSize
operator|/
name|steps
argument_list|)
decl_stmt|;
comment|// Compare the bucket value with distribution's length again,
comment|// because sometimes the bucket value will be equal to
comment|// the length when maxSize can't be divided completely by step.
if|if
condition|(
name|bucket
operator|>=
name|distribution
operator|.
name|length
condition|)
block|{
name|bucket
operator|=
name|distribution
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
operator|++
name|distribution
index|[
name|bucket
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|INodeSection
operator|.
name|INode
operator|.
name|Type
operator|.
name|DIRECTORY
condition|)
block|{
operator|++
name|totalDirectories
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
operator|(
literal|1
operator|<<
literal|20
operator|)
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Processed "
operator|+
name|i
operator|+
literal|" inodes."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|output ()
specifier|private
name|void
name|output
parameter_list|()
block|{
comment|// write the distribution into the output file
name|out
operator|.
name|print
argument_list|(
literal|"Size\tNumFiles\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|distribution
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|distribution
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
operator|(
operator|(
name|long
operator|)
name|i
operator|*
name|steps
operator|)
operator|+
literal|"\t"
operator|+
name|distribution
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"totalFiles = "
operator|+
name|totalFiles
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"totalDirectories = "
operator|+
name|totalDirectories
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"totalBlocks = "
operator|+
name|totalBlocks
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"totalSpace = "
operator|+
name|totalSpace
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"maxFileSize = "
operator|+
name|maxFileSize
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

