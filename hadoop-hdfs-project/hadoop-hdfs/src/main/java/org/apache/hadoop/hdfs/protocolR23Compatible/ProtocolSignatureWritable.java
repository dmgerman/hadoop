begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ProtocolSignatureWritable
specifier|public
class|class
name|ProtocolSignatureWritable
implements|implements
name|Writable
block|{
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|ProtocolSignatureWritable
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ProtocolSignatureWritable
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|methods
specifier|private
name|int
index|[]
name|methods
init|=
literal|null
decl_stmt|;
comment|// an array of method hash codes
DECL|method|convert ( final ProtocolSignatureWritable ps)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
name|convert
parameter_list|(
specifier|final
name|ProtocolSignatureWritable
name|ps
parameter_list|)
block|{
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
argument_list|(
name|ps
operator|.
name|getVersion
argument_list|()
argument_list|,
name|ps
operator|.
name|getMethods
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert ( final org.apache.hadoop.ipc.ProtocolSignature ps)
specifier|public
specifier|static
name|ProtocolSignatureWritable
name|convert
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
name|ps
parameter_list|)
block|{
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|ProtocolSignatureWritable
argument_list|(
name|ps
operator|.
name|getVersion
argument_list|()
argument_list|,
name|ps
operator|.
name|getMethods
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * default constructor    */
DECL|method|ProtocolSignatureWritable ()
specifier|public
name|ProtocolSignatureWritable
parameter_list|()
block|{   }
comment|/**    * Constructor    *     * @param version server version    * @param methodHashcodes hash codes of the methods supported by server    */
DECL|method|ProtocolSignatureWritable (long version, int[] methodHashcodes)
specifier|public
name|ProtocolSignatureWritable
parameter_list|(
name|long
name|version
parameter_list|,
name|int
index|[]
name|methodHashcodes
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|methods
operator|=
name|methodHashcodes
expr_stmt|;
block|}
DECL|method|getVersion ()
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|getMethods ()
specifier|public
name|int
index|[]
name|getMethods
parameter_list|()
block|{
return|return
name|methods
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|boolean
name|hasMethods
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasMethods
condition|)
block|{
name|int
name|numMethods
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|methods
operator|=
operator|new
name|int
index|[
name|numMethods
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMethods
condition|;
name|i
operator|++
control|)
block|{
name|methods
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|methods
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|methods
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|method
range|:
name|methods
control|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

