begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|CorruptReplicasMap
operator|.
name|Reason
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * BlockToMarkCorrupt is used to build the "toCorrupt" list, which is a  * list of blocks that should be considered corrupt due to a block report.  */
end_comment

begin_class
DECL|class|BlockToMarkCorrupt
class|class
name|BlockToMarkCorrupt
block|{
comment|/** The corrupted block in a datanode. */
DECL|field|corrupted
specifier|private
specifier|final
name|BlockInfo
name|corrupted
decl_stmt|;
comment|/** The corresponding block stored in the BlockManager. */
DECL|field|stored
specifier|private
specifier|final
name|BlockInfo
name|stored
decl_stmt|;
comment|/** The reason to mark corrupt. */
DECL|field|reason
specifier|private
specifier|final
name|String
name|reason
decl_stmt|;
comment|/** The reason code to be stored */
DECL|field|reasonCode
specifier|private
specifier|final
name|CorruptReplicasMap
operator|.
name|Reason
name|reasonCode
decl_stmt|;
DECL|method|BlockToMarkCorrupt (BlockInfo corrupted, BlockInfo stored, String reason, CorruptReplicasMap.Reason reasonCode)
name|BlockToMarkCorrupt
parameter_list|(
name|BlockInfo
name|corrupted
parameter_list|,
name|BlockInfo
name|stored
parameter_list|,
name|String
name|reason
parameter_list|,
name|CorruptReplicasMap
operator|.
name|Reason
name|reasonCode
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|corrupted
argument_list|,
literal|"corrupted is null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|stored
argument_list|,
literal|"stored is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|corrupted
operator|=
name|corrupted
expr_stmt|;
name|this
operator|.
name|stored
operator|=
name|stored
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|this
operator|.
name|reasonCode
operator|=
name|reasonCode
expr_stmt|;
block|}
DECL|method|BlockToMarkCorrupt (BlockInfo stored, String reason, CorruptReplicasMap.Reason reasonCode)
name|BlockToMarkCorrupt
parameter_list|(
name|BlockInfo
name|stored
parameter_list|,
name|String
name|reason
parameter_list|,
name|CorruptReplicasMap
operator|.
name|Reason
name|reasonCode
parameter_list|)
block|{
name|this
argument_list|(
name|stored
argument_list|,
name|stored
argument_list|,
name|reason
argument_list|,
name|reasonCode
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockToMarkCorrupt (BlockInfo stored, long gs, String reason, CorruptReplicasMap.Reason reasonCode)
name|BlockToMarkCorrupt
parameter_list|(
name|BlockInfo
name|stored
parameter_list|,
name|long
name|gs
parameter_list|,
name|String
name|reason
parameter_list|,
name|CorruptReplicasMap
operator|.
name|Reason
name|reasonCode
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|BlockInfoContiguous
argument_list|(
operator|(
name|BlockInfoContiguous
operator|)
name|stored
argument_list|)
argument_list|,
name|stored
argument_list|,
name|reason
argument_list|,
name|reasonCode
argument_list|)
expr_stmt|;
comment|//the corrupted block in datanode has a different generation stamp
name|corrupted
operator|.
name|setGenerationStamp
argument_list|(
name|gs
argument_list|)
expr_stmt|;
block|}
DECL|method|isCorruptedDuringWrite ()
specifier|public
name|boolean
name|isCorruptedDuringWrite
parameter_list|()
block|{
return|return
name|stored
operator|.
name|getGenerationStamp
argument_list|()
operator|>
name|corrupted
operator|.
name|getGenerationStamp
argument_list|()
return|;
block|}
DECL|method|getCorrupted ()
specifier|public
name|BlockInfo
name|getCorrupted
parameter_list|()
block|{
return|return
name|corrupted
return|;
block|}
DECL|method|getStored ()
specifier|public
name|BlockInfo
name|getStored
parameter_list|()
block|{
return|return
name|stored
return|;
block|}
DECL|method|getReason ()
specifier|public
name|String
name|getReason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
DECL|method|getReasonCode ()
specifier|public
name|Reason
name|getReasonCode
parameter_list|()
block|{
return|return
name|reasonCode
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|corrupted
operator|+
literal|"("
operator|+
operator|(
name|corrupted
operator|==
name|stored
condition|?
literal|"same as stored"
else|:
literal|"stored="
operator|+
name|stored
operator|)
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

