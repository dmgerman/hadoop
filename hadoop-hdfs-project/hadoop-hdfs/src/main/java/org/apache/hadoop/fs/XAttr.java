begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * XAttr is the POSIX Extended Attribute model similar to that found in  * traditional Operating Systems.  Extended Attributes consist of one  * or more name/value pairs associated with a file or directory. Four  * namespaces are defined: user, trusted, security and system.  *   1) USER namespace attributes may be used by any user to store  *   arbitrary information. Access permissions in this namespace are  *   defined by a file directory's permission bits.  *<br>  *   2) TRUSTED namespace attributes are only visible and accessible to  *   privileged users (a file or directory's owner or the fs  *   admin). This namespace is available from both user space  *   (filesystem API) and fs kernel.  *<br>  *   3) SYSTEM namespace attributes are used by the fs kernel to store  *   system objects.  This namespace is only available in the fs  *   kernel. It is not visible to users.  *<br>  *   4) SECURITY namespace attributes are used by the fs kernel for  *   security features. It is not visible to users.  *<p/>  * @see<a href="http://en.wikipedia.org/wiki/Extended_file_attributes">  * http://en.wikipedia.org/wiki/Extended_file_attributes</a>  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|XAttr
specifier|public
class|class
name|XAttr
block|{
DECL|enum|NameSpace
specifier|public
specifier|static
enum|enum
name|NameSpace
block|{
DECL|enumConstant|USER
name|USER
block|,
DECL|enumConstant|TRUSTED
name|TRUSTED
block|,
DECL|enumConstant|SECURITY
name|SECURITY
block|,
DECL|enumConstant|SYSTEM
name|SYSTEM
block|;   }
DECL|field|ns
specifier|private
specifier|final
name|NameSpace
name|ns
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|byte
index|[]
name|value
decl_stmt|;
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|ns
specifier|private
name|NameSpace
name|ns
init|=
name|NameSpace
operator|.
name|USER
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|value
specifier|private
name|byte
index|[]
name|value
decl_stmt|;
DECL|method|setNameSpace (NameSpace ns)
specifier|public
name|Builder
name|setNameSpace
parameter_list|(
name|NameSpace
name|ns
parameter_list|)
block|{
name|this
operator|.
name|ns
operator|=
name|ns
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|Builder
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setValue (byte[] value)
specifier|public
name|Builder
name|setValue
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|XAttr
name|build
parameter_list|()
block|{
return|return
operator|new
name|XAttr
argument_list|(
name|ns
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
DECL|method|XAttr (NameSpace ns, String name, byte[] value)
specifier|private
name|XAttr
parameter_list|(
name|NameSpace
name|ns
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|this
operator|.
name|ns
operator|=
name|ns
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getNameSpace ()
specifier|public
name|NameSpace
name|getNameSpace
parameter_list|()
block|{
return|return
name|ns
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getValue ()
specifier|public
name|byte
index|[]
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|name
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|ns
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ns
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|XAttr
name|other
init|=
operator|(
name|XAttr
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ns
operator|!=
name|other
operator|.
name|ns
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|value
argument_list|,
name|other
operator|.
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"XAttr [ns="
operator|+
name|ns
operator|+
literal|", name="
operator|+
name|name
operator|+
literal|", value="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

