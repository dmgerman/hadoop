begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|DataNodeVolumeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This class detects and maintains DataNode disk outliers and their  * latencies for different ops (metadata, read, write).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DataNodeDiskMetrics
specifier|public
class|class
name|DataNodeDiskMetrics
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataNodeDiskMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dn
specifier|private
name|DataNode
name|dn
decl_stmt|;
DECL|field|MIN_OUTLIER_DETECTION_DISKS
specifier|private
specifier|final
name|long
name|MIN_OUTLIER_DETECTION_DISKS
init|=
literal|5
decl_stmt|;
DECL|field|SLOW_DISK_LOW_THRESHOLD_MS
specifier|private
specifier|final
name|long
name|SLOW_DISK_LOW_THRESHOLD_MS
init|=
literal|20
decl_stmt|;
DECL|field|detectionInterval
specifier|private
specifier|final
name|long
name|detectionInterval
decl_stmt|;
DECL|field|shouldRun
specifier|private
specifier|volatile
name|boolean
name|shouldRun
decl_stmt|;
DECL|field|slowDiskDetector
specifier|private
name|OutlierDetector
name|slowDiskDetector
decl_stmt|;
DECL|field|slowDiskDetectionDaemon
specifier|private
name|Daemon
name|slowDiskDetectionDaemon
decl_stmt|;
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|DiskOutlierDetectionOp
argument_list|,
name|Double
argument_list|>
argument_list|>
DECL|field|diskOutliersStats
name|diskOutliersStats
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|DataNodeDiskMetrics (DataNode dn, long diskOutlierDetectionIntervalMs)
specifier|public
name|DataNodeDiskMetrics
parameter_list|(
name|DataNode
name|dn
parameter_list|,
name|long
name|diskOutlierDetectionIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|dn
operator|=
name|dn
expr_stmt|;
name|this
operator|.
name|detectionInterval
operator|=
name|diskOutlierDetectionIntervalMs
expr_stmt|;
name|slowDiskDetector
operator|=
operator|new
name|OutlierDetector
argument_list|(
name|MIN_OUTLIER_DETECTION_DISKS
argument_list|,
name|SLOW_DISK_LOW_THRESHOLD_MS
argument_list|)
expr_stmt|;
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|startDiskOutlierDetectionThread
argument_list|()
expr_stmt|;
block|}
DECL|method|startDiskOutlierDetectionThread ()
specifier|private
name|void
name|startDiskOutlierDetectionThread
parameter_list|()
block|{
name|slowDiskDetectionDaemon
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|shouldRun
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metadataOpStats
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|readIoStats
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|writeIoStats
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|FsDatasetSpi
operator|.
name|FsVolumeReferences
name|fsVolumeReferences
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fsVolumeReferences
operator|=
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|FsVolumeSpi
argument_list|>
name|volumeIterator
init|=
name|fsVolumeReferences
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|volumeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FsVolumeSpi
name|volume
init|=
name|volumeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|DataNodeVolumeMetrics
name|metrics
init|=
name|volumeIterator
operator|.
name|next
argument_list|()
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|volume
operator|.
name|getBaseURI
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|metadataOpStats
operator|.
name|put
argument_list|(
name|volumeName
argument_list|,
name|metrics
operator|.
name|getMetadataOperationMean
argument_list|()
argument_list|)
expr_stmt|;
name|readIoStats
operator|.
name|put
argument_list|(
name|volumeName
argument_list|,
name|metrics
operator|.
name|getReadIoMean
argument_list|()
argument_list|)
expr_stmt|;
name|writeIoStats
operator|.
name|put
argument_list|(
name|volumeName
argument_list|,
name|metrics
operator|.
name|getWriteIoMean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fsVolumeReferences
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fsVolumeReferences
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in releasing FS Volume references"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|metadataOpStats
operator|.
name|isEmpty
argument_list|()
operator|&&
name|readIoStats
operator|.
name|isEmpty
argument_list|()
operator|&&
name|writeIoStats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No disk stats available for detecting outliers."
argument_list|)
expr_stmt|;
return|return;
block|}
name|detectAndUpdateDiskOutliers
argument_list|(
name|metadataOpStats
argument_list|,
name|readIoStats
argument_list|,
name|writeIoStats
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|detectionInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Disk Outlier Detection thread interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|slowDiskDetectionDaemon
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|detectAndUpdateDiskOutliers (Map<String, Double> metadataOpStats, Map<String, Double> readIoStats, Map<String, Double> writeIoStats)
specifier|private
name|void
name|detectAndUpdateDiskOutliers
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metadataOpStats
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|readIoStats
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|writeIoStats
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|diskOutliersSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
comment|// Get MetadataOp Outliers
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metadataOpOutliers
init|=
name|slowDiskDetector
operator|.
name|getOutliers
argument_list|(
name|metadataOpStats
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|metadataOpOutliers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|diskOutliersSet
operator|.
name|addAll
argument_list|(
name|metadataOpOutliers
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Get ReadIo Outliers
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|readIoOutliers
init|=
name|slowDiskDetector
operator|.
name|getOutliers
argument_list|(
name|readIoStats
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|readIoOutliers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|diskOutliersSet
operator|.
name|addAll
argument_list|(
name|readIoOutliers
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Get WriteIo Outliers
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|writeIoOutliers
init|=
name|slowDiskDetector
operator|.
name|getOutliers
argument_list|(
name|writeIoStats
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|readIoOutliers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|diskOutliersSet
operator|.
name|addAll
argument_list|(
name|writeIoOutliers
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|DiskOutlierDetectionOp
argument_list|,
name|Double
argument_list|>
argument_list|>
name|diskStats
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|disk
range|:
name|diskOutliersSet
control|)
block|{
name|Map
argument_list|<
name|DiskOutlierDetectionOp
argument_list|,
name|Double
argument_list|>
name|diskStat
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|diskStat
operator|.
name|put
argument_list|(
name|DiskOutlierDetectionOp
operator|.
name|METADATA
argument_list|,
name|metadataOpStats
operator|.
name|get
argument_list|(
name|disk
argument_list|)
argument_list|)
expr_stmt|;
name|diskStat
operator|.
name|put
argument_list|(
name|DiskOutlierDetectionOp
operator|.
name|READ
argument_list|,
name|readIoStats
operator|.
name|get
argument_list|(
name|disk
argument_list|)
argument_list|)
expr_stmt|;
name|diskStat
operator|.
name|put
argument_list|(
name|DiskOutlierDetectionOp
operator|.
name|WRITE
argument_list|,
name|writeIoStats
operator|.
name|get
argument_list|(
name|disk
argument_list|)
argument_list|)
expr_stmt|;
name|diskStats
operator|.
name|put
argument_list|(
name|disk
argument_list|,
name|diskStat
argument_list|)
expr_stmt|;
block|}
name|diskOutliersStats
operator|=
name|diskStats
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updated disk outliers."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Lists the types of operations on which disk latencies are measured.    */
DECL|enum|DiskOutlierDetectionOp
specifier|public
enum|enum
name|DiskOutlierDetectionOp
block|{
DECL|enumConstant|METADATA
name|METADATA
block|,
DECL|enumConstant|READ
name|READ
block|,
DECL|enumConstant|WRITE
name|WRITE
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
DECL|method|getDiskOutliersStats ()
name|Map
argument_list|<
name|DiskOutlierDetectionOp
argument_list|,
name|Double
argument_list|>
argument_list|>
name|getDiskOutliersStats
parameter_list|()
block|{
return|return
name|diskOutliersStats
return|;
block|}
DECL|method|shutdownAndWait ()
specifier|public
name|void
name|shutdownAndWait
parameter_list|()
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
name|slowDiskDetectionDaemon
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|slowDiskDetectionDaemon
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Disk Outlier Detection daemon did not shutdown"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Use only for testing.    */
annotation|@
name|VisibleForTesting
DECL|method|addSlowDiskForTesting (String slowDiskPath)
specifier|public
name|void
name|addSlowDiskForTesting
parameter_list|(
name|String
name|slowDiskPath
parameter_list|)
block|{
name|diskOutliersStats
operator|.
name|put
argument_list|(
name|slowDiskPath
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

