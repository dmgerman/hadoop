begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnregisteredNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|IncorrectVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BalancerBandwidthCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DisallowedDatanodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|FinalizeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|KeyUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NNHAStatusHeartbeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|UpgradeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|UpgradeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * One instance per block-pool/namespace on the DN, which handles the  * heartbeats to the active and standby NNs for that namespace.  * This class manages an instance of {@link BPServiceActor} for each NN,  * and delegates calls to both NNs.   * It also maintains the state about which of the NNs is considered active.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BPOfferService
class|class
name|BPOfferService
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|DataNode
operator|.
name|LOG
decl_stmt|;
comment|/**    * Information about the namespace that this service    * is registering with. This is assigned after    * the first phase of the handshake.    */
DECL|field|bpNSInfo
name|NamespaceInfo
name|bpNSInfo
decl_stmt|;
comment|/**    * The registration information for this block pool.    * This is assigned after the second phase of the    * handshake.    */
DECL|field|bpRegistration
name|DatanodeRegistration
name|bpRegistration
decl_stmt|;
DECL|field|upgradeManager
name|UpgradeManagerDatanode
name|upgradeManager
init|=
literal|null
decl_stmt|;
DECL|field|dn
specifier|private
specifier|final
name|DataNode
name|dn
decl_stmt|;
comment|/**    * A reference to the BPServiceActor associated with the currently    * ACTIVE NN. In the case that all NameNodes are in STANDBY mode,    * this can be null. If non-null, this must always refer to a member    * of the {@link #bpServices} list.    */
DECL|field|bpServiceToActive
specifier|private
name|BPServiceActor
name|bpServiceToActive
init|=
literal|null
decl_stmt|;
comment|/**    * The list of all actors for namenodes in this nameservice, regardless    * of their active or standby states.    */
DECL|field|bpServices
specifier|private
name|List
argument_list|<
name|BPServiceActor
argument_list|>
name|bpServices
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|BPServiceActor
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Each time we receive a heartbeat from a NN claiming to be ACTIVE,    * we record that NN's most recent transaction ID here, so long as it    * is more recent than the previous value. This allows us to detect    * split-brain scenarios in which a prior NN is still asserting its    * ACTIVE state but with a too-low transaction ID. See HDFS-2627    * for details.     */
DECL|field|lastActiveClaimTxId
specifier|private
name|long
name|lastActiveClaimTxId
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|BPOfferService (List<InetSocketAddress> nnAddrs, DataNode dn)
name|BPOfferService
parameter_list|(
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|nnAddrs
parameter_list|,
name|DataNode
name|dn
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|nnAddrs
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Must pass at least one NN."
argument_list|)
expr_stmt|;
name|this
operator|.
name|dn
operator|=
name|dn
expr_stmt|;
for|for
control|(
name|InetSocketAddress
name|addr
range|:
name|nnAddrs
control|)
block|{
name|this
operator|.
name|bpServices
operator|.
name|add
argument_list|(
operator|new
name|BPServiceActor
argument_list|(
name|addr
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|refreshNNList (ArrayList<InetSocketAddress> addrs)
name|void
name|refreshNNList
parameter_list|(
name|ArrayList
argument_list|<
name|InetSocketAddress
argument_list|>
name|addrs
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|InetSocketAddress
argument_list|>
name|oldAddrs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|oldAddrs
operator|.
name|add
argument_list|(
name|actor
operator|.
name|getNNSocketAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|InetSocketAddress
argument_list|>
name|newAddrs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|addrs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Sets
operator|.
name|symmetricDifference
argument_list|(
name|oldAddrs
argument_list|,
name|newAddrs
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Keep things simple for now -- we can implement this at a later date.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"HA does not currently support adding a new standby to a running DN. "
operator|+
literal|"Please do a rolling restart of DNs to reconfigure the list of NNs."
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return true if the service has registered with at least one NameNode.    */
DECL|method|isInitialized ()
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|bpRegistration
operator|!=
literal|null
return|;
block|}
comment|/**    * @return true if there is at least one actor thread running which is    * talking to a NameNode.    */
DECL|method|isAlive ()
name|boolean
name|isAlive
parameter_list|()
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
if|if
condition|(
name|actor
operator|.
name|isAlive
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getBlockPoolId ()
name|String
name|getBlockPoolId
parameter_list|()
block|{
if|if
condition|(
name|bpNSInfo
operator|!=
literal|null
condition|)
block|{
return|return
name|bpNSInfo
operator|.
name|getBlockPoolID
argument_list|()
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Block pool ID needed, but service not yet registered with NN"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"trace"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|getNamespaceInfo ()
name|NamespaceInfo
name|getNamespaceInfo
parameter_list|()
block|{
return|return
name|bpNSInfo
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|bpNSInfo
operator|==
literal|null
condition|)
block|{
comment|// If we haven't yet connected to our NN, we don't yet know our
comment|// own block pool ID.
comment|// If _none_ of the block pools have connected yet, we don't even
comment|// know the storage ID of this DN.
name|String
name|storageId
init|=
name|dn
operator|.
name|getStorageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageId
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|storageId
argument_list|)
condition|)
block|{
name|storageId
operator|=
literal|"unknown"
expr_stmt|;
block|}
return|return
literal|"Block pool<registering> (storage id "
operator|+
name|storageId
operator|+
literal|")"
return|;
block|}
else|else
block|{
return|return
literal|"Block pool "
operator|+
name|getBlockPoolId
argument_list|()
operator|+
literal|" (storage id "
operator|+
name|dn
operator|.
name|getStorageId
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
DECL|method|reportBadBlocks (ExtendedBlock block)
name|void
name|reportBadBlocks
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
block|{
name|checkBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|reportBadBlocks
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Informing the name node could take a long long time! Should we wait    * till namenode is informed before responding with success to the    * client? For now we don't.    */
DECL|method|notifyNamenodeReceivedBlock (ExtendedBlock block, String delHint)
name|void
name|notifyNamenodeReceivedBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|String
name|delHint
parameter_list|)
block|{
name|checkBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|checkDelHint
argument_list|(
name|delHint
argument_list|)
expr_stmt|;
name|ReceivedDeletedBlockInfo
name|bInfo
init|=
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
name|block
operator|.
name|getLocalBlock
argument_list|()
argument_list|,
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
argument_list|,
name|delHint
argument_list|)
decl_stmt|;
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|notifyNamenodeBlockImmediately
argument_list|(
name|bInfo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkBlock (ExtendedBlock block)
specifier|private
name|void
name|checkBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|block
operator|!=
literal|null
argument_list|,
literal|"block is null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|block
operator|.
name|getBlockPoolId
argument_list|()
operator|.
name|equals
argument_list|(
name|getBlockPoolId
argument_list|()
argument_list|)
argument_list|,
literal|"block belongs to BP %s instead of BP %s"
argument_list|,
name|block
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkDelHint (String delHint)
specifier|private
name|void
name|checkDelHint
parameter_list|(
name|String
name|delHint
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|delHint
operator|!=
literal|null
argument_list|,
literal|"delHint is null"
argument_list|)
expr_stmt|;
block|}
DECL|method|notifyNamenodeDeletedBlock (ExtendedBlock block)
name|void
name|notifyNamenodeDeletedBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
block|{
name|checkBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|ReceivedDeletedBlockInfo
name|bInfo
init|=
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
name|block
operator|.
name|getLocalBlock
argument_list|()
argument_list|,
name|BlockStatus
operator|.
name|DELETED_BLOCK
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|notifyNamenodeDeletedBlock
argument_list|(
name|bInfo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyNamenodeReceivingBlock (ExtendedBlock block)
name|void
name|notifyNamenodeReceivingBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
block|{
name|checkBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|ReceivedDeletedBlockInfo
name|bInfo
init|=
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
name|block
operator|.
name|getLocalBlock
argument_list|()
argument_list|,
name|BlockStatus
operator|.
name|RECEIVING_BLOCK
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|notifyNamenodeBlockImmediately
argument_list|(
name|bInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This must be called only by blockPoolManager
DECL|method|start ()
name|void
name|start
parameter_list|()
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|//This must be called only by blockPoolManager.
DECL|method|stop ()
name|void
name|stop
parameter_list|()
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|//This must be called only by blockPoolManager
DECL|method|join ()
name|void
name|join
parameter_list|()
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getUpgradeManager ()
specifier|synchronized
name|UpgradeManagerDatanode
name|getUpgradeManager
parameter_list|()
block|{
if|if
condition|(
name|upgradeManager
operator|==
literal|null
condition|)
name|upgradeManager
operator|=
operator|new
name|UpgradeManagerDatanode
argument_list|(
name|dn
argument_list|,
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|upgradeManager
return|;
block|}
DECL|method|processDistributedUpgradeCommand (UpgradeCommand comm)
name|void
name|processDistributedUpgradeCommand
parameter_list|(
name|UpgradeCommand
name|comm
parameter_list|)
throws|throws
name|IOException
block|{
name|UpgradeManagerDatanode
name|upgradeManager
init|=
name|getUpgradeManager
argument_list|()
decl_stmt|;
name|upgradeManager
operator|.
name|processUpgradeCommand
argument_list|(
name|comm
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start distributed upgrade if it should be initiated by the data-node.    */
DECL|method|startDistributedUpgradeIfNeeded ()
specifier|synchronized
name|void
name|startDistributedUpgradeIfNeeded
parameter_list|()
throws|throws
name|IOException
block|{
name|UpgradeManagerDatanode
name|um
init|=
name|getUpgradeManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|um
operator|.
name|getUpgradeState
argument_list|()
condition|)
return|return;
name|um
operator|.
name|setUpgradeState
argument_list|(
literal|false
argument_list|,
name|um
operator|.
name|getUpgradeVersion
argument_list|()
argument_list|)
expr_stmt|;
name|um
operator|.
name|startUpgrade
argument_list|()
expr_stmt|;
return|return;
block|}
DECL|method|getDataNode ()
name|DataNode
name|getDataNode
parameter_list|()
block|{
return|return
name|dn
return|;
block|}
comment|/**    * Called by the BPServiceActors when they handshake to a NN.    * If this is the first NN connection, this sets the namespace info    * for this BPOfferService. If it's a connection to a new NN, it    * verifies that this namespace matches (eg to prevent a misconfiguration    * where a StandbyNode from a different cluster is specified)    */
DECL|method|verifyAndSetNamespaceInfo (NamespaceInfo nsInfo)
specifier|synchronized
name|void
name|verifyAndSetNamespaceInfo
parameter_list|(
name|NamespaceInfo
name|nsInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|bpNSInfo
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|bpNSInfo
operator|=
name|nsInfo
expr_stmt|;
comment|// Now that we know the namespace ID, etc, we can pass this to the DN.
comment|// The DN can now initialize its local storage if we are the
comment|// first BP to handshake, etc.
name|dn
operator|.
name|initBlockPool
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|checkNSEquality
argument_list|(
name|bpNSInfo
operator|.
name|getBlockPoolID
argument_list|()
argument_list|,
name|nsInfo
operator|.
name|getBlockPoolID
argument_list|()
argument_list|,
literal|"Blockpool ID"
argument_list|)
expr_stmt|;
name|checkNSEquality
argument_list|(
name|bpNSInfo
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
name|nsInfo
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
literal|"Namespace ID"
argument_list|)
expr_stmt|;
name|checkNSEquality
argument_list|(
name|bpNSInfo
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|nsInfo
operator|.
name|getClusterID
argument_list|()
argument_list|,
literal|"Cluster ID"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * After one of the BPServiceActors registers successfully with the    * NN, it calls this function to verify that the NN it connected to    * is consistent with other NNs serving the block-pool.    */
DECL|method|registrationSucceeded (BPServiceActor bpServiceActor, DatanodeRegistration reg)
name|void
name|registrationSucceeded
parameter_list|(
name|BPServiceActor
name|bpServiceActor
parameter_list|,
name|DatanodeRegistration
name|reg
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bpRegistration
operator|!=
literal|null
condition|)
block|{
name|checkNSEquality
argument_list|(
name|bpRegistration
operator|.
name|storageInfo
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
name|reg
operator|.
name|storageInfo
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
literal|"namespace ID"
argument_list|)
expr_stmt|;
name|checkNSEquality
argument_list|(
name|bpRegistration
operator|.
name|storageInfo
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|reg
operator|.
name|storageInfo
operator|.
name|getClusterID
argument_list|()
argument_list|,
literal|"cluster ID"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bpRegistration
operator|=
name|reg
expr_stmt|;
block|}
name|dn
operator|.
name|bpRegistrationSucceeded
argument_list|(
name|bpRegistration
argument_list|,
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify equality of two namespace-related fields, throwing    * an exception if they are unequal.    */
DECL|method|checkNSEquality ( Object ourID, Object theirID, String idHelpText)
specifier|private
specifier|static
name|void
name|checkNSEquality
parameter_list|(
name|Object
name|ourID
parameter_list|,
name|Object
name|theirID
parameter_list|,
name|String
name|idHelpText
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|ourID
operator|.
name|equals
argument_list|(
name|theirID
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|idHelpText
operator|+
literal|" mismatch: "
operator|+
literal|"previously connected to "
operator|+
name|idHelpText
operator|+
literal|" "
operator|+
name|ourID
operator|+
literal|" but now connected to "
operator|+
name|idHelpText
operator|+
literal|" "
operator|+
name|theirID
argument_list|)
throw|;
block|}
block|}
DECL|method|createRegistration ()
name|DatanodeRegistration
name|createRegistration
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|bpNSInfo
operator|!=
literal|null
argument_list|,
literal|"getRegistration() can only be called after initial handshake"
argument_list|)
expr_stmt|;
return|return
name|dn
operator|.
name|createBPRegistration
argument_list|(
name|bpNSInfo
argument_list|)
return|;
block|}
comment|/**    * Called when an actor shuts down. If this is the last actor    * to shut down, shuts down the whole blockpool in the DN.    */
DECL|method|shutdownActor (BPServiceActor actor)
specifier|synchronized
name|void
name|shutdownActor
parameter_list|(
name|BPServiceActor
name|actor
parameter_list|)
block|{
if|if
condition|(
name|bpServiceToActive
operator|==
name|actor
condition|)
block|{
name|bpServiceToActive
operator|=
literal|null
expr_stmt|;
block|}
name|bpServices
operator|.
name|remove
argument_list|(
name|actor
argument_list|)
expr_stmt|;
comment|// TODO: synchronization should be a little better here
if|if
condition|(
name|bpServices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dn
operator|.
name|shutdownBlockPool
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|upgradeManager
operator|!=
literal|null
condition|)
name|upgradeManager
operator|.
name|shutdownUpgrade
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Deprecated
DECL|method|getNNSocketAddress ()
specifier|synchronized
name|InetSocketAddress
name|getNNSocketAddress
parameter_list|()
block|{
comment|// TODO(HA) this doesn't make sense anymore
return|return
name|bpServiceToActive
operator|.
name|getNNSocketAddress
argument_list|()
return|;
block|}
comment|/**    * Called by the DN to report an error to the NNs.    */
DECL|method|trySendErrorReport (int errCode, String errMsg)
name|void
name|trySendErrorReport
parameter_list|(
name|int
name|errCode
parameter_list|,
name|String
name|errMsg
parameter_list|)
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|trySendErrorReport
argument_list|(
name|errCode
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ask each of the actors to schedule a block report after    * the specified delay.    */
DECL|method|scheduleBlockReport (long delay)
name|void
name|scheduleBlockReport
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|scheduleBlockReport
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ask each of the actors to report a bad block hosted on another DN.    */
DECL|method|reportRemoteBadBlock (DatanodeInfo dnInfo, ExtendedBlock block)
name|void
name|reportRemoteBadBlock
parameter_list|(
name|DatanodeInfo
name|dnInfo
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
try|try
block|{
name|actor
operator|.
name|reportRemoteBadBlock
argument_list|(
name|dnInfo
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't report bad block "
operator|+
name|block
operator|+
literal|" to "
operator|+
name|actor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * TODO: this is still used in a few places where we need to sort out    * what to do in HA!    * @return a proxy to the active NN    */
annotation|@
name|Deprecated
DECL|method|getActiveNN ()
specifier|synchronized
name|DatanodeProtocolClientSideTranslatorPB
name|getActiveNN
parameter_list|()
block|{
if|if
condition|(
name|bpServiceToActive
operator|!=
literal|null
condition|)
block|{
return|return
name|bpServiceToActive
operator|.
name|bpNamenode
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBPServiceActors ()
specifier|synchronized
name|List
argument_list|<
name|BPServiceActor
argument_list|>
name|getBPServiceActors
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|bpServices
argument_list|)
return|;
block|}
comment|/**    * Update the BPOS's view of which NN is active, based on a heartbeat    * response from one of the actors.    *     * @param actor the actor which received the heartbeat    * @param nnHaState the HA-related heartbeat contents    */
DECL|method|updateActorStatesFromHeartbeat ( BPServiceActor actor, NNHAStatusHeartbeat nnHaState)
specifier|synchronized
name|void
name|updateActorStatesFromHeartbeat
parameter_list|(
name|BPServiceActor
name|actor
parameter_list|,
name|NNHAStatusHeartbeat
name|nnHaState
parameter_list|)
block|{
specifier|final
name|long
name|txid
init|=
name|nnHaState
operator|.
name|getTxId
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|nnClaimsActive
init|=
name|nnHaState
operator|.
name|getState
argument_list|()
operator|==
name|NNHAStatusHeartbeat
operator|.
name|State
operator|.
name|ACTIVE
decl_stmt|;
specifier|final
name|boolean
name|bposThinksActive
init|=
name|bpServiceToActive
operator|==
name|actor
decl_stmt|;
specifier|final
name|boolean
name|isMoreRecentClaim
init|=
name|txid
operator|>
name|lastActiveClaimTxId
decl_stmt|;
if|if
condition|(
name|nnClaimsActive
operator|&&
operator|!
name|bposThinksActive
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode "
operator|+
name|actor
operator|+
literal|" trying to claim ACTIVE state with "
operator|+
literal|"txid="
operator|+
name|txid
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isMoreRecentClaim
condition|)
block|{
comment|// Split-brain scenario - an NN is trying to claim active
comment|// state when a different NN has already claimed it with a higher
comment|// txid.
name|LOG
operator|.
name|warn
argument_list|(
literal|"NN "
operator|+
name|actor
operator|+
literal|" tried to claim ACTIVE state at txid="
operator|+
name|txid
operator|+
literal|" but there was already a more recent claim at txid="
operator|+
name|lastActiveClaimTxId
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
if|if
condition|(
name|bpServiceToActive
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Acknowledging ACTIVE Namenode "
operator|+
name|actor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode "
operator|+
name|actor
operator|+
literal|" taking over ACTIVE state from "
operator|+
name|bpServiceToActive
operator|+
literal|" at higher txid="
operator|+
name|txid
argument_list|)
expr_stmt|;
block|}
name|bpServiceToActive
operator|=
name|actor
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|nnClaimsActive
operator|&&
name|bposThinksActive
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Namenode "
operator|+
name|actor
operator|+
literal|" relinquishing ACTIVE state with "
operator|+
literal|"txid="
operator|+
name|nnHaState
operator|.
name|getTxId
argument_list|()
argument_list|)
expr_stmt|;
name|bpServiceToActive
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|bpServiceToActive
operator|==
name|actor
condition|)
block|{
assert|assert
name|txid
operator|>=
name|lastActiveClaimTxId
assert|;
name|lastActiveClaimTxId
operator|=
name|txid
expr_stmt|;
block|}
block|}
comment|/**    * @return true if the given NN address is one of the NNs for this    * block pool    */
DECL|method|containsNN (InetSocketAddress addr)
name|boolean
name|containsNN
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|)
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
if|if
condition|(
name|actor
operator|.
name|getNNSocketAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|addr
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|countNameNodes ()
name|int
name|countNameNodes
parameter_list|()
block|{
return|return
name|bpServices
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Run an immediate block report on this thread. Used by tests.    */
annotation|@
name|VisibleForTesting
DECL|method|triggerBlockReportForTests ()
name|void
name|triggerBlockReportForTests
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|triggerBlockReportForTests
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Run an immediate deletion report on this thread. Used by tests.    */
annotation|@
name|VisibleForTesting
DECL|method|triggerDeletionReportForTests ()
name|void
name|triggerDeletionReportForTests
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|triggerDeletionReportForTests
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Run an immediate heartbeat from all actors. Used by tests.    */
annotation|@
name|VisibleForTesting
DECL|method|triggerHeartbeatForTests ()
name|void
name|triggerHeartbeatForTests
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|BPServiceActor
name|actor
range|:
name|bpServices
control|)
block|{
name|actor
operator|.
name|triggerHeartbeatForTests
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|processCommandFromActor (DatanodeCommand cmd, BPServiceActor actor)
specifier|synchronized
name|boolean
name|processCommandFromActor
parameter_list|(
name|DatanodeCommand
name|cmd
parameter_list|,
name|BPServiceActor
name|actor
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|bpServices
operator|.
name|contains
argument_list|(
name|actor
argument_list|)
assert|;
if|if
condition|(
name|actor
operator|==
name|bpServiceToActive
condition|)
block|{
return|return
name|processCommandFromActive
argument_list|(
name|cmd
argument_list|,
name|actor
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|processCommandFromStandby
argument_list|(
name|cmd
argument_list|,
name|actor
argument_list|)
return|;
block|}
block|}
comment|/**    *     * @param cmd    * @return true if further processing may be required or false otherwise.     * @throws IOException    */
DECL|method|processCommandFromActive (DatanodeCommand cmd, BPServiceActor actor)
specifier|private
name|boolean
name|processCommandFromActive
parameter_list|(
name|DatanodeCommand
name|cmd
parameter_list|,
name|BPServiceActor
name|actor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
return|return
literal|true
return|;
specifier|final
name|BlockCommand
name|bcmd
init|=
name|cmd
operator|instanceof
name|BlockCommand
condition|?
operator|(
name|BlockCommand
operator|)
name|cmd
else|:
literal|null
decl_stmt|;
switch|switch
condition|(
name|cmd
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|DatanodeProtocol
operator|.
name|DNA_TRANSFER
case|:
comment|// Send a copy of a block to another datanode
name|dn
operator|.
name|transferBlocks
argument_list|(
name|bcmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|bcmd
operator|.
name|getBlocks
argument_list|()
argument_list|,
name|bcmd
operator|.
name|getTargets
argument_list|()
argument_list|)
expr_stmt|;
name|dn
operator|.
name|metrics
operator|.
name|incrBlocksReplicated
argument_list|(
name|bcmd
operator|.
name|getBlocks
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_INVALIDATE
case|:
comment|//
comment|// Some local block(s) are obsolete and can be
comment|// safely garbage-collected.
comment|//
name|Block
name|toDelete
index|[]
init|=
name|bcmd
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dn
operator|.
name|blockScanner
operator|!=
literal|null
condition|)
block|{
name|dn
operator|.
name|blockScanner
operator|.
name|deleteBlocks
argument_list|(
name|bcmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|toDelete
argument_list|)
expr_stmt|;
block|}
comment|// using global fsdataset
name|dn
operator|.
name|data
operator|.
name|invalidate
argument_list|(
name|bcmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|toDelete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|dn
operator|.
name|checkDiskError
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|dn
operator|.
name|metrics
operator|.
name|incrBlocksRemoved
argument_list|(
name|toDelete
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_SHUTDOWN
case|:
comment|// TODO: DNA_SHUTDOWN appears to be unused - the NN never sends this command
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Received unimplemented DNA_SHUTDOWN"
argument_list|)
throw|;
case|case
name|DatanodeProtocol
operator|.
name|DNA_REGISTER
case|:
comment|// namenode requested a registration - at start or if NN lost contact
name|LOG
operator|.
name|info
argument_list|(
literal|"DatanodeCommand action: DNA_REGISTER"
argument_list|)
expr_stmt|;
name|actor
operator|.
name|reRegister
argument_list|()
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_FINALIZE
case|:
name|String
name|bp
init|=
operator|(
operator|(
name|FinalizeCommand
operator|)
name|cmd
operator|)
operator|.
name|getBlockPoolId
argument_list|()
decl_stmt|;
assert|assert
name|getBlockPoolId
argument_list|()
operator|.
name|equals
argument_list|(
name|bp
argument_list|)
operator|:
literal|"BP "
operator|+
name|getBlockPoolId
argument_list|()
operator|+
literal|" received DNA_FINALIZE "
operator|+
literal|"for other block pool "
operator|+
name|bp
assert|;
name|dn
operator|.
name|finalizeUpgradeForPool
argument_list|(
name|bp
argument_list|)
expr_stmt|;
break|break;
case|case
name|UpgradeCommand
operator|.
name|UC_ACTION_START_UPGRADE
case|:
comment|// start distributed upgrade here
name|processDistributedUpgradeCommand
argument_list|(
operator|(
name|UpgradeCommand
operator|)
name|cmd
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_RECOVERBLOCK
case|:
name|dn
operator|.
name|recoverBlocks
argument_list|(
operator|(
operator|(
name|BlockRecoveryCommand
operator|)
name|cmd
operator|)
operator|.
name|getRecoveringBlocks
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_ACCESSKEYUPDATE
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"DatanodeCommand action: DNA_ACCESSKEYUPDATE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dn
operator|.
name|isBlockTokenEnabled
condition|)
block|{
name|dn
operator|.
name|blockPoolTokenSecretManager
operator|.
name|setKeys
argument_list|(
name|getBlockPoolId
argument_list|()
argument_list|,
operator|(
operator|(
name|KeyUpdateCommand
operator|)
name|cmd
operator|)
operator|.
name|getExportedKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_BALANCERBANDWIDTHUPDATE
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"DatanodeCommand action: DNA_BALANCERBANDWIDTHUPDATE"
argument_list|)
expr_stmt|;
name|long
name|bandwidth
init|=
operator|(
operator|(
name|BalancerBandwidthCommand
operator|)
name|cmd
operator|)
operator|.
name|getBalancerBandwidthValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|bandwidth
operator|>
literal|0
condition|)
block|{
name|DataXceiverServer
name|dxcs
init|=
operator|(
name|DataXceiverServer
operator|)
name|dn
operator|.
name|dataXceiverServer
operator|.
name|getRunnable
argument_list|()
decl_stmt|;
name|dxcs
operator|.
name|balanceThrottler
operator|.
name|setBandwidth
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown DatanodeCommand action: "
operator|+
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|processCommandFromStandby (DatanodeCommand cmd, BPServiceActor actor)
specifier|private
name|boolean
name|processCommandFromStandby
parameter_list|(
name|DatanodeCommand
name|cmd
parameter_list|,
name|BPServiceActor
name|actor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
return|return
literal|true
return|;
switch|switch
condition|(
name|cmd
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|DatanodeProtocol
operator|.
name|DNA_REGISTER
case|:
comment|// namenode requested a registration - at start or if NN lost contact
name|LOG
operator|.
name|info
argument_list|(
literal|"DatanodeCommand action: DNA_REGISTER"
argument_list|)
expr_stmt|;
name|actor
operator|.
name|reRegister
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DatanodeProtocol
operator|.
name|DNA_TRANSFER
case|:
case|case
name|DatanodeProtocol
operator|.
name|DNA_INVALIDATE
case|:
case|case
name|DatanodeProtocol
operator|.
name|DNA_SHUTDOWN
case|:
case|case
name|DatanodeProtocol
operator|.
name|DNA_RECOVERBLOCK
case|:
case|case
name|DatanodeProtocol
operator|.
name|DNA_ACCESSKEYUPDATE
case|:
case|case
name|DatanodeProtocol
operator|.
name|DNA_BALANCERBANDWIDTHUPDATE
case|:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got a command from standby NN - ignoring command:"
operator|+
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown DatanodeCommand action: "
operator|+
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Connect to the NN at the given address. This is separated out for ease    * of testing.    */
DECL|method|connectToNN (InetSocketAddress nnAddr)
name|DatanodeProtocolClientSideTranslatorPB
name|connectToNN
parameter_list|(
name|InetSocketAddress
name|nnAddr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DatanodeProtocolClientSideTranslatorPB
argument_list|(
name|nnAddr
argument_list|,
name|dn
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

