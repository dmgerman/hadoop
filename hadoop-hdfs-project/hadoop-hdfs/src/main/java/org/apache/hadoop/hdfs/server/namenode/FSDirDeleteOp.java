begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotEmptyDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|BlocksMapUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ChunkedArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
operator|.
name|CURRENT_STATE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|now
import|;
end_import

begin_class
DECL|class|FSDirDeleteOp
class|class
name|FSDirDeleteOp
block|{
comment|/**    * Delete the target directory and collect the blocks under it    *    * @param iip the INodesInPath instance containing all the INodes for the path    * @param collectedBlocks Blocks under the deleted directory    * @param removedINodes INodes that should be removed from inodeMap    * @return the number of files that have been removed    */
DECL|method|delete ( FSDirectory fsd, INodesInPath iip, BlocksMapUpdateInfo collectedBlocks, List<INode> removedINodes, long mtime)
specifier|static
name|long
name|delete
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|,
name|long
name|mtime
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* FSDirectory.delete: "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|filesRemoved
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|deleteAllowed
argument_list|(
name|iip
argument_list|,
name|iip
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|filesRemoved
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|snapshottableDirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|FSDirSnapshotOp
operator|.
name|checkSnapshot
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|snapshottableDirs
argument_list|)
expr_stmt|;
name|filesRemoved
operator|=
name|unprotectedDelete
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|,
name|mtime
argument_list|)
expr_stmt|;
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|removeSnapshottableDirs
argument_list|(
name|snapshottableDirs
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
return|return
name|filesRemoved
return|;
block|}
comment|/**    * Remove a file/directory from the namespace.    *<p>    * For large directories, deletion is incremental. The blocks under    * the directory are collected and deleted a small number at a time holding    * the {@link FSNamesystem} lock.    *<p>    * For small directory or file the deletion is done in one shot.    *    */
DECL|method|delete ( FSNamesystem fsn, String src, boolean recursive, boolean logRetryCache)
specifier|static
name|BlocksMapUpdateInfo
name|delete
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|String
name|src
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|FSPermissionChecker
name|pc
init|=
name|fsd
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|pathComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|pathComponents
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|recursive
operator|&&
name|fsd
operator|.
name|isNonEmptyDirectory
argument_list|(
name|iip
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PathIsNotEmptyDirectoryException
argument_list|(
name|src
operator|+
literal|" is non empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkPermission
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
literal|null
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|deleteInternal
argument_list|(
name|fsn
argument_list|,
name|src
argument_list|,
name|iip
argument_list|,
name|logRetryCache
argument_list|)
return|;
block|}
comment|/**    * Delete a path from the name space    * Update the count at each ancestor directory with quota    *<br>    * Note: This is to be used by    * {@link org.apache.hadoop.hdfs.server.namenode.FSEditLog} only.    *<br>    * @param src a string representation of a path to an inode    * @param mtime the time the inode is removed    */
DECL|method|deleteForEditLog (FSDirectory fsd, String src, long mtime)
specifier|static
name|void
name|deleteForEditLog
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|mtime
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|FSNamesystem
name|fsn
init|=
name|fsd
operator|.
name|getFSNamesystem
argument_list|()
decl_stmt|;
name|BlocksMapUpdateInfo
name|collectedBlocks
init|=
operator|new
name|BlocksMapUpdateInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|FSDirectory
operator|.
name|normalizePath
argument_list|(
name|src
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deleteAllowed
argument_list|(
name|iip
argument_list|,
name|src
argument_list|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|snapshottableDirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|FSDirSnapshotOp
operator|.
name|checkSnapshot
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|snapshottableDirs
argument_list|)
expr_stmt|;
name|long
name|filesRemoved
init|=
name|unprotectedDelete
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|,
name|mtime
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|removeSnapshottableDirs
argument_list|(
name|snapshottableDirs
argument_list|)
expr_stmt|;
if|if
condition|(
name|filesRemoved
operator|>=
literal|0
condition|)
block|{
name|fsn
operator|.
name|removeLeasesAndINodes
argument_list|(
name|src
argument_list|,
name|removedINodes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|removeBlocksAndUpdateSafemodeTotal
argument_list|(
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove a file/directory from the namespace.    *<p>    * For large directories, deletion is incremental. The blocks under    * the directory are collected and deleted a small number at a time holding    * the {@link org.apache.hadoop.hdfs.server.namenode.FSNamesystem} lock.    *<p>    * For small directory or file the deletion is done in one shot.    */
DECL|method|deleteInternal ( FSNamesystem fsn, String src, INodesInPath iip, boolean logRetryCache)
specifier|static
name|BlocksMapUpdateInfo
name|deleteInternal
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|String
name|src
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsn
operator|.
name|hasWriteLock
argument_list|()
assert|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* NameSystem.delete: "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|BlocksMapUpdateInfo
name|collectedBlocks
init|=
operator|new
name|BlocksMapUpdateInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
init|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|mtime
init|=
name|now
argument_list|()
decl_stmt|;
comment|// Unlink the target directory from directory tree
name|long
name|filesRemoved
init|=
name|delete
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|,
name|mtime
argument_list|)
decl_stmt|;
if|if
condition|(
name|filesRemoved
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logDelete
argument_list|(
name|src
argument_list|,
name|mtime
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|incrDeletedFileCount
argument_list|(
name|filesRemoved
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|removeLeasesAndINodes
argument_list|(
name|src
argument_list|,
name|removedINodes
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* Namesystem.delete: "
operator|+
name|src
operator|+
literal|" is removed"
argument_list|)
expr_stmt|;
block|}
return|return
name|collectedBlocks
return|;
block|}
DECL|method|incrDeletedFileCount (long count)
specifier|static
name|void
name|incrDeletedFileCount
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
operator|.
name|incrFilesDeleted
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteAllowed (final INodesInPath iip, final String src)
specifier|private
specifier|static
name|boolean
name|deleteAllowed
parameter_list|(
specifier|final
name|INodesInPath
name|iip
parameter_list|,
specifier|final
name|String
name|src
parameter_list|)
block|{
if|if
condition|(
name|iip
operator|.
name|length
argument_list|()
operator|<
literal|1
operator|||
name|iip
operator|.
name|getLastINode
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* FSDirectory.unprotectedDelete: failed to remove "
operator|+
name|src
operator|+
literal|" because it does not exist"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|iip
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// src is the root
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* FSDirectory.unprotectedDelete: failed to remove "
operator|+
name|src
operator|+
literal|" because the root is not allowed to be deleted"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Delete a path from the name space    * Update the count at each ancestor directory with quota    * @param iip the inodes resolved from the path    * @param collectedBlocks blocks collected from the deleted path    * @param removedINodes inodes that should be removed from inodeMap    * @param mtime the time the inode is removed    * @return the number of inodes deleted; 0 if no inodes are deleted.    */
DECL|method|unprotectedDelete ( FSDirectory fsd, INodesInPath iip, BlocksMapUpdateInfo collectedBlocks, List<INode> removedINodes, long mtime)
specifier|private
specifier|static
name|long
name|unprotectedDelete
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|,
name|long
name|mtime
parameter_list|)
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
comment|// check if target node exists
name|INode
name|targetNode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetNode
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// record modification
specifier|final
name|int
name|latestSnapshot
init|=
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
decl_stmt|;
name|targetNode
operator|.
name|recordModification
argument_list|(
name|latestSnapshot
argument_list|)
expr_stmt|;
comment|// Remove the node from the namespace
name|long
name|removed
init|=
name|fsd
operator|.
name|removeLastINode
argument_list|(
name|iip
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// set the parent's modification time
specifier|final
name|INodeDirectory
name|parent
init|=
name|targetNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|parent
operator|.
name|updateModificationTime
argument_list|(
name|mtime
argument_list|,
name|latestSnapshot
argument_list|)
expr_stmt|;
name|fsd
operator|.
name|updateCountForDelete
argument_list|(
name|targetNode
argument_list|,
name|iip
argument_list|)
expr_stmt|;
if|if
condition|(
name|removed
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// collect block and update quota
if|if
condition|(
operator|!
name|targetNode
operator|.
name|isInLatestSnapshot
argument_list|(
name|latestSnapshot
argument_list|)
condition|)
block|{
name|targetNode
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Quota
operator|.
name|Counts
name|counts
init|=
name|targetNode
operator|.
name|cleanSubtree
argument_list|(
name|CURRENT_STATE_ID
argument_list|,
name|latestSnapshot
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
decl_stmt|;
name|removed
operator|=
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|fsd
operator|.
name|updateCountNoQuotaCheck
argument_list|(
name|iip
argument_list|,
name|iip
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
operator|-
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
argument_list|,
operator|-
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* FSDirectory.unprotectedDelete: "
operator|+
name|iip
operator|.
name|getPath
argument_list|()
operator|+
literal|" is removed"
argument_list|)
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
block|}
end_class

end_unit

