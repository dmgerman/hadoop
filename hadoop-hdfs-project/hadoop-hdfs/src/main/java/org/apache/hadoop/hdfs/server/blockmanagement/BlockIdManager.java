begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|GenerationStamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * BlockIdManager allocates the generation stamps and the block ID. The  * {@see FSNamesystem} is responsible for persisting the allocations in the  * {@see EditLog}.  */
end_comment

begin_class
DECL|class|BlockIdManager
specifier|public
class|class
name|BlockIdManager
block|{
comment|/**    * The global generation stamp for legacy blocks with randomly    * generated block IDs.    */
DECL|field|generationStampV1
specifier|private
specifier|final
name|GenerationStamp
name|generationStampV1
init|=
operator|new
name|GenerationStamp
argument_list|()
decl_stmt|;
comment|/**    * The global generation stamp for this file system.    */
DECL|field|generationStampV2
specifier|private
specifier|final
name|GenerationStamp
name|generationStampV2
init|=
operator|new
name|GenerationStamp
argument_list|()
decl_stmt|;
comment|/**    * The value of the generation stamp when the first switch to sequential    * block IDs was made. Blocks with generation stamps below this value    * have randomly allocated block IDs. Blocks with generation stamps above    * this value had sequentially allocated block IDs. Read from the fsImage    * (or initialized as an offset from the V1 (legacy) generation stamp on    * upgrade).    */
DECL|field|generationStampV1Limit
specifier|private
name|long
name|generationStampV1Limit
decl_stmt|;
comment|/**    * The global block ID space for this file system.    */
DECL|field|blockIdGenerator
specifier|private
specifier|final
name|SequentialBlockIdGenerator
name|blockIdGenerator
decl_stmt|;
DECL|method|BlockIdManager (BlockManager blockManager)
specifier|public
name|BlockIdManager
parameter_list|(
name|BlockManager
name|blockManager
parameter_list|)
block|{
name|this
operator|.
name|generationStampV1Limit
operator|=
name|GenerationStamp
operator|.
name|GRANDFATHER_GENERATION_STAMP
expr_stmt|;
name|this
operator|.
name|blockIdGenerator
operator|=
operator|new
name|SequentialBlockIdGenerator
argument_list|(
name|blockManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Upgrades the generation stamp for the filesystem    * by reserving a sufficient range for all existing blocks.    * Should be invoked only during the first upgrade to    * sequential block IDs.    */
DECL|method|upgradeGenerationStampToV2 ()
specifier|public
name|long
name|upgradeGenerationStampToV2
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|generationStampV2
operator|.
name|getCurrentValue
argument_list|()
operator|==
name|GenerationStamp
operator|.
name|LAST_RESERVED_STAMP
argument_list|)
expr_stmt|;
name|generationStampV2
operator|.
name|skipTo
argument_list|(
name|generationStampV1
operator|.
name|getCurrentValue
argument_list|()
operator|+
name|HdfsConstants
operator|.
name|RESERVED_GENERATION_STAMPS_V1
argument_list|)
expr_stmt|;
name|generationStampV1Limit
operator|=
name|generationStampV2
operator|.
name|getCurrentValue
argument_list|()
expr_stmt|;
return|return
name|generationStampV2
operator|.
name|getCurrentValue
argument_list|()
return|;
block|}
comment|/**    * Sets the generation stamp that delineates random and sequentially    * allocated block IDs.    *    * @param stamp set generation stamp limit to this value    */
DECL|method|setGenerationStampV1Limit (long stamp)
specifier|public
name|void
name|setGenerationStampV1Limit
parameter_list|(
name|long
name|stamp
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|generationStampV1Limit
operator|==
name|GenerationStamp
operator|.
name|GRANDFATHER_GENERATION_STAMP
argument_list|)
expr_stmt|;
name|generationStampV1Limit
operator|=
name|stamp
expr_stmt|;
block|}
comment|/**    * Gets the value of the generation stamp that delineates sequential    * and random block IDs.    */
DECL|method|getGenerationStampAtblockIdSwitch ()
specifier|public
name|long
name|getGenerationStampAtblockIdSwitch
parameter_list|()
block|{
return|return
name|generationStampV1Limit
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBlockIdGenerator ()
name|SequentialBlockIdGenerator
name|getBlockIdGenerator
parameter_list|()
block|{
return|return
name|blockIdGenerator
return|;
block|}
comment|/**    * Sets the maximum allocated block ID for this filesystem. This is    * the basis for allocating new block IDs.    */
DECL|method|setLastAllocatedBlockId (long blockId)
specifier|public
name|void
name|setLastAllocatedBlockId
parameter_list|(
name|long
name|blockId
parameter_list|)
block|{
name|blockIdGenerator
operator|.
name|skipTo
argument_list|(
name|blockId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the maximum sequentially allocated block ID for this filesystem    */
DECL|method|getLastAllocatedBlockId ()
specifier|public
name|long
name|getLastAllocatedBlockId
parameter_list|()
block|{
return|return
name|blockIdGenerator
operator|.
name|getCurrentValue
argument_list|()
return|;
block|}
comment|/**    * Sets the current generation stamp for legacy blocks    */
DECL|method|setGenerationStampV1 (long stamp)
specifier|public
name|void
name|setGenerationStampV1
parameter_list|(
name|long
name|stamp
parameter_list|)
block|{
name|generationStampV1
operator|.
name|setCurrentValue
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the current generation stamp for legacy blocks    */
DECL|method|getGenerationStampV1 ()
specifier|public
name|long
name|getGenerationStampV1
parameter_list|()
block|{
return|return
name|generationStampV1
operator|.
name|getCurrentValue
argument_list|()
return|;
block|}
comment|/**    * Gets the current generation stamp for this filesystem    */
DECL|method|setGenerationStampV2 (long stamp)
specifier|public
name|void
name|setGenerationStampV2
parameter_list|(
name|long
name|stamp
parameter_list|)
block|{
name|generationStampV2
operator|.
name|setCurrentValue
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
DECL|method|getGenerationStampV2 ()
specifier|public
name|long
name|getGenerationStampV2
parameter_list|()
block|{
return|return
name|generationStampV2
operator|.
name|getCurrentValue
argument_list|()
return|;
block|}
comment|/**    * Increments, logs and then returns the stamp    */
DECL|method|nextGenerationStamp (boolean legacyBlock)
specifier|public
name|long
name|nextGenerationStamp
parameter_list|(
name|boolean
name|legacyBlock
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|legacyBlock
condition|?
name|getNextGenerationStampV1
argument_list|()
else|:
name|getNextGenerationStampV2
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNextGenerationStampV1 ()
name|long
name|getNextGenerationStampV1
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|genStampV1
init|=
name|generationStampV1
operator|.
name|nextValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|genStampV1
operator|>=
name|generationStampV1Limit
condition|)
block|{
comment|// We ran out of generation stamps for legacy blocks. In practice, it
comment|// is extremely unlikely as we reserved 1T v1 generation stamps. The
comment|// result is that we can no longer append to the legacy blocks that
comment|// were created before the upgrade to sequential block IDs.
throw|throw
operator|new
name|OutOfV1GenerationStampsException
argument_list|()
throw|;
block|}
return|return
name|genStampV1
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNextGenerationStampV2 ()
name|long
name|getNextGenerationStampV2
parameter_list|()
block|{
return|return
name|generationStampV2
operator|.
name|nextValue
argument_list|()
return|;
block|}
DECL|method|getGenerationStampV1Limit ()
specifier|public
name|long
name|getGenerationStampV1Limit
parameter_list|()
block|{
return|return
name|generationStampV1Limit
return|;
block|}
comment|/**    * Determine whether the block ID was randomly generated (legacy) or    * sequentially generated. The generation stamp value is used to    * make the distinction.    *    * @return true if the block ID was randomly generated, false otherwise.    */
DECL|method|isLegacyBlock (Block block)
specifier|public
name|boolean
name|isLegacyBlock
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
return|return
name|block
operator|.
name|getGenerationStamp
argument_list|()
operator|<
name|getGenerationStampV1Limit
argument_list|()
return|;
block|}
comment|/**    * Increments, logs and then returns the block ID    */
DECL|method|nextBlockId ()
specifier|public
name|long
name|nextBlockId
parameter_list|()
block|{
return|return
name|blockIdGenerator
operator|.
name|nextValue
argument_list|()
return|;
block|}
DECL|method|isGenStampInFuture (Block block)
specifier|public
name|boolean
name|isGenStampInFuture
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
if|if
condition|(
name|isLegacyBlock
argument_list|(
name|block
argument_list|)
condition|)
block|{
return|return
name|block
operator|.
name|getGenerationStamp
argument_list|()
operator|>
name|getGenerationStampV1
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|block
operator|.
name|getGenerationStamp
argument_list|()
operator|>
name|getGenerationStampV2
argument_list|()
return|;
block|}
block|}
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|generationStampV1
operator|.
name|setCurrentValue
argument_list|(
name|GenerationStamp
operator|.
name|LAST_RESERVED_STAMP
argument_list|)
expr_stmt|;
name|generationStampV2
operator|.
name|setCurrentValue
argument_list|(
name|GenerationStamp
operator|.
name|LAST_RESERVED_STAMP
argument_list|)
expr_stmt|;
name|getBlockIdGenerator
argument_list|()
operator|.
name|setCurrentValue
argument_list|(
name|SequentialBlockIdGenerator
operator|.
name|LAST_RESERVED_BLOCK_ID
argument_list|)
expr_stmt|;
name|generationStampV1Limit
operator|=
name|GenerationStamp
operator|.
name|GRANDFATHER_GENERATION_STAMP
expr_stmt|;
block|}
block|}
end_class

end_unit

