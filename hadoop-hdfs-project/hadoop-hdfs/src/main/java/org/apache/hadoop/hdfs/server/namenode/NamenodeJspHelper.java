begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
operator|.
name|percent2String
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|JournalSet
operator|.
name|JournalAndStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgressView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StepType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServletUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|znerd
operator|.
name|xmlenc
operator|.
name|XMLOutputter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
DECL|class|NamenodeJspHelper
class|class
name|NamenodeJspHelper
block|{
DECL|method|fraction2String (double value)
specifier|static
name|String
name|fraction2String
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f"
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|fraction2String (long numerator, long denominator)
specifier|static
name|String
name|fraction2String
parameter_list|(
name|long
name|numerator
parameter_list|,
name|long
name|denominator
parameter_list|)
block|{
return|return
name|fraction2String
argument_list|(
name|numerator
operator|/
operator|(
name|double
operator|)
name|denominator
argument_list|)
return|;
block|}
DECL|method|getSafeModeText (FSNamesystem fsn)
specifier|static
name|String
name|getSafeModeText
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|)
block|{
if|if
condition|(
name|fsn
operator|==
literal|null
operator|||
operator|!
name|fsn
operator|.
name|isInSafeMode
argument_list|()
condition|)
return|return
literal|""
return|;
return|return
literal|"Safe mode is ON.<em>"
operator|+
name|fsn
operator|.
name|getSafeModeTip
argument_list|()
operator|+
literal|"</em><br>"
return|;
block|}
comment|/**    * returns security mode of the cluster (namenode)    * @return "on" if security is on, and "off" otherwise    */
DECL|method|getSecurityModeText ()
specifier|static
name|String
name|getSecurityModeText
parameter_list|()
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
return|return
literal|"<div class=\"security\">Security is<em>ON</em></div>"
return|;
block|}
else|else
block|{
return|return
literal|"<div class=\"security\">Security is<em>OFF</em></div>"
return|;
block|}
block|}
DECL|method|getRollingUpgradeText (FSNamesystem fsn)
specifier|static
name|String
name|getRollingUpgradeText
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|)
block|{
if|if
condition|(
name|fsn
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|DatanodeManager
name|dm
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|list
init|=
name|dm
operator|.
name|getDatanodesSoftwareVersions
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|StringBuffer
name|status
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"Rolling upgrades in progress. "
operator|+
literal|"There are "
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|" versions of datanodes currently live: "
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|ver
range|:
name|list
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|status
operator|.
name|append
argument_list|(
name|ver
operator|.
name|getKey
argument_list|()
operator|+
literal|"("
operator|+
name|ver
operator|.
name|getValue
argument_list|()
operator|+
literal|"), "
argument_list|)
expr_stmt|;
block|}
return|return
name|status
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|status
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|getInodeLimitText (FSNamesystem fsn)
specifier|static
name|String
name|getInodeLimitText
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|)
block|{
if|if
condition|(
name|fsn
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|long
name|inodes
init|=
name|fsn
operator|.
name|dir
operator|.
name|totalInodes
argument_list|()
decl_stmt|;
name|long
name|blocks
init|=
name|fsn
operator|.
name|getBlocksTotal
argument_list|()
decl_stmt|;
name|long
name|maxobjects
init|=
name|fsn
operator|.
name|getMaxObjects
argument_list|()
decl_stmt|;
name|MemoryMXBean
name|mem
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
name|MemoryUsage
name|heap
init|=
name|mem
operator|.
name|getHeapMemoryUsage
argument_list|()
decl_stmt|;
name|long
name|totalMemory
init|=
name|heap
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|long
name|maxMemory
init|=
name|heap
operator|.
name|getMax
argument_list|()
decl_stmt|;
name|long
name|commitedMemory
init|=
name|heap
operator|.
name|getCommitted
argument_list|()
decl_stmt|;
name|MemoryUsage
name|nonHeap
init|=
name|mem
operator|.
name|getNonHeapMemoryUsage
argument_list|()
decl_stmt|;
name|long
name|totalNonHeap
init|=
name|nonHeap
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|long
name|maxNonHeap
init|=
name|nonHeap
operator|.
name|getMax
argument_list|()
decl_stmt|;
name|long
name|commitedNonHeap
init|=
name|nonHeap
operator|.
name|getCommitted
argument_list|()
decl_stmt|;
name|long
name|used
init|=
operator|(
name|totalMemory
operator|*
literal|100
operator|)
operator|/
name|commitedMemory
decl_stmt|;
name|long
name|usedNonHeap
init|=
operator|(
name|totalNonHeap
operator|*
literal|100
operator|)
operator|/
name|commitedNonHeap
decl_stmt|;
name|String
name|str
init|=
literal|"<div>"
operator|+
name|inodes
operator|+
literal|" files and directories, "
operator|+
name|blocks
operator|+
literal|" blocks = "
operator|+
operator|(
name|inodes
operator|+
name|blocks
operator|)
operator|+
literal|" total filesystem objects"
decl_stmt|;
if|if
condition|(
name|maxobjects
operator|!=
literal|0
condition|)
block|{
name|long
name|pct
init|=
operator|(
operator|(
name|inodes
operator|+
name|blocks
operator|)
operator|*
literal|100
operator|)
operator|/
name|maxobjects
decl_stmt|;
name|str
operator|+=
literal|" / "
operator|+
name|maxobjects
operator|+
literal|" ("
operator|+
name|pct
operator|+
literal|"%)"
expr_stmt|;
block|}
name|str
operator|+=
literal|".</div>"
expr_stmt|;
name|str
operator|+=
literal|"<div>Heap Memory used "
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|totalMemory
argument_list|)
operator|+
literal|" is "
operator|+
literal|" "
operator|+
name|used
operator|+
literal|"% of Commited Heap Memory "
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|commitedMemory
argument_list|)
operator|+
literal|". Max Heap Memory is "
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|maxMemory
argument_list|)
operator|+
literal|".</div>"
expr_stmt|;
name|str
operator|+=
literal|"<div>Non Heap Memory used "
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|totalNonHeap
argument_list|)
operator|+
literal|" is"
operator|+
literal|" "
operator|+
name|usedNonHeap
operator|+
literal|"% of "
operator|+
literal|" Commited Non Heap Memory "
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|commitedNonHeap
argument_list|)
operator|+
literal|". Max Non Heap Memory is "
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|maxNonHeap
argument_list|)
operator|+
literal|".</div>"
expr_stmt|;
return|return
name|str
return|;
block|}
comment|/** Return a table containing version information. */
DECL|method|getVersionTable (FSNamesystem fsn)
specifier|static
name|String
name|getVersionTable
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<div class='dfstable'><table>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n<tr><td class='col1'>Started:</td><td>"
operator|+
name|fsn
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</td></tr>\n"
operator|+
literal|"\n<tr><td class='col1'>Version:</td><td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|+
literal|", "
operator|+
name|VersionInfo
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</td></tr>\n"
operator|+
literal|"\n<tr><td class='col1'>Compiled:</td><td>"
operator|+
name|VersionInfo
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" by "
operator|+
name|VersionInfo
operator|.
name|getUser
argument_list|()
operator|+
literal|" from "
operator|+
name|VersionInfo
operator|.
name|getBranch
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsn
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"</td></tr>\n<tr><td class='col1'>Cluster ID:</td><td>"
operator|+
name|fsn
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</td></tr>\n<tr><td class='col1'>Block Pool ID:</td><td>"
operator|+
name|fsn
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</td></tr>\n</table></div>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Generate warning text if there are corrupt files.    * @return a warning if files are corrupt, otherwise return an empty string.    */
DECL|method|getCorruptFilesWarning (FSNamesystem fsn)
specifier|static
name|String
name|getCorruptFilesWarning
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|)
block|{
if|if
condition|(
name|fsn
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|long
name|missingBlocks
init|=
name|fsn
operator|.
name|getMissingBlocksCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|missingBlocks
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Warning class is typically displayed in RED.
name|result
operator|.
name|append
argument_list|(
literal|"<div>"
argument_list|)
expr_stmt|;
comment|// opening tag of outer<div>.
name|result
operator|.
name|append
argument_list|(
literal|"<a class=\"warning\" href=\"/corrupt_files.jsp\" title=\"List corrupt files\">\n"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"<b>WARNING : There are "
operator|+
name|missingBlocks
operator|+
literal|" missing blocks. Please check the logs or run fsck in order to identify the missing blocks.</b>"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"</a>"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"<div class=\"small\">See the Hadoop FAQ for common causes and potential solutions.</div>"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"</div>\n"
argument_list|)
expr_stmt|;
comment|// closing tag of outer<div>.
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|generateSnapshotReport (JspWriter out, FSNamesystem fsn)
specifier|static
name|void
name|generateSnapshotReport
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|FSNamesystem
name|fsn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fsn
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<div id=\"snapshotstats\"><div class=\"dfstable\">"
operator|+
literal|"<table class=\"storage\" title=\"Snapshot Summary\">\n"
operator|+
literal|"<thead><tr><td><b>Snapshottable directories</b></td>"
operator|+
literal|"<td><b>Snapshotted directories</b></td></tr></thead>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<td>%d</td><td>%d</td>"
argument_list|,
name|fsn
operator|.
name|getNumSnapshottableDirs
argument_list|()
argument_list|,
name|fsn
operator|.
name|getNumSnapshots
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</table></div></div>"
argument_list|)
expr_stmt|;
block|}
DECL|class|HealthJsp
specifier|static
class|class
name|HealthJsp
block|{
DECL|field|rowNum
specifier|private
name|int
name|rowNum
init|=
literal|0
decl_stmt|;
DECL|field|colNum
specifier|private
name|int
name|colNum
init|=
literal|0
decl_stmt|;
DECL|field|sorterField
specifier|private
name|String
name|sorterField
init|=
literal|null
decl_stmt|;
DECL|field|sorterOrder
specifier|private
name|String
name|sorterOrder
init|=
literal|null
decl_stmt|;
DECL|method|rowTxt ()
specifier|private
name|String
name|rowTxt
parameter_list|()
block|{
name|colNum
operator|=
literal|0
expr_stmt|;
return|return
literal|"<tr class=\""
operator|+
operator|(
operator|(
operator|(
name|rowNum
operator|++
operator|)
operator|%
literal|2
operator|==
literal|0
operator|)
condition|?
literal|"rowNormal"
else|:
literal|"rowAlt"
operator|)
operator|+
literal|"\"> "
return|;
block|}
DECL|method|colTxt ()
specifier|private
name|String
name|colTxt
parameter_list|()
block|{
return|return
literal|"<td id=\"col"
operator|+
operator|++
name|colNum
operator|+
literal|"\"> "
return|;
block|}
DECL|method|colTxt (String title)
specifier|private
name|String
name|colTxt
parameter_list|(
name|String
name|title
parameter_list|)
block|{
return|return
literal|"<td id=\"col"
operator|+
operator|++
name|colNum
operator|+
literal|"\" title=\""
operator|+
name|title
operator|+
literal|"\"> "
return|;
block|}
DECL|method|counterReset ()
specifier|private
name|void
name|counterReset
parameter_list|()
block|{
name|colNum
operator|=
literal|0
expr_stmt|;
name|rowNum
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|generateConfReport (JspWriter out, NameNode nn, HttpServletRequest request)
name|void
name|generateConfReport
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|NameNode
name|nn
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|FSNamesystem
name|fsn
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fsn
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|FSImage
name|fsImage
init|=
name|fsn
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Storage
operator|.
name|StorageDirectory
argument_list|>
name|removedStorageDirs
init|=
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getRemovedStorageDirs
argument_list|()
decl_stmt|;
comment|// FS Image storage configuration
name|out
operator|.
name|print
argument_list|(
literal|"<h3> "
operator|+
name|nn
operator|.
name|getRole
argument_list|()
operator|+
literal|" Storage:</h3>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<div class=\"dfstable\"><table class=\"storage\" title=\"NameNode Storage\">\n"
operator|+
literal|"<thead><tr><td><b>Storage Directory</b></td><td><b>Type</b></td><td><b>State</b></td></tr></thead>"
argument_list|)
expr_stmt|;
name|StorageDirectory
name|st
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|st
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|dir
init|=
literal|""
operator|+
name|st
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|String
name|type
init|=
literal|""
operator|+
name|st
operator|.
name|getStorageDirType
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<tr><td>"
operator|+
name|dir
operator|+
literal|"</td><td>"
operator|+
name|type
operator|+
literal|"</td><td>Active</td></tr>"
argument_list|)
expr_stmt|;
block|}
name|long
name|storageDirsSize
init|=
name|removedStorageDirs
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|storageDirsSize
condition|;
name|i
operator|++
control|)
block|{
name|st
operator|=
name|removedStorageDirs
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|String
name|dir
init|=
literal|""
operator|+
name|st
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|String
name|type
init|=
literal|""
operator|+
name|st
operator|.
name|getStorageDirType
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<tr><td>"
operator|+
name|dir
operator|+
literal|"</td><td>"
operator|+
name|type
operator|+
literal|"</td><td><span class=\"failed\">Failed</span></td></tr>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</table></div>\n"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Generate an HTML report containing the current status of the HDFS      * journals.      */
DECL|method|generateJournalReport (JspWriter out, NameNode nn, HttpServletRequest request)
name|void
name|generateJournalReport
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|NameNode
name|nn
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|FSEditLog
name|log
init|=
name|nn
operator|.
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|log
operator|!=
literal|null
argument_list|,
literal|"no edit log set in %s"
argument_list|,
name|nn
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<h3> "
operator|+
name|nn
operator|.
name|getRole
argument_list|()
operator|+
literal|" Journal Status:</h3>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<b>Current transaction ID:</b> "
operator|+
name|nn
operator|.
name|getFSImage
argument_list|()
operator|.
name|getLastAppliedOrWrittenTxId
argument_list|()
operator|+
literal|"<br/>"
argument_list|)
expr_stmt|;
name|boolean
name|openForWrite
init|=
name|log
operator|.
name|isOpenForWrite
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<div class=\"dfstable\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<table class=\"storage\" title=\"NameNode Journals\">\n"
operator|+
literal|"<thead><tr><td><b>Journal Manager</b></td><td><b>State</b></td></tr></thead>"
argument_list|)
expr_stmt|;
for|for
control|(
name|JournalAndStream
name|jas
range|:
name|log
operator|.
name|getJournals
argument_list|()
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<td>"
argument_list|)
expr_stmt|;
comment|/**          * Insert a line break every 3 journal nodes to avoid a very wide line.          */
name|JournalManager
name|manager
init|=
name|jas
operator|.
name|getManager
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|manager
condition|)
block|{
name|String
index|[]
name|managers
init|=
name|manager
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|managers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|managers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|managers
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<br/>"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jas
operator|.
name|isRequired
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|" [required]"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</td><td>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|jas
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<span class=\"failed\">Failed</span>"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|openForWrite
condition|)
block|{
name|EditLogOutputStream
name|elos
init|=
name|jas
operator|.
name|getCurrentStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|elos
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|elos
operator|.
name|generateHtmlReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"not currently writing"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"open for read"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</table></div>"
argument_list|)
expr_stmt|;
block|}
DECL|method|generateHealthReport (JspWriter out, NameNode nn, HttpServletRequest request)
name|void
name|generateHealthReport
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|NameNode
name|nn
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|FSNamesystem
name|fsn
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|fsn
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|DatanodeManager
name|dm
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|dead
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|dm
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
name|dead
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|liveDecommissioned
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|d
range|:
name|live
control|)
block|{
name|liveDecommissioned
operator|+=
name|d
operator|.
name|isDecommissioned
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
name|int
name|deadDecommissioned
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|d
range|:
name|dead
control|)
block|{
name|deadDecommissioned
operator|+=
name|d
operator|.
name|isDecommissioned
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|decommissioning
init|=
name|dm
operator|.
name|getDecommissioningNodes
argument_list|()
decl_stmt|;
name|sorterField
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"sorter/field"
argument_list|)
expr_stmt|;
name|sorterOrder
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"sorter/order"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sorterField
operator|==
literal|null
condition|)
name|sorterField
operator|=
literal|"name"
expr_stmt|;
if|if
condition|(
name|sorterOrder
operator|==
literal|null
condition|)
name|sorterOrder
operator|=
literal|"ASC"
expr_stmt|;
comment|// Find out common suffix. Should this be before or after the sort?
name|String
name|port_suffix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|live
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|name
init|=
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|port_suffix
operator|=
name|name
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|port_suffix
operator|!=
literal|null
operator|&&
name|i
operator|<
name|live
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|live
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getXferAddr
argument_list|()
operator|.
name|endsWith
argument_list|(
name|port_suffix
argument_list|)
operator|==
literal|false
condition|)
block|{
name|port_suffix
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
block|}
name|counterReset
argument_list|()
expr_stmt|;
name|long
index|[]
name|fsnStats
init|=
name|fsn
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|long
name|total
init|=
name|fsnStats
index|[
literal|0
index|]
decl_stmt|;
name|long
name|remaining
init|=
name|fsnStats
index|[
literal|2
index|]
decl_stmt|;
name|long
name|used
init|=
name|fsnStats
index|[
literal|1
index|]
decl_stmt|;
name|long
name|nonDFS
init|=
name|total
operator|-
name|remaining
operator|-
name|used
decl_stmt|;
name|nonDFS
operator|=
name|nonDFS
operator|<
literal|0
condition|?
literal|0
else|:
name|nonDFS
expr_stmt|;
name|float
name|percentUsed
init|=
name|DFSUtil
operator|.
name|getPercentUsed
argument_list|(
name|used
argument_list|,
name|total
argument_list|)
decl_stmt|;
name|float
name|percentRemaining
init|=
name|DFSUtil
operator|.
name|getPercentRemaining
argument_list|(
name|remaining
argument_list|,
name|total
argument_list|)
decl_stmt|;
name|float
name|median
init|=
literal|0
decl_stmt|;
name|float
name|max
init|=
literal|0
decl_stmt|;
name|float
name|min
init|=
literal|0
decl_stmt|;
name|float
name|dev
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|live
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|float
name|totalDfsUsed
init|=
literal|0
decl_stmt|;
name|float
index|[]
name|usages
init|=
operator|new
name|float
index|[
name|live
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|live
control|)
block|{
name|usages
index|[
name|i
operator|++
index|]
operator|=
name|dn
operator|.
name|getDfsUsedPercent
argument_list|()
expr_stmt|;
name|totalDfsUsed
operator|+=
name|dn
operator|.
name|getDfsUsedPercent
argument_list|()
expr_stmt|;
block|}
name|totalDfsUsed
operator|/=
name|live
operator|.
name|size
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|usages
argument_list|)
expr_stmt|;
name|median
operator|=
name|usages
index|[
name|usages
operator|.
name|length
operator|/
literal|2
index|]
expr_stmt|;
name|max
operator|=
name|usages
index|[
name|usages
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
name|min
operator|=
name|usages
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|usages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dev
operator|+=
operator|(
name|usages
index|[
name|i
index|]
operator|-
name|totalDfsUsed
operator|)
operator|*
operator|(
name|usages
index|[
name|i
index|]
operator|-
name|totalDfsUsed
operator|)
expr_stmt|;
block|}
name|dev
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|dev
operator|/
name|usages
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|long
name|bpUsed
init|=
name|fsnStats
index|[
literal|6
index|]
decl_stmt|;
name|float
name|percentBpUsed
init|=
name|DFSUtil
operator|.
name|getPercentUsed
argument_list|(
name|bpUsed
argument_list|,
name|total
argument_list|)
decl_stmt|;
comment|// don't show under-replicated/missing blocks or corrupt files for SBN
comment|// since the standby namenode doesn't compute replication queues
name|String
name|underReplicatedBlocks
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|nn
operator|.
name|getServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|ACTIVE
condition|)
block|{
name|underReplicatedBlocks
operator|=
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|(
literal|"Excludes missing blocks."
argument_list|)
operator|+
literal|"Number of Under-Replicated Blocks"
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getUnderReplicatedNotMissingBlocks
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"<div class=\"dfstable\"><table>\n"
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"Configured Capacity"
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|total
argument_list|)
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"DFS Used"
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|used
argument_list|)
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"Non DFS Used"
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|nonDFS
argument_list|)
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"DFS Remaining"
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|remaining
argument_list|)
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"DFS Used%"
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|percent2String
argument_list|(
name|percentUsed
argument_list|)
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"DFS Remaining%"
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|percent2String
argument_list|(
name|percentRemaining
argument_list|)
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"Block Pool Used"
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|bpUsed
argument_list|)
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"Block Pool Used%"
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|percent2String
argument_list|(
name|percentBpUsed
argument_list|)
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"DataNodes usages"
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
literal|"Min %"
operator|+
name|colTxt
argument_list|()
operator|+
literal|"Median %"
operator|+
name|colTxt
argument_list|()
operator|+
literal|"Max %"
operator|+
name|colTxt
argument_list|()
operator|+
literal|"stdev %"
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
name|percent2String
argument_list|(
name|min
argument_list|)
operator|+
name|colTxt
argument_list|()
operator|+
name|percent2String
argument_list|(
name|median
argument_list|)
operator|+
name|colTxt
argument_list|()
operator|+
name|percent2String
argument_list|(
name|max
argument_list|)
operator|+
name|colTxt
argument_list|()
operator|+
name|percent2String
argument_list|(
name|dev
argument_list|)
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"<a href=\"dfsnodelist.jsp?whatNodes=LIVE\">Live Nodes</a> "
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|live
operator|.
name|size
argument_list|()
operator|+
literal|" (Decommissioned: "
operator|+
name|liveDecommissioned
operator|+
literal|")"
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"<a href=\"dfsnodelist.jsp?whatNodes=DEAD\">Dead Nodes</a> "
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|dead
operator|.
name|size
argument_list|()
operator|+
literal|" (Decommissioned: "
operator|+
name|deadDecommissioned
operator|+
literal|")"
operator|+
name|rowTxt
argument_list|()
operator|+
name|colTxt
argument_list|()
operator|+
literal|"<a href=\"dfsnodelist.jsp?whatNodes=DECOMMISSIONING\">"
operator|+
literal|"Decommissioning Nodes</a> "
operator|+
name|colTxt
argument_list|()
operator|+
literal|":"
operator|+
name|colTxt
argument_list|()
operator|+
name|decommissioning
operator|.
name|size
argument_list|()
operator|+
name|underReplicatedBlocks
operator|+
literal|"</table></div><br>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|live
operator|.
name|isEmpty
argument_list|()
operator|&&
name|dead
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"There are no datanodes in the cluster."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Generates the Startup Progress report.      *       * @param out JspWriter to receive output      * @param prog StartupProgress tracking NameNode startup progress      * @throws IOException thrown if there is an I/O error      */
DECL|method|generateStartupProgress (JspWriter out, StartupProgress prog)
name|void
name|generateStartupProgress
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|StartupProgress
name|prog
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgressView
name|view
init|=
name|prog
operator|.
name|createView
argument_list|()
decl_stmt|;
name|FormattedWriter
name|fout
init|=
operator|new
name|FormattedWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<div id=\"startupprogress\">"
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<div><span>Elapsed Time:</span> %s</div>"
argument_list|,
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<div><span>Percent Complete:</span> %s</div>"
argument_list|,
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|view
operator|.
name|getPercentComplete
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<table>"
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<th>Phase</th>"
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<th>Completion</th>"
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<th>Elapsed Time</th>"
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Phase
name|phase
range|:
name|view
operator|.
name|getPhases
argument_list|()
control|)
block|{
specifier|final
name|String
name|timeClass
decl_stmt|;
name|Status
name|status
init|=
name|view
operator|.
name|getStatus
argument_list|(
name|phase
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|Status
operator|.
name|PENDING
condition|)
block|{
name|timeClass
operator|=
literal|"later"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|Status
operator|.
name|RUNNING
condition|)
block|{
name|timeClass
operator|=
literal|"current"
expr_stmt|;
block|}
else|else
block|{
name|timeClass
operator|=
literal|"prior"
expr_stmt|;
block|}
name|fout
operator|.
name|println
argument_list|(
literal|"<tr class=\"phase %s\">"
argument_list|,
name|timeClass
argument_list|)
expr_stmt|;
name|printPhase
argument_list|(
name|fout
argument_list|,
name|view
argument_list|,
name|phase
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Step
name|step
range|:
name|view
operator|.
name|getSteps
argument_list|(
name|phase
argument_list|)
control|)
block|{
name|fout
operator|.
name|println
argument_list|(
literal|"<tr class=\"step %s\">"
argument_list|,
name|timeClass
argument_list|)
expr_stmt|;
name|printStep
argument_list|(
name|fout
argument_list|,
name|view
argument_list|,
name|phase
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
block|}
name|fout
operator|.
name|println
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"</div>"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prints one line of content for a phase in the Startup Progress report.      *       * @param fout FormattedWriter to receive output      * @param view StartupProgressView containing information to print      * @param phase Phase to print      * @throws IOException thrown if there is an I/O error      */
DECL|method|printPhase (FormattedWriter fout, StartupProgressView view, Phase phase)
specifier|private
name|void
name|printPhase
parameter_list|(
name|FormattedWriter
name|fout
parameter_list|,
name|StartupProgressView
name|view
parameter_list|,
name|Phase
name|phase
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|phaseLine
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|phaseLine
operator|.
name|append
argument_list|(
name|phase
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|file
init|=
name|view
operator|.
name|getFile
argument_list|(
name|phase
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|phaseLine
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|long
name|size
init|=
name|view
operator|.
name|getSize
argument_list|(
name|phase
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
name|phaseLine
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|size
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|fout
operator|.
name|println
argument_list|(
literal|"<td class=\"startupdesc\">%s</td>"
argument_list|,
name|phaseLine
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<td>%s</td>"
argument_list|,
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|view
operator|.
name|getPercentComplete
argument_list|(
name|phase
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<td>%s</td>"
argument_list|,
name|view
operator|.
name|getStatus
argument_list|(
name|phase
argument_list|)
operator|==
name|Status
operator|.
name|PENDING
condition|?
literal|""
else|:
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|(
name|phase
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prints one line of content for a step in the Startup Progress report.      *       * @param fout FormattedWriter to receive output      * @param view StartupProgressView containing information to print      * @param phase Phase to print      * @param step Step to print      * @throws IOException thrown if there is an I/O error      */
DECL|method|printStep (FormattedWriter fout, StartupProgressView view, Phase phase, Step step)
specifier|private
name|void
name|printStep
parameter_list|(
name|FormattedWriter
name|fout
parameter_list|,
name|StartupProgressView
name|view
parameter_list|,
name|Phase
name|phase
parameter_list|,
name|Step
name|step
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|stepLine
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|file
init|=
name|step
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|stepLine
operator|.
name|append
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|long
name|size
init|=
name|step
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
name|stepLine
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|size
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|StepType
name|type
init|=
name|step
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|stepLine
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|type
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fout
operator|.
name|println
argument_list|(
literal|"<td class=\"startupdesc\">%s (%d/%d)</td>"
argument_list|,
name|stepLine
operator|.
name|toString
argument_list|()
argument_list|,
name|view
operator|.
name|getCount
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
argument_list|,
name|view
operator|.
name|getTotal
argument_list|(
name|phase
argument_list|,
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<td>%s</td>"
argument_list|,
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|view
operator|.
name|getPercentComplete
argument_list|(
name|phase
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fout
operator|.
name|println
argument_list|(
literal|"<td>%s</td>"
argument_list|,
name|view
operator|.
name|getStatus
argument_list|(
name|phase
argument_list|)
operator|==
name|Status
operator|.
name|PENDING
condition|?
literal|""
else|:
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|view
operator|.
name|getElapsedTime
argument_list|(
name|phase
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * JspWriter wrapper that helps simplify printing formatted lines.      */
DECL|class|FormattedWriter
specifier|private
specifier|static
class|class
name|FormattedWriter
block|{
DECL|field|out
specifier|private
specifier|final
name|JspWriter
name|out
decl_stmt|;
comment|/**        * Creates a new FormattedWriter that delegates to the given JspWriter.        *         * @param out JspWriter to wrap        */
DECL|method|FormattedWriter (JspWriter out)
name|FormattedWriter
parameter_list|(
name|JspWriter
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
comment|/**        * Prints one formatted line, followed by line terminator, using the        * English locale.        *         * @param format String format        * @param args Object... any number of arguments to match format        * @throws IOException thrown if there is an I/O error        */
DECL|method|println (String format, Object... args)
name|void
name|println
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getDelegationToken (final NamenodeProtocols nn, HttpServletRequest request, Configuration conf, final UserGroupInformation ugi)
specifier|static
name|String
name|getDelegationToken
parameter_list|(
specifier|final
name|NamenodeProtocols
name|nn
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|,
specifier|final
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|nn
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|token
operator|==
literal|null
condition|?
literal|null
else|:
name|token
operator|.
name|encodeToUrlString
argument_list|()
return|;
block|}
comment|/** @return a randomly chosen datanode. */
DECL|method|getRandomDatanode (final NameNode namenode)
specifier|static
name|DatanodeDescriptor
name|getRandomDatanode
parameter_list|(
specifier|final
name|NameNode
name|namenode
parameter_list|)
block|{
return|return
operator|(
name|DatanodeDescriptor
operator|)
name|namenode
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|(         )
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
operator|.
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|)
return|;
block|}
DECL|method|redirectToRandomDataNode (ServletContext context, HttpServletRequest request, HttpServletResponse resp)
specifier|static
name|void
name|redirectToRandomDataNode
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|NameNode
name|nn
init|=
name|NameNodeHttpServer
operator|.
name|getNameNodeFromContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|(
name|Configuration
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
decl_stmt|;
comment|// We can't redirect if there isn't a DN to redirect to.
comment|// Lets instead show a proper error message.
name|FSNamesystem
name|fsn
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|DatanodeID
name|datanode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fsn
operator|!=
literal|null
operator|&&
name|fsn
operator|.
name|getNumLiveDataNodes
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|datanode
operator|=
name|getRandomDatanode
argument_list|(
name|nn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|datanode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't browse the DFS since there are no "
operator|+
literal|"live nodes available to redirect to."
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|JspHelper
operator|.
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// if the user is defined, get a delegation token and stringify it
name|String
name|tokenString
init|=
name|getDelegationToken
argument_list|(
name|nn
operator|.
name|getRpcServer
argument_list|()
argument_list|,
name|request
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|rpcAddr
init|=
name|nn
operator|.
name|getNameNodeAddress
argument_list|()
decl_stmt|;
name|String
name|rpcHost
init|=
name|rpcAddr
operator|.
name|getAddress
argument_list|()
operator|.
name|isAnyLocalAddress
argument_list|()
condition|?
name|URI
operator|.
name|create
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getHost
argument_list|()
else|:
name|rpcAddr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
decl_stmt|;
name|String
name|addr
init|=
name|rpcHost
operator|+
literal|":"
operator|+
name|rpcAddr
operator|.
name|getPort
argument_list|()
decl_stmt|;
specifier|final
name|String
name|redirectLocation
init|=
name|JspHelper
operator|.
name|Url
operator|.
name|url
argument_list|(
name|request
operator|.
name|getScheme
argument_list|()
argument_list|,
name|datanode
argument_list|)
operator|+
literal|"/browseDirectory.jsp?namenodeInfoPort="
operator|+
name|request
operator|.
name|getServerPort
argument_list|()
operator|+
literal|"&dir=/"
operator|+
operator|(
name|tokenString
operator|==
literal|null
condition|?
literal|""
else|:
name|JspHelper
operator|.
name|getDelegationTokenUrlParam
argument_list|(
name|tokenString
argument_list|)
operator|)
operator|+
name|JspHelper
operator|.
name|getUrlParam
argument_list|(
name|JspHelper
operator|.
name|NAMENODE_ADDRESS
argument_list|,
name|addr
argument_list|)
decl_stmt|;
name|resp
operator|.
name|sendRedirect
argument_list|(
name|redirectLocation
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a descriptive label for the running NameNode.  If the NameNode has    * initialized to the point of running its RPC server, then this label consists    * of the host and port of the RPC server.  Otherwise, the label is a message    * stating that the NameNode is still initializing.    *     * @param nn NameNode to describe    * @return String NameNode label    */
DECL|method|getNameNodeLabel (NameNode nn)
specifier|static
name|String
name|getNameNodeLabel
parameter_list|(
name|NameNode
name|nn
parameter_list|)
block|{
return|return
name|nn
operator|.
name|getRpcServer
argument_list|()
operator|!=
literal|null
condition|?
name|nn
operator|.
name|getNameNodeAddressHostPortString
argument_list|()
else|:
literal|"initializing"
return|;
block|}
DECL|class|NodeListJsp
specifier|static
class|class
name|NodeListJsp
block|{
DECL|field|rowNum
specifier|private
name|int
name|rowNum
init|=
literal|0
decl_stmt|;
DECL|field|diskBytes
specifier|private
name|long
name|diskBytes
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|diskByteStr
specifier|private
name|String
name|diskByteStr
init|=
literal|"GB"
decl_stmt|;
DECL|field|sorterField
specifier|private
name|String
name|sorterField
init|=
literal|null
decl_stmt|;
DECL|field|sorterOrder
specifier|private
name|String
name|sorterOrder
init|=
literal|null
decl_stmt|;
DECL|field|whatNodes
specifier|private
name|String
name|whatNodes
init|=
literal|"LIVE"
decl_stmt|;
DECL|method|rowTxt ()
specifier|private
name|String
name|rowTxt
parameter_list|()
block|{
return|return
literal|"<tr class=\""
operator|+
operator|(
operator|(
operator|(
name|rowNum
operator|++
operator|)
operator|%
literal|2
operator|==
literal|0
operator|)
condition|?
literal|"rowNormal"
else|:
literal|"rowAlt"
operator|)
operator|+
literal|"\"> "
return|;
block|}
DECL|method|counterReset ()
specifier|private
name|void
name|counterReset
parameter_list|()
block|{
name|rowNum
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|nodeHeaderStr (String name)
specifier|private
name|String
name|nodeHeaderStr
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|ret
init|=
literal|"class=header"
decl_stmt|;
name|String
name|order
init|=
literal|"ASC"
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|sorterField
argument_list|)
condition|)
block|{
name|ret
operator|+=
name|sorterOrder
expr_stmt|;
if|if
condition|(
name|sorterOrder
operator|.
name|equals
argument_list|(
literal|"ASC"
argument_list|)
condition|)
name|order
operator|=
literal|"DSC"
expr_stmt|;
block|}
name|ret
operator|+=
literal|" onClick=\"window.document.location="
operator|+
literal|"'/dfsnodelist.jsp?whatNodes="
operator|+
name|whatNodes
operator|+
literal|"&sorter/field="
operator|+
name|name
operator|+
literal|"&sorter/order="
operator|+
name|order
operator|+
literal|"'\" title=\"sort on this column\""
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|generateNodeDataHeader (JspWriter out, DatanodeDescriptor d, String suffix, boolean alive, int nnInfoPort, String nnaddr, String scheme)
specifier|private
name|void
name|generateNodeDataHeader
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|DatanodeDescriptor
name|d
parameter_list|,
name|String
name|suffix
parameter_list|,
name|boolean
name|alive
parameter_list|,
name|int
name|nnInfoPort
parameter_list|,
name|String
name|nnaddr
parameter_list|,
name|String
name|scheme
parameter_list|)
throws|throws
name|IOException
block|{
comment|// from nn_browsedfscontent.jsp:
name|String
name|url
init|=
literal|"///"
operator|+
name|JspHelper
operator|.
name|Url
operator|.
name|authority
argument_list|(
name|scheme
argument_list|,
name|d
argument_list|)
operator|+
literal|"/browseDirectory.jsp?namenodeInfoPort="
operator|+
name|nnInfoPort
operator|+
literal|"&dir="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
literal|"/"
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
name|JspHelper
operator|.
name|getUrlParam
argument_list|(
name|JspHelper
operator|.
name|NAMENODE_ADDRESS
argument_list|,
name|nnaddr
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|d
operator|.
name|getXferAddrWithHostname
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|matches
argument_list|(
literal|"\\d+\\.\\d+.\\d+\\.\\d+.*"
argument_list|)
condition|)
name|name
operator|=
name|name
operator|.
name|replaceAll
argument_list|(
literal|"\\.[^.:]*"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
operator|(
name|suffix
operator|!=
literal|null
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
operator|)
condition|?
name|name
operator|.
name|indexOf
argument_list|(
name|suffix
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|rowTxt
argument_list|()
operator|+
literal|"<td class=\"name\"><a title=\""
operator|+
name|url
operator|+
literal|"\" href=\""
operator|+
name|url
operator|+
literal|"\">"
operator|+
operator|(
operator|(
name|idx
operator|>
literal|0
operator|)
condition|?
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
else|:
name|name
operator|)
operator|+
literal|"</a>"
operator|+
operator|(
operator|(
name|alive
operator|)
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
literal|"<td class=\"address\">"
operator|+
name|d
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|generateDecommissioningNodeData (JspWriter out, DatanodeDescriptor d, String suffix, boolean alive, int nnInfoPort, String nnaddr, String scheme)
name|void
name|generateDecommissioningNodeData
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|DatanodeDescriptor
name|d
parameter_list|,
name|String
name|suffix
parameter_list|,
name|boolean
name|alive
parameter_list|,
name|int
name|nnInfoPort
parameter_list|,
name|String
name|nnaddr
parameter_list|,
name|String
name|scheme
parameter_list|)
throws|throws
name|IOException
block|{
name|generateNodeDataHeader
argument_list|(
name|out
argument_list|,
name|d
argument_list|,
name|suffix
argument_list|,
name|alive
argument_list|,
name|nnInfoPort
argument_list|,
name|nnaddr
argument_list|,
name|scheme
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|alive
condition|)
block|{
return|return;
block|}
name|long
name|decommRequestTime
init|=
name|d
operator|.
name|decommissioningStatus
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|timestamp
init|=
name|d
operator|.
name|getLastUpdate
argument_list|()
decl_stmt|;
name|long
name|currentTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|long
name|hoursSinceDecommStarted
init|=
operator|(
name|currentTime
operator|-
name|decommRequestTime
operator|)
operator|/
literal|3600000
decl_stmt|;
name|long
name|remainderMinutes
init|=
operator|(
operator|(
name|currentTime
operator|-
name|decommRequestTime
operator|)
operator|/
literal|60000
operator|)
operator|%
literal|60
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<td class=\"lastcontact\"> "
operator|+
operator|(
operator|(
name|currentTime
operator|-
name|timestamp
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|"<td class=\"underreplicatedblocks\">"
operator|+
name|d
operator|.
name|decommissioningStatus
operator|.
name|getUnderReplicatedBlocks
argument_list|()
operator|+
literal|"<td class=\"blockswithonlydecommissioningreplicas\">"
operator|+
name|d
operator|.
name|decommissioningStatus
operator|.
name|getDecommissionOnlyReplicas
argument_list|()
operator|+
literal|"<td class=\"underrepblocksinfilesunderconstruction\">"
operator|+
name|d
operator|.
name|decommissioningStatus
operator|.
name|getUnderReplicatedInOpenFiles
argument_list|()
operator|+
literal|"<td class=\"timesincedecommissionrequest\">"
operator|+
name|hoursSinceDecommStarted
operator|+
literal|" hrs "
operator|+
name|remainderMinutes
operator|+
literal|" mins"
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|generateNodeData (JspWriter out, DatanodeDescriptor d, String suffix, boolean alive, int nnInfoPort, String nnaddr, String scheme)
name|void
name|generateNodeData
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|DatanodeDescriptor
name|d
parameter_list|,
name|String
name|suffix
parameter_list|,
name|boolean
name|alive
parameter_list|,
name|int
name|nnInfoPort
parameter_list|,
name|String
name|nnaddr
parameter_list|,
name|String
name|scheme
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*        * Say the datanode is dn1.hadoop.apache.org with ip 192.168.0.5 we use:        * 1) d.getHostName():d.getPort() to display. Domain and port are stripped        *    if they are common across the nodes. i.e. "dn1"         * 2) d.getHostName():d.getInfoPort() for url and title.        *    i.e. "http://dn1.hadoop.apache.org:50075/..."        * 3) d.getXferAddr() for "Transferring Address". i.e. "192.168.0.5:50010"        * Note that "d.getHost():d.getPort()" is what DFS clients use to        * interact with datanodes.        */
name|generateNodeDataHeader
argument_list|(
name|out
argument_list|,
name|d
argument_list|,
name|suffix
argument_list|,
name|alive
argument_list|,
name|nnInfoPort
argument_list|,
name|nnaddr
argument_list|,
name|scheme
argument_list|)
expr_stmt|;
name|long
name|currentTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|long
name|timestamp
init|=
name|d
operator|.
name|getLastUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|alive
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<td class=\"lastcontact\"> "
operator|+
operator|new
name|Date
argument_list|(
name|timestamp
argument_list|)
operator|+
literal|"<td class=\"decommissioned\"> "
operator|+
name|d
operator|.
name|isDecommissioned
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|c
init|=
name|d
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|long
name|u
init|=
name|d
operator|.
name|getDfsUsed
argument_list|()
decl_stmt|;
name|long
name|nu
init|=
name|d
operator|.
name|getNonDfsUsed
argument_list|()
decl_stmt|;
name|long
name|r
init|=
name|d
operator|.
name|getRemaining
argument_list|()
decl_stmt|;
specifier|final
name|double
name|percentUsedValue
init|=
name|d
operator|.
name|getDfsUsedPercent
argument_list|()
decl_stmt|;
name|String
name|percentUsed
init|=
name|fraction2String
argument_list|(
name|percentUsedValue
argument_list|)
decl_stmt|;
name|String
name|percentRemaining
init|=
name|fraction2String
argument_list|(
name|d
operator|.
name|getRemainingPercent
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|adminState
init|=
name|d
operator|.
name|getAdminState
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|bpUsed
init|=
name|d
operator|.
name|getBlockPoolUsed
argument_list|()
decl_stmt|;
name|String
name|percentBpUsed
init|=
name|fraction2String
argument_list|(
name|d
operator|.
name|getBlockPoolUsedPercent
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<td class=\"lastcontact\"> "
operator|+
operator|(
operator|(
name|currentTime
operator|-
name|timestamp
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|"<td class=\"adminstate\">"
operator|+
name|adminState
operator|+
literal|"<td align=\"right\" class=\"capacity\">"
operator|+
name|fraction2String
argument_list|(
name|c
argument_list|,
name|diskBytes
argument_list|)
operator|+
literal|"<td align=\"right\" class=\"used\">"
operator|+
name|fraction2String
argument_list|(
name|u
argument_list|,
name|diskBytes
argument_list|)
operator|+
literal|"<td align=\"right\" class=\"nondfsused\">"
operator|+
name|fraction2String
argument_list|(
name|nu
argument_list|,
name|diskBytes
argument_list|)
operator|+
literal|"<td align=\"right\" class=\"remaining\">"
operator|+
name|fraction2String
argument_list|(
name|r
argument_list|,
name|diskBytes
argument_list|)
operator|+
literal|"<td align=\"right\" class=\"pcused\">"
operator|+
name|percentUsed
operator|+
literal|"<td class=\"pcused\">"
operator|+
name|ServletUtil
operator|.
name|percentageGraph
argument_list|(
operator|(
name|int
operator|)
name|percentUsedValue
argument_list|,
literal|100
argument_list|)
operator|+
literal|"<td align=\"right\" class=\"pcremaining\">"
operator|+
name|percentRemaining
operator|+
literal|"<td title="
operator|+
literal|"\"blocks scheduled : "
operator|+
name|d
operator|.
name|getBlocksScheduled
argument_list|()
operator|+
literal|"\" class=\"blocks\">"
operator|+
name|d
operator|.
name|numBlocks
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"<td align=\"right\" class=\"bpused\">"
operator|+
name|fraction2String
argument_list|(
name|bpUsed
argument_list|,
name|diskBytes
argument_list|)
operator|+
literal|"<td align=\"right\" class=\"pcbpused\">"
operator|+
name|percentBpUsed
operator|+
literal|"<td align=\"right\" class=\"volfails\">"
operator|+
name|d
operator|.
name|getVolumeFailures
argument_list|()
operator|+
literal|"<td align=\"right\" class=\"version\">"
operator|+
name|d
operator|.
name|getSoftwareVersion
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|generateNodesList (ServletContext context, JspWriter out, HttpServletRequest request)
name|void
name|generateNodesList
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|JspWriter
name|out
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|NameNode
name|nn
init|=
name|NameNodeHttpServer
operator|.
name|getNameNodeFromContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|FSNamesystem
name|ns
init|=
name|nn
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|DatanodeManager
name|dm
init|=
name|ns
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|dead
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|dm
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
name|dead
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|nnaddr
init|=
name|nn
operator|.
name|getServiceRpcAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|nn
operator|.
name|getServiceRpcAddress
argument_list|()
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|whatNodes
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"whatNodes"
argument_list|)
expr_stmt|;
comment|// show only live or only
comment|// dead nodes
if|if
condition|(
literal|null
operator|==
name|whatNodes
operator|||
name|whatNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"Invalid input"
argument_list|)
expr_stmt|;
return|return;
block|}
name|sorterField
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"sorter/field"
argument_list|)
expr_stmt|;
name|sorterOrder
operator|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"sorter/order"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sorterField
operator|==
literal|null
condition|)
name|sorterField
operator|=
literal|"name"
expr_stmt|;
if|if
condition|(
name|sorterOrder
operator|==
literal|null
condition|)
name|sorterOrder
operator|=
literal|"ASC"
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
name|sorterField
argument_list|,
name|sorterOrder
argument_list|)
expr_stmt|;
comment|// Find out common suffix. Should this be before or after the sort?
name|String
name|port_suffix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|live
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|name
init|=
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getXferAddr
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|port_suffix
operator|=
name|name
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|port_suffix
operator|!=
literal|null
operator|&&
name|i
operator|<
name|live
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|live
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getXferAddr
argument_list|()
operator|.
name|endsWith
argument_list|(
name|port_suffix
argument_list|)
operator|==
literal|false
condition|)
block|{
name|port_suffix
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
block|}
name|counterReset
argument_list|()
expr_stmt|;
if|if
condition|(
name|live
operator|.
name|isEmpty
argument_list|()
operator|&&
name|dead
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"There are no datanodes in the cluster"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|nnInfoPort
init|=
name|request
operator|.
name|getServerPort
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<div id=\"dfsnodetable\"> "
argument_list|)
expr_stmt|;
if|if
condition|(
name|whatNodes
operator|.
name|equals
argument_list|(
literal|"LIVE"
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<a name=\"LiveNodes\" id=\"title\">"
operator|+
literal|"Live Datanodes : "
operator|+
name|live
operator|.
name|size
argument_list|()
operator|+
literal|"</a>"
operator|+
literal|"<br><br>\n<table class=\"nodes\">\n"
argument_list|)
expr_stmt|;
name|counterReset
argument_list|()
expr_stmt|;
if|if
condition|(
name|live
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|live
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCapacity
argument_list|()
operator|>
literal|1024
operator|*
name|diskBytes
condition|)
block|{
name|diskBytes
operator|*=
literal|1024
expr_stmt|;
name|diskByteStr
operator|=
literal|"TB"
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"<tr class=\"headerRow\"><th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"name"
argument_list|)
operator|+
literal|"> Node<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"address"
argument_list|)
operator|+
literal|"> Transferring<br>Address<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"lastcontact"
argument_list|)
operator|+
literal|"> Last<br>Contact<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"adminstate"
argument_list|)
operator|+
literal|"> Admin State<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"capacity"
argument_list|)
operator|+
literal|"> Configured<br>Capacity ("
operator|+
name|diskByteStr
operator|+
literal|")<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"used"
argument_list|)
operator|+
literal|"> Used<br>("
operator|+
name|diskByteStr
operator|+
literal|")<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"nondfsused"
argument_list|)
operator|+
literal|"> Non DFS<br>Used ("
operator|+
name|diskByteStr
operator|+
literal|")<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"remaining"
argument_list|)
operator|+
literal|"> Remaining<br>("
operator|+
name|diskByteStr
operator|+
literal|")<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"pcused"
argument_list|)
operator|+
literal|"> Used<br>(%)<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"pcused"
argument_list|)
operator|+
literal|"> Used<br>(%)<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"pcremaining"
argument_list|)
operator|+
literal|"> Remaining<br>(%)<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"blocks"
argument_list|)
operator|+
literal|"> Blocks<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"bpused"
argument_list|)
operator|+
literal|"> Block Pool<br>Used ("
operator|+
name|diskByteStr
operator|+
literal|")<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"pcbpused"
argument_list|)
operator|+
literal|"> Block Pool<br>Used (%)"
operator|+
literal|"<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"volfails"
argument_list|)
operator|+
literal|"> Failed Volumes<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"versionString"
argument_list|)
operator|+
literal|"> Version\n"
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|live
argument_list|,
name|sorterField
argument_list|,
name|sorterOrder
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|live
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|generateNodeData
argument_list|(
name|out
argument_list|,
name|live
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|port_suffix
argument_list|,
literal|true
argument_list|,
name|nnInfoPort
argument_list|,
name|nnaddr
argument_list|,
name|request
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</table>\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|whatNodes
operator|.
name|equals
argument_list|(
literal|"DEAD"
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<br><a name=\"DeadNodes\" id=\"title\"> "
operator|+
literal|" Dead Datanodes : "
operator|+
name|dead
operator|.
name|size
argument_list|()
operator|+
literal|"</a><br><br>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dead
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<table border=1 cellspacing=0><tr id=\"row1\"> "
operator|+
literal|"<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"node"
argument_list|)
operator|+
literal|"> Node<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"address"
argument_list|)
operator|+
literal|"> Transferring<br>Address<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"lastcontact"
argument_list|)
operator|+
literal|"> Last<br>Contact<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"decommissioned"
argument_list|)
operator|+
literal|"> Decommissioned\n"
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|dead
argument_list|,
name|sorterField
argument_list|,
name|sorterOrder
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dead
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|generateNodeData
argument_list|(
name|out
argument_list|,
name|dead
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|port_suffix
argument_list|,
literal|false
argument_list|,
name|nnInfoPort
argument_list|,
name|nnaddr
argument_list|,
name|request
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</table>\n"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|whatNodes
operator|.
name|equals
argument_list|(
literal|"DECOMMISSIONING"
argument_list|)
condition|)
block|{
comment|// Decommissioning Nodes
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|decommissioning
init|=
name|dm
operator|.
name|getDecommissioningNodes
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<br><a name=\"DecommissioningNodes\" id=\"title\"> "
operator|+
literal|" Decommissioning Datanodes : "
operator|+
name|decommissioning
operator|.
name|size
argument_list|()
operator|+
literal|"</a><br><br>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|decommissioning
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<table border=1 cellspacing=0><tr class=\"headRow\"> "
operator|+
literal|"<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"name"
argument_list|)
operator|+
literal|"> Node<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"address"
argument_list|)
operator|+
literal|"> Transferring<br>Address<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"lastcontact"
argument_list|)
operator|+
literal|"> Last<br>Contact<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"underreplicatedblocks"
argument_list|)
operator|+
literal|"> Under Replicated Blocks<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"blockswithonlydecommissioningreplicas"
argument_list|)
operator|+
literal|"> Blocks With No<br> Live Replicas<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"underrepblocksinfilesunderconstruction"
argument_list|)
operator|+
literal|"> Under Replicated Blocks<br> In Files Under Construction"
operator|+
literal|"<th "
operator|+
name|nodeHeaderStr
argument_list|(
literal|"timesincedecommissionrequest"
argument_list|)
operator|+
literal|"> Time Since Decommissioning Started"
argument_list|)
expr_stmt|;
name|JspHelper
operator|.
name|sortNodeList
argument_list|(
name|decommissioning
argument_list|,
literal|"name"
argument_list|,
literal|"ASC"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decommissioning
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|generateDecommissioningNodeData
argument_list|(
name|out
argument_list|,
name|decommissioning
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|port_suffix
argument_list|,
literal|true
argument_list|,
name|nnInfoPort
argument_list|,
name|nnaddr
argument_list|,
name|request
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</table>\n"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|"Invalid input"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</div>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getLocalParentDir (INode inode)
specifier|private
specifier|static
name|String
name|getLocalParentDir
parameter_list|(
name|INode
name|inode
parameter_list|)
block|{
specifier|final
name|INode
name|parent
init|=
name|inode
operator|.
name|isRoot
argument_list|()
condition|?
name|inode
else|:
name|inode
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|parentDir
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parentDir
operator|=
name|parent
operator|.
name|getFullPathName
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|parentDir
operator|!=
literal|null
operator|)
condition|?
name|parentDir
else|:
literal|""
return|;
block|}
comment|// utility class used in block_info_xml.jsp
DECL|class|XMLBlockInfo
specifier|static
class|class
name|XMLBlockInfo
block|{
DECL|field|block
specifier|final
name|Block
name|block
decl_stmt|;
DECL|field|inode
specifier|final
name|INodeFile
name|inode
decl_stmt|;
DECL|field|blockManager
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|method|XMLBlockInfo (FSNamesystem fsn, Long blockId)
name|XMLBlockInfo
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|Long
name|blockId
parameter_list|)
block|{
name|this
operator|.
name|blockManager
operator|=
name|fsn
operator|!=
literal|null
condition|?
name|fsn
operator|.
name|getBlockManager
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|blockId
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|block
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|inode
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|block
operator|=
operator|new
name|Block
argument_list|(
name|blockId
argument_list|)
expr_stmt|;
name|this
operator|.
name|inode
operator|=
name|blockManager
operator|!=
literal|null
condition|?
operator|(
operator|(
name|INode
operator|)
name|blockManager
operator|.
name|getBlockCollection
argument_list|(
name|block
argument_list|)
operator|)
operator|.
name|asFile
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
block|}
DECL|method|toXML (XMLOutputter doc)
specifier|public
name|void
name|toXML
parameter_list|(
name|XMLOutputter
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"block_info"
argument_list|)
expr_stmt|;
if|if
condition|(
name|block
operator|==
literal|null
condition|)
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|"blockId must be a Long"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"block_id"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"block_name"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
name|block
operator|.
name|getBlockName
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
if|if
condition|(
name|inode
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"local_name"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
name|inode
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"local_directory"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
name|getLocalParentDir
argument_list|(
name|inode
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"user_name"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
name|inode
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"group_name"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
name|inode
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"is_directory"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|inode
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"access_time"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|inode
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"is_under_construction"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|inode
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"ds_quota"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|inode
operator|.
name|getQuotaCounts
argument_list|()
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"permission_status"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
name|inode
operator|.
name|getPermissionStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"replication"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|inode
operator|.
name|getFileReplication
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"disk_space_consumed"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|inode
operator|.
name|diskspaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"preferred_block_size"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|inode
operator|.
name|getPreferredBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|//</file>
block|}
name|doc
operator|.
name|startTag
argument_list|(
literal|"replicas"
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|storage
range|:
operator|(
name|blockManager
operator|!=
literal|null
condition|?
name|blockManager
operator|.
name|getStorages
argument_list|(
name|block
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|DatanodeStorageInfo
operator|>
name|emptyList
argument_list|()
operator|)
control|)
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"replica"
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|dd
init|=
name|storage
operator|.
name|getDatanodeDescriptor
argument_list|()
decl_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"host_name"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
name|dd
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|boolean
name|isCorrupt
init|=
name|blockManager
operator|.
name|getCorruptReplicaBlockIds
argument_list|(
literal|0
argument_list|,
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"is_corrupt"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|isCorrupt
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|//</replica>
block|}
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|//</replicas>
block|}
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|//</block_info>
block|}
block|}
comment|// utility class used in corrupt_replicas_xml.jsp
DECL|class|XMLCorruptBlockInfo
specifier|static
class|class
name|XMLCorruptBlockInfo
block|{
DECL|field|conf
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|startingBlockId
specifier|final
name|Long
name|startingBlockId
decl_stmt|;
DECL|field|numCorruptBlocks
specifier|final
name|int
name|numCorruptBlocks
decl_stmt|;
DECL|field|blockManager
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|method|XMLCorruptBlockInfo (FSNamesystem fsn, Configuration conf, int numCorruptBlocks, Long startingBlockId)
name|XMLCorruptBlockInfo
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|numCorruptBlocks
parameter_list|,
name|Long
name|startingBlockId
parameter_list|)
block|{
name|this
operator|.
name|blockManager
operator|=
name|fsn
operator|!=
literal|null
condition|?
name|fsn
operator|.
name|getBlockManager
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|numCorruptBlocks
operator|=
name|numCorruptBlocks
expr_stmt|;
name|this
operator|.
name|startingBlockId
operator|=
name|startingBlockId
expr_stmt|;
block|}
DECL|method|toXML (XMLOutputter doc)
specifier|public
name|void
name|toXML
parameter_list|(
name|XMLOutputter
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"corrupt_block_info"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numCorruptBlocks
argument_list|<
literal|0
operator|||
name|numCorruptBlocks
argument_list|>
literal|100
condition|)
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|"numCorruptBlocks must be>= 0 and<= 100"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
name|doc
operator|.
name|startTag
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"num_missing_blocks"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
operator|(
name|blockManager
operator|!=
literal|null
condition|?
name|blockManager
operator|.
name|getMissingBlocksCount
argument_list|()
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"num_corrupt_replica_blocks"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
operator|(
name|blockManager
operator|!=
literal|null
condition|?
name|blockManager
operator|.
name|getCorruptReplicaBlocksCount
argument_list|()
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
name|doc
operator|.
name|startTag
argument_list|(
literal|"corrupt_replica_block_ids"
argument_list|)
expr_stmt|;
specifier|final
name|long
index|[]
name|corruptBlockIds
init|=
name|blockManager
operator|!=
literal|null
condition|?
name|blockManager
operator|.
name|getCorruptReplicaBlockIds
argument_list|(
name|numCorruptBlocks
argument_list|,
name|startingBlockId
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|corruptBlockIds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Long
name|blockId
range|:
name|corruptBlockIds
control|)
block|{
name|doc
operator|.
name|startTag
argument_list|(
literal|"block_id"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|pcdata
argument_list|(
literal|""
operator|+
name|blockId
argument_list|)
expr_stmt|;
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
block|}
block|}
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|//</corrupt_replica_block_ids>
name|doc
operator|.
name|endTag
argument_list|()
expr_stmt|;
comment|//</corrupt_block_info>
name|doc
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

