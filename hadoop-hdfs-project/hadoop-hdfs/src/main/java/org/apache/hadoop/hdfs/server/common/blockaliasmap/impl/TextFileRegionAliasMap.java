begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common.blockaliasmap.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ProvidedStorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|BlockAliasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This class is used for block maps stored as text files,  * with a specified delimiter.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TextFileRegionAliasMap
specifier|public
class|class
name|TextFileRegionAliasMap
extends|extends
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
implements|implements
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|readerOpts
specifier|private
name|ReaderOptions
name|readerOpts
init|=
name|TextReader
operator|.
name|defaults
argument_list|()
decl_stmt|;
DECL|field|writerOpts
specifier|private
name|WriterOptions
name|writerOpts
init|=
name|TextWriter
operator|.
name|defaults
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TextFileRegionAliasMap
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|readerOpts
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|writerOpts
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|getReader (Reader.Options opts, String blockPoolID)
specifier|public
name|Reader
argument_list|<
name|FileRegion
argument_list|>
name|getReader
parameter_list|(
name|Reader
operator|.
name|Options
name|opts
parameter_list|,
name|String
name|blockPoolID
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|opts
condition|)
block|{
name|opts
operator|=
name|readerOpts
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|opts
operator|instanceof
name|ReaderOptions
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid options "
operator|+
name|opts
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|ReaderOptions
name|o
init|=
operator|(
name|ReaderOptions
operator|)
name|opts
decl_stmt|;
name|Configuration
name|readerConf
init|=
operator|(
literal|null
operator|==
name|o
operator|.
name|getConf
argument_list|()
operator|)
condition|?
operator|new
name|Configuration
argument_list|()
else|:
name|o
operator|.
name|getConf
argument_list|()
decl_stmt|;
return|return
name|createReader
argument_list|(
name|o
operator|.
name|file
argument_list|,
name|o
operator|.
name|delim
argument_list|,
name|readerConf
argument_list|,
name|blockPoolID
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createReader (Path file, String delim, Configuration cfg, String blockPoolID)
name|TextReader
name|createReader
parameter_list|(
name|Path
name|file
parameter_list|,
name|String
name|delim
parameter_list|,
name|Configuration
name|cfg
parameter_list|,
name|String
name|blockPoolID
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|instanceof
name|LocalFileSystem
condition|)
block|{
name|fs
operator|=
operator|(
operator|(
name|LocalFileSystem
operator|)
name|fs
operator|)
operator|.
name|getRaw
argument_list|()
expr_stmt|;
block|}
name|CompressionCodecFactory
name|factory
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|factory
operator|.
name|getCodec
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
name|fileNameFromBlockPoolID
argument_list|(
name|blockPoolID
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
name|filename
operator|=
name|filename
operator|+
name|codec
operator|.
name|getDefaultExtension
argument_list|()
expr_stmt|;
block|}
name|Path
name|bpidFilePath
init|=
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
argument_list|,
name|filename
argument_list|)
decl_stmt|;
return|return
operator|new
name|TextReader
argument_list|(
name|fs
argument_list|,
name|bpidFilePath
argument_list|,
name|codec
argument_list|,
name|delim
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriter (Writer.Options opts, String blockPoolID)
specifier|public
name|Writer
argument_list|<
name|FileRegion
argument_list|>
name|getWriter
parameter_list|(
name|Writer
operator|.
name|Options
name|opts
parameter_list|,
name|String
name|blockPoolID
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|opts
condition|)
block|{
name|opts
operator|=
name|writerOpts
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|opts
operator|instanceof
name|WriterOptions
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid options "
operator|+
name|opts
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|WriterOptions
name|o
init|=
operator|(
name|WriterOptions
operator|)
name|opts
decl_stmt|;
name|Configuration
name|cfg
init|=
operator|(
literal|null
operator|==
name|o
operator|.
name|getConf
argument_list|()
operator|)
condition|?
operator|new
name|Configuration
argument_list|()
else|:
name|o
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|baseName
init|=
name|fileNameFromBlockPoolID
argument_list|(
name|blockPoolID
argument_list|)
decl_stmt|;
name|Path
name|blocksFile
init|=
operator|new
name|Path
argument_list|(
name|o
operator|.
name|dir
argument_list|,
name|baseName
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|codec
operator|!=
literal|null
condition|)
block|{
name|CompressionCodecFactory
name|factory
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|factory
operator|.
name|getCodecByName
argument_list|(
name|o
operator|.
name|codec
argument_list|)
decl_stmt|;
name|blocksFile
operator|=
operator|new
name|Path
argument_list|(
name|o
operator|.
name|dir
argument_list|,
name|baseName
operator|+
name|codec
operator|.
name|getDefaultExtension
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createWriter
argument_list|(
name|blocksFile
argument_list|,
name|codec
argument_list|,
name|o
operator|.
name|delim
argument_list|,
name|cfg
argument_list|)
return|;
block|}
return|return
name|createWriter
argument_list|(
name|blocksFile
argument_list|,
literal|null
argument_list|,
name|o
operator|.
name|delim
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createWriter (Path file, CompressionCodec codec, String delim, Configuration cfg)
name|TextWriter
name|createWriter
parameter_list|(
name|Path
name|file
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|String
name|delim
parameter_list|,
name|Configuration
name|cfg
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|instanceof
name|LocalFileSystem
condition|)
block|{
name|fs
operator|=
operator|(
operator|(
name|LocalFileSystem
operator|)
name|fs
operator|)
operator|.
name|getRaw
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|tmp
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|java
operator|.
name|io
operator|.
name|Writer
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|(
literal|null
operator|==
name|codec
operator|)
condition|?
name|tmp
else|:
name|codec
operator|.
name|createOutputStream
argument_list|(
name|tmp
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|TextWriter
argument_list|(
name|out
argument_list|,
name|delim
argument_list|)
return|;
block|}
comment|/**    * Class specifying reader options for the {@link TextFileRegionAliasMap}.    */
DECL|class|ReaderOptions
specifier|public
specifier|static
class|class
name|ReaderOptions
implements|implements
name|TextReader
operator|.
name|Options
implements|,
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|delim
specifier|private
name|String
name|delim
init|=
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_DELIMITER_DEFAULT
decl_stmt|;
DECL|field|file
specifier|private
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_READ_FILE_DEFAULT
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|tmpfile
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_READ_FILE
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_READ_FILE_DEFAULT
argument_list|)
decl_stmt|;
name|file
operator|=
operator|new
name|Path
argument_list|(
name|tmpfile
argument_list|)
expr_stmt|;
name|delim
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_DELIMITER
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_DELIMITER_DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TextFileRegionAliasMap: read path {}"
argument_list|,
name|tmpfile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|filename (Path file)
specifier|public
name|ReaderOptions
name|filename
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|delimiter (String delim)
specifier|public
name|ReaderOptions
name|delimiter
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
name|this
operator|.
name|delim
operator|=
name|delim
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**    * Class specifying writer options for the {@link TextFileRegionAliasMap}.    */
DECL|class|WriterOptions
specifier|public
specifier|static
class|class
name|WriterOptions
implements|implements
name|TextWriter
operator|.
name|Options
implements|,
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|codec
specifier|private
name|String
name|codec
init|=
literal|null
decl_stmt|;
DECL|field|dir
specifier|private
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_WRITE_DIR_DEFAULT
argument_list|)
decl_stmt|;
DECL|field|delim
specifier|private
name|String
name|delim
init|=
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_DELIMITER_DEFAULT
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|tmpDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_WRITE_DIR
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
name|codec
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_CODEC
argument_list|)
expr_stmt|;
name|delim
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_DELIMITER
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_DELIMITER_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|dirName (Path dir)
specifier|public
name|WriterOptions
name|dirName
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCodec ()
specifier|public
name|String
name|getCodec
parameter_list|()
block|{
return|return
name|codec
return|;
block|}
DECL|method|getDir ()
specifier|public
name|Path
name|getDir
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
annotation|@
name|Override
DECL|method|codec (String codec)
specifier|public
name|WriterOptions
name|codec
parameter_list|(
name|String
name|codec
parameter_list|)
block|{
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|delimiter (String delim)
specifier|public
name|WriterOptions
name|delimiter
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
name|this
operator|.
name|delim
operator|=
name|delim
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**    * This class is used as a reader for block maps which    * are stored as delimited text files.    */
DECL|class|TextReader
specifier|public
specifier|static
class|class
name|TextReader
extends|extends
name|Reader
argument_list|<
name|FileRegion
argument_list|>
block|{
comment|/**      * Options for {@link TextReader}.      */
DECL|interface|Options
specifier|public
interface|interface
name|Options
extends|extends
name|Reader
operator|.
name|Options
block|{
DECL|method|filename (Path file)
name|Options
name|filename
parameter_list|(
name|Path
name|file
parameter_list|)
function_decl|;
DECL|method|delimiter (String delim)
name|Options
name|delimiter
parameter_list|(
name|String
name|delim
parameter_list|)
function_decl|;
block|}
DECL|method|defaults ()
specifier|public
specifier|static
name|ReaderOptions
name|defaults
parameter_list|()
block|{
return|return
operator|new
name|ReaderOptions
argument_list|()
return|;
block|}
DECL|field|file
specifier|private
specifier|final
name|Path
name|file
decl_stmt|;
DECL|field|delim
specifier|private
specifier|final
name|String
name|delim
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|codec
specifier|private
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
DECL|field|iterators
specifier|private
specifier|final
name|Map
argument_list|<
name|FRIterator
argument_list|,
name|BufferedReader
argument_list|>
name|iterators
decl_stmt|;
DECL|field|blockPoolID
specifier|private
specifier|final
name|String
name|blockPoolID
decl_stmt|;
DECL|method|TextReader (FileSystem fs, Path file, CompressionCodec codec, String delim)
specifier|protected
name|TextReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|file
argument_list|,
name|codec
argument_list|,
name|delim
argument_list|,
operator|new
name|IdentityHashMap
argument_list|<
name|FRIterator
argument_list|,
name|BufferedReader
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|TextReader (FileSystem fs, Path file, CompressionCodec codec, String delim, Map<FRIterator, BufferedReader> iterators)
name|TextReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|String
name|delim
parameter_list|,
name|Map
argument_list|<
name|FRIterator
argument_list|,
name|BufferedReader
argument_list|>
name|iterators
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|this
operator|.
name|delim
operator|=
name|delim
expr_stmt|;
name|this
operator|.
name|iterators
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
name|iterators
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockPoolID
operator|=
name|blockPoolIDFromFileName
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolve (Block ident)
specifier|public
name|Optional
argument_list|<
name|FileRegion
argument_list|>
name|resolve
parameter_list|(
name|Block
name|ident
parameter_list|)
throws|throws
name|IOException
block|{
comment|// consider layering index w/ composable format
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
name|i
init|=
name|iterator
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileRegion
name|f
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|getBlock
argument_list|()
operator|.
name|equals
argument_list|(
name|ident
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|f
argument_list|)
return|;
block|}
block|}
block|}
finally|finally
block|{
name|BufferedReader
name|r
init|=
name|iterators
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
comment|// null on last element
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|class|FRIterator
class|class
name|FRIterator
implements|implements
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
block|{
DECL|field|pending
specifier|private
name|FileRegion
name|pending
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pending
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|FileRegion
name|next
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|pending
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|FileRegion
name|ret
init|=
name|pending
decl_stmt|;
try|try
block|{
name|pending
operator|=
name|nextInternal
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|method|nextInternal (Iterator<FileRegion> i)
specifier|private
name|FileRegion
name|nextInternal
parameter_list|(
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|r
init|=
name|iterators
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|r
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|line
condition|)
block|{
name|iterators
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
index|[]
name|f
init|=
name|line
operator|.
name|split
argument_list|(
name|delim
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|length
operator|!=
literal|5
operator|&&
name|f
operator|.
name|length
operator|!=
literal|6
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid line: "
operator|+
name|line
argument_list|)
throw|;
block|}
name|byte
index|[]
name|nonce
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|length
operator|==
literal|6
condition|)
block|{
name|nonce
operator|=
name|f
index|[
literal|5
index|]
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FileRegion
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|f
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|f
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|f
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|f
index|[
literal|3
index|]
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|f
index|[
literal|4
index|]
argument_list|)
argument_list|,
name|nonce
argument_list|)
return|;
block|}
DECL|method|createStream ()
specifier|public
name|InputStream
name|createStream
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|i
init|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
name|i
operator|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
name|iterator
parameter_list|()
block|{
name|FRIterator
name|i
init|=
operator|new
name|FRIterator
argument_list|()
decl_stmt|;
try|try
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|createStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|iterators
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|i
operator|.
name|pending
operator|=
name|nextInternal
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|iterators
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|i
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|IOException
argument_list|>
name|ex
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|iterators
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|BufferedReader
argument_list|>
name|i
init|=
name|iterators
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|BufferedReader
name|r
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|iterators
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ex
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * This class is used as a writer for block maps which    * are stored as delimited text files.    */
DECL|class|TextWriter
specifier|public
specifier|static
class|class
name|TextWriter
extends|extends
name|Writer
argument_list|<
name|FileRegion
argument_list|>
block|{
comment|/**      * Interface for Writer options.      */
DECL|interface|Options
specifier|public
interface|interface
name|Options
extends|extends
name|Writer
operator|.
name|Options
block|{
DECL|method|codec (String codec)
name|Options
name|codec
parameter_list|(
name|String
name|codec
parameter_list|)
function_decl|;
DECL|method|dirName (Path dir)
name|Options
name|dirName
parameter_list|(
name|Path
name|dir
parameter_list|)
function_decl|;
DECL|method|delimiter (String delim)
name|Options
name|delimiter
parameter_list|(
name|String
name|delim
parameter_list|)
function_decl|;
block|}
DECL|method|defaults ()
specifier|public
specifier|static
name|WriterOptions
name|defaults
parameter_list|()
block|{
return|return
operator|new
name|WriterOptions
argument_list|()
return|;
block|}
DECL|field|delim
specifier|private
specifier|final
name|String
name|delim
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|java
operator|.
name|io
operator|.
name|Writer
name|out
decl_stmt|;
DECL|method|TextWriter (java.io.Writer out, String delim)
specifier|public
name|TextWriter
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Writer
name|out
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|delim
operator|=
name|delim
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|store (FileRegion token)
specifier|public
name|void
name|store
parameter_list|(
name|FileRegion
name|token
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Block
name|block
init|=
name|token
operator|.
name|getBlock
argument_list|()
decl_stmt|;
specifier|final
name|ProvidedStorageLocation
name|psl
init|=
name|token
operator|.
name|getProvidedStorageLocation
argument_list|()
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|psl
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|psl
operator|.
name|getOffset
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|psl
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|block
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|psl
operator|.
name|getNonce
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|delim
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|psl
operator|.
name|getNonce
argument_list|()
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Refresh not supported by "
operator|+
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|//nothing to do;
block|}
annotation|@
name|VisibleForTesting
DECL|method|blockPoolIDFromFileName (Path file)
specifier|public
specifier|static
name|String
name|blockPoolIDFromFileName
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|fileName
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|fileName
operator|.
name|substring
argument_list|(
literal|"blocks_"
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|fileNameFromBlockPoolID (String blockPoolID)
specifier|public
specifier|static
name|String
name|fileNameFromBlockPoolID
parameter_list|(
name|String
name|blockPoolID
parameter_list|)
block|{
return|return
literal|"blocks_"
operator|+
name|blockPoolID
operator|+
literal|".csv"
return|;
block|}
block|}
end_class

end_unit

