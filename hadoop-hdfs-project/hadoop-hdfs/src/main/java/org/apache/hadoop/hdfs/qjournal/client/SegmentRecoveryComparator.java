begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|PrepareRecoveryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|SegmentStateProto
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Booleans
import|;
end_import

begin_comment
comment|/**  * Compares responses to the prepareRecovery RPC. This is responsible for  * determining the correct length to recover.  */
end_comment

begin_class
DECL|class|SegmentRecoveryComparator
class|class
name|SegmentRecoveryComparator
implements|implements
name|Comparator
argument_list|<
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
argument_list|>
block|{
DECL|field|INSTANCE
specifier|static
specifier|final
name|SegmentRecoveryComparator
name|INSTANCE
init|=
operator|new
name|SegmentRecoveryComparator
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|compare ( Entry<AsyncLogger, PrepareRecoveryResponseProto> a, Entry<AsyncLogger, PrepareRecoveryResponseProto> b)
specifier|public
name|int
name|compare
parameter_list|(
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|a
parameter_list|,
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|b
parameter_list|)
block|{
name|PrepareRecoveryResponseProto
name|r1
init|=
name|a
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|PrepareRecoveryResponseProto
name|r2
init|=
name|b
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// A response that has data for a segment is always better than one
comment|// that doesn't.
if|if
condition|(
name|r1
operator|.
name|hasSegmentState
argument_list|()
operator|!=
name|r2
operator|.
name|hasSegmentState
argument_list|()
condition|)
block|{
return|return
name|Booleans
operator|.
name|compare
argument_list|(
name|r1
operator|.
name|hasSegmentState
argument_list|()
argument_list|,
name|r2
operator|.
name|hasSegmentState
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|r1
operator|.
name|hasSegmentState
argument_list|()
condition|)
block|{
comment|// Neither has a segment, so neither can be used for recover.
comment|// Call them equal.
return|return
literal|0
return|;
block|}
comment|// They both have a segment.
name|SegmentStateProto
name|r1Seg
init|=
name|r1
operator|.
name|getSegmentState
argument_list|()
decl_stmt|;
name|SegmentStateProto
name|r2Seg
init|=
name|r2
operator|.
name|getSegmentState
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|r1Seg
operator|.
name|getStartTxId
argument_list|()
operator|==
name|r2Seg
operator|.
name|getStartTxId
argument_list|()
argument_list|,
literal|"Should only be called with responses for corresponding segments: "
operator|+
literal|"%s and %s do not have the same start txid."
argument_list|,
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
comment|// If one is in-progress but the other is finalized,
comment|// the finalized one is greater.
if|if
condition|(
name|r1Seg
operator|.
name|getIsInProgress
argument_list|()
operator|!=
name|r2Seg
operator|.
name|getIsInProgress
argument_list|()
condition|)
block|{
return|return
name|Booleans
operator|.
name|compare
argument_list|(
operator|!
name|r1Seg
operator|.
name|getIsInProgress
argument_list|()
argument_list|,
operator|!
name|r2Seg
operator|.
name|getIsInProgress
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|r1Seg
operator|.
name|getIsInProgress
argument_list|()
condition|)
block|{
comment|// If both are finalized, they should match lengths
if|if
condition|(
name|r1Seg
operator|.
name|getEndTxId
argument_list|()
operator|!=
name|r2Seg
operator|.
name|getEndTxId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"finalized segs with different lengths: "
operator|+
name|r1
operator|+
literal|", "
operator|+
name|r2
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
comment|// Both are in-progress.
name|long
name|r1SeenEpoch
init|=
name|Math
operator|.
name|max
argument_list|(
name|r1
operator|.
name|getAcceptedInEpoch
argument_list|()
argument_list|,
name|r1
operator|.
name|getLastWriterEpoch
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|r2SeenEpoch
init|=
name|Math
operator|.
name|max
argument_list|(
name|r2
operator|.
name|getAcceptedInEpoch
argument_list|()
argument_list|,
name|r2
operator|.
name|getLastWriterEpoch
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|r1SeenEpoch
argument_list|,
name|r2SeenEpoch
argument_list|)
operator|.
name|compare
argument_list|(
name|r1
operator|.
name|getSegmentState
argument_list|()
operator|.
name|getEndTxId
argument_list|()
argument_list|,
name|r2
operator|.
name|getSegmentState
argument_list|()
operator|.
name|getEndTxId
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
block|}
end_class

end_unit

