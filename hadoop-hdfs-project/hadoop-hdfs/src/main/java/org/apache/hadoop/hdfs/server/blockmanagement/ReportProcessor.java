begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
operator|.
name|BlockReportIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Handles common operations of processing a block report from a datanode,  * generating a diff of updates to the BlocksMap, and then feeding the diff  * to the subclass-implemented hooks.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
DECL|class|ReportProcessor
specifier|public
specifier|abstract
class|class
name|ReportProcessor
block|{
DECL|field|blockLog
specifier|static
specifier|final
name|Log
name|blockLog
init|=
name|NameNode
operator|.
name|blockStateChangeLog
decl_stmt|;
DECL|field|className
specifier|private
specifier|final
name|String
name|className
init|=
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
comment|// Max number of blocks to log info about during a block report.
DECL|field|maxNumBlocksToLog
specifier|final
name|long
name|maxNumBlocksToLog
decl_stmt|;
DECL|method|blockLogDebug (String message)
name|void
name|blockLogDebug
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|blockLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|blockLog
operator|.
name|info
argument_list|(
literal|"BLOCK* "
operator|+
name|className
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|blockLogInfo (String message)
name|void
name|blockLogInfo
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|blockLog
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|blockLog
operator|.
name|info
argument_list|(
literal|"BLOCK* "
operator|+
name|className
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|blockLogWarn (String message)
name|void
name|blockLogWarn
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|blockLog
operator|.
name|warn
argument_list|(
literal|"BLOCK* "
operator|+
name|className
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|logAddStoredBlock (BlockInfo storedBlock, DatanodeDescriptor node)
name|void
name|logAddStoredBlock
parameter_list|(
name|BlockInfo
name|storedBlock
parameter_list|,
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|blockLog
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"BLOCK* "
operator|+
name|className
operator|+
literal|"#addStoredBlock: blockMap updated: "
argument_list|)
operator|.
name|append
argument_list|(
name|node
argument_list|)
operator|.
name|append
argument_list|(
literal|" is added to "
argument_list|)
expr_stmt|;
name|storedBlock
operator|.
name|appendStringTo
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" size "
argument_list|)
operator|.
name|append
argument_list|(
name|storedBlock
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|blockLog
operator|.
name|info
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
DECL|method|ReportProcessor (Configuration conf)
specifier|public
name|ReportProcessor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|maxNumBlocksToLog
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MAX_NUM_BLOCKS_TO_LOG_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MAX_NUM_BLOCKS_TO_LOG_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Processes a block report from a datanode, updating the block to    * datanode mapping, adding new blocks and removing invalid ones.    * Also computes and queues new replication and invalidation work.    * @param node Datanode sending the block report    * @param report as list of longs    * @throws IOException    */
DECL|method|processReport (final DatanodeDescriptor node, final BlockListAsLongs report)
specifier|final
name|void
name|processReport
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|node
parameter_list|,
specifier|final
name|BlockListAsLongs
name|report
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Normal case:
comment|// Modify the (block-->datanode) map, according to the difference
comment|// between the old and new block report.
comment|//
name|Collection
argument_list|<
name|BlockInfo
argument_list|>
name|toAdd
init|=
operator|new
name|LinkedList
argument_list|<
name|BlockInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Block
argument_list|>
name|toRemove
init|=
operator|new
name|LinkedList
argument_list|<
name|Block
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Block
argument_list|>
name|toInvalidate
init|=
operator|new
name|LinkedList
argument_list|<
name|Block
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|BlockToMarkCorrupt
argument_list|>
name|toCorrupt
init|=
operator|new
name|LinkedList
argument_list|<
name|BlockToMarkCorrupt
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|StatefulBlockInfo
argument_list|>
name|toUC
init|=
operator|new
name|LinkedList
argument_list|<
name|StatefulBlockInfo
argument_list|>
argument_list|()
decl_stmt|;
name|reportDiff
argument_list|(
name|node
argument_list|,
name|report
argument_list|,
name|toAdd
argument_list|,
name|toRemove
argument_list|,
name|toInvalidate
argument_list|,
name|toCorrupt
argument_list|,
name|toUC
argument_list|)
expr_stmt|;
comment|// Process the blocks on each queue
for|for
control|(
name|StatefulBlockInfo
name|b
range|:
name|toUC
control|)
block|{
name|addStoredBlockUnderConstruction
argument_list|(
name|b
operator|.
name|storedBlock
argument_list|,
name|node
argument_list|,
name|b
operator|.
name|reportedState
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Block
name|b
range|:
name|toRemove
control|)
block|{
name|removeStoredBlock
argument_list|(
name|b
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|int
name|numBlocksLogged
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockInfo
name|b
range|:
name|toAdd
control|)
block|{
name|addStoredBlock
argument_list|(
name|b
argument_list|,
name|node
argument_list|,
literal|null
argument_list|,
name|numBlocksLogged
operator|<
name|maxNumBlocksToLog
argument_list|)
expr_stmt|;
name|numBlocksLogged
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|numBlocksLogged
operator|>
name|maxNumBlocksToLog
condition|)
block|{
name|blockLogInfo
argument_list|(
literal|"#processReport: logged"
operator|+
literal|" info for "
operator|+
name|maxNumBlocksToLog
operator|+
literal|" of "
operator|+
name|numBlocksLogged
operator|+
literal|" reported."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Block
name|b
range|:
name|toInvalidate
control|)
block|{
name|blockLogInfo
argument_list|(
literal|"#processReport: "
operator|+
name|b
operator|+
literal|" on "
operator|+
name|node
operator|+
literal|" size "
operator|+
name|b
operator|.
name|getNumBytes
argument_list|()
operator|+
literal|" does not belong to any file"
argument_list|)
expr_stmt|;
name|addToInvalidates
argument_list|(
name|b
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BlockToMarkCorrupt
name|b
range|:
name|toCorrupt
control|)
block|{
name|markBlockAsCorrupt
argument_list|(
name|b
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compute the difference between the current state of the datanode in the    * BlocksMap and the new reported state, categorizing changes into    * different groups (e.g. new blocks to be added, blocks that were removed,    * blocks that should be invalidated, etc.).    */
DECL|method|reportDiff (DatanodeDescriptor dn, BlockListAsLongs newReport, Collection<BlockInfo> toAdd, Collection<Block> toRemove, Collection<Block> toInvalidate, Collection<BlockToMarkCorrupt> toCorrupt, Collection<StatefulBlockInfo> toUC)
specifier|private
name|void
name|reportDiff
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockListAsLongs
name|newReport
parameter_list|,
name|Collection
argument_list|<
name|BlockInfo
argument_list|>
name|toAdd
parameter_list|,
comment|// add to DatanodeDescriptor
name|Collection
argument_list|<
name|Block
argument_list|>
name|toRemove
parameter_list|,
comment|// remove from DatanodeDescriptor
name|Collection
argument_list|<
name|Block
argument_list|>
name|toInvalidate
parameter_list|,
comment|// should be removed from DN
name|Collection
argument_list|<
name|BlockToMarkCorrupt
argument_list|>
name|toCorrupt
parameter_list|,
comment|// add to corrupt replicas list
name|Collection
argument_list|<
name|StatefulBlockInfo
argument_list|>
name|toUC
parameter_list|)
block|{
comment|// add to under-construction list
comment|// place a delimiter in the list which separates blocks
comment|// that have been reported from those that have not
name|BlockInfo
name|delimiter
init|=
operator|new
name|BlockInfo
argument_list|(
operator|new
name|Block
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
name|addBlock
argument_list|(
name|dn
argument_list|,
name|delimiter
argument_list|)
decl_stmt|;
assert|assert
name|added
operator|:
literal|"Delimiting block cannot be present in the node"
assert|;
name|int
name|headIndex
init|=
literal|0
decl_stmt|;
comment|//currently the delimiter is in the head of the list
name|int
name|curIndex
decl_stmt|;
if|if
condition|(
name|newReport
operator|==
literal|null
condition|)
block|{
name|newReport
operator|=
operator|new
name|BlockListAsLongs
argument_list|()
expr_stmt|;
block|}
comment|// scan the report and process newly reported blocks
name|BlockReportIterator
name|itBR
init|=
name|newReport
operator|.
name|getBlockReportIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itBR
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Block
name|iblk
init|=
name|itBR
operator|.
name|next
argument_list|()
decl_stmt|;
name|ReplicaState
name|iState
init|=
name|itBR
operator|.
name|getCurrentReplicaState
argument_list|()
decl_stmt|;
name|BlockInfo
name|storedBlock
init|=
name|processReportedBlock
argument_list|(
name|dn
argument_list|,
name|iblk
argument_list|,
name|iState
argument_list|,
name|toAdd
argument_list|,
name|toInvalidate
argument_list|,
name|toCorrupt
argument_list|,
name|toUC
argument_list|)
decl_stmt|;
comment|// move block to the head of the list
if|if
condition|(
name|storedBlock
operator|!=
literal|null
operator|&&
operator|(
name|curIndex
operator|=
name|storedBlock
operator|.
name|findDatanode
argument_list|(
name|dn
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|headIndex
operator|=
name|moveBlockToHead
argument_list|(
name|dn
argument_list|,
name|storedBlock
argument_list|,
name|curIndex
argument_list|,
name|headIndex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// collect blocks that have not been reported
comment|// all of them are next to the delimiter
name|Iterator
argument_list|<
name|?
extends|extends
name|Block
argument_list|>
name|it
init|=
operator|new
name|DatanodeDescriptor
operator|.
name|BlockIterator
argument_list|(
name|delimiter
operator|.
name|getNext
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dn
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|removeBlock
argument_list|(
name|dn
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
block|}
comment|// Operations on the blocks on a datanode
DECL|method|moveBlockToHead (DatanodeDescriptor dn, BlockInfo storedBlock, int curIndex, int headIndex)
specifier|abstract
name|int
name|moveBlockToHead
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockInfo
name|storedBlock
parameter_list|,
name|int
name|curIndex
parameter_list|,
name|int
name|headIndex
parameter_list|)
function_decl|;
DECL|method|addBlock (DatanodeDescriptor dn, BlockInfo block)
specifier|abstract
name|boolean
name|addBlock
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockInfo
name|block
parameter_list|)
function_decl|;
DECL|method|removeBlock (DatanodeDescriptor dn, BlockInfo block)
specifier|abstract
name|boolean
name|removeBlock
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|BlockInfo
name|block
parameter_list|)
function_decl|;
comment|// Cache report processing
DECL|method|processReportedBlock (DatanodeDescriptor dn, Block iblk, ReplicaState iState, Collection<BlockInfo> toAdd, Collection<Block> toInvalidate, Collection<BlockToMarkCorrupt> toCorrupt, Collection<StatefulBlockInfo> toUC)
specifier|abstract
name|BlockInfo
name|processReportedBlock
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|Block
name|iblk
parameter_list|,
name|ReplicaState
name|iState
parameter_list|,
name|Collection
argument_list|<
name|BlockInfo
argument_list|>
name|toAdd
parameter_list|,
name|Collection
argument_list|<
name|Block
argument_list|>
name|toInvalidate
parameter_list|,
name|Collection
argument_list|<
name|BlockToMarkCorrupt
argument_list|>
name|toCorrupt
parameter_list|,
name|Collection
argument_list|<
name|StatefulBlockInfo
argument_list|>
name|toUC
parameter_list|)
function_decl|;
comment|// Hooks for processing the cache report diff
DECL|method|addStoredBlock (final BlockInfo block, DatanodeDescriptor node, DatanodeDescriptor delNodeHint, boolean logEveryBlock)
specifier|abstract
name|Block
name|addStoredBlock
parameter_list|(
specifier|final
name|BlockInfo
name|block
parameter_list|,
name|DatanodeDescriptor
name|node
parameter_list|,
name|DatanodeDescriptor
name|delNodeHint
parameter_list|,
name|boolean
name|logEveryBlock
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|removeStoredBlock (Block block, DatanodeDescriptor node)
specifier|abstract
name|void
name|removeStoredBlock
parameter_list|(
name|Block
name|block
parameter_list|,
name|DatanodeDescriptor
name|node
parameter_list|)
function_decl|;
DECL|method|markBlockAsCorrupt (BlockToMarkCorrupt b, DatanodeInfo dn)
specifier|abstract
name|void
name|markBlockAsCorrupt
parameter_list|(
name|BlockToMarkCorrupt
name|b
parameter_list|,
name|DatanodeInfo
name|dn
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|addToInvalidates (final Block b, final DatanodeInfo node)
specifier|abstract
name|void
name|addToInvalidates
parameter_list|(
specifier|final
name|Block
name|b
parameter_list|,
specifier|final
name|DatanodeInfo
name|node
parameter_list|)
function_decl|;
DECL|method|addStoredBlockUnderConstruction ( BlockInfoUnderConstruction storedBlock, DatanodeDescriptor node, ReplicaState reportedState)
specifier|abstract
name|void
name|addStoredBlockUnderConstruction
parameter_list|(
name|BlockInfoUnderConstruction
name|storedBlock
parameter_list|,
name|DatanodeDescriptor
name|node
parameter_list|,
name|ReplicaState
name|reportedState
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * BlockToMarkCorrupt is used to build the "toCorrupt" list, which is a    * list of blocks that should be considered corrupt due to a block report.    */
DECL|class|BlockToMarkCorrupt
specifier|static
class|class
name|BlockToMarkCorrupt
block|{
comment|/** The corrupted block in a datanode. */
DECL|field|corrupted
specifier|final
name|BlockInfo
name|corrupted
decl_stmt|;
comment|/** The corresponding block stored in the BlockManager. */
DECL|field|stored
specifier|final
name|BlockInfo
name|stored
decl_stmt|;
comment|/** The reason to mark corrupt. */
DECL|field|reason
specifier|final
name|String
name|reason
decl_stmt|;
DECL|method|BlockToMarkCorrupt (BlockInfo corrupted, BlockInfo stored, String reason)
name|BlockToMarkCorrupt
parameter_list|(
name|BlockInfo
name|corrupted
parameter_list|,
name|BlockInfo
name|stored
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|corrupted
argument_list|,
literal|"corrupted is null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|stored
argument_list|,
literal|"stored is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|corrupted
operator|=
name|corrupted
expr_stmt|;
name|this
operator|.
name|stored
operator|=
name|stored
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
block|}
DECL|method|BlockToMarkCorrupt (BlockInfo stored, String reason)
name|BlockToMarkCorrupt
parameter_list|(
name|BlockInfo
name|stored
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|this
argument_list|(
name|stored
argument_list|,
name|stored
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockToMarkCorrupt (BlockInfo stored, long gs, String reason)
name|BlockToMarkCorrupt
parameter_list|(
name|BlockInfo
name|stored
parameter_list|,
name|long
name|gs
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|BlockInfo
argument_list|(
name|stored
argument_list|)
argument_list|,
name|stored
argument_list|,
name|reason
argument_list|)
expr_stmt|;
comment|//the corrupted block in datanode has a different generation stamp
name|corrupted
operator|.
name|setGenerationStamp
argument_list|(
name|gs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|corrupted
operator|+
literal|"("
operator|+
operator|(
name|corrupted
operator|==
name|stored
condition|?
literal|"same as stored"
else|:
literal|"stored="
operator|+
name|stored
operator|)
operator|+
literal|")"
return|;
block|}
block|}
comment|/**    * StatefulBlockInfo is used to build the "toUC" list, which is a list of    * updates to the information about under-construction blocks.    * Besides the block in question, it provides the ReplicaState    * reported by the datanode in the block report.    */
DECL|class|StatefulBlockInfo
specifier|static
class|class
name|StatefulBlockInfo
block|{
DECL|field|storedBlock
specifier|final
name|BlockInfoUnderConstruction
name|storedBlock
decl_stmt|;
DECL|field|reportedState
specifier|final
name|ReplicaState
name|reportedState
decl_stmt|;
DECL|method|StatefulBlockInfo (BlockInfoUnderConstruction storedBlock, ReplicaState reportedState)
name|StatefulBlockInfo
parameter_list|(
name|BlockInfoUnderConstruction
name|storedBlock
parameter_list|,
name|ReplicaState
name|reportedState
parameter_list|)
block|{
name|this
operator|.
name|storedBlock
operator|=
name|storedBlock
expr_stmt|;
name|this
operator|.
name|reportedState
operator|=
name|reportedState
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

