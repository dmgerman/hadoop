begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|JournalProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|AcceptRecoveryRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|AcceptRecoveryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|CanRollBackRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|CanRollBackResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|DiscardSegmentsRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|DiscardSegmentsResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|DoFinalizeRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|DoFinalizeResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|DoPreUpgradeRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|DoPreUpgradeResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|DoRollbackRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|DoRollbackResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|DoUpgradeRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|DoUpgradeResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|FinalizeLogSegmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|FinalizeLogSegmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|FormatRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|FormatResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|GetEditLogManifestRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|GetEditLogManifestResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|GetJournalCTimeRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|GetJournalCTimeResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|GetJournalStateRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|GetJournalStateResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|HeartbeatRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|HeartbeatResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|IsFormattedRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|IsFormattedResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|JournalIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|JournalRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|JournalResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|NewEpochRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|NewEpochResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|PrepareRecoveryRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|PrepareRecoveryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|PurgeLogsRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|PurgeLogsResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|StartLogSegmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|StartLogSegmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|RequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeLayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|JournalProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Implementation for protobuf service that forwards requests  * received on {@link JournalProtocolPB} to the   * {@link JournalProtocol} server implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|QJournalProtocolServerSideTranslatorPB
specifier|public
class|class
name|QJournalProtocolServerSideTranslatorPB
implements|implements
name|QJournalProtocolPB
block|{
comment|/** Server side implementation to delegate the requests to */
DECL|field|impl
specifier|private
specifier|final
name|QJournalProtocol
name|impl
decl_stmt|;
DECL|field|VOID_JOURNAL_RESPONSE
specifier|private
specifier|final
specifier|static
name|JournalResponseProto
name|VOID_JOURNAL_RESPONSE
init|=
name|JournalResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|StartLogSegmentResponseProto
DECL|field|VOID_START_LOG_SEGMENT_RESPONSE
name|VOID_START_LOG_SEGMENT_RESPONSE
init|=
name|StartLogSegmentResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|QJournalProtocolServerSideTranslatorPB (QJournalProtocol impl)
specifier|public
name|QJournalProtocolServerSideTranslatorPB
parameter_list|(
name|QJournalProtocol
name|impl
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isFormatted (RpcController controller, IsFormattedRequestProto request)
specifier|public
name|IsFormattedResponseProto
name|isFormatted
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IsFormattedRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|boolean
name|ret
init|=
name|impl
operator|.
name|isFormatted
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|hasNameServiceId
argument_list|()
condition|?
name|request
operator|.
name|getNameServiceId
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
return|return
name|IsFormattedResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setIsFormatted
argument_list|(
name|ret
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getJournalState (RpcController controller, GetJournalStateRequestProto request)
specifier|public
name|GetJournalStateResponseProto
name|getJournalState
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetJournalStateRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|impl
operator|.
name|getJournalState
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|hasNameServiceId
argument_list|()
condition|?
name|request
operator|.
name|getNameServiceId
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
DECL|method|convert (JournalIdProto jid)
specifier|private
name|String
name|convert
parameter_list|(
name|JournalIdProto
name|jid
parameter_list|)
block|{
return|return
name|jid
operator|.
name|getIdentifier
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newEpoch (RpcController controller, NewEpochRequestProto request)
specifier|public
name|NewEpochResponseProto
name|newEpoch
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|NewEpochRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|impl
operator|.
name|newEpoch
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|request
operator|.
name|hasNameServiceId
argument_list|()
condition|?
name|request
operator|.
name|getNameServiceId
argument_list|()
else|:
literal|null
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getNsInfo
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getEpoch
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
DECL|method|format (RpcController controller, FormatRequestProto request)
specifier|public
name|FormatResponseProto
name|format
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|FormatRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|format
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|request
operator|.
name|hasNameServiceId
argument_list|()
condition|?
name|request
operator|.
name|getNameServiceId
argument_list|()
else|:
literal|null
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getNsInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|FormatResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/** @see JournalProtocol#journal */
annotation|@
name|Override
DECL|method|journal (RpcController unused, JournalRequestProto req)
specifier|public
name|JournalResponseProto
name|journal
parameter_list|(
name|RpcController
name|unused
parameter_list|,
name|JournalRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|journal
argument_list|(
name|convert
argument_list|(
name|req
operator|.
name|getReqInfo
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getSegmentTxnId
argument_list|()
argument_list|,
name|req
operator|.
name|getFirstTxnId
argument_list|()
argument_list|,
name|req
operator|.
name|getNumTxns
argument_list|()
argument_list|,
name|req
operator|.
name|getRecords
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|VOID_JOURNAL_RESPONSE
return|;
block|}
comment|/** @see JournalProtocol#heartbeat */
annotation|@
name|Override
DECL|method|heartbeat (RpcController controller, HeartbeatRequestProto req)
specifier|public
name|HeartbeatResponseProto
name|heartbeat
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|HeartbeatRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|heartbeat
argument_list|(
name|convert
argument_list|(
name|req
operator|.
name|getReqInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|HeartbeatResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
comment|/** @see JournalProtocol#startLogSegment */
annotation|@
name|Override
DECL|method|startLogSegment (RpcController controller, StartLogSegmentRequestProto req)
specifier|public
name|StartLogSegmentResponseProto
name|startLogSegment
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|StartLogSegmentRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|int
name|layoutVersion
init|=
name|req
operator|.
name|hasLayoutVersion
argument_list|()
condition|?
name|req
operator|.
name|getLayoutVersion
argument_list|()
else|:
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
decl_stmt|;
name|impl
operator|.
name|startLogSegment
argument_list|(
name|convert
argument_list|(
name|req
operator|.
name|getReqInfo
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getTxid
argument_list|()
argument_list|,
name|layoutVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|VOID_START_LOG_SEGMENT_RESPONSE
return|;
block|}
annotation|@
name|Override
DECL|method|finalizeLogSegment ( RpcController controller, FinalizeLogSegmentRequestProto req)
specifier|public
name|FinalizeLogSegmentResponseProto
name|finalizeLogSegment
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|FinalizeLogSegmentRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|finalizeLogSegment
argument_list|(
name|convert
argument_list|(
name|req
operator|.
name|getReqInfo
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|req
operator|.
name|getEndTxId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|FinalizeLogSegmentResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|purgeLogs (RpcController controller, PurgeLogsRequestProto req)
specifier|public
name|PurgeLogsResponseProto
name|purgeLogs
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|PurgeLogsRequestProto
name|req
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|purgeLogsOlderThan
argument_list|(
name|convert
argument_list|(
name|req
operator|.
name|getReqInfo
argument_list|()
argument_list|)
argument_list|,
name|req
operator|.
name|getMinTxIdToKeep
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|PurgeLogsResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getEditLogManifest ( RpcController controller, GetEditLogManifestRequestProto request)
specifier|public
name|GetEditLogManifestResponseProto
name|getEditLogManifest
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetEditLogManifestRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|impl
operator|.
name|getEditLogManifest
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|request
operator|.
name|hasNameServiceId
argument_list|()
condition|?
name|request
operator|.
name|getNameServiceId
argument_list|()
else|:
literal|null
argument_list|,
name|request
operator|.
name|getSinceTxId
argument_list|()
argument_list|,
name|request
operator|.
name|getInProgressOk
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|prepareRecovery (RpcController controller, PrepareRecoveryRequestProto request)
specifier|public
name|PrepareRecoveryResponseProto
name|prepareRecovery
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|PrepareRecoveryRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|impl
operator|.
name|prepareRecovery
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getReqInfo
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getSegmentTxId
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|acceptRecovery (RpcController controller, AcceptRecoveryRequestProto request)
specifier|public
name|AcceptRecoveryResponseProto
name|acceptRecovery
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AcceptRecoveryRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|acceptRecovery
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getReqInfo
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getStateToAccept
argument_list|()
argument_list|,
operator|new
name|URL
argument_list|(
name|request
operator|.
name|getFromURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|AcceptRecoveryResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|convert ( QJournalProtocolProtos.RequestInfoProto reqInfo)
specifier|private
name|RequestInfo
name|convert
parameter_list|(
name|QJournalProtocolProtos
operator|.
name|RequestInfoProto
name|reqInfo
parameter_list|)
block|{
return|return
operator|new
name|RequestInfo
argument_list|(
name|reqInfo
operator|.
name|getJournalId
argument_list|()
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|reqInfo
operator|.
name|hasNameServiceId
argument_list|()
condition|?
name|reqInfo
operator|.
name|getNameServiceId
argument_list|()
else|:
literal|null
argument_list|,
name|reqInfo
operator|.
name|getEpoch
argument_list|()
argument_list|,
name|reqInfo
operator|.
name|getIpcSerialNumber
argument_list|()
argument_list|,
name|reqInfo
operator|.
name|hasCommittedTxId
argument_list|()
condition|?
name|reqInfo
operator|.
name|getCommittedTxId
argument_list|()
else|:
name|HdfsServerConstants
operator|.
name|INVALID_TXID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doPreUpgrade (RpcController controller, DoPreUpgradeRequestProto request)
specifier|public
name|DoPreUpgradeResponseProto
name|doPreUpgrade
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DoPreUpgradeRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|doPreUpgrade
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|DoPreUpgradeResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doUpgrade (RpcController controller, DoUpgradeRequestProto request)
specifier|public
name|DoUpgradeResponseProto
name|doUpgrade
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DoUpgradeRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|StorageInfo
name|si
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getSInfo
argument_list|()
argument_list|,
name|NodeType
operator|.
name|JOURNAL_NODE
argument_list|)
decl_stmt|;
try|try
block|{
name|impl
operator|.
name|doUpgrade
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
argument_list|)
argument_list|,
name|si
argument_list|)
expr_stmt|;
return|return
name|DoUpgradeResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doFinalize (RpcController controller, DoFinalizeRequestProto request)
specifier|public
name|DoFinalizeResponseProto
name|doFinalize
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DoFinalizeRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|doFinalize
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|hasNameServiceId
argument_list|()
condition|?
name|request
operator|.
name|getNameServiceId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
name|DoFinalizeResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|canRollBack (RpcController controller, CanRollBackRequestProto request)
specifier|public
name|CanRollBackResponseProto
name|canRollBack
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CanRollBackRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|StorageInfo
name|si
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getStorage
argument_list|()
argument_list|,
name|NodeType
operator|.
name|JOURNAL_NODE
argument_list|)
decl_stmt|;
name|Boolean
name|result
init|=
name|impl
operator|.
name|canRollBack
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|hasNameServiceId
argument_list|()
condition|?
name|request
operator|.
name|getNameServiceId
argument_list|()
else|:
literal|null
argument_list|,
name|si
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getPrevStorage
argument_list|()
argument_list|,
name|NodeType
operator|.
name|JOURNAL_NODE
argument_list|)
argument_list|,
name|request
operator|.
name|getTargetLayoutVersion
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CanRollBackResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCanRollBack
argument_list|(
name|result
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doRollback (RpcController controller, DoRollbackRequestProto request)
specifier|public
name|DoRollbackResponseProto
name|doRollback
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DoRollbackRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|doRollback
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNameserviceId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|DoRollbackResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|discardSegments ( RpcController controller, DiscardSegmentsRequestProto request)
specifier|public
name|DiscardSegmentsResponseProto
name|discardSegments
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|DiscardSegmentsRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|discardSegments
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|hasNameServiceId
argument_list|()
condition|?
name|request
operator|.
name|getNameServiceId
argument_list|()
else|:
literal|null
argument_list|,
name|request
operator|.
name|getStartTxId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|DiscardSegmentsResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getJournalCTime (RpcController controller, GetJournalCTimeRequestProto request)
specifier|public
name|GetJournalCTimeResponseProto
name|getJournalCTime
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetJournalCTimeRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|Long
name|resultCTime
init|=
name|impl
operator|.
name|getJournalCTime
argument_list|(
name|convert
argument_list|(
name|request
operator|.
name|getJid
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getNameServiceId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|GetJournalCTimeResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResultCTime
argument_list|(
name|resultCTime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

