begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Caches frequently used names to facilitate reuse.  * (example: byte[] representation of the file name in {@link INode}).  *   * This class is used by initially adding all the file names. Cache  * tracks the number of times a name is used in a transient map. It promotes   * a name used more than {@code useThreshold} to the cache.  *   * One all the names are added, {@link #initialized()} should be called to  * finish initialization. The transient map where use count is tracked is  * discarded and cache is ready for use.  *   *<p>  * This class must be synchronized externally.  *   * @param<K> name to be added to the cache  */
end_comment

begin_class
DECL|class|NameCache
class|class
name|NameCache
parameter_list|<
name|K
parameter_list|>
block|{
comment|/**    * Class for tracking use count of a name    */
DECL|class|UseCount
specifier|private
class|class
name|UseCount
block|{
DECL|field|count
name|int
name|count
decl_stmt|;
DECL|field|value
specifier|final
name|K
name|value
decl_stmt|;
comment|// Internal value for the name
DECL|method|UseCount (final K value)
name|UseCount
parameter_list|(
specifier|final
name|K
name|value
parameter_list|)
block|{
name|count
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|increment ()
name|void
name|increment
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
DECL|method|get ()
name|int
name|get
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NameCache
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** indicates initialization is in progress */
DECL|field|initialized
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
comment|/** names used more than {@code useThreshold} is added to the cache */
DECL|field|useThreshold
specifier|private
specifier|final
name|int
name|useThreshold
decl_stmt|;
comment|/** of times a cache look up was successful */
DECL|field|lookups
specifier|private
name|int
name|lookups
init|=
literal|0
decl_stmt|;
comment|/** Cached names */
DECL|field|cache
specifier|final
name|HashMap
argument_list|<
name|K
argument_list|,
name|K
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|K
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Names and with number of occurrences tracked during initialization */
DECL|field|transientMap
name|Map
argument_list|<
name|K
argument_list|,
name|UseCount
argument_list|>
name|transientMap
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|UseCount
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Constructor    * @param useThreshold names occurring more than this is promoted to the    *          cache    */
DECL|method|NameCache (int useThreshold)
name|NameCache
parameter_list|(
name|int
name|useThreshold
parameter_list|)
block|{
name|this
operator|.
name|useThreshold
operator|=
name|useThreshold
expr_stmt|;
block|}
comment|/**    * Add a given name to the cache or track use count.    * exist. If the name already exists, then the internal value is returned.    *     * @param name name to be looked up    * @return internal value for the name if found; otherwise null    */
DECL|method|put (final K name)
name|K
name|put
parameter_list|(
specifier|final
name|K
name|name
parameter_list|)
block|{
name|K
name|internal
init|=
name|cache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|internal
operator|!=
literal|null
condition|)
block|{
name|lookups
operator|++
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|// Track the usage count only during initialization
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|UseCount
name|useCount
init|=
name|transientMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|useCount
operator|!=
literal|null
condition|)
block|{
name|useCount
operator|.
name|increment
argument_list|()
expr_stmt|;
if|if
condition|(
name|useCount
operator|.
name|get
argument_list|()
operator|>=
name|useThreshold
condition|)
block|{
name|promote
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|useCount
operator|.
name|value
return|;
block|}
name|useCount
operator|=
operator|new
name|UseCount
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|transientMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|useCount
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Lookup count when a lookup for a name returned cached object    * @return number of successful lookups    */
DECL|method|getLookupCount ()
name|int
name|getLookupCount
parameter_list|()
block|{
return|return
name|lookups
return|;
block|}
comment|/**    * Size of the cache    * @return Number of names stored in the cache    */
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|cache
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Mark the name cache as initialized. The use count is no longer tracked    * and the transient map used for initializing the cache is discarded to    * save heap space.    */
DECL|method|initialized ()
name|void
name|initialized
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"initialized with "
operator|+
name|size
argument_list|()
operator|+
literal|" entries "
operator|+
name|lookups
operator|+
literal|" lookups"
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
name|transientMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|transientMap
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Promote a frequently used name to the cache */
DECL|method|promote (final K name)
specifier|private
name|void
name|promote
parameter_list|(
specifier|final
name|K
name|name
parameter_list|)
block|{
name|transientMap
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|lookups
operator|+=
name|useThreshold
expr_stmt|;
block|}
block|}
end_class

end_unit

