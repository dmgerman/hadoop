begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * BlockRecoveryCommand is an instruction to a data-node to recover  * the specified blocks.  *  * The data-node that receives this command treats itself as a primary  * data-node in the recover process.  *  * Block recovery is identified by a recoveryId, which is also the new  * generation stamp, which the block will have after the recovery succeeds.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BlockRecoveryCommand
specifier|public
class|class
name|BlockRecoveryCommand
extends|extends
name|DatanodeCommand
block|{
DECL|field|recoveringBlocks
specifier|final
name|Collection
argument_list|<
name|RecoveringBlock
argument_list|>
name|recoveringBlocks
decl_stmt|;
comment|/**    * This is a block with locations from which it should be recovered    * and the new generation stamp, which the block will have after     * successful recovery.    *     * The new generation stamp of the block, also plays role of the recovery id.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|RecoveringBlock
specifier|public
specifier|static
class|class
name|RecoveringBlock
extends|extends
name|LocatedBlock
block|{
DECL|field|truncate
specifier|private
name|boolean
name|truncate
decl_stmt|;
DECL|field|newGenerationStamp
specifier|private
specifier|final
name|long
name|newGenerationStamp
decl_stmt|;
comment|/**      * Create RecoveringBlock.      */
DECL|method|RecoveringBlock (ExtendedBlock b, DatanodeInfo[] locs, long newGS)
specifier|public
name|RecoveringBlock
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|DatanodeInfo
index|[]
name|locs
parameter_list|,
name|long
name|newGS
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|,
name|locs
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// startOffset is unknown
name|this
operator|.
name|newGenerationStamp
operator|=
name|newGS
expr_stmt|;
block|}
comment|/**      * RecoveryingBlock with truncate option.      */
DECL|method|RecoveringBlock (ExtendedBlock b, DatanodeInfo[] locs, long newGS, boolean truncate)
specifier|public
name|RecoveringBlock
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|DatanodeInfo
index|[]
name|locs
parameter_list|,
name|long
name|newGS
parameter_list|,
name|boolean
name|truncate
parameter_list|)
block|{
name|this
argument_list|(
name|b
argument_list|,
name|locs
argument_list|,
name|newGS
argument_list|)
expr_stmt|;
name|this
operator|.
name|truncate
operator|=
name|truncate
expr_stmt|;
block|}
comment|/**      * Return the new generation stamp of the block,      * which also plays role of the recovery id.      */
DECL|method|getNewGenerationStamp ()
specifier|public
name|long
name|getNewGenerationStamp
parameter_list|()
block|{
return|return
name|newGenerationStamp
return|;
block|}
comment|/**      * Return whether to truncate the block to the ExtendedBlock's length.      */
DECL|method|getTruncateFlag ()
specifier|public
name|boolean
name|getTruncateFlag
parameter_list|()
block|{
return|return
name|truncate
return|;
block|}
block|}
comment|/**    * Create empty BlockRecoveryCommand.    */
DECL|method|BlockRecoveryCommand ()
specifier|public
name|BlockRecoveryCommand
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create BlockRecoveryCommand with    * the specified capacity for recovering blocks.    */
DECL|method|BlockRecoveryCommand (int capacity)
specifier|public
name|BlockRecoveryCommand
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|RecoveringBlock
argument_list|>
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockRecoveryCommand (Collection<RecoveringBlock> blocks)
specifier|public
name|BlockRecoveryCommand
parameter_list|(
name|Collection
argument_list|<
name|RecoveringBlock
argument_list|>
name|blocks
parameter_list|)
block|{
name|super
argument_list|(
name|DatanodeProtocol
operator|.
name|DNA_RECOVERBLOCK
argument_list|)
expr_stmt|;
name|recoveringBlocks
operator|=
name|blocks
expr_stmt|;
block|}
comment|/**    * Return the list of recovering blocks.    */
DECL|method|getRecoveringBlocks ()
specifier|public
name|Collection
argument_list|<
name|RecoveringBlock
argument_list|>
name|getRecoveringBlocks
parameter_list|()
block|{
return|return
name|recoveringBlocks
return|;
block|}
comment|/**    * Add recovering block to the command.    */
DECL|method|add (RecoveringBlock block)
specifier|public
name|void
name|add
parameter_list|(
name|RecoveringBlock
name|block
parameter_list|)
block|{
name|recoveringBlocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"BlockRecoveryCommand(\n  "
argument_list|)
expr_stmt|;
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n  "
argument_list|)
operator|.
name|appendTo
argument_list|(
name|sb
argument_list|,
name|recoveringBlocks
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n)"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

