begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|ReadOnly
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|AlignmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcRequestHeaderProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|RpcHeaderProtos
operator|.
name|RpcResponseHeaderProto
import|;
end_import

begin_comment
comment|/**  * This is the server side implementation responsible for passing  * state alignment info to clients.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|GlobalStateIdContext
class|class
name|GlobalStateIdContext
implements|implements
name|AlignmentContext
block|{
comment|/**    * Estimated number of journal transactions a typical NameNode can execute    * per second. The number is used to estimate how long a client's    * RPC request will wait in the call queue before the Observer catches up    * with its state id.    */
DECL|field|ESTIMATED_TRANSACTIONS_PER_SECOND
specifier|private
specifier|static
specifier|final
name|long
name|ESTIMATED_TRANSACTIONS_PER_SECOND
init|=
literal|10000L
decl_stmt|;
comment|/**    * The client wait time on an RPC request is composed of    * the server execution time plus the communication time.    * This is an expected fraction of the total wait time spent on    * server execution.    */
DECL|field|ESTIMATED_SERVER_TIME_MULTIPLIER
specifier|private
specifier|static
specifier|final
name|float
name|ESTIMATED_SERVER_TIME_MULTIPLIER
init|=
literal|0.8f
decl_stmt|;
DECL|field|namesystem
specifier|private
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|coordinatedMethods
specifier|private
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|coordinatedMethods
decl_stmt|;
comment|/**    * Server side constructor.    * @param namesystem server side state provider    */
DECL|method|GlobalStateIdContext (FSNamesystem namesystem)
name|GlobalStateIdContext
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|coordinatedMethods
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
comment|// For now, only ClientProtocol methods can be coordinated, so only checking
comment|// against ClientProtocol.
for|for
control|(
name|Method
name|method
range|:
name|ClientProtocol
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|ReadOnly
operator|.
name|class
argument_list|)
operator|&&
name|method
operator|.
name|getAnnotationsByType
argument_list|(
name|ReadOnly
operator|.
name|class
argument_list|)
index|[
literal|0
index|]
operator|.
name|isCoordinated
argument_list|()
condition|)
block|{
name|coordinatedMethods
operator|.
name|add
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Server side implementation for providing state alignment info in responses.    */
annotation|@
name|Override
DECL|method|updateResponseState (RpcResponseHeaderProto.Builder header)
specifier|public
name|void
name|updateResponseState
parameter_list|(
name|RpcResponseHeaderProto
operator|.
name|Builder
name|header
parameter_list|)
block|{
comment|// Using getCorrectLastAppliedOrWrittenTxId will acquire the lock on
comment|// FSEditLog. This is needed so that ANN will return the correct state id
comment|// it currently has. But this may not be necessary for Observer, may want
comment|// revisit for optimization. Same goes to receiveRequestState.
name|header
operator|.
name|setStateId
argument_list|(
name|getLastSeenStateId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Server side implementation only provides state alignment info.    * It does not receive state alignment info therefore this does nothing.    */
annotation|@
name|Override
DECL|method|receiveResponseState (RpcResponseHeaderProto header)
specifier|public
name|void
name|receiveResponseState
parameter_list|(
name|RpcResponseHeaderProto
name|header
parameter_list|)
block|{
comment|// Do nothing.
block|}
comment|/**    * Server side implementation only receives state alignment info.    * It does not build RPC requests therefore this does nothing.    */
annotation|@
name|Override
DECL|method|updateRequestState (RpcRequestHeaderProto.Builder header)
specifier|public
name|void
name|updateRequestState
parameter_list|(
name|RpcRequestHeaderProto
operator|.
name|Builder
name|header
parameter_list|)
block|{
comment|// Do nothing.
block|}
comment|/**    * Server-side implementation for processing state alignment info in    * requests.    * For Observer it compares the client and the server states and determines    * if it makes sense to wait until the server catches up with the client    * state. If not the server throws RetriableException so that the client    * could retry the call according to the retry policy with another Observer    * or the Active NameNode.    *    * @param header The RPC request header.    * @param clientWaitTime time in milliseconds indicating how long client    *    waits for the server response. It is used to verify if the client's    *    state is too far ahead of the server's    * @return the minimum of the state ids of the client or the server.    * @throws RetriableException if Observer is too far behind.    */
annotation|@
name|Override
DECL|method|receiveRequestState (RpcRequestHeaderProto header, long clientWaitTime)
specifier|public
name|long
name|receiveRequestState
parameter_list|(
name|RpcRequestHeaderProto
name|header
parameter_list|,
name|long
name|clientWaitTime
parameter_list|)
throws|throws
name|RetriableException
block|{
name|long
name|serverStateId
init|=
name|getLastSeenStateId
argument_list|()
decl_stmt|;
name|long
name|clientStateId
init|=
name|header
operator|.
name|getStateId
argument_list|()
decl_stmt|;
name|FSNamesystem
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Client State ID= {} and Server State ID= {}"
argument_list|,
name|clientStateId
argument_list|,
name|serverStateId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientStateId
operator|>
name|serverStateId
operator|&&
name|HAServiceState
operator|.
name|ACTIVE
operator|.
name|equals
argument_list|(
name|namesystem
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|FSNamesystem
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"The client stateId: {} is greater than "
operator|+
literal|"the server stateId: {} This is unexpected. "
operator|+
literal|"Resetting client stateId to server stateId"
argument_list|,
name|clientStateId
argument_list|,
name|serverStateId
argument_list|)
expr_stmt|;
return|return
name|serverStateId
return|;
block|}
if|if
condition|(
name|HAServiceState
operator|.
name|OBSERVER
operator|.
name|equals
argument_list|(
name|namesystem
operator|.
name|getState
argument_list|()
argument_list|)
operator|&&
name|clientStateId
operator|-
name|serverStateId
operator|>
name|ESTIMATED_TRANSACTIONS_PER_SECOND
operator|*
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|clientWaitTime
argument_list|)
operator|*
name|ESTIMATED_SERVER_TIME_MULTIPLIER
condition|)
block|{
throw|throw
operator|new
name|RetriableException
argument_list|(
literal|"Observer Node is too far behind: serverStateId = "
operator|+
name|serverStateId
operator|+
literal|" clientStateId = "
operator|+
name|clientStateId
argument_list|)
throw|;
block|}
return|return
name|clientStateId
return|;
block|}
annotation|@
name|Override
DECL|method|getLastSeenStateId ()
specifier|public
name|long
name|getLastSeenStateId
parameter_list|()
block|{
return|return
name|namesystem
operator|.
name|getFSImage
argument_list|()
operator|.
name|getCorrectLastAppliedOrWrittenTxId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isCoordinatedCall (String protocolName, String methodName)
specifier|public
name|boolean
name|isCoordinatedCall
parameter_list|(
name|String
name|protocolName
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
return|return
name|protocolName
operator|.
name|equals
argument_list|(
name|ClientProtocol
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
operator|&&
name|coordinatedMethods
operator|.
name|contains
argument_list|(
name|methodName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

