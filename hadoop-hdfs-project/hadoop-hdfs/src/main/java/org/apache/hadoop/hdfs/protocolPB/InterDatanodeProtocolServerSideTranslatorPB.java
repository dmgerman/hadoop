begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|InterDatanodeProtocolProtos
operator|.
name|InitReplicaRecoveryRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|InterDatanodeProtocolProtos
operator|.
name|InitReplicaRecoveryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|InterDatanodeProtocolProtos
operator|.
name|UpdateReplicaUnderRecoveryRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|InterDatanodeProtocolProtos
operator|.
name|UpdateReplicaUnderRecoveryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ProtocolSignatureWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|InterDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|JournalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReplicaRecoveryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|VersionedProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Implementation for protobuf service that forwards requests  * received on {@link InterDatanodeProtocolPB} to the  * {@link InterDatanodeProtocol} server implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|InterDatanodeProtocolServerSideTranslatorPB
specifier|public
class|class
name|InterDatanodeProtocolServerSideTranslatorPB
implements|implements
name|InterDatanodeProtocolPB
block|{
DECL|field|impl
specifier|private
specifier|final
name|InterDatanodeProtocol
name|impl
decl_stmt|;
DECL|method|InterDatanodeProtocolServerSideTranslatorPB (InterDatanodeProtocol impl)
specifier|public
name|InterDatanodeProtocolServerSideTranslatorPB
parameter_list|(
name|InterDatanodeProtocol
name|impl
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initReplicaRecovery ( RpcController unused, InitReplicaRecoveryRequestProto request)
specifier|public
name|InitReplicaRecoveryResponseProto
name|initReplicaRecovery
parameter_list|(
name|RpcController
name|unused
parameter_list|,
name|InitReplicaRecoveryRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|RecoveringBlock
name|b
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|ReplicaRecoveryInfo
name|r
decl_stmt|;
try|try
block|{
name|r
operator|=
name|impl
operator|.
name|initReplicaRecovery
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|InitReplicaRecoveryResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlock
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|r
argument_list|)
argument_list|)
operator|.
name|setState
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|r
operator|.
name|getOriginalReplicaState
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|updateReplicaUnderRecovery ( RpcController unused, UpdateReplicaUnderRecoveryRequestProto request)
specifier|public
name|UpdateReplicaUnderRecoveryResponseProto
name|updateReplicaUnderRecovery
parameter_list|(
name|RpcController
name|unused
parameter_list|,
name|UpdateReplicaUnderRecoveryRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ExtendedBlock
name|b
decl_stmt|;
try|try
block|{
name|b
operator|=
name|impl
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getRecoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|getNewLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|UpdateReplicaUnderRecoveryResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlock
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|b
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** @see VersionedProtocol#getProtocolVersion */
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|InterDatanodeProtocolPB
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * The client side will redirect getProtocolSignature to    * getProtocolSignature2.    *     * However the RPC layer below on the Server side will call getProtocolVersion    * and possibly in the future getProtocolSignature. Hence we still implement    * it even though the end client will never call this method.    *     * @see VersionedProtocol#getProtocolVersion    */
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Don't forward this to the server. The protocol version and signature is      * that of {@link InterDatanodeProtocol}      */
if|if
condition|(
operator|!
name|protocol
operator|.
name|equals
argument_list|(
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Namenode Serverside implements "
operator|+
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|InterDatanodeProtocol
operator|.
name|class
argument_list|)
operator|+
literal|". The following requested protocol is unknown: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|clientMethodsHash
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|InterDatanodeProtocolPB
operator|.
name|class
argument_list|)
argument_list|,
name|InterDatanodeProtocolPB
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature2 (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignatureWritable
name|getProtocolSignature2
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Don't forward this to the server. The protocol version and signature is      * that of {@link InterDatanodeProtocol}      */
return|return
name|ProtocolSignatureWritable
operator|.
name|convert
argument_list|(
name|this
operator|.
name|getProtocolSignature
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

