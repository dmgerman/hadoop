begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.startupprogress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|info
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgressView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_comment
comment|/**  * Links {@link StartupProgress} to a {@link MetricsSource} to expose its  * information via JMX.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StartupProgressMetrics
specifier|public
class|class
name|StartupProgressMetrics
implements|implements
name|MetricsSource
block|{
DECL|field|STARTUP_PROGRESS_METRICS_INFO
specifier|private
specifier|static
specifier|final
name|MetricsInfo
name|STARTUP_PROGRESS_METRICS_INFO
init|=
name|info
argument_list|(
literal|"StartupProgress"
argument_list|,
literal|"NameNode startup progress"
argument_list|)
decl_stmt|;
DECL|field|startupProgress
specifier|private
specifier|final
name|StartupProgress
name|startupProgress
decl_stmt|;
comment|/**    * Registers StartupProgressMetrics linked to the given StartupProgress.    *     * @param prog StartupProgress to link    */
DECL|method|register (StartupProgress prog)
specifier|public
specifier|static
name|void
name|register
parameter_list|(
name|StartupProgress
name|prog
parameter_list|)
block|{
operator|new
name|StartupProgressMetrics
argument_list|(
name|prog
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new StartupProgressMetrics registered with the metrics system.    *     * @param startupProgress StartupProgress to link    */
DECL|method|StartupProgressMetrics (StartupProgress startupProgress)
specifier|public
name|StartupProgressMetrics
parameter_list|(
name|StartupProgress
name|startupProgress
parameter_list|)
block|{
name|this
operator|.
name|startupProgress
operator|=
name|startupProgress
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|register
argument_list|(
name|STARTUP_PROGRESS_METRICS_INFO
operator|.
name|name
argument_list|()
argument_list|,
name|STARTUP_PROGRESS_METRICS_INFO
operator|.
name|description
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector collector, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|StartupProgressView
name|prog
init|=
name|startupProgress
operator|.
name|createView
argument_list|()
decl_stmt|;
name|MetricsRecordBuilder
name|builder
init|=
name|collector
operator|.
name|addRecord
argument_list|(
name|STARTUP_PROGRESS_METRICS_INFO
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addCounter
argument_list|(
name|info
argument_list|(
literal|"ElapsedTime"
argument_list|,
literal|"overall elapsed time"
argument_list|)
argument_list|,
name|prog
operator|.
name|getElapsedTime
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addGauge
argument_list|(
name|info
argument_list|(
literal|"PercentComplete"
argument_list|,
literal|"overall percent complete"
argument_list|)
argument_list|,
name|prog
operator|.
name|getPercentComplete
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Phase
name|phase
range|:
name|prog
operator|.
name|getPhases
argument_list|()
control|)
block|{
name|addCounter
argument_list|(
name|builder
argument_list|,
name|phase
argument_list|,
literal|"Count"
argument_list|,
literal|" count"
argument_list|,
name|prog
operator|.
name|getCount
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|addCounter
argument_list|(
name|builder
argument_list|,
name|phase
argument_list|,
literal|"ElapsedTime"
argument_list|,
literal|" elapsed time"
argument_list|,
name|prog
operator|.
name|getElapsedTime
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|addCounter
argument_list|(
name|builder
argument_list|,
name|phase
argument_list|,
literal|"Total"
argument_list|,
literal|" total"
argument_list|,
name|prog
operator|.
name|getTotal
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
name|addGauge
argument_list|(
name|builder
argument_list|,
name|phase
argument_list|,
literal|"PercentComplete"
argument_list|,
literal|" percent complete"
argument_list|,
name|prog
operator|.
name|getPercentComplete
argument_list|(
name|phase
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds a counter with a name built by using the specified phase's name as    * prefix and then appending the specified suffix.    *     * @param builder MetricsRecordBuilder to receive counter    * @param phase Phase to add    * @param nameSuffix String suffix of metric name    * @param descSuffix String suffix of metric description    * @param value long counter value    */
DECL|method|addCounter (MetricsRecordBuilder builder, Phase phase, String nameSuffix, String descSuffix, long value)
specifier|private
specifier|static
name|void
name|addCounter
parameter_list|(
name|MetricsRecordBuilder
name|builder
parameter_list|,
name|Phase
name|phase
parameter_list|,
name|String
name|nameSuffix
parameter_list|,
name|String
name|descSuffix
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|MetricsInfo
name|metricsInfo
init|=
name|info
argument_list|(
name|phase
operator|.
name|getName
argument_list|()
operator|+
name|nameSuffix
argument_list|,
name|phase
operator|.
name|getDescription
argument_list|()
operator|+
name|descSuffix
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addCounter
argument_list|(
name|metricsInfo
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a gauge with a name built by using the specified phase's name as prefix    * and then appending the specified suffix.    *     * @param builder MetricsRecordBuilder to receive counter    * @param phase Phase to add    * @param nameSuffix String suffix of metric name    * @param descSuffix String suffix of metric description    * @param value float gauge value    */
DECL|method|addGauge (MetricsRecordBuilder builder, Phase phase, String nameSuffix, String descSuffix, float value)
specifier|private
specifier|static
name|void
name|addGauge
parameter_list|(
name|MetricsRecordBuilder
name|builder
parameter_list|,
name|Phase
name|phase
parameter_list|,
name|String
name|nameSuffix
parameter_list|,
name|String
name|descSuffix
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|MetricsInfo
name|metricsInfo
init|=
name|info
argument_list|(
name|phase
operator|.
name|getName
argument_list|()
operator|+
name|nameSuffix
argument_list|,
name|phase
operator|.
name|getDescription
argument_list|()
operator|+
name|descSuffix
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addGauge
argument_list|(
name|metricsInfo
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

