begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * OfflineImageViewerPB to dump the contents of an Hadoop image file to XML or  * the console. Main entry point into utility, either via the command line or  * programmatically.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|OfflineImageViewerPB
specifier|public
class|class
name|OfflineImageViewerPB
block|{
DECL|field|HELP_OPT
specifier|private
specifier|static
specifier|final
name|String
name|HELP_OPT
init|=
literal|"-h"
decl_stmt|;
DECL|field|HELP_LONGOPT
specifier|private
specifier|static
specifier|final
name|String
name|HELP_LONGOPT
init|=
literal|"--help"
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OfflineImageViewerPB
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|usage
specifier|private
specifier|final
specifier|static
name|String
name|usage
init|=
literal|"Usage: bin/hdfs oiv [OPTIONS] -i INPUTFILE -o OUTPUTFILE\n"
operator|+
literal|"Offline Image Viewer\n"
operator|+
literal|"View a Hadoop fsimage INPUTFILE using the specified PROCESSOR,\n"
operator|+
literal|"saving the results in OUTPUTFILE.\n"
operator|+
literal|"\n"
operator|+
literal|"The oiv utility will attempt to parse correctly formed image files\n"
operator|+
literal|"and will abort fail with mal-formed image files.\n"
operator|+
literal|"\n"
operator|+
literal|"The tool works offline and does not require a running cluster in\n"
operator|+
literal|"order to process an image file.\n"
operator|+
literal|"\n"
operator|+
literal|"The following image processors are available:\n"
operator|+
literal|"  * XML: This processor creates an XML document with all elements of\n"
operator|+
literal|"    the fsimage enumerated, suitable for further analysis by XML\n"
operator|+
literal|"    tools.\n"
operator|+
literal|"  * ReverseXML: This processor takes an XML file and creates a\n"
operator|+
literal|"    binary fsimage containing the same elements.\n"
operator|+
literal|"  * FileDistribution: This processor analyzes the file size\n"
operator|+
literal|"    distribution in the image.\n"
operator|+
literal|"    -maxSize specifies the range [0, maxSize] of file sizes to be\n"
operator|+
literal|"     analyzed (128GB by default).\n"
operator|+
literal|"    -step defines the granularity of the distribution. (2MB by default)\n"
operator|+
literal|"    -format formats the output result in a human-readable fashion\n"
operator|+
literal|"     rather than a number of bytes. (false by default)\n"
operator|+
literal|"  * Web: Run a viewer to expose read-only WebHDFS API.\n"
operator|+
literal|"    -addr specifies the address to listen. (localhost:5978 by default)\n"
operator|+
literal|"    It does not support secure mode nor HTTPS.\n"
operator|+
literal|"  * Delimited (experimental): Generate a text file with all of the elements common\n"
operator|+
literal|"    to both inodes and inodes-under-construction, separated by a\n"
operator|+
literal|"    delimiter. The default delimiter is \\t, though this may be\n"
operator|+
literal|"    changed via the -delimiter argument.\n"
operator|+
literal|"\n"
operator|+
literal|"Required command line arguments:\n"
operator|+
literal|"-i,--inputFile<arg>   FSImage or XML file to process.\n"
operator|+
literal|"\n"
operator|+
literal|"Optional command line arguments:\n"
operator|+
literal|"-o,--outputFile<arg>  Name of output file. If the specified\n"
operator|+
literal|"                       file exists, it will be overwritten.\n"
operator|+
literal|"                       (output to stdout by default)\n"
operator|+
literal|"                       If the input file was an XML file, we\n"
operator|+
literal|"                       will also create an<outputFile>.md5 file.\n"
operator|+
literal|"-p,--processor<arg>   Select which type of processor to apply\n"
operator|+
literal|"                       against image file. (XML|FileDistribution|\n"
operator|+
literal|"                       ReverseXML|Web|Delimited)\n"
operator|+
literal|"                       The default is Web.\n"
operator|+
literal|"-delimiter<arg>       Delimiting string to use with Delimited processor.  \n"
operator|+
literal|"-t,--temp<arg>        Use temporary dir to cache intermediate result to generate\n"
operator|+
literal|"                       Delimited outputs. If not set, Delimited processor constructs\n"
operator|+
literal|"                       the namespace in memory before outputting text.\n"
operator|+
literal|"-h,--help              Display usage information and exit\n"
decl_stmt|;
comment|/**    * Build command-line options and descriptions    */
DECL|method|buildOptions ()
specifier|private
specifier|static
name|Options
name|buildOptions
parameter_list|()
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
comment|// Build in/output file arguments, which are required, but there is no
comment|// addOption method that can specify this
name|OptionBuilder
operator|.
name|isRequired
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|hasArgs
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"inputFile"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|create
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"o"
argument_list|,
literal|"outputFile"
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"p"
argument_list|,
literal|"processor"
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"maxSize"
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"step"
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"format"
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"addr"
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"delimiter"
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"t"
argument_list|,
literal|"temp"
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
comment|/**    * Entry point to command-line-driven operation. User may specify options and    * start fsimage viewer from the command line. Program will process image file    * and exit cleanly or, if an error is encountered, inform user and exit.    *     * @param args    *          Command line options    * @throws IOException    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|status
init|=
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|run (String[] args)
specifier|public
specifier|static
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|options
init|=
name|buildOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// print help and exit with zero exit code
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
operator|&&
name|isHelpOption
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmd
decl_stmt|;
try|try
block|{
name|cmd
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error parsing command-line options: "
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
comment|// print help and exit with non zero exit code since
comment|// it is not expected to give help and other options together.
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|String
name|inputFile
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
name|String
name|processor
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"p"
argument_list|,
literal|"Web"
argument_list|)
decl_stmt|;
name|String
name|outputFile
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"o"
argument_list|,
literal|"-"
argument_list|)
decl_stmt|;
name|String
name|delimiter
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"delimiter"
argument_list|,
name|PBImageDelimitedTextWriter
operator|.
name|DEFAULT_DELIMITER
argument_list|)
decl_stmt|;
name|String
name|tempPath
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"t"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|outputFile
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
operator|||
literal|"REVERSEXML"
operator|.
name|equalsIgnoreCase
argument_list|(
name|processor
argument_list|)
condition|?
name|System
operator|.
name|out
else|:
operator|new
name|PrintStream
argument_list|(
name|outputFile
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|processor
argument_list|)
condition|)
block|{
case|case
literal|"FILEDISTRIBUTION"
case|:
name|long
name|maxSize
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"maxSize"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|step
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"step"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|formatOutput
init|=
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"format"
argument_list|)
decl_stmt|;
try|try
init|(
name|RandomAccessFile
name|r
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|inputFile
argument_list|,
literal|"r"
argument_list|)
init|)
block|{
operator|new
name|FileDistributionCalculator
argument_list|(
name|conf
argument_list|,
name|maxSize
argument_list|,
name|step
argument_list|,
name|formatOutput
argument_list|,
name|out
argument_list|)
operator|.
name|visit
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|"XML"
case|:
try|try
init|(
name|RandomAccessFile
name|r
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|inputFile
argument_list|,
literal|"r"
argument_list|)
init|)
block|{
operator|new
name|PBImageXmlWriter
argument_list|(
name|conf
argument_list|,
name|out
argument_list|)
operator|.
name|visit
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|"REVERSEXML"
case|:
try|try
block|{
name|OfflineImageReconstructor
operator|.
name|run
argument_list|(
name|inputFile
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"OfflineImageReconstructor failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|terminate
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|"WEB"
case|:
name|String
name|addr
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"addr"
argument_list|,
literal|"localhost:5978"
argument_list|)
decl_stmt|;
try|try
init|(
name|WebImageViewer
name|viewer
init|=
operator|new
name|WebImageViewer
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
argument_list|,
name|conf
argument_list|)
init|)
block|{
name|viewer
operator|.
name|start
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|"DELIMITED"
case|:
try|try
init|(
name|PBImageDelimitedTextWriter
name|writer
init|=
operator|new
name|PBImageDelimitedTextWriter
argument_list|(
name|out
argument_list|,
name|delimiter
argument_list|,
name|tempPath
argument_list|)
init|;
name|RandomAccessFile
name|r
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|inputFile
argument_list|,
literal|"r"
argument_list|)
init|)
block|{
name|writer
operator|.
name|visit
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid processor specified : "
operator|+
name|processor
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Input file ended unexpectedly. Exiting"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Encountered exception.  Exiting: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
operator|&&
name|out
operator|!=
name|System
operator|.
name|out
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Print application usage instructions.    */
DECL|method|printUsage ()
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
block|}
DECL|method|isHelpOption (String arg)
specifier|private
specifier|static
name|boolean
name|isHelpOption
parameter_list|(
name|String
name|arg
parameter_list|)
block|{
return|return
name|arg
operator|.
name|equalsIgnoreCase
argument_list|(
name|HELP_OPT
argument_list|)
operator|||
name|arg
operator|.
name|equalsIgnoreCase
argument_list|(
name|HELP_LONGOPT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

