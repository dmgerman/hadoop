begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|LinkedListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * FileInputStream cache is used to cache FileInputStream objects that we  * have received from the DataNode.  */
end_comment

begin_class
DECL|class|FileInputStreamCache
class|class
name|FileInputStreamCache
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileInputStreamCache
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The executor service that runs the cacheCleaner.  There is only one of    * these per VM.    */
DECL|field|executor
specifier|private
specifier|final
specifier|static
name|ScheduledThreadPoolExecutor
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"FileInputStreamCache Cleaner"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * The CacheCleaner for this FileInputStreamCache.  We don't create this    * and schedule it until it becomes necessary.    */
DECL|field|cacheCleaner
specifier|private
name|CacheCleaner
name|cacheCleaner
decl_stmt|;
comment|/**    * Maximum number of entries to allow in the cache.    */
DECL|field|maxCacheSize
specifier|private
specifier|final
name|int
name|maxCacheSize
decl_stmt|;
comment|/**    * The minimum time in milliseconds to preserve an element in the cache.    */
DECL|field|expiryTimeMs
specifier|private
specifier|final
name|long
name|expiryTimeMs
decl_stmt|;
comment|/**    * True if the FileInputStreamCache is closed.    */
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|/**    * Cache entries.    */
DECL|field|map
specifier|private
specifier|final
name|LinkedListMultimap
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|map
init|=
name|LinkedListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|/**    * Expiry thread which makes sure that the file descriptors get closed    * after a while.    */
DECL|class|CacheCleaner
class|class
name|CacheCleaner
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|FileInputStreamCache
operator|.
name|this
init|)
block|{
if|if
condition|(
name|closed
condition|)
return|return;
name|long
name|curTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|iter
init|=
name|map
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|iter
operator|=
name|map
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
control|)
block|{
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
name|expiryTimeMs
operator|>=
name|curTime
condition|)
block|{
break|break;
block|}
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * The key identifying a FileInputStream array.    */
DECL|class|Key
specifier|static
class|class
name|Key
block|{
DECL|field|datanodeID
specifier|private
specifier|final
name|DatanodeID
name|datanodeID
decl_stmt|;
DECL|field|block
specifier|private
specifier|final
name|ExtendedBlock
name|block
decl_stmt|;
DECL|method|Key (DatanodeID datanodeID, ExtendedBlock block)
specifier|public
name|Key
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
block|{
name|this
operator|.
name|datanodeID
operator|=
name|datanodeID
expr_stmt|;
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|FileInputStreamCache
operator|.
name|Key
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileInputStreamCache
operator|.
name|Key
name|otherKey
init|=
operator|(
name|FileInputStreamCache
operator|.
name|Key
operator|)
name|other
decl_stmt|;
return|return
operator|(
name|block
operator|.
name|equals
argument_list|(
name|otherKey
operator|.
name|block
argument_list|)
operator|&
operator|(
name|block
operator|.
name|getGenerationStamp
argument_list|()
operator|==
name|otherKey
operator|.
name|block
operator|.
name|getGenerationStamp
argument_list|()
operator|)
operator|&
name|datanodeID
operator|.
name|equals
argument_list|(
name|otherKey
operator|.
name|datanodeID
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|block
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/**    * The value containing a FileInputStream array and the time it was added to    * the cache.    */
DECL|class|Value
specifier|static
class|class
name|Value
block|{
DECL|field|fis
specifier|private
specifier|final
name|FileInputStream
name|fis
index|[]
decl_stmt|;
DECL|field|time
specifier|private
specifier|final
name|long
name|time
decl_stmt|;
DECL|method|Value (FileInputStream fis[])
specifier|public
name|Value
parameter_list|(
name|FileInputStream
name|fis
index|[]
parameter_list|)
block|{
name|this
operator|.
name|fis
operator|=
name|fis
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
DECL|method|getFileInputStreams ()
specifier|public
name|FileInputStream
index|[]
name|getFileInputStreams
parameter_list|()
block|{
return|return
name|fis
return|;
block|}
DECL|method|getTime ()
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|time
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fis
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a new FileInputStream    *    * @param maxCacheSize         The maximum number of elements to allow in     *                             the cache.    * @param expiryTimeMs         The minimum time in milliseconds to preserve    *                             elements in the cache.    */
DECL|method|FileInputStreamCache (int maxCacheSize, long expiryTimeMs)
specifier|public
name|FileInputStreamCache
parameter_list|(
name|int
name|maxCacheSize
parameter_list|,
name|long
name|expiryTimeMs
parameter_list|)
block|{
name|this
operator|.
name|maxCacheSize
operator|=
name|maxCacheSize
expr_stmt|;
name|this
operator|.
name|expiryTimeMs
operator|=
name|expiryTimeMs
expr_stmt|;
block|}
comment|/**    * Put an array of FileInputStream objects into the cache.    *    * @param datanodeID          The DatanodeID to store the streams under.    * @param block               The Block to store the streams under.    * @param fis                 The streams.    */
DECL|method|put (DatanodeID datanodeID, ExtendedBlock block, FileInputStream fis[])
specifier|public
name|void
name|put
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|,
name|FileInputStream
name|fis
index|[]
parameter_list|)
block|{
name|boolean
name|inserted
init|=
literal|false
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|closed
condition|)
return|return;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|>
name|maxCacheSize
condition|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|iter
init|=
name|map
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
return|return;
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cacheCleaner
operator|==
literal|null
condition|)
block|{
name|cacheCleaner
operator|=
operator|new
name|CacheCleaner
argument_list|()
expr_stmt|;
name|executor
operator|.
name|scheduleAtFixedRate
argument_list|(
name|cacheCleaner
argument_list|,
name|expiryTimeMs
argument_list|,
name|expiryTimeMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
operator|new
name|Key
argument_list|(
name|datanodeID
argument_list|,
name|block
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|fis
argument_list|)
argument_list|)
expr_stmt|;
name|inserted
operator|=
literal|true
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|inserted
condition|)
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Find and remove an array of FileInputStream objects from the cache.    *    * @param datanodeID          The DatanodeID to search for.    * @param block               The Block to search for.    *    * @return                    null if no streams can be found; the    *                            array otherwise.  If this is non-null, the    *                            array will have been removed from the cache.    */
DECL|method|get (DatanodeID datanodeID, ExtendedBlock block)
specifier|public
specifier|synchronized
name|FileInputStream
index|[]
name|get
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
block|{
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
name|datanodeID
argument_list|,
name|block
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Value
argument_list|>
name|ret
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|Value
name|val
init|=
name|ret
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|val
operator|.
name|getFileInputStreams
argument_list|()
return|;
block|}
comment|/**    * Close the cache and free all associated resources.    */
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
return|return;
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cacheCleaner
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|remove
argument_list|(
name|cacheCleaner
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|iter
init|=
name|map
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|iter
operator|=
name|map
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
control|)
block|{
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|toString ()
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|bld
operator|.
name|append
argument_list|(
literal|"FileInputStreamCache("
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|entry
range|:
name|map
operator|.
name|entries
argument_list|()
control|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
name|bld
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|bld
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getExpiryTimeMs ()
specifier|public
name|long
name|getExpiryTimeMs
parameter_list|()
block|{
return|return
name|expiryTimeMs
return|;
block|}
DECL|method|getMaxCacheSize ()
specifier|public
name|int
name|getMaxCacheSize
parameter_list|()
block|{
return|return
name|maxCacheSize
return|;
block|}
block|}
end_class

end_unit

