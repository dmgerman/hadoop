begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|DatanodeInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|BlockConstructionStage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|DataEncryptionKeyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ElasticByteBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_comment
comment|/**  * A striped block writer that writes reconstructed data to the remote target  * datanode.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StripedBlockWriter
class|class
name|StripedBlockWriter
block|{
DECL|field|stripedWriter
specifier|private
specifier|final
name|StripedWriter
name|stripedWriter
decl_stmt|;
DECL|field|datanode
specifier|private
specifier|final
name|DataNode
name|datanode
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|block
specifier|private
specifier|final
name|ExtendedBlock
name|block
decl_stmt|;
DECL|field|target
specifier|private
specifier|final
name|DatanodeInfo
name|target
decl_stmt|;
DECL|field|storageType
specifier|private
specifier|final
name|StorageType
name|storageType
decl_stmt|;
DECL|field|targetSocket
specifier|private
name|Socket
name|targetSocket
decl_stmt|;
DECL|field|targetOutputStream
specifier|private
name|DataOutputStream
name|targetOutputStream
decl_stmt|;
DECL|field|targetInputStream
specifier|private
name|DataInputStream
name|targetInputStream
decl_stmt|;
DECL|field|targetBuffer
specifier|private
name|ByteBuffer
name|targetBuffer
decl_stmt|;
DECL|field|blockOffset4Target
specifier|private
name|long
name|blockOffset4Target
init|=
literal|0
decl_stmt|;
DECL|field|seqNo4Target
specifier|private
name|long
name|seqNo4Target
init|=
literal|0
decl_stmt|;
DECL|field|BUFFER_POOL
specifier|private
specifier|static
specifier|final
name|ByteBufferPool
name|BUFFER_POOL
init|=
operator|new
name|ElasticByteBufferPool
argument_list|()
decl_stmt|;
DECL|method|StripedBlockWriter (StripedWriter stripedWriter, DataNode datanode, Configuration conf, ExtendedBlock block, DatanodeInfo target, StorageType storageType)
name|StripedBlockWriter
parameter_list|(
name|StripedWriter
name|stripedWriter
parameter_list|,
name|DataNode
name|datanode
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|,
name|DatanodeInfo
name|target
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|stripedWriter
operator|=
name|stripedWriter
expr_stmt|;
name|this
operator|.
name|datanode
operator|=
name|datanode
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|storageType
operator|=
name|storageType
expr_stmt|;
name|this
operator|.
name|targetBuffer
operator|=
name|stripedWriter
operator|.
name|allocateWriteBuffer
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|getTargetBuffer ()
name|ByteBuffer
name|getTargetBuffer
parameter_list|()
block|{
return|return
name|targetBuffer
return|;
block|}
DECL|method|freeTargetBuffer ()
name|void
name|freeTargetBuffer
parameter_list|()
block|{
name|targetBuffer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Initialize  output/input streams for transferring data to target    * and send create block request.    */
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
name|DataOutputStream
name|out
init|=
literal|null
decl_stmt|;
name|DataInputStream
name|in
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|InetSocketAddress
name|targetAddr
init|=
name|stripedWriter
operator|.
name|getSocketAddress4Transfer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|socket
operator|=
name|datanode
operator|.
name|newSocket
argument_list|()
expr_stmt|;
name|NetUtils
operator|.
name|connect
argument_list|(
name|socket
argument_list|,
name|targetAddr
argument_list|,
name|datanode
operator|.
name|getDnConf
argument_list|()
operator|.
name|getSocketTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setTcpNoDelay
argument_list|(
name|datanode
operator|.
name|getDnConf
argument_list|()
operator|.
name|getDataTransferServerTcpNoDelay
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|datanode
operator|.
name|getDnConf
argument_list|()
operator|.
name|getSocketTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
init|=
name|datanode
operator|.
name|getBlockAccessToken
argument_list|(
name|block
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|WRITE
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|writeTimeout
init|=
name|datanode
operator|.
name|getDnConf
argument_list|()
operator|.
name|getSocketWriteTimeout
argument_list|()
decl_stmt|;
name|OutputStream
name|unbufOut
init|=
name|NetUtils
operator|.
name|getOutputStream
argument_list|(
name|socket
argument_list|,
name|writeTimeout
argument_list|)
decl_stmt|;
name|InputStream
name|unbufIn
init|=
name|NetUtils
operator|.
name|getInputStream
argument_list|(
name|socket
argument_list|)
decl_stmt|;
name|DataEncryptionKeyFactory
name|keyFactory
init|=
name|datanode
operator|.
name|getDataEncryptionKeyFactoryForBlock
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|IOStreamPair
name|saslStreams
init|=
name|datanode
operator|.
name|getSaslClient
argument_list|()
operator|.
name|socketSend
argument_list|(
name|socket
argument_list|,
name|unbufOut
argument_list|,
name|unbufIn
argument_list|,
name|keyFactory
argument_list|,
name|blockToken
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|unbufOut
operator|=
name|saslStreams
operator|.
name|out
expr_stmt|;
name|unbufIn
operator|=
name|saslStreams
operator|.
name|in
expr_stmt|;
name|out
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|unbufOut
argument_list|,
name|DFSUtilClient
operator|.
name|getSmallBufferSize
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|DataInputStream
argument_list|(
name|unbufIn
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|source
init|=
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setNodeID
argument_list|(
name|datanode
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|Sender
argument_list|(
name|out
argument_list|)
operator|.
name|writeBlock
argument_list|(
name|block
argument_list|,
name|storageType
argument_list|,
name|blockToken
argument_list|,
literal|""
argument_list|,
operator|new
name|DatanodeInfo
index|[]
block|{
name|target
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|storageType
block|}
argument_list|,
name|source
argument_list|,
name|BlockConstructionStage
operator|.
name|PIPELINE_SETUP_CREATE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|stripedWriter
operator|.
name|getChecksum
argument_list|()
argument_list|,
name|stripedWriter
operator|.
name|getCachingStrategy
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|targetSocket
operator|=
name|socket
expr_stmt|;
name|targetOutputStream
operator|=
name|out
expr_stmt|;
name|targetInputStream
operator|=
name|in
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Send data to targets.    */
DECL|method|transferData2Target (byte[] packetBuf)
name|void
name|transferData2Target
parameter_list|(
name|byte
index|[]
name|packetBuf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|targetBuffer
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|targetBuffer
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|ByteBuffer
name|directCheckSumBuf
init|=
name|BUFFER_POOL
operator|.
name|getBuffer
argument_list|(
literal|true
argument_list|,
name|stripedWriter
operator|.
name|getChecksumBuf
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
name|stripedWriter
operator|.
name|getChecksum
argument_list|()
operator|.
name|calculateChunkedSums
argument_list|(
name|targetBuffer
argument_list|,
name|directCheckSumBuf
argument_list|)
expr_stmt|;
name|directCheckSumBuf
operator|.
name|get
argument_list|(
name|stripedWriter
operator|.
name|getChecksumBuf
argument_list|()
argument_list|)
expr_stmt|;
name|BUFFER_POOL
operator|.
name|putBuffer
argument_list|(
name|directCheckSumBuf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stripedWriter
operator|.
name|getChecksum
argument_list|()
operator|.
name|calculateChunkedSums
argument_list|(
name|targetBuffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|targetBuffer
operator|.
name|remaining
argument_list|()
argument_list|,
name|stripedWriter
operator|.
name|getChecksumBuf
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|ckOff
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|targetBuffer
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DFSPacket
name|packet
init|=
operator|new
name|DFSPacket
argument_list|(
name|packetBuf
argument_list|,
name|stripedWriter
operator|.
name|getMaxChunksPerPacket
argument_list|()
argument_list|,
name|blockOffset4Target
argument_list|,
name|seqNo4Target
operator|++
argument_list|,
name|stripedWriter
operator|.
name|getChecksumSize
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|maxBytesToPacket
init|=
name|stripedWriter
operator|.
name|getMaxChunksPerPacket
argument_list|()
operator|*
name|stripedWriter
operator|.
name|getBytesPerChecksum
argument_list|()
decl_stmt|;
name|int
name|toWrite
init|=
name|targetBuffer
operator|.
name|remaining
argument_list|()
operator|>
name|maxBytesToPacket
condition|?
name|maxBytesToPacket
else|:
name|targetBuffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|int
name|ckLen
init|=
operator|(
operator|(
name|toWrite
operator|-
literal|1
operator|)
operator|/
name|stripedWriter
operator|.
name|getBytesPerChecksum
argument_list|()
operator|+
literal|1
operator|)
operator|*
name|stripedWriter
operator|.
name|getChecksumSize
argument_list|()
decl_stmt|;
name|packet
operator|.
name|writeChecksum
argument_list|(
name|stripedWriter
operator|.
name|getChecksumBuf
argument_list|()
argument_list|,
name|ckOff
argument_list|,
name|ckLen
argument_list|)
expr_stmt|;
name|ckOff
operator|+=
name|ckLen
expr_stmt|;
name|packet
operator|.
name|writeData
argument_list|(
name|targetBuffer
argument_list|,
name|toWrite
argument_list|)
expr_stmt|;
comment|// Send packet
name|packet
operator|.
name|writeTo
argument_list|(
name|targetOutputStream
argument_list|)
expr_stmt|;
name|blockOffset4Target
operator|+=
name|toWrite
expr_stmt|;
block|}
block|}
comment|// send an empty packet to mark the end of the block
DECL|method|endTargetBlock (byte[] packetBuf)
name|void
name|endTargetBlock
parameter_list|(
name|byte
index|[]
name|packetBuf
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSPacket
name|packet
init|=
operator|new
name|DFSPacket
argument_list|(
name|packetBuf
argument_list|,
literal|0
argument_list|,
name|blockOffset4Target
argument_list|,
name|seqNo4Target
operator|++
argument_list|,
name|stripedWriter
operator|.
name|getChecksumSize
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|packet
operator|.
name|writeTo
argument_list|(
name|targetOutputStream
argument_list|)
expr_stmt|;
name|targetOutputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|targetOutputStream
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|targetInputStream
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|targetSocket
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

