begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * A FileOutputStream that has the property that it will only show  * up at its destination once it has been entirely written and flushed  * to disk. While being written, it will use a .tmp suffix.  *   * When the output stream is closed, it is flushed, fsynced, and  * will be moved into place, overwriting any file that already  * exists at that location.  *   *<b>NOTE</b>: on Windows platforms, it will not atomically  * replace the target file - instead the target file is deleted  * before this one is moved into place.  */
end_comment

begin_class
DECL|class|AtomicFileOutputStream
specifier|public
class|class
name|AtomicFileOutputStream
extends|extends
name|FilterOutputStream
block|{
DECL|field|TMP_EXTENSION
specifier|private
specifier|static
specifier|final
name|String
name|TMP_EXTENSION
init|=
literal|".tmp"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AtomicFileOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|origFile
specifier|private
specifier|final
name|File
name|origFile
decl_stmt|;
DECL|field|tmpFile
specifier|private
specifier|final
name|File
name|tmpFile
decl_stmt|;
DECL|method|AtomicFileOutputStream (File f)
specifier|public
name|AtomicFileOutputStream
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
comment|// Code unfortunately must be duplicated below since we can't assign anything
comment|// before calling super
name|super
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|f
operator|.
name|getName
argument_list|()
operator|+
name|TMP_EXTENSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|origFile
operator|=
name|f
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|tmpFile
operator|=
operator|new
name|File
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|f
operator|.
name|getName
argument_list|()
operator|+
name|TMP_EXTENSION
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|triedToClose
init|=
literal|false
decl_stmt|,
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
operator|(
operator|(
name|FileOutputStream
operator|)
name|out
operator|)
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|triedToClose
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|boolean
name|renamed
init|=
name|tmpFile
operator|.
name|renameTo
argument_list|(
name|origFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|renamed
condition|)
block|{
comment|// On windows, renameTo does not replace.
if|if
condition|(
operator|!
name|origFile
operator|.
name|delete
argument_list|()
operator|||
operator|!
name|tmpFile
operator|.
name|renameTo
argument_list|(
name|origFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not rename temporary file "
operator|+
name|tmpFile
operator|+
literal|" to "
operator|+
name|origFile
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|triedToClose
condition|)
block|{
comment|// If we failed when flushing, try to close it to not leak an FD
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|// close wasn't successful, try to delete the tmp file
if|if
condition|(
operator|!
name|tmpFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete tmp file "
operator|+
name|tmpFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Close the atomic file, but do not "commit" the temporary file    * on top of the destination. This should be used if there is a failure    * in writing.    */
DECL|method|abort ()
specifier|public
name|void
name|abort
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to abort file "
operator|+
name|tmpFile
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tmpFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete tmp file during abort "
operator|+
name|tmpFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

