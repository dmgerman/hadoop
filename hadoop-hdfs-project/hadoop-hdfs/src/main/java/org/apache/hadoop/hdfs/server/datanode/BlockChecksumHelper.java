begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|StripedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferProtoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|LengthInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_comment
comment|/**  * Utilities for Block checksum computing, for both replicated and striped  * blocks.  */
end_comment

begin_class
DECL|class|BlockChecksumHelper
specifier|final
class|class
name|BlockChecksumHelper
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockChecksumHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|BlockChecksumHelper ()
specifier|private
name|BlockChecksumHelper
parameter_list|()
block|{   }
comment|/**    * The abstract base block checksum computer.    */
DECL|class|AbstractBlockChecksumComputer
specifier|static
specifier|abstract
class|class
name|AbstractBlockChecksumComputer
block|{
DECL|field|datanode
specifier|private
specifier|final
name|DataNode
name|datanode
decl_stmt|;
DECL|field|outBytes
specifier|private
name|byte
index|[]
name|outBytes
decl_stmt|;
DECL|field|bytesPerCRC
specifier|private
name|int
name|bytesPerCRC
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|crcType
specifier|private
name|DataChecksum
operator|.
name|Type
name|crcType
init|=
literal|null
decl_stmt|;
DECL|field|crcPerBlock
specifier|private
name|long
name|crcPerBlock
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|checksumSize
specifier|private
name|int
name|checksumSize
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|AbstractBlockChecksumComputer (DataNode datanode)
name|AbstractBlockChecksumComputer
parameter_list|(
name|DataNode
name|datanode
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|datanode
operator|=
name|datanode
expr_stmt|;
block|}
DECL|method|compute ()
specifier|abstract
name|void
name|compute
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|createSender (IOStreamPair pair)
name|Sender
name|createSender
parameter_list|(
name|IOStreamPair
name|pair
parameter_list|)
block|{
name|DataOutputStream
name|out
init|=
operator|(
name|DataOutputStream
operator|)
name|pair
operator|.
name|out
decl_stmt|;
return|return
operator|new
name|Sender
argument_list|(
name|out
argument_list|)
return|;
block|}
DECL|method|getDatanode ()
name|DataNode
name|getDatanode
parameter_list|()
block|{
return|return
name|datanode
return|;
block|}
DECL|method|getBlockInputStream (ExtendedBlock block, long seekOffset)
name|InputStream
name|getBlockInputStream
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|long
name|seekOffset
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|datanode
operator|.
name|data
operator|.
name|getBlockInputStream
argument_list|(
name|block
argument_list|,
name|seekOffset
argument_list|)
return|;
block|}
DECL|method|setOutBytes (byte[] bytes)
name|void
name|setOutBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|this
operator|.
name|outBytes
operator|=
name|bytes
expr_stmt|;
block|}
DECL|method|getOutBytes ()
name|byte
index|[]
name|getOutBytes
parameter_list|()
block|{
return|return
name|outBytes
return|;
block|}
DECL|method|getBytesPerCRC ()
name|int
name|getBytesPerCRC
parameter_list|()
block|{
return|return
name|bytesPerCRC
return|;
block|}
DECL|method|setBytesPerCRC (int bytesPerCRC)
specifier|public
name|void
name|setBytesPerCRC
parameter_list|(
name|int
name|bytesPerCRC
parameter_list|)
block|{
name|this
operator|.
name|bytesPerCRC
operator|=
name|bytesPerCRC
expr_stmt|;
block|}
DECL|method|setCrcType (DataChecksum.Type crcType)
specifier|public
name|void
name|setCrcType
parameter_list|(
name|DataChecksum
operator|.
name|Type
name|crcType
parameter_list|)
block|{
name|this
operator|.
name|crcType
operator|=
name|crcType
expr_stmt|;
block|}
DECL|method|setCrcPerBlock (long crcPerBlock)
specifier|public
name|void
name|setCrcPerBlock
parameter_list|(
name|long
name|crcPerBlock
parameter_list|)
block|{
name|this
operator|.
name|crcPerBlock
operator|=
name|crcPerBlock
expr_stmt|;
block|}
DECL|method|setChecksumSize (int checksumSize)
specifier|public
name|void
name|setChecksumSize
parameter_list|(
name|int
name|checksumSize
parameter_list|)
block|{
name|this
operator|.
name|checksumSize
operator|=
name|checksumSize
expr_stmt|;
block|}
DECL|method|getCrcType ()
name|DataChecksum
operator|.
name|Type
name|getCrcType
parameter_list|()
block|{
return|return
name|crcType
return|;
block|}
DECL|method|getCrcPerBlock ()
name|long
name|getCrcPerBlock
parameter_list|()
block|{
return|return
name|crcPerBlock
return|;
block|}
DECL|method|getChecksumSize ()
name|int
name|getChecksumSize
parameter_list|()
block|{
return|return
name|checksumSize
return|;
block|}
block|}
comment|/**    * The abstract base block checksum computer.    */
DECL|class|BlockChecksumComputer
specifier|static
specifier|abstract
class|class
name|BlockChecksumComputer
extends|extends
name|AbstractBlockChecksumComputer
block|{
DECL|field|block
specifier|private
specifier|final
name|ExtendedBlock
name|block
decl_stmt|;
comment|// client side now can specify a range of the block for checksum
DECL|field|requestLength
specifier|private
specifier|final
name|long
name|requestLength
decl_stmt|;
DECL|field|metadataIn
specifier|private
specifier|final
name|LengthInputStream
name|metadataIn
decl_stmt|;
DECL|field|checksumIn
specifier|private
specifier|final
name|DataInputStream
name|checksumIn
decl_stmt|;
DECL|field|visibleLength
specifier|private
specifier|final
name|long
name|visibleLength
decl_stmt|;
DECL|field|partialBlk
specifier|private
specifier|final
name|boolean
name|partialBlk
decl_stmt|;
DECL|field|header
specifier|private
name|BlockMetadataHeader
name|header
decl_stmt|;
DECL|field|checksum
specifier|private
name|DataChecksum
name|checksum
decl_stmt|;
DECL|method|BlockChecksumComputer (DataNode datanode, ExtendedBlock block)
name|BlockChecksumComputer
parameter_list|(
name|DataNode
name|datanode
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
name|this
operator|.
name|requestLength
operator|=
name|block
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|requestLength
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadataIn
operator|=
name|datanode
operator|.
name|data
operator|.
name|getMetaDataInputStream
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|this
operator|.
name|visibleLength
operator|=
name|datanode
operator|.
name|data
operator|.
name|getReplicaVisibleLength
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|this
operator|.
name|partialBlk
operator|=
name|requestLength
operator|<
name|visibleLength
expr_stmt|;
name|int
name|ioFileBufferSize
init|=
name|DFSUtilClient
operator|.
name|getIoFileBufferSize
argument_list|(
name|datanode
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|checksumIn
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|metadataIn
argument_list|,
name|ioFileBufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createSender (IOStreamPair pair)
name|Sender
name|createSender
parameter_list|(
name|IOStreamPair
name|pair
parameter_list|)
block|{
name|DataOutputStream
name|out
init|=
operator|(
name|DataOutputStream
operator|)
name|pair
operator|.
name|out
decl_stmt|;
return|return
operator|new
name|Sender
argument_list|(
name|out
argument_list|)
return|;
block|}
DECL|method|getBlock ()
name|ExtendedBlock
name|getBlock
parameter_list|()
block|{
return|return
name|block
return|;
block|}
DECL|method|getRequestLength ()
name|long
name|getRequestLength
parameter_list|()
block|{
return|return
name|requestLength
return|;
block|}
DECL|method|getMetadataIn ()
name|LengthInputStream
name|getMetadataIn
parameter_list|()
block|{
return|return
name|metadataIn
return|;
block|}
DECL|method|getChecksumIn ()
name|DataInputStream
name|getChecksumIn
parameter_list|()
block|{
return|return
name|checksumIn
return|;
block|}
DECL|method|getVisibleLength ()
name|long
name|getVisibleLength
parameter_list|()
block|{
return|return
name|visibleLength
return|;
block|}
DECL|method|isPartialBlk ()
name|boolean
name|isPartialBlk
parameter_list|()
block|{
return|return
name|partialBlk
return|;
block|}
DECL|method|getHeader ()
name|BlockMetadataHeader
name|getHeader
parameter_list|()
block|{
return|return
name|header
return|;
block|}
DECL|method|getChecksum ()
name|DataChecksum
name|getChecksum
parameter_list|()
block|{
return|return
name|checksum
return|;
block|}
comment|/**      * Perform the block checksum computing.      *      * @throws IOException      */
DECL|method|compute ()
specifier|abstract
name|void
name|compute
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Read block metadata header.      *      * @throws IOException      */
DECL|method|readHeader ()
name|void
name|readHeader
parameter_list|()
throws|throws
name|IOException
block|{
comment|//read metadata file
name|header
operator|=
name|BlockMetadataHeader
operator|.
name|readHeader
argument_list|(
name|checksumIn
argument_list|)
expr_stmt|;
name|checksum
operator|=
name|header
operator|.
name|getChecksum
argument_list|()
expr_stmt|;
name|setChecksumSize
argument_list|(
name|checksum
operator|.
name|getChecksumSize
argument_list|()
argument_list|)
expr_stmt|;
name|setBytesPerCRC
argument_list|(
name|checksum
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|crcPerBlock
init|=
name|checksum
operator|.
name|getChecksumSize
argument_list|()
operator|<=
literal|0
condition|?
literal|0
else|:
operator|(
name|metadataIn
operator|.
name|getLength
argument_list|()
operator|-
name|BlockMetadataHeader
operator|.
name|getHeaderSize
argument_list|()
operator|)
operator|/
name|checksum
operator|.
name|getChecksumSize
argument_list|()
decl_stmt|;
name|setCrcPerBlock
argument_list|(
name|crcPerBlock
argument_list|)
expr_stmt|;
name|setCrcType
argument_list|(
name|checksum
operator|.
name|getChecksumType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Calculate partial block checksum.      *      * @return      * @throws IOException      */
DECL|method|crcPartialBlock ()
name|byte
index|[]
name|crcPartialBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|partialLength
init|=
call|(
name|int
call|)
argument_list|(
name|requestLength
operator|%
name|getBytesPerCRC
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|partialLength
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|partialLength
index|]
decl_stmt|;
specifier|final
name|InputStream
name|blockIn
init|=
name|getBlockInputStream
argument_list|(
name|block
argument_list|,
name|requestLength
operator|-
name|partialLength
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Get the CRC of the partialLength.
name|IOUtils
operator|.
name|readFully
argument_list|(
name|blockIn
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|partialLength
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|blockIn
argument_list|)
expr_stmt|;
block|}
name|checksum
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|partialLength
argument_list|)
expr_stmt|;
name|byte
index|[]
name|partialCrc
init|=
operator|new
name|byte
index|[
name|getChecksumSize
argument_list|()
index|]
decl_stmt|;
name|checksum
operator|.
name|writeValue
argument_list|(
name|partialCrc
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|partialCrc
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Replicated block checksum computer.    */
DECL|class|ReplicatedBlockChecksumComputer
specifier|static
class|class
name|ReplicatedBlockChecksumComputer
extends|extends
name|BlockChecksumComputer
block|{
DECL|method|ReplicatedBlockChecksumComputer (DataNode datanode, ExtendedBlock block)
name|ReplicatedBlockChecksumComputer
parameter_list|(
name|DataNode
name|datanode
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|datanode
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compute ()
name|void
name|compute
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|readHeader
argument_list|()
expr_stmt|;
name|MD5Hash
name|md5out
decl_stmt|;
if|if
condition|(
name|isPartialBlk
argument_list|()
operator|&&
name|getCrcPerBlock
argument_list|()
operator|>
literal|0
condition|)
block|{
name|md5out
operator|=
name|checksumPartialBlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|md5out
operator|=
name|checksumWholeBlock
argument_list|()
expr_stmt|;
block|}
name|setOutBytes
argument_list|(
name|md5out
operator|.
name|getDigest
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"block="
operator|+
name|getBlock
argument_list|()
operator|+
literal|", bytesPerCRC="
operator|+
name|getBytesPerCRC
argument_list|()
operator|+
literal|", crcPerBlock="
operator|+
name|getCrcPerBlock
argument_list|()
operator|+
literal|", md5out="
operator|+
name|md5out
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|getChecksumIn
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|getMetadataIn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checksumWholeBlock ()
specifier|private
name|MD5Hash
name|checksumWholeBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|MD5Hash
name|md5out
init|=
name|MD5Hash
operator|.
name|digest
argument_list|(
name|getChecksumIn
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|md5out
return|;
block|}
DECL|method|checksumPartialBlock ()
specifier|private
name|MD5Hash
name|checksumPartialBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4
operator|*
literal|1024
index|]
decl_stmt|;
name|MessageDigest
name|digester
init|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
decl_stmt|;
name|long
name|remaining
init|=
operator|(
name|getRequestLength
argument_list|()
operator|/
name|getBytesPerCRC
argument_list|()
operator|)
operator|*
name|getChecksumSize
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|toDigest
init|=
literal|0
init|;
name|remaining
operator|>
literal|0
condition|;
name|remaining
operator|-=
name|toDigest
control|)
block|{
name|toDigest
operator|=
name|getChecksumIn
argument_list|()
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|toDigest
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|digester
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|toDigest
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|partialCrc
init|=
name|crcPartialBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|partialCrc
operator|!=
literal|null
condition|)
block|{
name|digester
operator|.
name|update
argument_list|(
name|partialCrc
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MD5Hash
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Non-striped block group checksum computer for striped blocks.    */
DECL|class|BlockGroupNonStripedChecksumComputer
specifier|static
class|class
name|BlockGroupNonStripedChecksumComputer
extends|extends
name|AbstractBlockChecksumComputer
block|{
DECL|field|blockGroup
specifier|private
specifier|final
name|ExtendedBlock
name|blockGroup
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|field|datanodes
specifier|private
specifier|final
name|DatanodeInfo
index|[]
name|datanodes
decl_stmt|;
DECL|field|blockTokens
specifier|private
specifier|final
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
index|[]
name|blockTokens
decl_stmt|;
DECL|field|md5writer
specifier|private
specifier|final
name|DataOutputBuffer
name|md5writer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
DECL|method|BlockGroupNonStripedChecksumComputer (DataNode datanode, StripedBlockInfo stripedBlockInfo)
name|BlockGroupNonStripedChecksumComputer
parameter_list|(
name|DataNode
name|datanode
parameter_list|,
name|StripedBlockInfo
name|stripedBlockInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockGroup
operator|=
name|stripedBlockInfo
operator|.
name|getBlock
argument_list|()
expr_stmt|;
name|this
operator|.
name|ecPolicy
operator|=
name|stripedBlockInfo
operator|.
name|getErasureCodingPolicy
argument_list|()
expr_stmt|;
name|this
operator|.
name|datanodes
operator|=
name|stripedBlockInfo
operator|.
name|getDatanodes
argument_list|()
expr_stmt|;
name|this
operator|.
name|blockTokens
operator|=
name|stripedBlockInfo
operator|.
name|getBlockTokens
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compute ()
name|void
name|compute
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|ExtendedBlock
name|block
init|=
name|StripedBlockUtil
operator|.
name|constructInternalBlock
argument_list|(
name|blockGroup
argument_list|,
name|ecPolicy
operator|.
name|getCellSize
argument_list|()
argument_list|,
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|targetDatanode
init|=
name|datanodes
index|[
name|idx
index|]
decl_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
init|=
name|blockTokens
index|[
name|idx
index|]
decl_stmt|;
name|checksumBlock
argument_list|(
name|block
argument_list|,
name|idx
argument_list|,
name|blockToken
argument_list|,
name|targetDatanode
argument_list|)
expr_stmt|;
block|}
name|MD5Hash
name|md5out
init|=
name|MD5Hash
operator|.
name|digest
argument_list|(
name|md5writer
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|setOutBytes
argument_list|(
name|md5out
operator|.
name|getDigest
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checksumBlock (ExtendedBlock block, int blockIdx, Token<BlockTokenIdentifier> blockToken, DatanodeInfo targetDatanode)
specifier|private
name|void
name|checksumBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|int
name|blockIdx
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|,
name|DatanodeInfo
name|targetDatanode
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|timeout
init|=
literal|3000
decl_stmt|;
try|try
init|(
name|IOStreamPair
name|pair
init|=
name|getDatanode
argument_list|()
operator|.
name|connectToDN
argument_list|(
name|targetDatanode
argument_list|,
name|timeout
argument_list|,
name|block
argument_list|,
name|blockToken
argument_list|)
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"write to {}: {}, block={}"
argument_list|,
name|getDatanode
argument_list|()
argument_list|,
name|Op
operator|.
name|BLOCK_CHECKSUM
argument_list|,
name|block
argument_list|)
expr_stmt|;
comment|// get block MD5
name|createSender
argument_list|(
name|pair
argument_list|)
operator|.
name|blockChecksum
argument_list|(
name|block
argument_list|,
name|blockToken
argument_list|)
expr_stmt|;
specifier|final
name|DataTransferProtos
operator|.
name|BlockOpResponseProto
name|reply
init|=
name|DataTransferProtos
operator|.
name|BlockOpResponseProto
operator|.
name|parseFrom
argument_list|(
name|PBHelperClient
operator|.
name|vintPrefixed
argument_list|(
name|pair
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|logInfo
init|=
literal|"for block "
operator|+
name|block
operator|+
literal|" from datanode "
operator|+
name|targetDatanode
decl_stmt|;
name|DataTransferProtoUtil
operator|.
name|checkBlockOpStatus
argument_list|(
name|reply
argument_list|,
name|logInfo
argument_list|)
expr_stmt|;
name|DataTransferProtos
operator|.
name|OpBlockChecksumResponseProto
name|checksumData
init|=
name|reply
operator|.
name|getChecksumResponse
argument_list|()
decl_stmt|;
comment|//read byte-per-checksum
specifier|final
name|int
name|bpc
init|=
name|checksumData
operator|.
name|getBytesPerCrc
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockIdx
operator|==
literal|0
condition|)
block|{
comment|//first block
name|setBytesPerCRC
argument_list|(
name|bpc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bpc
operator|!=
name|getBytesPerCRC
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Byte-per-checksum not matched: bpc="
operator|+
name|bpc
operator|+
literal|" but bytesPerCRC="
operator|+
name|getBytesPerCRC
argument_list|()
argument_list|)
throw|;
block|}
comment|//read crc-per-block
specifier|final
name|long
name|cpb
init|=
name|checksumData
operator|.
name|getCrcPerBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockIdx
operator|==
literal|0
condition|)
block|{
name|setCrcPerBlock
argument_list|(
name|cpb
argument_list|)
expr_stmt|;
block|}
comment|//read md5
specifier|final
name|MD5Hash
name|md5
init|=
operator|new
name|MD5Hash
argument_list|(
name|checksumData
operator|.
name|getMd5
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|md5
operator|.
name|write
argument_list|(
name|md5writer
argument_list|)
expr_stmt|;
comment|// read crc-type
specifier|final
name|DataChecksum
operator|.
name|Type
name|ct
decl_stmt|;
if|if
condition|(
name|checksumData
operator|.
name|hasCrcType
argument_list|()
condition|)
block|{
name|ct
operator|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|checksumData
operator|.
name|getCrcType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieving checksum from an earlier-version DataNode: "
operator|+
literal|"inferring checksum by reading first byte"
argument_list|)
expr_stmt|;
name|ct
operator|=
name|DataChecksum
operator|.
name|Type
operator|.
name|DEFAULT
expr_stmt|;
block|}
if|if
condition|(
name|blockIdx
operator|==
literal|0
condition|)
block|{
comment|// first block
name|setCrcType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getCrcType
argument_list|()
operator|!=
name|DataChecksum
operator|.
name|Type
operator|.
name|MIXED
operator|&&
name|getCrcType
argument_list|()
operator|!=
name|ct
condition|)
block|{
comment|// if crc types are mixed in a file
name|setCrcType
argument_list|(
name|DataChecksum
operator|.
name|Type
operator|.
name|MIXED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|blockIdx
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"set bytesPerCRC="
operator|+
name|getBytesPerCRC
argument_list|()
operator|+
literal|", crcPerBlock="
operator|+
name|getCrcPerBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"got reply from "
operator|+
name|targetDatanode
operator|+
literal|": md5="
operator|+
name|md5
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

