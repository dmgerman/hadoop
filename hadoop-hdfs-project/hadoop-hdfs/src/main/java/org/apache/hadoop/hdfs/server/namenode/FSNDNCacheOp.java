begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
operator|.
name|BatchedListEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_class
DECL|class|FSNDNCacheOp
class|class
name|FSNDNCacheOp
block|{
DECL|method|addCacheDirective ( FSNamesystem fsn, CacheManager cacheManager, CacheDirectiveInfo directive, EnumSet<CacheFlag> flags, boolean logRetryCache)
specifier|static
name|CacheDirectiveInfo
name|addCacheDirective
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|CacheDirectiveInfo
name|directive
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getFsPermissionChecker
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
if|if
condition|(
name|directive
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"addDirective: you cannot specify an ID "
operator|+
literal|"for this operation."
argument_list|)
throw|;
block|}
name|CacheDirectiveInfo
name|effectiveDirective
init|=
name|cacheManager
operator|.
name|addDirective
argument_list|(
name|directive
argument_list|,
name|pc
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|logAddCacheDirectiveInfo
argument_list|(
name|effectiveDirective
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
return|return
name|effectiveDirective
return|;
block|}
DECL|method|modifyCacheDirective ( FSNamesystem fsn, CacheManager cacheManager, CacheDirectiveInfo directive, EnumSet<CacheFlag> flags, boolean logRetryCache)
specifier|static
name|void
name|modifyCacheDirective
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|CacheDirectiveInfo
name|directive
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getFsPermissionChecker
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
name|cacheManager
operator|.
name|modifyDirective
argument_list|(
name|directive
argument_list|,
name|pc
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|logModifyCacheDirectiveInfo
argument_list|(
name|directive
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
DECL|method|removeCacheDirective ( FSNamesystem fsn, CacheManager cacheManager, long id, boolean logRetryCache)
specifier|static
name|void
name|removeCacheDirective
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|long
name|id
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getFsPermissionChecker
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
name|cacheManager
operator|.
name|removeDirective
argument_list|(
name|id
argument_list|,
name|pc
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|logRemoveCacheDirectiveInfo
argument_list|(
name|id
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
DECL|method|listCacheDirectives ( FSNamesystem fsn, CacheManager cacheManager, long startId, CacheDirectiveInfo filter)
specifier|static
name|BatchedListEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|listCacheDirectives
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|long
name|startId
parameter_list|,
name|CacheDirectiveInfo
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getFsPermissionChecker
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
return|return
name|cacheManager
operator|.
name|listCacheDirectives
argument_list|(
name|startId
argument_list|,
name|filter
argument_list|,
name|pc
argument_list|)
return|;
block|}
DECL|method|addCachePool ( FSNamesystem fsn, CacheManager cacheManager, CachePoolInfo req, boolean logRetryCache)
specifier|static
name|CachePoolInfo
name|addCachePool
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|CachePoolInfo
name|req
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getFsPermissionChecker
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
block|}
name|CachePoolInfo
name|info
init|=
name|cacheManager
operator|.
name|addCachePool
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|logAddCachePool
argument_list|(
name|info
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|method|modifyCachePool ( FSNamesystem fsn, CacheManager cacheManager, CachePoolInfo req, boolean logRetryCache)
specifier|static
name|void
name|modifyCachePool
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|CachePoolInfo
name|req
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getFsPermissionChecker
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
block|}
name|cacheManager
operator|.
name|modifyCachePool
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|logModifyCachePool
argument_list|(
name|req
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
DECL|method|removeCachePool ( FSNamesystem fsn, CacheManager cacheManager, String cachePoolName, boolean logRetryCache)
specifier|static
name|void
name|removeCachePool
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|String
name|cachePoolName
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getFsPermissionChecker
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
block|}
name|cacheManager
operator|.
name|removeCachePool
argument_list|(
name|cachePoolName
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|logRemoveCachePool
argument_list|(
name|cachePoolName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
DECL|method|listCachePools ( FSNamesystem fsn, CacheManager cacheManager, String prevKey)
specifier|static
name|BatchedListEntries
argument_list|<
name|CachePoolEntry
argument_list|>
name|listCachePools
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|String
name|prevKey
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getFsPermissionChecker
argument_list|(
name|fsn
argument_list|)
decl_stmt|;
return|return
name|cacheManager
operator|.
name|listCachePools
argument_list|(
name|pc
argument_list|,
name|prevKey
argument_list|)
return|;
block|}
DECL|method|getFsPermissionChecker (FSNamesystem fsn)
specifier|private
specifier|static
name|FSPermissionChecker
name|getFsPermissionChecker
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|)
throws|throws
name|AccessControlException
block|{
return|return
name|fsn
operator|.
name|isPermissionEnabled
argument_list|()
condition|?
name|fsn
operator|.
name|getPermissionChecker
argument_list|()
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

