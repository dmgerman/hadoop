begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeWithAdditionalFields
operator|.
name|PermissionStatusFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|LongBitFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/** Manage name-to-serial-number maps for various string tables. */
end_comment

begin_enum
DECL|enum|SerialNumberManager
specifier|public
enum|enum
name|SerialNumberManager
block|{
DECL|enumConstant|GLOBAL
name|GLOBAL
parameter_list|()
operator|,
DECL|enumConstant|USER
constructor|USER(PermissionStatusFormat.USER
operator|,
constructor|AclEntryStatusFormat.NAME
block|)
enum|,
DECL|enumConstant|GROUP
name|GROUP
argument_list|(
name|PermissionStatusFormat
operator|.
name|GROUP
argument_list|,
name|AclEntryStatusFormat
operator|.
name|NAME
argument_list|)
operator|,
DECL|enumConstant|XATTR
name|XATTR
argument_list|(
name|XAttrFormat
operator|.
name|NAME
argument_list|)
enum|;
end_enum

begin_decl_stmt
DECL|field|values
specifier|private
specifier|static
specifier|final
name|SerialNumberManager
index|[]
name|values
init|=
name|values
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|maxEntryBits
specifier|private
specifier|static
specifier|final
name|int
name|maxEntryBits
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|maxEntryNumber
specifier|private
specifier|static
specifier|final
name|int
name|maxEntryNumber
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|maskBits
specifier|private
specifier|static
specifier|final
name|int
name|maskBits
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|serialMap
specifier|private
name|SerialNumberMap
argument_list|<
name|String
argument_list|>
name|serialMap
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|bitLength
specifier|private
name|int
name|bitLength
init|=
name|Integer
operator|.
name|SIZE
decl_stmt|;
end_decl_stmt

begin_static
static|static
block|{
name|maxEntryBits
operator|=
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|maxEntryNumber
operator|=
operator|(
literal|1
operator|<<
name|maxEntryBits
operator|)
operator|-
literal|1
expr_stmt|;
name|maskBits
operator|=
name|Integer
operator|.
name|SIZE
operator|-
name|maxEntryBits
expr_stmt|;
for|for
control|(
name|SerialNumberManager
name|snm
range|:
name|values
control|)
block|{
comment|// account for string table mask bits.
name|snm
operator|.
name|updateLength
argument_list|(
name|maxEntryBits
argument_list|)
expr_stmt|;
name|snm
operator|.
name|serialMap
operator|=
operator|new
name|SerialNumberMap
argument_list|<
name|String
argument_list|>
argument_list|(
name|snm
argument_list|)
expr_stmt|;
name|FSDirectory
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|snm
operator|+
literal|" serial map: bits="
operator|+
name|snm
operator|.
name|getLength
argument_list|()
operator|+
literal|" maxEntries="
operator|+
name|snm
operator|.
name|serialMap
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_static

begin_expr_stmt
DECL|method|SerialNumberManager (LongBitFormat.Enum... elements)
name|SerialNumberManager
argument_list|(
name|LongBitFormat
operator|.
name|Enum
operator|...
name|elements
argument_list|)
block|{
comment|// compute the smallest bit length registered with the serial manager.
for|for
control|(
name|LongBitFormat
operator|.
name|Enum
name|element
range|:
name|elements
control|)
block|{
name|updateLength
argument_list|(
name|element
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}    int
DECL|method|getLength ()
name|getLength
argument_list|()
block|{
return|return
name|bitLength
return|;
block|}
end_expr_stmt

begin_function
DECL|method|updateLength (int maxLength)
specifier|private
name|void
name|updateLength
parameter_list|(
name|int
name|maxLength
parameter_list|)
block|{
name|bitLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|bitLength
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getSerialNumber (String u)
specifier|public
name|int
name|getSerialNumber
parameter_list|(
name|String
name|u
parameter_list|)
block|{
return|return
name|serialMap
operator|.
name|get
argument_list|(
name|u
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getString (int id)
specifier|public
name|String
name|getString
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|serialMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getString (int id, StringTable stringTable)
specifier|public
name|String
name|getString
parameter_list|(
name|int
name|id
parameter_list|,
name|StringTable
name|stringTable
parameter_list|)
block|{
return|return
operator|(
name|stringTable
operator|!=
literal|null
operator|)
condition|?
name|stringTable
operator|.
name|get
argument_list|(
name|this
argument_list|,
name|id
argument_list|)
else|:
name|getString
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getMask (int bits)
specifier|private
name|int
name|getMask
parameter_list|(
name|int
name|bits
parameter_list|)
block|{
return|return
name|ordinal
argument_list|()
operator|<<
operator|(
name|Integer
operator|.
name|SIZE
operator|-
name|bits
operator|)
return|;
block|}
end_function

begin_function
DECL|method|getMaskBits ()
specifier|private
specifier|static
name|int
name|getMaskBits
parameter_list|()
block|{
return|return
name|maskBits
return|;
block|}
end_function

begin_function
DECL|method|size ()
specifier|private
name|int
name|size
parameter_list|()
block|{
return|return
name|serialMap
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|entrySet ()
specifier|private
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|serialMap
operator|.
name|entrySet
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// returns snapshot of current values for a save.
end_comment

begin_function
DECL|method|getStringTable ()
specifier|public
specifier|static
name|StringTable
name|getStringTable
parameter_list|()
block|{
comment|// approximate size for capacity.
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|SerialNumberManager
name|snm
range|:
name|values
control|)
block|{
name|size
operator|+=
name|snm
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|int
name|tableMaskBits
init|=
name|getMaskBits
argument_list|()
decl_stmt|;
name|StringTable
name|map
init|=
operator|new
name|StringTable
argument_list|(
name|size
argument_list|,
name|tableMaskBits
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SerialNumberManager
name|snm
range|:
name|values
control|)
block|{
specifier|final
name|int
name|mask
init|=
name|snm
operator|.
name|getMask
argument_list|(
name|tableMaskBits
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|snm
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator||
name|mask
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
end_function

begin_comment
comment|// returns an empty table for load.
end_comment

begin_function
DECL|method|newStringTable (int size, int bits)
specifier|public
specifier|static
name|StringTable
name|newStringTable
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|bits
parameter_list|)
block|{
if|if
condition|(
name|bits
operator|>
name|maskBits
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"String table bits "
operator|+
name|bits
operator|+
literal|"> "
operator|+
name|maskBits
argument_list|)
throw|;
block|}
return|return
operator|new
name|StringTable
argument_list|(
name|size
argument_list|,
name|bits
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|StringTable
specifier|public
specifier|static
class|class
name|StringTable
implements|implements
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
block|{
DECL|field|tableMaskBits
specifier|private
specifier|final
name|int
name|tableMaskBits
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
DECL|method|StringTable (int size, int loadingMaskBits)
specifier|private
name|StringTable
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|loadingMaskBits
parameter_list|)
block|{
name|this
operator|.
name|tableMaskBits
operator|=
name|loadingMaskBits
expr_stmt|;
name|this
operator|.
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|get (SerialNumberManager snm, int id)
specifier|private
name|String
name|get
parameter_list|(
name|SerialNumberManager
name|snm
parameter_list|,
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
name|tableMaskBits
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|id
operator|>
name|maxEntryNumber
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"serial id "
operator|+
name|id
operator|+
literal|"> "
operator|+
name|maxEntryNumber
argument_list|)
throw|;
block|}
name|id
operator||=
name|snm
operator|.
name|getMask
argument_list|(
name|tableMaskBits
argument_list|)
expr_stmt|;
block|}
return|return
name|map
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|put (int id, String str)
specifier|public
name|void
name|put
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getMaskBits ()
specifier|public
name|int
name|getMaskBits
parameter_list|()
block|{
return|return
name|tableMaskBits
return|;
block|}
block|}
end_class

unit|}
end_unit

