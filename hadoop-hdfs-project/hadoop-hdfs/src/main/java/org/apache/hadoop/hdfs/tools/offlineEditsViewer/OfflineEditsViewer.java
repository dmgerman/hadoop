begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineEditsViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_comment
comment|/**  * This class implements an offline edits viewer, tool that  * can be used to view edit logs.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|OfflineEditsViewer
specifier|public
class|class
name|OfflineEditsViewer
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|editsLoader
specifier|private
name|EditsLoader
name|editsLoader
decl_stmt|;
DECL|field|defaultProcessor
specifier|private
specifier|final
specifier|static
name|String
name|defaultProcessor
init|=
literal|"xml"
decl_stmt|;
comment|/**    * Set editsLoader    *    * @param editsLoader EditsLoader    */
DECL|method|setEditsLoader (EditsLoader editsLoader)
specifier|private
name|void
name|setEditsLoader
parameter_list|(
name|EditsLoader
name|editsLoader
parameter_list|)
block|{
name|this
operator|.
name|editsLoader
operator|=
name|editsLoader
expr_stmt|;
block|}
comment|/**    * Process EditLog file.    *    * @param visitor use this visitor to process the file    */
DECL|method|go (EditsVisitor visitor)
specifier|public
name|void
name|go
parameter_list|(
name|EditsVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|setEditsLoader
argument_list|(
name|EditsLoader
operator|.
name|LoaderFactory
operator|.
name|getLoader
argument_list|(
name|visitor
argument_list|)
argument_list|)
expr_stmt|;
name|editsLoader
operator|.
name|loadEdits
argument_list|()
expr_stmt|;
block|}
comment|/**    * Print help.    */
DECL|method|printHelp ()
specifier|private
name|void
name|printHelp
parameter_list|()
block|{
name|String
name|summary
init|=
literal|"Usage: bin/hdfs oev [OPTIONS] -i INPUT_FILE -o OUTPUT_FILE\n"
operator|+
literal|"Offline edits viewer\n"
operator|+
literal|"Parse a Hadoop edits log file INPUT_FILE and save results\n"
operator|+
literal|"in OUTPUT_FILE.\n"
operator|+
literal|"Required command line arguments:\n"
operator|+
literal|"-i,--inputFile<arg>   edits file to process, xml (case\n"
operator|+
literal|"                       insensitive) extension means XML format,\n"
operator|+
literal|"                       any other filename means binary format\n"
operator|+
literal|"-o,--outputFile<arg>  Name of output file. If the specified\n"
operator|+
literal|"                       file exists, it will be overwritten,\n"
operator|+
literal|"                       format of the file is determined\n"
operator|+
literal|"                       by -p option\n"
operator|+
literal|"\n"
operator|+
literal|"Optional command line arguments:\n"
operator|+
literal|"-p,--processor<arg>   Select which type of processor to apply\n"
operator|+
literal|"                       against image file, currently supported\n"
operator|+
literal|"                       processors are: binary (native binary format\n"
operator|+
literal|"                       that Hadoop uses), xml (default, XML\n"
operator|+
literal|"                       format), stats (prints statistics about\n"
operator|+
literal|"                       edits file)\n"
operator|+
literal|"-h,--help              Display usage information and exit\n"
operator|+
literal|"-v,--verbose           More verbose output, prints the input and\n"
operator|+
literal|"                       output filenames, for processors that write\n"
operator|+
literal|"                       to a file, also output to screen. On large\n"
operator|+
literal|"                       image files this will dramatically increase\n"
operator|+
literal|"                       processing time (default is false).\n"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|summary
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build command-line options and descriptions    *    * @return command line options    */
DECL|method|buildOptions ()
specifier|public
specifier|static
name|Options
name|buildOptions
parameter_list|()
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
comment|// Build in/output file arguments, which are required, but there is no
comment|// addOption method that can specify this
name|OptionBuilder
operator|.
name|isRequired
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|hasArgs
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"outputFilename"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|create
argument_list|(
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|OptionBuilder
operator|.
name|isRequired
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|hasArgs
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"inputFilename"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|create
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"p"
argument_list|,
literal|"processor"
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"v"
argument_list|,
literal|"verbose"
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
comment|/**    * Main entry point for ToolRunner (see ToolRunner docs)    *    * @param argv The parameters passed to this program.    * @return 0 on success, non zero on error.    */
annotation|@
name|Override
DECL|method|run (String[] argv)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
name|Options
name|options
init|=
name|buildOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|printHelp
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmd
decl_stmt|;
try|try
block|{
name|cmd
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error parsing command-line options: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printHelp
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
comment|// print help and exit
name|printHelp
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|boolean
name|printToScreen
init|=
literal|false
decl_stmt|;
name|String
name|inputFilenameArg
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
name|String
name|outputFilenameArg
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"o"
argument_list|)
decl_stmt|;
name|String
name|processor
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
name|processor
operator|=
name|defaultProcessor
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"v"
argument_list|)
condition|)
block|{
comment|// print output to screen too
name|printToScreen
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"input  ["
operator|+
name|inputFilenameArg
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"output ["
operator|+
name|outputFilenameArg
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|go
argument_list|(
name|EditsVisitorFactory
operator|.
name|getEditsVisitor
argument_list|(
name|outputFilenameArg
argument_list|,
name|processor
argument_list|,
name|TokenizerFactory
operator|.
name|getTokenizer
argument_list|(
name|inputFilenameArg
argument_list|)
argument_list|,
name|printToScreen
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Input file ended unexpectedly. Exiting"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Encountered exception. Exiting: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
comment|/**    * main() runs the offline edits viewer using ToolRunner    *    * @param argv Command line parameters.    */
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|OfflineEditsViewer
argument_list|()
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

