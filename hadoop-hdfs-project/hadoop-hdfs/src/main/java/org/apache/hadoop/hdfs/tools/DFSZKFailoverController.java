begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_USER_NAME_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ZKFailoverController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAZKInfoProtos
operator|.
name|ActiveNodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DFSZKFailoverController
specifier|public
class|class
name|DFSZKFailoverController
extends|extends
name|ZKFailoverController
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DFSZKFailoverController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|localTarget
specifier|private
name|NNHAServiceTarget
name|localTarget
decl_stmt|;
DECL|field|localNNConf
specifier|private
name|Configuration
name|localNNConf
decl_stmt|;
annotation|@
name|Override
DECL|method|dataToTarget (byte[] data)
specifier|protected
name|HAServiceTarget
name|dataToTarget
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|ActiveNodeInfo
name|proto
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|ActiveNodeInfo
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid data in ZK: "
operator|+
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|data
argument_list|)
argument_list|)
throw|;
block|}
name|NNHAServiceTarget
name|ret
init|=
operator|new
name|NNHAServiceTarget
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|proto
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|proto
operator|.
name|getNamenodeId
argument_list|()
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addressFromProtobuf
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|proto
operator|.
name|getHostname
argument_list|()
argument_list|,
name|proto
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|addressFromProtobuf
operator|.
name|equals
argument_list|(
name|ret
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Mismatched address stored in ZK for "
operator|+
name|ret
operator|+
literal|": Stored protobuf was "
operator|+
name|proto
operator|+
literal|", address from our own "
operator|+
literal|"configuration for this NameNode was "
operator|+
name|ret
operator|.
name|getAddress
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|targetToData (HAServiceTarget target)
specifier|protected
name|byte
index|[]
name|targetToData
parameter_list|(
name|HAServiceTarget
name|target
parameter_list|)
block|{
name|InetSocketAddress
name|addr
init|=
name|target
operator|.
name|getAddress
argument_list|()
decl_stmt|;
return|return
name|ActiveNodeInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setHostname
argument_list|(
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNameserviceId
argument_list|(
name|localTarget
operator|.
name|getNameServiceId
argument_list|()
argument_list|)
operator|.
name|setNamenodeId
argument_list|(
name|localTarget
operator|.
name|getNameNodeId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|localNNConf
operator|=
name|DFSHAAdmin
operator|.
name|addSecurityConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|nsId
init|=
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|localNNConf
argument_list|,
name|nsId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"HA is not enabled for this namenode."
argument_list|)
throw|;
block|}
name|String
name|nnId
init|=
name|HAUtil
operator|.
name|getNameNodeId
argument_list|(
name|localNNConf
argument_list|,
name|nsId
argument_list|)
decl_stmt|;
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|localNNConf
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|setGenericConf
argument_list|(
name|localNNConf
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|,
name|ZKFC_CONF_KEYS
argument_list|)
expr_stmt|;
name|localTarget
operator|=
operator|new
name|NNHAServiceTarget
argument_list|(
name|localNNConf
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
name|super
operator|.
name|setConf
argument_list|(
name|localNNConf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failover controller configured for NameNode "
operator|+
name|nsId
operator|+
literal|"."
operator|+
name|nnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLocalTarget ()
specifier|public
name|HAServiceTarget
name|getLocalTarget
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|localTarget
operator|!=
literal|null
argument_list|,
literal|"setConf() should have already been called"
argument_list|)
expr_stmt|;
return|return
name|localTarget
return|;
block|}
annotation|@
name|Override
DECL|method|loginAsFCUser ()
specifier|public
name|void
name|loginAsFCUser
parameter_list|()
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|socAddr
init|=
name|NameNode
operator|.
name|getAddress
argument_list|(
name|localNNConf
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|login
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|DFS_NAMENODE_KEYTAB_FILE_KEY
argument_list|,
name|DFS_NAMENODE_USER_NAME_KEY
argument_list|,
name|socAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|DFSZKFailoverController
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

