begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|storage
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|IPC_MAXIMUM_DATA_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|IPC_MAXIMUM_DATA_LENGTH_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|terminate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|CreateContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RollingUpgradeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockReportContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|HeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NNHAStatusHeartbeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|VolumeFailureSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|LocatedContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|StorageContainerLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerLocationProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * StorageContainerManager is the main entry point for the service that provides  * information about which HDFS nodes host containers.  *  * The current implementation is a stub suitable to begin end-to-end testing of  * Ozone service interactions.  DataNodes report to StorageContainerManager  * using the existing heartbeat messages.  StorageContainerManager lazily  * initializes a single storage container to be served by those DataNodes.  * All subsequent requests for container locations will reply with that single  * pipeline, using all registered nodes.  *  * This will evolve from a stub to a full-fledged implementation capable of  * partitioning the keyspace across multiple containers, with appropriate  * distribution across nodes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StorageContainerManager
specifier|public
class|class
name|StorageContainerManager
implements|implements
name|DatanodeProtocol
implements|,
name|StorageContainerLocationProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StorageContainerManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ns
specifier|private
specifier|final
name|StorageContainerNameService
name|ns
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
specifier|final
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|singlePipeline
specifier|private
name|Pipeline
name|singlePipeline
decl_stmt|;
comment|/** The RPC server that listens to requests from DataNodes. */
DECL|field|datanodeRpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|datanodeRpcServer
decl_stmt|;
DECL|field|datanodeRpcAddress
specifier|private
specifier|final
name|InetSocketAddress
name|datanodeRpcAddress
decl_stmt|;
comment|/** The RPC server that listens to requests from clients. */
DECL|field|clientRpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|clientRpcServer
decl_stmt|;
DECL|field|clientRpcAddress
specifier|private
specifier|final
name|InetSocketAddress
name|clientRpcAddress
decl_stmt|;
comment|/**    * Creates a new StorageContainerManager.  Configuration will be updated with    * information on the actual listening addresses used for RPC servers.    *    * @param conf configuration    */
DECL|method|StorageContainerManager (OzoneConfiguration conf)
specifier|public
name|StorageContainerManager
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|ns
operator|=
operator|new
name|StorageContainerNameService
argument_list|()
expr_stmt|;
name|boolean
name|haEnabled
init|=
literal|false
decl_stmt|;
name|blockManager
operator|=
operator|new
name|BlockManager
argument_list|(
name|ns
argument_list|,
name|haEnabled
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|xceiverClientManager
operator|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|DatanodeProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|int
name|handlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_SCM_HANDLER_COUNT_KEY
argument_list|,
name|OZONE_SCM_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxDataLength
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|IPC_MAXIMUM_DATA_LENGTH
argument_list|,
name|IPC_MAXIMUM_DATA_LENGTH_DEFAULT
argument_list|)
decl_stmt|;
name|BlockingService
name|dnProtoPbService
init|=
name|DatanodeProtocolProtos
operator|.
name|DatanodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
operator|new
name|DatanodeProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|,
name|maxDataLength
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|datanodeRpcAddr
init|=
name|OzoneClientUtils
operator|.
name|getScmDataNodeBindAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|datanodeRpcServer
operator|=
name|startRpcServer
argument_list|(
name|conf
argument_list|,
name|datanodeRpcAddr
argument_list|,
name|DatanodeProtocolPB
operator|.
name|class
argument_list|,
name|dnProtoPbService
argument_list|,
name|handlerCount
argument_list|)
expr_stmt|;
name|datanodeRpcAddress
operator|=
name|updateListenAddress
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|,
name|datanodeRpcAddr
argument_list|,
name|datanodeRpcServer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"RPC server for DataNodes"
argument_list|,
name|datanodeRpcAddress
argument_list|)
argument_list|)
expr_stmt|;
name|BlockingService
name|storageProtoPbService
init|=
name|StorageContainerLocationProtocolProtos
operator|.
name|StorageContainerLocationProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
operator|new
name|StorageContainerLocationProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|clientRpcAddr
init|=
name|OzoneClientUtils
operator|.
name|getScmClientBindAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientRpcServer
operator|=
name|startRpcServer
argument_list|(
name|conf
argument_list|,
name|clientRpcAddr
argument_list|,
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|,
name|storageProtoPbService
argument_list|,
name|handlerCount
argument_list|)
expr_stmt|;
name|clientRpcAddress
operator|=
name|updateListenAddress
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
name|clientRpcAddr
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"StorageContainerLocationProtocol RPC server"
argument_list|,
name|clientRpcAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStorageContainerLocations (Set<String> keys)
specifier|public
name|Set
argument_list|<
name|LocatedContainer
argument_list|>
name|getStorageContainerLocations
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getStorageContainerLocations keys = {}"
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|initSingleContainerPipeline
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|liveNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
name|liveNodes
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|liveNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Storage container locations not found."
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
name|locations
init|=
name|Sets
operator|.
expr|<
name|DatanodeInfo
operator|>
name|newLinkedHashSet
argument_list|(
name|liveNodes
argument_list|)
decl_stmt|;
name|DatanodeInfo
name|leader
init|=
name|liveNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|LocatedContainer
argument_list|>
name|locatedContainers
init|=
name|Sets
operator|.
name|newLinkedHashSetWithExpectedSize
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|locatedContainers
operator|.
name|add
argument_list|(
operator|new
name|LocatedContainer
argument_list|(
name|key
argument_list|,
name|key
argument_list|,
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|,
name|locations
argument_list|,
name|leader
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"getStorageContainerLocations keys = {}, locatedContainers = {}"
argument_list|,
name|keys
argument_list|,
name|locatedContainers
argument_list|)
expr_stmt|;
return|return
name|locatedContainers
return|;
block|}
annotation|@
name|Override
DECL|method|registerDatanode ( DatanodeRegistration registration)
specifier|public
name|DatanodeRegistration
name|registerDatanode
parameter_list|(
name|DatanodeRegistration
name|registration
parameter_list|)
throws|throws
name|IOException
block|{
name|ns
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|registerDatanode
argument_list|(
name|registration
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ns
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
return|return
name|registration
return|;
block|}
annotation|@
name|Override
DECL|method|sendHeartbeat (DatanodeRegistration registration, StorageReport[] reports, long dnCacheCapacity, long dnCacheUsed, int xmitsInProgress, int xceiverCount, int failedVolumes, VolumeFailureSummary volumeFailureSummary, boolean requestFullBlockReportLease)
specifier|public
name|HeartbeatResponse
name|sendHeartbeat
parameter_list|(
name|DatanodeRegistration
name|registration
parameter_list|,
name|StorageReport
index|[]
name|reports
parameter_list|,
name|long
name|dnCacheCapacity
parameter_list|,
name|long
name|dnCacheUsed
parameter_list|,
name|int
name|xmitsInProgress
parameter_list|,
name|int
name|xceiverCount
parameter_list|,
name|int
name|failedVolumes
parameter_list|,
name|VolumeFailureSummary
name|volumeFailureSummary
parameter_list|,
name|boolean
name|requestFullBlockReportLease
parameter_list|)
throws|throws
name|IOException
block|{
name|ns
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|cacheCapacity
init|=
literal|0
decl_stmt|;
name|long
name|cacheUsed
init|=
literal|0
decl_stmt|;
name|int
name|maxTransfer
init|=
name|blockManager
operator|.
name|getMaxReplicationStreams
argument_list|()
operator|-
name|xmitsInProgress
decl_stmt|;
name|DatanodeCommand
index|[]
name|cmds
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|handleHeartbeat
argument_list|(
name|registration
argument_list|,
name|reports
argument_list|,
name|blockManager
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|cacheCapacity
argument_list|,
name|cacheUsed
argument_list|,
name|xceiverCount
argument_list|,
name|maxTransfer
argument_list|,
name|failedVolumes
argument_list|,
name|volumeFailureSummary
argument_list|)
decl_stmt|;
name|long
name|txnId
init|=
literal|234
decl_stmt|;
name|NNHAStatusHeartbeat
name|haState
init|=
operator|new
name|NNHAStatusHeartbeat
argument_list|(
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|txnId
argument_list|)
decl_stmt|;
name|RollingUpgradeInfo
name|rollingUpgradeInfo
init|=
literal|null
decl_stmt|;
name|long
name|blockReportLeaseId
init|=
name|requestFullBlockReportLease
condition|?
name|blockManager
operator|.
name|requestBlockReportLeaseId
argument_list|(
name|registration
argument_list|)
else|:
literal|0
decl_stmt|;
return|return
operator|new
name|HeartbeatResponse
argument_list|(
name|cmds
argument_list|,
name|haState
argument_list|,
name|rollingUpgradeInfo
argument_list|,
name|blockReportLeaseId
argument_list|)
return|;
block|}
finally|finally
block|{
name|ns
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|blockReport (DatanodeRegistration registration, String poolId, StorageBlockReport[] reports, BlockReportContext context)
specifier|public
name|DatanodeCommand
name|blockReport
parameter_list|(
name|DatanodeRegistration
name|registration
parameter_list|,
name|String
name|poolId
parameter_list|,
name|StorageBlockReport
index|[]
name|reports
parameter_list|,
name|BlockReportContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|reports
operator|.
name|length
condition|;
name|r
operator|++
control|)
block|{
specifier|final
name|BlockListAsLongs
name|storageContainerList
init|=
name|reports
index|[
name|r
index|]
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|blockManager
operator|.
name|processReport
argument_list|(
name|registration
argument_list|,
name|reports
index|[
name|r
index|]
operator|.
name|getStorage
argument_list|()
argument_list|,
name|storageContainerList
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|cacheReport (DatanodeRegistration registration, String poolId, List<Long> blockIds)
specifier|public
name|DatanodeCommand
name|cacheReport
parameter_list|(
name|DatanodeRegistration
name|registration
parameter_list|,
name|String
name|poolId
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|blockIds
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Centralized Cache Management is not supported
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|blockReceivedAndDeleted (DatanodeRegistration registration, String poolId, StorageReceivedDeletedBlocks[] rcvdAndDeletedBlocks)
specifier|public
name|void
name|blockReceivedAndDeleted
parameter_list|(
name|DatanodeRegistration
name|registration
parameter_list|,
name|String
name|poolId
parameter_list|,
name|StorageReceivedDeletedBlocks
index|[]
name|rcvdAndDeletedBlocks
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|StorageReceivedDeletedBlocks
name|r
range|:
name|rcvdAndDeletedBlocks
control|)
block|{
name|ns
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|blockManager
operator|.
name|processIncrementalBlockReport
argument_list|(
name|registration
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ns
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|errorReport (DatanodeRegistration registration, int errorCode, String msg)
specifier|public
name|void
name|errorReport
parameter_list|(
name|DatanodeRegistration
name|registration
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dnName
init|=
operator|(
name|registration
operator|==
literal|null
operator|)
condition|?
literal|"Unknown DataNode"
else|:
name|registration
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|DatanodeProtocol
operator|.
name|NOTIFY
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error report from "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|errorCode
operator|==
name|DatanodeProtocol
operator|.
name|DISK_ERROR
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Disk error on "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|errorCode
operator|==
name|DatanodeProtocol
operator|.
name|FATAL_DISK_ERROR
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fatal disk error on "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|removeDatanode
argument_list|(
name|registration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error report from "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|versionRequest ()
specifier|public
name|NamespaceInfo
name|versionRequest
parameter_list|()
throws|throws
name|IOException
block|{
name|ns
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|NamespaceInfo
argument_list|(
literal|1
argument_list|,
literal|"random"
argument_list|,
literal|"random"
argument_list|,
literal|2
argument_list|,
name|NodeType
operator|.
name|STORAGE_CONTAINER_SERVICE
argument_list|)
return|;
block|}
finally|finally
block|{
name|ns
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|reportBadBlocks (LocatedBlock[] blocks)
specifier|public
name|void
name|reportBadBlocks
parameter_list|(
name|LocatedBlock
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|ns
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ExtendedBlock
name|blk
init|=
name|blocks
index|[
name|i
index|]
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|nodes
init|=
name|blocks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|String
index|[]
name|storageIDs
init|=
name|blocks
index|[
name|i
index|]
operator|.
name|getStorageIDs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|blockManager
operator|.
name|findAndMarkBlockAsCorrupt
argument_list|(
name|blk
argument_list|,
name|nodes
index|[
name|j
index|]
argument_list|,
name|storageIDs
operator|==
literal|null
condition|?
literal|null
else|:
name|storageIDs
index|[
name|j
index|]
argument_list|,
literal|"client machine reported it"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|ns
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|commitBlockSynchronization (ExtendedBlock block, long newgenerationstamp, long newlength, boolean closeFile, boolean deleteblock, DatanodeID[] newtargets, String[] newtargetstorages)
specifier|public
name|void
name|commitBlockSynchronization
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|long
name|newgenerationstamp
parameter_list|,
name|long
name|newlength
parameter_list|,
name|boolean
name|closeFile
parameter_list|,
name|boolean
name|deleteblock
parameter_list|,
name|DatanodeID
index|[]
name|newtargets
parameter_list|,
name|String
index|[]
name|newtargetstorages
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Not needed for the purpose of object store
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Returns information on registered DataNodes.    *    * @param type DataNode type to report    * @return registered DataNodes matching requested type    */
DECL|method|getDatanodeReport (DatanodeReportType type)
specifier|public
name|DatanodeInfo
index|[]
name|getDatanodeReport
parameter_list|(
name|DatanodeReportType
name|type
parameter_list|)
block|{
name|ns
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeListForReport
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeInfo
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
finally|finally
block|{
name|ns
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns listen address of client RPC server.    *    * @return listen address of client RPC server    */
annotation|@
name|VisibleForTesting
DECL|method|getClientRpcAddress ()
specifier|public
name|InetSocketAddress
name|getClientRpcAddress
parameter_list|()
block|{
return|return
name|clientRpcAddress
return|;
block|}
comment|/**    * Start service.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|clientRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|datanodeRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop service.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|clientRpcServer
operator|!=
literal|null
condition|)
block|{
name|clientRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|datanodeRpcServer
operator|!=
literal|null
condition|)
block|{
name|datanodeRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until service has completed shutdown.    */
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
try|try
block|{
name|clientRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
name|datanodeRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted during StorageContainerManager join."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Lazily initializes a single container pipeline using all registered    * DataNodes via a synchronous call to the container protocol.  This single    * container pipeline will be reused for container requests for the lifetime    * of this StorageContainerManager.    *    * @throws IOException if there is an I/O error    */
DECL|method|initSingleContainerPipeline ()
specifier|private
specifier|synchronized
name|Pipeline
name|initSingleContainerPipeline
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|singlePipeline
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|liveNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
name|liveNodes
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|liveNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Storage container locations not found."
argument_list|)
throw|;
block|}
name|Pipeline
name|newPipeline
init|=
name|newPipelineFromNodes
argument_list|(
name|liveNodes
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|XceiverClient
name|xceiverClient
init|=
name|xceiverClientManager
operator|.
name|acquireClient
argument_list|(
name|newPipeline
argument_list|)
decl_stmt|;
try|try
block|{
name|ContainerData
name|containerData
init|=
name|ContainerData
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|newPipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CreateContainerRequestProto
name|createContainerRequest
init|=
name|CreateContainerRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPipeline
argument_list|(
name|newPipeline
operator|.
name|getProtobufMessage
argument_list|()
argument_list|)
operator|.
name|setContainerData
argument_list|(
name|containerData
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|CreateContainer
argument_list|)
operator|.
name|setCreateContainer
argument_list|(
name|createContainerRequest
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerCommandResponseProto
name|response
init|=
name|xceiverClient
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|response
operator|.
name|getResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
name|Result
operator|.
name|SUCCESS
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to initialize container due to result code: "
operator|+
name|result
argument_list|)
throw|;
block|}
name|singlePipeline
operator|=
name|newPipeline
expr_stmt|;
block|}
finally|finally
block|{
name|xceiverClientManager
operator|.
name|releaseClient
argument_list|(
name|xceiverClient
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|singlePipeline
return|;
block|}
comment|/**    * Builds a message for logging startup information about an RPC server.    *    * @param description RPC server description    * @param addr RPC server listening address    * @return server startup message    */
DECL|method|buildRpcServerStartMessage (String description, InetSocketAddress addr)
specifier|private
specifier|static
name|String
name|buildRpcServerStartMessage
parameter_list|(
name|String
name|description
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|!=
literal|null
condition|?
name|String
operator|.
name|format
argument_list|(
literal|"%s is listening at %s"
argument_list|,
name|description
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
operator|+
literal|":"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
else|:
name|String
operator|.
name|format
argument_list|(
literal|"%s not started"
argument_list|,
name|description
argument_list|)
return|;
block|}
comment|/**    * Translates a list of nodes, ordered such that the first is the leader, into    * a corresponding {@link Pipeline} object.    *    * @param nodes list of nodes    * @param containerName container name    * @return pipeline corresponding to nodes    */
DECL|method|newPipelineFromNodes (List<DatanodeDescriptor> nodes, String containerName)
specifier|private
specifier|static
name|Pipeline
name|newPipelineFromNodes
parameter_list|(
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
parameter_list|,
name|String
name|containerName
parameter_list|)
block|{
name|String
name|leaderId
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeUuid
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
operator|new
name|Pipeline
argument_list|(
name|leaderId
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|nodes
control|)
block|{
name|pipeline
operator|.
name|addMember
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|pipeline
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
comment|/**    * Starts an RPC server, if configured.    *    * @param conf configuration    * @param addr configured address of RPC server    * @param protocol RPC protocol provided by RPC server    * @param instance RPC protocol implementation instance    * @param handlerCount RPC server handler count    *    * @return RPC server    * @throws IOException if there is an I/O error while creating RPC server    */
DECL|method|startRpcServer (OzoneConfiguration conf, InetSocketAddress addr, Class<?> protocol, BlockingService instance, int handlerCount)
specifier|private
specifier|static
name|RPC
operator|.
name|Server
name|startRpcServer
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|BlockingService
name|instance
parameter_list|,
name|int
name|handlerCount
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|Server
name|rpcServer
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
operator|.
name|setInstance
argument_list|(
name|instance
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|handlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|instance
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
return|return
name|rpcServer
return|;
block|}
comment|/**    * After starting an RPC server, updates configuration with the actual    * listening address of that server. The listening address may be different    * from the configured address if, for example, the configured address uses    * port 0 to request use of an ephemeral port.    *    * @param conf configuration to update    * @param rpcAddressKey configuration key for RPC server address    * @param addr configured address    * @param rpcServer started RPC server.    */
DECL|method|updateListenAddress (OzoneConfiguration conf, String rpcAddressKey, InetSocketAddress addr, RPC.Server rpcServer)
specifier|private
specifier|static
name|InetSocketAddress
name|updateListenAddress
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|rpcAddressKey
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|RPC
operator|.
name|Server
name|rpcServer
parameter_list|)
block|{
name|InetSocketAddress
name|listenAddr
init|=
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|updatedAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|listenAddr
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|rpcAddressKey
argument_list|,
name|addr
operator|.
name|getHostString
argument_list|()
operator|+
literal|":"
operator|+
name|updatedAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|updatedAddr
return|;
block|}
comment|/**    * Main entry point for starting StorageContainerManager.    *    * @param argv arguments    * @throws IOException if startup fails due to I/O error    */
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|IOException
block|{
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|StorageContainerManager
operator|.
name|class
argument_list|,
name|argv
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
try|try
block|{
name|StorageContainerManager
name|scm
init|=
operator|new
name|StorageContainerManager
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|scm
operator|.
name|start
argument_list|()
expr_stmt|;
name|scm
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start the StorageContainerManager."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

