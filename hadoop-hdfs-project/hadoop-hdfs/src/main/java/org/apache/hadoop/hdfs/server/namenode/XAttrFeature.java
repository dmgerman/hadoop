begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|XAttrHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Feature for extended attributes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|XAttrFeature
specifier|public
class|class
name|XAttrFeature
implements|implements
name|INode
operator|.
name|Feature
block|{
DECL|field|PACK_THRESHOLD
specifier|static
specifier|final
name|int
name|PACK_THRESHOLD
init|=
literal|1024
decl_stmt|;
comment|/** The packed bytes for small size XAttrs. */
DECL|field|attrs
specifier|private
name|byte
index|[]
name|attrs
decl_stmt|;
comment|/**    * List to store large size XAttrs.    * Typically XAttr value size is small, so this    * list is null usually.    */
DECL|field|xAttrs
specifier|private
name|ImmutableList
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
decl_stmt|;
DECL|method|XAttrFeature (List<XAttr> xAttrs)
specifier|public
name|XAttrFeature
parameter_list|(
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|)
block|{
if|if
condition|(
name|xAttrs
operator|!=
literal|null
operator|&&
operator|!
name|xAttrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|XAttr
argument_list|>
name|toPack
init|=
operator|new
name|ArrayList
argument_list|<
name|XAttr
argument_list|>
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|XAttr
argument_list|>
name|b
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XAttr
name|attr
range|:
name|xAttrs
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|<=
name|PACK_THRESHOLD
condition|)
block|{
name|toPack
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|b
operator|=
name|ImmutableList
operator|.
name|builder
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|attrs
operator|=
name|XAttrFormat
operator|.
name|toBytes
argument_list|(
name|toPack
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|xAttrs
operator|=
name|b
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the XAttrs.    * @return the XAttrs    */
DECL|method|getXAttrs ()
specifier|public
name|List
argument_list|<
name|XAttr
argument_list|>
name|getXAttrs
parameter_list|()
block|{
if|if
condition|(
name|xAttrs
operator|==
literal|null
condition|)
block|{
return|return
name|XAttrFormat
operator|.
name|toXAttrs
argument_list|(
name|attrs
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
return|return
name|xAttrs
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|XAttr
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|XAttrFormat
operator|.
name|toXAttrs
argument_list|(
name|attrs
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|xAttrs
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
comment|/**    * Get XAttr by name with prefix.    * @param prefixedName xAttr name with prefix    * @return the XAttr    */
DECL|method|getXAttr (String prefixedName)
specifier|public
name|XAttr
name|getXAttr
parameter_list|(
name|String
name|prefixedName
parameter_list|)
block|{
name|XAttr
name|attr
init|=
name|XAttrFormat
operator|.
name|getXAttr
argument_list|(
name|attrs
argument_list|,
name|prefixedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
operator|&&
name|xAttrs
operator|!=
literal|null
condition|)
block|{
name|XAttr
name|toFind
init|=
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|prefixedName
argument_list|)
decl_stmt|;
for|for
control|(
name|XAttr
name|a
range|:
name|xAttrs
control|)
block|{
if|if
condition|(
name|a
operator|.
name|equalsIgnoreValue
argument_list|(
name|toFind
argument_list|)
condition|)
block|{
name|attr
operator|=
name|a
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|attr
return|;
block|}
block|}
end_class

end_unit

