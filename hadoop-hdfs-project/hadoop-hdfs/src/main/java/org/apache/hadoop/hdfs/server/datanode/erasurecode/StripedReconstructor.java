begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|CachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockECReconstructionCommand
operator|.
name|BlockECReconstructionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ErasureCoderOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_comment
comment|/**  * StripedReconstructor reconstruct one or more missed striped block in the  * striped block group, the minimum number of live striped blocks should be  * no less than data block number.  *  * |<- Striped Block Group -> |  *  blk_0      blk_1       blk_2(*)   blk_3   ...<- A striped block group  *    |          |           |          |  *    v          v           v          v  * +------+   +------+   +------+   +------+  * |cell_0|   |cell_1|   |cell_2|   |cell_3|  ...  * +------+   +------+   +------+   +------+  * |cell_4|   |cell_5|   |cell_6|   |cell_7|  ...  * +------+   +------+   +------+   +------+  * |cell_8|   |cell_9|   |cell10|   |cell11|  ...  * +------+   +------+   +------+   +------+  *  ...         ...       ...         ...  *  *  * We use following steps to reconstruct striped block group, in each round, we  * reconstruct<code>bufferSize</code> data until finish, the  *<code>bufferSize</code> is configurable and may be less or larger than  * cell size:  * step1: read<code>bufferSize</code> data from minimum number of sources  *        required by reconstruction.  * step2: decode data for targets.  * step3: transfer data to targets.  *  * In step1, try to read<code>bufferSize</code> data from minimum number  * of sources , if there is corrupt or stale sources, read from new source  * will be scheduled. The best sources are remembered for next round and  * may be updated in each round.  *  * In step2, typically if source blocks we read are all data blocks, we  * need to call encode, and if there is one parity block, we need to call  * decode. Notice we only read once and reconstruct all missed striped block  * if they are more than one.  *  * In step3, send the reconstructed data to targets by constructing packet  * and send them directly. Same as continuous block replication, we  * don't check the packet ack. Since the datanode doing the reconstruction work  * are one of the source datanodes, so the reconstructed data are sent  * remotely.  *  * There are some points we can do further improvements in next phase:  * 1. we can read the block file directly on the local datanode,  *    currently we use remote block reader. (Notice short-circuit is not  *    a good choice, see inline comments).  * 2. We need to check the packet ack for EC reconstruction? Since EC  *    reconstruction is more expensive than continuous block replication,  *    it needs to read from several other datanodes, should we make sure the  *    reconstructed result received by targets?  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StripedReconstructor
class|class
name|StripedReconstructor
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|DataNode
operator|.
name|LOG
decl_stmt|;
DECL|field|worker
specifier|private
specifier|final
name|ErasureCodingWorker
name|worker
decl_stmt|;
DECL|field|datanode
specifier|private
specifier|final
name|DataNode
name|datanode
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|field|decoder
specifier|private
name|RawErasureDecoder
name|decoder
decl_stmt|;
DECL|field|blockGroup
specifier|private
specifier|final
name|ExtendedBlock
name|blockGroup
decl_stmt|;
DECL|field|liveBitSet
specifier|private
specifier|final
name|BitSet
name|liveBitSet
decl_stmt|;
comment|// position in striped internal block
DECL|field|positionInBlock
specifier|private
name|long
name|positionInBlock
decl_stmt|;
DECL|field|stripedReader
specifier|private
name|StripedReader
name|stripedReader
decl_stmt|;
DECL|field|stripedWriter
specifier|private
name|StripedWriter
name|stripedWriter
decl_stmt|;
DECL|field|cachingStrategy
specifier|private
specifier|final
name|CachingStrategy
name|cachingStrategy
decl_stmt|;
DECL|method|StripedReconstructor (ErasureCodingWorker worker, BlockECReconstructionInfo reconstructionInfo)
name|StripedReconstructor
parameter_list|(
name|ErasureCodingWorker
name|worker
parameter_list|,
name|BlockECReconstructionInfo
name|reconstructionInfo
parameter_list|)
block|{
name|this
operator|.
name|worker
operator|=
name|worker
expr_stmt|;
name|this
operator|.
name|datanode
operator|=
name|worker
operator|.
name|getDatanode
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|worker
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|ecPolicy
operator|=
name|reconstructionInfo
operator|.
name|getErasureCodingPolicy
argument_list|()
expr_stmt|;
name|blockGroup
operator|=
name|reconstructionInfo
operator|.
name|getExtendedBlock
argument_list|()
expr_stmt|;
name|byte
index|[]
name|liveIndices
init|=
name|reconstructionInfo
operator|.
name|getLiveBlockIndices
argument_list|()
decl_stmt|;
name|liveBitSet
operator|=
operator|new
name|BitSet
argument_list|(
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|liveIndices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|liveBitSet
operator|.
name|set
argument_list|(
name|liveIndices
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|stripedReader
operator|=
operator|new
name|StripedReader
argument_list|(
name|this
argument_list|,
name|datanode
argument_list|,
name|conf
argument_list|,
name|reconstructionInfo
argument_list|)
expr_stmt|;
name|stripedWriter
operator|=
operator|new
name|StripedWriter
argument_list|(
name|this
argument_list|,
name|datanode
argument_list|,
name|conf
argument_list|,
name|reconstructionInfo
argument_list|)
expr_stmt|;
name|cachingStrategy
operator|=
name|CachingStrategy
operator|.
name|newDefaultStrategy
argument_list|()
expr_stmt|;
name|positionInBlock
operator|=
literal|0L
expr_stmt|;
block|}
DECL|method|getLiveBitSet ()
name|BitSet
name|getLiveBitSet
parameter_list|()
block|{
return|return
name|liveBitSet
return|;
block|}
DECL|method|allocateBuffer (int length)
name|ByteBuffer
name|allocateBuffer
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
return|;
block|}
DECL|method|getBlock (int i)
name|ExtendedBlock
name|getBlock
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|StripedBlockUtil
operator|.
name|constructInternalBlock
argument_list|(
name|blockGroup
argument_list|,
name|ecPolicy
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|getBlockLen (int i)
name|long
name|getBlockLen
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|StripedBlockUtil
operator|.
name|getInternalBlockLength
argument_list|(
name|blockGroup
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|ecPolicy
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|hasValidTargets ()
name|boolean
name|hasValidTargets
parameter_list|()
block|{
return|return
name|stripedWriter
operator|.
name|hasValidTargets
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|datanode
operator|.
name|incrementXmitsInProgress
argument_list|()
expr_stmt|;
try|try
block|{
name|stripedReader
operator|.
name|init
argument_list|()
expr_stmt|;
name|stripedWriter
operator|.
name|init
argument_list|()
expr_stmt|;
name|reconstructAndTransfer
argument_list|()
expr_stmt|;
name|stripedWriter
operator|.
name|endTargetBlocks
argument_list|()
expr_stmt|;
comment|// Currently we don't check the acks for packets, this is similar as
comment|// block replication.
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to reconstruct striped block: {}"
argument_list|,
name|blockGroup
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|datanode
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrECFailedReconstructionTasks
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|datanode
operator|.
name|decrementXmitsInProgress
argument_list|()
expr_stmt|;
name|datanode
operator|.
name|getMetrics
argument_list|()
operator|.
name|incrECReconstructionTasks
argument_list|()
expr_stmt|;
name|stripedReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|stripedWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reconstructAndTransfer ()
name|void
name|reconstructAndTransfer
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|positionInBlock
operator|<
name|stripedWriter
operator|.
name|getMaxTargetLength
argument_list|()
condition|)
block|{
name|long
name|remaining
init|=
name|stripedWriter
operator|.
name|getMaxTargetLength
argument_list|()
operator|-
name|positionInBlock
decl_stmt|;
specifier|final
name|int
name|toReconstructLen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|stripedReader
operator|.
name|getBufferSize
argument_list|()
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
comment|// step1: read from minimum source DNs required for reconstruction.
comment|// The returned success list is the source DNs we do real read from
name|stripedReader
operator|.
name|readMinimumSources
argument_list|(
name|toReconstructLen
argument_list|)
expr_stmt|;
comment|// step2: decode to reconstruct targets
name|reconstructTargets
argument_list|(
name|toReconstructLen
argument_list|)
expr_stmt|;
comment|// step3: transfer data
if|if
condition|(
name|stripedWriter
operator|.
name|transferData2Targets
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|error
init|=
literal|"Transfer failed for all targets."
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
name|positionInBlock
operator|+=
name|toReconstructLen
expr_stmt|;
name|clearBuffers
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Initialize decoder
DECL|method|initDecoderIfNecessary ()
specifier|private
name|void
name|initDecoderIfNecessary
parameter_list|()
block|{
if|if
condition|(
name|decoder
operator|==
literal|null
condition|)
block|{
name|ErasureCoderOptions
name|coderOptions
init|=
operator|new
name|ErasureCoderOptions
argument_list|(
name|ecPolicy
operator|.
name|getNumDataUnits
argument_list|()
argument_list|,
name|ecPolicy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
decl_stmt|;
name|decoder
operator|=
name|CodecUtil
operator|.
name|createRawDecoder
argument_list|(
name|conf
argument_list|,
name|ecPolicy
operator|.
name|getCodecName
argument_list|()
argument_list|,
name|coderOptions
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reconstructTargets (int toReconstructLen)
specifier|private
name|void
name|reconstructTargets
parameter_list|(
name|int
name|toReconstructLen
parameter_list|)
block|{
name|initDecoderIfNecessary
argument_list|()
expr_stmt|;
name|ByteBuffer
index|[]
name|inputs
init|=
name|stripedReader
operator|.
name|getInputBuffers
argument_list|(
name|toReconstructLen
argument_list|)
decl_stmt|;
name|int
index|[]
name|erasedIndices
init|=
name|stripedWriter
operator|.
name|getRealTargetIndices
argument_list|()
decl_stmt|;
name|ByteBuffer
index|[]
name|outputs
init|=
name|stripedWriter
operator|.
name|getRealTargetBuffers
argument_list|(
name|toReconstructLen
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|decode
argument_list|(
name|inputs
argument_list|,
name|erasedIndices
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
name|stripedWriter
operator|.
name|updateRealTargetBuffers
argument_list|(
name|toReconstructLen
argument_list|)
expr_stmt|;
block|}
DECL|method|getPositionInBlock ()
name|long
name|getPositionInBlock
parameter_list|()
block|{
return|return
name|positionInBlock
return|;
block|}
comment|/**    * Clear all associated buffers.    */
DECL|method|clearBuffers ()
specifier|private
name|void
name|clearBuffers
parameter_list|()
block|{
name|stripedReader
operator|.
name|clearBuffers
argument_list|()
expr_stmt|;
name|stripedWriter
operator|.
name|clearBuffers
argument_list|()
expr_stmt|;
block|}
DECL|method|getSocketAddress4Transfer (DatanodeInfo dnInfo)
name|InetSocketAddress
name|getSocketAddress4Transfer
parameter_list|(
name|DatanodeInfo
name|dnInfo
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|dnInfo
operator|.
name|getXferAddr
argument_list|(
name|datanode
operator|.
name|getDnConf
argument_list|()
operator|.
name|getConnectToDnViaHostname
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getBufferSize ()
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|stripedReader
operator|.
name|getBufferSize
argument_list|()
return|;
block|}
DECL|method|getChecksum ()
name|DataChecksum
name|getChecksum
parameter_list|()
block|{
return|return
name|stripedReader
operator|.
name|getChecksum
argument_list|()
return|;
block|}
DECL|method|getCachingStrategy ()
name|CachingStrategy
name|getCachingStrategy
parameter_list|()
block|{
return|return
name|cachingStrategy
return|;
block|}
DECL|method|createReadService ()
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|createReadService
parameter_list|()
block|{
return|return
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|worker
operator|.
name|getStripedReadPool
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getBlockGroup ()
name|ExtendedBlock
name|getBlockGroup
parameter_list|()
block|{
return|return
name|blockGroup
return|;
block|}
block|}
end_class

end_unit

