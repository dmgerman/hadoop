begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ReencryptionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ZoneReencryptionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ZoneReencryptionStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSTreeTraverser
operator|.
name|TraverseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ReencryptionUpdater
operator|.
name|FileEdekInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ReencryptionUpdater
operator|.
name|ReencryptionTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ReencryptionUpdater
operator|.
name|ZoneSubmissionTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_BATCH_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_BATCH_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_SLEEP_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_SLEEP_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_HANDLER_RATIO_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_HANDLER_RATIO_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_EDEK_THREADS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_EDEK_THREADS_KEY
import|;
end_import

begin_comment
comment|/**  * Class for handling re-encrypt EDEK operations.  *<p>  * For each EZ, ReencryptionHandler walks the tree in a depth-first order,  * and submits batches of (files + existing edeks) as re-encryption tasks  * to a thread pool. Each thread in the pool then contacts the KMS to  * re-encrypt the edeks. ReencryptionUpdater tracks the tasks and updates  * file xattrs with the new edeks.  *<p>  * File renames are disabled in the EZ that's being re-encrypted. Newly created  * files will have new edeks, because the edek cache is drained upon the  * submission of a re-encryption command.  *<p>  * It is assumed only 1 ReencryptionHandler will be running, because:  *   1. The bottleneck of the entire re-encryption appears to be on the KMS.  *   2. Even with multiple handlers, since updater requires writelock and is  * single-threaded, the performance gain is limited.  *<p>  * This class uses the FSDirectory lock for synchronization.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ReencryptionHandler
specifier|public
class|class
name|ReencryptionHandler
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReencryptionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// 2000 is based on buffer size = 512 * 1024, and SetXAttr op size is
comment|// 100 - 200 bytes (depending on the xattr value).
comment|// The buffer size is hard-coded, see outputBufferCapacity from QJM.
DECL|field|MAX_BATCH_SIZE_WITHOUT_FLOODING
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BATCH_SIZE_WITHOUT_FLOODING
init|=
literal|2000
decl_stmt|;
DECL|field|ezManager
specifier|private
specifier|final
name|EncryptionZoneManager
name|ezManager
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|FSDirectory
name|dir
decl_stmt|;
DECL|field|interval
specifier|private
specifier|final
name|long
name|interval
decl_stmt|;
DECL|field|reencryptBatchSize
specifier|private
specifier|final
name|int
name|reencryptBatchSize
decl_stmt|;
DECL|field|throttleLimitHandlerRatio
specifier|private
name|double
name|throttleLimitHandlerRatio
decl_stmt|;
DECL|field|reencryptThreadPoolSize
specifier|private
specifier|final
name|int
name|reencryptThreadPoolSize
decl_stmt|;
comment|// stopwatches for throttling
DECL|field|throttleTimerAll
specifier|private
specifier|final
name|StopWatch
name|throttleTimerAll
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
DECL|field|throttleTimerLocked
specifier|private
specifier|final
name|StopWatch
name|throttleTimerLocked
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
DECL|field|batchService
specifier|private
name|ExecutorCompletionService
argument_list|<
name|ReencryptionTask
argument_list|>
name|batchService
decl_stmt|;
DECL|field|taskQueue
specifier|private
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|taskQueue
decl_stmt|;
comment|// protected by ReencryptionHandler object lock
DECL|field|submissions
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|ZoneSubmissionTracker
argument_list|>
name|submissions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// The current batch that the handler is working on. Handler is designed to
comment|// be single-threaded, see class javadoc for more details.
DECL|field|currentBatch
specifier|private
name|ReencryptionBatch
name|currentBatch
decl_stmt|;
DECL|field|traverser
specifier|private
specifier|final
name|ReencryptionPendingInodeIdCollector
name|traverser
decl_stmt|;
DECL|field|reencryptionUpdater
specifier|private
specifier|final
name|ReencryptionUpdater
name|reencryptionUpdater
decl_stmt|;
DECL|field|updaterExecutor
specifier|private
name|ExecutorService
name|updaterExecutor
decl_stmt|;
comment|// Vars for unit tests.
DECL|field|shouldPauseForTesting
specifier|private
specifier|volatile
name|boolean
name|shouldPauseForTesting
init|=
literal|false
decl_stmt|;
DECL|field|pauseAfterNthSubmission
specifier|private
specifier|volatile
name|int
name|pauseAfterNthSubmission
init|=
literal|0
decl_stmt|;
comment|/**    * Stop the re-encryption updater thread, as well as all EDEK re-encryption    * tasks submitted.    */
DECL|method|stopThreads ()
name|void
name|stopThreads
parameter_list|()
block|{
assert|assert
name|dir
operator|.
name|hasWriteLock
argument_list|()
assert|;
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|ZoneSubmissionTracker
name|zst
range|:
name|submissions
operator|.
name|values
argument_list|()
control|)
block|{
name|zst
operator|.
name|cancelAllTasks
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|updaterExecutor
operator|!=
literal|null
condition|)
block|{
name|updaterExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Start the re-encryption updater thread.    */
DECL|method|startUpdaterThread ()
name|void
name|startUpdaterThread
parameter_list|()
block|{
name|updaterExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"reencryptionUpdaterThread #%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|updaterExecutor
operator|.
name|execute
argument_list|(
name|reencryptionUpdater
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|pauseForTesting ()
specifier|synchronized
name|void
name|pauseForTesting
parameter_list|()
block|{
name|shouldPauseForTesting
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Pausing re-encrypt handler for testing."
argument_list|)
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|resumeForTesting ()
specifier|synchronized
name|void
name|resumeForTesting
parameter_list|()
block|{
name|shouldPauseForTesting
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Resuming re-encrypt handler for testing."
argument_list|)
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|pauseForTestingAfterNthSubmission (final int count)
name|void
name|pauseForTestingAfterNthSubmission
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
block|{
assert|assert
name|pauseAfterNthSubmission
operator|==
literal|0
assert|;
name|pauseAfterNthSubmission
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|pauseUpdaterForTesting ()
name|void
name|pauseUpdaterForTesting
parameter_list|()
block|{
name|reencryptionUpdater
operator|.
name|pauseForTesting
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|resumeUpdaterForTesting ()
name|void
name|resumeUpdaterForTesting
parameter_list|()
block|{
name|reencryptionUpdater
operator|.
name|resumeForTesting
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|pauseForTestingAfterNthCheckpoint (final long zoneId, final int count)
name|void
name|pauseForTestingAfterNthCheckpoint
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
name|reencryptionUpdater
operator|.
name|pauseForTestingAfterNthCheckpoint
argument_list|(
name|zoneId
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|ReencryptionHandler (final EncryptionZoneManager ezMgr, final Configuration conf)
name|ReencryptionHandler
parameter_list|(
specifier|final
name|EncryptionZoneManager
name|ezMgr
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|ezManager
operator|=
name|ezMgr
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|ezManager
operator|.
name|getProvider
argument_list|()
argument_list|,
literal|"No provider set, cannot re-encrypt"
argument_list|)
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|ezMgr
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|DFS_NAMENODE_REENCRYPT_SLEEP_INTERVAL_KEY
argument_list|,
name|DFS_NAMENODE_REENCRYPT_SLEEP_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|interval
operator|>
literal|0
argument_list|,
name|DFS_NAMENODE_REENCRYPT_SLEEP_INTERVAL_KEY
operator|+
literal|" is not positive."
argument_list|)
expr_stmt|;
name|this
operator|.
name|reencryptBatchSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_REENCRYPT_BATCH_SIZE_KEY
argument_list|,
name|DFS_NAMENODE_REENCRYPT_BATCH_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|reencryptBatchSize
operator|>
literal|0
argument_list|,
name|DFS_NAMENODE_REENCRYPT_BATCH_SIZE_KEY
operator|+
literal|" is not positive."
argument_list|)
expr_stmt|;
if|if
condition|(
name|reencryptBatchSize
operator|>
name|MAX_BATCH_SIZE_WITHOUT_FLOODING
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Re-encryption batch size is {}. It could cause edit log buffer "
operator|+
literal|"to be full and trigger a logSync within the writelock, greatly "
operator|+
literal|"impacting namenode throughput."
argument_list|,
name|reencryptBatchSize
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|throttleLimitHandlerRatio
operator|=
name|conf
operator|.
name|getDouble
argument_list|(
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_HANDLER_RATIO_KEY
argument_list|,
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_HANDLER_RATIO_DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Configured throttleLimitHandlerRatio={} for re-encryption"
argument_list|,
name|throttleLimitHandlerRatio
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|throttleLimitHandlerRatio
operator|>
literal|0.0f
argument_list|,
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_HANDLER_RATIO_KEY
operator|+
literal|" is not positive."
argument_list|)
expr_stmt|;
name|this
operator|.
name|reencryptThreadPoolSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_REENCRYPT_EDEK_THREADS_KEY
argument_list|,
name|DFS_NAMENODE_REENCRYPT_EDEK_THREADS_DEFAULT
argument_list|)
expr_stmt|;
name|taskQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
expr_stmt|;
name|ThreadPoolExecutor
name|threadPool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|reencryptThreadPoolSize
argument_list|,
name|reencryptThreadPoolSize
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|taskQueue
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicInteger
name|ind
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
name|super
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"reencryption edek Thread-"
operator|+
name|ind
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|,
operator|new
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|rejectedExecution
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|ThreadPoolExecutor
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Execution rejected, executing in current thread"
argument_list|)
expr_stmt|;
name|super
operator|.
name|rejectedExecution
argument_list|(
name|runnable
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|batchService
operator|=
operator|new
name|ExecutorCompletionService
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|reencryptionUpdater
operator|=
operator|new
name|ReencryptionUpdater
argument_list|(
name|dir
argument_list|,
name|batchService
argument_list|,
name|this
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|currentBatch
operator|=
operator|new
name|ReencryptionBatch
argument_list|(
name|reencryptBatchSize
argument_list|)
expr_stmt|;
name|traverser
operator|=
operator|new
name|ReencryptionPendingInodeIdCollector
argument_list|(
name|dir
argument_list|,
name|this
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getReencryptionStatus ()
name|ReencryptionStatus
name|getReencryptionStatus
parameter_list|()
block|{
return|return
name|ezManager
operator|.
name|getReencryptionStatus
argument_list|()
return|;
block|}
DECL|method|cancelZone (final long zoneId, final String zoneName)
name|void
name|cancelZone
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|,
specifier|final
name|String
name|zoneName
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|dir
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|ZoneReencryptionStatus
name|zs
init|=
name|getReencryptionStatus
argument_list|()
operator|.
name|getZoneStatus
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
if|if
condition|(
name|zs
operator|==
literal|null
operator|||
name|zs
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|Completed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Zone "
operator|+
name|zoneName
operator|+
literal|" is not under re-encryption"
argument_list|)
throw|;
block|}
name|zs
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|removeZoneTrackerStopTasks
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
DECL|method|removeZone (final long zoneId)
name|void
name|removeZone
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|)
block|{
assert|assert
name|dir
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing zone {} from re-encryption."
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
name|removeZoneTrackerStopTasks
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
name|getReencryptionStatus
argument_list|()
operator|.
name|removeZone
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
DECL|method|removeZoneTrackerStopTasks (final long zoneId)
specifier|synchronized
specifier|private
name|void
name|removeZoneTrackerStopTasks
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|)
block|{
specifier|final
name|ZoneSubmissionTracker
name|zst
init|=
name|submissions
operator|.
name|get
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
if|if
condition|(
name|zst
operator|!=
literal|null
condition|)
block|{
name|zst
operator|.
name|cancelAllTasks
argument_list|()
expr_stmt|;
name|submissions
operator|.
name|remove
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTracker (final long zoneId)
name|ZoneSubmissionTracker
name|getTracker
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|)
block|{
assert|assert
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
return|return
name|unprotectedGetTracker
argument_list|(
name|zoneId
argument_list|)
return|;
block|}
comment|/**    * Get the tracker without holding the FSDirectory lock.    * The submissions object is protected by object lock.    */
DECL|method|unprotectedGetTracker (final long zoneId)
specifier|synchronized
name|ZoneSubmissionTracker
name|unprotectedGetTracker
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|)
block|{
return|return
name|submissions
operator|.
name|get
argument_list|(
name|zoneId
argument_list|)
return|;
block|}
comment|/**    * Add a dummy tracker (with 1 task that has 0 files to re-encrypt)    * for the zone. This is necessary to complete the re-encryption in case    * no file in the entire zone needs re-encryption at all. We cannot simply    * update zone status and set zone xattrs, because in the handler we only hold    * readlock, and setting xattrs requires upgrading to a writelock.    *    * @param zoneId    */
DECL|method|addDummyTracker (final long zoneId, ZoneSubmissionTracker zst)
name|void
name|addDummyTracker
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|,
name|ZoneSubmissionTracker
name|zst
parameter_list|)
block|{
assert|assert
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
if|if
condition|(
name|zst
operator|==
literal|null
condition|)
block|{
name|zst
operator|=
operator|new
name|ZoneSubmissionTracker
argument_list|()
expr_stmt|;
block|}
name|zst
operator|.
name|setSubmissionDone
argument_list|()
expr_stmt|;
specifier|final
name|Future
name|future
init|=
name|batchService
operator|.
name|submit
argument_list|(
operator|new
name|EDEKReencryptCallable
argument_list|(
name|zoneId
argument_list|,
operator|new
name|ReencryptionBatch
argument_list|()
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|zst
operator|.
name|addTask
argument_list|(
name|future
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|submissions
operator|.
name|put
argument_list|(
name|zoneId
argument_list|,
name|zst
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Main loop. It takes at most 1 zone per scan, and executes until the zone    * is completed.    * {@see #reencryptEncryptionZoneInt(Long)}.    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting up re-encrypt thread with interval={} millisecond."
argument_list|,
name|interval
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
name|traverser
operator|.
name|checkPauseForTesting
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-encrypt handler interrupted. Exiting"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|Long
name|zoneId
decl_stmt|;
name|dir
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|zoneId
operator|=
name|getReencryptionStatus
argument_list|()
operator|.
name|getNextUnprocessedZone
argument_list|()
expr_stmt|;
if|if
condition|(
name|zoneId
operator|==
literal|null
condition|)
block|{
comment|// empty queue.
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing re-encrypt commands on zone {}. Current zones:{}"
argument_list|,
name|zoneId
argument_list|,
name|getReencryptionStatus
argument_list|()
argument_list|)
expr_stmt|;
name|getReencryptionStatus
argument_list|()
operator|.
name|markZoneStarted
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
name|resetSubmissionTracker
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dir
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|reencryptEncryptionZone
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriableException
decl||
name|SafeModeException
name|re
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-encryption caught exception, will retry"
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|getReencryptionStatus
argument_list|()
operator|.
name|markZoneForRetry
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IOException caught when re-encrypting zone {}"
argument_list|,
name|zoneId
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-encrypt handler interrupted. Exiting."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Re-encrypt handler thread exiting. Exception caught when"
operator|+
literal|" re-encrypting zone {}."
argument_list|,
name|zoneId
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|/**    * Re-encrypts a zone by recursively iterating all paths inside the zone,    * in lexicographic order.    * Files are re-encrypted, and subdirs are processed during iteration.    *    * @param zoneId the Zone's id.    * @throws IOException    * @throws InterruptedException    */
DECL|method|reencryptEncryptionZone (final long zoneId)
name|void
name|reencryptEncryptionZone
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|throttleTimerAll
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|throttleTimerLocked
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|INode
name|zoneNode
decl_stmt|;
specifier|final
name|ZoneReencryptionStatus
name|zs
decl_stmt|;
name|traverser
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|zoneNode
operator|=
name|dir
operator|.
name|getInode
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
comment|// start re-encrypting the zone from the beginning
if|if
condition|(
name|zoneNode
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Directory with id {} removed during re-encrypt, skipping"
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|zoneNode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot re-encrypt directory with id {} because it's not a"
operator|+
literal|" directory."
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
return|return;
block|}
name|zs
operator|=
name|getReencryptionStatus
argument_list|()
operator|.
name|getZoneStatus
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
assert|assert
name|zs
operator|!=
literal|null
assert|;
comment|// Only costly log FullPathName here once, and use id elsewhere.
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-encrypting zone {}(id={})"
argument_list|,
name|zoneNode
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
if|if
condition|(
name|zs
operator|.
name|getLastCheckpointFile
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// new re-encryption
name|traverser
operator|.
name|traverseDir
argument_list|(
name|zoneNode
operator|.
name|asDirectory
argument_list|()
argument_list|,
name|zoneId
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
operator|new
name|ZoneTraverseInfo
argument_list|(
name|zs
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// resuming from a past re-encryption
name|restoreFromLastProcessedFile
argument_list|(
name|zoneId
argument_list|,
name|zs
argument_list|)
expr_stmt|;
block|}
comment|// save the last batch and mark complete
name|traverser
operator|.
name|submitCurrentBatch
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submission completed of zone {} for re-encryption."
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
name|reencryptionUpdater
operator|.
name|markZoneSubmissionDone
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|traverser
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Reset the zone submission tracker for re-encryption.    * @param zoneId    */
DECL|method|resetSubmissionTracker (final long zoneId)
specifier|synchronized
specifier|private
name|void
name|resetSubmissionTracker
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|)
block|{
name|ZoneSubmissionTracker
name|zst
init|=
name|submissions
operator|.
name|get
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
if|if
condition|(
name|zst
operator|==
literal|null
condition|)
block|{
name|zst
operator|=
operator|new
name|ZoneSubmissionTracker
argument_list|()
expr_stmt|;
name|submissions
operator|.
name|put
argument_list|(
name|zoneId
argument_list|,
name|zst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zst
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|completeReencryption (final INode zoneNode)
name|List
argument_list|<
name|XAttr
argument_list|>
name|completeReencryption
parameter_list|(
specifier|final
name|INode
name|zoneNode
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|dir
operator|.
name|hasWriteLock
argument_list|()
assert|;
assert|assert
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|Long
name|zoneId
init|=
name|zoneNode
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ZoneReencryptionStatus
name|zs
init|=
name|getReencryptionStatus
argument_list|()
operator|.
name|getZoneStatus
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
assert|assert
name|zs
operator|!=
literal|null
assert|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-encryption completed on zone {}. Re-encrypted {} files,"
operator|+
literal|" failures encountered: {}."
argument_list|,
name|zoneNode
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|zs
operator|.
name|getFilesReencrypted
argument_list|()
argument_list|,
name|zs
operator|.
name|getNumReencryptionFailures
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|submissions
operator|.
name|remove
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
block|}
return|return
name|FSDirEncryptionZoneOp
operator|.
name|updateReencryptionFinish
argument_list|(
name|dir
argument_list|,
name|INodesInPath
operator|.
name|fromINode
argument_list|(
name|zoneNode
argument_list|)
argument_list|,
name|zs
argument_list|)
return|;
block|}
comment|/**    * Restore the re-encryption from the progress inside ReencryptionStatus.    * This means start from exactly the lastProcessedFile (LPF), skipping all    * earlier paths in lexicographic order. Lexicographically-later directories    * on the LPF parent paths are added to subdirs.    */
DECL|method|restoreFromLastProcessedFile (final long zoneId, final ZoneReencryptionStatus zs)
specifier|private
name|void
name|restoreFromLastProcessedFile
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|,
specifier|final
name|ZoneReencryptionStatus
name|zs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|INodeDirectory
name|parent
decl_stmt|;
specifier|final
name|byte
index|[]
name|startAfter
decl_stmt|;
specifier|final
name|INodesInPath
name|lpfIIP
init|=
name|dir
operator|.
name|getINodesInPath
argument_list|(
name|zs
operator|.
name|getLastCheckpointFile
argument_list|()
argument_list|,
name|FSDirectory
operator|.
name|DirOp
operator|.
name|READ
argument_list|)
decl_stmt|;
name|parent
operator|=
name|lpfIIP
operator|.
name|getLastINode
argument_list|()
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|startAfter
operator|=
name|lpfIIP
operator|.
name|getLastINode
argument_list|()
operator|.
name|getLocalNameBytes
argument_list|()
expr_stmt|;
name|traverser
operator|.
name|traverseDir
argument_list|(
name|parent
argument_list|,
name|zoneId
argument_list|,
name|startAfter
argument_list|,
operator|new
name|ZoneTraverseInfo
argument_list|(
name|zs
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ReencryptionBatch
specifier|final
class|class
name|ReencryptionBatch
block|{
comment|// First file's path, for logging purpose.
DECL|field|firstFilePath
specifier|private
name|String
name|firstFilePath
decl_stmt|;
DECL|field|batch
specifier|private
specifier|final
name|List
argument_list|<
name|FileEdekInfo
argument_list|>
name|batch
decl_stmt|;
DECL|method|ReencryptionBatch ()
name|ReencryptionBatch
parameter_list|()
block|{
name|this
argument_list|(
name|reencryptBatchSize
argument_list|)
expr_stmt|;
block|}
DECL|method|ReencryptionBatch (int initialCapacity)
name|ReencryptionBatch
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|batch
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
DECL|method|add (final INodeFile inode)
name|void
name|add
parameter_list|(
specifier|final
name|INodeFile
name|inode
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|inode
argument_list|,
literal|"INodeFile is null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|firstFilePath
operator|=
name|inode
operator|.
name|getFullPathName
argument_list|()
expr_stmt|;
block|}
name|batch
operator|.
name|add
argument_list|(
operator|new
name|FileEdekInfo
argument_list|(
name|dir
argument_list|,
name|inode
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getFirstFilePath ()
name|String
name|getFirstFilePath
parameter_list|()
block|{
return|return
name|firstFilePath
return|;
block|}
DECL|method|isEmpty ()
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|batch
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|batch
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|batch
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getBatch ()
name|List
argument_list|<
name|FileEdekInfo
argument_list|>
name|getBatch
parameter_list|()
block|{
return|return
name|batch
return|;
block|}
block|}
comment|/**    * Simply contacts the KMS for re-encryption. No NN locks held.    */
DECL|class|EDEKReencryptCallable
specifier|private
specifier|static
class|class
name|EDEKReencryptCallable
implements|implements
name|Callable
argument_list|<
name|ReencryptionTask
argument_list|>
block|{
DECL|field|zoneNodeId
specifier|private
specifier|final
name|long
name|zoneNodeId
decl_stmt|;
DECL|field|batch
specifier|private
specifier|final
name|ReencryptionBatch
name|batch
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|ReencryptionHandler
name|handler
decl_stmt|;
DECL|method|EDEKReencryptCallable (final long zoneId, final ReencryptionBatch currentBatch, final ReencryptionHandler rh)
name|EDEKReencryptCallable
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|,
specifier|final
name|ReencryptionBatch
name|currentBatch
parameter_list|,
specifier|final
name|ReencryptionHandler
name|rh
parameter_list|)
block|{
name|zoneNodeId
operator|=
name|zoneId
expr_stmt|;
name|batch
operator|=
name|currentBatch
expr_stmt|;
name|handler
operator|=
name|rh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|ReencryptionTask
name|call
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing batched re-encryption for zone {}, batch size {},"
operator|+
literal|" start:{}"
argument_list|,
name|zoneNodeId
argument_list|,
name|batch
operator|.
name|size
argument_list|()
argument_list|,
name|batch
operator|.
name|getFirstFilePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|ReencryptionTask
argument_list|(
name|zoneNodeId
argument_list|,
literal|0
argument_list|,
name|batch
argument_list|)
return|;
block|}
specifier|final
name|StopWatch
name|kmsSW
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|int
name|numFailures
init|=
literal|0
decl_stmt|;
name|String
name|result
init|=
literal|"Completed"
decl_stmt|;
if|if
condition|(
operator|!
name|reencryptEdeks
argument_list|()
condition|)
block|{
name|numFailures
operator|+=
name|batch
operator|.
name|size
argument_list|()
expr_stmt|;
name|result
operator|=
literal|"Failed to"
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{} re-encrypting one batch of {} edeks from KMS,"
operator|+
literal|" time consumed: {}, start: {}."
argument_list|,
name|result
argument_list|,
name|batch
operator|.
name|size
argument_list|()
argument_list|,
name|kmsSW
operator|.
name|stop
argument_list|()
argument_list|,
name|batch
operator|.
name|getFirstFilePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ReencryptionTask
argument_list|(
name|zoneNodeId
argument_list|,
name|numFailures
argument_list|,
name|batch
argument_list|)
return|;
block|}
DECL|method|reencryptEdeks ()
specifier|private
name|boolean
name|reencryptEdeks
parameter_list|()
block|{
comment|// communicate with the kms out of lock
specifier|final
name|List
argument_list|<
name|EncryptedKeyVersion
argument_list|>
name|edeks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|batch
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileEdekInfo
name|entry
range|:
name|batch
operator|.
name|getBatch
argument_list|()
control|)
block|{
name|edeks
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getExistingEdek
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// provider already has LoadBalancingKMSClientProvider's reties. It that
comment|// fails, just fail this callable.
try|try
block|{
name|handler
operator|.
name|ezManager
operator|.
name|getProvider
argument_list|()
operator|.
name|reencryptEncryptedKeys
argument_list|(
name|edeks
argument_list|)
expr_stmt|;
name|EncryptionFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|reencryptEncryptedKeys
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
decl||
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to re-encrypt one batch of {} edeks, start:{}"
argument_list|,
name|batch
operator|.
name|size
argument_list|()
argument_list|,
name|batch
operator|.
name|getFirstFilePath
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileEdekInfo
name|entry
range|:
name|batch
operator|.
name|getBatch
argument_list|()
control|)
block|{
assert|assert
name|i
operator|<
name|edeks
operator|.
name|size
argument_list|()
assert|;
name|entry
operator|.
name|setEdek
argument_list|(
name|edeks
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Called when a new zone is submitted for re-encryption. This will interrupt    * the background thread if it's waiting for the next    * DFS_NAMENODE_REENCRYPT_SLEEP_INTERVAL_KEY.    */
DECL|method|notifyNewSubmission ()
specifier|synchronized
name|void
name|notifyNewSubmission
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Notifying handler for new re-encryption command."
argument_list|)
expr_stmt|;
name|this
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
DECL|method|getTraverser ()
specifier|public
name|ReencryptionPendingInodeIdCollector
name|getTraverser
parameter_list|()
block|{
return|return
name|traverser
return|;
block|}
comment|/**    * ReencryptionPendingInodeIdCollector which throttle based on configured    * throttle ratio.    */
DECL|class|ReencryptionPendingInodeIdCollector
class|class
name|ReencryptionPendingInodeIdCollector
extends|extends
name|FSTreeTraverser
block|{
DECL|field|reencryptionHandler
specifier|private
specifier|final
name|ReencryptionHandler
name|reencryptionHandler
decl_stmt|;
DECL|method|ReencryptionPendingInodeIdCollector (FSDirectory dir, ReencryptionHandler rHandler, Configuration conf)
name|ReencryptionPendingInodeIdCollector
parameter_list|(
name|FSDirectory
name|dir
parameter_list|,
name|ReencryptionHandler
name|rHandler
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|reencryptionHandler
operator|=
name|rHandler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkPauseForTesting ()
specifier|protected
name|void
name|checkPauseForTesting
parameter_list|()
throws|throws
name|InterruptedException
block|{
assert|assert
operator|!
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
assert|assert
operator|!
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|hasReadLock
argument_list|()
assert|;
while|while
condition|(
name|shouldPauseForTesting
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping in the re-encrypt handler for unit test."
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|reencryptionHandler
init|)
block|{
name|reencryptionHandler
operator|.
name|wait
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Continuing re-encrypt handler after pausing."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Process an Inode for re-encryption. Add to current batch if it's a file,      * no-op otherwise.      *      * @param inode      *          the inode      * @return true if inode is added to currentBatch and should be      *         re-encrypted. false otherwise: could be inode is not a file, or      *         inode's edek's key version is not changed.      * @throws IOException      * @throws InterruptedException      */
annotation|@
name|Override
DECL|method|processFileInode (INode inode, TraverseInfo traverseInfo)
specifier|public
name|boolean
name|processFileInode
parameter_list|(
name|INode
name|inode
parameter_list|,
name|TraverseInfo
name|traverseInfo
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
assert|assert
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processing {} for re-encryption"
argument_list|,
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|inode
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileEncryptionInfo
name|feInfo
init|=
name|FSDirEncryptionZoneOp
operator|.
name|getFileEncryptionInfo
argument_list|(
name|dir
argument_list|,
name|INodesInPath
operator|.
name|fromINode
argument_list|(
name|inode
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|feInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} skipped re-encryption because it is not encrypted! "
operator|+
literal|"This is very likely a bug."
argument_list|,
name|inode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|traverseInfo
operator|instanceof
name|ZoneTraverseInfo
operator|&&
operator|(
operator|(
name|ZoneTraverseInfo
operator|)
name|traverseInfo
operator|)
operator|.
name|getEzKeyVerName
argument_list|()
operator|.
name|equals
argument_list|(
name|feInfo
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"File {} skipped re-encryption because edek's key version"
operator|+
literal|" name is not changed."
argument_list|,
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|currentBatch
operator|.
name|add
argument_list|(
name|inode
operator|.
name|asFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Check whether zone is ready for re-encryption. Throws IOE if it's not. 1.      * If EZ is deleted. 2. if the re-encryption is canceled. 3. If NN is not      * active or is in safe mode.      *      * @throws IOException      *           if zone does not exist / is cancelled, or if NN is not ready      *           for write.      */
annotation|@
name|Override
DECL|method|checkINodeReady (long zoneId)
specifier|protected
name|void
name|checkINodeReady
parameter_list|(
name|long
name|zoneId
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ZoneReencryptionStatus
name|zs
init|=
name|getReencryptionStatus
argument_list|()
operator|.
name|getZoneStatus
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
if|if
condition|(
name|zs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Zone "
operator|+
name|zoneId
operator|+
literal|" status cannot be found."
argument_list|)
throw|;
block|}
if|if
condition|(
name|zs
operator|.
name|isCanceled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Re-encryption is canceled for zone "
operator|+
name|zoneId
argument_list|)
throw|;
block|}
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|checkNameNodeSafeMode
argument_list|(
literal|"NN is in safe mode, cannot re-encrypt."
argument_list|)
expr_stmt|;
comment|// re-encryption should be cancelled when NN goes to standby. Just
comment|// double checking for sanity.
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Submit the current batch to the thread pool.      *      * @param zoneId      *          Id of the EZ INode      * @throws IOException      * @throws InterruptedException      */
annotation|@
name|Override
DECL|method|submitCurrentBatch (final long zoneId)
specifier|protected
name|void
name|submitCurrentBatch
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|currentBatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ZoneSubmissionTracker
name|zst
decl_stmt|;
synchronized|synchronized
init|(
name|ReencryptionHandler
operator|.
name|this
init|)
block|{
name|zst
operator|=
name|submissions
operator|.
name|get
argument_list|(
name|zoneId
argument_list|)
expr_stmt|;
if|if
condition|(
name|zst
operator|==
literal|null
condition|)
block|{
name|zst
operator|=
operator|new
name|ZoneSubmissionTracker
argument_list|()
expr_stmt|;
name|submissions
operator|.
name|put
argument_list|(
name|zoneId
argument_list|,
name|zst
argument_list|)
expr_stmt|;
block|}
block|}
name|Future
name|future
init|=
name|batchService
operator|.
name|submit
argument_list|(
operator|new
name|EDEKReencryptCallable
argument_list|(
name|zoneId
argument_list|,
name|currentBatch
argument_list|,
name|reencryptionHandler
argument_list|)
argument_list|)
decl_stmt|;
name|zst
operator|.
name|addTask
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitted batch (start:{}, size:{}) of zone {} to re-encrypt."
argument_list|,
name|currentBatch
operator|.
name|getFirstFilePath
argument_list|()
argument_list|,
name|currentBatch
operator|.
name|size
argument_list|()
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
name|currentBatch
operator|=
operator|new
name|ReencryptionBatch
argument_list|(
name|reencryptBatchSize
argument_list|)
expr_stmt|;
comment|// flip the pause flag if this is nth submission.
comment|// The actual pause need to happen outside of the lock.
if|if
condition|(
name|pauseAfterNthSubmission
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|--
name|pauseAfterNthSubmission
operator|==
literal|0
condition|)
block|{
name|shouldPauseForTesting
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Throttles the ReencryptionHandler in 3 aspects:      * 1. Prevents generating more Callables than the CPU could possibly      * handle.      * 2. Prevents generating more Callables than the ReencryptionUpdater      * can handle, under its own throttling.      * 3. Prevents contending FSN/FSD read locks. This is done based      * on the DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_RATIO_KEY configuration.      *<p>      * Item 1 and 2 are to control NN heap usage.      *      * @throws InterruptedException      */
annotation|@
name|VisibleForTesting
annotation|@
name|Override
DECL|method|throttle ()
specifier|protected
name|void
name|throttle
parameter_list|()
throws|throws
name|InterruptedException
block|{
assert|assert
operator|!
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
assert|assert
operator|!
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|hasReadLock
argument_list|()
assert|;
specifier|final
name|int
name|numCores
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
decl_stmt|;
if|if
condition|(
name|taskQueue
operator|.
name|size
argument_list|()
operator|>=
name|numCores
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Re-encryption handler throttling because queue size {} is"
operator|+
literal|"larger than number of cores {}"
argument_list|,
name|taskQueue
operator|.
name|size
argument_list|()
argument_list|,
name|numCores
argument_list|)
expr_stmt|;
while|while
condition|(
name|taskQueue
operator|.
name|size
argument_list|()
operator|>=
name|numCores
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 2. if tasks are piling up on the updater, don't create new callables
comment|// until the queue size goes down.
specifier|final
name|int
name|maxTasksPiled
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|2
decl_stmt|;
name|int
name|numTasks
init|=
name|numTasksSubmitted
argument_list|()
decl_stmt|;
if|if
condition|(
name|numTasks
operator|>=
name|maxTasksPiled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Re-encryption handler throttling because total tasks pending"
operator|+
literal|" re-encryption updater is {}"
argument_list|,
name|numTasks
argument_list|)
expr_stmt|;
while|while
condition|(
name|numTasks
operator|>=
name|maxTasksPiled
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|numTasks
operator|=
name|numTasksSubmitted
argument_list|()
expr_stmt|;
block|}
block|}
comment|// 3.
if|if
condition|(
name|throttleLimitHandlerRatio
operator|>=
literal|1.0
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|expect
init|=
call|(
name|long
call|)
argument_list|(
name|throttleTimerAll
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|*
name|throttleLimitHandlerRatio
argument_list|)
decl_stmt|;
specifier|final
name|long
name|actual
init|=
name|throttleTimerLocked
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Re-encryption handler throttling expect: {}, actual: {},"
operator|+
literal|" throttleTimerAll:{}"
argument_list|,
name|expect
argument_list|,
name|actual
argument_list|,
name|throttleTimerAll
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expect
operator|-
name|actual
operator|<
literal|0
condition|)
block|{
comment|// in case throttleLimitHandlerRatio is very small, expect will be 0.
comment|// so sleepMs should not be calculated from expect, to really meet the
comment|// ratio. e.g. if ratio is 0.001, expect = 0 and actual = 1, sleepMs
comment|// should be 1000 - throttleTimerAll.now()
specifier|final
name|long
name|sleepMs
init|=
call|(
name|long
call|)
argument_list|(
name|actual
operator|/
name|throttleLimitHandlerRatio
argument_list|)
operator|-
name|throttleTimerAll
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Throttling re-encryption, sleeping for {} ms"
argument_list|,
name|sleepMs
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepMs
argument_list|)
expr_stmt|;
block|}
name|throttleTimerAll
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|throttleTimerLocked
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|numTasksSubmitted ()
specifier|private
name|int
name|numTasksSubmitted
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|ReencryptionHandler
operator|.
name|this
init|)
block|{
for|for
control|(
name|ZoneSubmissionTracker
name|zst
range|:
name|submissions
operator|.
name|values
argument_list|()
control|)
block|{
name|ret
operator|+=
name|zst
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|shouldSubmitCurrentBatch ()
specifier|public
name|boolean
name|shouldSubmitCurrentBatch
parameter_list|()
block|{
return|return
name|currentBatch
operator|.
name|size
argument_list|()
operator|>=
name|reencryptBatchSize
return|;
block|}
annotation|@
name|Override
DECL|method|canTraverseDir (INode inode)
specifier|public
name|boolean
name|canTraverseDir
parameter_list|(
name|INode
name|inode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ezManager
operator|.
name|isEncryptionZoneRoot
argument_list|(
name|inode
argument_list|,
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|)
condition|)
block|{
comment|// nested EZ, ignore.
name|LOG
operator|.
name|info
argument_list|(
literal|"{}({}) is a nested EZ, skipping for re-encryption"
argument_list|,
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|inode
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|readLock ()
specifier|protected
name|void
name|readLock
parameter_list|()
block|{
name|super
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|throttleTimerLocked
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readUnlock ()
specifier|protected
name|void
name|readUnlock
parameter_list|()
block|{
name|super
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
name|throttleTimerLocked
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ZoneTraverseInfo
specifier|private
class|class
name|ZoneTraverseInfo
extends|extends
name|TraverseInfo
block|{
DECL|field|ezKeyVerName
specifier|private
name|String
name|ezKeyVerName
decl_stmt|;
DECL|method|ZoneTraverseInfo (String ezKeyVerName)
name|ZoneTraverseInfo
parameter_list|(
name|String
name|ezKeyVerName
parameter_list|)
block|{
name|this
operator|.
name|ezKeyVerName
operator|=
name|ezKeyVerName
expr_stmt|;
block|}
DECL|method|getEzKeyVerName ()
specifier|public
name|String
name|getEzKeyVerName
parameter_list|()
block|{
return|return
name|ezKeyVerName
return|;
block|}
block|}
block|}
end_class

end_unit

