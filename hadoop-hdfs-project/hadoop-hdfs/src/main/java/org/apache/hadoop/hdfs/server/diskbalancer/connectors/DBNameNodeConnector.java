begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.diskbalancer.connectors
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|connectors
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|NameNodeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerDataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|datamodel
operator|.
name|DiskBalancerVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * DBNameNodeConnector connects to Namenode and extracts information from a  * given cluster.  */
end_comment

begin_class
DECL|class|DBNameNodeConnector
class|class
name|DBNameNodeConnector
implements|implements
name|ClusterConnector
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DBNameNodeConnector
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DISKBALANCER_ID_PATH
specifier|static
specifier|final
name|Path
name|DISKBALANCER_ID_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/system/diskbalancer.id"
argument_list|)
decl_stmt|;
DECL|field|clusterURI
specifier|private
specifier|final
name|URI
name|clusterURI
decl_stmt|;
DECL|field|connector
specifier|private
specifier|final
name|NameNodeConnector
name|connector
decl_stmt|;
comment|/**    * Constructs a DBNameNodeConnector.    *    * @param clusterURI - URL to connect to.    */
DECL|method|DBNameNodeConnector (URI clusterURI, Configuration conf)
specifier|public
name|DBNameNodeConnector
parameter_list|(
name|URI
name|clusterURI
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
comment|// we don't care how many instances of disk balancers run.
comment|// The admission is controlled at the data node, where we will
comment|// execute only one plan at a given time.
name|NameNodeConnector
operator|.
name|setWrite2IdFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|connector
operator|=
operator|new
name|NameNodeConnector
argument_list|(
literal|"DiskBalancer"
argument_list|,
name|clusterURI
argument_list|,
name|DISKBALANCER_ID_PATH
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to connect to NameNode "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|this
operator|.
name|clusterURI
operator|=
name|clusterURI
expr_stmt|;
block|}
comment|/**    * getNodes function returns a list of DiskBalancerDataNodes.    *    * @return Array of DiskBalancerDataNodes    */
annotation|@
name|Override
DECL|method|getNodes ()
specifier|public
name|List
argument_list|<
name|DiskBalancerDataNode
argument_list|>
name|getNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|connector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DiskBalancerDataNode
argument_list|>
name|nodeList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|DatanodeStorageReport
index|[]
name|reports
init|=
name|this
operator|.
name|connector
operator|.
name|getLiveDatanodeStorageReport
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeStorageReport
name|report
range|:
name|reports
control|)
block|{
name|DiskBalancerDataNode
name|datanode
init|=
name|getBalancerNodeFromDataNode
argument_list|(
name|report
operator|.
name|getDatanodeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|getVolumeInfoFromStorageReports
argument_list|(
name|datanode
argument_list|,
name|report
operator|.
name|getStorageReports
argument_list|()
argument_list|)
expr_stmt|;
name|nodeList
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeList
return|;
block|}
comment|/**    * Returns info about the connector.    *    * @return String.    */
annotation|@
name|Override
DECL|method|getConnectorInfo ()
specifier|public
name|String
name|getConnectorInfo
parameter_list|()
block|{
return|return
literal|"Name Node Connector : "
operator|+
name|clusterURI
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * This function maps the required fields from DataNodeInfo to disk    * BalancerDataNode.    *    * @param nodeInfo    * @return DiskBalancerDataNode    */
specifier|private
name|DiskBalancerDataNode
DECL|method|getBalancerNodeFromDataNode (DatanodeInfo nodeInfo)
name|getBalancerNodeFromDataNode
parameter_list|(
name|DatanodeInfo
name|nodeInfo
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nodeInfo
argument_list|)
expr_stmt|;
name|DiskBalancerDataNode
name|dbDataNode
init|=
operator|new
name|DiskBalancerDataNode
argument_list|(
name|nodeInfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
name|dbDataNode
operator|.
name|setDataNodeIP
argument_list|(
name|nodeInfo
operator|.
name|getIpAddr
argument_list|()
argument_list|)
expr_stmt|;
name|dbDataNode
operator|.
name|setDataNodeName
argument_list|(
name|nodeInfo
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|dbDataNode
operator|.
name|setDataNodePort
argument_list|(
name|nodeInfo
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dbDataNode
return|;
block|}
comment|/**    * Reads the relevant fields from each storage volume and populate the    * DiskBalancer Node.    *    * @param node    - Disk Balancer Node    * @param reports - Array of StorageReport    */
DECL|method|getVolumeInfoFromStorageReports (DiskBalancerDataNode node, StorageReport[] reports)
specifier|private
name|void
name|getVolumeInfoFromStorageReports
parameter_list|(
name|DiskBalancerDataNode
name|node
parameter_list|,
name|StorageReport
index|[]
name|reports
parameter_list|)
throws|throws
name|Exception
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|reports
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageReport
name|report
range|:
name|reports
control|)
block|{
name|DatanodeStorage
name|storage
init|=
name|report
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|DiskBalancerVolume
name|volume
init|=
operator|new
name|DiskBalancerVolume
argument_list|()
decl_stmt|;
name|volume
operator|.
name|setCapacity
argument_list|(
name|report
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setFailed
argument_list|(
name|report
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setUsed
argument_list|(
name|report
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO : Should we do BlockPool level balancing at all ?
comment|// Does it make sense ? Balancer does do that. Right now
comment|// we only deal with volumes and not blockPools
name|volume
operator|.
name|setUsed
argument_list|(
name|report
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setUuid
argument_list|(
name|storage
operator|.
name|getStorageID
argument_list|()
argument_list|)
expr_stmt|;
comment|// we will skip this volume for disk balancer if
comment|// it is read-only since we will not be able to delete
comment|// or if it is already failed.
name|volume
operator|.
name|setSkip
argument_list|(
operator|(
name|storage
operator|.
name|getState
argument_list|()
operator|==
name|DatanodeStorage
operator|.
name|State
operator|.
name|READ_ONLY_SHARED
operator|)
operator|||
name|report
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setStorageType
argument_list|(
name|storage
operator|.
name|getStorageType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setIsTransient
argument_list|(
name|storage
operator|.
name|getStorageType
argument_list|()
operator|.
name|isTransient
argument_list|()
argument_list|)
expr_stmt|;
comment|//volume.setPath(storage.getVolumePath());
name|node
operator|.
name|addVolume
argument_list|(
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

