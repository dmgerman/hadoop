begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CacheDirectiveInfoExpirationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CacheDirectiveInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CachePoolInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|XAttrProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatProtobuf
operator|.
name|SectionName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|CacheManagerSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|FileSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|FilesUnderConstructionSection
operator|.
name|FileUnderConstructionEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeDirectorySection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|AclFeatureProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|INodeSymlink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeReferenceSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|NameSystemSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SecretManagerSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SnapshotDiffSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SnapshotSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|StringTableSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LimitInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|XATTR_NAMESPACE_MASK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|XATTR_NAMESPACE_OFFSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|XATTR_NAMESPACE_EXT_MASK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|XATTR_NAMESPACE_EXT_OFFSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|XATTR_NAME_OFFSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|XATTR_NAME_MASK
import|;
end_import

begin_comment
comment|/**  * PBImageXmlWriter walks over an fsimage structure and writes out  * an equivalent XML document that contains the fsimage's components.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|PBImageXmlWriter
specifier|public
specifier|final
class|class
name|PBImageXmlWriter
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|PrintStream
name|out
decl_stmt|;
DECL|field|isoDateFormat
specifier|private
specifier|final
name|SimpleDateFormat
name|isoDateFormat
decl_stmt|;
DECL|field|stringTable
specifier|private
name|String
index|[]
name|stringTable
decl_stmt|;
DECL|method|createSimpleDateFormat ()
specifier|public
specifier|static
name|SimpleDateFormat
name|createSimpleDateFormat
parameter_list|()
block|{
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss.SSS"
argument_list|)
decl_stmt|;
name|format
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
DECL|method|PBImageXmlWriter (Configuration conf, PrintStream out)
specifier|public
name|PBImageXmlWriter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|isoDateFormat
operator|=
name|createSimpleDateFormat
argument_list|()
expr_stmt|;
block|}
DECL|method|visit (RandomAccessFile file)
specifier|public
name|void
name|visit
parameter_list|(
name|RandomAccessFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|FSImageUtil
operator|.
name|checkFileFormat
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unrecognized FSImage"
argument_list|)
throw|;
block|}
name|FileSummary
name|summary
init|=
name|FSImageUtil
operator|.
name|loadSummary
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
init|(
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
operator|.
name|getFD
argument_list|()
argument_list|)
init|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<?xml version=\"1.0\"?>\n<fsimage>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<version>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"layoutVersion"
argument_list|,
name|summary
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"onDiskVersion"
argument_list|,
name|summary
operator|.
name|getOndiskVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// Output the version of OIV (which is not necessarily the version of
comment|// the fsimage file).  This could be helpful in the case where a bug
comment|// in OIV leads to information loss in the XML-- we can quickly tell
comment|// if a specific fsimage XML file is affected by this bug.
name|o
argument_list|(
literal|"oivRevision"
argument_list|,
name|VersionInfo
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</version>\n"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FileSummary
operator|.
name|Section
argument_list|>
name|sections
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|summary
operator|.
name|getSectionsList
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sections
argument_list|,
operator|new
name|Comparator
argument_list|<
name|FileSummary
operator|.
name|Section
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FileSummary
operator|.
name|Section
name|s1
parameter_list|,
name|FileSummary
operator|.
name|Section
name|s2
parameter_list|)
block|{
name|SectionName
name|n1
init|=
name|SectionName
operator|.
name|fromString
argument_list|(
name|s1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SectionName
name|n2
init|=
name|SectionName
operator|.
name|fromString
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|n1
operator|==
literal|null
condition|)
block|{
return|return
name|n2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|n2
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|n1
operator|.
name|ordinal
argument_list|()
operator|-
name|n2
operator|.
name|ordinal
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|FileSummary
operator|.
name|Section
name|s
range|:
name|sections
control|)
block|{
name|fin
operator|.
name|getChannel
argument_list|()
operator|.
name|position
argument_list|(
name|s
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|FSImageUtil
operator|.
name|wrapInputStreamForCompression
argument_list|(
name|conf
argument_list|,
name|summary
operator|.
name|getCodec
argument_list|()
argument_list|,
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|LimitInputStream
argument_list|(
name|fin
argument_list|,
name|s
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|SectionName
operator|.
name|fromString
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|NS_INFO
case|:
name|dumpNameSection
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING_TABLE
case|:
name|loadStringTable
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
case|case
name|INODE
case|:
name|dumpINodeSection
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
case|case
name|INODE_REFERENCE
case|:
name|dumpINodeReferenceSection
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
case|case
name|INODE_DIR
case|:
name|dumpINodeDirectorySection
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
case|case
name|FILES_UNDERCONSTRUCTION
case|:
name|dumpFileUnderConstructionSection
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
case|case
name|SNAPSHOT
case|:
name|dumpSnapshotSection
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
case|case
name|SNAPSHOT_DIFF
case|:
name|dumpSnapshotDiffSection
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
case|case
name|SECRET_MANAGER
case|:
name|dumpSecretManagerSection
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
case|case
name|CACHE_MANAGER
case|:
name|dumpCacheManagerSection
argument_list|(
name|is
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</fsimage>\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dumpCacheManagerSection (InputStream is)
specifier|private
name|void
name|dumpCacheManagerSection
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<CacheManagerSection>"
argument_list|)
expr_stmt|;
name|CacheManagerSection
name|s
init|=
name|CacheManagerSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|o
argument_list|(
literal|"nextDirectiveId"
argument_list|,
name|s
operator|.
name|getNextDirectiveId
argument_list|()
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"numDirectives"
argument_list|,
name|s
operator|.
name|getNumDirectives
argument_list|()
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"numPools"
argument_list|,
name|s
operator|.
name|getNumPools
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|getNumPools
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|CachePoolInfoProto
name|p
init|=
name|CachePoolInfoProto
operator|.
name|parseDelimitedFrom
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<pool>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"poolName"
argument_list|,
name|p
operator|.
name|getPoolName
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"ownerName"
argument_list|,
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"groupName"
argument_list|,
name|p
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"mode"
argument_list|,
name|p
operator|.
name|getMode
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"limit"
argument_list|,
name|p
operator|.
name|getLimit
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"maxRelativeExpiry"
argument_list|,
name|p
operator|.
name|getMaxRelativeExpiry
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</pool>\n"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|getNumDirectives
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|CacheDirectiveInfoProto
name|p
init|=
name|CacheDirectiveInfoProto
operator|.
name|parseDelimitedFrom
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<directive>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"id"
argument_list|,
name|p
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"path"
argument_list|,
name|p
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"replication"
argument_list|,
name|p
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"pool"
argument_list|,
name|p
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<expiration>"
argument_list|)
expr_stmt|;
name|CacheDirectiveInfoExpirationProto
name|e
init|=
name|p
operator|.
name|getExpiration
argument_list|()
decl_stmt|;
name|o
argument_list|(
literal|"millis"
argument_list|,
name|e
operator|.
name|getMillis
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"relative"
argument_list|,
name|e
operator|.
name|getIsRelative
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</expiration>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</directive>\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</CacheManagerSection>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpFileUnderConstructionSection (InputStream in)
specifier|private
name|void
name|dumpFileUnderConstructionSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<FileUnderConstructionSection>"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|FileUnderConstructionEntry
name|e
init|=
name|FileUnderConstructionEntry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"<inode>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"id"
argument_list|,
name|e
operator|.
name|getInodeId
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"path"
argument_list|,
name|e
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</inode>\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</FileUnderConstructionSection>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpXattrs (INodeSection.XAttrFeatureProto xattrs)
specifier|private
name|void
name|dumpXattrs
parameter_list|(
name|INodeSection
operator|.
name|XAttrFeatureProto
name|xattrs
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<xattrs>"
argument_list|)
expr_stmt|;
for|for
control|(
name|INodeSection
operator|.
name|XAttrCompactProto
name|xattr
range|:
name|xattrs
operator|.
name|getXAttrsList
argument_list|()
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<xattr>"
argument_list|)
expr_stmt|;
name|int
name|encodedName
init|=
name|xattr
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|ns
init|=
operator|(
name|XATTR_NAMESPACE_MASK
operator|&
operator|(
name|encodedName
operator|>>
name|XATTR_NAMESPACE_OFFSET
operator|)
operator|)
operator||
operator|(
operator|(
name|XATTR_NAMESPACE_EXT_MASK
operator|&
operator|(
name|encodedName
operator|>>
name|XATTR_NAMESPACE_EXT_OFFSET
operator|)
operator|)
operator|<<
literal|2
operator|)
decl_stmt|;
name|o
argument_list|(
literal|"ns"
argument_list|,
name|XAttrProtos
operator|.
name|XAttrProto
operator|.
name|XAttrNamespaceProto
operator|.
name|valueOf
argument_list|(
name|ns
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"name"
argument_list|,
name|stringTable
index|[
name|XATTR_NAME_MASK
operator|&
operator|(
name|encodedName
operator|>>
name|XATTR_NAME_OFFSET
operator|)
index|]
argument_list|)
expr_stmt|;
name|ByteString
name|val
init|=
name|xattr
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|o
argument_list|(
literal|"val"
argument_list|,
name|val
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|o
argument_list|(
literal|"valHex"
argument_list|,
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|val
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</xattr>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</xattrs>"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpINodeDirectory (INodeDirectory d)
specifier|private
name|void
name|dumpINodeDirectory
parameter_list|(
name|INodeDirectory
name|d
parameter_list|)
block|{
name|o
argument_list|(
literal|"mtime"
argument_list|,
name|d
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"permission"
argument_list|,
name|dumpPermission
argument_list|(
name|d
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|hasXAttrs
argument_list|()
condition|)
block|{
name|dumpXattrs
argument_list|(
name|d
operator|.
name|getXAttrs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dumpAcls
argument_list|(
name|d
operator|.
name|getAcl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|hasDsQuota
argument_list|()
operator|&&
name|d
operator|.
name|hasNsQuota
argument_list|()
condition|)
block|{
name|o
argument_list|(
literal|"nsquota"
argument_list|,
name|d
operator|.
name|getNsQuota
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"dsquota"
argument_list|,
name|d
operator|.
name|getDsQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|INodeSection
operator|.
name|QuotaByStorageTypeFeatureProto
name|typeQuotas
init|=
name|d
operator|.
name|getTypeQuotas
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeQuotas
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INodeSection
operator|.
name|QuotaByStorageTypeEntryProto
name|entry
range|:
name|typeQuotas
operator|.
name|getQuotasList
argument_list|()
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<typeQuota>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"type"
argument_list|,
name|entry
operator|.
name|getStorageType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"quota"
argument_list|,
name|entry
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</typeQuota>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|dumpINodeDirectorySection (InputStream in)
specifier|private
name|void
name|dumpINodeDirectorySection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<INodeDirectorySection>"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|INodeDirectorySection
operator|.
name|DirEntry
name|e
init|=
name|INodeDirectorySection
operator|.
name|DirEntry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// note that in is a LimitedInputStream
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"<directory>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"parent"
argument_list|,
name|e
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|id
range|:
name|e
operator|.
name|getChildrenList
argument_list|()
control|)
block|{
name|o
argument_list|(
literal|"child"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|refId
range|:
name|e
operator|.
name|getRefChildrenList
argument_list|()
control|)
block|{
name|o
argument_list|(
literal|"refChild"
argument_list|,
name|refId
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</directory>\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</INodeDirectorySection>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpINodeReferenceSection (InputStream in)
specifier|private
name|void
name|dumpINodeReferenceSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<INodeReferenceSection>"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|INodeReferenceSection
operator|.
name|INodeReference
name|e
init|=
name|INodeReferenceSection
operator|.
name|INodeReference
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|dumpINodeReference
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</INodeReferenceSection>"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpINodeReference (INodeReferenceSection.INodeReference r)
specifier|private
name|void
name|dumpINodeReference
parameter_list|(
name|INodeReferenceSection
operator|.
name|INodeReference
name|r
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<ref>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"referredId"
argument_list|,
name|r
operator|.
name|getReferredId
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"name"
argument_list|,
name|r
operator|.
name|getName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"dstSnapshotId"
argument_list|,
name|r
operator|.
name|getDstSnapshotId
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"lastSnapshotId"
argument_list|,
name|r
operator|.
name|getLastSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</ref>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpINodeFile (INodeSection.INodeFile f)
specifier|private
name|void
name|dumpINodeFile
parameter_list|(
name|INodeSection
operator|.
name|INodeFile
name|f
parameter_list|)
block|{
name|o
argument_list|(
literal|"replication"
argument_list|,
name|f
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"mtime"
argument_list|,
name|f
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"atime"
argument_list|,
name|f
operator|.
name|getAccessTime
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"preferredBlockSize"
argument_list|,
name|f
operator|.
name|getPreferredBlockSize
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"permission"
argument_list|,
name|dumpPermission
argument_list|(
name|f
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|hasXAttrs
argument_list|()
condition|)
block|{
name|dumpXattrs
argument_list|(
name|f
operator|.
name|getXAttrs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dumpAcls
argument_list|(
name|f
operator|.
name|getAcl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|getBlocksCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<blocks>"
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockProto
name|b
range|:
name|f
operator|.
name|getBlocksList
argument_list|()
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<block>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"id"
argument_list|,
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"genstamp"
argument_list|,
name|b
operator|.
name|getGenStamp
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"numBytes"
argument_list|,
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</block>\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</blocks>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|hasStoragePolicyID
argument_list|()
condition|)
block|{
name|o
argument_list|(
literal|"storagePolicyId"
argument_list|,
name|f
operator|.
name|getStoragePolicyID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|getIsStriped
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<isStriped/>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|hasFileUC
argument_list|()
condition|)
block|{
name|INodeSection
operator|.
name|FileUnderConstructionFeature
name|u
init|=
name|f
operator|.
name|getFileUC
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<file-under-construction>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"clientName"
argument_list|,
name|u
operator|.
name|getClientName
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"clientMachine"
argument_list|,
name|u
operator|.
name|getClientMachine
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</file-under-construction>\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dumpAcls (AclFeatureProto aclFeatureProto)
specifier|private
name|void
name|dumpAcls
parameter_list|(
name|AclFeatureProto
name|aclFeatureProto
parameter_list|)
block|{
name|ImmutableList
argument_list|<
name|AclEntry
argument_list|>
name|aclEntryList
init|=
name|FSImageFormatPBINode
operator|.
name|Loader
operator|.
name|loadAclEntries
argument_list|(
name|aclFeatureProto
argument_list|,
name|stringTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclEntryList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<acls>"
argument_list|)
expr_stmt|;
for|for
control|(
name|AclEntry
name|aclEntry
range|:
name|aclEntryList
control|)
block|{
name|o
argument_list|(
literal|"acl"
argument_list|,
name|aclEntry
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</acls>"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dumpINodeSection (InputStream in)
specifier|private
name|void
name|dumpINodeSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeSection
name|s
init|=
name|INodeSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<INodeSection>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"lastInodeId"
argument_list|,
name|s
operator|.
name|getLastInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"numInodes"
argument_list|,
name|s
operator|.
name|getNumInodes
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|getNumInodes
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|INodeSection
operator|.
name|INode
name|p
init|=
name|INodeSection
operator|.
name|INode
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<inode>"
argument_list|)
expr_stmt|;
name|dumpINodeFields
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</inode>\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</INodeSection>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpINodeFields (INodeSection.INode p)
specifier|private
name|void
name|dumpINodeFields
parameter_list|(
name|INodeSection
operator|.
name|INode
name|p
parameter_list|)
block|{
name|o
argument_list|(
literal|"id"
argument_list|,
name|p
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"type"
argument_list|,
name|p
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"name"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|hasFile
argument_list|()
condition|)
block|{
name|dumpINodeFile
argument_list|(
name|p
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|hasDirectory
argument_list|()
condition|)
block|{
name|dumpINodeDirectory
argument_list|(
name|p
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|hasSymlink
argument_list|()
condition|)
block|{
name|dumpINodeSymlink
argument_list|(
name|p
operator|.
name|getSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dumpINodeSymlink (INodeSymlink s)
specifier|private
name|void
name|dumpINodeSymlink
parameter_list|(
name|INodeSymlink
name|s
parameter_list|)
block|{
name|o
argument_list|(
literal|"permission"
argument_list|,
name|dumpPermission
argument_list|(
name|s
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
operator|.
name|o
argument_list|(
literal|"target"
argument_list|,
name|s
operator|.
name|getTarget
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"mtime"
argument_list|,
name|s
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"atime"
argument_list|,
name|s
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpNameSection (InputStream in)
specifier|private
name|void
name|dumpNameSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|NameSystemSection
name|s
init|=
name|NameSystemSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<NameSection>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"namespaceId"
argument_list|,
name|s
operator|.
name|getNamespaceId
argument_list|()
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"genstampV1"
argument_list|,
name|s
operator|.
name|getGenstampV1
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"genstampV2"
argument_list|,
name|s
operator|.
name|getGenstampV2
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"genstampV1Limit"
argument_list|,
name|s
operator|.
name|getGenstampV1Limit
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"lastAllocatedBlockId"
argument_list|,
name|s
operator|.
name|getLastAllocatedBlockId
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"txid"
argument_list|,
name|s
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</NameSection>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpPermission (long permission)
specifier|private
name|String
name|dumpPermission
parameter_list|(
name|long
name|permission
parameter_list|)
block|{
name|PermissionStatus
name|permStatus
init|=
name|FSImageFormatPBINode
operator|.
name|Loader
operator|.
name|loadPermission
argument_list|(
name|permission
argument_list|,
name|stringTable
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s:%04o"
argument_list|,
name|permStatus
operator|.
name|getUserName
argument_list|()
argument_list|,
name|permStatus
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|permStatus
operator|.
name|getPermission
argument_list|()
operator|.
name|toExtendedShort
argument_list|()
argument_list|)
return|;
block|}
DECL|method|dumpSecretManagerSection (InputStream is)
specifier|private
name|void
name|dumpSecretManagerSection
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<SecretManagerSection>"
argument_list|)
expr_stmt|;
name|SecretManagerSection
name|s
init|=
name|SecretManagerSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|int
name|expectedNumDelegationKeys
init|=
name|s
operator|.
name|getNumKeys
argument_list|()
decl_stmt|;
name|int
name|expectedNumTokens
init|=
name|s
operator|.
name|getNumTokens
argument_list|()
decl_stmt|;
name|o
argument_list|(
literal|"currentId"
argument_list|,
name|s
operator|.
name|getCurrentId
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"tokenSequenceNumber"
argument_list|,
name|s
operator|.
name|getTokenSequenceNumber
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"numDelegationKeys"
argument_list|,
name|expectedNumDelegationKeys
argument_list|)
operator|.
name|o
argument_list|(
literal|"numTokens"
argument_list|,
name|expectedNumTokens
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedNumDelegationKeys
condition|;
name|i
operator|++
control|)
block|{
name|SecretManagerSection
operator|.
name|DelegationKey
name|dkey
init|=
name|SecretManagerSection
operator|.
name|DelegationKey
operator|.
name|parseDelimitedFrom
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<delegationKey>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"id"
argument_list|,
name|dkey
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"key"
argument_list|,
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|dkey
operator|.
name|getKey
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dkey
operator|.
name|hasExpiryDate
argument_list|()
condition|)
block|{
name|dumpDate
argument_list|(
literal|"expiry"
argument_list|,
name|dkey
operator|.
name|getExpiryDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</delegationKey>"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedNumTokens
condition|;
name|i
operator|++
control|)
block|{
name|SecretManagerSection
operator|.
name|PersistToken
name|token
init|=
name|SecretManagerSection
operator|.
name|PersistToken
operator|.
name|parseDelimitedFrom
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<token>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|hasVersion
argument_list|()
condition|)
block|{
name|o
argument_list|(
literal|"version"
argument_list|,
name|token
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|hasOwner
argument_list|()
condition|)
block|{
name|o
argument_list|(
literal|"owner"
argument_list|,
name|token
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|hasRenewer
argument_list|()
condition|)
block|{
name|o
argument_list|(
literal|"renewer"
argument_list|,
name|token
operator|.
name|getRenewer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|hasRealUser
argument_list|()
condition|)
block|{
name|o
argument_list|(
literal|"realUser"
argument_list|,
name|token
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|hasIssueDate
argument_list|()
condition|)
block|{
name|dumpDate
argument_list|(
literal|"issueDate"
argument_list|,
name|token
operator|.
name|getIssueDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|hasMaxDate
argument_list|()
condition|)
block|{
name|dumpDate
argument_list|(
literal|"maxDate"
argument_list|,
name|token
operator|.
name|getMaxDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|hasSequenceNumber
argument_list|()
condition|)
block|{
name|o
argument_list|(
literal|"sequenceNumber"
argument_list|,
name|token
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|hasMasterKeyId
argument_list|()
condition|)
block|{
name|o
argument_list|(
literal|"masterKeyId"
argument_list|,
name|token
operator|.
name|getMasterKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|hasExpiryDate
argument_list|()
condition|)
block|{
name|dumpDate
argument_list|(
literal|"expiryDate"
argument_list|,
name|token
operator|.
name|getExpiryDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</token>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</SecretManagerSection>"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpDate (String tag, long date)
specifier|private
name|void
name|dumpDate
parameter_list|(
name|String
name|tag
parameter_list|,
name|long
name|date
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<"
operator|+
name|tag
operator|+
literal|">"
operator|+
name|isoDateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|date
argument_list|)
argument_list|)
operator|+
literal|"</"
operator|+
name|tag
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpSnapshotDiffSection (InputStream in)
specifier|private
name|void
name|dumpSnapshotDiffSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<SnapshotDiffSection>"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|SnapshotDiffSection
operator|.
name|DiffEntry
name|e
init|=
name|SnapshotDiffSection
operator|.
name|DiffEntry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|e
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FILEDIFF
case|:
name|out
operator|.
name|print
argument_list|(
literal|"<fileDiffEntry>"
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRECTORYDIFF
case|:
name|out
operator|.
name|print
argument_list|(
literal|"<dirDiffEntry>"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unknown DiffEntry type "
operator|+
name|e
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|o
argument_list|(
literal|"inodeId"
argument_list|,
name|e
operator|.
name|getInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"count"
argument_list|,
name|e
operator|.
name|getNumOfDiff
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FILEDIFF
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e
operator|.
name|getNumOfDiff
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<fileDiff>"
argument_list|)
expr_stmt|;
name|SnapshotDiffSection
operator|.
name|FileDiff
name|f
init|=
name|SnapshotDiffSection
operator|.
name|FileDiff
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|o
argument_list|(
literal|"snapshotId"
argument_list|,
name|f
operator|.
name|getSnapshotId
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"size"
argument_list|,
name|f
operator|.
name|getFileSize
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"name"
argument_list|,
name|f
operator|.
name|getName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</fileDiff>\n"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DIRECTORYDIFF
case|:
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e
operator|.
name|getNumOfDiff
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<dirDiff>"
argument_list|)
expr_stmt|;
name|SnapshotDiffSection
operator|.
name|DirectoryDiff
name|d
init|=
name|SnapshotDiffSection
operator|.
name|DirectoryDiff
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|o
argument_list|(
literal|"snapshotId"
argument_list|,
name|d
operator|.
name|getSnapshotId
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"childrenSize"
argument_list|,
name|d
operator|.
name|getChildrenSize
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"isSnapshotRoot"
argument_list|,
name|d
operator|.
name|getIsSnapshotRoot
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"name"
argument_list|,
name|d
operator|.
name|getName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
operator|.
name|o
argument_list|(
literal|"createdListSize"
argument_list|,
name|d
operator|.
name|getCreatedListSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|did
range|:
name|d
operator|.
name|getDeletedINodeList
argument_list|()
control|)
block|{
name|o
argument_list|(
literal|"deletedInode"
argument_list|,
name|did
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|dRefid
range|:
name|d
operator|.
name|getDeletedINodeRefList
argument_list|()
control|)
block|{
name|o
argument_list|(
literal|"deletedInoderef"
argument_list|,
name|dRefid
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|d
operator|.
name|getCreatedListSize
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|SnapshotDiffSection
operator|.
name|CreatedListEntry
name|ce
init|=
name|SnapshotDiffSection
operator|.
name|CreatedListEntry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<created>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"name"
argument_list|,
name|ce
operator|.
name|getName
argument_list|()
operator|.
name|toStringUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</created>\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</dirDiff>\n"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
switch|switch
condition|(
name|e
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FILEDIFF
case|:
name|out
operator|.
name|print
argument_list|(
literal|"</fileDiffEntry>"
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRECTORYDIFF
case|:
name|out
operator|.
name|print
argument_list|(
literal|"</dirDiffEntry>"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unknown DiffEntry type "
operator|+
name|e
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</SnapshotDiffSection>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpSnapshotSection (InputStream in)
specifier|private
name|void
name|dumpSnapshotSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<SnapshotSection>"
argument_list|)
expr_stmt|;
name|SnapshotSection
name|s
init|=
name|SnapshotSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|o
argument_list|(
literal|"snapshotCounter"
argument_list|,
name|s
operator|.
name|getSnapshotCounter
argument_list|()
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"numSnapshots"
argument_list|,
name|s
operator|.
name|getNumSnapshots
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getSnapshottableDirCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<snapshottableDir>"
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|id
range|:
name|s
operator|.
name|getSnapshottableDirList
argument_list|()
control|)
block|{
name|o
argument_list|(
literal|"dir"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</snapshottableDir>\n"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|getNumSnapshots
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|SnapshotSection
operator|.
name|Snapshot
name|pbs
init|=
name|SnapshotSection
operator|.
name|Snapshot
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<snapshot>"
argument_list|)
expr_stmt|;
name|o
argument_list|(
literal|"id"
argument_list|,
name|pbs
operator|.
name|getSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<root>"
argument_list|)
expr_stmt|;
name|dumpINodeFields
argument_list|(
name|pbs
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</root>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</snapshot>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</SnapshotSection>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|loadStringTable (InputStream in)
specifier|private
name|void
name|loadStringTable
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StringTableSection
name|s
init|=
name|StringTableSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|stringTable
operator|=
operator|new
name|String
index|[
name|s
operator|.
name|getNumEntry
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|getNumEntry
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|StringTableSection
operator|.
name|Entry
name|e
init|=
name|StringTableSection
operator|.
name|Entry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|stringTable
index|[
name|e
operator|.
name|getId
argument_list|()
index|]
operator|=
name|e
operator|.
name|getStr
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|o (final String e, final Object v)
specifier|private
name|PBImageXmlWriter
name|o
parameter_list|(
specifier|final
name|String
name|e
parameter_list|,
specifier|final
name|Object
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|instanceof
name|Boolean
condition|)
block|{
comment|// For booleans, the presence of the element indicates true, and its
comment|// absence indicates false.
if|if
condition|(
operator|(
name|Boolean
operator|)
name|v
operator|!=
literal|false
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<"
operator|+
name|e
operator|+
literal|"/>"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"<"
operator|+
name|e
operator|+
literal|">"
operator|+
name|XMLUtils
operator|.
name|mangleXmlString
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|+
literal|"</"
operator|+
name|e
operator|+
literal|">"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

