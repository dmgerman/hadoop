begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.jscsiHelper.cache.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|LogicalBlock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * Impl class for LogicalBlock.  */
end_comment

begin_class
DECL|class|DiskBlock
specifier|public
class|class
name|DiskBlock
implements|implements
name|LogicalBlock
block|{
DECL|field|data
specifier|private
name|ByteBuffer
name|data
decl_stmt|;
DECL|field|blockID
specifier|private
name|long
name|blockID
decl_stmt|;
DECL|field|persisted
specifier|private
name|boolean
name|persisted
decl_stmt|;
comment|/**    * Constructs a DiskBlock Class from the following params.    * @param blockID - 64-bit block ID    * @param data - Byte Array    * @param persisted - Flag which tells us if this is persisted to remote    */
DECL|method|DiskBlock (long blockID, byte[] data, boolean persisted)
specifier|public
name|DiskBlock
parameter_list|(
name|long
name|blockID
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|boolean
name|persisted
parameter_list|)
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|data
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|blockID
operator|=
name|blockID
expr_stmt|;
name|this
operator|.
name|persisted
operator|=
name|persisted
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getData ()
specifier|public
name|ByteBuffer
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
comment|/**    * Frees the byte buffer since we don't need it any more.    */
annotation|@
name|Override
DECL|method|clearData ()
specifier|public
name|void
name|clearData
parameter_list|()
block|{
name|data
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBlockID ()
specifier|public
name|long
name|getBlockID
parameter_list|()
block|{
return|return
name|blockID
return|;
block|}
annotation|@
name|Override
DECL|method|isPersisted ()
specifier|public
name|boolean
name|isPersisted
parameter_list|()
block|{
return|return
name|persisted
return|;
block|}
comment|/**    * Sets the value of persisted.    * @param value - True if this has been persisted to container, false    * otherwise.    */
DECL|method|setPersisted (boolean value)
specifier|public
name|void
name|setPersisted
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|persisted
operator|=
name|value
expr_stmt|;
block|}
block|}
end_class

end_unit

