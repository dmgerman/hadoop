begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|XAttrHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** A collection of block storage policies. */
end_comment

begin_class
DECL|class|BlockStoragePolicySuite
specifier|public
class|class
name|BlockStoragePolicySuite
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockStoragePolicySuite
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|STORAGE_POLICY_XATTR_NAME
specifier|public
specifier|static
specifier|final
name|String
name|STORAGE_POLICY_XATTR_NAME
init|=
literal|"hsm.block.storage.policy.id"
decl_stmt|;
DECL|field|XAttrNS
specifier|public
specifier|static
specifier|final
name|XAttr
operator|.
name|NameSpace
name|XAttrNS
init|=
name|XAttr
operator|.
name|NameSpace
operator|.
name|SYSTEM
decl_stmt|;
DECL|field|ID_BIT_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|ID_BIT_LENGTH
init|=
literal|4
decl_stmt|;
DECL|field|ID_UNSPECIFIED
specifier|public
specifier|static
specifier|final
name|byte
name|ID_UNSPECIFIED
init|=
literal|0
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|createDefaultSuite ()
specifier|public
specifier|static
name|BlockStoragePolicySuite
name|createDefaultSuite
parameter_list|()
block|{
specifier|final
name|BlockStoragePolicy
index|[]
name|policies
init|=
operator|new
name|BlockStoragePolicy
index|[
literal|1
operator|<<
name|ID_BIT_LENGTH
index|]
decl_stmt|;
specifier|final
name|byte
name|lazyPersistId
init|=
name|HdfsConstants
operator|.
name|MEMORY_STORAGE_POLICY_ID
decl_stmt|;
name|policies
index|[
name|lazyPersistId
index|]
operator|=
operator|new
name|BlockStoragePolicy
argument_list|(
name|lazyPersistId
argument_list|,
name|HdfsConstants
operator|.
name|MEMORY_STORAGE_POLICY_NAME
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|RAM_DISK
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Cannot be changed on regular files, but inherited.
specifier|final
name|byte
name|allssdId
init|=
name|HdfsConstants
operator|.
name|ALLSSD_STORAGE_POLICY_ID
decl_stmt|;
name|policies
index|[
name|allssdId
index|]
operator|=
operator|new
name|BlockStoragePolicy
argument_list|(
name|allssdId
argument_list|,
name|HdfsConstants
operator|.
name|ALLSSD_STORAGE_POLICY_NAME
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|SSD
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|}
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|onessdId
init|=
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_ID
decl_stmt|;
name|policies
index|[
name|onessdId
index|]
operator|=
operator|new
name|BlockStoragePolicy
argument_list|(
name|onessdId
argument_list|,
name|HdfsConstants
operator|.
name|ONESSD_STORAGE_POLICY_NAME
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|SSD
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|hotId
init|=
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_ID
decl_stmt|;
name|policies
index|[
name|hotId
index|]
operator|=
operator|new
name|BlockStoragePolicy
argument_list|(
name|hotId
argument_list|,
name|HdfsConstants
operator|.
name|HOT_STORAGE_POLICY_NAME
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
name|StorageType
operator|.
name|EMPTY_ARRAY
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|warmId
init|=
name|HdfsConstants
operator|.
name|WARM_STORAGE_POLICY_ID
decl_stmt|;
name|policies
index|[
name|warmId
index|]
operator|=
operator|new
name|BlockStoragePolicy
argument_list|(
name|warmId
argument_list|,
name|HdfsConstants
operator|.
name|WARM_STORAGE_POLICY_NAME
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|DISK
block|,
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|coldId
init|=
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_ID
decl_stmt|;
name|policies
index|[
name|coldId
index|]
operator|=
operator|new
name|BlockStoragePolicy
argument_list|(
name|coldId
argument_list|,
name|HdfsConstants
operator|.
name|COLD_STORAGE_POLICY_NAME
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|ARCHIVE
block|}
argument_list|,
name|StorageType
operator|.
name|EMPTY_ARRAY
argument_list|,
name|StorageType
operator|.
name|EMPTY_ARRAY
argument_list|)
expr_stmt|;
return|return
operator|new
name|BlockStoragePolicySuite
argument_list|(
name|hotId
argument_list|,
name|policies
argument_list|)
return|;
block|}
DECL|field|defaultPolicyID
specifier|private
specifier|final
name|byte
name|defaultPolicyID
decl_stmt|;
DECL|field|policies
specifier|private
specifier|final
name|BlockStoragePolicy
index|[]
name|policies
decl_stmt|;
DECL|method|BlockStoragePolicySuite (byte defaultPolicyID, BlockStoragePolicy[] policies)
specifier|public
name|BlockStoragePolicySuite
parameter_list|(
name|byte
name|defaultPolicyID
parameter_list|,
name|BlockStoragePolicy
index|[]
name|policies
parameter_list|)
block|{
name|this
operator|.
name|defaultPolicyID
operator|=
name|defaultPolicyID
expr_stmt|;
name|this
operator|.
name|policies
operator|=
name|policies
expr_stmt|;
block|}
comment|/** @return the corresponding policy. */
DECL|method|getPolicy (byte id)
specifier|public
name|BlockStoragePolicy
name|getPolicy
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
comment|// id == 0 means policy not specified.
return|return
name|id
operator|==
literal|0
condition|?
name|getDefaultPolicy
argument_list|()
else|:
name|policies
index|[
name|id
index|]
return|;
block|}
comment|/** @return the default policy. */
DECL|method|getDefaultPolicy ()
specifier|public
name|BlockStoragePolicy
name|getDefaultPolicy
parameter_list|()
block|{
return|return
name|getPolicy
argument_list|(
name|defaultPolicyID
argument_list|)
return|;
block|}
DECL|method|getPolicy (String policyName)
specifier|public
name|BlockStoragePolicy
name|getPolicy
parameter_list|(
name|String
name|policyName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|policyName
argument_list|)
expr_stmt|;
if|if
condition|(
name|policies
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BlockStoragePolicy
name|policy
range|:
name|policies
control|)
block|{
if|if
condition|(
name|policy
operator|!=
literal|null
operator|&&
name|policy
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|policyName
argument_list|)
condition|)
block|{
return|return
name|policy
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getAllPolicies ()
specifier|public
name|BlockStoragePolicy
index|[]
name|getAllPolicies
parameter_list|()
block|{
name|List
argument_list|<
name|BlockStoragePolicy
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|policies
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BlockStoragePolicy
name|policy
range|:
name|policies
control|)
block|{
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|BlockStoragePolicy
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|buildXAttrName ()
specifier|public
specifier|static
name|String
name|buildXAttrName
parameter_list|()
block|{
return|return
name|XAttrNS
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"."
operator|+
name|STORAGE_POLICY_XATTR_NAME
return|;
block|}
DECL|method|buildXAttr (byte policyId)
specifier|public
specifier|static
name|XAttr
name|buildXAttr
parameter_list|(
name|byte
name|policyId
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|buildXAttrName
argument_list|()
decl_stmt|;
return|return
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|name
argument_list|,
operator|new
name|byte
index|[]
block|{
name|policyId
block|}
argument_list|)
return|;
block|}
DECL|method|isStoragePolicyXAttr (XAttr xattr)
specifier|public
specifier|static
name|boolean
name|isStoragePolicyXAttr
parameter_list|(
name|XAttr
name|xattr
parameter_list|)
block|{
return|return
name|xattr
operator|!=
literal|null
operator|&&
name|xattr
operator|.
name|getNameSpace
argument_list|()
operator|==
name|XAttrNS
operator|&&
name|xattr
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|STORAGE_POLICY_XATTR_NAME
argument_list|)
return|;
block|}
block|}
end_class

end_unit

