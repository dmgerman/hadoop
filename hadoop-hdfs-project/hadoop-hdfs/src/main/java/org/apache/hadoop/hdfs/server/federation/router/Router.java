begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|FederationUtil
operator|.
name|newActiveNamenodeResolver
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|FederationUtil
operator|.
name|newFileSubclusterResolver
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|terminate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|ActiveNamenodeResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|FileSubclusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|StateStoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Router that provides a unified view of multiple federated HDFS clusters. It  * has two main roles: (1) federated interface and (2) NameNode heartbeat.  *<p>  * For the federated interface, the Router receives a client request, checks the  * State Store for the correct subcluster, and forwards the request to the  * active Namenode of that subcluster. The reply from the Namenode then flows in  * the opposite direction. The Routers are stateless and can be behind a load  * balancer. HDFS clients connect to the router using the same interfaces as are  * used to communicate with a namenode, namely the ClientProtocol RPC interface  * and the WebHdfs HTTP interface exposed by the router. {@link RouterRpcServer}  * {@link RouterHttpServer}  *<p>  * For NameNode heartbeat, the Router periodically checks the state of a  * NameNode (usually on the same server) and reports their high availability  * (HA) state and load/space status to the State Store. Note that this is an  * optional role as a Router can be independent of any subcluster.  * {@link StateStoreService} {@link NamenodeHeartbeatService}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Router
specifier|public
class|class
name|Router
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Router
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Configuration for the Router. */
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/** Router address/identifier. */
DECL|field|routerId
specifier|private
name|String
name|routerId
decl_stmt|;
comment|/** RPC interface to the client. */
DECL|field|rpcServer
specifier|private
name|RouterRpcServer
name|rpcServer
decl_stmt|;
DECL|field|rpcAddress
specifier|private
name|InetSocketAddress
name|rpcAddress
decl_stmt|;
comment|/** Interface with the State Store. */
DECL|field|stateStore
specifier|private
name|StateStoreService
name|stateStore
decl_stmt|;
comment|/** Interface to map global name space to HDFS subcluster name spaces. */
DECL|field|subclusterResolver
specifier|private
name|FileSubclusterResolver
name|subclusterResolver
decl_stmt|;
comment|/** Interface to identify the active NN for a nameservice or blockpool ID. */
DECL|field|namenodeResolver
specifier|private
name|ActiveNamenodeResolver
name|namenodeResolver
decl_stmt|;
comment|/** Usage string for help message. */
DECL|field|USAGE
specifier|private
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"Usage: java Router"
decl_stmt|;
comment|/** Priority of the Router shutdown hook. */
DECL|field|SHUTDOWN_HOOK_PRIORITY
specifier|public
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|30
decl_stmt|;
comment|/////////////////////////////////////////////////////////
comment|// Constructor
comment|/////////////////////////////////////////////////////////
DECL|method|Router ()
specifier|public
name|Router
parameter_list|()
block|{
name|super
argument_list|(
name|Router
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/////////////////////////////////////////////////////////
comment|// Service management
comment|/////////////////////////////////////////////////////////
annotation|@
name|Override
DECL|method|serviceInit (Configuration configuration)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
comment|// Resolver to track active NNs
name|this
operator|.
name|namenodeResolver
operator|=
name|newActiveNamenodeResolver
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|stateStore
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|namenodeResolver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find namenode resolver."
argument_list|)
throw|;
block|}
comment|// Lookup interface to map between the global and subcluster name spaces
name|this
operator|.
name|subclusterResolver
operator|=
name|newFileSubclusterResolver
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|stateStore
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|subclusterResolver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find subcluster resolver"
argument_list|)
throw|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_RPC_ENABLE
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_RPC_ENABLE_DEFAULT
argument_list|)
condition|)
block|{
comment|// Create RPC server
name|this
operator|.
name|rpcServer
operator|=
name|createRpcServer
argument_list|()
expr_stmt|;
name|addService
argument_list|(
name|this
operator|.
name|rpcServer
argument_list|)
expr_stmt|;
name|this
operator|.
name|setRpcServerAddress
argument_list|(
name|rpcServer
operator|.
name|getRpcAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shutdown the router.    */
DECL|method|shutDown ()
specifier|public
name|void
name|shutDown
parameter_list|()
block|{
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Router
operator|.
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Main run loop for the router.    *    * @param argv parameters.    */
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
if|if
condition|(
name|DFSUtil
operator|.
name|parseHelpArgument
argument_list|(
name|argv
argument_list|,
name|Router
operator|.
name|USAGE
argument_list|,
name|System
operator|.
name|out
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|Router
operator|.
name|class
argument_list|,
name|argv
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|Router
name|router
init|=
operator|new
name|Router
argument_list|()
decl_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|CompositeServiceShutdownHook
argument_list|(
name|router
argument_list|)
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|router
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|router
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start router"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/////////////////////////////////////////////////////////
comment|// RPC Server
comment|/////////////////////////////////////////////////////////
comment|/**    * Create a new Router RPC server to proxy ClientProtocol requests.    *    * @return New Router RPC Server.    * @throws IOException If the router RPC server was not started.    */
DECL|method|createRpcServer ()
specifier|protected
name|RouterRpcServer
name|createRpcServer
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|RouterRpcServer
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|getNamenodeResolver
argument_list|()
argument_list|,
name|this
operator|.
name|getSubclusterResolver
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the Router RPC server.    *    * @return Router RPC server.    */
DECL|method|getRpcServer ()
specifier|public
name|RouterRpcServer
name|getRpcServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcServer
return|;
block|}
comment|/**    * Set the current RPC socket for the router.    *    * @param rpcAddress RPC address.    */
DECL|method|setRpcServerAddress (InetSocketAddress address)
specifier|protected
name|void
name|setRpcServerAddress
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|)
block|{
name|this
operator|.
name|rpcAddress
operator|=
name|address
expr_stmt|;
comment|// Use the RPC address as our unique router Id
if|if
condition|(
name|this
operator|.
name|rpcAddress
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
name|hostname
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|setRouterId
argument_list|(
name|hostname
operator|+
literal|":"
operator|+
name|this
operator|.
name|rpcAddress
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot set unique router ID, address not resolvable {}"
argument_list|,
name|this
operator|.
name|rpcAddress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the current RPC socket address for the router.    *    * @return InetSocketAddress    */
DECL|method|getRpcServerAddress ()
specifier|public
name|InetSocketAddress
name|getRpcServerAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcAddress
return|;
block|}
comment|/////////////////////////////////////////////////////////
comment|// Submodule getters
comment|/////////////////////////////////////////////////////////
comment|/**    * Get the State Store service.    *    * @return State Store service.    */
DECL|method|getStateStore ()
specifier|public
name|StateStoreService
name|getStateStore
parameter_list|()
block|{
return|return
name|this
operator|.
name|stateStore
return|;
block|}
comment|/**    * Get the subcluster resolver for files.    *    * @return Subcluster resolver for files.    */
DECL|method|getSubclusterResolver ()
specifier|public
name|FileSubclusterResolver
name|getSubclusterResolver
parameter_list|()
block|{
return|return
name|this
operator|.
name|subclusterResolver
return|;
block|}
comment|/**    * Get the namenode resolver for a subcluster.    *    * @return The namenode resolver for a subcluster.    */
DECL|method|getNamenodeResolver ()
specifier|public
name|ActiveNamenodeResolver
name|getNamenodeResolver
parameter_list|()
block|{
return|return
name|this
operator|.
name|namenodeResolver
return|;
block|}
comment|/////////////////////////////////////////////////////////
comment|// Router info
comment|/////////////////////////////////////////////////////////
comment|/**    * Unique ID for the router, typically the hostname:port string for the    * router's RPC server. This ID may be null on router startup before the RPC    * server has bound to a port.    *    * @return Router identifier.    */
DECL|method|getRouterId ()
specifier|public
name|String
name|getRouterId
parameter_list|()
block|{
return|return
name|this
operator|.
name|routerId
return|;
block|}
comment|/**    * Sets a unique ID for this router.    *    * @param router Identifier of the Router.    */
DECL|method|setRouterId (String id)
specifier|public
name|void
name|setRouterId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|routerId
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|stateStore
operator|.
name|setIdentifier
argument_list|(
name|this
operator|.
name|routerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|namenodeResolver
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|namenodeResolver
operator|.
name|setRouterId
argument_list|(
name|this
operator|.
name|routerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

