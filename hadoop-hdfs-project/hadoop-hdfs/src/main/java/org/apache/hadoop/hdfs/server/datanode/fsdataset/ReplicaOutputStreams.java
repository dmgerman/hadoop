begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Contains the output streams for the data and checksum of a replica.  */
end_comment

begin_class
DECL|class|ReplicaOutputStreams
specifier|public
class|class
name|ReplicaOutputStreams
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|DataNode
operator|.
name|LOG
decl_stmt|;
DECL|field|outFd
specifier|private
name|FileDescriptor
name|outFd
init|=
literal|null
decl_stmt|;
comment|/** Stream to block. */
DECL|field|dataOut
specifier|private
name|OutputStream
name|dataOut
decl_stmt|;
comment|/** Stream to checksum. */
DECL|field|checksumOut
specifier|private
specifier|final
name|OutputStream
name|checksumOut
decl_stmt|;
DECL|field|checksum
specifier|private
specifier|final
name|DataChecksum
name|checksum
decl_stmt|;
DECL|field|isTransientStorage
specifier|private
specifier|final
name|boolean
name|isTransientStorage
decl_stmt|;
DECL|field|slowLogThresholdMs
specifier|private
specifier|final
name|long
name|slowLogThresholdMs
decl_stmt|;
comment|/**    * Create an object with a data output stream, a checksum output stream    * and a checksum.    */
DECL|method|ReplicaOutputStreams (OutputStream dataOut, OutputStream checksumOut, DataChecksum checksum, boolean isTransientStorage, long slowLogThresholdMs)
specifier|public
name|ReplicaOutputStreams
parameter_list|(
name|OutputStream
name|dataOut
parameter_list|,
name|OutputStream
name|checksumOut
parameter_list|,
name|DataChecksum
name|checksum
parameter_list|,
name|boolean
name|isTransientStorage
parameter_list|,
name|long
name|slowLogThresholdMs
parameter_list|)
block|{
name|this
operator|.
name|dataOut
operator|=
name|dataOut
expr_stmt|;
name|this
operator|.
name|checksum
operator|=
name|checksum
expr_stmt|;
name|this
operator|.
name|slowLogThresholdMs
operator|=
name|slowLogThresholdMs
expr_stmt|;
name|this
operator|.
name|isTransientStorage
operator|=
name|isTransientStorage
expr_stmt|;
name|this
operator|.
name|checksumOut
operator|=
name|checksumOut
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|dataOut
operator|instanceof
name|FileOutputStream
condition|)
block|{
name|this
operator|.
name|outFd
operator|=
operator|(
operator|(
name|FileOutputStream
operator|)
name|this
operator|.
name|dataOut
operator|)
operator|.
name|getFD
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not get file descriptor for outputstream of class "
operator|+
name|this
operator|.
name|dataOut
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not get file descriptor for outputstream of class "
operator|+
name|this
operator|.
name|dataOut
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOutFd ()
specifier|public
name|FileDescriptor
name|getOutFd
parameter_list|()
block|{
return|return
name|outFd
return|;
block|}
comment|/** @return the data output stream. */
DECL|method|getDataOut ()
specifier|public
name|OutputStream
name|getDataOut
parameter_list|()
block|{
return|return
name|dataOut
return|;
block|}
comment|/** @return the checksum output stream. */
DECL|method|getChecksumOut ()
specifier|public
name|OutputStream
name|getChecksumOut
parameter_list|()
block|{
return|return
name|checksumOut
return|;
block|}
comment|/** @return the checksum. */
DECL|method|getChecksum ()
specifier|public
name|DataChecksum
name|getChecksum
parameter_list|()
block|{
return|return
name|checksum
return|;
block|}
comment|/** @return is writing to a transient storage? */
DECL|method|isTransientStorage ()
specifier|public
name|boolean
name|isTransientStorage
parameter_list|()
block|{
return|return
name|isTransientStorage
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|checksumOut
argument_list|)
expr_stmt|;
block|}
DECL|method|closeDataStream ()
specifier|public
name|void
name|closeDataStream
parameter_list|()
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|dataOut
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Sync the data stream if it supports it.    */
DECL|method|syncDataOut ()
specifier|public
name|void
name|syncDataOut
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dataOut
operator|instanceof
name|FileOutputStream
condition|)
block|{
name|sync
argument_list|(
operator|(
name|FileOutputStream
operator|)
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sync the checksum stream if it supports it.    */
DECL|method|syncChecksumOut ()
specifier|public
name|void
name|syncChecksumOut
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|checksumOut
operator|instanceof
name|FileOutputStream
condition|)
block|{
name|sync
argument_list|(
operator|(
name|FileOutputStream
operator|)
name|checksumOut
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Flush the data stream if it supports it.    */
DECL|method|flushDataOut ()
specifier|public
name|void
name|flushDataOut
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
comment|/**    * Flush the checksum stream if it supports it.    */
DECL|method|flushChecksumOut ()
specifier|public
name|void
name|flushChecksumOut
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|(
name|checksumOut
argument_list|)
expr_stmt|;
block|}
DECL|method|flush (OutputStream dos)
specifier|private
name|void
name|flush
parameter_list|(
name|OutputStream
name|dos
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|begin
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|dos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|long
name|duration
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|begin
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"ReplicaOutputStreams#flush takes {} ms."
argument_list|,
name|duration
argument_list|)
expr_stmt|;
if|if
condition|(
name|duration
operator|>
name|slowLogThresholdMs
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Slow flush took {} ms (threshold={} ms)"
argument_list|,
name|duration
argument_list|,
name|slowLogThresholdMs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sync (FileOutputStream fos)
specifier|private
name|void
name|sync
parameter_list|(
name|FileOutputStream
name|fos
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|begin
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|fos
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|duration
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|begin
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"ReplicaOutputStreams#sync takes {} ms."
argument_list|,
name|duration
argument_list|)
expr_stmt|;
if|if
condition|(
name|duration
operator|>
name|slowLogThresholdMs
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Slow fsync took {} ms (threshold={} ms)"
argument_list|,
name|duration
argument_list|,
name|slowLogThresholdMs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeToDisk (byte[] b, int off, int len)
specifier|public
name|long
name|writeToDisk
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|begin
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|dataOut
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|long
name|duration
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|begin
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"DatanodeIO#writeToDisk takes {} ms."
argument_list|,
name|duration
argument_list|)
expr_stmt|;
if|if
condition|(
name|duration
operator|>
name|slowLogThresholdMs
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Slow BlockReceiver write data to disk cost: {} ms "
operator|+
literal|"(threshold={} ms)"
argument_list|,
name|duration
argument_list|,
name|slowLogThresholdMs
argument_list|)
expr_stmt|;
block|}
return|return
name|duration
return|;
block|}
DECL|method|syncFileRangeIfPossible (long offset, long nbytes, int flags)
specifier|public
name|void
name|syncFileRangeIfPossible
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|nbytes
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|NativeIOException
block|{
assert|assert
name|this
operator|.
name|outFd
operator|!=
literal|null
operator|:
literal|"null outFd!"
assert|;
name|NativeIO
operator|.
name|POSIX
operator|.
name|syncFileRangeIfPossible
argument_list|(
name|outFd
argument_list|,
name|offset
argument_list|,
name|nbytes
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
DECL|method|dropCacheBehindWrites (String identifier, long offset, long len, int flags)
specifier|public
name|void
name|dropCacheBehindWrites
parameter_list|(
name|String
name|identifier
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|len
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|NativeIOException
block|{
assert|assert
name|this
operator|.
name|outFd
operator|!=
literal|null
operator|:
literal|"null outFd!"
assert|;
name|NativeIO
operator|.
name|POSIX
operator|.
name|getCacheManipulator
argument_list|()
operator|.
name|posixFadviseIfPossible
argument_list|(
name|identifier
argument_list|,
name|outFd
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

