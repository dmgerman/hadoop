begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ProvidedStorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AliasMapProtocolProtos
operator|.
name|KeyValueProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AliasMapProtocolProtos
operator|.
name|ReadResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AliasMapProtocolProtos
operator|.
name|WriteRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AliasMapProtocolProtos
operator|.
name|WriteResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|aliasmap
operator|.
name|InMemoryAliasMapProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AliasMapProtocolProtos
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|aliasmap
operator|.
name|InMemoryAliasMap
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * AliasMapProtocolServerSideTranslatorPB is responsible for translating RPC  * calls and forwarding them to the internal InMemoryAliasMap.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|AliasMapProtocolServerSideTranslatorPB
specifier|public
class|class
name|AliasMapProtocolServerSideTranslatorPB
implements|implements
name|AliasMapProtocolPB
block|{
DECL|field|aliasMap
specifier|private
specifier|final
name|InMemoryAliasMapProtocol
name|aliasMap
decl_stmt|;
DECL|method|AliasMapProtocolServerSideTranslatorPB ( InMemoryAliasMapProtocol aliasMap)
specifier|public
name|AliasMapProtocolServerSideTranslatorPB
parameter_list|(
name|InMemoryAliasMapProtocol
name|aliasMap
parameter_list|)
block|{
name|this
operator|.
name|aliasMap
operator|=
name|aliasMap
expr_stmt|;
block|}
DECL|field|VOID_WRITE_RESPONSE
specifier|private
specifier|static
specifier|final
name|WriteResponseProto
name|VOID_WRITE_RESPONSE
init|=
name|WriteResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|write (RpcController controller, WriteRequestProto request)
specifier|public
name|WriteResponseProto
name|write
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|WriteRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|FileRegion
name|toWrite
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getKeyValuePair
argument_list|()
argument_list|)
decl_stmt|;
name|aliasMap
operator|.
name|write
argument_list|(
name|toWrite
operator|.
name|getBlock
argument_list|()
argument_list|,
name|toWrite
operator|.
name|getProvidedStorageLocation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|VOID_WRITE_RESPONSE
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (RpcController controller, ReadRequestProto request)
specifier|public
name|ReadResponseProto
name|read
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ReadRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|Block
name|toRead
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ProvidedStorageLocation
argument_list|>
name|optionalResult
init|=
name|aliasMap
operator|.
name|read
argument_list|(
name|toRead
argument_list|)
decl_stmt|;
name|ReadResponseProto
operator|.
name|Builder
name|builder
init|=
name|ReadResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|optionalResult
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ProvidedStorageLocation
name|providedStorageLocation
init|=
name|optionalResult
operator|.
name|get
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|providedStorageLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|list (RpcController controller, ListRequestProto request)
specifier|public
name|ListResponseProto
name|list
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ListRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|BlockProto
name|marker
init|=
name|request
operator|.
name|getMarker
argument_list|()
decl_stmt|;
name|IterationResult
name|iterationResult
decl_stmt|;
if|if
condition|(
name|marker
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|iterationResult
operator|=
name|aliasMap
operator|.
name|list
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|marker
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iterationResult
operator|=
name|aliasMap
operator|.
name|list
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ListResponseProto
operator|.
name|Builder
name|responseBuilder
init|=
name|ListResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileRegion
argument_list|>
name|fileRegions
init|=
name|iterationResult
operator|.
name|getFileRegions
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValueProto
argument_list|>
name|keyValueProtos
init|=
name|fileRegions
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|PBHelper
operator|::
name|convert
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|responseBuilder
operator|.
name|addAllFileRegions
argument_list|(
name|keyValueProtos
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Block
argument_list|>
name|nextMarker
init|=
name|iterationResult
operator|.
name|getNextBlock
argument_list|()
decl_stmt|;
name|nextMarker
operator|.
name|map
argument_list|(
name|m
lambda|->
name|responseBuilder
operator|.
name|setNextMarker
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

