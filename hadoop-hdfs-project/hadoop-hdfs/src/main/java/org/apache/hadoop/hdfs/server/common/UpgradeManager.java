begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|UpgradeCommand
import|;
end_import

begin_comment
comment|/**  * Generic upgrade manager.  *   * {@link #broadcastCommand} is the command that should be   *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|UpgradeManager
specifier|public
specifier|abstract
class|class
name|UpgradeManager
block|{
DECL|field|currentUpgrades
specifier|protected
name|SortedSet
argument_list|<
name|Upgradeable
argument_list|>
name|currentUpgrades
init|=
literal|null
decl_stmt|;
DECL|field|upgradeState
specifier|protected
name|boolean
name|upgradeState
init|=
literal|false
decl_stmt|;
comment|// true if upgrade is in progress
DECL|field|upgradeVersion
specifier|protected
name|int
name|upgradeVersion
init|=
literal|0
decl_stmt|;
DECL|field|broadcastCommand
specifier|protected
name|UpgradeCommand
name|broadcastCommand
init|=
literal|null
decl_stmt|;
DECL|method|getBroadcastCommand ()
specifier|public
specifier|synchronized
name|UpgradeCommand
name|getBroadcastCommand
parameter_list|()
block|{
return|return
name|this
operator|.
name|broadcastCommand
return|;
block|}
DECL|method|getUpgradeState ()
specifier|public
specifier|synchronized
name|boolean
name|getUpgradeState
parameter_list|()
block|{
return|return
name|this
operator|.
name|upgradeState
return|;
block|}
DECL|method|getUpgradeVersion ()
specifier|public
specifier|synchronized
name|int
name|getUpgradeVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|upgradeVersion
return|;
block|}
DECL|method|setUpgradeState (boolean uState, int uVersion)
specifier|public
specifier|synchronized
name|void
name|setUpgradeState
parameter_list|(
name|boolean
name|uState
parameter_list|,
name|int
name|uVersion
parameter_list|)
block|{
name|this
operator|.
name|upgradeState
operator|=
name|uState
expr_stmt|;
name|this
operator|.
name|upgradeVersion
operator|=
name|uVersion
expr_stmt|;
block|}
DECL|method|getDistributedUpgrades ()
specifier|public
name|SortedSet
argument_list|<
name|Upgradeable
argument_list|>
name|getDistributedUpgrades
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UpgradeObjectCollection
operator|.
name|getDistributedUpgrades
argument_list|(
name|getUpgradeVersion
argument_list|()
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getUpgradeStatus ()
specifier|public
specifier|synchronized
name|short
name|getUpgradeStatus
parameter_list|()
block|{
if|if
condition|(
name|currentUpgrades
operator|==
literal|null
condition|)
return|return
literal|100
return|;
return|return
name|currentUpgrades
operator|.
name|first
argument_list|()
operator|.
name|getUpgradeStatus
argument_list|()
return|;
block|}
DECL|method|initializeUpgrade ()
specifier|public
specifier|synchronized
name|boolean
name|initializeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|currentUpgrades
operator|=
name|getDistributedUpgrades
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentUpgrades
operator|==
literal|null
condition|)
block|{
comment|// set new upgrade state
name|setUpgradeState
argument_list|(
literal|false
argument_list|,
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Upgradeable
name|curUO
init|=
name|currentUpgrades
operator|.
name|first
argument_list|()
decl_stmt|;
comment|// set and write new upgrade state into disk
name|setUpgradeState
argument_list|(
literal|true
argument_list|,
name|curUO
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|isUpgradeCompleted ()
specifier|public
specifier|synchronized
name|boolean
name|isUpgradeCompleted
parameter_list|()
block|{
if|if
condition|(
name|currentUpgrades
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getType ()
specifier|public
specifier|abstract
name|HdfsServerConstants
operator|.
name|NodeType
name|getType
parameter_list|()
function_decl|;
DECL|method|startUpgrade ()
specifier|public
specifier|abstract
name|boolean
name|startUpgrade
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|completeUpgrade ()
specifier|public
specifier|abstract
name|void
name|completeUpgrade
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

