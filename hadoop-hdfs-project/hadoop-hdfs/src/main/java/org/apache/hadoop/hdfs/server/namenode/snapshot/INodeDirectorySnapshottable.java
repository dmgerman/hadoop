begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectoryWithQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * Directories where taking snapshots is allowed.  *   * Like other {@link INode} subclasses, this class is synchronized externally  * by the namesystem and FSDirectory locks.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|INodeDirectorySnapshottable
specifier|public
class|class
name|INodeDirectorySnapshottable
extends|extends
name|INodeDirectoryWithQuota
block|{
DECL|method|newInstance ( final INodeDirectory dir, final int snapshotQuota)
specifier|static
specifier|public
name|INodeDirectorySnapshottable
name|newInstance
parameter_list|(
specifier|final
name|INodeDirectory
name|dir
parameter_list|,
specifier|final
name|int
name|snapshotQuota
parameter_list|)
block|{
name|long
name|nsq
init|=
operator|-
literal|1L
decl_stmt|;
name|long
name|dsq
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|dir
operator|instanceof
name|INodeDirectoryWithQuota
condition|)
block|{
specifier|final
name|INodeDirectoryWithQuota
name|q
init|=
operator|(
name|INodeDirectoryWithQuota
operator|)
name|dir
decl_stmt|;
name|nsq
operator|=
name|q
operator|.
name|getNsQuota
argument_list|()
expr_stmt|;
name|dsq
operator|=
name|q
operator|.
name|getDsQuota
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|INodeDirectorySnapshottable
argument_list|(
name|nsq
argument_list|,
name|dsq
argument_list|,
name|dir
argument_list|,
name|snapshotQuota
argument_list|)
return|;
block|}
comment|/** Cast INode to INodeDirectorySnapshottable. */
DECL|method|valueOf ( INode inode, String src)
specifier|static
specifier|public
name|INodeDirectorySnapshottable
name|valueOf
parameter_list|(
name|INode
name|inode
parameter_list|,
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|INodeDirectory
name|dir
init|=
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|inode
argument_list|,
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isSnapshottable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|src
argument_list|)
throw|;
block|}
return|return
operator|(
name|INodeDirectorySnapshottable
operator|)
name|dir
return|;
block|}
comment|/** Snapshots of this directory in ascending order of snapshot id. */
DECL|field|snapshots
specifier|private
specifier|final
name|List
argument_list|<
name|Snapshot
argument_list|>
name|snapshots
init|=
operator|new
name|ArrayList
argument_list|<
name|Snapshot
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Number of snapshots allowed. */
DECL|field|snapshotQuota
specifier|private
name|int
name|snapshotQuota
decl_stmt|;
DECL|method|INodeDirectorySnapshottable (long nsQuota, long dsQuota, INodeDirectory dir, final int snapshotQuota)
specifier|private
name|INodeDirectorySnapshottable
parameter_list|(
name|long
name|nsQuota
parameter_list|,
name|long
name|dsQuota
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|,
specifier|final
name|int
name|snapshotQuota
parameter_list|)
block|{
name|super
argument_list|(
name|nsQuota
argument_list|,
name|dsQuota
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|setSnapshotQuota
argument_list|(
name|snapshotQuota
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumSnapshots ()
specifier|public
name|int
name|getNumSnapshots
parameter_list|()
block|{
return|return
name|snapshots
operator|.
name|size
argument_list|()
return|;
block|}
comment|/** @return the root directory of a snapshot. */
DECL|method|getSnapshotRoot (byte[] snapshotName)
specifier|public
name|INodeDirectory
name|getSnapshotRoot
parameter_list|(
name|byte
index|[]
name|snapshotName
parameter_list|)
block|{
if|if
condition|(
name|snapshots
operator|==
literal|null
operator|||
name|snapshots
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|low
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|snapshots
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
if|if
condition|(
name|low
operator|>=
literal|0
condition|)
block|{
return|return
name|snapshots
operator|.
name|get
argument_list|(
name|low
argument_list|)
operator|.
name|getRoot
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getSnapshotQuota ()
specifier|public
name|int
name|getSnapshotQuota
parameter_list|()
block|{
return|return
name|snapshotQuota
return|;
block|}
DECL|method|setSnapshotQuota (int snapshotQuota)
specifier|public
name|void
name|setSnapshotQuota
parameter_list|(
name|int
name|snapshotQuota
parameter_list|)
block|{
if|if
condition|(
name|snapshotQuota
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Cannot set snapshot quota to "
operator|+
name|snapshotQuota
operator|+
literal|"< 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|snapshotQuota
operator|=
name|snapshotQuota
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isSnapshottable ()
specifier|public
name|boolean
name|isSnapshottable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/** Add a snapshot root under this directory. */
DECL|method|addSnapshot (final Snapshot s)
name|void
name|addSnapshot
parameter_list|(
specifier|final
name|Snapshot
name|s
parameter_list|)
throws|throws
name|SnapshotException
block|{
comment|//check snapshot quota
if|if
condition|(
name|snapshots
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|>
name|snapshotQuota
condition|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
literal|"Failed to add snapshot: there are already "
operator|+
name|snapshots
operator|.
name|size
argument_list|()
operator|+
literal|" snapshot(s) and the snapshot quota is "
operator|+
name|snapshotQuota
argument_list|)
throw|;
block|}
name|snapshots
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
comment|//set modification time
specifier|final
name|long
name|timestamp
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|s
operator|.
name|getRoot
argument_list|()
operator|.
name|setModificationTime
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|setModificationTime
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dumpTreeRecursively (PrintWriter out, StringBuilder prefix)
specifier|public
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuilder
name|prefix
parameter_list|)
block|{
name|super
operator|.
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|snapshots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|snapshots
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|?
literal|" snapshot of "
else|:
literal|" snapshots of "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
operator|new
name|Iterable
argument_list|<
name|INodeDirectoryWithSnapshot
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|INodeDirectoryWithSnapshot
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|INodeDirectoryWithSnapshot
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Snapshot
argument_list|>
name|i
init|=
name|snapshots
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|INodeDirectoryWithSnapshot
name|next
parameter_list|()
block|{
return|return
name|i
operator|.
name|next
argument_list|()
operator|.
name|getRoot
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

