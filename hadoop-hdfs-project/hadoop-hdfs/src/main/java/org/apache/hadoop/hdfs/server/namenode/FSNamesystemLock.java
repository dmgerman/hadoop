begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Mimics a ReentrantReadWriteLock so more sophisticated locking capabilities  * are possible.  */
end_comment

begin_class
DECL|class|FSNamesystemLock
class|class
name|FSNamesystemLock
implements|implements
name|ReadWriteLock
block|{
annotation|@
name|VisibleForTesting
DECL|field|coarseLock
specifier|protected
name|ReentrantReadWriteLock
name|coarseLock
decl_stmt|;
DECL|method|FSNamesystemLock (boolean fair)
name|FSNamesystemLock
parameter_list|(
name|boolean
name|fair
parameter_list|)
block|{
name|this
operator|.
name|coarseLock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
name|fair
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readLock ()
specifier|public
name|Lock
name|readLock
parameter_list|()
block|{
return|return
name|coarseLock
operator|.
name|readLock
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeLock ()
specifier|public
name|Lock
name|writeLock
parameter_list|()
block|{
return|return
name|coarseLock
operator|.
name|writeLock
argument_list|()
return|;
block|}
DECL|method|getReadHoldCount ()
specifier|public
name|int
name|getReadHoldCount
parameter_list|()
block|{
return|return
name|coarseLock
operator|.
name|getReadHoldCount
argument_list|()
return|;
block|}
DECL|method|getWriteHoldCount ()
specifier|public
name|int
name|getWriteHoldCount
parameter_list|()
block|{
return|return
name|coarseLock
operator|.
name|getWriteHoldCount
argument_list|()
return|;
block|}
DECL|method|isWriteLockedByCurrentThread ()
specifier|public
name|boolean
name|isWriteLockedByCurrentThread
parameter_list|()
block|{
return|return
name|coarseLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
return|;
block|}
block|}
end_class

end_unit

