begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRatesWithAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_LOCK_SUPPRESS_WARNING_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_LOCK_SUPPRESS_WARNING_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LOCK_DETAILED_METRICS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LOCK_DETAILED_METRICS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_READ_LOCK_REPORTING_THRESHOLD_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_READ_LOCK_REPORTING_THRESHOLD_MS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_WRITE_LOCK_REPORTING_THRESHOLD_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_WRITE_LOCK_REPORTING_THRESHOLD_MS_KEY
import|;
end_import

begin_comment
comment|/**  * Mimics a ReentrantReadWriteLock but does not directly implement the interface  * so more sophisticated locking capabilities and logging/metrics are possible.  * {@link org.apache.hadoop.hdfs.DFSConfigKeys#DFS_NAMENODE_LOCK_DETAILED_METRICS_KEY}  * to be true, metrics will be emitted into the FSNamesystem metrics registry  * for each operation which acquires this lock indicating how long the operation  * held the lock for. Note that if a thread dies, metrics produced after the  * most recent snapshot will be lost due to the use of  * {@link MutableRatesWithAggregation}. However since threads are re-used  * between operations this should not generally be an issue.  */
end_comment

begin_class
DECL|class|FSNamesystemLock
class|class
name|FSNamesystemLock
block|{
annotation|@
name|VisibleForTesting
DECL|field|coarseLock
specifier|protected
name|ReentrantReadWriteLock
name|coarseLock
decl_stmt|;
DECL|field|metricsEnabled
specifier|private
specifier|final
name|boolean
name|metricsEnabled
decl_stmt|;
DECL|field|detailedHoldTimeMetrics
specifier|private
specifier|final
name|MutableRatesWithAggregation
name|detailedHoldTimeMetrics
decl_stmt|;
DECL|field|timer
specifier|private
specifier|final
name|Timer
name|timer
decl_stmt|;
comment|/**    * Log statements about long lock hold times will not be produced more    * frequently than this interval.    */
DECL|field|lockSuppressWarningInterval
specifier|private
specifier|final
name|long
name|lockSuppressWarningInterval
decl_stmt|;
comment|/** Threshold (ms) for long holding write lock report. */
DECL|field|writeLockReportingThreshold
specifier|private
specifier|final
name|long
name|writeLockReportingThreshold
decl_stmt|;
comment|/** Last time stamp for write lock. Keep the longest one for multi-entrance.*/
DECL|field|writeLockHeldTimeStamp
specifier|private
name|long
name|writeLockHeldTimeStamp
decl_stmt|;
DECL|field|numWriteLockWarningsSuppressed
specifier|private
name|int
name|numWriteLockWarningsSuppressed
init|=
literal|0
decl_stmt|;
DECL|field|timeStampOfLastWriteLockReport
specifier|private
name|long
name|timeStampOfLastWriteLockReport
init|=
literal|0
decl_stmt|;
DECL|field|longestWriteLockHeldInterval
specifier|private
name|long
name|longestWriteLockHeldInterval
init|=
literal|0
decl_stmt|;
comment|/** Threshold (ms) for long holding read lock report. */
DECL|field|readLockReportingThreshold
specifier|private
specifier|final
name|long
name|readLockReportingThreshold
decl_stmt|;
comment|/**    * Last time stamp for read lock. Keep the longest one for    * multi-entrance. This is ThreadLocal since there could be    * many read locks held simultaneously.    */
DECL|field|readLockHeldTimeStamp
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Long
argument_list|>
name|readLockHeldTimeStamp
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|initialValue
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
block|}
decl_stmt|;
DECL|field|numReadLockWarningsSuppressed
specifier|private
specifier|final
name|AtomicInteger
name|numReadLockWarningsSuppressed
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|timeStampOfLastReadLockReport
specifier|private
specifier|final
name|AtomicLong
name|timeStampOfLastReadLockReport
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|longestReadLockHeldInterval
specifier|private
specifier|final
name|AtomicLong
name|longestReadLockHeldInterval
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|OP_NAME_OTHER
specifier|static
specifier|final
name|String
name|OP_NAME_OTHER
init|=
literal|"OTHER"
decl_stmt|;
DECL|field|READ_LOCK_METRIC_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|READ_LOCK_METRIC_PREFIX
init|=
literal|"FSNReadLock"
decl_stmt|;
DECL|field|WRITE_LOCK_METRIC_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|WRITE_LOCK_METRIC_PREFIX
init|=
literal|"FSNWriteLock"
decl_stmt|;
DECL|method|FSNamesystemLock (Configuration conf, MutableRatesWithAggregation detailedHoldTimeMetrics)
name|FSNamesystemLock
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MutableRatesWithAggregation
name|detailedHoldTimeMetrics
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|detailedHoldTimeMetrics
argument_list|,
operator|new
name|Timer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|FSNamesystemLock (Configuration conf, MutableRatesWithAggregation detailedHoldTimeMetrics, Timer timer)
name|FSNamesystemLock
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MutableRatesWithAggregation
name|detailedHoldTimeMetrics
parameter_list|,
name|Timer
name|timer
parameter_list|)
block|{
name|boolean
name|fair
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"dfs.namenode.fslock.fair"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSNamesystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"fsLock is fair: "
operator|+
name|fair
argument_list|)
expr_stmt|;
name|this
operator|.
name|coarseLock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
name|fair
argument_list|)
expr_stmt|;
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
name|this
operator|.
name|writeLockReportingThreshold
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_WRITE_LOCK_REPORTING_THRESHOLD_MS_KEY
argument_list|,
name|DFS_NAMENODE_WRITE_LOCK_REPORTING_THRESHOLD_MS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|readLockReportingThreshold
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_READ_LOCK_REPORTING_THRESHOLD_MS_KEY
argument_list|,
name|DFS_NAMENODE_READ_LOCK_REPORTING_THRESHOLD_MS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockSuppressWarningInterval
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|DFS_LOCK_SUPPRESS_WARNING_INTERVAL_KEY
argument_list|,
name|DFS_LOCK_SUPPRESS_WARNING_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|metricsEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_NAMENODE_LOCK_DETAILED_METRICS_KEY
argument_list|,
name|DFS_NAMENODE_LOCK_DETAILED_METRICS_DEFAULT
argument_list|)
expr_stmt|;
name|FSNamesystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Detailed lock hold time metrics enabled: "
operator|+
name|this
operator|.
name|metricsEnabled
argument_list|)
expr_stmt|;
name|this
operator|.
name|detailedHoldTimeMetrics
operator|=
name|detailedHoldTimeMetrics
expr_stmt|;
block|}
DECL|method|readLock ()
specifier|public
name|void
name|readLock
parameter_list|()
block|{
name|coarseLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|coarseLock
operator|.
name|getReadHoldCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|readLockHeldTimeStamp
operator|.
name|set
argument_list|(
name|timer
operator|.
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readUnlock ()
specifier|public
name|void
name|readUnlock
parameter_list|()
block|{
name|readUnlock
argument_list|(
name|OP_NAME_OTHER
argument_list|)
expr_stmt|;
block|}
DECL|method|readUnlock (String opName)
specifier|public
name|void
name|readUnlock
parameter_list|(
name|String
name|opName
parameter_list|)
block|{
specifier|final
name|boolean
name|needReport
init|=
name|coarseLock
operator|.
name|getReadHoldCount
argument_list|()
operator|==
literal|1
decl_stmt|;
specifier|final
name|long
name|readLockInterval
init|=
name|timer
operator|.
name|monotonicNow
argument_list|()
operator|-
name|readLockHeldTimeStamp
operator|.
name|get
argument_list|()
decl_stmt|;
name|coarseLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|needReport
condition|)
block|{
name|addMetric
argument_list|(
name|opName
argument_list|,
name|readLockInterval
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|readLockHeldTimeStamp
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|needReport
operator|&&
name|readLockInterval
operator|>=
name|this
operator|.
name|readLockReportingThreshold
condition|)
block|{
name|long
name|localLongestReadLock
decl_stmt|;
do|do
block|{
name|localLongestReadLock
operator|=
name|longestReadLockHeldInterval
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|localLongestReadLock
operator|-
name|readLockInterval
operator|<
literal|0
operator|&&
operator|!
name|longestReadLockHeldInterval
operator|.
name|compareAndSet
argument_list|(
name|localLongestReadLock
argument_list|,
name|readLockInterval
argument_list|)
condition|)
do|;
name|long
name|localTimeStampOfLastReadLockReport
decl_stmt|;
name|long
name|now
decl_stmt|;
do|do
block|{
name|now
operator|=
name|timer
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|localTimeStampOfLastReadLockReport
operator|=
name|timeStampOfLastReadLockReport
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|now
operator|-
name|localTimeStampOfLastReadLockReport
operator|<
name|lockSuppressWarningInterval
condition|)
block|{
name|numReadLockWarningsSuppressed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
do|while
condition|(
operator|!
name|timeStampOfLastReadLockReport
operator|.
name|compareAndSet
argument_list|(
name|localTimeStampOfLastReadLockReport
argument_list|,
name|now
argument_list|)
condition|)
do|;
name|int
name|numSuppressedWarnings
init|=
name|numReadLockWarningsSuppressed
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|longestLockHeldInterval
init|=
name|longestReadLockHeldInterval
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FSNamesystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"FSNamesystem read lock held for "
operator|+
name|readLockInterval
operator|+
literal|" ms via\n"
operator|+
name|StringUtils
operator|.
name|getStackTrace
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
operator|+
literal|"\tNumber of suppressed read-lock reports: "
operator|+
name|numSuppressedWarnings
operator|+
literal|"\n\tLongest read-lock held interval: "
operator|+
name|longestLockHeldInterval
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeLock ()
specifier|public
name|void
name|writeLock
parameter_list|()
block|{
name|coarseLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|coarseLock
operator|.
name|getWriteHoldCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|writeLockHeldTimeStamp
operator|=
name|timer
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeLockInterruptibly ()
specifier|public
name|void
name|writeLockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|coarseLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
if|if
condition|(
name|coarseLock
operator|.
name|getWriteHoldCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|writeLockHeldTimeStamp
operator|=
name|timer
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeUnlock ()
specifier|public
name|void
name|writeUnlock
parameter_list|()
block|{
name|writeUnlock
argument_list|(
name|OP_NAME_OTHER
argument_list|)
expr_stmt|;
block|}
DECL|method|writeUnlock (String opName)
specifier|public
name|void
name|writeUnlock
parameter_list|(
name|String
name|opName
parameter_list|)
block|{
specifier|final
name|boolean
name|needReport
init|=
name|coarseLock
operator|.
name|getWriteHoldCount
argument_list|()
operator|==
literal|1
operator|&&
name|coarseLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
decl_stmt|;
specifier|final
name|long
name|currentTime
init|=
name|timer
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
specifier|final
name|long
name|writeLockInterval
init|=
name|currentTime
operator|-
name|writeLockHeldTimeStamp
decl_stmt|;
name|boolean
name|logReport
init|=
literal|false
decl_stmt|;
name|int
name|numSuppressedWarnings
init|=
literal|0
decl_stmt|;
name|long
name|longestLockHeldInterval
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|needReport
operator|&&
name|writeLockInterval
operator|>=
name|this
operator|.
name|writeLockReportingThreshold
condition|)
block|{
if|if
condition|(
name|writeLockInterval
operator|>
name|longestWriteLockHeldInterval
condition|)
block|{
name|longestWriteLockHeldInterval
operator|=
name|writeLockInterval
expr_stmt|;
block|}
if|if
condition|(
name|currentTime
operator|-
name|timeStampOfLastWriteLockReport
operator|>
name|this
operator|.
name|lockSuppressWarningInterval
condition|)
block|{
name|logReport
operator|=
literal|true
expr_stmt|;
name|numSuppressedWarnings
operator|=
name|numWriteLockWarningsSuppressed
expr_stmt|;
name|numWriteLockWarningsSuppressed
operator|=
literal|0
expr_stmt|;
name|longestLockHeldInterval
operator|=
name|longestWriteLockHeldInterval
expr_stmt|;
name|longestWriteLockHeldInterval
operator|=
literal|0
expr_stmt|;
name|timeStampOfLastWriteLockReport
operator|=
name|currentTime
expr_stmt|;
block|}
else|else
block|{
name|numWriteLockWarningsSuppressed
operator|++
expr_stmt|;
block|}
block|}
name|coarseLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|needReport
condition|)
block|{
name|addMetric
argument_list|(
name|opName
argument_list|,
name|writeLockInterval
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logReport
condition|)
block|{
name|FSNamesystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"FSNamesystem write lock held for "
operator|+
name|writeLockInterval
operator|+
literal|" ms via\n"
operator|+
name|StringUtils
operator|.
name|getStackTrace
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
operator|+
literal|"\tNumber of suppressed write-lock reports: "
operator|+
name|numSuppressedWarnings
operator|+
literal|"\n\tLongest write-lock held interval: "
operator|+
name|longestLockHeldInterval
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getReadHoldCount ()
specifier|public
name|int
name|getReadHoldCount
parameter_list|()
block|{
return|return
name|coarseLock
operator|.
name|getReadHoldCount
argument_list|()
return|;
block|}
DECL|method|getWriteHoldCount ()
specifier|public
name|int
name|getWriteHoldCount
parameter_list|()
block|{
return|return
name|coarseLock
operator|.
name|getWriteHoldCount
argument_list|()
return|;
block|}
DECL|method|isWriteLockedByCurrentThread ()
specifier|public
name|boolean
name|isWriteLockedByCurrentThread
parameter_list|()
block|{
return|return
name|coarseLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
return|;
block|}
DECL|method|newWriteLockCondition ()
specifier|public
name|Condition
name|newWriteLockCondition
parameter_list|()
block|{
return|return
name|coarseLock
operator|.
name|writeLock
argument_list|()
operator|.
name|newCondition
argument_list|()
return|;
block|}
comment|/**    * Returns the QueueLength of waiting threads.    *    * A larger number indicates greater lock contention.    *    * @return int - Number of threads waiting on this lock    */
DECL|method|getQueueLength ()
specifier|public
name|int
name|getQueueLength
parameter_list|()
block|{
return|return
name|coarseLock
operator|.
name|getQueueLength
argument_list|()
return|;
block|}
comment|/**    * Add the lock hold time for a recent operation to the metrics.    * @param operationName Name of the operation for which to record the time    * @param value Length of time the lock was held    */
DECL|method|addMetric (String operationName, long value, boolean isWrite)
specifier|private
name|void
name|addMetric
parameter_list|(
name|String
name|operationName
parameter_list|,
name|long
name|value
parameter_list|,
name|boolean
name|isWrite
parameter_list|)
block|{
if|if
condition|(
name|metricsEnabled
condition|)
block|{
name|String
name|metricName
init|=
operator|(
name|isWrite
condition|?
name|WRITE_LOCK_METRIC_PREFIX
else|:
name|READ_LOCK_METRIC_PREFIX
operator|)
operator|+
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|operationName
argument_list|)
decl_stmt|;
name|detailedHoldTimeMetrics
operator|.
name|add
argument_list|(
name|metricName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

