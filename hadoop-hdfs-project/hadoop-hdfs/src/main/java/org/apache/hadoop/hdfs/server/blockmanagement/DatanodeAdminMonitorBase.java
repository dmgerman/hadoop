begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Namesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_comment
comment|/**  * This abstract class provides some base methods which are inherited by  * the DatanodeAdmin BackOff and Default Monitors, which control decommission  * and maintenance mode.  */
end_comment

begin_class
DECL|class|DatanodeAdminMonitorBase
specifier|public
specifier|abstract
class|class
name|DatanodeAdminMonitorBase
implements|implements
name|DatanodeAdminMonitorInterface
implements|,
name|Configurable
block|{
DECL|field|blockManager
specifier|protected
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|namesystem
specifier|protected
name|Namesystem
name|namesystem
decl_stmt|;
DECL|field|dnAdmin
specifier|protected
name|DatanodeAdminManager
name|dnAdmin
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|pendingNodes
specifier|protected
specifier|final
name|Queue
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pendingNodes
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * The maximum number of nodes to track in outOfServiceNodeBlocks.    * A value of 0 means no limit.    */
DECL|field|maxConcurrentTrackedNodes
specifier|protected
name|int
name|maxConcurrentTrackedNodes
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DatanodeAdminMonitorBase
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Set the cluster namesystem.    *    * @param ns The namesystem for the cluster    */
annotation|@
name|Override
DECL|method|setNameSystem (Namesystem ns)
specifier|public
name|void
name|setNameSystem
parameter_list|(
name|Namesystem
name|ns
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|ns
expr_stmt|;
block|}
comment|/**    * Set the blockmanager for the cluster.    *    * @param bm The cluster BlockManager    */
annotation|@
name|Override
DECL|method|setBlockManager (BlockManager bm)
specifier|public
name|void
name|setBlockManager
parameter_list|(
name|BlockManager
name|bm
parameter_list|)
block|{
name|this
operator|.
name|blockManager
operator|=
name|bm
expr_stmt|;
block|}
comment|/**    * Set the DatanodeAdminManager instance in use in the namenode.    *    * @param admin The current DatanodeAdminManager    */
annotation|@
name|Override
DECL|method|setDatanodeAdminManager (DatanodeAdminManager admin)
specifier|public
name|void
name|setDatanodeAdminManager
parameter_list|(
name|DatanodeAdminManager
name|admin
parameter_list|)
block|{
name|this
operator|.
name|dnAdmin
operator|=
name|admin
expr_stmt|;
block|}
comment|/**    * Used by the Configurable interface, which is used by ReflectionUtils    * to create an instance of the monitor class. This method will be called to    * pass the Configuration to the new object.    *    * @param conf configuration to be used    */
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|maxConcurrentTrackedNodes
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|maxConcurrentTrackedNodes
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"{} is set to an invalid value, it must be zero or greater. "
operator|+
literal|"Defaulting to {}"
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxConcurrentTrackedNodes
operator|=
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT
expr_stmt|;
block|}
name|processConf
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the current Configuration stored in this object.    *    * @return Configuration used when the object was created    */
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/**    * Abstract method which must be implemented by the sub-classes to process    * set various instance variables from the Configuration passed at object    * creation time.    */
DECL|method|processConf ()
specifier|protected
specifier|abstract
name|void
name|processConf
parameter_list|()
function_decl|;
comment|/**    * Start tracking a node for decommission or maintenance. The given Datanode    * will be queued for later processing in pendingNodes. This method must be    * called under the namenode write lock.    * @param dn The datanode to start tracking    */
annotation|@
name|Override
DECL|method|startTrackingNode (DatanodeDescriptor dn)
specifier|public
name|void
name|startTrackingNode
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|pendingNodes
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of datanodes nodes in the pending queue. Ie the count of    * nodes waiting to decommission but have not yet started the process.    *    * @return The count of pending nodes    */
annotation|@
name|Override
DECL|method|getPendingNodeCount ()
specifier|public
name|int
name|getPendingNodeCount
parameter_list|()
block|{
return|return
name|pendingNodes
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPendingNodes ()
specifier|public
name|Queue
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|getPendingNodes
parameter_list|()
block|{
return|return
name|pendingNodes
return|;
block|}
block|}
end_class

end_unit

