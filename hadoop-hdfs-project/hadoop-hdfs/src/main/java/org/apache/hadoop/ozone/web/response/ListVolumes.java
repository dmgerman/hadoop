begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.response
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|JsonUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonAutoDetect
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|PropertyAccessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ser
operator|.
name|FilterProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ser
operator|.
name|impl
operator|.
name|SimpleBeanPropertyFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ser
operator|.
name|impl
operator|.
name|SimpleFilterProvider
import|;
end_import

begin_comment
comment|/**  * List Volume Class is the class that is returned in JSON format to  * users when they call ListVolumes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ListVolumes
specifier|public
class|class
name|ListVolumes
block|{
DECL|field|volumes
specifier|private
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumes
decl_stmt|;
DECL|field|VOLUME_LIST
specifier|static
specifier|final
name|String
name|VOLUME_LIST
init|=
literal|"VOLUME_LIST_FILTER"
decl_stmt|;
DECL|field|READER
specifier|private
specifier|static
specifier|final
name|ObjectReader
name|READER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readerFor
argument_list|(
name|ListVolumes
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|WRITER
specifier|private
specifier|static
specifier|final
name|ObjectWriter
name|WRITER
decl_stmt|;
static|static
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|String
index|[]
name|ignorableFieldNames
init|=
block|{
literal|"bytesUsed"
block|,
literal|"bucketCount"
block|}
decl_stmt|;
name|FilterProvider
name|filters
init|=
operator|new
name|SimpleFilterProvider
argument_list|()
operator|.
name|addFilter
argument_list|(
name|VOLUME_LIST
argument_list|,
name|SimpleBeanPropertyFilter
operator|.
name|serializeAllExcept
argument_list|(
name|ignorableFieldNames
argument_list|)
argument_list|)
decl_stmt|;
name|mapper
operator|.
name|setVisibility
argument_list|(
name|PropertyAccessor
operator|.
name|FIELD
argument_list|,
name|JsonAutoDetect
operator|.
name|Visibility
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|addMixIn
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|MixIn
operator|.
name|class
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setFilterProvider
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|WRITER
operator|=
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
expr_stmt|;
block|}
comment|/**    * Used for json filtering.    */
annotation|@
name|JsonFilter
argument_list|(
name|VOLUME_LIST
argument_list|)
DECL|class|MixIn
class|class
name|MixIn
block|{   }
comment|/**    * Constructs ListVolume objects.    */
DECL|method|ListVolumes ()
specifier|public
name|ListVolumes
parameter_list|()
block|{
name|this
operator|.
name|volumes
operator|=
operator|new
name|LinkedList
argument_list|<
name|VolumeInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets the list of volumes.    *    * @return List of VolumeInfo Objects    */
DECL|method|getVolumes ()
specifier|public
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|getVolumes
parameter_list|()
block|{
return|return
name|volumes
return|;
block|}
comment|/**    * Sets volume info.    *    * @param volumes - List of Volumes    */
DECL|method|setVolumes (List<VolumeInfo> volumes)
specifier|public
name|void
name|setVolumes
parameter_list|(
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumes
parameter_list|)
block|{
name|this
operator|.
name|volumes
operator|=
name|volumes
expr_stmt|;
block|}
comment|/**    * Returns a JSON string of this object.    * After stripping out bytesUsed and bucketCount    *    * @return String    */
DECL|method|toJsonString ()
specifier|public
name|String
name|toJsonString
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|WRITER
operator|.
name|writeValueAsString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * When we serialize a volumeInfo to our database    * we will use all fields. However the toJsonString    * will strip out bytesUsed and bucketCount from the    * volume Info    *    * @return Json String    *    * @throws IOException    */
DECL|method|toDBString ()
specifier|public
name|String
name|toDBString
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|JsonUtils
operator|.
name|toJsonString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Parses a String to return ListVolumes object.    *    * @param data - Json String    *    * @return - ListVolumes    *    * @throws IOException    */
DECL|method|parse (String data)
specifier|public
specifier|static
name|ListVolumes
name|parse
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|READER
operator|.
name|readValue
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**    * Adds a new volume info to the List.    *    * @param info - VolumeInfo    */
DECL|method|addVolume (VolumeInfo info)
specifier|public
name|void
name|addVolume
parameter_list|(
name|VolumeInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|volumes
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the volume names based on volume name.    * This is useful when we return the list of volume names    */
DECL|method|sort ()
specifier|public
name|void
name|sort
parameter_list|()
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|volumes
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

