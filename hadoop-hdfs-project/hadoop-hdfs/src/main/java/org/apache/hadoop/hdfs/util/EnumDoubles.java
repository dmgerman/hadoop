begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Similar to {@link EnumCounters} except that the value type is double.  *  * @param<E> the enum type  */
end_comment

begin_class
DECL|class|EnumDoubles
specifier|public
class|class
name|EnumDoubles
parameter_list|<
name|E
extends|extends
name|Enum
parameter_list|<
name|E
parameter_list|>
parameter_list|>
block|{
comment|/** The class of the enum. */
DECL|field|enumClass
specifier|private
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|enumClass
decl_stmt|;
comment|/** An array of doubles corresponding to the enum type. */
DECL|field|doubles
specifier|private
specifier|final
name|double
index|[]
name|doubles
decl_stmt|;
comment|/**    * Construct doubles for the given enum constants.    * @param enumClass the enum class.    */
DECL|method|EnumDoubles (final Class<E> enumClass)
specifier|public
name|EnumDoubles
parameter_list|(
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|enumClass
parameter_list|)
block|{
specifier|final
name|E
index|[]
name|enumConstants
init|=
name|enumClass
operator|.
name|getEnumConstants
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|enumConstants
argument_list|)
expr_stmt|;
name|this
operator|.
name|enumClass
operator|=
name|enumClass
expr_stmt|;
name|this
operator|.
name|doubles
operator|=
operator|new
name|double
index|[
name|enumConstants
operator|.
name|length
index|]
expr_stmt|;
block|}
comment|/** @return the value corresponding to e. */
DECL|method|get (final E e)
specifier|public
specifier|final
name|double
name|get
parameter_list|(
specifier|final
name|E
name|e
parameter_list|)
block|{
return|return
name|doubles
index|[
name|e
operator|.
name|ordinal
argument_list|()
index|]
return|;
block|}
comment|/** Negate all values. */
DECL|method|negation ()
specifier|public
specifier|final
name|void
name|negation
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doubles
index|[
name|i
index|]
operator|=
operator|-
name|doubles
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|/** Set e to the given value. */
DECL|method|set (final E e, final double value)
specifier|public
specifier|final
name|void
name|set
parameter_list|(
specifier|final
name|E
name|e
parameter_list|,
specifier|final
name|double
name|value
parameter_list|)
block|{
name|doubles
index|[
name|e
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|value
expr_stmt|;
block|}
comment|/** Set the values of this object to that object. */
DECL|method|set (final EnumDoubles<E> that)
specifier|public
specifier|final
name|void
name|set
parameter_list|(
specifier|final
name|EnumDoubles
argument_list|<
name|E
argument_list|>
name|that
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|doubles
index|[
name|i
index|]
operator|=
name|that
operator|.
name|doubles
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|/** Reset all values to zero. */
DECL|method|reset ()
specifier|public
specifier|final
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|doubles
index|[
name|i
index|]
operator|=
literal|0.0
expr_stmt|;
block|}
block|}
comment|/** Add the given value to e. */
DECL|method|add (final E e, final double value)
specifier|public
specifier|final
name|void
name|add
parameter_list|(
specifier|final
name|E
name|e
parameter_list|,
specifier|final
name|double
name|value
parameter_list|)
block|{
name|doubles
index|[
name|e
operator|.
name|ordinal
argument_list|()
index|]
operator|+=
name|value
expr_stmt|;
block|}
comment|/** Add the values of that object to this. */
DECL|method|add (final EnumDoubles<E> that)
specifier|public
specifier|final
name|void
name|add
parameter_list|(
specifier|final
name|EnumDoubles
argument_list|<
name|E
argument_list|>
name|that
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|doubles
index|[
name|i
index|]
operator|+=
name|that
operator|.
name|doubles
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|/** Subtract the given value from e. */
DECL|method|subtract (final E e, final double value)
specifier|public
specifier|final
name|void
name|subtract
parameter_list|(
specifier|final
name|E
name|e
parameter_list|,
specifier|final
name|double
name|value
parameter_list|)
block|{
name|doubles
index|[
name|e
operator|.
name|ordinal
argument_list|()
index|]
operator|-=
name|value
expr_stmt|;
block|}
comment|/** Subtract the values of this object from that object. */
DECL|method|subtract (final EnumDoubles<E> that)
specifier|public
specifier|final
name|void
name|subtract
parameter_list|(
specifier|final
name|EnumDoubles
argument_list|<
name|E
argument_list|>
name|that
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|doubles
index|[
name|i
index|]
operator|-=
name|that
operator|.
name|doubles
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|EnumDoubles
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|EnumDoubles
argument_list|<
name|?
argument_list|>
name|that
init|=
operator|(
name|EnumDoubles
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|enumClass
operator|==
name|that
operator|.
name|enumClass
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|doubles
argument_list|,
name|that
operator|.
name|doubles
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|doubles
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|E
index|[]
name|enumConstants
init|=
name|enumClass
operator|.
name|getEnumConstants
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|doubles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
name|enumConstants
index|[
name|i
index|]
operator|.
name|name
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|doubles
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

