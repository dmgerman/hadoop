begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.top
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class is a common place for NNTop configuration.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TopConf
specifier|public
specifier|final
class|class
name|TopConf
block|{
comment|/**    * Whether TopMetrics are enabled    */
DECL|field|isEnabled
specifier|public
specifier|final
name|boolean
name|isEnabled
decl_stmt|;
comment|/**    * A meta command representing the total number of calls to all commands    */
DECL|field|ALL_CMDS
specifier|public
specifier|static
specifier|final
name|String
name|ALL_CMDS
init|=
literal|"*"
decl_stmt|;
comment|/**    * nntop reporting periods in milliseconds    */
DECL|field|nntopReportingPeriodsMs
specifier|public
specifier|final
name|int
index|[]
name|nntopReportingPeriodsMs
decl_stmt|;
DECL|method|TopConf (Configuration conf)
specifier|public
name|TopConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|isEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_ENABLED_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|NNTOP_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|String
index|[]
name|periodsStr
init|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_WINDOWS_MINUTES_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|NNTOP_WINDOWS_MINUTES_DEFAULT
argument_list|)
decl_stmt|;
name|nntopReportingPeriodsMs
operator|=
operator|new
name|int
index|[
name|periodsStr
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|periodsStr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nntopReportingPeriodsMs
index|[
name|i
index|]
operator|=
name|Ints
operator|.
name|checkedCast
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|periodsStr
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|aPeriodMs
range|:
name|nntopReportingPeriodsMs
control|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|aPeriodMs
operator|>=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"minimum reporting period is 1 min!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

