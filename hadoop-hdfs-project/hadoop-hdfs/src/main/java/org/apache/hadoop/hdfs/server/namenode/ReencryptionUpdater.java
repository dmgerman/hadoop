begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ZoneReencryptionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ReencryptionHandler
operator|.
name|ReencryptionBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_UPDATER_RATIO_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_UPDATER_RATIO_KEY
import|;
end_import

begin_comment
comment|/**  * Class for finalizing re-encrypt EDEK operations, by updating file xattrs with  * edeks returned from reencryption.  *<p>  * The tasks are submitted by ReencryptionHandler.  *<p>  * It is assumed only 1 Updater will be running, since updating file xattrs  * requires namespace write lock, and performance gain from multi-threading  * is limited.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ReencryptionUpdater
specifier|public
specifier|final
class|class
name|ReencryptionUpdater
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReencryptionUpdater
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|shouldPauseForTesting
specifier|private
specifier|volatile
name|boolean
name|shouldPauseForTesting
init|=
literal|false
decl_stmt|;
DECL|field|pauseAfterNthCheckpoint
specifier|private
specifier|volatile
name|int
name|pauseAfterNthCheckpoint
init|=
literal|0
decl_stmt|;
DECL|field|pauseZoneId
specifier|private
specifier|volatile
name|long
name|pauseZoneId
init|=
literal|0
decl_stmt|;
DECL|field|throttleLimitRatio
specifier|private
name|double
name|throttleLimitRatio
decl_stmt|;
DECL|field|throttleTimerAll
specifier|private
specifier|final
name|StopWatch
name|throttleTimerAll
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
DECL|field|throttleTimerLocked
specifier|private
specifier|final
name|StopWatch
name|throttleTimerLocked
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
DECL|field|faultRetryInterval
specifier|private
specifier|volatile
name|long
name|faultRetryInterval
init|=
literal|60000
decl_stmt|;
DECL|field|isRunning
specifier|private
specifier|volatile
name|boolean
name|isRunning
init|=
literal|false
decl_stmt|;
comment|/**    * Class to track re-encryption submissions of a single zone. It contains    * all the submitted futures, and statistics about how far the futures are    * processed.    */
DECL|class|ZoneSubmissionTracker
specifier|static
specifier|final
class|class
name|ZoneSubmissionTracker
block|{
DECL|field|submissionDone
specifier|private
name|boolean
name|submissionDone
decl_stmt|;
DECL|field|tasks
specifier|private
name|LinkedList
argument_list|<
name|Future
argument_list|>
name|tasks
decl_stmt|;
DECL|field|numCheckpointed
specifier|private
name|int
name|numCheckpointed
decl_stmt|;
DECL|field|numFutureDone
specifier|private
name|int
name|numFutureDone
decl_stmt|;
DECL|method|ZoneSubmissionTracker ()
name|ZoneSubmissionTracker
parameter_list|()
block|{
name|submissionDone
operator|=
literal|false
expr_stmt|;
name|tasks
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|numCheckpointed
operator|=
literal|0
expr_stmt|;
name|numFutureDone
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
name|submissionDone
operator|=
literal|false
expr_stmt|;
name|tasks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|numCheckpointed
operator|=
literal|0
expr_stmt|;
name|numFutureDone
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getTasks ()
name|LinkedList
argument_list|<
name|Future
argument_list|>
name|getTasks
parameter_list|()
block|{
return|return
name|tasks
return|;
block|}
DECL|method|cancelAllTasks ()
name|void
name|cancelAllTasks
parameter_list|()
block|{
if|if
condition|(
operator|!
name|tasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancelling {} re-encryption tasks"
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Future
name|f
range|:
name|tasks
control|)
block|{
name|f
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addTask (final Future task)
name|void
name|addTask
parameter_list|(
specifier|final
name|Future
name|task
parameter_list|)
block|{
name|tasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
DECL|method|isCompleted ()
specifier|private
name|boolean
name|isCompleted
parameter_list|()
block|{
return|return
name|submissionDone
operator|&&
name|tasks
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|setSubmissionDone ()
name|void
name|setSubmissionDone
parameter_list|()
block|{
name|submissionDone
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Class representing the task for one batch of a re-encryption command. It    * also contains statistics about how far this single batch has been executed.    */
DECL|class|ReencryptionTask
specifier|static
specifier|final
class|class
name|ReencryptionTask
block|{
DECL|field|zoneId
specifier|private
specifier|final
name|long
name|zoneId
decl_stmt|;
DECL|field|processed
specifier|private
name|boolean
name|processed
init|=
literal|false
decl_stmt|;
DECL|field|numFilesUpdated
specifier|private
name|int
name|numFilesUpdated
init|=
literal|0
decl_stmt|;
DECL|field|numFailures
specifier|private
name|int
name|numFailures
init|=
literal|0
decl_stmt|;
DECL|field|lastFile
specifier|private
name|String
name|lastFile
init|=
literal|null
decl_stmt|;
DECL|field|batch
specifier|private
specifier|final
name|ReencryptionBatch
name|batch
decl_stmt|;
DECL|method|ReencryptionTask (final long id, final int failures, final ReencryptionBatch theBatch)
name|ReencryptionTask
parameter_list|(
specifier|final
name|long
name|id
parameter_list|,
specifier|final
name|int
name|failures
parameter_list|,
specifier|final
name|ReencryptionBatch
name|theBatch
parameter_list|)
block|{
name|zoneId
operator|=
name|id
expr_stmt|;
name|numFailures
operator|=
name|failures
expr_stmt|;
name|batch
operator|=
name|theBatch
expr_stmt|;
block|}
block|}
comment|/**    * Class that encapsulates re-encryption details of a file. It contains the    * file inode, stores the initial edek of the file, and the new edek    * after re-encryption.    *<p>    * Assumptions are the object initialization happens when dir lock is held,    * and inode is valid and is encrypted during initialization.    *<p>    * Namespace changes may happen during re-encryption, and if inode is changed    * the re-encryption is skipped.    */
DECL|class|FileEdekInfo
specifier|static
specifier|final
class|class
name|FileEdekInfo
block|{
DECL|field|inodeId
specifier|private
specifier|final
name|long
name|inodeId
decl_stmt|;
DECL|field|existingEdek
specifier|private
specifier|final
name|EncryptedKeyVersion
name|existingEdek
decl_stmt|;
DECL|field|edek
specifier|private
name|EncryptedKeyVersion
name|edek
init|=
literal|null
decl_stmt|;
DECL|method|FileEdekInfo (FSDirectory dir, INodeFile inode)
name|FileEdekInfo
parameter_list|(
name|FSDirectory
name|dir
parameter_list|,
name|INodeFile
name|inode
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|dir
operator|.
name|hasReadLock
argument_list|()
assert|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|inode
argument_list|,
literal|"INodeFile is null"
argument_list|)
expr_stmt|;
name|inodeId
operator|=
name|inode
operator|.
name|getId
argument_list|()
expr_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei
init|=
name|FSDirEncryptionZoneOp
operator|.
name|getFileEncryptionInfo
argument_list|(
name|dir
argument_list|,
name|INodesInPath
operator|.
name|fromINode
argument_list|(
name|inode
argument_list|)
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fei
argument_list|,
literal|"FileEncryptionInfo is null for "
operator|+
name|inodeId
argument_list|)
expr_stmt|;
name|existingEdek
operator|=
name|EncryptedKeyVersion
operator|.
name|createForDecryption
argument_list|(
name|fei
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|fei
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|fei
operator|.
name|getIV
argument_list|()
argument_list|,
name|fei
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getInodeId ()
name|long
name|getInodeId
parameter_list|()
block|{
return|return
name|inodeId
return|;
block|}
DECL|method|getExistingEdek ()
name|EncryptedKeyVersion
name|getExistingEdek
parameter_list|()
block|{
return|return
name|existingEdek
return|;
block|}
DECL|method|setEdek (final EncryptedKeyVersion ekv)
name|void
name|setEdek
parameter_list|(
specifier|final
name|EncryptedKeyVersion
name|ekv
parameter_list|)
block|{
assert|assert
name|ekv
operator|!=
literal|null
assert|;
name|edek
operator|=
name|ekv
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|pauseForTesting ()
specifier|synchronized
name|void
name|pauseForTesting
parameter_list|()
block|{
name|shouldPauseForTesting
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Pausing re-encrypt updater for testing."
argument_list|)
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|resumeForTesting ()
specifier|synchronized
name|void
name|resumeForTesting
parameter_list|()
block|{
name|shouldPauseForTesting
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Resuming re-encrypt updater for testing."
argument_list|)
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|pauseForTestingAfterNthCheckpoint (final long zoneId, final int count)
name|void
name|pauseForTestingAfterNthCheckpoint
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
assert|assert
name|pauseAfterNthCheckpoint
operator|==
literal|0
assert|;
name|pauseAfterNthCheckpoint
operator|=
name|count
expr_stmt|;
name|pauseZoneId
operator|=
name|zoneId
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|isRunning ()
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|isRunning
return|;
block|}
DECL|field|dir
specifier|private
specifier|final
name|FSDirectory
name|dir
decl_stmt|;
DECL|field|batchService
specifier|private
specifier|final
name|CompletionService
argument_list|<
name|ReencryptionTask
argument_list|>
name|batchService
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|ReencryptionHandler
name|handler
decl_stmt|;
DECL|method|ReencryptionUpdater (final FSDirectory fsd, final CompletionService<ReencryptionTask> service, final ReencryptionHandler rh, final Configuration conf)
name|ReencryptionUpdater
parameter_list|(
specifier|final
name|FSDirectory
name|fsd
parameter_list|,
specifier|final
name|CompletionService
argument_list|<
name|ReencryptionTask
argument_list|>
name|service
parameter_list|,
specifier|final
name|ReencryptionHandler
name|rh
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|dir
operator|=
name|fsd
expr_stmt|;
name|batchService
operator|=
name|service
expr_stmt|;
name|handler
operator|=
name|rh
expr_stmt|;
name|this
operator|.
name|throttleLimitRatio
operator|=
name|conf
operator|.
name|getDouble
argument_list|(
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_UPDATER_RATIO_KEY
argument_list|,
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_UPDATER_RATIO_DEFAULT
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|throttleLimitRatio
operator|>
literal|0.0f
argument_list|,
name|DFS_NAMENODE_REENCRYPT_THROTTLE_LIMIT_UPDATER_RATIO_KEY
operator|+
literal|" is not positive."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called by the submission thread to indicate all tasks have been submitted.    * If this is called but no tasks has been submitted, the re-encryption is    * considered complete.    *    * @param zoneId Id of the zone inode.    * @throws IOException    * @throws InterruptedException    */
DECL|method|markZoneSubmissionDone (final long zoneId)
name|void
name|markZoneSubmissionDone
parameter_list|(
specifier|final
name|long
name|zoneId
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|ZoneSubmissionTracker
name|tracker
init|=
name|handler
operator|.
name|getTracker
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracker
operator|!=
literal|null
operator|&&
operator|!
name|tracker
operator|.
name|getTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tracker
operator|.
name|submissionDone
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Caller thinks submission is done, but no tasks submitted - meaning
comment|// no files in the EZ need to be re-encrypted. Complete directly.
name|handler
operator|.
name|addDummyTracker
argument_list|(
name|zoneId
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|isRunning
operator|=
literal|true
expr_stmt|;
name|throttleTimerAll
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
comment|// Assuming single-threaded updater.
name|takeAndProcessTasks
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Re-encryption updater thread interrupted. Exiting."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|isRunning
operator|=
literal|false
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|CancellationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Re-encryption updater thread exception."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Re-encryption updater thread exiting."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|isRunning
operator|=
literal|false
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|/**    * Process a completed ReencryptionTask. Each inode id is resolved to an INode    * object, skip if the inode is deleted.    *<p>    * Only file xattr is updated by this method. Re-encryption progress is not    * updated.    *    * @param zoneNodePath full path of the EZ inode.    * @param task     the completed task.    * @throws IOException    * @throws InterruptedException    */
DECL|method|processTaskEntries (final String zoneNodePath, final ReencryptionTask task)
specifier|private
name|void
name|processTaskEntries
parameter_list|(
specifier|final
name|String
name|zoneNodePath
parameter_list|,
specifier|final
name|ReencryptionTask
name|task
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
assert|assert
name|dir
operator|.
name|hasWriteLock
argument_list|()
assert|;
if|if
condition|(
operator|!
name|task
operator|.
name|batch
operator|.
name|isEmpty
argument_list|()
operator|&&
name|task
operator|.
name|numFailures
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating file xattrs for re-encrypting zone {},"
operator|+
literal|" starting at {}"
argument_list|,
name|zoneNodePath
argument_list|,
name|task
operator|.
name|batch
operator|.
name|getFirstFilePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|batchSize
init|=
name|task
operator|.
name|batch
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|FileEdekInfo
argument_list|>
name|it
init|=
name|task
operator|.
name|batch
operator|.
name|getBatch
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|FileEdekInfo
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// resolve the inode again, and skip if it's doesn't exist
name|LOG
operator|.
name|trace
argument_list|(
literal|"Updating {} for re-encryption."
argument_list|,
name|entry
operator|.
name|getInodeId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|INode
name|inode
init|=
name|dir
operator|.
name|getInode
argument_list|(
name|entry
operator|.
name|getInodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"INode {} doesn't exist, skipping re-encrypt."
argument_list|,
name|entry
operator|.
name|getInodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// also remove from batch so later it's not saved.
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// Cautiously check file encryption info, and only update if we're sure
comment|// it's still using the same edek.
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|entry
operator|.
name|edek
argument_list|)
expr_stmt|;
specifier|final
name|FileEncryptionInfo
name|fei
init|=
name|FSDirEncryptionZoneOp
operator|.
name|getFileEncryptionInfo
argument_list|(
name|dir
argument_list|,
name|INodesInPath
operator|.
name|fromINode
argument_list|(
name|inode
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fei
operator|.
name|getKeyName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|edek
operator|.
name|getEncryptionKeyName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Inode {} EZ key changed, skipping re-encryption."
argument_list|,
name|entry
operator|.
name|getInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|fei
operator|.
name|getEzKeyVersionName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|edek
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Inode {} EZ key version unchanged, skipping re-encryption."
argument_list|,
name|entry
operator|.
name|getInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|fei
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|,
name|entry
operator|.
name|existingEdek
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Inode {} existing edek changed, skipping re-encryption"
argument_list|,
name|entry
operator|.
name|getInodeId
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|FileEncryptionInfo
name|newFei
init|=
operator|new
name|FileEncryptionInfo
argument_list|(
name|fei
operator|.
name|getCipherSuite
argument_list|()
argument_list|,
name|fei
operator|.
name|getCryptoProtocolVersion
argument_list|()
argument_list|,
name|entry
operator|.
name|edek
operator|.
name|getEncryptedKeyVersion
argument_list|()
operator|.
name|getMaterial
argument_list|()
argument_list|,
name|entry
operator|.
name|edek
operator|.
name|getEncryptedKeyIv
argument_list|()
argument_list|,
name|fei
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|entry
operator|.
name|edek
operator|.
name|getEncryptionKeyVersionName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|INodesInPath
operator|.
name|fromINode
argument_list|(
name|inode
argument_list|)
decl_stmt|;
name|FSDirEncryptionZoneOp
operator|.
name|setFileEncryptionInfo
argument_list|(
name|dir
argument_list|,
name|iip
argument_list|,
name|newFei
argument_list|,
name|XAttrSetFlag
operator|.
name|REPLACE
argument_list|)
expr_stmt|;
name|task
operator|.
name|lastFile
operator|=
name|iip
operator|.
name|getPath
argument_list|()
expr_stmt|;
operator|++
name|task
operator|.
name|numFilesUpdated
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated xattrs on {}({}) files in zone {} for re-encryption,"
operator|+
literal|" starting:{}."
argument_list|,
name|task
operator|.
name|numFilesUpdated
argument_list|,
name|batchSize
argument_list|,
name|zoneNodePath
argument_list|,
name|task
operator|.
name|batch
operator|.
name|getFirstFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|task
operator|.
name|processed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Iterate tasks for the given zone, and update progress accordingly. The    * checkpoint indicates all files before it are done re-encryption, so it will    * be updated to the position where all tasks before are completed.    *    * @param zoneNode the EZ inode.    * @param tracker  the zone submission tracker.    * @return the list containing the last checkpointed xattr. Empty if    *   no checkpoint happened.    * @throws ExecutionException    * @throws IOException    * @throws InterruptedException    */
DECL|method|processCheckpoints (final INode zoneNode, final ZoneSubmissionTracker tracker)
specifier|private
name|List
argument_list|<
name|XAttr
argument_list|>
name|processCheckpoints
parameter_list|(
specifier|final
name|INode
name|zoneNode
parameter_list|,
specifier|final
name|ZoneSubmissionTracker
name|tracker
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
assert|assert
name|dir
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|long
name|zoneId
init|=
name|zoneNode
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|zonePath
init|=
name|zoneNode
operator|.
name|getFullPathName
argument_list|()
decl_stmt|;
specifier|final
name|ZoneReencryptionStatus
name|status
init|=
name|handler
operator|.
name|getReencryptionStatus
argument_list|()
operator|.
name|getZoneStatus
argument_list|(
name|zoneId
argument_list|)
decl_stmt|;
assert|assert
name|status
operator|!=
literal|null
assert|;
comment|// always start from the beginning, because the checkpoint means all files
comment|// before it are re-encrypted.
specifier|final
name|LinkedList
argument_list|<
name|Future
argument_list|>
name|tasks
init|=
name|tracker
operator|.
name|getTasks
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ListIterator
argument_list|<
name|Future
argument_list|>
name|iter
init|=
name|tasks
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Future
argument_list|<
name|ReencryptionTask
argument_list|>
name|curr
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curr
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|curr
operator|.
name|isDone
argument_list|()
operator|||
operator|!
name|curr
operator|.
name|get
argument_list|()
operator|.
name|processed
condition|)
block|{
comment|// still has earlier tasks not completed, skip here.
break|break;
block|}
name|ReencryptionTask
name|task
init|=
name|curr
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating re-encryption checkpoint with completed task."
operator|+
literal|" last: {} size:{}."
argument_list|,
name|task
operator|.
name|lastFile
argument_list|,
name|task
operator|.
name|batch
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|zoneId
operator|==
name|task
operator|.
name|zoneId
assert|;
try|try
block|{
specifier|final
name|XAttr
name|xattr
init|=
name|FSDirEncryptionZoneOp
operator|.
name|updateReencryptionProgress
argument_list|(
name|dir
argument_list|,
name|zoneNode
argument_list|,
name|status
argument_list|,
name|task
operator|.
name|lastFile
argument_list|,
name|task
operator|.
name|numFilesUpdated
argument_list|,
name|task
operator|.
name|numFailures
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|xAttrs
operator|.
name|add
argument_list|(
name|xattr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to update re-encrypted progress to xattr for zone {}"
argument_list|,
name|zonePath
argument_list|,
name|ie
argument_list|)
expr_stmt|;
operator|++
name|task
operator|.
name|numFailures
expr_stmt|;
block|}
operator|++
name|tracker
operator|.
name|numCheckpointed
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tracker
operator|.
name|isCompleted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removed re-encryption tracker for zone {} because it completed"
operator|+
literal|" with {} tasks."
argument_list|,
name|zonePath
argument_list|,
name|tracker
operator|.
name|numCheckpointed
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|completeReencryption
argument_list|(
name|zoneNode
argument_list|)
return|;
block|}
return|return
name|xAttrs
return|;
block|}
DECL|method|takeAndProcessTasks ()
specifier|private
name|void
name|takeAndProcessTasks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Future
argument_list|<
name|ReencryptionTask
argument_list|>
name|completed
init|=
name|batchService
operator|.
name|take
argument_list|()
decl_stmt|;
name|throttle
argument_list|()
expr_stmt|;
name|checkPauseForTesting
argument_list|()
expr_stmt|;
if|if
condition|(
name|completed
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
comment|// Ignore canceled zones. The cancellation is edit-logged by the handler.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipped a canceled re-encryption task"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|ReencryptionTask
name|task
init|=
name|completed
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|shouldRetry
decl_stmt|;
do|do
block|{
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|throttleTimerLocked
operator|.
name|start
argument_list|()
expr_stmt|;
name|processTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|shouldRetry
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriableException
decl||
name|SafeModeException
name|re
parameter_list|)
block|{
comment|// Keep retrying until succeed.
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception when processing re-encryption task for zone {}, "
operator|+
literal|"retrying..."
argument_list|,
name|task
operator|.
name|zoneId
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|shouldRetry
operator|=
literal|true
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|faultRetryInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure processing re-encryption task for zone {}"
argument_list|,
name|task
operator|.
name|zoneId
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
operator|++
name|task
operator|.
name|numFailures
expr_stmt|;
name|task
operator|.
name|processed
operator|=
literal|true
expr_stmt|;
name|shouldRetry
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|writeUnlock
argument_list|(
literal|"reencryptUpdater"
argument_list|)
expr_stmt|;
name|throttleTimerLocked
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// logSync regardless, to prevent edit log buffer overflow triggering
comment|// logSync inside FSN writelock.
name|dir
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|shouldRetry
condition|)
do|;
block|}
DECL|method|processTask (ReencryptionTask task)
specifier|private
name|void
name|processTask
parameter_list|(
name|ReencryptionTask
name|task
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
decl_stmt|;
specifier|final
name|String
name|zonePath
decl_stmt|;
name|dir
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|getTraverser
argument_list|()
operator|.
name|checkINodeReady
argument_list|(
name|task
operator|.
name|zoneId
argument_list|)
expr_stmt|;
specifier|final
name|INode
name|zoneNode
init|=
name|dir
operator|.
name|getInode
argument_list|(
name|task
operator|.
name|zoneId
argument_list|)
decl_stmt|;
if|if
condition|(
name|zoneNode
operator|==
literal|null
condition|)
block|{
comment|// ez removed.
return|return;
block|}
name|zonePath
operator|=
name|zoneNode
operator|.
name|getFullPathName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing returned re-encryption task for zone {}({}), "
operator|+
literal|"batch size {}, start:{}"
argument_list|,
name|zonePath
argument_list|,
name|task
operator|.
name|zoneId
argument_list|,
name|task
operator|.
name|batch
operator|.
name|size
argument_list|()
argument_list|,
name|task
operator|.
name|batch
operator|.
name|getFirstFilePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ZoneSubmissionTracker
name|tracker
init|=
name|handler
operator|.
name|getTracker
argument_list|(
name|zoneNode
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracker
operator|==
literal|null
condition|)
block|{
comment|// re-encryption canceled.
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-encryption was canceled."
argument_list|)
expr_stmt|;
return|return;
block|}
name|tracker
operator|.
name|numFutureDone
operator|++
expr_stmt|;
name|EncryptionFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|reencryptUpdaterProcessOneTask
argument_list|()
expr_stmt|;
name|processTaskEntries
argument_list|(
name|zonePath
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|EncryptionFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|reencryptUpdaterProcessCheckpoint
argument_list|()
expr_stmt|;
name|xAttrs
operator|=
name|processCheckpoints
argument_list|(
name|zoneNode
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dir
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|FSDirEncryptionZoneOp
operator|.
name|saveFileXAttrsForBatch
argument_list|(
name|dir
argument_list|,
name|task
operator|.
name|batch
operator|.
name|getBatch
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|xAttrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dir
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetXAttrs
argument_list|(
name|zonePath
argument_list|,
name|xAttrs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkPauseForTesting ()
specifier|private
specifier|synchronized
name|void
name|checkPauseForTesting
parameter_list|()
throws|throws
name|InterruptedException
block|{
assert|assert
operator|!
name|dir
operator|.
name|hasWriteLock
argument_list|()
assert|;
assert|assert
operator|!
name|dir
operator|.
name|getFSNamesystem
argument_list|()
operator|.
name|hasWriteLock
argument_list|()
assert|;
if|if
condition|(
name|pauseAfterNthCheckpoint
operator|!=
literal|0
condition|)
block|{
name|ZoneSubmissionTracker
name|tracker
init|=
name|handler
operator|.
name|unprotectedGetTracker
argument_list|(
name|pauseZoneId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracker
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tracker
operator|.
name|numFutureDone
operator|==
name|pauseAfterNthCheckpoint
condition|)
block|{
name|shouldPauseForTesting
operator|=
literal|true
expr_stmt|;
name|pauseAfterNthCheckpoint
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
while|while
condition|(
name|shouldPauseForTesting
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping in the re-encryption updater for unit test."
argument_list|)
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Continuing re-encryption updater after pausing."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Throttles the ReencryptionUpdater to prevent from contending FSN/FSD write    * locks. This is done by the configuration.    */
DECL|method|throttle ()
specifier|private
name|void
name|throttle
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|throttleLimitRatio
operator|>=
literal|1.0
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|expect
init|=
call|(
name|long
call|)
argument_list|(
name|throttleTimerAll
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|*
name|throttleLimitRatio
argument_list|)
decl_stmt|;
specifier|final
name|long
name|actual
init|=
name|throttleTimerLocked
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Re-encryption updater throttling expect: {}, actual: {},"
operator|+
literal|" throttleTimerAll:{}"
argument_list|,
name|expect
argument_list|,
name|actual
argument_list|,
name|throttleTimerAll
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expect
operator|-
name|actual
operator|<
literal|0
condition|)
block|{
comment|// in case throttleLimitHandlerRatio is very small, expect will be 0.
comment|// so sleepMs should not be calculated from expect, to really meet the
comment|// ratio. e.g. if ratio is 0.001, expect = 0 and actual = 1, sleepMs
comment|// should be 1000 - throttleTimerAll.now()
specifier|final
name|long
name|sleepMs
init|=
call|(
name|long
call|)
argument_list|(
name|actual
operator|/
name|throttleLimitRatio
argument_list|)
operator|-
name|throttleTimerAll
operator|.
name|now
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Throttling re-encryption, sleeping for {} ms"
argument_list|,
name|sleepMs
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepMs
argument_list|)
expr_stmt|;
block|}
name|throttleTimerAll
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|throttleTimerLocked
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

