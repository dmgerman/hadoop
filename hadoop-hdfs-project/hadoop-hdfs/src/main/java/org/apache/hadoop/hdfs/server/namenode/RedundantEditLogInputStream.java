begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|log
operator|.
name|LogThrottlingHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|log
operator|.
name|LogThrottlingHelper
operator|.
name|LogAction
import|;
end_import

begin_comment
comment|/**  * A merged input stream that handles failover between different edit logs.  *  * We will currently try each edit log stream exactly once.  In other words, we  * don't handle the "ping pong" scenario where different edit logs contain a  * different subset of the available edits.  */
end_comment

begin_class
DECL|class|RedundantEditLogInputStream
class|class
name|RedundantEditLogInputStream
extends|extends
name|EditLogInputStream
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RedundantEditLogInputStream
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|curIdx
specifier|private
name|int
name|curIdx
decl_stmt|;
DECL|field|prevTxId
specifier|private
name|long
name|prevTxId
decl_stmt|;
DECL|field|streams
specifier|private
specifier|final
name|EditLogInputStream
index|[]
name|streams
decl_stmt|;
comment|/** Limit logging about fast forwarding the stream to every 5 seconds max. */
DECL|field|FAST_FORWARD_LOGGING_INTERVAL_MS
specifier|private
specifier|static
specifier|final
name|long
name|FAST_FORWARD_LOGGING_INTERVAL_MS
init|=
literal|5000
decl_stmt|;
DECL|field|fastForwardLoggingHelper
specifier|private
specifier|final
name|LogThrottlingHelper
name|fastForwardLoggingHelper
init|=
operator|new
name|LogThrottlingHelper
argument_list|(
name|FAST_FORWARD_LOGGING_INTERVAL_MS
argument_list|)
decl_stmt|;
comment|/**    * States that the RedundantEditLogInputStream can be in.    *    *<pre>    *                   start (if no streams)    *                           |    *                           V    * PrematureEOFException  +----------------+    *        +-------------->| EOF            |<--------------+    *        |               +----------------+               |    *        |                                                |    *        |          start (if there are streams)          |    *        |                  |                             |    *        |                  V                             | EOF    *        |   resync      +----------------+ skipUntil  +---------+    *        |   +---------->| SKIP_UNTIL     |----------->|  OK     |    *        |   |           +----------------+            +---------+    *        |   |                | IOE   ^ fail over to      | IOE    *        |   |                V       | next stream       |    * +----------------------+   +----------------+           |    * | STREAM_FAILED_RESYNC |   | STREAM_FAILED  |<----------+    * +----------------------+   +----------------+    *                  ^   Recovery mode    |    *                  +--------------------+    *</pre>    */
DECL|enum|State
specifier|static
specifier|private
enum|enum
name|State
block|{
comment|/** We need to skip until prevTxId + 1 */
DECL|enumConstant|SKIP_UNTIL
name|SKIP_UNTIL
block|,
comment|/** We're ready to read opcodes out of the current stream */
DECL|enumConstant|OK
name|OK
block|,
comment|/** The current stream has failed. */
DECL|enumConstant|STREAM_FAILED
name|STREAM_FAILED
block|,
comment|/** The current stream has failed, and resync() was called.  */
DECL|enumConstant|STREAM_FAILED_RESYNC
name|STREAM_FAILED_RESYNC
block|,
comment|/** There are no more opcodes to read from this      * RedundantEditLogInputStream */
DECL|enumConstant|EOF
name|EOF
block|;   }
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|field|prevException
specifier|private
name|IOException
name|prevException
decl_stmt|;
DECL|method|RedundantEditLogInputStream (Collection<EditLogInputStream> streams, long startTxId)
name|RedundantEditLogInputStream
parameter_list|(
name|Collection
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
parameter_list|,
name|long
name|startTxId
parameter_list|)
block|{
name|this
operator|.
name|curIdx
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|prevTxId
operator|=
operator|(
name|startTxId
operator|==
name|HdfsServerConstants
operator|.
name|INVALID_TXID
operator|)
condition|?
name|HdfsServerConstants
operator|.
name|INVALID_TXID
else|:
operator|(
name|startTxId
operator|-
literal|1
operator|)
expr_stmt|;
name|this
operator|.
name|state
operator|=
operator|(
name|streams
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|State
operator|.
name|EOF
else|:
name|State
operator|.
name|SKIP_UNTIL
expr_stmt|;
name|this
operator|.
name|prevException
operator|=
literal|null
expr_stmt|;
comment|// EditLogInputStreams in a RedundantEditLogInputStream must be finalized,
comment|// and can't be pre-transactional.
name|EditLogInputStream
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EditLogInputStream
name|s
range|:
name|streams
control|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|s
operator|.
name|getFirstTxId
argument_list|()
operator|!=
name|HdfsServerConstants
operator|.
name|INVALID_TXID
argument_list|,
literal|"invalid first txid in stream: %s"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|s
operator|.
name|getLastTxId
argument_list|()
operator|!=
name|HdfsServerConstants
operator|.
name|INVALID_TXID
argument_list|,
literal|"invalid last txid in stream: %s"
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|s
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|s
operator|.
name|getFirstTxId
argument_list|()
operator|==
name|first
operator|.
name|getFirstTxId
argument_list|()
argument_list|,
literal|"All streams in the RedundantEditLogInputStream must have the same "
operator|+
literal|"start transaction ID!  "
operator|+
name|first
operator|+
literal|" had start txId "
operator|+
name|first
operator|.
name|getFirstTxId
argument_list|()
operator|+
literal|", but "
operator|+
name|s
operator|+
literal|" had start txId "
operator|+
name|s
operator|.
name|getFirstTxId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|streams
operator|=
name|streams
operator|.
name|toArray
argument_list|(
operator|new
name|EditLogInputStream
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// We sort the streams here so that the streams that end later come first.
name|Arrays
operator|.
name|sort
argument_list|(
name|this
operator|.
name|streams
argument_list|,
operator|new
name|Comparator
argument_list|<
name|EditLogInputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EditLogInputStream
name|a
parameter_list|,
name|EditLogInputStream
name|b
parameter_list|)
block|{
return|return
name|Longs
operator|.
name|compare
argument_list|(
name|b
operator|.
name|getLastTxId
argument_list|()
argument_list|,
name|a
operator|.
name|getLastTxId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentStreamName ()
specifier|public
name|String
name|getCurrentStreamName
parameter_list|()
block|{
return|return
name|streams
index|[
name|curIdx
index|]
operator|.
name|getCurrentStreamName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|EditLogInputStream
name|elis
range|:
name|streams
control|)
block|{
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
name|elis
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
return|return
name|bld
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getFirstTxId ()
specifier|public
name|long
name|getFirstTxId
parameter_list|()
block|{
return|return
name|streams
index|[
name|curIdx
index|]
operator|.
name|getFirstTxId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLastTxId ()
specifier|public
name|long
name|getLastTxId
parameter_list|()
block|{
return|return
name|streams
index|[
name|curIdx
index|]
operator|.
name|getLastTxId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|streams
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextValidOp ()
specifier|protected
name|FSEditLogOp
name|nextValidOp
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|STREAM_FAILED
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|STREAM_FAILED_RESYNC
expr_stmt|;
block|}
return|return
name|nextOp
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|nextOp ()
specifier|protected
name|FSEditLogOp
name|nextOp
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SKIP_UNTIL
case|:
try|try
block|{
if|if
condition|(
name|prevTxId
operator|!=
name|HdfsServerConstants
operator|.
name|INVALID_TXID
condition|)
block|{
name|LogAction
name|logAction
init|=
name|fastForwardLoggingHelper
operator|.
name|record
argument_list|()
decl_stmt|;
if|if
condition|(
name|logAction
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fast-forwarding stream '"
operator|+
name|streams
index|[
name|curIdx
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"' to transaction ID "
operator|+
operator|(
name|prevTxId
operator|+
literal|1
operator|)
operator|+
name|LogThrottlingHelper
operator|.
name|getLogSupressionMessage
argument_list|(
name|logAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|streams
index|[
name|curIdx
index|]
operator|.
name|skipUntil
argument_list|(
name|prevTxId
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|prevException
operator|=
name|e
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|STREAM_FAILED
expr_stmt|;
block|}
name|state
operator|=
name|State
operator|.
name|OK
expr_stmt|;
break|break;
case|case
name|OK
case|:
try|try
block|{
name|FSEditLogOp
name|op
init|=
name|streams
index|[
name|curIdx
index|]
operator|.
name|readOp
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|EOF
expr_stmt|;
if|if
condition|(
name|streams
index|[
name|curIdx
index|]
operator|.
name|getLastTxId
argument_list|()
operator|==
name|prevTxId
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|PrematureEOFException
argument_list|(
literal|"got premature end-of-file "
operator|+
literal|"at txid "
operator|+
name|prevTxId
operator|+
literal|"; expected file to go up to "
operator|+
name|streams
index|[
name|curIdx
index|]
operator|.
name|getLastTxId
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|prevTxId
operator|=
name|op
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
return|return
name|op
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|prevException
operator|=
name|e
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|STREAM_FAILED
expr_stmt|;
block|}
break|break;
case|case
name|STREAM_FAILED
case|:
if|if
condition|(
name|curIdx
operator|+
literal|1
operator|==
name|streams
operator|.
name|length
condition|)
block|{
throw|throw
name|prevException
throw|;
block|}
name|long
name|oldLast
init|=
name|streams
index|[
name|curIdx
index|]
operator|.
name|getLastTxId
argument_list|()
decl_stmt|;
name|long
name|newLast
init|=
name|streams
index|[
name|curIdx
operator|+
literal|1
index|]
operator|.
name|getLastTxId
argument_list|()
decl_stmt|;
if|if
condition|(
name|newLast
operator|<
name|oldLast
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"We encountered an error reading "
operator|+
name|streams
index|[
name|curIdx
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|".  During automatic edit log "
operator|+
literal|"failover, we noticed that all of the remaining edit log "
operator|+
literal|"streams are shorter than the current one!  The best "
operator|+
literal|"remaining edit log ends at transaction "
operator|+
name|newLast
operator|+
literal|", but we thought we could read up to transaction "
operator|+
name|oldLast
operator|+
literal|".  If you continue, metadata will be lost forever!"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Got error reading edit log input stream "
operator|+
name|streams
index|[
name|curIdx
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"; failing over to edit log "
operator|+
name|streams
index|[
name|curIdx
operator|+
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|prevException
argument_list|)
expr_stmt|;
name|curIdx
operator|++
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|SKIP_UNTIL
expr_stmt|;
break|break;
case|case
name|STREAM_FAILED_RESYNC
case|:
if|if
condition|(
name|curIdx
operator|+
literal|1
operator|==
name|streams
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|prevException
operator|instanceof
name|PrematureEOFException
condition|)
block|{
comment|// bypass early EOF check
name|state
operator|=
name|State
operator|.
name|EOF
expr_stmt|;
block|}
else|else
block|{
name|streams
index|[
name|curIdx
index|]
operator|.
name|resync
argument_list|()
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|SKIP_UNTIL
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failing over to edit log "
operator|+
name|streams
index|[
name|curIdx
operator|+
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|curIdx
operator|++
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|SKIP_UNTIL
expr_stmt|;
block|}
break|break;
case|case
name|EOF
case|:
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getVersion (boolean verifyVersion)
specifier|public
name|int
name|getVersion
parameter_list|(
name|boolean
name|verifyVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|streams
index|[
name|curIdx
index|]
operator|.
name|getVersion
argument_list|(
name|verifyVersion
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPosition ()
specifier|public
name|long
name|getPosition
parameter_list|()
block|{
return|return
name|streams
index|[
name|curIdx
index|]
operator|.
name|getPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|length ()
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|streams
index|[
name|curIdx
index|]
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isInProgress ()
specifier|public
name|boolean
name|isInProgress
parameter_list|()
block|{
return|return
name|streams
index|[
name|curIdx
index|]
operator|.
name|isInProgress
argument_list|()
return|;
block|}
DECL|class|PrematureEOFException
specifier|static
specifier|private
specifier|final
class|class
name|PrematureEOFException
extends|extends
name|IOException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|PrematureEOFException (String msg)
name|PrematureEOFException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setMaxOpSize (int maxOpSize)
specifier|public
name|void
name|setMaxOpSize
parameter_list|(
name|int
name|maxOpSize
parameter_list|)
block|{
for|for
control|(
name|EditLogInputStream
name|elis
range|:
name|streams
control|)
block|{
name|elis
operator|.
name|setMaxOpSize
argument_list|(
name|maxOpSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isLocalLog ()
specifier|public
name|boolean
name|isLocalLog
parameter_list|()
block|{
return|return
name|streams
index|[
name|curIdx
index|]
operator|.
name|isLocalLog
argument_list|()
return|;
block|}
block|}
end_class

end_unit

