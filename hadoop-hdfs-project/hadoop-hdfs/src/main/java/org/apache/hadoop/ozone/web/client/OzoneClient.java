begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|ListVolumes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_CREATED
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_OK
import|;
end_import

begin_comment
comment|/**  * Ozone client that connects to an Ozone server. Please note that this class is  * not  thread safe.  */
end_comment

begin_class
DECL|class|OzoneClient
specifier|public
class|class
name|OzoneClient
implements|implements
name|Closeable
block|{
DECL|field|endPointURI
specifier|private
name|URI
name|endPointURI
decl_stmt|;
DECL|field|userAuth
specifier|private
name|String
name|userAuth
decl_stmt|;
comment|/**    * Constructor for OzoneClient.    */
DECL|method|OzoneClient ()
specifier|public
name|OzoneClient
parameter_list|()
block|{   }
comment|/**    * Constructor for OzoneClient.    */
DECL|method|OzoneClient (String ozoneURI)
specifier|public
name|OzoneClient
parameter_list|(
name|String
name|ozoneURI
parameter_list|)
throws|throws
name|OzoneException
throws|,
name|URISyntaxException
block|{
name|setEndPoint
argument_list|(
name|ozoneURI
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor for OzoneClient.    */
DECL|method|OzoneClient (String ozoneURI, String userAuth)
specifier|public
name|OzoneClient
parameter_list|(
name|String
name|ozoneURI
parameter_list|,
name|String
name|userAuth
parameter_list|)
throws|throws
name|OzoneException
throws|,
name|URISyntaxException
block|{
name|setEndPoint
argument_list|(
name|ozoneURI
argument_list|)
expr_stmt|;
name|setUserAuth
argument_list|(
name|userAuth
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the end Point.    *    * @return String    */
DECL|method|getEndPointURI ()
specifier|public
name|URI
name|getEndPointURI
parameter_list|()
block|{
return|return
name|endPointURI
return|;
block|}
comment|/**    * Sets the End Point info using an URI.    *    * @param endPointURI - URI    * @throws OzoneException    */
DECL|method|setEndPointURI (URI endPointURI)
specifier|public
name|void
name|setEndPointURI
parameter_list|(
name|URI
name|endPointURI
parameter_list|)
throws|throws
name|OzoneException
block|{
if|if
condition|(
operator|(
name|endPointURI
operator|==
literal|null
operator|)
operator|||
operator|(
name|endPointURI
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Invalid ozone URI"
argument_list|)
throw|;
block|}
name|this
operator|.
name|endPointURI
operator|=
name|endPointURI
expr_stmt|;
block|}
comment|/**    * Set endPoint.    *    * @param clusterFQDN - cluster FQDN.    */
DECL|method|setEndPoint (String clusterFQDN)
specifier|public
name|void
name|setEndPoint
parameter_list|(
name|String
name|clusterFQDN
parameter_list|)
throws|throws
name|OzoneException
throws|,
name|URISyntaxException
block|{
name|setEndPointURI
argument_list|(
operator|new
name|URI
argument_list|(
name|clusterFQDN
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get user Auth String.    *    * @return - User Auth String    */
DECL|method|getUserAuth ()
specifier|public
name|String
name|getUserAuth
parameter_list|()
block|{
return|return
name|this
operator|.
name|userAuth
return|;
block|}
comment|/**    * Set User Auth.    *    * @param userAuth - User Auth String    */
DECL|method|setUserAuth (String userAuth)
specifier|public
name|void
name|setUserAuth
parameter_list|(
name|String
name|userAuth
parameter_list|)
block|{
name|this
operator|.
name|userAuth
operator|=
name|userAuth
expr_stmt|;
block|}
comment|/**    * create volume.    *    * @param volumeName - volume name 3 - 63 chars, small letters.    * @param onBehalfOf - The user on behalf we are making the call for    * @param quota      - Quota's are specified in a specific format. it is    *                   integer(MB|GB|TB), for example 100TB.    * @throws OzoneClientException    */
DECL|method|createVolume (String volumeName, String onBehalfOf, String quota)
specifier|public
name|OzoneVolume
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|onBehalfOf
parameter_list|,
name|String
name|quota
parameter_list|)
throws|throws
name|OzoneException
block|{
try|try
block|{
name|DefaultHttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|OzoneUtils
operator|.
name|verifyBucketName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|endPointURI
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|volumeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|quota
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setParameter
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_QUERY_TAG
argument_list|,
name|quota
argument_list|)
expr_stmt|;
block|}
name|HttpPost
name|httppost
init|=
name|getHttpPost
argument_list|(
name|onBehalfOf
argument_list|,
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|executeCreateVolume
argument_list|(
name|httppost
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
return|return
name|getVolume
argument_list|(
name|volumeName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
decl||
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns information about an existing Volume. if the Volume does not exist,    * or if the user does not have access rights OzoneException is thrown    *    * @param volumeName - volume name 3 - 63 chars, small letters.    * @return OzoneVolume Ozone Client Volume Class.    * @throws OzoneException    */
DECL|method|getVolume (String volumeName)
specifier|public
name|OzoneVolume
name|getVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|OzoneException
block|{
try|try
block|{
name|DefaultHttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|OzoneUtils
operator|.
name|verifyBucketName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|endPointURI
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|volumeName
argument_list|)
operator|.
name|setParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_TAG
argument_list|,
name|Header
operator|.
name|OZONE_LIST_QUERY_VOLUME
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|HttpGet
name|httpget
init|=
name|getHttpGet
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|executeInfoVolume
argument_list|(
name|httpget
argument_list|,
name|httpClient
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
decl||
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * List all the volumes owned by the user or Owned by the user specified in    * the behalf of string.    *    * @param onBehalfOf - User Name of the user if it is not the caller. for    *                   example, an admin wants to list some other users    *                   volumes.    * @param prefix     - Return only volumes that match this prefix.    * @param maxKeys    - Maximum number of results to return, if the result set    *                   is smaller than requested size, it means that list is    *                   complete.    * @param prevKey    - The last key that client got, server will continue    *                   returning results from that point.    * @return List of Volumes    * @throws OzoneException    */
DECL|method|listVolumes (String onBehalfOf, String prefix, int maxKeys, OzoneVolume prevKey)
specifier|public
name|List
argument_list|<
name|OzoneVolume
argument_list|>
name|listVolumes
parameter_list|(
name|String
name|onBehalfOf
parameter_list|,
name|String
name|prefix
parameter_list|,
name|int
name|maxKeys
parameter_list|,
name|OzoneVolume
name|prevKey
parameter_list|)
throws|throws
name|OzoneException
block|{
try|try
block|{
name|DefaultHttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|endPointURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_PREFIX
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxKeys
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_MAXKEYS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxKeys
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prevKey
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_PREVKEY
argument_list|,
name|prevKey
operator|.
name|getOwnerName
argument_list|()
operator|+
literal|"/"
operator|+
name|prevKey
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|HttpGet
name|httpget
init|=
name|getHttpGet
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|onBehalfOf
operator|!=
literal|null
condition|)
block|{
name|httpget
operator|.
name|addHeader
argument_list|(
name|Header
operator|.
name|OZONE_USER
argument_list|,
name|onBehalfOf
argument_list|)
expr_stmt|;
block|}
return|return
name|executeListVolume
argument_list|(
name|httpget
argument_list|,
name|httpClient
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * List volumes of the current user or if onBehalfof is not null lists volume    * owned by that user. You need admin privilege to read other users volume    * lists.    *    * @param onBehalfOf - Name of the user you want to get volume list    * @return - Volume list.    * @throws OzoneException    */
DECL|method|listVolumes (String onBehalfOf)
specifier|public
name|List
argument_list|<
name|OzoneVolume
argument_list|>
name|listVolumes
parameter_list|(
name|String
name|onBehalfOf
parameter_list|)
throws|throws
name|OzoneException
block|{
return|return
name|listVolumes
argument_list|(
name|onBehalfOf
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * List all volumes in a cluster. This can be invoked only by an Admin.    *    * @param prefix  - Returns only volumes that match this prefix.    * @param maxKeys - Maximum niumber of keys to return    * @param prevKey - Last Ozone Volume from the last Iteration.    * @return List of Volumes    * @throws OzoneException    */
DECL|method|listAllVolumes (String prefix, int maxKeys, OzoneVolume prevKey)
specifier|public
name|List
argument_list|<
name|OzoneVolume
argument_list|>
name|listAllVolumes
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|maxKeys
parameter_list|,
name|OzoneVolume
name|prevKey
parameter_list|)
throws|throws
name|OzoneException
block|{
try|try
block|{
name|DefaultHttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|endPointURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_PREFIX
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxKeys
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_MAXKEYS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxKeys
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prevKey
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_PREVKEY
argument_list|,
name|prevKey
operator|.
name|getOwnerName
argument_list|()
operator|+
literal|"/"
operator|+
name|prevKey
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_ROOTSCAN
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|HttpGet
name|httpget
init|=
name|getHttpGet
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|executeListVolume
argument_list|(
name|httpget
argument_list|,
name|httpClient
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * delete a given volume.      *      * @param volumeName - volume to be deleted.      * @throws OzoneException - Ozone Exception      */
DECL|method|deleteVolume (String volumeName)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|OzoneException
block|{
try|try
block|{
name|DefaultHttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|OzoneUtils
operator|.
name|verifyBucketName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|endPointURI
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|volumeName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|HttpDelete
name|httpdelete
init|=
name|getHttpDelete
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|executeDeleteVolume
argument_list|(
name|httpdelete
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
decl||
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sets the Volume Owner.    *    * @param volumeName - Volume Name    * @param newOwner   - New Owner Name    * @throws OzoneException    */
DECL|method|setVolumeOwner (String volumeName, String newOwner)
specifier|public
name|void
name|setVolumeOwner
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|newOwner
parameter_list|)
throws|throws
name|OzoneException
block|{
if|if
condition|(
name|newOwner
operator|==
literal|null
operator|||
name|newOwner
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Invalid new owner name"
argument_list|)
throw|;
block|}
try|try
block|{
name|DefaultHttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|OzoneUtils
operator|.
name|verifyBucketName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|endPointURI
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|volumeName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|HttpPut
name|putRequest
init|=
name|getHttpPut
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|putRequest
operator|.
name|addHeader
argument_list|(
name|Header
operator|.
name|OZONE_USER
argument_list|,
name|newOwner
argument_list|)
expr_stmt|;
name|executePutVolume
argument_list|(
name|putRequest
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|IllegalArgumentException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sets the Volume Quota. Quota's are specified in a specific format. it is    *<integer>|(MB|GB|TB. for example 100TB.    *<p>    * To Remove a quota you can specify Header.OZONE_QUOTA_REMOVE    *    * @param volumeName - volume name    * @param quota      - Quota String or  Header.OZONE_QUOTA_REMOVE    * @throws OzoneException    */
DECL|method|setVolumeQuota (String volumeName, String quota)
specifier|public
name|void
name|setVolumeQuota
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|quota
parameter_list|)
throws|throws
name|OzoneException
block|{
if|if
condition|(
name|quota
operator|==
literal|null
operator|||
name|quota
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Invalid quota"
argument_list|)
throw|;
block|}
try|try
block|{
name|DefaultHttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
name|OzoneUtils
operator|.
name|verifyBucketName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|endPointURI
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|volumeName
argument_list|)
operator|.
name|setParameter
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_QUERY_TAG
argument_list|,
name|quota
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|HttpPut
name|putRequest
init|=
name|getHttpPut
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|executePutVolume
argument_list|(
name|putRequest
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|IllegalArgumentException
decl||
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sends the create Volume request to the server.    *    * @param httppost   - http post class    * @param httpClient - httpClient    * @throws IOException    -    * @throws OzoneException    */
DECL|method|executeCreateVolume (HttpPost httppost, DefaultHttpClient httpClient)
specifier|private
name|void
name|executeCreateVolume
parameter_list|(
name|HttpPost
name|httppost
parameter_list|,
name|DefaultHttpClient
name|httpClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|httppost
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|errorCode
operator|==
name|HTTP_OK
operator|)
operator|||
operator|(
name|errorCode
operator|==
name|HTTP_CREATED
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
throw|throw
name|OzoneException
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Unexpected null in http payload"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|EntityUtils
operator|.
name|consume
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Sends the create Volume request to the server.    *    * @param httpGet - httpGet    * @return OzoneVolume    * @throws IOException    -    * @throws OzoneException    */
DECL|method|executeInfoVolume (HttpGet httpGet, DefaultHttpClient httpClient)
specifier|private
name|OzoneVolume
name|executeInfoVolume
parameter_list|(
name|HttpGet
name|httpGet
parameter_list|,
name|DefaultHttpClient
name|httpClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Unexpected null in http payload"
argument_list|)
throw|;
block|}
if|if
condition|(
name|errorCode
operator|==
name|HTTP_OK
condition|)
block|{
name|OzoneVolume
name|volume
init|=
operator|new
name|OzoneVolume
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|volume
operator|.
name|setVolumeInfo
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|volume
return|;
block|}
else|else
block|{
throw|throw
name|OzoneException
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Sends update volume requests to the server.    *    * @param putRequest http request    * @throws IOException    * @throws OzoneException    */
DECL|method|executePutVolume (HttpPut putRequest, DefaultHttpClient httpClient)
specifier|private
name|void
name|executePutVolume
parameter_list|(
name|HttpPut
name|putRequest
parameter_list|,
name|DefaultHttpClient
name|httpClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|putRequest
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|errorCode
operator|!=
name|HTTP_OK
condition|)
block|{
throw|throw
name|OzoneException
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|EntityUtils
operator|.
name|consume
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * List Volumes.    *    * @param httpGet - httpGet    * @return OzoneVolume    * @throws IOException    -    * @throws OzoneException    */
DECL|method|executeListVolume (HttpGet httpGet, DefaultHttpClient httpClient)
specifier|private
name|List
argument_list|<
name|OzoneVolume
argument_list|>
name|executeListVolume
parameter_list|(
name|HttpGet
name|httpGet
parameter_list|,
name|DefaultHttpClient
name|httpClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|OzoneVolume
argument_list|>
name|volList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Unexpected null in http payload"
argument_list|)
throw|;
block|}
name|String
name|temp
init|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|HTTP_OK
condition|)
block|{
name|ListVolumes
name|listVolumes
init|=
name|ListVolumes
operator|.
name|parse
argument_list|(
name|temp
argument_list|)
decl_stmt|;
for|for
control|(
name|VolumeInfo
name|info
range|:
name|listVolumes
operator|.
name|getVolumes
argument_list|()
control|)
block|{
name|volList
operator|.
name|add
argument_list|(
operator|new
name|OzoneVolume
argument_list|(
name|info
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|volList
return|;
block|}
else|else
block|{
throw|throw
name|OzoneException
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Delete Volume.    *    * @param httpDelete - Http Delete Request    * @throws IOException    * @throws OzoneException    */
DECL|method|executeDeleteVolume (HttpDelete httpDelete, DefaultHttpClient httpClient)
specifier|private
name|void
name|executeDeleteVolume
parameter_list|(
name|HttpDelete
name|httpDelete
parameter_list|,
name|DefaultHttpClient
name|httpClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|httpDelete
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|errorCode
operator|!=
name|HTTP_OK
condition|)
block|{
throw|throw
name|OzoneException
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns a standard HttpPost Object to use for ozone post requests.    *    * @param onBehalfOf - If the use is being made on behalf of user, that user    * @param uriString  - UriString    * @return HttpPost    */
DECL|method|getHttpPost (String onBehalfOf, String uriString)
specifier|public
name|HttpPost
name|getHttpPost
parameter_list|(
name|String
name|onBehalfOf
parameter_list|,
name|String
name|uriString
parameter_list|)
block|{
name|HttpPost
name|httppost
init|=
operator|new
name|HttpPost
argument_list|(
name|uriString
argument_list|)
decl_stmt|;
name|addOzoneHeaders
argument_list|(
name|httppost
argument_list|)
expr_stmt|;
if|if
condition|(
name|onBehalfOf
operator|!=
literal|null
condition|)
block|{
name|httppost
operator|.
name|addHeader
argument_list|(
name|Header
operator|.
name|OZONE_USER
argument_list|,
name|onBehalfOf
argument_list|)
expr_stmt|;
block|}
return|return
name|httppost
return|;
block|}
comment|/**    * Returns a standard HttpGet Object to use for ozone Get requests.    *    * @param uriString - The full Uri String    * @return HttpGet    */
DECL|method|getHttpGet (String uriString)
specifier|public
name|HttpGet
name|getHttpGet
parameter_list|(
name|String
name|uriString
parameter_list|)
block|{
name|HttpGet
name|httpget
init|=
operator|new
name|HttpGet
argument_list|(
name|uriString
argument_list|)
decl_stmt|;
name|addOzoneHeaders
argument_list|(
name|httpget
argument_list|)
expr_stmt|;
return|return
name|httpget
return|;
block|}
comment|/**    * Returns httpDelete.    *    * @param uriString - uri    * @return HttpDelete    */
DECL|method|getHttpDelete (String uriString)
specifier|public
name|HttpDelete
name|getHttpDelete
parameter_list|(
name|String
name|uriString
parameter_list|)
block|{
name|HttpDelete
name|httpDel
init|=
operator|new
name|HttpDelete
argument_list|(
name|uriString
argument_list|)
decl_stmt|;
name|addOzoneHeaders
argument_list|(
name|httpDel
argument_list|)
expr_stmt|;
return|return
name|httpDel
return|;
block|}
comment|/**    * returns an HttpPut Object.    *    * @param uriString - Uri    * @return HttpPut    */
DECL|method|getHttpPut (String uriString)
specifier|public
name|HttpPut
name|getHttpPut
parameter_list|(
name|String
name|uriString
parameter_list|)
block|{
name|HttpPut
name|httpPut
init|=
operator|new
name|HttpPut
argument_list|(
name|uriString
argument_list|)
decl_stmt|;
name|addOzoneHeaders
argument_list|(
name|httpPut
argument_list|)
expr_stmt|;
return|return
name|httpPut
return|;
block|}
comment|/**    * Add Ozone Headers.    *    * @param httpRequest - Http Request    */
DECL|method|addOzoneHeaders (HttpRequestBase httpRequest)
specifier|private
name|void
name|addOzoneHeaders
parameter_list|(
name|HttpRequestBase
name|httpRequest
parameter_list|)
block|{
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, dd MMM yyyy HH:mm:ss ZZZ"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|httpRequest
operator|.
name|addHeader
argument_list|(
name|Header
operator|.
name|OZONE_VERSION_HEADER
argument_list|,
name|Header
operator|.
name|OZONE_V1_VERSION_HEADER
argument_list|)
expr_stmt|;
name|httpRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|DATE
argument_list|,
name|format
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getUserAuth
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|httpRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
name|Header
operator|.
name|OZONE_SIMPLE_AUTHENTICATION_SCHEME
operator|+
literal|" "
operator|+
name|getUserAuth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Closes this stream and releases any system resources associated with it. If    * the stream is already closed then invoking this method has no effect.    *    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO : Currently we create a new HTTP client. We should switch
comment|// This to a Pool and cleanup the pool here.
block|}
block|}
end_class

end_unit

