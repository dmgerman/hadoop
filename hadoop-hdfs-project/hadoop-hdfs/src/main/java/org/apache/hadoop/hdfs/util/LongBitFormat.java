begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_comment
comment|/**  * Bit format in a long.  */
end_comment

begin_class
DECL|class|LongBitFormat
specifier|public
class|class
name|LongBitFormat
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|NAME
specifier|private
specifier|final
name|String
name|NAME
decl_stmt|;
comment|/** Bit offset */
DECL|field|OFFSET
specifier|private
specifier|final
name|int
name|OFFSET
decl_stmt|;
comment|/** Bit length */
DECL|field|LENGTH
specifier|private
specifier|final
name|int
name|LENGTH
decl_stmt|;
comment|/** Minimum value */
DECL|field|MIN
specifier|private
specifier|final
name|long
name|MIN
decl_stmt|;
comment|/** Maximum value */
DECL|field|MAX
specifier|private
specifier|final
name|long
name|MAX
decl_stmt|;
comment|/** Bit mask */
DECL|field|MASK
specifier|private
specifier|final
name|long
name|MASK
decl_stmt|;
DECL|method|LongBitFormat (String name, LongBitFormat previous, int length, long min)
specifier|public
name|LongBitFormat
parameter_list|(
name|String
name|name
parameter_list|,
name|LongBitFormat
name|previous
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|min
parameter_list|)
block|{
name|NAME
operator|=
name|name
expr_stmt|;
name|OFFSET
operator|=
name|previous
operator|==
literal|null
condition|?
literal|0
else|:
name|previous
operator|.
name|OFFSET
operator|+
name|previous
operator|.
name|LENGTH
expr_stmt|;
name|LENGTH
operator|=
name|length
expr_stmt|;
name|MIN
operator|=
name|min
expr_stmt|;
name|MAX
operator|=
operator|(
operator|(
operator|-
literal|1L
operator|)
operator|>>>
operator|(
literal|64
operator|-
name|LENGTH
operator|)
operator|)
expr_stmt|;
name|MASK
operator|=
name|MAX
operator|<<
name|OFFSET
expr_stmt|;
block|}
comment|/** Retrieve the value from the record. */
DECL|method|retrieve (long record)
specifier|public
name|long
name|retrieve
parameter_list|(
name|long
name|record
parameter_list|)
block|{
return|return
operator|(
name|record
operator|&
name|MASK
operator|)
operator|>>>
name|OFFSET
return|;
block|}
comment|/** Combine the value to the record. */
DECL|method|combine (long value, long record)
specifier|public
name|long
name|combine
parameter_list|(
name|long
name|value
parameter_list|,
name|long
name|record
parameter_list|)
block|{
if|if
condition|(
name|value
operator|<
name|MIN
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illagal value: "
operator|+
name|NAME
operator|+
literal|" = "
operator|+
name|value
operator|+
literal|"< MIN = "
operator|+
name|MIN
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|>
name|MAX
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illagal value: "
operator|+
name|NAME
operator|+
literal|" = "
operator|+
name|value
operator|+
literal|"> MAX = "
operator|+
name|MAX
argument_list|)
throw|;
block|}
return|return
operator|(
name|record
operator|&
operator|~
name|MASK
operator|)
operator||
operator|(
name|value
operator|<<
name|OFFSET
operator|)
return|;
block|}
DECL|method|getMin ()
specifier|public
name|long
name|getMin
parameter_list|()
block|{
return|return
name|MIN
return|;
block|}
block|}
end_class

end_unit

