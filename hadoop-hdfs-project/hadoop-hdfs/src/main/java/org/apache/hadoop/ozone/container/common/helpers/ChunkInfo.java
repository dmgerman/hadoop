begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Java class that represents ChunkInfo ProtoBuf class. This helper class allows  * us to convert to and from protobuf to normal java.  */
end_comment

begin_class
DECL|class|ChunkInfo
specifier|public
class|class
name|ChunkInfo
block|{
DECL|field|chunkName
specifier|private
specifier|final
name|String
name|chunkName
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
DECL|field|len
specifier|private
specifier|final
name|long
name|len
decl_stmt|;
DECL|field|checksum
specifier|private
name|String
name|checksum
decl_stmt|;
DECL|field|metadata
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
decl_stmt|;
comment|/**    * Constructs a ChunkInfo.    *    * @param chunkName - File Name where chunk lives.    * @param offset    - offset where Chunk Starts.    * @param len       - Length of the Chunk.    */
DECL|method|ChunkInfo (String chunkName, long offset, long len)
specifier|public
name|ChunkInfo
parameter_list|(
name|String
name|chunkName
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|len
parameter_list|)
block|{
name|this
operator|.
name|chunkName
operator|=
name|chunkName
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Adds metadata.    *    * @param key   - Key Name.    * @param value - Value.    * @throws IOException    */
DECL|method|addMetadata (String key, String value)
specifier|public
name|void
name|addMetadata
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|metadata
init|)
block|{
if|if
condition|(
name|this
operator|.
name|metadata
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This key already exists. Key "
operator|+
name|key
argument_list|)
throw|;
block|}
name|metadata
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Gets a Chunkinfo class from the protobuf definitions.    *    * @param info - Protobuf class    * @return ChunkInfo    * @throws IOException    */
DECL|method|getFromProtoBuf (ContainerProtos.ChunkInfo info)
specifier|public
specifier|static
name|ChunkInfo
name|getFromProtoBuf
parameter_list|(
name|ContainerProtos
operator|.
name|ChunkInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
operator|new
name|ChunkInfo
argument_list|(
name|info
operator|.
name|getChunkName
argument_list|()
argument_list|,
name|info
operator|.
name|getOffset
argument_list|()
argument_list|,
name|info
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|info
operator|.
name|getMetadataCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|chunkInfo
operator|.
name|addMetadata
argument_list|(
name|info
operator|.
name|getMetadata
argument_list|(
name|x
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
name|info
operator|.
name|getMetadata
argument_list|(
name|x
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|hasChecksum
argument_list|()
condition|)
block|{
name|chunkInfo
operator|.
name|setChecksum
argument_list|(
name|info
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|chunkInfo
return|;
block|}
comment|/**    * Returns a ProtoBuf Message from ChunkInfo.    *    * @return Protocol Buffer Message    */
DECL|method|getProtoBufMessage ()
specifier|public
name|ContainerProtos
operator|.
name|ChunkInfo
name|getProtoBufMessage
parameter_list|()
block|{
name|ContainerProtos
operator|.
name|ChunkInfo
operator|.
name|Builder
name|builder
init|=
name|ContainerProtos
operator|.
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChunkName
argument_list|(
name|this
operator|.
name|getChunkName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setOffset
argument_list|(
name|this
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLen
argument_list|(
name|this
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|getChecksum
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|getChecksum
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setChecksum
argument_list|(
name|this
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|metadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ContainerProtos
operator|.
name|KeyValue
operator|.
name|Builder
name|keyValBuilder
init|=
name|ContainerProtos
operator|.
name|KeyValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addMetadata
argument_list|(
name|keyValBuilder
operator|.
name|setKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns the chunkName.    *    * @return - String    */
DECL|method|getChunkName ()
specifier|public
name|String
name|getChunkName
parameter_list|()
block|{
return|return
name|chunkName
return|;
block|}
comment|/**    * Gets the start offset of the given chunk in physical file.    *    * @return - long    */
DECL|method|getOffset ()
specifier|public
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**    * Returns the length of the Chunk.    *    * @return long    */
DECL|method|getLen ()
specifier|public
name|long
name|getLen
parameter_list|()
block|{
return|return
name|len
return|;
block|}
comment|/**    * Returns the SHA256 value of this chunk.    *    * @return - Hash String    */
DECL|method|getChecksum ()
specifier|public
name|String
name|getChecksum
parameter_list|()
block|{
return|return
name|checksum
return|;
block|}
comment|/**    * Sets the Hash value of this chunk.    *    * @param checksum - Hash String.    */
DECL|method|setChecksum (String checksum)
specifier|public
name|void
name|setChecksum
parameter_list|(
name|String
name|checksum
parameter_list|)
block|{
name|this
operator|.
name|checksum
operator|=
name|checksum
expr_stmt|;
block|}
comment|/**    * Returns Metadata associated with this Chunk.    *    * @return - Map of Key,values.    */
DECL|method|getMetadata ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ChunkInfo{"
operator|+
literal|"chunkName='"
operator|+
name|chunkName
operator|+
literal|", offset="
operator|+
name|offset
operator|+
literal|", len="
operator|+
name|len
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

