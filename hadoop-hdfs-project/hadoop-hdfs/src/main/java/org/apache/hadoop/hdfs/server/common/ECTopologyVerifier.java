begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ECTopologyVerifierResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Class for verifying whether the cluster setup can support  * all enabled EC policies.  *  * Scenarios when the verification fails:  * 1. not enough data nodes compared to EC policy's highest data+parity number  * 2. not enough racks to satisfy BlockPlacementPolicyRackFaultTolerant  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ECTopologyVerifier
specifier|public
specifier|final
class|class
name|ECTopologyVerifier
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ECTopologyVerifier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ECTopologyVerifier ()
specifier|private
name|ECTopologyVerifier
parameter_list|()
block|{}
comment|/**    * Verifies whether the cluster setup can support the given EC policies.    *    * @param report list of data node descriptors for all data nodes    * @param policies erasure coding policies to verify    * @return the status of the verification    */
DECL|method|getECTopologyVerifierResult ( final DatanodeInfo[] report, final ErasureCodingPolicy... policies)
specifier|public
specifier|static
name|ECTopologyVerifierResult
name|getECTopologyVerifierResult
parameter_list|(
specifier|final
name|DatanodeInfo
index|[]
name|report
parameter_list|,
specifier|final
name|ErasureCodingPolicy
modifier|...
name|policies
parameter_list|)
block|{
specifier|final
name|int
name|numOfRacks
init|=
name|getNumberOfRacks
argument_list|(
name|report
argument_list|)
decl_stmt|;
return|return
name|getECTopologyVerifierResult
argument_list|(
name|numOfRacks
argument_list|,
name|report
operator|.
name|length
argument_list|,
name|policies
argument_list|)
return|;
block|}
comment|/**    * Verifies whether the cluster setup can support all enabled EC policies.    *    * @param policies erasure coding policies to verify    * @param numOfRacks number of racks    * @param numOfDataNodes number of data nodes    * @return the status of the verification    */
DECL|method|getECTopologyVerifierResult ( final int numOfRacks, final int numOfDataNodes, final ErasureCodingPolicy... policies)
specifier|public
specifier|static
name|ECTopologyVerifierResult
name|getECTopologyVerifierResult
parameter_list|(
specifier|final
name|int
name|numOfRacks
parameter_list|,
specifier|final
name|int
name|numOfDataNodes
parameter_list|,
specifier|final
name|ErasureCodingPolicy
modifier|...
name|policies
parameter_list|)
block|{
name|int
name|minDN
init|=
literal|0
decl_stmt|;
name|int
name|minRack
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ErasureCodingPolicy
name|policy
range|:
name|policies
control|)
block|{
specifier|final
name|int
name|policyDN
init|=
name|policy
operator|.
name|getNumDataUnits
argument_list|()
operator|+
name|policy
operator|.
name|getNumParityUnits
argument_list|()
decl_stmt|;
name|minDN
operator|=
name|Math
operator|.
name|max
argument_list|(
name|minDN
argument_list|,
name|policyDN
argument_list|)
expr_stmt|;
specifier|final
name|int
name|policyRack
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|policyDN
operator|/
operator|(
name|double
operator|)
name|policy
operator|.
name|getNumParityUnits
argument_list|()
argument_list|)
decl_stmt|;
name|minRack
operator|=
name|Math
operator|.
name|max
argument_list|(
name|minRack
argument_list|,
name|policyRack
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minDN
operator|==
literal|0
operator|||
name|minRack
operator|==
literal|0
condition|)
block|{
name|String
name|resultMessage
init|=
literal|"No erasure coding policy is given."
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
name|resultMessage
argument_list|)
expr_stmt|;
return|return
operator|new
name|ECTopologyVerifierResult
argument_list|(
literal|true
argument_list|,
name|resultMessage
argument_list|)
return|;
block|}
return|return
name|verifyECWithTopology
argument_list|(
name|minDN
argument_list|,
name|minRack
argument_list|,
name|numOfRacks
argument_list|,
name|numOfDataNodes
argument_list|,
name|getReadablePolicies
argument_list|(
name|policies
argument_list|)
argument_list|)
return|;
block|}
DECL|method|verifyECWithTopology ( final int minDN, final int minRack, final int numOfRacks, final int numOfDataNodes, String readablePolicies)
specifier|private
specifier|static
name|ECTopologyVerifierResult
name|verifyECWithTopology
parameter_list|(
specifier|final
name|int
name|minDN
parameter_list|,
specifier|final
name|int
name|minRack
parameter_list|,
specifier|final
name|int
name|numOfRacks
parameter_list|,
specifier|final
name|int
name|numOfDataNodes
parameter_list|,
name|String
name|readablePolicies
parameter_list|)
block|{
name|String
name|resultMessage
decl_stmt|;
if|if
condition|(
name|numOfDataNodes
operator|<
name|minDN
condition|)
block|{
name|resultMessage
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"The number of DataNodes (%d) is less "
operator|+
literal|"than the minimum required number of DataNodes (%d) for the "
operator|+
literal|"erasure coding policies: %s"
argument_list|,
name|numOfDataNodes
argument_list|,
name|minDN
argument_list|,
name|readablePolicies
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|resultMessage
argument_list|)
expr_stmt|;
return|return
operator|new
name|ECTopologyVerifierResult
argument_list|(
literal|false
argument_list|,
name|resultMessage
argument_list|)
return|;
block|}
if|if
condition|(
name|numOfRacks
operator|<
name|minRack
condition|)
block|{
name|resultMessage
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"The number of racks (%d) is less than "
operator|+
literal|"the minimum required number of racks (%d) for the erasure "
operator|+
literal|"coding policies: %s"
argument_list|,
name|numOfRacks
argument_list|,
name|minRack
argument_list|,
name|readablePolicies
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|resultMessage
argument_list|)
expr_stmt|;
return|return
operator|new
name|ECTopologyVerifierResult
argument_list|(
literal|false
argument_list|,
name|resultMessage
argument_list|)
return|;
block|}
return|return
operator|new
name|ECTopologyVerifierResult
argument_list|(
literal|true
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"The cluster setup can support EC policies: %s"
argument_list|,
name|readablePolicies
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getNumberOfRacks (DatanodeInfo[] report)
specifier|private
specifier|static
name|int
name|getNumberOfRacks
parameter_list|(
name|DatanodeInfo
index|[]
name|report
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|racks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dni
range|:
name|report
control|)
block|{
name|Integer
name|count
init|=
name|racks
operator|.
name|get
argument_list|(
name|dni
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|racks
operator|.
name|put
argument_list|(
name|dni
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|count
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|racks
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getReadablePolicies ( final ErasureCodingPolicy... policies)
specifier|private
specifier|static
name|String
name|getReadablePolicies
parameter_list|(
specifier|final
name|ErasureCodingPolicy
modifier|...
name|policies
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|policies
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|policyInfo
lambda|->
name|policyInfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

