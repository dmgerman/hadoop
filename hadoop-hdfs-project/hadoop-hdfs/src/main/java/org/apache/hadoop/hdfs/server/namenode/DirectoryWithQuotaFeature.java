begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|NSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_comment
comment|/**  * Quota feature for {@link INodeDirectory}.   */
end_comment

begin_class
DECL|class|DirectoryWithQuotaFeature
specifier|public
specifier|final
class|class
name|DirectoryWithQuotaFeature
implements|implements
name|INode
operator|.
name|Feature
block|{
DECL|field|DEFAULT_NAMESPACE_QUOTA
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NAMESPACE_QUOTA
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|DEFAULT_DISKSPACE_QUOTA
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_DISKSPACE_QUOTA
init|=
name|HdfsConstants
operator|.
name|QUOTA_RESET
decl_stmt|;
comment|/** Name space quota */
DECL|field|nsQuota
specifier|private
name|long
name|nsQuota
init|=
name|DEFAULT_NAMESPACE_QUOTA
decl_stmt|;
comment|/** Name space count */
DECL|field|namespace
specifier|private
name|long
name|namespace
init|=
literal|1L
decl_stmt|;
comment|/** Disk space quota */
DECL|field|dsQuota
specifier|private
name|long
name|dsQuota
init|=
name|DEFAULT_DISKSPACE_QUOTA
decl_stmt|;
comment|/** Disk space count */
DECL|field|diskspace
specifier|private
name|long
name|diskspace
init|=
literal|0L
decl_stmt|;
DECL|method|DirectoryWithQuotaFeature (long nsQuota, long dsQuota)
name|DirectoryWithQuotaFeature
parameter_list|(
name|long
name|nsQuota
parameter_list|,
name|long
name|dsQuota
parameter_list|)
block|{
name|this
operator|.
name|nsQuota
operator|=
name|nsQuota
expr_stmt|;
name|this
operator|.
name|dsQuota
operator|=
name|dsQuota
expr_stmt|;
block|}
comment|/** @return the quota set or -1 if it is not set. */
DECL|method|getQuota ()
name|Quota
operator|.
name|Counts
name|getQuota
parameter_list|()
block|{
return|return
name|Quota
operator|.
name|Counts
operator|.
name|newInstance
argument_list|(
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
return|;
block|}
comment|/** Set this directory's quota    *     * @param nsQuota Namespace quota to be set    * @param dsQuota Diskspace quota to be set    */
DECL|method|setQuota (long nsQuota, long dsQuota)
name|void
name|setQuota
parameter_list|(
name|long
name|nsQuota
parameter_list|,
name|long
name|dsQuota
parameter_list|)
block|{
name|this
operator|.
name|nsQuota
operator|=
name|nsQuota
expr_stmt|;
name|this
operator|.
name|dsQuota
operator|=
name|dsQuota
expr_stmt|;
block|}
DECL|method|addNamespaceDiskspace (Quota.Counts counts)
name|Quota
operator|.
name|Counts
name|addNamespaceDiskspace
parameter_list|(
name|Quota
operator|.
name|Counts
name|counts
parameter_list|)
block|{
name|counts
operator|.
name|add
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|,
name|diskspace
argument_list|)
expr_stmt|;
return|return
name|counts
return|;
block|}
DECL|method|computeContentSummary (final INodeDirectory dir, final ContentSummaryComputationContext summary)
name|ContentSummaryComputationContext
name|computeContentSummary
parameter_list|(
specifier|final
name|INodeDirectory
name|dir
parameter_list|,
specifier|final
name|ContentSummaryComputationContext
name|summary
parameter_list|)
block|{
specifier|final
name|long
name|original
init|=
name|summary
operator|.
name|getCounts
argument_list|()
operator|.
name|get
argument_list|(
name|Content
operator|.
name|DISKSPACE
argument_list|)
decl_stmt|;
name|long
name|oldYieldCount
init|=
name|summary
operator|.
name|getYieldCount
argument_list|()
decl_stmt|;
name|dir
operator|.
name|computeDirectoryContentSummary
argument_list|(
name|summary
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
comment|// Check only when the content has not changed in the middle.
if|if
condition|(
name|oldYieldCount
operator|==
name|summary
operator|.
name|getYieldCount
argument_list|()
condition|)
block|{
name|checkDiskspace
argument_list|(
name|dir
argument_list|,
name|summary
operator|.
name|getCounts
argument_list|()
operator|.
name|get
argument_list|(
name|Content
operator|.
name|DISKSPACE
argument_list|)
operator|-
name|original
argument_list|)
expr_stmt|;
block|}
return|return
name|summary
return|;
block|}
DECL|method|checkDiskspace (final INodeDirectory dir, final long computed)
specifier|private
name|void
name|checkDiskspace
parameter_list|(
specifier|final
name|INodeDirectory
name|dir
parameter_list|,
specifier|final
name|long
name|computed
parameter_list|)
block|{
if|if
condition|(
operator|-
literal|1
operator|!=
name|getQuota
argument_list|()
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
operator|&&
name|diskspace
operator|!=
name|computed
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"BUG: Inconsistent diskspace for directory "
operator|+
name|dir
operator|.
name|getFullPathName
argument_list|()
operator|+
literal|". Cached = "
operator|+
name|diskspace
operator|+
literal|" != Computed = "
operator|+
name|computed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addSpaceConsumed (final INodeDirectory dir, final long nsDelta, final long dsDelta, boolean verify)
name|void
name|addSpaceConsumed
parameter_list|(
specifier|final
name|INodeDirectory
name|dir
parameter_list|,
specifier|final
name|long
name|nsDelta
parameter_list|,
specifier|final
name|long
name|dsDelta
parameter_list|,
name|boolean
name|verify
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
if|if
condition|(
name|dir
operator|.
name|isQuotaSet
argument_list|()
condition|)
block|{
comment|// The following steps are important:
comment|// check quotas in this inode and all ancestors before changing counts
comment|// so that no change is made if there is any quota violation.
comment|// (1) verify quota in this inode
if|if
condition|(
name|verify
condition|)
block|{
name|verifyQuota
argument_list|(
name|nsDelta
argument_list|,
name|dsDelta
argument_list|)
expr_stmt|;
block|}
comment|// (2) verify quota and then add count in ancestors
name|dir
operator|.
name|addSpaceConsumed2Parent
argument_list|(
name|nsDelta
argument_list|,
name|dsDelta
argument_list|,
name|verify
argument_list|)
expr_stmt|;
comment|// (3) add count in this inode
name|addSpaceConsumed2Cache
argument_list|(
name|nsDelta
argument_list|,
name|dsDelta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|addSpaceConsumed2Parent
argument_list|(
name|nsDelta
argument_list|,
name|dsDelta
argument_list|,
name|verify
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Update the size of the tree    *     * @param nsDelta the change of the tree size    * @param dsDelta change to disk space occupied    */
DECL|method|addSpaceConsumed2Cache (long nsDelta, long dsDelta)
specifier|public
name|void
name|addSpaceConsumed2Cache
parameter_list|(
name|long
name|nsDelta
parameter_list|,
name|long
name|dsDelta
parameter_list|)
block|{
name|namespace
operator|+=
name|nsDelta
expr_stmt|;
name|diskspace
operator|+=
name|dsDelta
expr_stmt|;
block|}
comment|/**     * Sets namespace and diskspace take by the directory rooted     * at this INode. This should be used carefully. It does not check     * for quota violations.    *     * @param namespace size of the directory to be set    * @param diskspace disk space take by all the nodes under this directory    */
DECL|method|setSpaceConsumed (long namespace, long diskspace)
name|void
name|setSpaceConsumed
parameter_list|(
name|long
name|namespace
parameter_list|,
name|long
name|diskspace
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|diskspace
operator|=
name|diskspace
expr_stmt|;
block|}
comment|/** @return the namespace and diskspace consumed. */
DECL|method|getSpaceConsumed ()
specifier|public
name|Quota
operator|.
name|Counts
name|getSpaceConsumed
parameter_list|()
block|{
return|return
name|Quota
operator|.
name|Counts
operator|.
name|newInstance
argument_list|(
name|namespace
argument_list|,
name|diskspace
argument_list|)
return|;
block|}
comment|/** Verify if the namespace quota is violated after applying delta. */
DECL|method|verifyNamespaceQuota (long delta)
specifier|private
name|void
name|verifyNamespaceQuota
parameter_list|(
name|long
name|delta
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
if|if
condition|(
name|Quota
operator|.
name|isViolated
argument_list|(
name|nsQuota
argument_list|,
name|namespace
argument_list|,
name|delta
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NSQuotaExceededException
argument_list|(
name|nsQuota
argument_list|,
name|namespace
operator|+
name|delta
argument_list|)
throw|;
block|}
block|}
comment|/** Verify if the diskspace quota is violated after applying delta. */
DECL|method|verifyDiskspaceQuota (long delta)
specifier|private
name|void
name|verifyDiskspaceQuota
parameter_list|(
name|long
name|delta
parameter_list|)
throws|throws
name|DSQuotaExceededException
block|{
if|if
condition|(
name|Quota
operator|.
name|isViolated
argument_list|(
name|dsQuota
argument_list|,
name|diskspace
argument_list|,
name|delta
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DSQuotaExceededException
argument_list|(
name|dsQuota
argument_list|,
name|diskspace
operator|+
name|delta
argument_list|)
throw|;
block|}
block|}
comment|/**    * @throws QuotaExceededException if namespace or diskspace quotas is    *         violated after applying the deltas.    */
DECL|method|verifyQuota (long nsDelta, long dsDelta)
name|void
name|verifyQuota
parameter_list|(
name|long
name|nsDelta
parameter_list|,
name|long
name|dsDelta
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|verifyNamespaceQuota
argument_list|(
name|nsDelta
argument_list|)
expr_stmt|;
name|verifyDiskspaceQuota
argument_list|(
name|dsDelta
argument_list|)
expr_stmt|;
block|}
DECL|method|isQuotaSet ()
name|boolean
name|isQuotaSet
parameter_list|()
block|{
return|return
name|nsQuota
operator|>=
literal|0
operator|||
name|dsQuota
operator|>=
literal|0
return|;
block|}
DECL|method|namespaceString ()
specifier|private
name|String
name|namespaceString
parameter_list|()
block|{
return|return
literal|"namespace: "
operator|+
operator|(
name|nsQuota
operator|<
literal|0
condition|?
literal|"-"
else|:
name|namespace
operator|+
literal|"/"
operator|+
name|nsQuota
operator|)
return|;
block|}
DECL|method|diskspaceString ()
specifier|private
name|String
name|diskspaceString
parameter_list|()
block|{
return|return
literal|"diskspace: "
operator|+
operator|(
name|dsQuota
operator|<
literal|0
condition|?
literal|"-"
else|:
name|diskspace
operator|+
literal|"/"
operator|+
name|dsQuota
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Quota["
operator|+
name|namespaceString
argument_list|()
operator|+
literal|", "
operator|+
name|diskspaceString
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

