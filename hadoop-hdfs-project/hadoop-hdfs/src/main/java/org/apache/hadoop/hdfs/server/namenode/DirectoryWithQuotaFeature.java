begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|NSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaByStorageTypeExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|EnumCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_comment
comment|/**  * Quota feature for {@link INodeDirectory}.   */
end_comment

begin_class
DECL|class|DirectoryWithQuotaFeature
specifier|public
specifier|final
class|class
name|DirectoryWithQuotaFeature
implements|implements
name|INode
operator|.
name|Feature
block|{
DECL|field|DEFAULT_NAMESPACE_QUOTA
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NAMESPACE_QUOTA
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|DEFAULT_STORAGE_SPACE_QUOTA
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_STORAGE_SPACE_QUOTA
init|=
name|HdfsConstants
operator|.
name|QUOTA_RESET
decl_stmt|;
DECL|field|quota
specifier|private
name|QuotaCounts
name|quota
decl_stmt|;
DECL|field|usage
specifier|private
name|QuotaCounts
name|usage
decl_stmt|;
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|quota
specifier|private
name|QuotaCounts
name|quota
decl_stmt|;
DECL|field|usage
specifier|private
name|QuotaCounts
name|usage
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|this
operator|.
name|quota
operator|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpace
argument_list|(
name|DEFAULT_NAMESPACE_QUOTA
argument_list|)
operator|.
name|storageSpace
argument_list|(
name|DEFAULT_STORAGE_SPACE_QUOTA
argument_list|)
operator|.
name|typeSpaces
argument_list|(
name|DEFAULT_STORAGE_SPACE_QUOTA
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|usage
operator|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpace
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|nameSpaceQuota (long nameSpaceQuota)
specifier|public
name|Builder
name|nameSpaceQuota
parameter_list|(
name|long
name|nameSpaceQuota
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|.
name|setNameSpace
argument_list|(
name|nameSpaceQuota
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|storageSpaceQuota (long spaceQuota)
specifier|public
name|Builder
name|storageSpaceQuota
parameter_list|(
name|long
name|spaceQuota
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|.
name|setStorageSpace
argument_list|(
name|spaceQuota
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|typeQuotas (EnumCounters<StorageType> typeQuotas)
specifier|public
name|Builder
name|typeQuotas
parameter_list|(
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|typeQuotas
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|.
name|setTypeSpaces
argument_list|(
name|typeQuotas
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|typeQuota (StorageType type, long quota)
specifier|public
name|Builder
name|typeQuota
parameter_list|(
name|StorageType
name|type
parameter_list|,
name|long
name|quota
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|.
name|setTypeSpace
argument_list|(
name|type
argument_list|,
name|quota
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|DirectoryWithQuotaFeature
name|build
parameter_list|()
block|{
return|return
operator|new
name|DirectoryWithQuotaFeature
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|DirectoryWithQuotaFeature (Builder builder)
specifier|private
name|DirectoryWithQuotaFeature
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|=
name|builder
operator|.
name|quota
expr_stmt|;
name|this
operator|.
name|usage
operator|=
name|builder
operator|.
name|usage
expr_stmt|;
block|}
comment|/** @return the quota set or -1 if it is not set. */
DECL|method|getQuota ()
name|QuotaCounts
name|getQuota
parameter_list|()
block|{
return|return
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|quotaCount
argument_list|(
name|this
operator|.
name|quota
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Set this directory's quota    *     * @param nsQuota Namespace quota to be set    * @param ssQuota Storagespace quota to be set    * @param type Storage type of the storage space quota to be set.    *             To set storagespace/namespace quota, type must be null.    */
DECL|method|setQuota (long nsQuota, long ssQuota, StorageType type)
name|void
name|setQuota
parameter_list|(
name|long
name|nsQuota
parameter_list|,
name|long
name|ssQuota
parameter_list|,
name|StorageType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|quota
operator|.
name|setTypeSpace
argument_list|(
name|type
argument_list|,
name|ssQuota
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setQuota
argument_list|(
name|nsQuota
argument_list|,
name|ssQuota
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setQuota (long nsQuota, long ssQuota)
name|void
name|setQuota
parameter_list|(
name|long
name|nsQuota
parameter_list|,
name|long
name|ssQuota
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|.
name|setNameSpace
argument_list|(
name|nsQuota
argument_list|)
expr_stmt|;
name|this
operator|.
name|quota
operator|.
name|setStorageSpace
argument_list|(
name|ssQuota
argument_list|)
expr_stmt|;
block|}
DECL|method|setQuota (long quota, StorageType type)
name|void
name|setQuota
parameter_list|(
name|long
name|quota
parameter_list|,
name|StorageType
name|type
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|.
name|setTypeSpace
argument_list|(
name|type
argument_list|,
name|quota
argument_list|)
expr_stmt|;
block|}
comment|/** Set storage type quota in a batch. (Only used by FSImage load)    *    * @param tsQuotas type space counts for all storage types supporting quota    */
DECL|method|setQuota (EnumCounters<StorageType> tsQuotas)
name|void
name|setQuota
parameter_list|(
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|tsQuotas
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|.
name|setTypeSpaces
argument_list|(
name|tsQuotas
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add current quota usage to counts and return the updated counts    * @param counts counts to be added with current quota usage    * @return counts that have been added with the current qutoa usage    */
DECL|method|AddCurrentSpaceUsage (QuotaCounts counts)
name|QuotaCounts
name|AddCurrentSpaceUsage
parameter_list|(
name|QuotaCounts
name|counts
parameter_list|)
block|{
name|counts
operator|.
name|add
argument_list|(
name|this
operator|.
name|usage
argument_list|)
expr_stmt|;
return|return
name|counts
return|;
block|}
DECL|method|computeContentSummary (final INodeDirectory dir, final ContentSummaryComputationContext summary)
name|ContentSummaryComputationContext
name|computeContentSummary
parameter_list|(
specifier|final
name|INodeDirectory
name|dir
parameter_list|,
specifier|final
name|ContentSummaryComputationContext
name|summary
parameter_list|)
throws|throws
name|AccessControlException
block|{
specifier|final
name|long
name|original
init|=
name|summary
operator|.
name|getCounts
argument_list|()
operator|.
name|getStoragespace
argument_list|()
decl_stmt|;
name|long
name|oldYieldCount
init|=
name|summary
operator|.
name|getYieldCount
argument_list|()
decl_stmt|;
name|dir
operator|.
name|computeDirectoryContentSummary
argument_list|(
name|summary
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
comment|// Check only when the content has not changed in the middle.
if|if
condition|(
name|oldYieldCount
operator|==
name|summary
operator|.
name|getYieldCount
argument_list|()
condition|)
block|{
name|checkStoragespace
argument_list|(
name|dir
argument_list|,
name|summary
operator|.
name|getCounts
argument_list|()
operator|.
name|getStoragespace
argument_list|()
operator|-
name|original
argument_list|)
expr_stmt|;
block|}
return|return
name|summary
return|;
block|}
DECL|method|checkStoragespace (final INodeDirectory dir, final long computed)
specifier|private
name|void
name|checkStoragespace
parameter_list|(
specifier|final
name|INodeDirectory
name|dir
parameter_list|,
specifier|final
name|long
name|computed
parameter_list|)
block|{
if|if
condition|(
operator|-
literal|1
operator|!=
name|quota
operator|.
name|getStorageSpace
argument_list|()
operator|&&
name|usage
operator|.
name|getStorageSpace
argument_list|()
operator|!=
name|computed
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"BUG: Inconsistent storagespace for directory "
operator|+
name|dir
operator|.
name|getFullPathName
argument_list|()
operator|+
literal|". Cached = "
operator|+
name|usage
operator|.
name|getStorageSpace
argument_list|()
operator|+
literal|" != Computed = "
operator|+
name|computed
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Update the space/namespace/type usage of the tree    *     * @param delta the change of the namespace/space/type usage    */
DECL|method|addSpaceConsumed2Cache (QuotaCounts delta)
specifier|public
name|void
name|addSpaceConsumed2Cache
parameter_list|(
name|QuotaCounts
name|delta
parameter_list|)
block|{
name|usage
operator|.
name|add
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
comment|/**     * Sets namespace and storagespace take by the directory rooted    * at this INode. This should be used carefully. It does not check     * for quota violations.    *     * @param namespace size of the directory to be set    * @param storagespace storage space take by all the nodes under this directory    * @param typespaces counters of storage type usage    */
DECL|method|setSpaceConsumed (long namespace, long storagespace, EnumCounters<StorageType> typespaces)
name|void
name|setSpaceConsumed
parameter_list|(
name|long
name|namespace
parameter_list|,
name|long
name|storagespace
parameter_list|,
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|typespaces
parameter_list|)
block|{
name|usage
operator|.
name|setNameSpace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|usage
operator|.
name|setStorageSpace
argument_list|(
name|storagespace
argument_list|)
expr_stmt|;
name|usage
operator|.
name|setTypeSpaces
argument_list|(
name|typespaces
argument_list|)
expr_stmt|;
block|}
DECL|method|setSpaceConsumed (QuotaCounts c)
name|void
name|setSpaceConsumed
parameter_list|(
name|QuotaCounts
name|c
parameter_list|)
block|{
name|usage
operator|.
name|setNameSpace
argument_list|(
name|c
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|usage
operator|.
name|setStorageSpace
argument_list|(
name|c
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
name|usage
operator|.
name|setTypeSpaces
argument_list|(
name|c
operator|.
name|getTypeSpaces
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** @return the namespace and storagespace and typespace consumed. */
DECL|method|getSpaceConsumed ()
specifier|public
name|QuotaCounts
name|getSpaceConsumed
parameter_list|()
block|{
return|return
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|quotaCount
argument_list|(
name|usage
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/** Verify if the namespace quota is violated after applying delta. */
DECL|method|verifyNamespaceQuota (long delta)
specifier|private
name|void
name|verifyNamespaceQuota
parameter_list|(
name|long
name|delta
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
if|if
condition|(
name|Quota
operator|.
name|isViolated
argument_list|(
name|quota
operator|.
name|getNameSpace
argument_list|()
argument_list|,
name|usage
operator|.
name|getNameSpace
argument_list|()
argument_list|,
name|delta
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NSQuotaExceededException
argument_list|(
name|quota
operator|.
name|getNameSpace
argument_list|()
argument_list|,
name|usage
operator|.
name|getNameSpace
argument_list|()
operator|+
name|delta
argument_list|)
throw|;
block|}
block|}
comment|/** Verify if the storagespace quota is violated after applying delta. */
DECL|method|verifyStoragespaceQuota (long delta)
specifier|private
name|void
name|verifyStoragespaceQuota
parameter_list|(
name|long
name|delta
parameter_list|)
throws|throws
name|DSQuotaExceededException
block|{
if|if
condition|(
name|Quota
operator|.
name|isViolated
argument_list|(
name|quota
operator|.
name|getStorageSpace
argument_list|()
argument_list|,
name|usage
operator|.
name|getStorageSpace
argument_list|()
argument_list|,
name|delta
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DSQuotaExceededException
argument_list|(
name|quota
operator|.
name|getStorageSpace
argument_list|()
argument_list|,
name|usage
operator|.
name|getStorageSpace
argument_list|()
operator|+
name|delta
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyQuotaByStorageType (EnumCounters<StorageType> typeDelta)
specifier|private
name|void
name|verifyQuotaByStorageType
parameter_list|(
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|typeDelta
parameter_list|)
throws|throws
name|QuotaByStorageTypeExceededException
block|{
if|if
condition|(
operator|!
name|isQuotaByStorageTypeSet
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getTypesSupportingQuota
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isQuotaByStorageTypeSet
argument_list|(
name|t
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|Quota
operator|.
name|isViolated
argument_list|(
name|quota
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
argument_list|,
name|usage
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
argument_list|,
name|typeDelta
operator|.
name|get
argument_list|(
name|t
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|QuotaByStorageTypeExceededException
argument_list|(
name|quota
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
argument_list|,
name|usage
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
operator|+
name|typeDelta
operator|.
name|get
argument_list|(
name|t
argument_list|)
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * @throws QuotaExceededException if namespace, storagespace or storage type    * space quota is violated after applying the deltas.    */
DECL|method|verifyQuota (QuotaCounts counts)
name|void
name|verifyQuota
parameter_list|(
name|QuotaCounts
name|counts
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|verifyNamespaceQuota
argument_list|(
name|counts
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoragespaceQuota
argument_list|(
name|counts
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
name|verifyQuotaByStorageType
argument_list|(
name|counts
operator|.
name|getTypeSpaces
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|isQuotaSet ()
name|boolean
name|isQuotaSet
parameter_list|()
block|{
return|return
name|quota
operator|.
name|anyNsSsCountGreaterOrEqual
argument_list|(
literal|0
argument_list|)
operator|||
name|quota
operator|.
name|anyTypeSpaceCountGreaterOrEqual
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|isQuotaByStorageTypeSet ()
name|boolean
name|isQuotaByStorageTypeSet
parameter_list|()
block|{
return|return
name|quota
operator|.
name|anyTypeSpaceCountGreaterOrEqual
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|isQuotaByStorageTypeSet (StorageType t)
name|boolean
name|isQuotaByStorageTypeSet
parameter_list|(
name|StorageType
name|t
parameter_list|)
block|{
return|return
name|quota
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
operator|>=
literal|0
return|;
block|}
DECL|method|namespaceString ()
specifier|private
name|String
name|namespaceString
parameter_list|()
block|{
return|return
literal|"namespace: "
operator|+
operator|(
name|quota
operator|.
name|getNameSpace
argument_list|()
operator|<
literal|0
condition|?
literal|"-"
else|:
name|usage
operator|.
name|getNameSpace
argument_list|()
operator|+
literal|"/"
operator|+
name|quota
operator|.
name|getNameSpace
argument_list|()
operator|)
return|;
block|}
DECL|method|storagespaceString ()
specifier|private
name|String
name|storagespaceString
parameter_list|()
block|{
return|return
literal|"storagespace: "
operator|+
operator|(
name|quota
operator|.
name|getStorageSpace
argument_list|()
operator|<
literal|0
condition|?
literal|"-"
else|:
name|usage
operator|.
name|getStorageSpace
argument_list|()
operator|+
literal|"/"
operator|+
name|quota
operator|.
name|getStorageSpace
argument_list|()
operator|)
return|;
block|}
DECL|method|typeSpaceString ()
specifier|private
name|String
name|typeSpaceString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|t
range|:
name|StorageType
operator|.
name|getTypesSupportingQuota
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"StorageType: "
operator|+
name|t
operator|+
operator|(
name|quota
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
operator|<
literal|0
condition|?
literal|"-"
else|:
name|usage
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
operator|+
literal|"/"
operator|+
name|usage
operator|.
name|getTypeSpace
argument_list|(
name|t
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Quota["
operator|+
name|namespaceString
argument_list|()
operator|+
literal|", "
operator|+
name|storagespaceString
argument_list|()
operator|+
literal|", "
operator|+
name|typeSpaceString
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

