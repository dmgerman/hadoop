begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_comment
comment|/**  * XAttrStorage is used to read and set xattrs for an inode.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|XAttrStorage
specifier|public
class|class
name|XAttrStorage
block|{
DECL|field|internedNames
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|internedNames
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|/**    * Reads the existing extended attributes of an inode. If the     * inode does not have an<code>XAttr</code>, then this method    * returns an empty list.    *<p/>    * Must be called while holding the FSDirectory read lock.    *    * @param inode INode to read    * @param snapshotId    * @return List<XAttr><code>XAttr</code> list.     */
DECL|method|readINodeXAttrs (INode inode, int snapshotId)
specifier|public
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|readINodeXAttrs
parameter_list|(
name|INode
name|inode
parameter_list|,
name|int
name|snapshotId
parameter_list|)
block|{
name|XAttrFeature
name|f
init|=
name|inode
operator|.
name|getXAttrFeature
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
return|return
name|f
operator|==
literal|null
condition|?
name|ImmutableList
operator|.
expr|<
name|XAttr
operator|>
name|of
argument_list|()
else|:
name|f
operator|.
name|getXAttrs
argument_list|()
return|;
block|}
comment|/**    * Reads the existing extended attributes of an inode.    *<p/>    * Must be called while holding the FSDirectory read lock.    *    * @param inodeAttr INodeAttributes to read.    * @return List<XAttr><code>XAttr</code> list.    */
DECL|method|readINodeXAttrs (INodeAttributes inodeAttr)
specifier|public
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|readINodeXAttrs
parameter_list|(
name|INodeAttributes
name|inodeAttr
parameter_list|)
block|{
name|XAttrFeature
name|f
init|=
name|inodeAttr
operator|.
name|getXAttrFeature
argument_list|()
decl_stmt|;
return|return
name|f
operator|==
literal|null
condition|?
name|ImmutableList
operator|.
expr|<
name|XAttr
operator|>
name|of
argument_list|()
else|:
name|f
operator|.
name|getXAttrs
argument_list|()
return|;
block|}
comment|/**    * Update xattrs of inode.    *<p/>    * Must be called while holding the FSDirectory write lock.    *     * @param inode INode to update    * @param xAttrs to update xAttrs.    * @param snapshotId id of the latest snapshot of the inode    */
DECL|method|updateINodeXAttrs (INode inode, List<XAttr> xAttrs, int snapshotId)
specifier|public
specifier|static
name|void
name|updateINodeXAttrs
parameter_list|(
name|INode
name|inode
parameter_list|,
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|,
name|int
name|snapshotId
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
if|if
condition|(
name|xAttrs
operator|==
literal|null
operator|||
name|xAttrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|inode
operator|.
name|getXAttrFeature
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|inode
operator|.
name|removeXAttrFeature
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// Dedupe the xAttr name and save them into a new interned list
name|List
argument_list|<
name|XAttr
argument_list|>
name|internedXAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|xAttrs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XAttr
name|xAttr
range|:
name|xAttrs
control|)
block|{
specifier|final
name|String
name|name
init|=
name|xAttr
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|internedName
init|=
name|internedNames
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|internedName
operator|==
literal|null
condition|)
block|{
name|internedName
operator|=
name|name
expr_stmt|;
name|internedNames
operator|.
name|put
argument_list|(
name|internedName
argument_list|,
name|internedName
argument_list|)
expr_stmt|;
block|}
name|XAttr
name|internedXAttr
init|=
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
name|internedName
argument_list|)
operator|.
name|setNameSpace
argument_list|(
name|xAttr
operator|.
name|getNameSpace
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|xAttr
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|internedXAttrs
operator|.
name|add
argument_list|(
name|internedXAttr
argument_list|)
expr_stmt|;
block|}
comment|// Save the list of interned xattrs
name|ImmutableList
argument_list|<
name|XAttr
argument_list|>
name|newXAttrs
init|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|internedXAttrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|inode
operator|.
name|getXAttrFeature
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|inode
operator|.
name|removeXAttrFeature
argument_list|(
name|snapshotId
argument_list|)
expr_stmt|;
block|}
name|inode
operator|.
name|addXAttrFeature
argument_list|(
operator|new
name|XAttrFeature
argument_list|(
name|newXAttrs
argument_list|)
argument_list|,
name|snapshotId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

