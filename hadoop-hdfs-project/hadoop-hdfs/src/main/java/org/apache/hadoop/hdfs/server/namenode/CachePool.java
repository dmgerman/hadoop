begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * A CachePool describes a set of cache resources being managed by the NameNode.  * User caching requests are billed to the cache pool specified in the request.  *  * CachePools are uniquely identified by a numeric id as well as the  * {@link CachePoolInfo} pool name. Mutable metadata is contained in  * CachePoolInfo, including pool name, owner, group, and permissions.  * See this class for more details.  */
end_comment

begin_class
DECL|class|CachePool
specifier|public
specifier|final
class|class
name|CachePool
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CachePool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|long
name|id
decl_stmt|;
DECL|field|info
specifier|private
name|CachePoolInfo
name|info
decl_stmt|;
DECL|method|CachePool (long id)
specifier|public
name|CachePool
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|info
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|CachePool (long id, String poolName, String ownerName, String groupName, FsPermission mode, Integer weight)
name|CachePool
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|poolName
parameter_list|,
name|String
name|ownerName
parameter_list|,
name|String
name|groupName
parameter_list|,
name|FsPermission
name|mode
parameter_list|,
name|Integer
name|weight
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
comment|// Set CachePoolInfo default fields if null
if|if
condition|(
name|poolName
operator|==
literal|null
operator|||
name|poolName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid empty cache pool name"
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ownerName
operator|==
literal|null
condition|)
block|{
name|ugi
operator|=
name|NameNode
operator|.
name|getRemoteUser
argument_list|()
expr_stmt|;
name|ownerName
operator|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|groupName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
name|ugi
operator|=
name|NameNode
operator|.
name|getRemoteUser
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|groups
init|=
name|ugi
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|groups
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to get group names from UGI "
operator|+
name|ugi
argument_list|)
throw|;
block|}
name|groupName
operator|=
name|groups
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|==
literal|null
condition|)
block|{
name|mode
operator|=
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|weight
operator|==
literal|null
condition|)
block|{
name|weight
operator|=
literal|100
expr_stmt|;
block|}
name|CachePoolInfo
operator|.
name|Builder
name|builder
init|=
name|CachePoolInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setPoolName
argument_list|(
name|poolName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|ownerName
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|CachePool (long id, CachePoolInfo info)
specifier|public
name|CachePool
parameter_list|(
name|long
name|id
parameter_list|,
name|CachePoolInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
comment|/**    * @return id of the pool    */
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**    * Get information about this cache pool.    *    * @return    *          Cache pool information.    */
DECL|method|getInfo ()
specifier|public
name|CachePoolInfo
name|getInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
DECL|method|setInfo (CachePoolInfo info)
name|void
name|setInfo
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
operator|.
name|append
argument_list|(
literal|"id:"
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|", info:"
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
name|info
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CachePool
name|rhs
init|=
operator|(
name|CachePool
operator|)
name|obj
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|id
argument_list|,
name|rhs
operator|.
name|id
argument_list|)
operator|.
name|append
argument_list|(
name|info
argument_list|,
name|rhs
operator|.
name|info
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
block|}
end_class

end_unit

