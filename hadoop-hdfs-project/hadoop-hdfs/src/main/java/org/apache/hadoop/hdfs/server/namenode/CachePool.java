begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * A CachePool describes a set of cache resources being managed by the NameNode.  * User caching requests are billed to the cache pool specified in the request.  *  * This is an internal class, only used on the NameNode.  For identifying or  * describing a cache pool to clients, please use CachePoolInfo.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CachePool
specifier|public
specifier|final
class|class
name|CachePool
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CachePool
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Nonnull
DECL|field|poolName
specifier|private
specifier|final
name|String
name|poolName
decl_stmt|;
annotation|@
name|Nonnull
DECL|field|ownerName
specifier|private
name|String
name|ownerName
decl_stmt|;
annotation|@
name|Nonnull
DECL|field|groupName
specifier|private
name|String
name|groupName
decl_stmt|;
annotation|@
name|Nonnull
DECL|field|mode
specifier|private
name|FsPermission
name|mode
decl_stmt|;
DECL|field|weight
specifier|private
name|int
name|weight
decl_stmt|;
DECL|method|CachePool (String poolName, String ownerName, String groupName, FsPermission mode, Integer weight)
specifier|public
name|CachePool
parameter_list|(
name|String
name|poolName
parameter_list|,
name|String
name|ownerName
parameter_list|,
name|String
name|groupName
parameter_list|,
name|FsPermission
name|mode
parameter_list|,
name|Integer
name|weight
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|poolName
operator|=
name|poolName
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ownerName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
name|ugi
operator|=
name|NameNode
operator|.
name|getRemoteUser
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|ownerName
operator|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|ownerName
operator|=
name|ownerName
expr_stmt|;
block|}
if|if
condition|(
name|groupName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
name|ugi
operator|=
name|NameNode
operator|.
name|getRemoteUser
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|groupName
operator|=
name|ugi
operator|.
name|getPrimaryGroupName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|groupName
operator|=
name|ownerName
expr_stmt|;
block|}
name|this
operator|.
name|mode
operator|=
name|mode
operator|!=
literal|null
condition|?
operator|new
name|FsPermission
argument_list|(
name|mode
argument_list|)
else|:
name|FsPermission
operator|.
name|getCachePoolDefault
argument_list|()
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|weight
operator|!=
literal|null
condition|?
name|weight
else|:
literal|100
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|poolName
return|;
block|}
DECL|method|getOwnerName ()
specifier|public
name|String
name|getOwnerName
parameter_list|()
block|{
return|return
name|ownerName
return|;
block|}
DECL|method|setOwnerName (String ownerName)
specifier|public
name|CachePool
name|setOwnerName
parameter_list|(
name|String
name|ownerName
parameter_list|)
block|{
name|this
operator|.
name|ownerName
operator|=
name|ownerName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getGroupName ()
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|groupName
return|;
block|}
DECL|method|setGroupName (String groupName)
specifier|public
name|CachePool
name|setGroupName
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|this
operator|.
name|groupName
operator|=
name|groupName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getMode ()
specifier|public
name|FsPermission
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
DECL|method|setMode (FsPermission mode)
specifier|public
name|CachePool
name|setMode
parameter_list|(
name|FsPermission
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
operator|new
name|FsPermission
argument_list|(
name|mode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getWeight ()
specifier|public
name|int
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
DECL|method|setWeight (int weight)
specifier|public
name|CachePool
name|setWeight
parameter_list|(
name|int
name|weight
parameter_list|)
block|{
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Get information about this cache pool.    *    * @param fullInfo    *          If true, only the name will be returned (i.e., what you     *          would get if you didn't have read permission for this pool.)    * @return    *          Cache pool information.    */
DECL|method|getInfo (boolean fullInfo)
specifier|public
name|CachePoolInfo
name|getInfo
parameter_list|(
name|boolean
name|fullInfo
parameter_list|)
block|{
name|CachePoolInfo
name|info
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fullInfo
condition|)
block|{
return|return
name|info
return|;
block|}
return|return
name|info
operator|.
name|setOwnerName
argument_list|(
name|ownerName
argument_list|)
operator|.
name|setGroupName
argument_list|(
name|groupName
argument_list|)
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|mode
argument_list|)
argument_list|)
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
return|;
block|}
DECL|method|getInfo (FSPermissionChecker pc)
specifier|public
name|CachePoolInfo
name|getInfo
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|)
block|{
return|return
name|getInfo
argument_list|(
name|pc
operator|.
name|checkPermission
argument_list|(
name|this
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
operator|.
name|append
argument_list|(
literal|"poolName:"
argument_list|)
operator|.
name|append
argument_list|(
name|poolName
argument_list|)
operator|.
name|append
argument_list|(
literal|", ownerName:"
argument_list|)
operator|.
name|append
argument_list|(
name|ownerName
argument_list|)
operator|.
name|append
argument_list|(
literal|", groupName:"
argument_list|)
operator|.
name|append
argument_list|(
name|groupName
argument_list|)
operator|.
name|append
argument_list|(
literal|", mode:"
argument_list|)
operator|.
name|append
argument_list|(
name|mode
argument_list|)
operator|.
name|append
argument_list|(
literal|", weight:"
argument_list|)
operator|.
name|append
argument_list|(
name|weight
argument_list|)
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

