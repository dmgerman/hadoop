begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ChunkManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|AsynchronousFileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_comment
comment|/**  * Set of utility functions used by the chunk Manager.  */
end_comment

begin_class
DECL|class|ChunkUtils
specifier|public
specifier|final
class|class
name|ChunkUtils
block|{
comment|/* Never constructed. */
DECL|method|ChunkUtils ()
specifier|private
name|ChunkUtils
parameter_list|()
block|{   }
comment|/**    * Checks if we are getting a request to overwrite an existing range of    * chunk.    *    * @param chunkFile - File    * @param chunkInfo - Buffer to write    * @return bool    */
DECL|method|isOverWriteRequested (File chunkFile, ChunkInfo chunkInfo)
specifier|public
specifier|static
name|boolean
name|isOverWriteRequested
parameter_list|(
name|File
name|chunkFile
parameter_list|,
name|ChunkInfo
name|chunkInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|chunkFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|long
name|offset
init|=
name|chunkInfo
operator|.
name|getOffset
argument_list|()
decl_stmt|;
return|return
name|offset
operator|<
name|chunkFile
operator|.
name|length
argument_list|()
return|;
block|}
comment|/**    * Overwrite is permitted if an only if the user explicitly asks for it. We    * permit this iff the key/value pair contains a flag called    * [OverWriteRequested, true].    *    * @param chunkInfo - Chunk info    * @return true if the user asks for it.    */
DECL|method|isOverWritePermitted (ChunkInfo chunkInfo)
specifier|public
specifier|static
name|boolean
name|isOverWritePermitted
parameter_list|(
name|ChunkInfo
name|chunkInfo
parameter_list|)
block|{
name|String
name|overWrite
init|=
name|chunkInfo
operator|.
name|getMetadata
argument_list|()
operator|.
name|get
argument_list|(
name|OzoneConsts
operator|.
name|CHUNK_OVERWRITE
argument_list|)
decl_stmt|;
return|return
operator|(
name|overWrite
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|overWrite
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|overWrite
argument_list|)
operator|)
return|;
block|}
comment|/**    * Validates chunk data and returns a file object to Chunk File that we are    * expected to write data to.    *    * @param pipeline - pipeline.    * @param data     - container data.    * @param info     - chunk info.    * @return File    * @throws IOException    */
DECL|method|validateChunk (Pipeline pipeline, ContainerData data, ChunkInfo info)
specifier|public
specifier|static
name|File
name|validateChunk
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerData
name|data
parameter_list|,
name|ChunkInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|chunkFile
init|=
name|getChunkFile
argument_list|(
name|pipeline
argument_list|,
name|data
argument_list|,
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|ChunkUtils
operator|.
name|isOverWriteRequested
argument_list|(
name|chunkFile
argument_list|,
name|info
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|ChunkUtils
operator|.
name|isOverWritePermitted
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Rejecting write chunk request. Chunk overwrite "
operator|+
literal|"without explicit request. {}"
argument_list|,
name|info
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Rejecting write chunk request. OverWrite "
operator|+
literal|"flag required."
operator|+
name|info
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|chunkFile
return|;
block|}
comment|/**    * Validates that Path to chunk file exists.    *    * @param pipeline - Container Info.    * @param data     - Container Data    * @param info     - Chunk info    * @return - File.    * @throws IOException    */
DECL|method|getChunkFile (Pipeline pipeline, ContainerData data, ChunkInfo info)
specifier|public
specifier|static
name|File
name|getChunkFile
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerData
name|data
parameter_list|,
name|ChunkInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid container Name: {}"
argument_list|,
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to find the container Name: "
operator|+
name|pipeline
operator|.
name|getContainerName
argument_list|()
argument_list|)
throw|;
block|}
name|File
name|dataDir
init|=
name|ContainerUtils
operator|.
name|getDataDirectory
argument_list|(
name|data
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to find the data directory: {}"
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to find the data directory: "
operator|+
name|dataDir
argument_list|)
throw|;
block|}
return|return
name|dataDir
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|info
operator|.
name|getChunkName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
return|;
block|}
comment|/**    * Writes the data in chunk Info to the specified location in the chunkfile.    *    * @param chunkFile - File to write data to.    * @param chunkInfo - Data stream to write.    * @throws IOException    */
DECL|method|writeData (File chunkFile, ChunkInfo chunkInfo, byte[] data)
specifier|public
specifier|static
name|void
name|writeData
parameter_list|(
name|File
name|chunkFile
parameter_list|,
name|ChunkInfo
name|chunkInfo
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|NoSuchAlgorithmException
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|!=
name|chunkInfo
operator|.
name|getLen
argument_list|()
condition|)
block|{
name|String
name|err
init|=
name|String
operator|.
name|format
argument_list|(
literal|"data array does not match the length "
operator|+
literal|"specified. DataLen: %d Byte Array: %d"
argument_list|,
name|chunkInfo
operator|.
name|getLen
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|err
argument_list|)
throw|;
block|}
name|AsynchronousFileChannel
name|file
init|=
literal|null
decl_stmt|;
name|FileLock
name|lock
init|=
literal|null
decl_stmt|;
try|try
block|{
name|file
operator|=
name|AsynchronousFileChannel
operator|.
name|open
argument_list|(
name|chunkFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|,
name|StandardOpenOption
operator|.
name|SPARSE
argument_list|,
name|StandardOpenOption
operator|.
name|SYNC
argument_list|)
expr_stmt|;
name|lock
operator|=
name|file
operator|.
name|lock
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|chunkInfo
operator|.
name|getChecksum
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|chunkInfo
operator|.
name|getChecksum
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|verifyChecksum
argument_list|(
name|chunkInfo
argument_list|,
name|data
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|file
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
argument_list|,
name|chunkInfo
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|data
operator|.
name|length
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid write size found. Size:{}  Expected: {} "
argument_list|,
name|size
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid write size found. Size: "
operator|+
name|size
operator|+
literal|" Expected: "
operator|+
name|data
operator|.
name|length
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Verifies the checksum of a chunk against the data buffer.    *    * @param chunkInfo - Chunk Info.    * @param data      - data buffer    * @param log       - log    * @throws NoSuchAlgorithmException    * @throws IOException    */
DECL|method|verifyChecksum (ChunkInfo chunkInfo, byte[] data, Logger log)
specifier|private
specifier|static
name|void
name|verifyChecksum
parameter_list|(
name|ChunkInfo
name|chunkInfo
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|Logger
name|log
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|IOException
block|{
name|MessageDigest
name|sha
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
name|sha
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha
operator|.
name|digest
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|chunkInfo
operator|.
name|getChecksum
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Checksum mismatch. Provided: {} , computed: {}"
argument_list|,
name|chunkInfo
operator|.
name|getChecksum
argument_list|()
argument_list|,
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|sha
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Checksum mismatch. Provided: "
operator|+
name|chunkInfo
operator|.
name|getChecksum
argument_list|()
operator|+
literal|" , computed: "
operator|+
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|sha
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Reads data from an existing chunk file.    *    * @param chunkFile - file where data lives.    * @param data      - chunk definition.    * @return ByteBuffer    * @throws IOException    * @throws ExecutionException    * @throws InterruptedException    */
DECL|method|readData (File chunkFile, ChunkInfo data)
specifier|public
specifier|static
name|ByteBuffer
name|readData
parameter_list|(
name|File
name|chunkFile
parameter_list|,
name|ChunkInfo
name|data
parameter_list|)
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|NoSuchAlgorithmException
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|chunkFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to find the chunk file. chunk info : {}"
argument_list|,
name|data
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to find the chunk file. chunk info "
operator|+
name|data
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|AsynchronousFileChannel
name|file
init|=
literal|null
decl_stmt|;
name|FileLock
name|lock
init|=
literal|null
decl_stmt|;
try|try
block|{
name|file
operator|=
name|AsynchronousFileChannel
operator|.
name|open
argument_list|(
name|chunkFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
expr_stmt|;
name|lock
operator|=
name|file
operator|.
name|lock
argument_list|(
name|data
operator|.
name|getOffset
argument_list|()
argument_list|,
name|data
operator|.
name|getLen
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
operator|(
name|int
operator|)
name|data
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|file
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|data
operator|.
name|getOffset
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|getChecksum
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|data
operator|.
name|getChecksum
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|verifyChecksum
argument_list|(
name|data
argument_list|,
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns a CreateContainer Response. This call is used by create and delete    * containers which have null success responses.    *    * @param msg Request    * @return Response.    */
specifier|public
specifier|static
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
DECL|method|getChunkResponse (ContainerProtos.ContainerCommandRequestProto msg)
name|getChunkResponse
parameter_list|(
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|msg
parameter_list|)
block|{
return|return
name|ContainerUtils
operator|.
name|getContainerResponse
argument_list|(
name|msg
argument_list|)
return|;
block|}
comment|/**    * Gets a response to the read chunk calls.    * @param msg - Msg    * @param data  - Data    * @param info  - Info    * @return    Response.    */
specifier|public
specifier|static
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
DECL|method|getReadChunkResponse (ContainerProtos.ContainerCommandRequestProto msg, byte[] data, ChunkInfo info)
name|getReadChunkResponse
parameter_list|(
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|msg
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|ChunkInfo
name|info
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ReadChunkResponseProto
operator|.
name|Builder
name|response
init|=
name|ContainerProtos
operator|.
name|ReadChunkResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setChunkData
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setData
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setPipeline
argument_list|(
name|msg
operator|.
name|getReadChunk
argument_list|()
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
operator|.
name|Builder
name|builder
init|=
name|ContainerUtils
operator|.
name|getContainerResponse
argument_list|(
name|msg
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setReadChunk
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

