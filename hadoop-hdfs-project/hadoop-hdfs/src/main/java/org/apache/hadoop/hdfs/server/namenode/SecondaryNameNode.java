begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|InconsistentFSStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|terminate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
operator|.
name|EditLogFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorageRetentionManager
operator|.
name|StoragePurger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|source
operator|.
name|JvmMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**********************************************************  * The Secondary NameNode is a helper to the primary NameNode.  * The Secondary is responsible for supporting periodic checkpoints   * of the HDFS metadata. The current design allows only one Secondary  * NameNode per HDFs cluster.  *  * The Secondary NameNode is a daemon that periodically wakes  * up (determined by the schedule specified in the configuration),  * triggers a periodic checkpoint and then goes back to sleep.  * The Secondary NameNode uses the ClientProtocol to talk to the  * primary NameNode.  *  **********************************************************/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|SecondaryNameNode
specifier|public
class|class
name|SecondaryNameNode
implements|implements
name|Runnable
block|{
static|static
block|{
name|HdfsConfiguration
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SecondaryNameNode
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|starttime
specifier|private
specifier|final
name|long
name|starttime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
DECL|field|lastCheckpointTime
specifier|private
specifier|volatile
name|long
name|lastCheckpointTime
init|=
literal|0
decl_stmt|;
DECL|field|fsName
specifier|private
name|String
name|fsName
decl_stmt|;
DECL|field|checkpointImage
specifier|private
name|CheckpointStorage
name|checkpointImage
decl_stmt|;
DECL|field|namenode
specifier|private
name|NamenodeProtocol
name|namenode
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|nameNodeAddr
specifier|private
name|InetSocketAddress
name|nameNodeAddr
decl_stmt|;
DECL|field|shouldRun
specifier|private
specifier|volatile
name|boolean
name|shouldRun
decl_stmt|;
DECL|field|infoServer
specifier|private
name|HttpServer
name|infoServer
decl_stmt|;
DECL|field|infoPort
specifier|private
name|int
name|infoPort
decl_stmt|;
DECL|field|infoBindAddress
specifier|private
name|String
name|infoBindAddress
decl_stmt|;
DECL|field|checkpointDirs
specifier|private
name|Collection
argument_list|<
name|URI
argument_list|>
name|checkpointDirs
decl_stmt|;
DECL|field|checkpointEditsDirs
specifier|private
name|List
argument_list|<
name|URI
argument_list|>
name|checkpointEditsDirs
decl_stmt|;
DECL|field|checkpointConf
specifier|private
name|CheckpointConf
name|checkpointConf
decl_stmt|;
DECL|field|namesystem
specifier|private
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|checkpointThread
specifier|private
name|Thread
name|checkpointThread
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" Status"
operator|+
literal|"\nName Node Address    : "
operator|+
name|nameNodeAddr
operator|+
literal|"\nStart Time           : "
operator|+
operator|new
name|Date
argument_list|(
name|starttime
argument_list|)
operator|+
literal|"\nLast Checkpoint Time : "
operator|+
operator|(
name|lastCheckpointTime
operator|==
literal|0
condition|?
literal|"--"
else|:
operator|new
name|Date
argument_list|(
name|lastCheckpointTime
argument_list|)
operator|)
operator|+
literal|"\nCheckpoint Period    : "
operator|+
name|checkpointConf
operator|.
name|getPeriod
argument_list|()
operator|+
literal|" seconds"
operator|+
literal|"\nCheckpoint Size      : "
operator|+
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|checkpointConf
operator|.
name|getTxnCount
argument_list|()
argument_list|)
operator|+
literal|" (= "
operator|+
name|checkpointConf
operator|.
name|getTxnCount
argument_list|()
operator|+
literal|" bytes)"
operator|+
literal|"\nCheckpoint Dirs      : "
operator|+
name|checkpointDirs
operator|+
literal|"\nCheckpoint Edits Dirs: "
operator|+
name|checkpointEditsDirs
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getFSImage ()
name|FSImage
name|getFSImage
parameter_list|()
block|{
return|return
name|checkpointImage
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMergeErrorCount ()
name|int
name|getMergeErrorCount
parameter_list|()
block|{
return|return
name|checkpointImage
operator|.
name|getMergeErrorCount
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getFSNamesystem ()
name|FSNamesystem
name|getFSNamesystem
parameter_list|()
block|{
return|return
name|namesystem
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setFSImage (CheckpointStorage image)
name|void
name|setFSImage
parameter_list|(
name|CheckpointStorage
name|image
parameter_list|)
block|{
name|this
operator|.
name|checkpointImage
operator|=
name|image
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNameNode ()
name|NamenodeProtocol
name|getNameNode
parameter_list|()
block|{
return|return
name|namenode
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setNameNode (NamenodeProtocol namenode)
name|void
name|setNameNode
parameter_list|(
name|NamenodeProtocol
name|namenode
parameter_list|)
block|{
name|this
operator|.
name|namenode
operator|=
name|namenode
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCheckpointDirs ()
name|List
argument_list|<
name|URI
argument_list|>
name|getCheckpointDirs
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|checkpointDirs
argument_list|)
return|;
block|}
comment|/**    * Create a connection to the primary namenode.    */
DECL|method|SecondaryNameNode (Configuration conf)
specifier|public
name|SecondaryNameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
operator|new
name|CommandLineOpts
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|SecondaryNameNode (Configuration conf, CommandLineOpts commandLineOpts)
specifier|public
name|SecondaryNameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CommandLineOpts
name|commandLineOpts
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|nsId
init|=
name|DFSUtil
operator|.
name|getSecondaryNameServiceId
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot use SecondaryNameNode in an HA cluster."
operator|+
literal|" The Standby Namenode will perform checkpointing."
argument_list|)
throw|;
block|}
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|initialize
argument_list|(
name|conf
argument_list|,
name|commandLineOpts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|HadoopIllegalArgumentException
name|e
parameter_list|)
block|{
name|shutdown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|getHttpAddress (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getHttpAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Initialize SecondaryNameNode.    * @param commandLineOpts     */
DECL|method|initialize (final Configuration conf, CommandLineOpts commandLineOpts)
specifier|private
name|void
name|initialize
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|CommandLineOpts
name|commandLineOpts
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|InetSocketAddress
name|infoSocAddr
init|=
name|getHttpAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|infoBindAddress
operator|=
name|infoSocAddr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|SecurityUtil
operator|.
name|login
argument_list|(
name|conf
argument_list|,
name|DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY
argument_list|,
name|DFS_SECONDARY_NAMENODE_USER_NAME_KEY
argument_list|,
name|infoBindAddress
argument_list|)
expr_stmt|;
block|}
comment|// initiate Java VM metrics
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"SecondaryNameNode"
argument_list|)
expr_stmt|;
name|JvmMetrics
operator|.
name|create
argument_list|(
literal|"SecondaryNameNode"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFS_METRICS_SESSION_ID_KEY
argument_list|)
argument_list|,
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create connection to the namenode.
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|nameNodeAddr
operator|=
name|NameNode
operator|.
name|getServiceAddress
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nameNodeAddr
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
comment|// initialize checkpoint directories
name|fsName
operator|=
name|getInfoServer
argument_list|()
expr_stmt|;
name|checkpointDirs
operator|=
name|FSImage
operator|.
name|getCheckpointDirs
argument_list|(
name|conf
argument_list|,
literal|"/tmp/hadoop/dfs/namesecondary"
argument_list|)
expr_stmt|;
name|checkpointEditsDirs
operator|=
name|FSImage
operator|.
name|getCheckpointEditsDirs
argument_list|(
name|conf
argument_list|,
literal|"/tmp/hadoop/dfs/namesecondary"
argument_list|)
expr_stmt|;
name|checkpointImage
operator|=
operator|new
name|CheckpointStorage
argument_list|(
name|conf
argument_list|,
name|checkpointDirs
argument_list|,
name|checkpointEditsDirs
argument_list|)
expr_stmt|;
name|checkpointImage
operator|.
name|recoverCreate
argument_list|(
name|commandLineOpts
operator|.
name|shouldFormat
argument_list|()
argument_list|)
expr_stmt|;
name|namesystem
operator|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|,
name|checkpointImage
argument_list|)
expr_stmt|;
comment|// Initialize other scheduling parameters from the configuration
name|checkpointConf
operator|=
operator|new
name|CheckpointConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// initialize the webserver for uploading files.
name|int
name|tmpInfoPort
init|=
name|infoSocAddr
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|infoServer
operator|=
operator|new
name|HttpServer
argument_list|(
literal|"secondary"
argument_list|,
name|infoBindAddress
argument_list|,
name|tmpInfoPort
argument_list|,
name|tmpInfoPort
operator|==
literal|0
argument_list|,
name|conf
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_ADMIN
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|)
block|{
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|initSpnego
argument_list|(
name|conf
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_SECONDARY_NAMENODE_INTERNAL_SPNEGO_USER_NAME_KEY
argument_list|,
name|DFSUtil
operator|.
name|getSpnegoKeytabKey
argument_list|(
name|conf
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|infoServer
operator|.
name|setAttribute
argument_list|(
literal|"secondary.name.node"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|infoServer
operator|.
name|setAttribute
argument_list|(
literal|"name.system.image"
argument_list|,
name|checkpointImage
argument_list|)
expr_stmt|;
name|infoServer
operator|.
name|setAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|infoServer
operator|.
name|addInternalServlet
argument_list|(
literal|"getimage"
argument_list|,
literal|"/getimage"
argument_list|,
name|GetImageServlet
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|infoServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Web server init done"
argument_list|)
expr_stmt|;
comment|// The web-server port can be ephemeral... ensure we have the correct info
name|infoPort
operator|=
name|infoServer
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|,
name|infoBindAddress
operator|+
literal|":"
operator|+
name|infoPort
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Secondary Web-server up at: "
operator|+
name|infoBindAddress
operator|+
literal|":"
operator|+
name|infoPort
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checkpoint Period   :"
operator|+
name|checkpointConf
operator|.
name|getPeriod
argument_list|()
operator|+
literal|" secs "
operator|+
literal|"("
operator|+
name|checkpointConf
operator|.
name|getPeriod
argument_list|()
operator|/
literal|60
operator|+
literal|" min)"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Log Size Trigger    :"
operator|+
name|checkpointConf
operator|.
name|getTxnCount
argument_list|()
operator|+
literal|" txns"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait for the service to finish.    * (Normally, it runs forever.)    */
DECL|method|join ()
specifier|private
name|void
name|join
parameter_list|()
block|{
try|try
block|{
name|infoServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{     }
block|}
comment|/**    * Shut down this instance of the datanode.    * Returns only after shutdown is complete.    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|checkpointThread
operator|!=
literal|null
condition|)
block|{
name|checkpointThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|checkpointThread
operator|.
name|join
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted waiting to join on checkpointer thread"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// maintain status
block|}
block|}
try|try
block|{
if|if
condition|(
name|infoServer
operator|!=
literal|null
condition|)
name|infoServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception shutting down SecondaryNameNode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|checkpointImage
operator|!=
literal|null
condition|)
name|checkpointImage
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while closing CheckpointStorage"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|SecurityUtil
operator|.
name|doAsLoginUserOrFatal
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|doWork
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// The main work loop
comment|//
DECL|method|doWork ()
specifier|public
name|void
name|doWork
parameter_list|()
block|{
comment|//
comment|// Poll the Namenode (once every checkpointCheckPeriod seconds) to find the
comment|// number of transactions in the edit log that haven't yet been checkpointed.
comment|//
name|long
name|period
init|=
name|checkpointConf
operator|.
name|getCheckPeriod
argument_list|()
decl_stmt|;
name|int
name|maxRetries
init|=
name|checkpointConf
operator|.
name|getMaxRetriesOnMergeError
argument_list|()
decl_stmt|;
while|while
condition|(
name|shouldRun
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
operator|*
name|period
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// do nothing
block|}
if|if
condition|(
operator|!
name|shouldRun
condition|)
block|{
break|break;
block|}
try|try
block|{
comment|// We may have lost our ticket since last checkpoint, log in again, just in case
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|reloginFromKeytab
argument_list|()
expr_stmt|;
name|long
name|now
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldCheckpointBasedOnCount
argument_list|()
operator|||
name|now
operator|>=
name|lastCheckpointTime
operator|+
literal|1000
operator|*
name|checkpointConf
operator|.
name|getPeriod
argument_list|()
condition|)
block|{
name|doCheckpoint
argument_list|()
expr_stmt|;
name|lastCheckpointTime
operator|=
name|now
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in doCheckpoint"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// Prevent a huge number of edits from being created due to
comment|// unrecoverable conditions and endless retries.
if|if
condition|(
name|checkpointImage
operator|.
name|getMergeErrorCount
argument_list|()
operator|>
name|maxRetries
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Merging failed "
operator|+
name|checkpointImage
operator|.
name|getMergeErrorCount
argument_list|()
operator|+
literal|" times."
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Throwable Exception in doCheckpoint"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Download<code>fsimage</code> and<code>edits</code>    * files from the name-node.    * @return true if a new image has been downloaded and needs to be loaded    * @throws IOException    */
DECL|method|downloadCheckpointFiles ( final String nnHostPort, final FSImage dstImage, final CheckpointSignature sig, final RemoteEditLogManifest manifest )
specifier|static
name|boolean
name|downloadCheckpointFiles
parameter_list|(
specifier|final
name|String
name|nnHostPort
parameter_list|,
specifier|final
name|FSImage
name|dstImage
parameter_list|,
specifier|final
name|CheckpointSignature
name|sig
parameter_list|,
specifier|final
name|RemoteEditLogManifest
name|manifest
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Sanity check manifest - these could happen if, eg, someone on the
comment|// NN side accidentally rmed the storage directories
if|if
condition|(
name|manifest
operator|.
name|getLogs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Found no edit logs to download on NN since txid "
operator|+
name|sig
operator|.
name|mostRecentCheckpointTxId
argument_list|)
throw|;
block|}
name|long
name|expectedTxId
init|=
name|sig
operator|.
name|mostRecentCheckpointTxId
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|manifest
operator|.
name|getLogs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStartTxId
argument_list|()
operator|!=
name|expectedTxId
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad edit log manifest (expected txid = "
operator|+
name|expectedTxId
operator|+
literal|": "
operator|+
name|manifest
argument_list|)
throw|;
block|}
try|try
block|{
name|Boolean
name|b
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|dstImage
operator|.
name|getStorage
argument_list|()
operator|.
name|cTime
operator|=
name|sig
operator|.
name|cTime
expr_stmt|;
comment|// get fsimage
name|boolean
name|downloadImage
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|sig
operator|.
name|mostRecentCheckpointTxId
operator|==
name|dstImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
condition|)
block|{
name|downloadImage
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Image has not changed. Will not download image."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Image has changed. Downloading updated image from NN."
argument_list|)
expr_stmt|;
name|MD5Hash
name|downloadedHash
init|=
name|TransferFsImage
operator|.
name|downloadImageToStorage
argument_list|(
name|nnHostPort
argument_list|,
name|sig
operator|.
name|mostRecentCheckpointTxId
argument_list|,
name|dstImage
operator|.
name|getStorage
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dstImage
operator|.
name|saveDigestAndRenameCheckpointImage
argument_list|(
name|sig
operator|.
name|mostRecentCheckpointTxId
argument_list|,
name|downloadedHash
argument_list|)
expr_stmt|;
block|}
comment|// get edits file
for|for
control|(
name|RemoteEditLog
name|log
range|:
name|manifest
operator|.
name|getLogs
argument_list|()
control|)
block|{
name|TransferFsImage
operator|.
name|downloadEditsToStorage
argument_list|(
name|nnHostPort
argument_list|,
name|log
argument_list|,
name|dstImage
operator|.
name|getStorage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|downloadImage
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getNameNodeAddress ()
name|InetSocketAddress
name|getNameNodeAddress
parameter_list|()
block|{
return|return
name|nameNodeAddr
return|;
block|}
comment|/**    * Returns the Jetty server that the Namenode is listening on.    */
DECL|method|getInfoServer ()
specifier|private
name|String
name|getInfoServer
parameter_list|()
throws|throws
name|IOException
block|{
name|URI
name|fsName
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
operator|.
name|equalsIgnoreCase
argument_list|(
name|fsName
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This is not a DFS"
argument_list|)
throw|;
block|}
name|String
name|configuredAddress
init|=
name|DFSUtil
operator|.
name|getInfoServer
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|DFSUtil
operator|.
name|substituteForWildcardAddress
argument_list|(
name|configuredAddress
argument_list|,
name|fsName
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Will connect to NameNode at HTTP address: "
operator|+
name|address
argument_list|)
expr_stmt|;
return|return
name|address
return|;
block|}
comment|/**    * Return the host:port of where this SecondaryNameNode is listening    * for image transfers    */
DECL|method|getImageListenAddress ()
specifier|private
name|InetSocketAddress
name|getImageListenAddress
parameter_list|()
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|infoBindAddress
argument_list|,
name|infoPort
argument_list|)
return|;
block|}
comment|/**    * Create a new checkpoint    * @return if the image is fetched from primary or not    */
DECL|method|doCheckpoint ()
name|boolean
name|doCheckpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|checkpointImage
operator|.
name|ensureCurrentDirExists
argument_list|()
expr_stmt|;
name|NNStorage
name|dstStorage
init|=
name|checkpointImage
operator|.
name|getStorage
argument_list|()
decl_stmt|;
comment|// Tell the namenode to start logging transactions in a new edit file
comment|// Returns a token that would be used to upload the merged image.
name|CheckpointSignature
name|sig
init|=
name|namenode
operator|.
name|rollEditLog
argument_list|()
decl_stmt|;
name|boolean
name|loadImage
init|=
literal|false
decl_stmt|;
name|boolean
name|isFreshCheckpointer
init|=
operator|(
name|checkpointImage
operator|.
name|getNamespaceID
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
name|boolean
name|isSameCluster
init|=
operator|(
name|dstStorage
operator|.
name|versionSupportsFederation
argument_list|()
operator|&&
name|sig
operator|.
name|isSameCluster
argument_list|(
name|checkpointImage
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|dstStorage
operator|.
name|versionSupportsFederation
argument_list|()
operator|&&
name|sig
operator|.
name|namespaceIdMatches
argument_list|(
name|checkpointImage
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|isFreshCheckpointer
operator|||
operator|(
name|isSameCluster
operator|&&
operator|!
name|sig
operator|.
name|storageVersionMatches
argument_list|(
name|checkpointImage
operator|.
name|getStorage
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// if we're a fresh 2NN, or if we're on the same cluster and our storage
comment|// needs an upgrade, just take the storage info from the server.
name|dstStorage
operator|.
name|setStorageInfo
argument_list|(
name|sig
argument_list|)
expr_stmt|;
name|dstStorage
operator|.
name|setClusterID
argument_list|(
name|sig
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|dstStorage
operator|.
name|setBlockPoolID
argument_list|(
name|sig
operator|.
name|getBlockpoolID
argument_list|()
argument_list|)
expr_stmt|;
name|loadImage
operator|=
literal|true
expr_stmt|;
block|}
name|sig
operator|.
name|validateStorageInfo
argument_list|(
name|checkpointImage
argument_list|)
expr_stmt|;
comment|// error simulation code for junit test
name|CheckpointFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|afterSecondaryCallsRollEditLog
argument_list|()
expr_stmt|;
name|RemoteEditLogManifest
name|manifest
init|=
name|namenode
operator|.
name|getEditLogManifest
argument_list|(
name|sig
operator|.
name|mostRecentCheckpointTxId
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Fetch fsimage and edits. Reload the image if previous merge failed.
name|loadImage
operator||=
name|downloadCheckpointFiles
argument_list|(
name|fsName
argument_list|,
name|checkpointImage
argument_list|,
name|sig
argument_list|,
name|manifest
argument_list|)
operator||
name|checkpointImage
operator|.
name|hasMergeError
argument_list|()
expr_stmt|;
try|try
block|{
name|doMerge
argument_list|(
name|sig
argument_list|,
name|manifest
argument_list|,
name|loadImage
argument_list|,
name|checkpointImage
argument_list|,
name|namesystem
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// A merge error occurred. The in-memory file system state may be
comment|// inconsistent, so the image and edits need to be reloaded.
name|checkpointImage
operator|.
name|setMergeError
argument_list|()
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
comment|// Clear any error since merge was successful.
name|checkpointImage
operator|.
name|clearMergeError
argument_list|()
expr_stmt|;
comment|//
comment|// Upload the new image into the NameNode. Then tell the Namenode
comment|// to make this new uploaded image as the most current image.
comment|//
name|long
name|txid
init|=
name|checkpointImage
operator|.
name|getLastAppliedTxId
argument_list|()
decl_stmt|;
name|TransferFsImage
operator|.
name|uploadImageFromStorage
argument_list|(
name|fsName
argument_list|,
name|getImageListenAddress
argument_list|()
argument_list|,
name|dstStorage
argument_list|,
name|txid
argument_list|)
expr_stmt|;
comment|// error simulation code for junit test
name|CheckpointFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|afterSecondaryUploadsNewImage
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Checkpoint done. New Image Size: "
operator|+
name|dstStorage
operator|.
name|getFsImageName
argument_list|(
name|txid
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|loadImage
return|;
block|}
comment|/**    * @param opts The parameters passed to this program.    * @exception Exception if the filesystem does not exist.    * @return 0 on success, non zero on error.    */
DECL|method|processStartupCommand (CommandLineOpts opts)
specifier|private
name|int
name|processStartupCommand
parameter_list|(
name|CommandLineOpts
name|opts
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|opts
operator|.
name|getCommand
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|String
name|cmd
init|=
name|opts
operator|.
name|getCommand
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|opts
operator|.
name|getCommand
argument_list|()
condition|)
block|{
case|case
name|CHECKPOINT
case|:
name|long
name|count
init|=
name|countUncheckpointedTxns
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>
name|checkpointConf
operator|.
name|getTxnCount
argument_list|()
operator|||
name|opts
operator|.
name|shouldForceCheckpoint
argument_list|()
condition|)
block|{
name|doCheckpoint
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"EditLog size "
operator|+
name|count
operator|+
literal|" transactions is "
operator|+
literal|"smaller than configured checkpoint "
operator|+
literal|"interval "
operator|+
name|checkpointConf
operator|.
name|getTxnCount
argument_list|()
operator|+
literal|" transactions."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Skipping checkpoint."
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|GETEDITSIZE
case|:
name|long
name|uncheckpointed
init|=
name|countUncheckpointedTxns
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NameNode has "
operator|+
name|uncheckpointed
operator|+
literal|" uncheckpointed transactions"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"bad command enum: "
operator|+
name|opts
operator|.
name|getCommand
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
comment|//
comment|// This is a error returned by hadoop server. Print
comment|// out the first line of the error mesage, ignore the stack trace.
name|exitCode
operator|=
literal|1
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|cmd
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|cmd
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//
comment|// IO exception encountered locally.
comment|//
name|exitCode
operator|=
literal|1
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|cmd
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Does the RPC connection need to be closed?
block|}
return|return
name|exitCode
return|;
block|}
DECL|method|countUncheckpointedTxns ()
specifier|private
name|long
name|countUncheckpointedTxns
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|curTxId
init|=
name|namenode
operator|.
name|getTransactionID
argument_list|()
decl_stmt|;
name|long
name|uncheckpointedTxns
init|=
name|curTxId
operator|-
name|checkpointImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
decl_stmt|;
assert|assert
name|uncheckpointedTxns
operator|>=
literal|0
assert|;
return|return
name|uncheckpointedTxns
return|;
block|}
DECL|method|shouldCheckpointBasedOnCount ()
name|boolean
name|shouldCheckpointBasedOnCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|countUncheckpointedTxns
argument_list|()
operator|>=
name|checkpointConf
operator|.
name|getTxnCount
argument_list|()
return|;
block|}
comment|/**    * main() has some simple utility methods.    * @param argv Command line parameters.    * @exception Exception if the filesystem does not exist.    */
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|CommandLineOpts
name|opts
init|=
name|SecondaryNameNode
operator|.
name|parseArgs
argument_list|(
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Failed to parse options"
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opts
operator|.
name|shouldPrintHelp
argument_list|()
condition|)
block|{
name|opts
operator|.
name|usage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|SecondaryNameNode
operator|.
name|class
argument_list|,
name|argv
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|Configuration
name|tconf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|SecondaryNameNode
name|secondary
init|=
literal|null
decl_stmt|;
try|try
block|{
name|secondary
operator|=
operator|new
name|SecondaryNameNode
argument_list|(
name|tconf
argument_list|,
name|opts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Failed to start secondary namenode"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|!=
literal|null
operator|&&
name|opts
operator|.
name|getCommand
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|ret
init|=
name|secondary
operator|.
name|processStartupCommand
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|terminate
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secondary
operator|!=
literal|null
condition|)
block|{
name|secondary
operator|.
name|startCheckpointThread
argument_list|()
expr_stmt|;
name|secondary
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startCheckpointThread ()
specifier|public
name|void
name|startCheckpointThread
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|checkpointThread
operator|==
literal|null
argument_list|,
literal|"Should not already have a thread"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|shouldRun
argument_list|,
literal|"shouldRun should be true"
argument_list|)
expr_stmt|;
name|checkpointThread
operator|=
operator|new
name|Daemon
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|checkpointThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Container for parsed command-line options.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
DECL|class|CommandLineOpts
specifier|static
class|class
name|CommandLineOpts
block|{
DECL|field|options
specifier|private
specifier|final
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
DECL|field|geteditsizeOpt
specifier|private
specifier|final
name|Option
name|geteditsizeOpt
decl_stmt|;
DECL|field|checkpointOpt
specifier|private
specifier|final
name|Option
name|checkpointOpt
decl_stmt|;
DECL|field|formatOpt
specifier|private
specifier|final
name|Option
name|formatOpt
decl_stmt|;
DECL|field|helpOpt
specifier|private
specifier|final
name|Option
name|helpOpt
decl_stmt|;
DECL|field|cmd
name|Command
name|cmd
decl_stmt|;
DECL|enum|Command
enum|enum
name|Command
block|{
DECL|enumConstant|GETEDITSIZE
name|GETEDITSIZE
block|,
DECL|enumConstant|CHECKPOINT
name|CHECKPOINT
block|;     }
DECL|field|shouldForce
specifier|private
name|boolean
name|shouldForce
decl_stmt|;
DECL|field|shouldFormat
specifier|private
name|boolean
name|shouldFormat
decl_stmt|;
DECL|field|shouldPrintHelp
specifier|private
name|boolean
name|shouldPrintHelp
decl_stmt|;
DECL|method|CommandLineOpts ()
name|CommandLineOpts
parameter_list|()
block|{
name|geteditsizeOpt
operator|=
operator|new
name|Option
argument_list|(
literal|"geteditsize"
argument_list|,
literal|"return the number of uncheckpointed transactions on the NameNode"
argument_list|)
expr_stmt|;
name|checkpointOpt
operator|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"force"
argument_list|)
operator|.
name|hasOptionalArg
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"checkpoint on startup"
argument_list|)
operator|.
name|create
argument_list|(
literal|"checkpoint"
argument_list|)
expr_stmt|;
empty_stmt|;
name|formatOpt
operator|=
operator|new
name|Option
argument_list|(
literal|"format"
argument_list|,
literal|"format the local storage during startup"
argument_list|)
expr_stmt|;
name|helpOpt
operator|=
operator|new
name|Option
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"get help information"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|geteditsizeOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|checkpointOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|formatOpt
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|helpOpt
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldFormat ()
specifier|public
name|boolean
name|shouldFormat
parameter_list|()
block|{
return|return
name|shouldFormat
return|;
block|}
DECL|method|shouldPrintHelp ()
specifier|public
name|boolean
name|shouldPrintHelp
parameter_list|()
block|{
return|return
name|shouldPrintHelp
return|;
block|}
DECL|method|parse (String .... argv)
specifier|public
name|void
name|parse
parameter_list|(
name|String
modifier|...
name|argv
parameter_list|)
throws|throws
name|ParseException
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmdLine
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|helpOpt
operator|.
name|getOpt
argument_list|()
argument_list|)
operator|||
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|helpOpt
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|shouldPrintHelp
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|boolean
name|hasGetEdit
init|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|geteditsizeOpt
operator|.
name|getOpt
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasCheckpoint
init|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|checkpointOpt
operator|.
name|getOpt
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasGetEdit
operator|&&
name|hasCheckpoint
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"May not pass both "
operator|+
name|geteditsizeOpt
operator|.
name|getOpt
argument_list|()
operator|+
literal|" and "
operator|+
name|checkpointOpt
operator|.
name|getOpt
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasGetEdit
condition|)
block|{
name|cmd
operator|=
name|Command
operator|.
name|GETEDITSIZE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasCheckpoint
condition|)
block|{
name|cmd
operator|=
name|Command
operator|.
name|CHECKPOINT
expr_stmt|;
name|String
name|arg
init|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|checkpointOpt
operator|.
name|getOpt
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"force"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|shouldForce
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"-checkpoint may only take 'force' as an "
operator|+
literal|"argument"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|formatOpt
operator|.
name|getOpt
argument_list|()
argument_list|)
condition|)
block|{
name|shouldFormat
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|getCommand ()
specifier|public
name|Command
name|getCommand
parameter_list|()
block|{
return|return
name|cmd
return|;
block|}
DECL|method|shouldForceCheckpoint ()
specifier|public
name|boolean
name|shouldForceCheckpoint
parameter_list|()
block|{
return|return
name|shouldForce
return|;
block|}
DECL|method|usage ()
name|void
name|usage
parameter_list|()
block|{
name|String
name|header
init|=
literal|"The Secondary NameNode is a helper "
operator|+
literal|"to the primary NameNode. The Secondary is responsible "
operator|+
literal|"for supporting periodic checkpoints of the HDFS metadata. "
operator|+
literal|"The current design allows only one Secondary NameNode "
operator|+
literal|"per HDFS cluster."
decl_stmt|;
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"secondarynamenode"
argument_list|,
name|header
argument_list|,
name|options
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseArgs (String[] argv)
specifier|private
specifier|static
name|CommandLineOpts
name|parseArgs
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
name|CommandLineOpts
name|opts
init|=
operator|new
name|CommandLineOpts
argument_list|()
decl_stmt|;
try|try
block|{
name|opts
operator|.
name|parse
argument_list|(
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|pe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|opts
operator|.
name|usage
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|opts
return|;
block|}
DECL|class|CheckpointStorage
specifier|static
class|class
name|CheckpointStorage
extends|extends
name|FSImage
block|{
DECL|field|mergeErrorCount
specifier|private
name|int
name|mergeErrorCount
decl_stmt|;
DECL|class|CheckpointLogPurger
specifier|private
specifier|static
class|class
name|CheckpointLogPurger
implements|implements
name|LogsPurgeable
block|{
DECL|field|storage
specifier|private
name|NNStorage
name|storage
decl_stmt|;
DECL|field|purger
specifier|private
name|StoragePurger
name|purger
init|=
operator|new
name|NNStorageRetentionManager
operator|.
name|DeletionStoragePurger
argument_list|()
decl_stmt|;
DECL|method|CheckpointLogPurger (NNStorage storage)
specifier|public
name|CheckpointLogPurger
parameter_list|(
name|NNStorage
name|storage
parameter_list|)
block|{
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|purgeLogsOlderThan (long minTxIdToKeep)
specifier|public
name|void
name|purgeLogsOlderThan
parameter_list|(
name|long
name|minTxIdToKeep
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|iter
init|=
name|storage
operator|.
name|dirIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StorageDirectory
name|dir
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|EditLogFile
argument_list|>
name|editFiles
init|=
name|FileJournalManager
operator|.
name|matchEditLogs
argument_list|(
name|dir
operator|.
name|getCurrentDir
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|EditLogFile
name|f
range|:
name|editFiles
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getLastTxId
argument_list|()
operator|<
name|minTxIdToKeep
condition|)
block|{
name|purger
operator|.
name|purgeLog
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|selectInputStreams (Collection<EditLogInputStream> streams, long fromTxId, boolean inProgressOk)
specifier|public
name|void
name|selectInputStreams
parameter_list|(
name|Collection
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
parameter_list|,
name|long
name|fromTxId
parameter_list|,
name|boolean
name|inProgressOk
parameter_list|)
block|{
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|iter
init|=
name|storage
operator|.
name|dirIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StorageDirectory
name|dir
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|EditLogFile
argument_list|>
name|editFiles
decl_stmt|;
try|try
block|{
name|editFiles
operator|=
name|FileJournalManager
operator|.
name|matchEditLogs
argument_list|(
name|dir
operator|.
name|getCurrentDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
name|FileJournalManager
operator|.
name|addStreamsToCollectionFromFiles
argument_list|(
name|editFiles
argument_list|,
name|streams
argument_list|,
name|fromTxId
argument_list|,
name|inProgressOk
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Construct a checkpoint image.      * @param conf Node configuration.      * @param imageDirs URIs of storage for image.      * @param editsDirs URIs of storage for edit logs.      * @throws IOException If storage cannot be access.      */
DECL|method|CheckpointStorage (Configuration conf, Collection<URI> imageDirs, List<URI> editsDirs)
name|CheckpointStorage
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Collection
argument_list|<
name|URI
argument_list|>
name|imageDirs
parameter_list|,
name|List
argument_list|<
name|URI
argument_list|>
name|editsDirs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|imageDirs
argument_list|,
name|editsDirs
argument_list|)
expr_stmt|;
comment|// the 2NN never writes edits -- it only downloads them. So
comment|// we shouldn't have any editLog instance. Setting to null
comment|// makes sure we don't accidentally depend on it.
name|editLog
operator|=
literal|null
expr_stmt|;
name|mergeErrorCount
operator|=
literal|0
expr_stmt|;
comment|// Replace the archival manager with one that can actually work on the
comment|// 2NN's edits storage.
name|this
operator|.
name|archivalManager
operator|=
operator|new
name|NNStorageRetentionManager
argument_list|(
name|conf
argument_list|,
name|storage
argument_list|,
operator|new
name|CheckpointLogPurger
argument_list|(
name|storage
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Analyze checkpoint directories.      * Create directories if they do not exist.      * Recover from an unsuccessful checkpoint if necessary.      *      * @throws IOException      */
DECL|method|recoverCreate (boolean format)
name|void
name|recoverCreate
parameter_list|(
name|boolean
name|format
parameter_list|)
throws|throws
name|IOException
block|{
name|storage
operator|.
name|attemptRestoreRemovedStorage
argument_list|()
expr_stmt|;
name|storage
operator|.
name|unlockAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|storage
operator|.
name|dirIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StorageDirectory
name|sd
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|isAccessible
init|=
literal|true
decl_stmt|;
try|try
block|{
comment|// create directories if don't exist yet
if|if
condition|(
operator|!
name|sd
operator|.
name|getRoot
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
comment|// do nothing, directory is already created
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|isAccessible
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isAccessible
condition|)
throw|throw
operator|new
name|InconsistentFSStateException
argument_list|(
name|sd
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"cannot access checkpoint directory."
argument_list|)
throw|;
if|if
condition|(
name|format
condition|)
block|{
comment|// Don't confirm, since this is just the secondary namenode.
name|LOG
operator|.
name|info
argument_list|(
literal|"Formatting storage directory "
operator|+
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|clearDirectory
argument_list|()
expr_stmt|;
block|}
name|StorageState
name|curState
decl_stmt|;
try|try
block|{
name|curState
operator|=
name|sd
operator|.
name|analyzeStorage
argument_list|(
name|HdfsServerConstants
operator|.
name|StartupOption
operator|.
name|REGULAR
argument_list|,
name|storage
argument_list|)
expr_stmt|;
comment|// sd is locked but not opened
switch|switch
condition|(
name|curState
condition|)
block|{
case|case
name|NON_EXISTENT
case|:
comment|// fail if any of the configured checkpoint dirs are inaccessible
throw|throw
operator|new
name|InconsistentFSStateException
argument_list|(
name|sd
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"checkpoint directory does not exist or is not accessible."
argument_list|)
throw|;
case|case
name|NOT_FORMATTED
case|:
break|break;
comment|// it's ok since initially there is no current and VERSION
case|case
name|NORMAL
case|:
comment|// Read the VERSION file. This verifies that:
comment|// (a) the VERSION file for each of the directories is the same,
comment|// and (b) when we connect to a NN, we can verify that the remote
comment|// node matches the same namespace that we ran on previously.
name|storage
operator|.
name|readProperties
argument_list|(
name|sd
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// recovery is possible
name|sd
operator|.
name|doRecover
argument_list|(
name|curState
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|sd
operator|.
name|unlock
argument_list|()
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
DECL|method|hasMergeError ()
name|boolean
name|hasMergeError
parameter_list|()
block|{
return|return
operator|(
name|mergeErrorCount
operator|>
literal|0
operator|)
return|;
block|}
DECL|method|getMergeErrorCount ()
name|int
name|getMergeErrorCount
parameter_list|()
block|{
return|return
name|mergeErrorCount
return|;
block|}
DECL|method|setMergeError ()
name|void
name|setMergeError
parameter_list|()
block|{
name|mergeErrorCount
operator|++
expr_stmt|;
block|}
DECL|method|clearMergeError ()
name|void
name|clearMergeError
parameter_list|()
block|{
name|mergeErrorCount
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Ensure that the current/ directory exists in all storage      * directories      */
DECL|method|ensureCurrentDirExists ()
name|void
name|ensureCurrentDirExists
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|storage
operator|.
name|dirIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StorageDirectory
name|sd
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|curDir
init|=
name|sd
operator|.
name|getCurrentDir
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|curDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|curDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create directory "
operator|+
name|curDir
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|doMerge ( CheckpointSignature sig, RemoteEditLogManifest manifest, boolean loadImage, FSImage dstImage, FSNamesystem dstNamesystem)
specifier|static
name|void
name|doMerge
parameter_list|(
name|CheckpointSignature
name|sig
parameter_list|,
name|RemoteEditLogManifest
name|manifest
parameter_list|,
name|boolean
name|loadImage
parameter_list|,
name|FSImage
name|dstImage
parameter_list|,
name|FSNamesystem
name|dstNamesystem
parameter_list|)
throws|throws
name|IOException
block|{
name|NNStorage
name|dstStorage
init|=
name|dstImage
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|dstStorage
operator|.
name|setStorageInfo
argument_list|(
name|sig
argument_list|)
expr_stmt|;
if|if
condition|(
name|loadImage
condition|)
block|{
name|File
name|file
init|=
name|dstStorage
operator|.
name|findImageFile
argument_list|(
name|sig
operator|.
name|mostRecentCheckpointTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't find image file at txid "
operator|+
name|sig
operator|.
name|mostRecentCheckpointTxId
operator|+
literal|" even though it should have "
operator|+
literal|"just been downloaded"
argument_list|)
throw|;
block|}
name|dstImage
operator|.
name|reloadFromImageFile
argument_list|(
name|file
argument_list|,
name|dstNamesystem
argument_list|)
expr_stmt|;
name|dstNamesystem
operator|.
name|dir
operator|.
name|imageLoadComplete
argument_list|()
expr_stmt|;
block|}
comment|// error simulation code for junit test
name|CheckpointFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|duringMerge
argument_list|()
expr_stmt|;
name|Checkpointer
operator|.
name|rollForwardByApplyingLogs
argument_list|(
name|manifest
argument_list|,
name|dstImage
argument_list|,
name|dstNamesystem
argument_list|)
expr_stmt|;
comment|// The following has the side effect of purging old fsimages/edit logs.
name|dstImage
operator|.
name|saveFSImageInAllDirs
argument_list|(
name|dstNamesystem
argument_list|,
name|dstImage
operator|.
name|getLastAppliedTxId
argument_list|()
argument_list|)
expr_stmt|;
name|dstStorage
operator|.
name|writeAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

