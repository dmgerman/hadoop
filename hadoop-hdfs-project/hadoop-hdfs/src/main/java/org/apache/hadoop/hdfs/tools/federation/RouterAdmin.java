begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.federation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|federation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|MountTableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|RemoteLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
operator|.
name|DestinationOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RouterClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|AddMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|GetMountTableEntriesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|RemoveMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|protocol
operator|.
name|UpdateMountTableEntryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|MountTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class provides some Federation administrative access shell commands.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|RouterAdmin
specifier|public
class|class
name|RouterAdmin
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouterAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
name|RouterClient
name|client
decl_stmt|;
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|RouterAdmin
name|admin
init|=
operator|new
name|RouterAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|admin
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
DECL|method|RouterAdmin (Configuration conf)
specifier|public
name|RouterAdmin
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Print the usage message.    */
DECL|method|printUsage ()
specifier|public
name|void
name|printUsage
parameter_list|()
block|{
name|String
name|usage
init|=
literal|"Federation Admin Tools:\n"
operator|+
literal|"\t[-add<source><nameservice><destination> "
operator|+
literal|"[-readonly]\n"
operator|+
literal|"\t[-rm<source>]\n"
operator|+
literal|"\t[-ls<path>]\n"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] argv)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Not enough parameters specificed"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
comment|// Verify that we have enough command line parameters
if|if
condition|(
literal|"-add"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|4
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Not enough parameters specificed for cmd "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-rm"
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Not enough parameters specificed for cmd "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
comment|// Initialize RouterClient
try|try
block|{
name|String
name|address
init|=
name|getConf
argument_list|()
operator|.
name|getTrimmed
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_ADDRESS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_ROUTER_ADMIN_ADDRESS_DEFAULT
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|routerSocket
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|RouterClient
argument_list|(
name|routerSocket
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RPC
operator|.
name|VersionMismatch
name|v
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Version mismatch between client and server... command aborted"
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bad connection to Router... command aborted"
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|Exception
name|debugException
init|=
literal|null
decl_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|"-add"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|addMount
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Successfuly added mount point "
operator|+
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-rm"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|removeMount
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Successfully removed mount point "
operator|+
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-ls"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|listMounts
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listMounts
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|arge
parameter_list|)
block|{
name|debugException
operator|=
name|arge
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|arge
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
comment|// This is a error returned by the server.
comment|// Print out the first line of the error message, ignore the stack trace.
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|debugException
operator|=
name|e
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|debugException
operator|=
name|ex
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|debugException
operator|=
name|e
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|debugException
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception encountered"
argument_list|,
name|debugException
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
comment|/**    * Add a mount table entry or update if it exists.    *    * @param parameters Parameters for the mount point.    * @param i Index in the parameters.    */
DECL|method|addMount (String[] parameters, int i)
specifier|public
name|boolean
name|addMount
parameter_list|(
name|String
index|[]
name|parameters
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Mandatory parameters
name|String
name|mount
init|=
name|parameters
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
index|[]
name|nss
init|=
name|parameters
index|[
name|i
operator|++
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|dest
init|=
name|parameters
index|[
name|i
operator|++
index|]
decl_stmt|;
comment|// Optional parameters
name|boolean
name|readOnly
init|=
literal|false
decl_stmt|;
name|DestinationOrder
name|order
init|=
name|DestinationOrder
operator|.
name|HASH
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|parameters
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-readonly"
argument_list|)
condition|)
block|{
name|readOnly
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-order"
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
try|try
block|{
name|order
operator|=
name|DestinationOrder
operator|.
name|valueOf
argument_list|(
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot parse order: "
operator|+
name|parameters
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
name|addMount
argument_list|(
name|mount
argument_list|,
name|nss
argument_list|,
name|dest
argument_list|,
name|readOnly
argument_list|,
name|order
argument_list|)
return|;
block|}
comment|/**    * Add a mount table entry or update if it exists.    *    * @param mount Mount point.    * @param nss Namespaces where this is mounted to.    * @param dest Destination path.    * @param readonly If the mount point is read only.    * @param order Order of the destination locations.    * @return If the mount point was added.    * @throws IOException Error adding the mount point.    */
DECL|method|addMount (String mount, String[] nss, String dest, boolean readonly, DestinationOrder order)
specifier|public
name|boolean
name|addMount
parameter_list|(
name|String
name|mount
parameter_list|,
name|String
index|[]
name|nss
parameter_list|,
name|String
name|dest
parameter_list|,
name|boolean
name|readonly
parameter_list|,
name|DestinationOrder
name|order
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the existing entry
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|GetMountTableEntriesRequest
name|getRequest
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|mount
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|getResponse
init|=
name|mountTable
operator|.
name|getMountTableEntries
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|results
init|=
name|getResponse
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|MountTable
name|existingEntry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MountTable
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|mount
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getSourcePath
argument_list|()
argument_list|)
condition|)
block|{
name|existingEntry
operator|=
name|result
expr_stmt|;
block|}
block|}
if|if
condition|(
name|existingEntry
operator|==
literal|null
condition|)
block|{
comment|// Create and add the entry if it doesn't exist
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|destMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|nss
control|)
block|{
name|destMap
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
name|MountTable
name|newEntry
init|=
name|MountTable
operator|.
name|newInstance
argument_list|(
name|mount
argument_list|,
name|destMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|readonly
condition|)
block|{
name|newEntry
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|newEntry
operator|.
name|setDestOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
block|}
name|AddMountTableEntryRequest
name|request
init|=
name|AddMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|newEntry
argument_list|)
decl_stmt|;
name|AddMountTableEntryResponse
name|addResponse
init|=
name|mountTable
operator|.
name|addMountTableEntry
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
name|addResponse
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|added
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot add mount point "
operator|+
name|mount
argument_list|)
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
else|else
block|{
comment|// Update the existing entry if it exists
for|for
control|(
name|String
name|nsId
range|:
name|nss
control|)
block|{
if|if
condition|(
operator|!
name|existingEntry
operator|.
name|addDestination
argument_list|(
name|nsId
argument_list|,
name|dest
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot add destination at "
operator|+
name|nsId
operator|+
literal|" "
operator|+
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|readonly
condition|)
block|{
name|existingEntry
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|existingEntry
operator|.
name|setDestOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
block|}
name|UpdateMountTableEntryRequest
name|updateRequest
init|=
name|UpdateMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|existingEntry
argument_list|)
decl_stmt|;
name|UpdateMountTableEntryResponse
name|updateResponse
init|=
name|mountTable
operator|.
name|updateMountTableEntry
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
name|boolean
name|updated
init|=
name|updateResponse
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|updated
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot update mount point "
operator|+
name|mount
argument_list|)
expr_stmt|;
block|}
return|return
name|updated
return|;
block|}
block|}
comment|/**    * Remove mount point.    *    * @param path Path to remove.    * @throws IOException If it cannot be removed.    */
DECL|method|removeMount (String path)
specifier|public
name|boolean
name|removeMount
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|RemoveMountTableEntryRequest
name|request
init|=
name|RemoveMountTableEntryRequest
operator|.
name|newInstance
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|RemoveMountTableEntryResponse
name|response
init|=
name|mountTable
operator|.
name|removeMountTableEntry
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
name|response
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|removed
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot remove mount point "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
comment|/**    * List mount points.    *    * @param path Path to list.    * @throws IOException If it cannot be listed.    */
DECL|method|listMounts (String path)
specifier|public
name|void
name|listMounts
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|MountTableManager
name|mountTable
init|=
name|client
operator|.
name|getMountTableManager
argument_list|()
decl_stmt|;
name|GetMountTableEntriesRequest
name|request
init|=
name|GetMountTableEntriesRequest
operator|.
name|newInstance
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|GetMountTableEntriesResponse
name|response
init|=
name|mountTable
operator|.
name|getMountTableEntries
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
init|=
name|response
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|printMounts
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
DECL|method|printMounts (List<MountTable> entries)
specifier|private
specifier|static
name|void
name|printMounts
parameter_list|(
name|List
argument_list|<
name|MountTable
argument_list|>
name|entries
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mount Table Entries:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-25s %-25s"
argument_list|,
literal|"Source"
argument_list|,
literal|"Destinations"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MountTable
name|entry
range|:
name|entries
control|)
block|{
name|StringBuilder
name|destBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteLocation
name|location
range|:
name|entry
operator|.
name|getDestinations
argument_list|()
control|)
block|{
if|if
condition|(
name|destBuilder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|destBuilder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|destBuilder
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s->%s"
argument_list|,
name|location
operator|.
name|getNameserviceId
argument_list|()
argument_list|,
name|location
operator|.
name|getDest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%-25s %-25s"
argument_list|,
name|entry
operator|.
name|getSourcePath
argument_list|()
argument_list|,
name|destBuilder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

