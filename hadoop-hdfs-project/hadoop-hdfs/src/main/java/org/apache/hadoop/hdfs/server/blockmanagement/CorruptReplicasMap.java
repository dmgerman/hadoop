begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|LongAdder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Stores information about all corrupt blocks in the File System.  * A Block is considered corrupt only if all of its replicas are  * corrupt. While reporting replicas of a Block, we hide any corrupt  * copies. These copies are removed once Block is found to have   * expected number of good replicas.  * Mapping: Block -> TreeSet<DatanodeDescriptor>   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CorruptReplicasMap
specifier|public
class|class
name|CorruptReplicasMap
block|{
comment|/** The corruption reason code */
DECL|enum|Reason
specifier|public
enum|enum
name|Reason
block|{
DECL|enumConstant|NONE
name|NONE
block|,
comment|// not specified.
DECL|enumConstant|ANY
name|ANY
block|,
comment|// wildcard reason
DECL|enumConstant|GENSTAMP_MISMATCH
name|GENSTAMP_MISMATCH
block|,
comment|// mismatch in generation stamps
DECL|enumConstant|SIZE_MISMATCH
name|SIZE_MISMATCH
block|,
comment|// mismatch in sizes
DECL|enumConstant|INVALID_STATE
name|INVALID_STATE
block|,
comment|// invalid state
DECL|enumConstant|CORRUPTION_REPORTED
name|CORRUPTION_REPORTED
comment|// client or datanode reported the corruption
block|}
DECL|field|corruptReplicasMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|Map
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|Reason
argument_list|>
argument_list|>
name|corruptReplicasMap
init|=
operator|new
name|HashMap
argument_list|<
name|Block
argument_list|,
name|Map
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|Reason
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|totalCorruptBlocks
specifier|private
specifier|final
name|LongAdder
name|totalCorruptBlocks
init|=
operator|new
name|LongAdder
argument_list|()
decl_stmt|;
DECL|field|totalCorruptECBlockGroups
specifier|private
specifier|final
name|LongAdder
name|totalCorruptECBlockGroups
init|=
operator|new
name|LongAdder
argument_list|()
decl_stmt|;
comment|/**    * Mark the block belonging to datanode as corrupt.    *    * @param blk Block to be added to CorruptReplicasMap    * @param dn DatanodeDescriptor which holds the corrupt replica    * @param reason a textual reason (for logging purposes)    * @param reasonCode the enum representation of the reason    */
DECL|method|addToCorruptReplicasMap (Block blk, DatanodeDescriptor dn, String reason, Reason reasonCode, boolean isStriped)
name|void
name|addToCorruptReplicasMap
parameter_list|(
name|Block
name|blk
parameter_list|,
name|DatanodeDescriptor
name|dn
parameter_list|,
name|String
name|reason
parameter_list|,
name|Reason
name|reasonCode
parameter_list|,
name|boolean
name|isStriped
parameter_list|)
block|{
name|Map
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|Reason
argument_list|>
name|nodes
init|=
name|corruptReplicasMap
operator|.
name|get
argument_list|(
name|blk
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
block|{
name|nodes
operator|=
operator|new
name|HashMap
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|Reason
argument_list|>
argument_list|()
expr_stmt|;
name|corruptReplicasMap
operator|.
name|put
argument_list|(
name|blk
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|incrementBlockStat
argument_list|(
name|isStriped
argument_list|)
expr_stmt|;
block|}
name|String
name|reasonText
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|reasonText
operator|=
literal|" because "
operator|+
name|reason
expr_stmt|;
block|}
else|else
block|{
name|reasonText
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|nodes
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|dn
argument_list|)
condition|)
block|{
name|NameNode
operator|.
name|blockStateChangeLog
operator|.
name|debug
argument_list|(
literal|"BLOCK NameSystem.addToCorruptReplicasMap: {} added as corrupt on "
operator|+
literal|"{} by {} {}"
argument_list|,
name|blk
argument_list|,
name|dn
argument_list|,
name|Server
operator|.
name|getRemoteIp
argument_list|()
argument_list|,
name|reasonText
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NameNode
operator|.
name|blockStateChangeLog
operator|.
name|debug
argument_list|(
literal|"BLOCK NameSystem.addToCorruptReplicasMap: duplicate requested for"
operator|+
literal|" {} to add as corrupt on {} by {} {}"
argument_list|,
name|blk
argument_list|,
name|dn
argument_list|,
name|Server
operator|.
name|getRemoteIp
argument_list|()
argument_list|,
name|reasonText
argument_list|)
expr_stmt|;
block|}
comment|// Add the node or update the reason.
name|nodes
operator|.
name|put
argument_list|(
name|dn
argument_list|,
name|reasonCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove Block from CorruptBlocksMap.    * @param blk Block to be removed    */
DECL|method|removeFromCorruptReplicasMap (BlockInfo blk)
name|void
name|removeFromCorruptReplicasMap
parameter_list|(
name|BlockInfo
name|blk
parameter_list|)
block|{
if|if
condition|(
name|corruptReplicasMap
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|Reason
argument_list|>
name|value
init|=
name|corruptReplicasMap
operator|.
name|remove
argument_list|(
name|blk
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|decrementBlockStat
argument_list|(
name|blk
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Remove the block at the given datanode from CorruptBlockMap    * @param blk block to be removed    * @param datanode datanode where the block is located    * @return true if the removal is successful;               false if the replica is not in the map    */
DECL|method|removeFromCorruptReplicasMap ( BlockInfo blk, DatanodeDescriptor datanode)
name|boolean
name|removeFromCorruptReplicasMap
parameter_list|(
name|BlockInfo
name|blk
parameter_list|,
name|DatanodeDescriptor
name|datanode
parameter_list|)
block|{
return|return
name|removeFromCorruptReplicasMap
argument_list|(
name|blk
argument_list|,
name|datanode
argument_list|,
name|Reason
operator|.
name|ANY
argument_list|)
return|;
block|}
DECL|method|removeFromCorruptReplicasMap ( BlockInfo blk, DatanodeDescriptor datanode, Reason reason)
name|boolean
name|removeFromCorruptReplicasMap
parameter_list|(
name|BlockInfo
name|blk
parameter_list|,
name|DatanodeDescriptor
name|datanode
parameter_list|,
name|Reason
name|reason
parameter_list|)
block|{
name|Map
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|Reason
argument_list|>
name|datanodes
init|=
name|corruptReplicasMap
operator|.
name|get
argument_list|(
name|blk
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanodes
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if reasons can be compared but don't match, return false.
name|Reason
name|storedReason
init|=
name|datanodes
operator|.
name|get
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
name|Reason
operator|.
name|ANY
operator|&&
name|storedReason
operator|!=
literal|null
operator|&&
name|reason
operator|!=
name|storedReason
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|datanodes
operator|.
name|remove
argument_list|(
name|datanode
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// remove the replicas
if|if
condition|(
name|datanodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// remove the block if there is no more corrupted replicas
name|corruptReplicasMap
operator|.
name|remove
argument_list|(
name|blk
argument_list|)
expr_stmt|;
name|decrementBlockStat
argument_list|(
name|blk
operator|.
name|isStriped
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|incrementBlockStat (boolean isStriped)
specifier|private
name|void
name|incrementBlockStat
parameter_list|(
name|boolean
name|isStriped
parameter_list|)
block|{
if|if
condition|(
name|isStriped
condition|)
block|{
name|totalCorruptECBlockGroups
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|totalCorruptBlocks
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|decrementBlockStat (boolean isStriped)
specifier|private
name|void
name|decrementBlockStat
parameter_list|(
name|boolean
name|isStriped
parameter_list|)
block|{
if|if
condition|(
name|isStriped
condition|)
block|{
name|totalCorruptECBlockGroups
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|totalCorruptBlocks
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get Nodes which have corrupt replicas of Block    *     * @param blk Block for which nodes are requested    * @return collection of nodes. Null if does not exists    */
DECL|method|getNodes (Block blk)
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|getNodes
parameter_list|(
name|Block
name|blk
parameter_list|)
block|{
name|Map
argument_list|<
name|DatanodeDescriptor
argument_list|,
name|Reason
argument_list|>
name|nodes
init|=
name|corruptReplicasMap
operator|.
name|get
argument_list|(
name|blk
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|nodes
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    * Check if replica belonging to Datanode is corrupt    *    * @param blk Block to check    * @param node DatanodeDescriptor which holds the replica    * @return true if replica is corrupt, false if does not exists in this map    */
DECL|method|isReplicaCorrupt (Block blk, DatanodeDescriptor node)
name|boolean
name|isReplicaCorrupt
parameter_list|(
name|Block
name|blk
parameter_list|,
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
init|=
name|getNodes
argument_list|(
name|blk
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|nodes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|nodes
operator|.
name|contains
argument_list|(
name|node
argument_list|)
operator|)
operator|)
return|;
block|}
DECL|method|numCorruptReplicas (Block blk)
name|int
name|numCorruptReplicas
parameter_list|(
name|Block
name|blk
parameter_list|)
block|{
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
init|=
name|getNodes
argument_list|(
name|blk
argument_list|)
decl_stmt|;
return|return
operator|(
name|nodes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|nodes
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|corruptReplicasMap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Return a range of corrupt replica block ids. Up to numExpectedBlocks     * blocks starting at the next block after startingBlockId are returned    * (fewer if numExpectedBlocks blocks are unavailable). If startingBlockId     * is null, up to numExpectedBlocks blocks are returned from the beginning.    * If startingBlockId cannot be found, null is returned.    *    * @param bim BlockIdManager to determine the block type.    * @param blockType desired block type to return.    * @param numExpectedBlocks Number of block ids to return.    *  0<= numExpectedBlocks<= 100    * @param startingBlockId Block id from which to start. If null, start at    *  beginning.    * @return Up to numExpectedBlocks blocks from startingBlockId if it exists    */
annotation|@
name|VisibleForTesting
DECL|method|getCorruptBlockIdsForTesting (BlockIdManager bim, BlockType blockType, int numExpectedBlocks, Long startingBlockId)
name|long
index|[]
name|getCorruptBlockIdsForTesting
parameter_list|(
name|BlockIdManager
name|bim
parameter_list|,
name|BlockType
name|blockType
parameter_list|,
name|int
name|numExpectedBlocks
parameter_list|,
name|Long
name|startingBlockId
parameter_list|)
block|{
if|if
condition|(
name|numExpectedBlocks
argument_list|<
literal|0
operator|||
name|numExpectedBlocks
argument_list|>
literal|100
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|cursorBlockId
init|=
name|startingBlockId
operator|!=
literal|null
condition|?
name|startingBlockId
else|:
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
return|return
name|corruptReplicasMap
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
block|{
if|if
condition|(
name|blockType
operator|==
name|BlockType
operator|.
name|STRIPED
condition|)
block|{
return|return
name|bim
operator|.
name|isStripedBlock
argument_list|(
name|r
argument_list|)
operator|&&
name|r
operator|.
name|getBlockId
argument_list|()
operator|>=
name|cursorBlockId
return|;
block|}
else|else
block|{
return|return
operator|!
name|bim
operator|.
name|isStripedBlock
argument_list|(
name|r
argument_list|)
operator|&&
name|r
operator|.
name|getBlockId
argument_list|()
operator|>=
name|cursorBlockId
return|;
block|}
block|}
argument_list|)
operator|.
name|sorted
argument_list|()
operator|.
name|limit
argument_list|(
name|numExpectedBlocks
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|Block
operator|::
name|getBlockId
argument_list|)
operator|.
name|toArray
argument_list|()
return|;
block|}
comment|/**    * method to get the set of corrupt blocks in corruptReplicasMap.    * @return Set of Block objects    */
DECL|method|getCorruptBlocksSet ()
name|Set
argument_list|<
name|Block
argument_list|>
name|getCorruptBlocksSet
parameter_list|()
block|{
name|Set
argument_list|<
name|Block
argument_list|>
name|corruptBlocks
init|=
operator|new
name|HashSet
argument_list|<
name|Block
argument_list|>
argument_list|()
decl_stmt|;
name|corruptBlocks
operator|.
name|addAll
argument_list|(
name|corruptReplicasMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|corruptBlocks
return|;
block|}
comment|/**    * return the reason about corrupted replica for a given block    * on a given dn    * @param block block that has corrupted replica    * @param node datanode that contains this corrupted replica    * @return reason    */
DECL|method|getCorruptReason (Block block, DatanodeDescriptor node)
name|String
name|getCorruptReason
parameter_list|(
name|Block
name|block
parameter_list|,
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
name|Reason
name|reason
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|corruptReplicasMap
operator|.
name|containsKey
argument_list|(
name|block
argument_list|)
condition|)
block|{
if|if
condition|(
name|corruptReplicasMap
operator|.
name|get
argument_list|(
name|block
argument_list|)
operator|.
name|containsKey
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|reason
operator|=
name|corruptReplicasMap
operator|.
name|get
argument_list|(
name|block
argument_list|)
operator|.
name|get
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
return|return
name|reason
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getCorruptBlocks ()
name|long
name|getCorruptBlocks
parameter_list|()
block|{
return|return
name|totalCorruptBlocks
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|getCorruptECBlockGroups ()
name|long
name|getCorruptECBlockGroups
parameter_list|()
block|{
return|return
name|totalCorruptECBlockGroups
operator|.
name|longValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

