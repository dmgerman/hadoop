begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/** The directory with snapshots. */
end_comment

begin_class
DECL|class|INodeDirectoryWithSnapshot
specifier|public
class|class
name|INodeDirectoryWithSnapshot
extends|extends
name|INodeDirectory
block|{
comment|/**    * The difference between the current state and a previous snapshot    * of an INodeDirectory.    *    * Two lists are maintained in the algorithm:    * - c-list for newly created inodes    * - d-list for the deleted inodes    *    * Denote the state of an inode by the following    *   (0, 0): neither in c-list nor d-list    *   (c, 0): in c-list but not in d-list    *   (0, d): in d-list but not in c-list    *   (c, d): in both c-list and d-list    *    * For each case below, ( , ) at the end shows the result state of the inode.    *    * Case 1. Suppose the inode i is NOT in the previous snapshot.        (0, 0)    *   1.1. create i in current: add it to c-list                        (c, 0)    *   1.1.1. create i in current and then create: impossible    *   1.1.2. create i in current and then delete: remove it from c-list (0, 0)    *   1.1.3. create i in current and then modify: replace it in c-list  (c, 0)    *    *   1.2. delete i from current: impossible    *    *   1.3. modify i in current: impossible    *    * Case 2. Suppose the inode i is ALREADY in the previous snapshot.    (0, 0)    *   2.1. create i in current: impossible    *    *   2.2. delete i from current: add it to d-list                      (0, d)    *   2.2.1. delete i from current and then create: add it to c-list    (c, d)    *   2.2.2. delete i from current and then delete: impossible    *   2.2.2. delete i from current and then modify: impossible    *    *   2.3. modify i in current: put it in both c-list and d-list        (c, d)    *   2.3.1. modify i in current and then create: impossible    *   2.3.2. modify i in current and then delete: remove it from c-list (0, d)    *   2.3.3. modify i in current and then modify: replace it in c-list  (c, d)    */
DECL|class|Diff
specifier|static
class|class
name|Diff
block|{
comment|/**      * Search the inode from the list.      * @return -1 if the list is null; otherwise, return the insertion point      *    defined in {@link Collections#binarySearch(List, Object)}.      *    Note that, when the list is null, -1 is the correct insertion point.      */
DECL|method|search (final List<INode> inodes, final INode i)
specifier|static
name|int
name|search
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|inodes
parameter_list|,
specifier|final
name|INode
name|i
parameter_list|)
block|{
return|return
name|search
argument_list|(
name|inodes
argument_list|,
name|i
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|search (final List<INode> inodes, final byte[] name)
specifier|private
specifier|static
name|int
name|search
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|inodes
parameter_list|,
specifier|final
name|byte
index|[]
name|name
parameter_list|)
block|{
return|return
name|inodes
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|Collections
operator|.
name|binarySearch
argument_list|(
name|inodes
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** c-list: inode(s) created in current. */
DECL|field|created
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|created
decl_stmt|;
comment|/** d-list: inode(s) deleted from current. */
DECL|field|deleted
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
decl_stmt|;
comment|/**      * Insert the inode to created.      * @param i the insertion point defined      *          in {@link Collections#binarySearch(List, Object)}      */
DECL|method|insertCreated (final INode inode, final int i)
specifier|private
name|void
name|insertCreated
parameter_list|(
specifier|final
name|INode
name|inode
parameter_list|,
specifier|final
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Inode already exists: inode="
operator|+
name|inode
operator|+
literal|", created="
operator|+
name|created
argument_list|)
throw|;
block|}
if|if
condition|(
name|created
operator|==
literal|null
condition|)
block|{
name|created
operator|=
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|(
name|DEFAULT_FILES_PER_DIRECTORY
argument_list|)
expr_stmt|;
block|}
name|created
operator|.
name|add
argument_list|(
operator|-
name|i
operator|-
literal|1
argument_list|,
name|inode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Insert the inode to deleted.      * @param i the insertion point defined      *          in {@link Collections#binarySearch(List, Object)}      */
DECL|method|insertDeleted (final INode inode, final int i)
specifier|private
name|void
name|insertDeleted
parameter_list|(
specifier|final
name|INode
name|inode
parameter_list|,
specifier|final
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Inode already exists: inode="
operator|+
name|inode
operator|+
literal|", deleted="
operator|+
name|deleted
argument_list|)
throw|;
block|}
if|if
condition|(
name|deleted
operator|==
literal|null
condition|)
block|{
name|deleted
operator|=
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|(
name|DEFAULT_FILES_PER_DIRECTORY
argument_list|)
expr_stmt|;
block|}
name|deleted
operator|.
name|add
argument_list|(
operator|-
name|i
operator|-
literal|1
argument_list|,
name|inode
argument_list|)
expr_stmt|;
block|}
comment|/** Create an inode in current state. */
DECL|method|create (final INode inode)
name|void
name|create
parameter_list|(
specifier|final
name|INode
name|inode
parameter_list|)
block|{
specifier|final
name|int
name|c
init|=
name|search
argument_list|(
name|created
argument_list|,
name|inode
argument_list|)
decl_stmt|;
name|insertCreated
argument_list|(
name|inode
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|/** Delete an inode from current state. */
DECL|method|delete (final INode inode)
name|void
name|delete
parameter_list|(
specifier|final
name|INode
name|inode
parameter_list|)
block|{
specifier|final
name|int
name|c
init|=
name|search
argument_list|(
name|created
argument_list|,
name|inode
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|0
condition|)
block|{
comment|// remove a newly created inode
name|created
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// not in c-list, it must be in previous
specifier|final
name|int
name|d
init|=
name|search
argument_list|(
name|deleted
argument_list|,
name|inode
argument_list|)
decl_stmt|;
name|insertDeleted
argument_list|(
name|inode
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Modify an inode in current state. */
DECL|method|modify (final INode oldinode, final INode newinode)
name|void
name|modify
parameter_list|(
specifier|final
name|INode
name|oldinode
parameter_list|,
specifier|final
name|INode
name|newinode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|oldinode
operator|.
name|equals
argument_list|(
name|newinode
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"The names do not match: oldinode="
operator|+
name|oldinode
operator|+
literal|", newinode="
operator|+
name|newinode
argument_list|)
throw|;
block|}
specifier|final
name|int
name|c
init|=
name|search
argument_list|(
name|created
argument_list|,
name|newinode
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|0
condition|)
block|{
comment|// inode is already in c-list,
name|created
operator|.
name|set
argument_list|(
name|c
argument_list|,
name|newinode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|d
init|=
name|search
argument_list|(
name|deleted
argument_list|,
name|oldinode
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
comment|// neither in c-list nor d-list
name|insertCreated
argument_list|(
name|newinode
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|insertDeleted
argument_list|(
name|oldinode
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Given an inode in current state, find the corresponding inode in previous      * snapshot. The inodes in current state and previous snapshot can possibly      * be the same.      *      * @param inodeInCurrent The inode, possibly null, in current state.      * @return null if the inode is not found in previous snapshot;      *         otherwise, return the corresponding inode in previous snapshot.      */
DECL|method|accessPrevious (byte[] name, INode inodeInCurrent)
name|INode
name|accessPrevious
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|INode
name|inodeInCurrent
parameter_list|)
block|{
return|return
name|accessPrevious
argument_list|(
name|name
argument_list|,
name|inodeInCurrent
argument_list|,
name|created
argument_list|,
name|deleted
argument_list|)
return|;
block|}
DECL|method|accessPrevious (byte[] name, INode inodeInCurrent, final List<INode> clist, final List<INode> dlist)
specifier|private
specifier|static
name|INode
name|accessPrevious
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|INode
name|inodeInCurrent
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|clist
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|dlist
parameter_list|)
block|{
specifier|final
name|int
name|d
init|=
name|search
argument_list|(
name|dlist
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>=
literal|0
condition|)
block|{
comment|// the inode was in previous and was once deleted in current.
return|return
name|dlist
operator|.
name|get
argument_list|(
name|d
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|int
name|c
init|=
name|search
argument_list|(
name|clist
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|// When c>= 0, the inode in current is a newly created inode.
return|return
name|c
operator|>=
literal|0
condition|?
literal|null
else|:
name|inodeInCurrent
return|;
block|}
block|}
comment|/**      * Given an inode in previous snapshot, find the corresponding inode in      * current state. The inodes in current state and previous snapshot can      * possibly be the same.      *      * @param inodeInPrevious The inode, possibly null, in previous snapshot.      * @return null if the inode is not found in current state;      *         otherwise, return the corresponding inode in current state.      */
DECL|method|accessCurrent (byte[] name, INode inodeInPrevious)
name|INode
name|accessCurrent
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|INode
name|inodeInPrevious
parameter_list|)
block|{
return|return
name|accessPrevious
argument_list|(
name|name
argument_list|,
name|inodeInPrevious
argument_list|,
name|deleted
argument_list|,
name|created
argument_list|)
return|;
block|}
comment|/**      * Apply this diff to previous snapshot in order to obtain current state.      * @return the current state of the list.      */
DECL|method|apply2Previous (final List<INode> previous)
name|List
argument_list|<
name|INode
argument_list|>
name|apply2Previous
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|previous
parameter_list|)
block|{
return|return
name|apply2Previous
argument_list|(
name|previous
argument_list|,
name|created
argument_list|,
name|deleted
argument_list|)
return|;
block|}
DECL|method|apply2Previous (final List<INode> previous, final List<INode> clist, final List<INode> dlist)
specifier|private
specifier|static
name|List
argument_list|<
name|INode
argument_list|>
name|apply2Previous
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|previous
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|clist
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|dlist
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|current
init|=
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|(
name|previous
argument_list|)
decl_stmt|;
if|if
condition|(
name|dlist
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INode
name|d
range|:
name|dlist
control|)
block|{
name|current
operator|.
name|remove
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clist
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INode
name|c
range|:
name|clist
control|)
block|{
specifier|final
name|int
name|i
init|=
name|search
argument_list|(
name|current
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|current
operator|.
name|add
argument_list|(
operator|-
name|i
operator|-
literal|1
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|current
return|;
block|}
comment|/**      * Apply the reverse of this diff to current state in order      * to obtain the previous snapshot.      * @return the previous state of the list.      */
DECL|method|apply2Current (final List<INode> current)
name|List
argument_list|<
name|INode
argument_list|>
name|apply2Current
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|current
parameter_list|)
block|{
return|return
name|apply2Previous
argument_list|(
name|current
argument_list|,
name|deleted
argument_list|,
name|created
argument_list|)
return|;
block|}
comment|/** Convert the inode list to a compact string. */
DECL|method|toString (List<INode> inodes)
specifier|static
name|String
name|toString
parameter_list|(
name|List
argument_list|<
name|INode
argument_list|>
name|inodes
parameter_list|)
block|{
if|if
condition|(
name|inodes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|inodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|inodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|inodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|inodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|":\n  created="
operator|+
name|toString
argument_list|(
name|created
argument_list|)
operator|+
literal|"\n  deleted="
operator|+
name|toString
argument_list|(
name|deleted
argument_list|)
return|;
block|}
block|}
DECL|class|SnapshotDiff
specifier|private
class|class
name|SnapshotDiff
implements|implements
name|Comparable
argument_list|<
name|Snapshot
argument_list|>
block|{
comment|/** The snapshot will obtain after applied this diff. */
DECL|field|snapshot
specifier|final
name|Snapshot
name|snapshot
decl_stmt|;
comment|/** The size of the children list which is never changed. */
DECL|field|size
specifier|final
name|int
name|size
decl_stmt|;
comment|/**      * Posterior diff is the diff happened after this diff.      * The posterior diff should be first applied to obtain the posterior      * snapshot and then apply this diff in order to obtain this snapshot.      * If the posterior diff is null, the posterior state is the current state.       */
DECL|field|posteriorDiff
specifier|private
name|SnapshotDiff
name|posteriorDiff
decl_stmt|;
comment|/** The data of this diff. */
DECL|field|diff
specifier|private
specifier|final
name|Diff
name|diff
init|=
operator|new
name|Diff
argument_list|()
decl_stmt|;
comment|/** The snapshot version of the inode. */
DECL|field|snapshotINode
specifier|private
name|INode
name|snapshotINode
decl_stmt|;
DECL|method|SnapshotDiff (Snapshot snapshot, int size)
name|SnapshotDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"size = "
operator|+
name|size
operator|+
literal|"< 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (final Snapshot that_snapshot)
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|Snapshot
name|that_snapshot
parameter_list|)
block|{
return|return
name|Snapshot
operator|.
name|ID_COMPARATOR
operator|.
name|compare
argument_list|(
name|this
operator|.
name|snapshot
argument_list|,
name|that_snapshot
argument_list|)
return|;
block|}
comment|/**      * @return The children list of a directory in a snapshot.      *         Since the snapshot is read-only, the logical view of the list is      *         never changed although the internal data structure may mutate.      */
DECL|method|getChildrenList ()
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|()
block|{
return|return
operator|new
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|initChildren
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
specifier|final
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|posterior
init|=
name|posteriorDiff
operator|!=
literal|null
condition|?
name|posteriorDiff
operator|.
name|getChildrenList
argument_list|()
else|:
name|INodeDirectoryWithSnapshot
operator|.
name|this
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|children
operator|=
name|diff
operator|.
name|apply2Current
argument_list|(
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|posterior
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|INode
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|initChildren
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
specifier|public
name|INode
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|initChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|getChild (byte[] name)
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
specifier|final
name|INode
name|i
init|=
name|diff
operator|.
name|accessPrevious
argument_list|(
name|name
argument_list|,
name|INode
operator|.
name|DUMMY
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|INode
operator|.
name|DUMMY
condition|)
block|{
comment|// this diff is able to find it
return|return
name|i
return|;
block|}
else|else
block|{
comment|// should return the posterior INode.
return|return
name|posteriorDiff
operator|!=
literal|null
condition|?
name|posteriorDiff
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
else|:
name|INodeDirectoryWithSnapshot
operator|.
name|this
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
block|}
comment|/** Replace the given directory to an {@link INodeDirectoryWithSnapshot}. */
DECL|method|replaceDir (INodeDirectory oldDir, Snapshot latestSnapshot)
specifier|public
specifier|static
name|INodeDirectoryWithSnapshot
name|replaceDir
parameter_list|(
name|INodeDirectory
name|oldDir
parameter_list|,
name|Snapshot
name|latestSnapshot
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
operator|(
name|oldDir
operator|instanceof
name|INodeDirectoryWithSnapshot
operator|)
argument_list|,
literal|"oldDir is already an INodeDirectoryWithSnapshot, oldDir=%s"
argument_list|,
name|oldDir
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectory
name|parent
init|=
name|oldDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|parent
operator|!=
literal|null
argument_list|,
literal|"parent is null, oldDir=%s"
argument_list|,
name|oldDir
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectoryWithSnapshot
name|newDir
init|=
operator|new
name|INodeDirectoryWithSnapshot
argument_list|(
name|oldDir
argument_list|,
name|latestSnapshot
argument_list|)
decl_stmt|;
name|parent
operator|.
name|replaceChild
argument_list|(
name|newDir
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|newDir
return|;
block|}
comment|/** Diff list sorted by snapshot IDs, i.e. in chronological order. */
DECL|field|diffs
specifier|private
specifier|final
name|List
argument_list|<
name|SnapshotDiff
argument_list|>
name|diffs
init|=
operator|new
name|ArrayList
argument_list|<
name|SnapshotDiff
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|INodeDirectoryWithSnapshot (INodeDirectory that, Snapshot s)
name|INodeDirectoryWithSnapshot
parameter_list|(
name|INodeDirectory
name|that
parameter_list|,
name|Snapshot
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|that
argument_list|)
expr_stmt|;
comment|// add a diff for the snapshot
name|addSnapshotDiff
argument_list|(
name|s
argument_list|,
name|that
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|INodeDirectoryWithSnapshot (String name, INodeDirectory dir, Snapshot s)
name|INodeDirectoryWithSnapshot
parameter_list|(
name|String
name|name
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|,
name|Snapshot
name|s
parameter_list|)
block|{
name|this
argument_list|(
name|dir
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|setLocalName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setParent
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|addSnapshotDiff (Snapshot snapshot, int childrenSize)
name|SnapshotDiff
name|addSnapshotDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|int
name|childrenSize
parameter_list|)
block|{
specifier|final
name|SnapshotDiff
name|d
init|=
operator|new
name|SnapshotDiff
argument_list|(
name|snapshot
argument_list|,
name|childrenSize
argument_list|)
decl_stmt|;
name|diffs
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
comment|/**    * Check if the latest snapshot diff exist.  If not, add it.    * @return the latest snapshot diff, which is never null.    */
DECL|method|checkAndAddLatestSnapshotDiff (Snapshot latest)
specifier|private
name|SnapshotDiff
name|checkAndAddLatestSnapshotDiff
parameter_list|(
name|Snapshot
name|latest
parameter_list|)
block|{
specifier|final
name|SnapshotDiff
name|last
init|=
name|getLastSnapshotDiff
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|snapshot
operator|.
name|equals
argument_list|(
name|latest
argument_list|)
condition|)
block|{
return|return
name|last
return|;
block|}
specifier|final
name|int
name|size
init|=
name|getChildrenList
argument_list|(
literal|null
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|SnapshotDiff
name|d
init|=
name|addSnapshotDiff
argument_list|(
name|latest
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|.
name|posteriorDiff
operator|=
name|d
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
DECL|method|getLatestDiff (Snapshot latest)
name|Diff
name|getLatestDiff
parameter_list|(
name|Snapshot
name|latest
parameter_list|)
block|{
return|return
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latest
argument_list|)
operator|.
name|diff
return|;
block|}
comment|/**    * @return the diff corresponding to the snapshot.    *         When the diff is not found, it means that the current state and    *         the snapshot state are the same.     */
DECL|method|getSnapshotDiff (Snapshot snapshot)
name|SnapshotDiff
name|getSnapshotDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|i
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|diffs
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
comment|// exact match
return|return
name|diffs
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
else|else
block|{
comment|// Exact match not found means that there were no changes between
comment|// given snapshot and the next state so that the diff for the given
comment|// snapshot is not recorded.  Thus, use the next state.
specifier|final
name|int
name|j
init|=
operator|-
name|i
operator|-
literal|1
decl_stmt|;
return|return
name|j
operator|<
name|diffs
operator|.
name|size
argument_list|()
condition|?
name|diffs
operator|.
name|get
argument_list|(
name|j
argument_list|)
else|:
literal|null
return|;
block|}
block|}
DECL|method|getLastSnapshotDiff ()
name|SnapshotDiff
name|getLastSnapshotDiff
parameter_list|()
block|{
return|return
name|diffs
operator|.
name|get
argument_list|(
name|diffs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChildrenList (Snapshot snapshot)
specifier|public
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|SnapshotDiff
name|diff
init|=
name|getSnapshotDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
return|return
name|diff
operator|.
name|getChildrenList
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChild (byte[] name, Snapshot snapshot)
specifier|public
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|SnapshotDiff
name|diff
init|=
name|getSnapshotDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
return|return
name|diff
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addChild (INode inode, boolean setModTime, Snapshot latestSnapshot)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|INode
name|inode
parameter_list|,
name|boolean
name|setModTime
parameter_list|,
name|Snapshot
name|latestSnapshot
parameter_list|)
block|{
name|getLatestDiff
argument_list|(
name|latestSnapshot
argument_list|)
operator|.
name|create
argument_list|(
name|inode
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|addChild
argument_list|(
name|inode
argument_list|,
name|setModTime
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeChild (INode inode, Snapshot latestSnapshot)
specifier|public
name|INode
name|removeChild
parameter_list|(
name|INode
name|inode
parameter_list|,
name|Snapshot
name|latestSnapshot
parameter_list|)
block|{
name|getLatestDiff
argument_list|(
name|latestSnapshot
argument_list|)
operator|.
name|delete
argument_list|(
name|inode
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|removeChild
argument_list|(
name|inode
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|replaceChild (INodeDirectory newChild, Snapshot latestSnapshot)
specifier|public
name|INode
name|replaceChild
parameter_list|(
name|INodeDirectory
name|newChild
parameter_list|,
name|Snapshot
name|latestSnapshot
parameter_list|)
block|{
specifier|final
name|INode
name|oldChild
init|=
name|super
operator|.
name|replaceChild
argument_list|(
name|newChild
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|getLatestDiff
argument_list|(
name|latestSnapshot
argument_list|)
decl_stmt|;
name|diff
operator|.
name|delete
argument_list|(
name|oldChild
argument_list|)
expr_stmt|;
name|diff
operator|.
name|create
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
return|return
name|oldChild
return|;
block|}
annotation|@
name|Override
DECL|method|getModificationTime (Snapshot snapshot)
specifier|public
name|long
name|getModificationTime
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|SnapshotDiff
name|diff
init|=
name|getSnapshotDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
return|return
name|diff
operator|.
name|snapshotINode
operator|.
name|getModificationTime
argument_list|()
return|;
block|}
return|return
name|getModificationTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

