begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectoryWithQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|diff
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|diff
operator|.
name|Diff
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|diff
operator|.
name|Diff
operator|.
name|UndoInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * The directory with snapshots. It maintains a list of snapshot diffs for  * storing snapshot data. When there are modifications to the directory, the old  * data is stored in the latest snapshot, if there is any.  */
end_comment

begin_class
DECL|class|INodeDirectoryWithSnapshot
specifier|public
class|class
name|INodeDirectoryWithSnapshot
extends|extends
name|INodeDirectoryWithQuota
block|{
comment|/**    * The difference between the current state and a previous snapshot    * of the children list of an INodeDirectory.    */
DECL|class|ChildrenDiff
specifier|static
class|class
name|ChildrenDiff
extends|extends
name|Diff
argument_list|<
name|byte
index|[]
argument_list|,
name|INode
argument_list|>
block|{
DECL|method|ChildrenDiff ()
name|ChildrenDiff
parameter_list|()
block|{}
DECL|method|ChildrenDiff (final List<INode> created, final List<INode> deleted)
specifier|private
name|ChildrenDiff
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|created
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
parameter_list|)
block|{
name|super
argument_list|(
name|created
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
block|}
comment|/** Serialize {@link #created} */
DECL|method|writeCreated (DataOutputStream out)
specifier|private
name|void
name|writeCreated
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|created
init|=
name|getCreatedList
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|created
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|INode
name|node
range|:
name|created
control|)
block|{
comment|// For INode in created list, we only need to record its local name
name|byte
index|[]
name|name
init|=
name|node
operator|.
name|getLocalNameBytes
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|name
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Serialize {@link #deleted} */
DECL|method|writeDeleted (DataOutputStream out)
specifier|private
name|void
name|writeDeleted
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
init|=
name|getDeletedList
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|deleted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|INode
name|node
range|:
name|deleted
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|FSImageSerialization
operator|.
name|writeINodeDirectory
argument_list|(
operator|(
name|INodeDirectory
operator|)
name|node
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// INodeFile
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|created
init|=
name|getCreatedList
argument_list|()
decl_stmt|;
comment|// we write the block information only for INodeFile node when the
comment|// node is only stored in the deleted list or the node is not a
comment|// snapshot copy
name|int
name|createdIndex
init|=
name|search
argument_list|(
name|created
argument_list|,
name|node
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|createdIndex
operator|<
literal|0
condition|)
block|{
name|FSImageSerialization
operator|.
name|writeINodeFile
argument_list|(
operator|(
name|INodeFile
operator|)
name|node
argument_list|,
name|out
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|INodeFile
name|cNode
init|=
operator|(
name|INodeFile
operator|)
name|created
operator|.
name|get
argument_list|(
name|createdIndex
argument_list|)
decl_stmt|;
name|INodeFile
name|dNode
init|=
operator|(
name|INodeFile
operator|)
name|node
decl_stmt|;
comment|// A corner case here: after deleting a Snapshot, when combining
comment|// SnapshotDiff, we may put two inodes sharing the same name but
comment|// with totally different blocks in the created and deleted list of
comment|// the same SnapshotDiff.
if|if
condition|(
name|INodeFile
operator|.
name|isOfSameFile
argument_list|(
name|cNode
argument_list|,
name|dNode
argument_list|)
condition|)
block|{
name|FSImageSerialization
operator|.
name|writeINodeFile
argument_list|(
name|dNode
argument_list|,
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FSImageSerialization
operator|.
name|writeINodeFile
argument_list|(
name|dNode
argument_list|,
name|out
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/** Serialize to out */
DECL|method|write (DataOutputStream out)
specifier|private
name|void
name|write
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeCreated
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|writeDeleted
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/** @return The list of INodeDirectory contained in the deleted list */
DECL|method|getDirsInDeleted ()
specifier|private
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|getDirsInDeleted
parameter_list|()
block|{
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|dirList
init|=
operator|new
name|ArrayList
argument_list|<
name|INodeDirectory
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|INode
name|node
range|:
name|getDeletedList
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dirList
operator|.
name|add
argument_list|(
operator|(
name|INodeDirectory
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dirList
return|;
block|}
comment|/**      * Interpret the diff and generate a list of {@link DiffReportEntry}.      * @param parent The directory that the diff belongs to.      * @param fromEarlier True indicates {@code diff=later-earlier},       *                            False indicates {@code diff=earlier-later}      * @return A list of {@link DiffReportEntry} as the diff report.      */
DECL|method|generateReport ( INodeDirectoryWithSnapshot parent, boolean fromEarlier)
specifier|public
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|generateReport
parameter_list|(
name|INodeDirectoryWithSnapshot
name|parent
parameter_list|,
name|boolean
name|fromEarlier
parameter_list|)
block|{
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|mList
init|=
operator|new
name|ArrayList
argument_list|<
name|DiffReportEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|cList
init|=
operator|new
name|ArrayList
argument_list|<
name|DiffReportEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|dList
init|=
operator|new
name|ArrayList
argument_list|<
name|DiffReportEntry
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|,
name|d
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|created
init|=
name|getCreatedList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
init|=
name|getDeletedList
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|c
operator|<
name|created
operator|.
name|size
argument_list|()
operator|&&
name|d
operator|<
name|deleted
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
name|INode
name|cnode
init|=
name|created
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|INode
name|dnode
init|=
name|deleted
operator|.
name|get
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnode
operator|.
name|equals
argument_list|(
name|dnode
argument_list|)
condition|)
block|{
name|mList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|parent
operator|.
name|getFullPathName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|cnode
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
name|d
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cnode
operator|.
name|compareTo
argument_list|(
name|dnode
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|cList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|fromEarlier
condition|?
name|DiffType
operator|.
name|CREATE
else|:
name|DiffType
operator|.
name|DELETE
argument_list|,
name|parent
operator|.
name|getFullPathName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|cnode
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
else|else
block|{
name|dList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|fromEarlier
condition|?
name|DiffType
operator|.
name|DELETE
else|:
name|DiffType
operator|.
name|CREATE
argument_list|,
name|parent
operator|.
name|getFullPathName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|dnode
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
init|;
name|d
operator|<
name|deleted
operator|.
name|size
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
name|dList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|fromEarlier
condition|?
name|DiffType
operator|.
name|DELETE
else|:
name|DiffType
operator|.
name|CREATE
argument_list|,
name|parent
operator|.
name|getFullPathName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|deleted
operator|.
name|get
argument_list|(
name|d
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|c
operator|<
name|created
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|cList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|fromEarlier
condition|?
name|DiffType
operator|.
name|CREATE
else|:
name|DiffType
operator|.
name|DELETE
argument_list|,
name|parent
operator|.
name|getFullPathName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|created
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cList
operator|.
name|addAll
argument_list|(
name|dList
argument_list|)
expr_stmt|;
name|cList
operator|.
name|addAll
argument_list|(
name|mList
argument_list|)
expr_stmt|;
return|return
name|cList
return|;
block|}
block|}
comment|/**    * The difference of an {@link INodeDirectory} between two snapshots.    */
DECL|class|DirectoryDiff
class|class
name|DirectoryDiff
extends|extends
name|AbstractINodeDiff
argument_list|<
name|INodeDirectory
argument_list|,
name|DirectoryDiff
argument_list|>
block|{
comment|/** The size of the children list at snapshot creation time. */
DECL|field|childrenSize
specifier|private
specifier|final
name|int
name|childrenSize
decl_stmt|;
comment|/** The children list diff. */
DECL|field|diff
specifier|private
specifier|final
name|ChildrenDiff
name|diff
decl_stmt|;
DECL|method|DirectoryDiff (Snapshot snapshot, INodeDirectory dir)
specifier|private
name|DirectoryDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|)
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|childrenSize
operator|=
name|dir
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|diff
operator|=
operator|new
name|ChildrenDiff
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor used by FSImage loading */
DECL|method|DirectoryDiff (Snapshot snapshot, INodeDirectory snapshotINode, DirectoryDiff posteriorDiff, int childrenSize, List<INode> createdList, List<INode> deletedList)
name|DirectoryDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeDirectory
name|snapshotINode
parameter_list|,
name|DirectoryDiff
name|posteriorDiff
parameter_list|,
name|int
name|childrenSize
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|createdList
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|deletedList
parameter_list|)
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
name|snapshotINode
argument_list|,
name|posteriorDiff
argument_list|)
expr_stmt|;
name|this
operator|.
name|childrenSize
operator|=
name|childrenSize
expr_stmt|;
name|this
operator|.
name|diff
operator|=
operator|new
name|ChildrenDiff
argument_list|(
name|createdList
argument_list|,
name|deletedList
argument_list|)
expr_stmt|;
block|}
DECL|method|getChildrenDiff ()
name|ChildrenDiff
name|getChildrenDiff
parameter_list|()
block|{
return|return
name|diff
return|;
block|}
comment|/** Is the inode the root of the snapshot? */
DECL|method|isSnapshotRoot ()
name|boolean
name|isSnapshotRoot
parameter_list|()
block|{
return|return
name|snapshotINode
operator|==
name|snapshot
operator|.
name|getRoot
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentINode ()
name|INodeDirectory
name|getCurrentINode
parameter_list|()
block|{
return|return
name|INodeDirectoryWithSnapshot
operator|.
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|combinePosteriorAndCollectBlocks (final DirectoryDiff posterior, final BlocksMapUpdateInfo collectedBlocks)
name|void
name|combinePosteriorAndCollectBlocks
parameter_list|(
specifier|final
name|DirectoryDiff
name|posterior
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
name|diff
operator|.
name|combinePosterior
argument_list|(
name|posterior
operator|.
name|diff
argument_list|,
operator|new
name|Diff
operator|.
name|Processor
argument_list|<
name|INode
argument_list|>
argument_list|()
block|{
comment|/** Collect blocks for deleted files. */
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|INode
name|inode
parameter_list|)
block|{
if|if
condition|(
name|inode
operator|!=
literal|null
operator|&&
name|inode
operator|instanceof
name|INodeFile
condition|)
block|{
operator|(
operator|(
name|INodeFile
operator|)
name|inode
operator|)
operator|.
name|destroySubtreeAndCollectBlocks
argument_list|(
literal|null
argument_list|,
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return The children list of a directory in a snapshot.      *         Since the snapshot is read-only, the logical view of the list is      *         never changed although the internal data structure may mutate.      */
DECL|method|getChildrenList ()
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|()
block|{
return|return
operator|new
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|initChildren
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
specifier|final
name|ChildrenDiff
name|combined
init|=
operator|new
name|ChildrenDiff
argument_list|()
decl_stmt|;
for|for
control|(
name|DirectoryDiff
name|d
init|=
name|DirectoryDiff
operator|.
name|this
init|;
name|d
operator|!=
literal|null
condition|;
name|d
operator|=
name|d
operator|.
name|getPosterior
argument_list|()
control|)
block|{
name|combined
operator|.
name|combinePosterior
argument_list|(
name|d
operator|.
name|diff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|children
operator|=
name|combined
operator|.
name|apply2Current
argument_list|(
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|getCurrentINode
argument_list|()
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|INode
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|initChildren
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|childrenSize
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|childrenSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|INode
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|initChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** @return the child with the given name. */
DECL|method|getChild (byte[] name, boolean checkPosterior)
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|boolean
name|checkPosterior
parameter_list|)
block|{
for|for
control|(
name|DirectoryDiff
name|d
init|=
name|this
init|;
condition|;
name|d
operator|=
name|d
operator|.
name|getPosterior
argument_list|()
control|)
block|{
specifier|final
name|Container
argument_list|<
name|INode
argument_list|>
name|returned
init|=
name|d
operator|.
name|diff
operator|.
name|accessPrevious
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|returned
operator|!=
literal|null
condition|)
block|{
comment|// the diff is able to determine the inode
return|return
name|returned
operator|.
name|getElement
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|checkPosterior
condition|)
block|{
comment|// Since checkPosterior is false, return null, i.e. not found.
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|.
name|getPosterior
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// no more posterior diff, get from current inode.
return|return
name|getCurrentINode
argument_list|()
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|DirectoryDiff
name|posterior
init|=
name|getPosterior
argument_list|()
decl_stmt|;
return|return
literal|"\n  "
operator|+
name|snapshot
operator|+
literal|" (-> "
operator|+
operator|(
name|posterior
operator|==
literal|null
condition|?
literal|null
else|:
name|posterior
operator|.
name|snapshot
operator|)
operator|+
literal|") childrenSize="
operator|+
name|childrenSize
operator|+
literal|", "
operator|+
name|diff
return|;
block|}
comment|/** Serialize fields to out */
DECL|method|write (DataOutputStream out)
name|void
name|write
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|childrenSize
argument_list|)
expr_stmt|;
comment|// No need to write all fields of Snapshot here, since the snapshot must
comment|// have been recorded before when writing the FSImage. We only need to
comment|// record the full path of its root.
name|byte
index|[]
name|fullPath
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|snapshot
operator|.
name|getRoot
argument_list|()
operator|.
name|getFullPathName
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|fullPath
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|fullPath
argument_list|)
expr_stmt|;
comment|// write snapshotINode
if|if
condition|(
name|isSnapshotRoot
argument_list|()
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FSImageSerialization
operator|.
name|writeINodeDirectory
argument_list|(
name|snapshotINode
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write diff. Node need to write poseriorDiff, since diffs is a list.
name|diff
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** A list of directory diffs. */
DECL|class|DirectoryDiffList
class|class
name|DirectoryDiffList
extends|extends
name|AbstractINodeDiffList
argument_list|<
name|INodeDirectory
argument_list|,
name|DirectoryDiff
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getCurrentINode ()
name|INodeDirectoryWithSnapshot
name|getCurrentINode
parameter_list|()
block|{
return|return
name|INodeDirectoryWithSnapshot
operator|.
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|addSnapshotDiff (Snapshot snapshot, INodeDirectory dir, boolean isSnapshotCreation)
name|DirectoryDiff
name|addSnapshotDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|,
name|boolean
name|isSnapshotCreation
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|d
init|=
operator|new
name|DirectoryDiff
argument_list|(
name|snapshot
argument_list|,
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSnapshotCreation
condition|)
block|{
comment|//for snapshot creation, snapshotINode is the same as the snapshot root
name|d
operator|.
name|snapshotINode
operator|=
name|snapshot
operator|.
name|getRoot
argument_list|()
expr_stmt|;
block|}
return|return
name|append
argument_list|(
name|d
argument_list|)
return|;
block|}
block|}
comment|/** Create an {@link INodeDirectoryWithSnapshot} with the given snapshot.*/
DECL|method|newInstance (INodeDirectory dir, Snapshot latest)
specifier|public
specifier|static
name|INodeDirectoryWithSnapshot
name|newInstance
parameter_list|(
name|INodeDirectory
name|dir
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
specifier|final
name|INodeDirectoryWithSnapshot
name|withSnapshot
init|=
operator|new
name|INodeDirectoryWithSnapshot
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|latest
operator|!=
literal|null
condition|)
block|{
comment|// add a diff for the latest snapshot
name|withSnapshot
operator|.
name|diffs
operator|.
name|addSnapshotDiff
argument_list|(
name|latest
argument_list|,
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|withSnapshot
return|;
block|}
comment|/**    * Compute the difference between Snapshots.    *     * @param fromSnapshot Start point of the diff computation. Null indicates    *          current tree.    * @param toSnapshot End point of the diff computation. Null indicates current    *          tree.    * @param diff Used to capture the changes happening to the children. Note    *          that the diff still represents (later_snapshot - earlier_snapshot)    *          although toSnapshot can be before fromSnapshot.    * @return Whether changes happened between the startSnapshot and endSnaphsot.    */
DECL|method|computeDiffBetweenSnapshots (Snapshot fromSnapshot, Snapshot toSnapshot, ChildrenDiff diff)
name|boolean
name|computeDiffBetweenSnapshots
parameter_list|(
name|Snapshot
name|fromSnapshot
parameter_list|,
name|Snapshot
name|toSnapshot
parameter_list|,
name|ChildrenDiff
name|diff
parameter_list|)
block|{
name|Snapshot
name|earlierSnapshot
init|=
name|fromSnapshot
decl_stmt|;
name|Snapshot
name|laterSnapshot
init|=
name|toSnapshot
decl_stmt|;
if|if
condition|(
name|fromSnapshot
operator|==
literal|null
operator|||
operator|(
name|toSnapshot
operator|!=
literal|null
operator|&&
name|Snapshot
operator|.
name|ID_COMPARATOR
operator|.
name|compare
argument_list|(
name|fromSnapshot
argument_list|,
name|toSnapshot
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|earlierSnapshot
operator|=
name|toSnapshot
expr_stmt|;
name|laterSnapshot
operator|=
name|fromSnapshot
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|difflist
init|=
name|diffs
operator|.
name|asList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|difflist
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|earlierDiffIndex
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|difflist
argument_list|,
name|earlierSnapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|earlierDiffIndex
operator|<
literal|0
operator|&&
operator|(
operator|-
name|earlierDiffIndex
operator|-
literal|1
operator|)
operator|==
name|size
condition|)
block|{
comment|// if the earlierSnapshot is after the latest SnapshotDiff stored in diffs,
comment|// no modification happened after the earlierSnapshot
return|return
literal|false
return|;
block|}
name|int
name|laterDiffIndex
init|=
name|size
decl_stmt|;
if|if
condition|(
name|laterSnapshot
operator|!=
literal|null
condition|)
block|{
name|laterDiffIndex
operator|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|difflist
argument_list|,
name|laterSnapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|laterDiffIndex
operator|==
operator|-
literal|1
operator|||
name|laterDiffIndex
operator|==
literal|0
condition|)
block|{
comment|// if the endSnapshot is the earliest SnapshotDiff stored in
comment|// diffs, or before it, no modification happened before the endSnapshot
return|return
literal|false
return|;
block|}
block|}
name|earlierDiffIndex
operator|=
name|earlierDiffIndex
operator|<
literal|0
condition|?
operator|(
operator|-
name|earlierDiffIndex
operator|-
literal|1
operator|)
else|:
name|earlierDiffIndex
expr_stmt|;
name|laterDiffIndex
operator|=
name|laterDiffIndex
operator|<
literal|0
condition|?
operator|(
operator|-
name|laterDiffIndex
operator|-
literal|1
operator|)
else|:
name|laterDiffIndex
expr_stmt|;
name|boolean
name|dirMetadataChanged
init|=
literal|false
decl_stmt|;
name|INodeDirectory
name|dirCopy
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|earlierDiffIndex
init|;
name|i
operator|<
name|laterDiffIndex
condition|;
name|i
operator|++
control|)
block|{
name|DirectoryDiff
name|sdiff
init|=
name|difflist
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|diff
operator|.
name|combinePosterior
argument_list|(
name|sdiff
operator|.
name|diff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirMetadataChanged
operator|==
literal|false
operator|&&
name|sdiff
operator|.
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dirCopy
operator|==
literal|null
condition|)
block|{
name|dirCopy
operator|=
name|sdiff
operator|.
name|snapshotINode
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|dirCopy
operator|.
name|metadataEquals
argument_list|(
name|sdiff
operator|.
name|snapshotINode
argument_list|)
condition|)
block|{
name|dirMetadataChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
operator|||
name|dirMetadataChanged
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|dirCopy
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|laterDiffIndex
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|dirCopy
operator|.
name|metadataEquals
argument_list|(
name|difflist
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|snapshotINode
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
operator|!
name|dirCopy
operator|.
name|metadataEquals
argument_list|(
name|this
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Diff list sorted by snapshot IDs, i.e. in chronological order. */
DECL|field|diffs
specifier|private
specifier|final
name|DirectoryDiffList
name|diffs
decl_stmt|;
DECL|method|INodeDirectoryWithSnapshot (INodeDirectory that, boolean adopt, DirectoryDiffList diffs)
name|INodeDirectoryWithSnapshot
parameter_list|(
name|INodeDirectory
name|that
parameter_list|,
name|boolean
name|adopt
parameter_list|,
name|DirectoryDiffList
name|diffs
parameter_list|)
block|{
name|super
argument_list|(
name|that
argument_list|,
name|adopt
argument_list|,
name|that
operator|.
name|getNsQuota
argument_list|()
argument_list|,
name|that
operator|.
name|getDsQuota
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|diffs
operator|=
name|diffs
operator|!=
literal|null
condition|?
name|diffs
else|:
operator|new
name|DirectoryDiffList
argument_list|()
expr_stmt|;
block|}
comment|/** @return the last snapshot. */
DECL|method|getLastSnapshot ()
specifier|public
name|Snapshot
name|getLastSnapshot
parameter_list|()
block|{
return|return
name|diffs
operator|.
name|getLastSnapshot
argument_list|()
return|;
block|}
comment|/** @return the snapshot diff list. */
DECL|method|getDiffs ()
name|DirectoryDiffList
name|getDiffs
parameter_list|()
block|{
return|return
name|diffs
return|;
block|}
annotation|@
name|Override
DECL|method|createSnapshotCopy ()
specifier|public
name|Pair
argument_list|<
name|INodeDirectoryWithSnapshot
argument_list|,
name|INodeDirectory
argument_list|>
name|createSnapshotCopy
parameter_list|()
block|{
return|return
operator|new
name|Pair
argument_list|<
name|INodeDirectoryWithSnapshot
argument_list|,
name|INodeDirectory
argument_list|>
argument_list|(
name|this
argument_list|,
operator|new
name|INodeDirectory
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|recordModification (Snapshot latest)
specifier|public
name|INodeDirectoryWithSnapshot
name|recordModification
parameter_list|(
name|Snapshot
name|latest
parameter_list|)
block|{
name|saveSelf2Snapshot
argument_list|(
name|latest
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Save the snapshot copy to the latest snapshot. */
DECL|method|saveSelf2Snapshot (Snapshot latest, INodeDirectory snapshotCopy)
specifier|public
name|void
name|saveSelf2Snapshot
parameter_list|(
name|Snapshot
name|latest
parameter_list|,
name|INodeDirectory
name|snapshotCopy
parameter_list|)
block|{
if|if
condition|(
name|latest
operator|!=
literal|null
condition|)
block|{
name|diffs
operator|.
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latest
argument_list|)
operator|.
name|checkAndInitINode
argument_list|(
name|snapshotCopy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|saveChild2Snapshot (INode child, Snapshot latest)
specifier|public
name|INode
name|saveChild2Snapshot
parameter_list|(
name|INode
name|child
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|child
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|"child is a directory, child=%s"
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|latest
operator|==
literal|null
condition|)
block|{
return|return
name|child
return|;
block|}
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latest
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|getChild
argument_list|(
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// it was already saved in the latest snapshot earlier.
return|return
name|child
return|;
block|}
specifier|final
name|Pair
argument_list|<
name|?
extends|extends
name|INode
argument_list|,
name|?
extends|extends
name|INode
argument_list|>
name|p
init|=
name|child
operator|.
name|createSnapshotCopy
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|left
operator|!=
name|p
operator|.
name|right
condition|)
block|{
specifier|final
name|UndoInfo
argument_list|<
name|INode
argument_list|>
name|undoIndo
init|=
name|diff
operator|.
name|diff
operator|.
name|modify
argument_list|(
name|p
operator|.
name|right
argument_list|,
name|p
operator|.
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|undoIndo
operator|.
name|getTrashedElement
argument_list|()
operator|!=
literal|null
operator|&&
name|p
operator|.
name|left
operator|instanceof
name|FileWithSnapshot
condition|)
block|{
comment|// also should remove oldinode from the circular list
name|FileWithSnapshot
name|newNodeWithLink
init|=
operator|(
name|FileWithSnapshot
operator|)
name|p
operator|.
name|left
decl_stmt|;
name|FileWithSnapshot
name|oldNodeWithLink
init|=
operator|(
name|FileWithSnapshot
operator|)
name|p
operator|.
name|right
decl_stmt|;
name|newNodeWithLink
operator|.
name|setNext
argument_list|(
name|oldNodeWithLink
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|oldNodeWithLink
operator|.
name|setNext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
operator|.
name|left
return|;
block|}
annotation|@
name|Override
DECL|method|addChild (INode inode, boolean setModTime, Snapshot latest)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|INode
name|inode
parameter_list|,
name|boolean
name|setModTime
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
name|ChildrenDiff
name|diff
init|=
literal|null
decl_stmt|;
name|Integer
name|undoInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|latest
operator|!=
literal|null
condition|)
block|{
name|diff
operator|=
name|diffs
operator|.
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latest
argument_list|)
operator|.
name|diff
expr_stmt|;
name|undoInfo
operator|=
name|diff
operator|.
name|create
argument_list|(
name|inode
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|added
init|=
name|super
operator|.
name|addChild
argument_list|(
name|inode
argument_list|,
name|setModTime
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|added
operator|&&
name|undoInfo
operator|!=
literal|null
condition|)
block|{
name|diff
operator|.
name|undoCreate
argument_list|(
name|inode
argument_list|,
name|undoInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
annotation|@
name|Override
DECL|method|removeChild (INode child, Snapshot latest)
specifier|public
name|INode
name|removeChild
parameter_list|(
name|INode
name|child
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
name|ChildrenDiff
name|diff
init|=
literal|null
decl_stmt|;
name|UndoInfo
argument_list|<
name|INode
argument_list|>
name|undoInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|latest
operator|!=
literal|null
condition|)
block|{
name|diff
operator|=
name|diffs
operator|.
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latest
argument_list|)
operator|.
name|diff
expr_stmt|;
name|undoInfo
operator|=
name|diff
operator|.
name|delete
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
specifier|final
name|INode
name|removed
init|=
name|super
operator|.
name|removeChild
argument_list|(
name|child
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|undoInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|removed
operator|==
literal|null
condition|)
block|{
comment|//remove failed, undo
name|diff
operator|.
name|undoDelete
argument_list|(
name|child
argument_list|,
name|undoInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//clean up the previously created file, if there is any.
specifier|final
name|INode
name|trashed
init|=
name|undoInfo
operator|.
name|getTrashedElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|trashed
operator|!=
literal|null
operator|&&
name|trashed
operator|instanceof
name|FileWithSnapshot
condition|)
block|{
operator|(
operator|(
name|FileWithSnapshot
operator|)
name|trashed
operator|)
operator|.
name|removeSelf
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|removed
return|;
block|}
annotation|@
name|Override
DECL|method|getChildrenList (Snapshot snapshot)
specifier|public
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getChildrenList
argument_list|()
else|:
name|super
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChild (byte[] name, Snapshot snapshot)
specifier|public
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
else|:
name|super
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUserName (Snapshot snapshot)
specifier|public
name|String
name|getUserName
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getSnapshotINode
argument_list|()
operator|.
name|getUserName
argument_list|()
else|:
name|super
operator|.
name|getUserName
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getGroupName (Snapshot snapshot)
specifier|public
name|String
name|getGroupName
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getSnapshotINode
argument_list|()
operator|.
name|getGroupName
argument_list|()
else|:
name|super
operator|.
name|getGroupName
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFsPermission (Snapshot snapshot)
specifier|public
name|FsPermission
name|getFsPermission
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getSnapshotINode
argument_list|()
operator|.
name|getFsPermission
argument_list|()
else|:
name|super
operator|.
name|getFsPermission
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAccessTime (Snapshot snapshot)
specifier|public
name|long
name|getAccessTime
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getSnapshotINode
argument_list|()
operator|.
name|getAccessTime
argument_list|()
else|:
name|super
operator|.
name|getAccessTime
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getModificationTime (Snapshot snapshot)
specifier|public
name|long
name|getModificationTime
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getSnapshotINode
argument_list|()
operator|.
name|getModificationTime
argument_list|()
else|:
name|super
operator|.
name|getModificationTime
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|diffs
return|;
block|}
comment|/**    * Get all the INodeDirectory stored in the deletes lists.    *     * @param snapshotDirMap    *          A HashMap storing all the INodeDirectory stored in the deleted    *          lists, with their associated full Snapshot.    * @return The number of INodeDirectory returned.    */
DECL|method|getSnapshotDirectory ( Map<Snapshot, List<INodeDirectory>> snapshotDirMap)
specifier|public
name|int
name|getSnapshotDirectory
parameter_list|(
name|Map
argument_list|<
name|Snapshot
argument_list|,
name|List
argument_list|<
name|INodeDirectory
argument_list|>
argument_list|>
name|snapshotDirMap
parameter_list|)
block|{
name|int
name|dirNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DirectoryDiff
name|sdiff
range|:
name|diffs
control|)
block|{
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|list
init|=
name|sdiff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getDirsInDeleted
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|snapshotDirMap
operator|.
name|put
argument_list|(
name|sdiff
operator|.
name|snapshot
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|dirNum
operator|+=
name|list
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dirNum
return|;
block|}
annotation|@
name|Override
DECL|method|destroySubtreeAndCollectBlocks (final Snapshot snapshot, final BlocksMapUpdateInfo collectedBlocks)
specifier|public
name|int
name|destroySubtreeAndCollectBlocks
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
specifier|final
name|int
name|n
init|=
name|super
operator|.
name|destroySubtreeAndCollectBlocks
argument_list|(
name|snapshot
argument_list|,
name|collectedBlocks
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshot
operator|!=
literal|null
condition|)
block|{
name|getDiffs
argument_list|()
operator|.
name|deleteSnapshotDiff
argument_list|(
name|snapshot
argument_list|,
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
block|}
end_class

end_unit

