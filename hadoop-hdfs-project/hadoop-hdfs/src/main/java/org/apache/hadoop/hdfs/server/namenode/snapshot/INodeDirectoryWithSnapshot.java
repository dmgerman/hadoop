begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|NSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Quota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|Content
operator|.
name|CountsMap
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectoryWithQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|diff
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|diff
operator|.
name|Diff
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|diff
operator|.
name|Diff
operator|.
name|UndoInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * The directory with snapshots. It maintains a list of snapshot diffs for  * storing snapshot data. When there are modifications to the directory, the old  * data is stored in the latest snapshot, if there is any.  */
end_comment

begin_class
DECL|class|INodeDirectoryWithSnapshot
specifier|public
class|class
name|INodeDirectoryWithSnapshot
extends|extends
name|INodeDirectoryWithQuota
block|{
comment|/**    * The difference between the current state and a previous snapshot    * of the children list of an INodeDirectory.    */
DECL|class|ChildrenDiff
specifier|static
class|class
name|ChildrenDiff
extends|extends
name|Diff
argument_list|<
name|byte
index|[]
argument_list|,
name|INode
argument_list|>
block|{
DECL|method|ChildrenDiff ()
name|ChildrenDiff
parameter_list|()
block|{}
DECL|method|ChildrenDiff (final List<INode> created, final List<INode> deleted)
specifier|private
name|ChildrenDiff
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|created
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
parameter_list|)
block|{
name|super
argument_list|(
name|created
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
block|}
DECL|method|setCreatedChild (final int c, final INode newChild)
specifier|private
specifier|final
name|INode
name|setCreatedChild
parameter_list|(
specifier|final
name|int
name|c
parameter_list|,
specifier|final
name|INode
name|newChild
parameter_list|)
block|{
return|return
name|getCreatedList
argument_list|()
operator|.
name|set
argument_list|(
name|c
argument_list|,
name|newChild
argument_list|)
return|;
block|}
DECL|method|removeCreatedChild (final int c, final INode child)
specifier|private
specifier|final
name|boolean
name|removeCreatedChild
parameter_list|(
specifier|final
name|int
name|c
parameter_list|,
specifier|final
name|INode
name|child
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|created
init|=
name|getCreatedList
argument_list|()
decl_stmt|;
if|if
condition|(
name|created
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|==
name|child
condition|)
block|{
specifier|final
name|INode
name|removed
init|=
name|created
operator|.
name|remove
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|removed
operator|==
name|child
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** clear the created list */
DECL|method|destroyCreatedList ( final INodeDirectoryWithSnapshot currentINode, final BlocksMapUpdateInfo collectedBlocks)
specifier|private
name|int
name|destroyCreatedList
parameter_list|(
specifier|final
name|INodeDirectoryWithSnapshot
name|currentINode
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
name|int
name|removedNum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|createdList
init|=
name|getCreatedList
argument_list|()
decl_stmt|;
for|for
control|(
name|INode
name|c
range|:
name|createdList
control|)
block|{
name|removedNum
operator|+=
name|c
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|collectedBlocks
argument_list|)
expr_stmt|;
comment|// if c is also contained in the children list, remove it
name|currentINode
operator|.
name|removeChild
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|createdList
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|removedNum
return|;
block|}
comment|/** clear the deleted list */
DECL|method|destroyDeletedList (final BlocksMapUpdateInfo collectedBlocks)
specifier|private
name|int
name|destroyDeletedList
parameter_list|(
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
name|int
name|removedNum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|deletedList
init|=
name|getDeletedList
argument_list|()
decl_stmt|;
for|for
control|(
name|INode
name|d
range|:
name|deletedList
control|)
block|{
name|removedNum
operator|+=
name|d
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
name|deletedList
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|removedNum
return|;
block|}
comment|/** Serialize {@link #created} */
DECL|method|writeCreated (DataOutputStream out)
specifier|private
name|void
name|writeCreated
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|created
init|=
name|getCreatedList
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|created
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|INode
name|node
range|:
name|created
control|)
block|{
comment|// For INode in created list, we only need to record its local name
name|byte
index|[]
name|name
init|=
name|node
operator|.
name|getLocalNameBytes
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|name
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Serialize {@link #deleted} */
DECL|method|writeDeleted (DataOutputStream out)
specifier|private
name|void
name|writeDeleted
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
init|=
name|getDeletedList
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|deleted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|INode
name|node
range|:
name|deleted
control|)
block|{
name|FSImageSerialization
operator|.
name|saveINode2Image
argument_list|(
name|node
argument_list|,
name|out
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Serialize to out */
DECL|method|write (DataOutputStream out)
specifier|private
name|void
name|write
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeCreated
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|writeDeleted
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/** @return The list of INodeDirectory contained in the deleted list */
DECL|method|getDirsInDeleted ()
specifier|private
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|getDirsInDeleted
parameter_list|()
block|{
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|dirList
init|=
operator|new
name|ArrayList
argument_list|<
name|INodeDirectory
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|INode
name|node
range|:
name|getDeletedList
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dirList
operator|.
name|add
argument_list|(
operator|(
name|INodeDirectory
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dirList
return|;
block|}
comment|/**      * Interpret the diff and generate a list of {@link DiffReportEntry}.      * @root The snapshot root of the diff report.      * @param parent The directory that the diff belongs to.      * @param fromEarlier True indicates {@code diff=later-earlier},       *                            False indicates {@code diff=earlier-later}      * @return A list of {@link DiffReportEntry} as the diff report.      */
DECL|method|generateReport ( INodeDirectorySnapshottable root, INodeDirectoryWithSnapshot parent, boolean fromEarlier)
specifier|public
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|generateReport
parameter_list|(
name|INodeDirectorySnapshottable
name|root
parameter_list|,
name|INodeDirectoryWithSnapshot
name|parent
parameter_list|,
name|boolean
name|fromEarlier
parameter_list|)
block|{
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|cList
init|=
operator|new
name|ArrayList
argument_list|<
name|DiffReportEntry
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiffReportEntry
argument_list|>
name|dList
init|=
operator|new
name|ArrayList
argument_list|<
name|DiffReportEntry
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|,
name|d
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|created
init|=
name|getCreatedList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
init|=
name|getDeletedList
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|parentPath
init|=
name|parent
operator|.
name|getRelativePathNameBytes
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|fullPath
init|=
operator|new
name|byte
index|[
name|parentPath
operator|.
name|length
operator|+
literal|1
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|parentPath
argument_list|,
literal|0
argument_list|,
name|fullPath
argument_list|,
literal|0
argument_list|,
name|parentPath
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|c
operator|<
name|created
operator|.
name|size
argument_list|()
operator|&&
name|d
operator|<
name|deleted
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
name|INode
name|cnode
init|=
name|created
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|INode
name|dnode
init|=
name|deleted
operator|.
name|get
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnode
operator|.
name|equals
argument_list|(
name|dnode
argument_list|)
condition|)
block|{
name|fullPath
index|[
name|fullPath
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|cnode
operator|.
name|getLocalNameBytes
argument_list|()
expr_stmt|;
if|if
condition|(
name|cnode
operator|.
name|isSymlink
argument_list|()
operator|&&
name|dnode
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
name|dList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|MODIFY
argument_list|,
name|fullPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// must be the case: delete first and then create an inode with the
comment|// same name
name|cList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|CREATE
argument_list|,
name|fullPath
argument_list|)
argument_list|)
expr_stmt|;
name|dList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|DiffType
operator|.
name|DELETE
argument_list|,
name|fullPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
operator|++
expr_stmt|;
name|d
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cnode
operator|.
name|compareTo
argument_list|(
name|dnode
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|fullPath
index|[
name|fullPath
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|cnode
operator|.
name|getLocalNameBytes
argument_list|()
expr_stmt|;
name|cList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|fromEarlier
condition|?
name|DiffType
operator|.
name|CREATE
else|:
name|DiffType
operator|.
name|DELETE
argument_list|,
name|fullPath
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
else|else
block|{
name|fullPath
index|[
name|fullPath
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|dnode
operator|.
name|getLocalNameBytes
argument_list|()
expr_stmt|;
name|dList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|fromEarlier
condition|?
name|DiffType
operator|.
name|DELETE
else|:
name|DiffType
operator|.
name|CREATE
argument_list|,
name|fullPath
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
init|;
name|d
operator|<
name|deleted
operator|.
name|size
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
name|fullPath
index|[
name|fullPath
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|deleted
operator|.
name|get
argument_list|(
name|d
argument_list|)
operator|.
name|getLocalNameBytes
argument_list|()
expr_stmt|;
name|dList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|fromEarlier
condition|?
name|DiffType
operator|.
name|DELETE
else|:
name|DiffType
operator|.
name|CREATE
argument_list|,
name|fullPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|c
operator|<
name|created
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|fullPath
index|[
name|fullPath
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|created
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getLocalNameBytes
argument_list|()
expr_stmt|;
name|cList
operator|.
name|add
argument_list|(
operator|new
name|DiffReportEntry
argument_list|(
name|fromEarlier
condition|?
name|DiffType
operator|.
name|CREATE
else|:
name|DiffType
operator|.
name|DELETE
argument_list|,
name|fullPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dList
operator|.
name|addAll
argument_list|(
name|cList
argument_list|)
expr_stmt|;
return|return
name|dList
return|;
block|}
block|}
comment|/**    * The difference of an {@link INodeDirectory} between two snapshots.    */
DECL|class|DirectoryDiff
specifier|static
class|class
name|DirectoryDiff
extends|extends
name|AbstractINodeDiff
argument_list|<
name|INodeDirectory
argument_list|,
name|DirectoryDiff
argument_list|>
block|{
comment|/** The size of the children list at snapshot creation time. */
DECL|field|childrenSize
specifier|private
specifier|final
name|int
name|childrenSize
decl_stmt|;
comment|/** The children list diff. */
DECL|field|diff
specifier|private
specifier|final
name|ChildrenDiff
name|diff
decl_stmt|;
DECL|method|DirectoryDiff (Snapshot snapshot, INodeDirectory dir)
specifier|private
name|DirectoryDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|)
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|childrenSize
operator|=
name|dir
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|diff
operator|=
operator|new
name|ChildrenDiff
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor used by FSImage loading */
DECL|method|DirectoryDiff (Snapshot snapshot, INodeDirectory snapshotINode, DirectoryDiff posteriorDiff, int childrenSize, List<INode> createdList, List<INode> deletedList)
name|DirectoryDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeDirectory
name|snapshotINode
parameter_list|,
name|DirectoryDiff
name|posteriorDiff
parameter_list|,
name|int
name|childrenSize
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|createdList
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|deletedList
parameter_list|)
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
name|snapshotINode
argument_list|,
name|posteriorDiff
argument_list|)
expr_stmt|;
name|this
operator|.
name|childrenSize
operator|=
name|childrenSize
expr_stmt|;
name|this
operator|.
name|diff
operator|=
operator|new
name|ChildrenDiff
argument_list|(
name|createdList
argument_list|,
name|deletedList
argument_list|)
expr_stmt|;
block|}
DECL|method|getChildrenDiff ()
name|ChildrenDiff
name|getChildrenDiff
parameter_list|()
block|{
return|return
name|diff
return|;
block|}
comment|/** Is the inode the root of the snapshot? */
DECL|method|isSnapshotRoot ()
name|boolean
name|isSnapshotRoot
parameter_list|()
block|{
return|return
name|snapshotINode
operator|==
name|snapshot
operator|.
name|getRoot
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|combinePosteriorAndCollectBlocks (final INodeDirectory currentDir, final DirectoryDiff posterior, final BlocksMapUpdateInfo collectedBlocks)
name|int
name|combinePosteriorAndCollectBlocks
parameter_list|(
specifier|final
name|INodeDirectory
name|currentDir
parameter_list|,
specifier|final
name|DirectoryDiff
name|posterior
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
return|return
name|diff
operator|.
name|combinePosterior
argument_list|(
name|posterior
operator|.
name|diff
argument_list|,
operator|new
name|Diff
operator|.
name|Processor
argument_list|<
name|INode
argument_list|>
argument_list|()
block|{
comment|/** Collect blocks for deleted files. */
annotation|@
name|Override
specifier|public
name|int
name|process
parameter_list|(
name|INode
name|inode
parameter_list|)
block|{
if|if
condition|(
name|inode
operator|!=
literal|null
condition|)
block|{
return|return
name|inode
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|collectedBlocks
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @return The children list of a directory in a snapshot.      *         Since the snapshot is read-only, the logical view of the list is      *         never changed although the internal data structure may mutate.      */
DECL|method|getChildrenList (final INodeDirectory currentDir)
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
specifier|final
name|INodeDirectory
name|currentDir
parameter_list|)
block|{
return|return
operator|new
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
argument_list|()
block|{
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|initChildren
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
specifier|final
name|ChildrenDiff
name|combined
init|=
operator|new
name|ChildrenDiff
argument_list|()
decl_stmt|;
for|for
control|(
name|DirectoryDiff
name|d
init|=
name|DirectoryDiff
operator|.
name|this
init|;
name|d
operator|!=
literal|null
condition|;
name|d
operator|=
name|d
operator|.
name|getPosterior
argument_list|()
control|)
block|{
name|combined
operator|.
name|combinePosterior
argument_list|(
name|d
operator|.
name|diff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|children
operator|=
name|combined
operator|.
name|apply2Current
argument_list|(
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asList
argument_list|(
name|currentDir
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|INode
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|initChildren
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|childrenSize
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|childrenSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|INode
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|initChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/** @return the child with the given name. */
DECL|method|getChild (byte[] name, boolean checkPosterior, INodeDirectory currentDir)
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|boolean
name|checkPosterior
parameter_list|,
name|INodeDirectory
name|currentDir
parameter_list|)
block|{
for|for
control|(
name|DirectoryDiff
name|d
init|=
name|this
init|;
condition|;
name|d
operator|=
name|d
operator|.
name|getPosterior
argument_list|()
control|)
block|{
specifier|final
name|Container
argument_list|<
name|INode
argument_list|>
name|returned
init|=
name|d
operator|.
name|diff
operator|.
name|accessPrevious
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|returned
operator|!=
literal|null
condition|)
block|{
comment|// the diff is able to determine the inode
return|return
name|returned
operator|.
name|getElement
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|checkPosterior
condition|)
block|{
comment|// Since checkPosterior is false, return null, i.e. not found.
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|d
operator|.
name|getPosterior
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// no more posterior diff, get from current inode.
return|return
name|currentDir
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" childrenSize="
operator|+
name|childrenSize
operator|+
literal|", "
operator|+
name|diff
return|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutputStream out)
name|void
name|write
parameter_list|(
name|DataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeSnapshotPath
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|childrenSize
argument_list|)
expr_stmt|;
comment|// write snapshotINode
if|if
condition|(
name|isSnapshotRoot
argument_list|()
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FSImageSerialization
operator|.
name|writeINodeDirectory
argument_list|(
name|snapshotINode
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write diff. Node need to write poseriorDiff, since diffs is a list.
name|diff
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroyAndCollectBlocks (INodeDirectory currentINode, BlocksMapUpdateInfo collectedBlocks)
name|int
name|destroyAndCollectBlocks
parameter_list|(
name|INodeDirectory
name|currentINode
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
return|return
name|diff
operator|.
name|destroyDeletedList
argument_list|(
name|collectedBlocks
argument_list|)
return|;
block|}
block|}
DECL|class|DirectoryDiffFactory
specifier|static
class|class
name|DirectoryDiffFactory
extends|extends
name|AbstractINodeDiff
operator|.
name|Factory
argument_list|<
name|INodeDirectory
argument_list|,
name|DirectoryDiff
argument_list|>
block|{
DECL|field|INSTANCE
specifier|static
specifier|final
name|DirectoryDiffFactory
name|INSTANCE
init|=
operator|new
name|DirectoryDiffFactory
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|createDiff (Snapshot snapshot, INodeDirectory currentDir)
name|DirectoryDiff
name|createDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeDirectory
name|currentDir
parameter_list|)
block|{
return|return
operator|new
name|DirectoryDiff
argument_list|(
name|snapshot
argument_list|,
name|currentDir
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createSnapshotCopy (INodeDirectory currentDir)
name|INodeDirectory
name|createSnapshotCopy
parameter_list|(
name|INodeDirectory
name|currentDir
parameter_list|)
block|{
specifier|final
name|INodeDirectory
name|copy
init|=
name|currentDir
operator|instanceof
name|INodeDirectoryWithQuota
condition|?
operator|new
name|INodeDirectoryWithQuota
argument_list|(
name|currentDir
argument_list|,
literal|false
argument_list|,
name|currentDir
operator|.
name|getNsQuota
argument_list|()
argument_list|,
name|currentDir
operator|.
name|getDsQuota
argument_list|()
argument_list|)
else|:
operator|new
name|INodeDirectory
argument_list|(
name|currentDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|copy
operator|.
name|clearChildren
argument_list|()
expr_stmt|;
return|return
name|copy
return|;
block|}
block|}
comment|/** A list of directory diffs. */
DECL|class|DirectoryDiffList
specifier|static
class|class
name|DirectoryDiffList
extends|extends
name|AbstractINodeDiffList
argument_list|<
name|INodeDirectory
argument_list|,
name|DirectoryDiff
argument_list|>
block|{
DECL|method|DirectoryDiffList ()
name|DirectoryDiffList
parameter_list|()
block|{
name|setFactory
argument_list|(
name|DirectoryDiffFactory
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Compute the difference between Snapshots.    *     * @param fromSnapshot Start point of the diff computation. Null indicates    *          current tree.    * @param toSnapshot End point of the diff computation. Null indicates current    *          tree.    * @param diff Used to capture the changes happening to the children. Note    *          that the diff still represents (later_snapshot - earlier_snapshot)    *          although toSnapshot can be before fromSnapshot.    * @return Whether changes happened between the startSnapshot and endSnaphsot.    */
DECL|method|computeDiffBetweenSnapshots (Snapshot fromSnapshot, Snapshot toSnapshot, ChildrenDiff diff)
name|boolean
name|computeDiffBetweenSnapshots
parameter_list|(
name|Snapshot
name|fromSnapshot
parameter_list|,
name|Snapshot
name|toSnapshot
parameter_list|,
name|ChildrenDiff
name|diff
parameter_list|)
block|{
name|Snapshot
name|earlierSnapshot
init|=
name|fromSnapshot
decl_stmt|;
name|Snapshot
name|laterSnapshot
init|=
name|toSnapshot
decl_stmt|;
if|if
condition|(
name|Snapshot
operator|.
name|ID_COMPARATOR
operator|.
name|compare
argument_list|(
name|fromSnapshot
argument_list|,
name|toSnapshot
argument_list|)
operator|>
literal|0
condition|)
block|{
name|earlierSnapshot
operator|=
name|toSnapshot
expr_stmt|;
name|laterSnapshot
operator|=
name|fromSnapshot
expr_stmt|;
block|}
name|boolean
name|modified
init|=
name|diffs
operator|.
name|changedBetweenSnapshots
argument_list|(
name|earlierSnapshot
argument_list|,
name|laterSnapshot
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|modified
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|difflist
init|=
name|diffs
operator|.
name|asList
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|difflist
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|earlierDiffIndex
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|difflist
argument_list|,
name|earlierSnapshot
argument_list|)
decl_stmt|;
name|int
name|laterDiffIndex
init|=
name|laterSnapshot
operator|==
literal|null
condition|?
name|size
else|:
name|Collections
operator|.
name|binarySearch
argument_list|(
name|difflist
argument_list|,
name|laterSnapshot
argument_list|)
decl_stmt|;
name|earlierDiffIndex
operator|=
name|earlierDiffIndex
operator|<
literal|0
condition|?
operator|(
operator|-
name|earlierDiffIndex
operator|-
literal|1
operator|)
else|:
name|earlierDiffIndex
expr_stmt|;
name|laterDiffIndex
operator|=
name|laterDiffIndex
operator|<
literal|0
condition|?
operator|(
operator|-
name|laterDiffIndex
operator|-
literal|1
operator|)
else|:
name|laterDiffIndex
expr_stmt|;
name|boolean
name|dirMetadataChanged
init|=
literal|false
decl_stmt|;
name|INodeDirectory
name|dirCopy
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|earlierDiffIndex
init|;
name|i
operator|<
name|laterDiffIndex
condition|;
name|i
operator|++
control|)
block|{
name|DirectoryDiff
name|sdiff
init|=
name|difflist
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|diff
operator|.
name|combinePosterior
argument_list|(
name|sdiff
operator|.
name|diff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirMetadataChanged
operator|==
literal|false
operator|&&
name|sdiff
operator|.
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dirCopy
operator|==
literal|null
condition|)
block|{
name|dirCopy
operator|=
name|sdiff
operator|.
name|snapshotINode
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|dirCopy
operator|.
name|metadataEquals
argument_list|(
name|sdiff
operator|.
name|snapshotINode
argument_list|)
condition|)
block|{
name|dirMetadataChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
operator|||
name|dirMetadataChanged
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|dirCopy
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|laterDiffIndex
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|dirCopy
operator|.
name|metadataEquals
argument_list|(
name|difflist
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|snapshotINode
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
operator|!
name|dirCopy
operator|.
name|metadataEquals
argument_list|(
name|this
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Diff list sorted by snapshot IDs, i.e. in chronological order. */
DECL|field|diffs
specifier|private
specifier|final
name|DirectoryDiffList
name|diffs
decl_stmt|;
DECL|method|INodeDirectoryWithSnapshot (INodeDirectory that)
specifier|public
name|INodeDirectoryWithSnapshot
parameter_list|(
name|INodeDirectory
name|that
parameter_list|)
block|{
name|this
argument_list|(
name|that
argument_list|,
literal|true
argument_list|,
name|that
operator|instanceof
name|INodeDirectoryWithSnapshot
condition|?
operator|(
operator|(
name|INodeDirectoryWithSnapshot
operator|)
name|that
operator|)
operator|.
name|getDiffs
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|INodeDirectoryWithSnapshot (INodeDirectory that, boolean adopt, DirectoryDiffList diffs)
name|INodeDirectoryWithSnapshot
parameter_list|(
name|INodeDirectory
name|that
parameter_list|,
name|boolean
name|adopt
parameter_list|,
name|DirectoryDiffList
name|diffs
parameter_list|)
block|{
name|super
argument_list|(
name|that
argument_list|,
name|adopt
argument_list|,
name|that
operator|.
name|getNsQuota
argument_list|()
argument_list|,
name|that
operator|.
name|getDsQuota
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|diffs
operator|=
name|diffs
operator|!=
literal|null
condition|?
name|diffs
else|:
operator|new
name|DirectoryDiffList
argument_list|()
expr_stmt|;
block|}
comment|/** @return the last snapshot. */
DECL|method|getLastSnapshot ()
specifier|public
name|Snapshot
name|getLastSnapshot
parameter_list|()
block|{
return|return
name|diffs
operator|.
name|getLastSnapshot
argument_list|()
return|;
block|}
comment|/** @return the snapshot diff list. */
DECL|method|getDiffs ()
name|DirectoryDiffList
name|getDiffs
parameter_list|()
block|{
return|return
name|diffs
return|;
block|}
annotation|@
name|Override
DECL|method|getSnapshotINode (Snapshot snapshot)
specifier|public
name|INodeDirectory
name|getSnapshotINode
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|diffs
operator|.
name|getSnapshotINode
argument_list|(
name|snapshot
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|recordModification (final Snapshot latest)
specifier|public
name|INodeDirectoryWithSnapshot
name|recordModification
parameter_list|(
specifier|final
name|Snapshot
name|latest
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
return|return
name|isInLatestSnapshot
argument_list|(
name|latest
argument_list|)
condition|?
name|saveSelf2Snapshot
argument_list|(
name|latest
argument_list|,
literal|null
argument_list|)
else|:
name|this
return|;
block|}
comment|/** Save the snapshot copy to the latest snapshot. */
DECL|method|saveSelf2Snapshot ( final Snapshot latest, final INodeDirectory snapshotCopy)
specifier|public
name|INodeDirectoryWithSnapshot
name|saveSelf2Snapshot
parameter_list|(
specifier|final
name|Snapshot
name|latest
parameter_list|,
specifier|final
name|INodeDirectory
name|snapshotCopy
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
name|diffs
operator|.
name|saveSelf2Snapshot
argument_list|(
name|latest
argument_list|,
name|this
argument_list|,
name|snapshotCopy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|saveChild2Snapshot (final INode child, final Snapshot latest, final INode snapshotCopy)
specifier|public
name|INode
name|saveChild2Snapshot
parameter_list|(
specifier|final
name|INode
name|child
parameter_list|,
specifier|final
name|Snapshot
name|latest
parameter_list|,
specifier|final
name|INode
name|snapshotCopy
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|child
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|"child is a directory, child=%s"
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|latest
operator|==
literal|null
condition|)
block|{
return|return
name|child
return|;
block|}
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latest
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|getChild
argument_list|(
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
literal|false
argument_list|,
name|this
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// it was already saved in the latest snapshot earlier.
return|return
name|child
return|;
block|}
name|diff
operator|.
name|diff
operator|.
name|modify
argument_list|(
name|snapshotCopy
argument_list|,
name|child
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
annotation|@
name|Override
DECL|method|addChild (INode inode, boolean setModTime, Snapshot latest)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|INode
name|inode
parameter_list|,
name|boolean
name|setModTime
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
name|ChildrenDiff
name|diff
init|=
literal|null
decl_stmt|;
name|Integer
name|undoInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|latest
operator|!=
literal|null
condition|)
block|{
name|diff
operator|=
name|diffs
operator|.
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latest
argument_list|,
name|this
argument_list|)
operator|.
name|diff
expr_stmt|;
name|undoInfo
operator|=
name|diff
operator|.
name|create
argument_list|(
name|inode
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|added
init|=
name|super
operator|.
name|addChild
argument_list|(
name|inode
argument_list|,
name|setModTime
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|added
operator|&&
name|undoInfo
operator|!=
literal|null
condition|)
block|{
name|diff
operator|.
name|undoCreate
argument_list|(
name|inode
argument_list|,
name|undoInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|added
return|;
block|}
annotation|@
name|Override
DECL|method|removeChild (INode child, Snapshot latest)
specifier|public
name|boolean
name|removeChild
parameter_list|(
name|INode
name|child
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
name|ChildrenDiff
name|diff
init|=
literal|null
decl_stmt|;
name|UndoInfo
argument_list|<
name|INode
argument_list|>
name|undoInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|latest
operator|!=
literal|null
condition|)
block|{
name|diff
operator|=
name|diffs
operator|.
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latest
argument_list|,
name|this
argument_list|)
operator|.
name|diff
expr_stmt|;
name|undoInfo
operator|=
name|diff
operator|.
name|delete
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|removed
init|=
name|removeChild
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|undoInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|removed
condition|)
block|{
comment|//remove failed, undo
name|diff
operator|.
name|undoDelete
argument_list|(
name|child
argument_list|,
name|undoInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|removed
return|;
block|}
annotation|@
name|Override
DECL|method|removeChildAndAllSnapshotCopies (INode child)
specifier|public
name|boolean
name|removeChildAndAllSnapshotCopies
parameter_list|(
name|INode
name|child
parameter_list|)
block|{
if|if
condition|(
operator|!
name|removeChild
argument_list|(
name|child
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// remove same child from the created list, if there is any.
specifier|final
name|byte
index|[]
name|name
init|=
name|child
operator|.
name|getLocalNameBytes
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffList
init|=
name|diffs
operator|.
name|asList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|diffList
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|ChildrenDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|diff
decl_stmt|;
specifier|final
name|int
name|c
init|=
name|diff
operator|.
name|searchCreatedIndex
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|diff
operator|.
name|removeCreatedChild
argument_list|(
name|c
argument_list|,
name|child
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|replaceChild (final INode oldChild, final INode newChild)
specifier|public
name|void
name|replaceChild
parameter_list|(
specifier|final
name|INode
name|oldChild
parameter_list|,
specifier|final
name|INode
name|newChild
parameter_list|)
block|{
name|super
operator|.
name|replaceChild
argument_list|(
name|oldChild
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
comment|// replace same child in the created list, if there is any.
specifier|final
name|byte
index|[]
name|name
init|=
name|oldChild
operator|.
name|getLocalNameBytes
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffList
init|=
name|diffs
operator|.
name|asList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|diffList
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|ChildrenDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|diff
decl_stmt|;
specifier|final
name|int
name|c
init|=
name|diff
operator|.
name|searchCreatedIndex
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|0
condition|)
block|{
specifier|final
name|INode
name|removed
init|=
name|diff
operator|.
name|setCreatedChild
argument_list|(
name|c
argument_list|,
name|newChild
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|removed
operator|==
name|oldChild
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getChildrenList (Snapshot snapshot)
specifier|public
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getChildrenList
argument_list|(
name|this
argument_list|)
else|:
name|super
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChild (byte[] name, Snapshot snapshot)
specifier|public
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|DirectoryDiff
name|diff
init|=
name|diffs
operator|.
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
return|return
name|diff
operator|!=
literal|null
condition|?
name|diff
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|this
argument_list|)
else|:
name|super
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toDetailString ()
specifier|public
name|String
name|toDetailString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toDetailString
argument_list|()
operator|+
literal|", "
operator|+
name|diffs
return|;
block|}
comment|/**    * Get all the directories that are stored in some snapshot but not in the    * current children list. These directories are equivalent to the directories    * stored in the deletes lists.    *     * @param snapshotDirMap A snapshot-to-directory-list map for returning.    * @return The number of directories returned.    */
DECL|method|getSnapshotDirectory ( Map<Snapshot, List<INodeDirectory>> snapshotDirMap)
specifier|public
name|int
name|getSnapshotDirectory
parameter_list|(
name|Map
argument_list|<
name|Snapshot
argument_list|,
name|List
argument_list|<
name|INodeDirectory
argument_list|>
argument_list|>
name|snapshotDirMap
parameter_list|)
block|{
name|int
name|dirNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DirectoryDiff
name|sdiff
range|:
name|diffs
control|)
block|{
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|list
init|=
name|sdiff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getDirsInDeleted
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|snapshotDirMap
operator|.
name|put
argument_list|(
name|sdiff
operator|.
name|snapshot
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|dirNum
operator|+=
name|list
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|dirNum
return|;
block|}
annotation|@
name|Override
DECL|method|cleanSubtree (final Snapshot snapshot, Snapshot prior, final BlocksMapUpdateInfo collectedBlocks)
specifier|public
name|int
name|cleanSubtree
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
name|Snapshot
name|prior
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
throws|throws
name|NSQuotaExceededException
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
comment|// delete the current directory
name|recordModification
argument_list|(
name|prior
argument_list|)
expr_stmt|;
comment|// delete everything in created list
name|DirectoryDiff
name|lastDiff
init|=
name|diffs
operator|.
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastDiff
operator|!=
literal|null
condition|)
block|{
name|n
operator|+=
name|lastDiff
operator|.
name|diff
operator|.
name|destroyCreatedList
argument_list|(
name|this
argument_list|,
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// update prior
name|Snapshot
name|s
init|=
name|getDiffs
argument_list|()
operator|.
name|getPrior
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
operator|(
name|prior
operator|==
literal|null
operator|||
name|Snapshot
operator|.
name|ID_COMPARATOR
operator|.
name|compare
argument_list|(
name|s
argument_list|,
name|prior
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
name|prior
operator|=
name|s
expr_stmt|;
block|}
name|n
operator|+=
name|getDiffs
argument_list|()
operator|.
name|deleteSnapshotDiff
argument_list|(
name|snapshot
argument_list|,
name|prior
argument_list|,
name|this
argument_list|,
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
name|n
operator|+=
name|cleanSubtreeRecursively
argument_list|(
name|snapshot
argument_list|,
name|prior
argument_list|,
name|collectedBlocks
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
annotation|@
name|Override
DECL|method|destroyAndCollectBlocks ( final BlocksMapUpdateInfo collectedBlocks)
specifier|public
name|int
name|destroyAndCollectBlocks
parameter_list|(
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
comment|// destroy its diff list
for|for
control|(
name|DirectoryDiff
name|diff
range|:
name|diffs
control|)
block|{
name|total
operator|+=
name|diff
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|this
argument_list|,
name|collectedBlocks
argument_list|)
expr_stmt|;
block|}
name|total
operator|+=
name|diffs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|total
operator|+=
name|super
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|collectedBlocks
argument_list|)
expr_stmt|;
return|return
name|total
return|;
block|}
annotation|@
name|Override
DECL|method|computeQuotaUsage4CurrentDirectory (Quota.Counts counts)
specifier|public
name|Quota
operator|.
name|Counts
name|computeQuotaUsage4CurrentDirectory
parameter_list|(
name|Quota
operator|.
name|Counts
name|counts
parameter_list|)
block|{
name|super
operator|.
name|computeQuotaUsage4CurrentDirectory
argument_list|(
name|counts
argument_list|)
expr_stmt|;
for|for
control|(
name|DirectoryDiff
name|d
range|:
name|diffs
control|)
block|{
for|for
control|(
name|INode
name|deleted
range|:
name|d
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getDeletedList
argument_list|()
control|)
block|{
name|deleted
operator|.
name|computeQuotaUsage
argument_list|(
name|counts
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|counts
operator|.
name|add
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|,
name|diffs
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|counts
return|;
block|}
annotation|@
name|Override
DECL|method|computeContentSummary ( final Content.CountsMap countsMap)
specifier|public
name|Content
operator|.
name|CountsMap
name|computeContentSummary
parameter_list|(
specifier|final
name|Content
operator|.
name|CountsMap
name|countsMap
parameter_list|)
block|{
name|super
operator|.
name|computeContentSummary
argument_list|(
name|countsMap
argument_list|)
expr_stmt|;
name|computeContentSummary4Snapshot
argument_list|(
name|countsMap
operator|.
name|getCounts
argument_list|(
name|Key
operator|.
name|SNAPSHOT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|countsMap
return|;
block|}
annotation|@
name|Override
DECL|method|computeContentSummary (final Content.Counts counts)
specifier|public
name|Content
operator|.
name|Counts
name|computeContentSummary
parameter_list|(
specifier|final
name|Content
operator|.
name|Counts
name|counts
parameter_list|)
block|{
name|super
operator|.
name|computeContentSummary
argument_list|(
name|counts
argument_list|)
expr_stmt|;
name|computeContentSummary4Snapshot
argument_list|(
name|counts
argument_list|)
expr_stmt|;
return|return
name|counts
return|;
block|}
DECL|method|computeContentSummary4Snapshot (final Content.Counts counts)
specifier|private
name|void
name|computeContentSummary4Snapshot
parameter_list|(
specifier|final
name|Content
operator|.
name|Counts
name|counts
parameter_list|)
block|{
for|for
control|(
name|DirectoryDiff
name|d
range|:
name|diffs
control|)
block|{
for|for
control|(
name|INode
name|deleted
range|:
name|d
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getDeletedList
argument_list|()
control|)
block|{
name|deleted
operator|.
name|computeContentSummary
argument_list|(
name|counts
argument_list|)
expr_stmt|;
block|}
block|}
name|counts
operator|.
name|add
argument_list|(
name|Content
operator|.
name|DIRECTORY
argument_list|,
name|diffs
operator|.
name|asList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

