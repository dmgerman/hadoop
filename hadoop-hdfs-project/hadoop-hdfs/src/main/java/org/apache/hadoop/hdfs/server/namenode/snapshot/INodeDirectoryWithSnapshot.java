begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_comment
comment|/** The directory with snapshots. */
end_comment

begin_class
DECL|class|INodeDirectoryWithSnapshot
specifier|public
class|class
name|INodeDirectoryWithSnapshot
extends|extends
name|INodeDirectory
block|{
comment|/**    * The difference between the current state and a previous snapshot    * of an INodeDirectory.    *    * Two lists are maintained in the algorithm:    * - c-list for newly created inodes    * - d-list for the deleted inodes    *    * Denote the state of an inode by the following    *   (0, 0): neither in c-list nor d-list    *   (c, 0): in c-list but not in d-list    *   (0, d): in d-list but not in c-list    *   (c, d): in both c-list and d-list    *    * For each case below, ( , ) at the end shows the result state of the inode.    *    * Case 1. Suppose the inode i is NOT in the previous snapshot.        (0, 0)    *   1.1. create i in current: add it to c-list                        (c, 0)    *   1.1.1. create i in current and then create: impossible    *   1.1.2. create i in current and then delete: remove it from c-list (0, 0)    *   1.1.3. create i in current and then modify: replace it in c-list  (c, 0)    *    *   1.2. delete i from current: impossible    *    *   1.3. modify i in current: impossible    *    * Case 2. Suppose the inode i is ALREADY in the previous snapshot.    (0, 0)    *   2.1. create i in current: impossible    *    *   2.2. delete i from current: add it to d-list                      (0, d)    *   2.2.1. delete i from current and then create: add it to c-list    (c, d)    *   2.2.2. delete i from current and then delete: impossible    *   2.2.2. delete i from current and then modify: impossible    *    *   2.3. modify i in current: put it in both c-list and d-list        (c, d)    *   2.3.1. modify i in current and then create: impossible    *   2.3.2. modify i in current and then delete: remove it from c-list (0, d)    *   2.3.3. modify i in current and then modify: replace it in c-list  (c, d)    */
DECL|class|Diff
specifier|static
class|class
name|Diff
block|{
comment|/**      * Search the inode from the list.      * @return -1 if the list is null; otherwise, return the insertion point      *    defined in {@link Collections#binarySearch(List, Object)}.      *    Note that, when the list is null, -1 is the correct insertion point.      */
DECL|method|search (final List<INode> inodes, final INode i)
specifier|static
name|int
name|search
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|inodes
parameter_list|,
specifier|final
name|INode
name|i
parameter_list|)
block|{
return|return
name|search
argument_list|(
name|inodes
argument_list|,
name|i
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|search (final List<INode> inodes, final byte[] name)
specifier|private
specifier|static
name|int
name|search
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|inodes
parameter_list|,
specifier|final
name|byte
index|[]
name|name
parameter_list|)
block|{
return|return
name|inodes
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|Collections
operator|.
name|binarySearch
argument_list|(
name|inodes
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/** c-list: inode(s) created in current. */
DECL|field|created
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|created
decl_stmt|;
comment|/** d-list: inode(s) deleted from current. */
DECL|field|deleted
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
decl_stmt|;
comment|/**      * Insert the inode to created.      * @param i the insertion point defined      *          in {@link Collections#binarySearch(List, Object)}      */
DECL|method|insertCreated (final INode inode, final int i)
specifier|private
name|void
name|insertCreated
parameter_list|(
specifier|final
name|INode
name|inode
parameter_list|,
specifier|final
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Inode already exists: inode="
operator|+
name|inode
operator|+
literal|", created="
operator|+
name|created
argument_list|)
throw|;
block|}
if|if
condition|(
name|created
operator|==
literal|null
condition|)
block|{
name|created
operator|=
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|(
name|DEFAULT_FILES_PER_DIRECTORY
argument_list|)
expr_stmt|;
block|}
name|created
operator|.
name|add
argument_list|(
operator|-
name|i
operator|-
literal|1
argument_list|,
name|inode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Insert the inode to deleted.      * @param i the insertion point defined      *          in {@link Collections#binarySearch(List, Object)}      */
DECL|method|insertDeleted (final INode inode, final int i)
specifier|private
name|void
name|insertDeleted
parameter_list|(
specifier|final
name|INode
name|inode
parameter_list|,
specifier|final
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Inode already exists: inode="
operator|+
name|inode
operator|+
literal|", deleted="
operator|+
name|deleted
argument_list|)
throw|;
block|}
if|if
condition|(
name|deleted
operator|==
literal|null
condition|)
block|{
name|deleted
operator|=
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|(
name|DEFAULT_FILES_PER_DIRECTORY
argument_list|)
expr_stmt|;
block|}
name|deleted
operator|.
name|add
argument_list|(
operator|-
name|i
operator|-
literal|1
argument_list|,
name|inode
argument_list|)
expr_stmt|;
block|}
comment|/** Create an inode in current state. */
DECL|method|create (final INode inode)
name|void
name|create
parameter_list|(
specifier|final
name|INode
name|inode
parameter_list|)
block|{
specifier|final
name|int
name|c
init|=
name|search
argument_list|(
name|created
argument_list|,
name|inode
argument_list|)
decl_stmt|;
name|insertCreated
argument_list|(
name|inode
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|/** Delete an inode from current state. */
DECL|method|delete (final INode inode)
name|void
name|delete
parameter_list|(
specifier|final
name|INode
name|inode
parameter_list|)
block|{
specifier|final
name|int
name|c
init|=
name|search
argument_list|(
name|created
argument_list|,
name|inode
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|0
condition|)
block|{
comment|// remove a newly created inode
name|created
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// not in c-list, it must be in previous
specifier|final
name|int
name|d
init|=
name|search
argument_list|(
name|deleted
argument_list|,
name|inode
argument_list|)
decl_stmt|;
name|insertDeleted
argument_list|(
name|inode
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Modify an inode in current state. */
DECL|method|modify (final INode oldinode, final INode newinode)
name|void
name|modify
parameter_list|(
specifier|final
name|INode
name|oldinode
parameter_list|,
specifier|final
name|INode
name|newinode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|oldinode
operator|.
name|equals
argument_list|(
name|newinode
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"The names do not match: oldinode="
operator|+
name|oldinode
operator|+
literal|", newinode="
operator|+
name|newinode
argument_list|)
throw|;
block|}
specifier|final
name|int
name|c
init|=
name|search
argument_list|(
name|created
argument_list|,
name|newinode
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|0
condition|)
block|{
comment|// inode is already in c-list,
name|created
operator|.
name|set
argument_list|(
name|c
argument_list|,
name|newinode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|d
init|=
name|search
argument_list|(
name|deleted
argument_list|,
name|oldinode
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
comment|// neither in c-list nor d-list
name|insertCreated
argument_list|(
name|newinode
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|insertDeleted
argument_list|(
name|oldinode
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Given an inode in current state, find the corresponding inode in previous      * snapshot. The inodes in current state and previous snapshot can possibly      * be the same.      *      * @param inodeInCurrent The inode, possibly null, in current state.      * @return null if the inode is not found in previous snapshot;      *         otherwise, return the corresponding inode in previous snapshot.      */
DECL|method|accessPrevious (byte[] name, INode inodeInCurrent)
name|INode
name|accessPrevious
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|INode
name|inodeInCurrent
parameter_list|)
block|{
return|return
name|accessPrevious
argument_list|(
name|name
argument_list|,
name|inodeInCurrent
argument_list|,
name|created
argument_list|,
name|deleted
argument_list|)
return|;
block|}
DECL|method|accessPrevious (byte[] name, INode inodeInCurrent, final List<INode> clist, final List<INode> dlist)
specifier|private
specifier|static
name|INode
name|accessPrevious
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|INode
name|inodeInCurrent
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|clist
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|dlist
parameter_list|)
block|{
specifier|final
name|int
name|d
init|=
name|search
argument_list|(
name|dlist
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>=
literal|0
condition|)
block|{
comment|// the inode was in previous and was once deleted in current.
return|return
name|dlist
operator|.
name|get
argument_list|(
name|d
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|int
name|c
init|=
name|search
argument_list|(
name|clist
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|// When c>= 0, the inode in current is a newly created inode.
return|return
name|c
operator|>=
literal|0
condition|?
literal|null
else|:
name|inodeInCurrent
return|;
block|}
block|}
comment|/**      * Given an inode in previous snapshot, find the corresponding inode in      * current state. The inodes in current state and previous snapshot can      * possibly be the same.      *      * @param inodeInPrevious The inode, possibly null, in previous snapshot.      * @return null if the inode is not found in current state;      *         otherwise, return the corresponding inode in current state.      */
DECL|method|accessCurrent (byte[] name, INode inodeInPrevious)
name|INode
name|accessCurrent
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|INode
name|inodeInPrevious
parameter_list|)
block|{
return|return
name|accessPrevious
argument_list|(
name|name
argument_list|,
name|inodeInPrevious
argument_list|,
name|deleted
argument_list|,
name|created
argument_list|)
return|;
block|}
comment|/**      * Apply this diff to previous snapshot in order to obtain current state.      * @return the current state of the list.      */
DECL|method|apply2Previous (final List<INode> previous)
name|List
argument_list|<
name|INode
argument_list|>
name|apply2Previous
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|previous
parameter_list|)
block|{
return|return
name|apply2Previous
argument_list|(
name|previous
argument_list|,
name|created
argument_list|,
name|deleted
argument_list|)
return|;
block|}
DECL|method|apply2Previous (final List<INode> previous, final List<INode> clist, final List<INode> dlist)
specifier|private
specifier|static
name|List
argument_list|<
name|INode
argument_list|>
name|apply2Previous
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|previous
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|clist
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|dlist
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|current
init|=
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|(
name|previous
argument_list|)
decl_stmt|;
if|if
condition|(
name|dlist
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INode
name|d
range|:
name|dlist
control|)
block|{
name|current
operator|.
name|remove
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clist
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INode
name|c
range|:
name|clist
control|)
block|{
specifier|final
name|int
name|i
init|=
name|search
argument_list|(
name|current
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|current
operator|.
name|add
argument_list|(
operator|-
name|i
operator|-
literal|1
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|current
return|;
block|}
comment|/**      * Apply the reverse of this diff to current state in order      * to obtain the previous snapshot.      * @return the previous state of the list.      */
DECL|method|apply2Current (final List<INode> current)
name|List
argument_list|<
name|INode
argument_list|>
name|apply2Current
parameter_list|(
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|current
parameter_list|)
block|{
return|return
name|apply2Previous
argument_list|(
name|current
argument_list|,
name|deleted
argument_list|,
name|created
argument_list|)
return|;
block|}
comment|/** Convert the inode list to a compact string. */
DECL|method|toString (List<INode> inodes)
specifier|static
name|String
name|toString
parameter_list|(
name|List
argument_list|<
name|INode
argument_list|>
name|inodes
parameter_list|)
block|{
if|if
condition|(
name|inodes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|inodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|inodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|inodes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|inodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|":\n  created="
operator|+
name|toString
argument_list|(
name|created
argument_list|)
operator|+
literal|"\n  deleted="
operator|+
name|toString
argument_list|(
name|deleted
argument_list|)
return|;
block|}
block|}
DECL|method|INodeDirectoryWithSnapshot (String name, INodeDirectory dir)
name|INodeDirectoryWithSnapshot
parameter_list|(
name|String
name|name
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|dir
operator|.
name|getPermissionStatus
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|dir
expr_stmt|;
block|}
block|}
end_class

end_unit

