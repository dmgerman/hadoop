begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.balancer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * This window makes sure to keep blocks that have been moved within a fixed  * time interval (default is 1.5 hour). Old window has blocks that are older;  * Current window has blocks that are more recent; Cleanup method triggers the  * check if blocks in the old window are more than the fixed time interval. If  * yes, purge the old window and then move blocks in current window to old  * window.  *   * @param<L> Location type  */
end_comment

begin_class
DECL|class|MovedBlocks
specifier|public
class|class
name|MovedBlocks
parameter_list|<
name|L
parameter_list|>
block|{
comment|/** A class for keeping track of a block and its locations */
DECL|class|Locations
specifier|public
specifier|static
class|class
name|Locations
parameter_list|<
name|L
parameter_list|>
block|{
DECL|field|block
specifier|private
specifier|final
name|Block
name|block
decl_stmt|;
comment|// the block
comment|/** The locations of the replicas of the block. */
DECL|field|locations
specifier|protected
specifier|final
name|List
argument_list|<
name|L
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|L
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
DECL|method|Locations (Block block)
specifier|public
name|Locations
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
block|}
comment|/** clean block locations */
DECL|method|clearLocations ()
specifier|public
specifier|synchronized
name|void
name|clearLocations
parameter_list|()
block|{
name|locations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** add a location */
DECL|method|addLocation (L loc)
specifier|public
specifier|synchronized
name|void
name|addLocation
parameter_list|(
name|L
name|loc
parameter_list|)
block|{
if|if
condition|(
operator|!
name|locations
operator|.
name|contains
argument_list|(
name|loc
argument_list|)
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @return if the block is located on the given location. */
DECL|method|isLocatedOn (L loc)
specifier|public
specifier|synchronized
name|boolean
name|isLocatedOn
parameter_list|(
name|L
name|loc
parameter_list|)
block|{
return|return
name|locations
operator|.
name|contains
argument_list|(
name|loc
argument_list|)
return|;
block|}
comment|/** @return its locations */
DECL|method|getLocations ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|L
argument_list|>
name|getLocations
parameter_list|()
block|{
return|return
name|locations
return|;
block|}
comment|/* @return the block */
DECL|method|getBlock ()
specifier|public
name|Block
name|getBlock
parameter_list|()
block|{
return|return
name|block
return|;
block|}
comment|/* Return the length of the block */
DECL|method|getNumBytes ()
specifier|public
name|long
name|getNumBytes
parameter_list|()
block|{
return|return
name|block
operator|.
name|getNumBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|block
operator|+
literal|" size="
operator|+
name|getNumBytes
argument_list|()
return|;
block|}
block|}
DECL|field|CUR_WIN
specifier|private
specifier|static
specifier|final
name|int
name|CUR_WIN
init|=
literal|0
decl_stmt|;
DECL|field|OLD_WIN
specifier|private
specifier|static
specifier|final
name|int
name|OLD_WIN
init|=
literal|1
decl_stmt|;
DECL|field|NUM_WINS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_WINS
init|=
literal|2
decl_stmt|;
DECL|field|winTimeInterval
specifier|private
specifier|final
name|long
name|winTimeInterval
decl_stmt|;
DECL|field|lastCleanupTime
specifier|private
name|long
name|lastCleanupTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
DECL|field|movedBlocks
specifier|private
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|Block
argument_list|,
name|Locations
argument_list|<
name|L
argument_list|>
argument_list|>
argument_list|>
name|movedBlocks
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|Block
argument_list|,
name|Locations
argument_list|<
name|L
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|NUM_WINS
argument_list|)
decl_stmt|;
comment|/** initialize the moved blocks collection */
DECL|method|MovedBlocks (long winTimeInterval)
specifier|public
name|MovedBlocks
parameter_list|(
name|long
name|winTimeInterval
parameter_list|)
block|{
name|this
operator|.
name|winTimeInterval
operator|=
name|winTimeInterval
expr_stmt|;
name|movedBlocks
operator|.
name|add
argument_list|(
name|newMap
argument_list|()
argument_list|)
expr_stmt|;
name|movedBlocks
operator|.
name|add
argument_list|(
name|newMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|newMap ()
specifier|private
name|Map
argument_list|<
name|Block
argument_list|,
name|Locations
argument_list|<
name|L
argument_list|>
argument_list|>
name|newMap
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|Block
argument_list|,
name|Locations
argument_list|<
name|L
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
comment|/** add a block thus marking a block to be moved */
DECL|method|put (Locations<L> block)
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|Locations
argument_list|<
name|L
argument_list|>
name|block
parameter_list|)
block|{
name|movedBlocks
operator|.
name|get
argument_list|(
name|CUR_WIN
argument_list|)
operator|.
name|put
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
comment|/** @return if a block is marked as moved */
DECL|method|contains (Block block)
specifier|public
specifier|synchronized
name|boolean
name|contains
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
return|return
name|movedBlocks
operator|.
name|get
argument_list|(
name|CUR_WIN
argument_list|)
operator|.
name|containsKey
argument_list|(
name|block
argument_list|)
operator|||
name|movedBlocks
operator|.
name|get
argument_list|(
name|OLD_WIN
argument_list|)
operator|.
name|containsKey
argument_list|(
name|block
argument_list|)
return|;
block|}
comment|/** remove old blocks */
DECL|method|cleanup ()
specifier|public
specifier|synchronized
name|void
name|cleanup
parameter_list|()
block|{
name|long
name|curTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
comment|// check if old win is older than winWidth
if|if
condition|(
name|lastCleanupTime
operator|+
name|winTimeInterval
operator|<=
name|curTime
condition|)
block|{
comment|// purge the old window
name|movedBlocks
operator|.
name|set
argument_list|(
name|OLD_WIN
argument_list|,
name|movedBlocks
operator|.
name|get
argument_list|(
name|CUR_WIN
argument_list|)
argument_list|)
expr_stmt|;
name|movedBlocks
operator|.
name|set
argument_list|(
name|CUR_WIN
argument_list|,
name|newMap
argument_list|()
argument_list|)
expr_stmt|;
name|lastCleanupTime
operator|=
name|curTime
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

