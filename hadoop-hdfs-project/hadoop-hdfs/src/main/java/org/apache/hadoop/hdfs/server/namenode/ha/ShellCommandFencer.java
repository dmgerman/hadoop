begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Fencing method that runs a shell command. It should be specified  * in the fencing configuration like:<br>  *<code>  *   shell(/path/to/my/script.sh arg1 arg2 ...)  *</code><br>  * The string between '(' and ')' is passed directly to a bash shell and  * may not include any closing parentheses.<p>  *   * The shell command will be run with an environment set up to contain  * all of the current Hadoop configuration variables, with the '_' character   * replacing any '.' characters in the configuration keys.<p>  *   * If the shell command returns an exit code of 0, the fencing is  * determined to be successful. If it returns any other exit code, the  * fencing was not successful and the next fencing method in the list  * will be attempted.<p>  *   *<em>Note:</em> this fencing method does not implement any timeout.  * If timeouts are necessary, they should be implemented in the shell  * script itself (eg by forking a subshell to kill its parent in  * some number of seconds).  */
end_comment

begin_class
DECL|class|ShellCommandFencer
specifier|public
class|class
name|ShellCommandFencer
extends|extends
name|Configured
implements|implements
name|FenceMethod
block|{
comment|/** Length at which to abbreviate command in long messages */
DECL|field|ABBREV_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|ABBREV_LENGTH
init|=
literal|20
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|LOG
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ShellCommandFencer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|checkArgs (String args)
specifier|public
name|void
name|checkArgs
parameter_list|(
name|String
name|args
parameter_list|)
throws|throws
name|BadFencingConfigurationException
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BadFencingConfigurationException
argument_list|(
literal|"No argument passed to 'shell' fencing method"
argument_list|)
throw|;
block|}
comment|// Nothing else we can really check without actually running the command
block|}
annotation|@
name|Override
DECL|method|tryFence (String cmd)
specifier|public
name|boolean
name|tryFence
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|ProcessBuilder
name|builder
init|=
operator|new
name|ProcessBuilder
argument_list|(
literal|"bash"
argument_list|,
literal|"-e"
argument_list|,
literal|"-c"
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|setConfAsEnvVars
argument_list|(
name|builder
operator|.
name|environment
argument_list|()
argument_list|)
expr_stmt|;
name|Process
name|p
decl_stmt|;
try|try
block|{
name|p
operator|=
name|builder
operator|.
name|start
argument_list|()
expr_stmt|;
name|p
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to execute "
operator|+
name|cmd
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|pid
init|=
name|tryGetPid
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Launched fencing command '"
operator|+
name|cmd
operator|+
literal|"' with "
operator|+
operator|(
operator|(
name|pid
operator|!=
literal|null
operator|)
condition|?
operator|(
literal|"pid "
operator|+
name|pid
operator|)
else|:
literal|"unknown pid"
operator|)
argument_list|)
expr_stmt|;
name|String
name|logPrefix
init|=
name|abbreviate
argument_list|(
name|cmd
argument_list|,
name|ABBREV_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|pid
operator|!=
literal|null
condition|)
block|{
name|logPrefix
operator|=
literal|"[PID "
operator|+
name|pid
operator|+
literal|"] "
operator|+
name|logPrefix
expr_stmt|;
block|}
comment|// Pump logs to stderr
name|StreamPumper
name|errPumper
init|=
operator|new
name|StreamPumper
argument_list|(
name|LOG
argument_list|,
name|logPrefix
argument_list|,
name|p
operator|.
name|getErrorStream
argument_list|()
argument_list|,
name|StreamPumper
operator|.
name|StreamType
operator|.
name|STDERR
argument_list|)
decl_stmt|;
name|errPumper
operator|.
name|start
argument_list|()
expr_stmt|;
name|StreamPumper
name|outPumper
init|=
operator|new
name|StreamPumper
argument_list|(
name|LOG
argument_list|,
name|logPrefix
argument_list|,
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|StreamPumper
operator|.
name|StreamType
operator|.
name|STDOUT
argument_list|)
decl_stmt|;
name|outPumper
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|rc
decl_stmt|;
try|try
block|{
name|rc
operator|=
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|errPumper
operator|.
name|join
argument_list|()
expr_stmt|;
name|outPumper
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for fencing command: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|rc
operator|==
literal|0
return|;
block|}
comment|/**    * Abbreviate a string by putting '...' in the middle of it,    * in an attempt to keep logs from getting too messy.    * @param cmd the string to abbreviate    * @param len maximum length to abbreviate to    * @return abbreviated string    */
DECL|method|abbreviate (String cmd, int len)
specifier|static
name|String
name|abbreviate
parameter_list|(
name|String
name|cmd
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|length
argument_list|()
operator|>
name|len
operator|&&
name|len
operator|>=
literal|5
condition|)
block|{
name|int
name|firstHalf
init|=
operator|(
name|len
operator|-
literal|3
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|rem
init|=
name|len
operator|-
name|firstHalf
operator|-
literal|3
decl_stmt|;
return|return
name|cmd
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|firstHalf
argument_list|)
operator|+
literal|"..."
operator|+
name|cmd
operator|.
name|substring
argument_list|(
name|cmd
operator|.
name|length
argument_list|()
operator|-
name|rem
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|cmd
return|;
block|}
block|}
comment|/**    * Attempt to use evil reflection tricks to determine the    * pid of a launched process. This is helpful to ops    * if debugging a fencing process that might have gone    * wrong. If running on a system or JVM where this doesn't    * work, it will simply return null.    */
DECL|method|tryGetPid (Process p)
specifier|private
specifier|static
name|String
name|tryGetPid
parameter_list|(
name|Process
name|p
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Process
argument_list|>
name|clazz
init|=
name|p
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"java.lang.UNIXProcess"
argument_list|)
condition|)
block|{
name|Field
name|f
init|=
name|clazz
operator|.
name|getDeclaredField
argument_list|(
literal|"pid"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|f
operator|.
name|getInt
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Unable to determine pid for "
operator|+
name|p
operator|+
literal|" since it is not a UNIXProcess"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Unable to determine pid for "
operator|+
name|p
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Set the environment of the subprocess to be the Configuration,    * with '.'s replaced by '_'s.    */
DECL|method|setConfAsEnvVars (Map<String, String> env)
specifier|private
name|void
name|setConfAsEnvVars
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|getConf
argument_list|()
control|)
block|{
name|env
operator|.
name|put
argument_list|(
name|pair
operator|.
name|getKey
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

