begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
operator|.
name|NameSpace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|XAttrHelper
specifier|public
class|class
name|XAttrHelper
block|{
comment|/**    * Build<code>XAttr</code> from xattr name with prefix.    */
DECL|method|buildXAttr (String name)
specifier|public
specifier|static
name|XAttr
name|buildXAttr
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|buildXAttr
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Build<code>XAttr</code> from name with prefix and value.    * Name can not be null. Value can be null. The name and prefix     * are validated.    * Both name and namespace are case sensitive.    */
DECL|method|buildXAttr (String name, byte[] value)
specifier|public
specifier|static
name|XAttr
name|buildXAttr
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|name
argument_list|,
literal|"XAttr name cannot be null."
argument_list|)
expr_stmt|;
specifier|final
name|int
name|prefixIndex
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefixIndex
operator|<
literal|3
condition|)
block|{
comment|// Prefix length is at least 3.
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"An XAttr name must be "
operator|+
literal|"prefixed with user/trusted/security/system/raw, followed by a '.'"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|prefixIndex
operator|==
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"XAttr name cannot be empty."
argument_list|)
throw|;
block|}
name|NameSpace
name|ns
decl_stmt|;
specifier|final
name|String
name|prefix
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefixIndex
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
name|NameSpace
operator|.
name|USER
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|ns
operator|=
name|NameSpace
operator|.
name|USER
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
name|NameSpace
operator|.
name|TRUSTED
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|ns
operator|=
name|NameSpace
operator|.
name|TRUSTED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
name|NameSpace
operator|.
name|SYSTEM
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|ns
operator|=
name|NameSpace
operator|.
name|SYSTEM
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
name|NameSpace
operator|.
name|SECURITY
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|ns
operator|=
name|NameSpace
operator|.
name|SECURITY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
name|NameSpace
operator|.
name|RAW
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|ns
operator|=
name|NameSpace
operator|.
name|RAW
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"An XAttr name must be "
operator|+
literal|"prefixed with user/trusted/security/system/raw, followed by a '.'"
argument_list|)
throw|;
block|}
name|XAttr
name|xAttr
init|=
operator|(
operator|new
name|XAttr
operator|.
name|Builder
argument_list|()
operator|)
operator|.
name|setNameSpace
argument_list|(
name|ns
argument_list|)
operator|.
name|setName
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|prefixIndex
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|xAttr
return|;
block|}
comment|/**    * Build xattr name with prefix as<code>XAttr</code> list.    */
DECL|method|buildXAttrAsList (String name)
specifier|public
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|buildXAttrAsList
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|XAttr
name|xAttr
init|=
name|buildXAttr
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|add
argument_list|(
name|xAttr
argument_list|)
expr_stmt|;
return|return
name|xAttrs
return|;
block|}
comment|/**    * Get value of first xattr from<code>XAttr</code> list    */
DECL|method|getFirstXAttrValue (List<XAttr> xAttrs)
specifier|public
specifier|static
name|byte
index|[]
name|getFirstXAttrValue
parameter_list|(
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|)
block|{
name|byte
index|[]
name|value
init|=
literal|null
decl_stmt|;
name|XAttr
name|xAttr
init|=
name|getFirstXAttr
argument_list|(
name|xAttrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|xAttr
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|xAttr
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
comment|// xattr exists, but no value.
block|}
block|}
return|return
name|value
return|;
block|}
comment|/**    * Get first xattr from<code>XAttr</code> list    */
DECL|method|getFirstXAttr (List<XAttr> xAttrs)
specifier|public
specifier|static
name|XAttr
name|getFirstXAttr
parameter_list|(
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|)
block|{
if|if
condition|(
name|xAttrs
operator|!=
literal|null
operator|&&
operator|!
name|xAttrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|xAttrs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Build xattr map from<code>XAttr</code> list, the key is     * xattr name with prefix, and value is xattr value.     */
DECL|method|buildXAttrMap (List<XAttr> xAttrs)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|buildXAttrMap
parameter_list|(
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|)
block|{
if|if
condition|(
name|xAttrs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|XAttr
name|xAttr
range|:
name|xAttrs
control|)
block|{
name|String
name|name
init|=
name|getPrefixName
argument_list|(
name|xAttr
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|xAttr
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
name|xAttrMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|xAttrMap
return|;
block|}
comment|/**    * Get name with prefix from<code>XAttr</code>    */
DECL|method|getPrefixName (XAttr xAttr)
specifier|public
specifier|static
name|String
name|getPrefixName
parameter_list|(
name|XAttr
name|xAttr
parameter_list|)
block|{
if|if
condition|(
name|xAttr
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|namespace
init|=
name|xAttr
operator|.
name|getNameSpace
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|namespace
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"."
operator|+
name|xAttr
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * Build<code>XAttr</code> list from xattr name list.    */
DECL|method|buildXAttrs (List<String> names)
specifier|public
specifier|static
name|List
argument_list|<
name|XAttr
argument_list|>
name|buildXAttrs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
if|if
condition|(
name|names
operator|==
literal|null
operator|||
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"XAttr names can not be "
operator|+
literal|"null or empty."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|xAttrs
operator|.
name|add
argument_list|(
name|buildXAttr
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|xAttrs
return|;
block|}
block|}
end_class

end_unit

