begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|XAttrHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/** JSON Utilities */
end_comment

begin_class
DECL|class|JsonUtil
specifier|public
class|class
name|JsonUtil
block|{
DECL|field|EMPTY_OBJECT_ARRAY
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|EMPTY_OBJECT_ARRAY
init|=
block|{}
decl_stmt|;
DECL|field|EMPTY_DATANODE_INFO_ARRAY
specifier|private
specifier|static
specifier|final
name|DatanodeInfo
index|[]
name|EMPTY_DATANODE_INFO_ARRAY
init|=
block|{}
decl_stmt|;
comment|/** Convert a token object to a Json string. */
DECL|method|toJsonString (final Token<? extends TokenIdentifier> token )
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toJsonString
argument_list|(
name|Token
operator|.
name|class
argument_list|,
name|toJsonMap
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toJsonMap ( final Token<? extends TokenIdentifier> token)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toJsonMap
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"urlString"
argument_list|,
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
comment|/** Convert a Json map to a Token. */
DECL|method|toToken ( final Map<?, ?> m)
specifier|public
specifier|static
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|toToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"urlString"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Convert a Json map to a Token of DelegationTokenIdentifier. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toDelegationToken ( final Map<?, ?> json)
specifier|public
specifier|static
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|toDelegationToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|Token
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
operator|)
name|toToken
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a Token of BlockTokenIdentifier. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toBlockToken ( final Map<?, ?> m)
specifier|private
specifier|static
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|toBlockToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
operator|)
name|toToken
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Token[] to a JSON array. */
DECL|method|toJsonArray (final Token<? extends TokenIdentifier>[] array )
specifier|private
specifier|static
name|Object
index|[]
name|toJsonArray
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
index|[]
name|array
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|array
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_OBJECT_ARRAY
return|;
block|}
else|else
block|{
specifier|final
name|Object
index|[]
name|a
init|=
operator|new
name|Object
index|[
name|array
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|=
name|toJsonMap
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
block|}
comment|/** Convert a token object to a JSON string. */
DECL|method|toJsonString (final Token<? extends TokenIdentifier>[] tokens )
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
index|[]
name|tokens
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tokens
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Token
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|toJsonArray
argument_list|(
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|toJsonString
argument_list|(
name|Token
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"s"
argument_list|,
name|m
argument_list|)
return|;
block|}
comment|/** Convert an Object[] to a List<Token<?>>.  */
DECL|method|toTokenList (final Object[] objects)
specifier|private
specifier|static
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|toTokenList
parameter_list|(
specifier|final
name|Object
index|[]
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|objects
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
name|objects
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toToken
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
comment|/** Convert a JSON map to a List<Token<?>>. */
DECL|method|toTokenList (final Map<?, ?> json)
specifier|public
specifier|static
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|toTokenList
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|Token
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"s"
argument_list|)
decl_stmt|;
return|return
name|toTokenList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|m
operator|.
name|get
argument_list|(
name|Token
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** Convert an exception object to a Json string. */
DECL|method|toJsonString (final Exception e)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"exception"
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"message"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"javaClassName"
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|toJsonString
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|,
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a RemoteException. */
DECL|method|toRemoteException (final Map<?, ?> json)
specifier|public
specifier|static
name|RemoteException
name|toRemoteException
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|RemoteException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|message
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|javaClassName
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
return|return
operator|new
name|RemoteException
argument_list|(
name|javaClassName
argument_list|,
name|message
argument_list|)
return|;
block|}
DECL|method|toJsonString (final Class<?> clazz, final Object value)
specifier|private
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
return|return
name|toJsonString
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/** Convert a key-value pair to a Json string. */
DECL|method|toJsonString (final String key, final Object value)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a FsPermission object to a string. */
DECL|method|toString (final FsPermission permission)
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|FsPermission
name|permission
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%o"
argument_list|,
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
return|;
block|}
comment|/** Convert a string to a FsPermission object. */
DECL|method|toFsPermission (final String s, Boolean aclBit)
specifier|private
specifier|static
name|FsPermission
name|toFsPermission
parameter_list|(
specifier|final
name|String
name|s
parameter_list|,
name|Boolean
name|aclBit
parameter_list|)
block|{
name|FsPermission
name|perm
init|=
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
name|s
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|aclBit
operator|!=
literal|null
operator|&&
name|aclBit
operator|)
condition|?
operator|new
name|FsAclPermission
argument_list|(
name|perm
argument_list|)
else|:
name|perm
return|;
block|}
DECL|enum|PathType
specifier|static
enum|enum
name|PathType
block|{
DECL|enumConstant|FILE
DECL|enumConstant|DIRECTORY
DECL|enumConstant|SYMLINK
name|FILE
block|,
name|DIRECTORY
block|,
name|SYMLINK
block|;
DECL|method|valueOf (HdfsFileStatus status)
specifier|static
name|PathType
name|valueOf
parameter_list|(
name|HdfsFileStatus
name|status
parameter_list|)
block|{
return|return
name|status
operator|.
name|isDir
argument_list|()
condition|?
name|DIRECTORY
else|:
name|status
operator|.
name|isSymlink
argument_list|()
condition|?
name|SYMLINK
else|:
name|FILE
return|;
block|}
block|}
comment|/** Convert a HdfsFileStatus object to a Json string. */
DECL|method|toJsonString (final HdfsFileStatus status, boolean includeType)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|HdfsFileStatus
name|status
parameter_list|,
name|boolean
name|includeType
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"pathSuffix"
argument_list|,
name|status
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|PathType
operator|.
name|valueOf
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
literal|"symlink"
argument_list|,
name|status
operator|.
name|getSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|put
argument_list|(
literal|"length"
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|FsPermission
name|perm
init|=
name|status
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"permission"
argument_list|,
name|toString
argument_list|(
name|perm
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|.
name|getAclBit
argument_list|()
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
literal|"aclBit"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|put
argument_list|(
literal|"accessTime"
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"modificationTime"
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blockSize"
argument_list|,
name|status
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"replication"
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"fileId"
argument_list|,
name|status
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"childrenNum"
argument_list|,
name|status
operator|.
name|getChildrenNum
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|includeType
condition|?
name|toJsonString
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|,
name|m
argument_list|)
else|:
name|JSON
operator|.
name|toString
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a HdfsFileStatus object. */
DECL|method|toFileStatus (final Map<?, ?> json, boolean includesType)
specifier|public
specifier|static
name|HdfsFileStatus
name|toFileStatus
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|,
name|boolean
name|includesType
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
name|includesType
condition|?
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|FileStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
else|:
name|json
decl_stmt|;
specifier|final
name|String
name|localName
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"pathSuffix"
argument_list|)
decl_stmt|;
specifier|final
name|PathType
name|type
init|=
name|PathType
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|symlink
init|=
name|type
operator|!=
name|PathType
operator|.
name|SYMLINK
condition|?
literal|null
else|:
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"symlink"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|len
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|owner
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|permission
init|=
name|toFsPermission
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"permission"
argument_list|)
argument_list|,
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"aclBit"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|aTime
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"accessTime"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|mTime
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"modificationTime"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockSize"
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replication
init|=
call|(
name|short
call|)
argument_list|(
name|long
argument_list|)
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"replication"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|fileId
init|=
name|m
operator|.
name|containsKey
argument_list|(
literal|"fileId"
argument_list|)
condition|?
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"fileId"
argument_list|)
else|:
name|INodeId
operator|.
name|GRANDFATHER_INODE_ID
decl_stmt|;
name|Long
name|childrenNumLong
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"childrenNum"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|childrenNum
init|=
operator|(
name|childrenNumLong
operator|==
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
name|childrenNumLong
operator|.
name|intValue
argument_list|()
decl_stmt|;
return|return
operator|new
name|HdfsFileStatus
argument_list|(
name|len
argument_list|,
name|type
operator|==
name|PathType
operator|.
name|DIRECTORY
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|mTime
argument_list|,
name|aTime
argument_list|,
name|permission
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|symlink
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|localName
argument_list|)
argument_list|,
name|fileId
argument_list|,
name|childrenNum
argument_list|,
literal|null
comment|/* key */
argument_list|,
literal|null
comment|/* IV */
argument_list|)
return|;
block|}
comment|/** Convert an ExtendedBlock to a Json map. */
DECL|method|toJsonMap (final ExtendedBlock extendedblock)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toJsonMap
parameter_list|(
specifier|final
name|ExtendedBlock
name|extendedblock
parameter_list|)
block|{
if|if
condition|(
name|extendedblock
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blockPoolId"
argument_list|,
name|extendedblock
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blockId"
argument_list|,
name|extendedblock
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"numBytes"
argument_list|,
name|extendedblock
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"generationStamp"
argument_list|,
name|extendedblock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
comment|/** Convert a Json map to an ExtendedBlock object. */
DECL|method|toExtendedBlock (final Map<?, ?> m)
specifier|private
specifier|static
name|ExtendedBlock
name|toExtendedBlock
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|blockPoolId
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockPoolId"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|blockId
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockId"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|numBytes
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"numBytes"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|generationStamp
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"generationStamp"
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExtendedBlock
argument_list|(
name|blockPoolId
argument_list|,
name|blockId
argument_list|,
name|numBytes
argument_list|,
name|generationStamp
argument_list|)
return|;
block|}
comment|/** Convert a DatanodeInfo to a Json map. */
DECL|method|toJsonMap (final DatanodeInfo datanodeinfo)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toJsonMap
parameter_list|(
specifier|final
name|DatanodeInfo
name|datanodeinfo
parameter_list|)
block|{
if|if
condition|(
name|datanodeinfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// TODO: Fix storageID
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"ipAddr"
argument_list|,
name|datanodeinfo
operator|.
name|getIpAddr
argument_list|()
argument_list|)
expr_stmt|;
comment|// 'name' is equivalent to ipAddr:xferPort. Older clients (1.x, 0.23.x)
comment|// expects this instead of the two fields.
name|m
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|datanodeinfo
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"hostName"
argument_list|,
name|datanodeinfo
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"storageID"
argument_list|,
name|datanodeinfo
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"xferPort"
argument_list|,
name|datanodeinfo
operator|.
name|getXferPort
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"infoPort"
argument_list|,
name|datanodeinfo
operator|.
name|getInfoPort
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"infoSecurePort"
argument_list|,
name|datanodeinfo
operator|.
name|getInfoSecurePort
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"ipcPort"
argument_list|,
name|datanodeinfo
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"capacity"
argument_list|,
name|datanodeinfo
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"dfsUsed"
argument_list|,
name|datanodeinfo
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"remaining"
argument_list|,
name|datanodeinfo
operator|.
name|getRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blockPoolUsed"
argument_list|,
name|datanodeinfo
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"cacheCapacity"
argument_list|,
name|datanodeinfo
operator|.
name|getCacheCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"cacheUsed"
argument_list|,
name|datanodeinfo
operator|.
name|getCacheUsed
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"lastUpdate"
argument_list|,
name|datanodeinfo
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"xceiverCount"
argument_list|,
name|datanodeinfo
operator|.
name|getXceiverCount
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"networkLocation"
argument_list|,
name|datanodeinfo
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"adminState"
argument_list|,
name|datanodeinfo
operator|.
name|getAdminState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
DECL|method|getInt (Map<?, ?> m, String key, final int defaultValue)
specifier|private
specifier|static
name|int
name|getInt
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|,
name|String
name|key
parameter_list|,
specifier|final
name|int
name|defaultValue
parameter_list|)
block|{
name|Object
name|value
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
call|(
name|int
call|)
argument_list|(
name|long
argument_list|)
operator|(
name|Long
operator|)
name|value
return|;
block|}
DECL|method|getLong (Map<?, ?> m, String key, final long defaultValue)
specifier|private
specifier|static
name|long
name|getLong
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|,
name|String
name|key
parameter_list|,
specifier|final
name|long
name|defaultValue
parameter_list|)
block|{
name|Object
name|value
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
operator|(
name|Long
operator|)
name|value
return|;
block|}
DECL|method|getString (Map<?, ?> m, String key, final String defaultValue)
specifier|private
specifier|static
name|String
name|getString
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|,
name|String
name|key
parameter_list|,
specifier|final
name|String
name|defaultValue
parameter_list|)
block|{
name|Object
name|value
init|=
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
operator|(
name|String
operator|)
name|value
return|;
block|}
comment|/** Convert a Json map to an DatanodeInfo object. */
DECL|method|toDatanodeInfo (final Map<?, ?> m)
specifier|static
name|DatanodeInfo
name|toDatanodeInfo
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// ipAddr and xferPort are the critical fields for accessing data.
comment|// If any one of the two is missing, an exception needs to be thrown.
comment|// Handle the case of old servers (1.x, 0.23.x) sending 'name' instead
comment|//  of ipAddr and xferPort.
name|String
name|ipAddr
init|=
name|getString
argument_list|(
name|m
argument_list|,
literal|"ipAddr"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|xferPort
init|=
name|getInt
argument_list|(
name|m
argument_list|,
literal|"xferPort"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ipAddr
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|getString
argument_list|(
name|m
argument_list|,
literal|"name"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|int
name|colonIdx
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colonIdx
operator|>
literal|0
condition|)
block|{
name|ipAddr
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colonIdx
argument_list|)
expr_stmt|;
name|xferPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|colonIdx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid value in server response: name=["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing both 'ipAddr' and 'name' in server response."
argument_list|)
throw|;
block|}
comment|// ipAddr is non-null& non-empty string at this point.
block|}
comment|// Check the validity of xferPort.
if|if
condition|(
name|xferPort
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid or missing 'xferPort' in server response."
argument_list|)
throw|;
block|}
comment|// TODO: Fix storageID
return|return
operator|new
name|DatanodeInfo
argument_list|(
name|ipAddr
argument_list|,
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"hostName"
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"storageID"
argument_list|)
argument_list|,
name|xferPort
argument_list|,
call|(
name|int
call|)
argument_list|(
name|long
argument_list|)
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"infoPort"
argument_list|)
argument_list|,
name|getInt
argument_list|(
name|m
argument_list|,
literal|"infoSecurePort"
argument_list|,
literal|0
argument_list|)
argument_list|,
call|(
name|int
call|)
argument_list|(
name|long
argument_list|)
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"ipcPort"
argument_list|)
argument_list|,
name|getLong
argument_list|(
name|m
argument_list|,
literal|"capacity"
argument_list|,
literal|0l
argument_list|)
argument_list|,
name|getLong
argument_list|(
name|m
argument_list|,
literal|"dfsUsed"
argument_list|,
literal|0l
argument_list|)
argument_list|,
name|getLong
argument_list|(
name|m
argument_list|,
literal|"remaining"
argument_list|,
literal|0l
argument_list|)
argument_list|,
name|getLong
argument_list|(
name|m
argument_list|,
literal|"blockPoolUsed"
argument_list|,
literal|0l
argument_list|)
argument_list|,
name|getLong
argument_list|(
name|m
argument_list|,
literal|"cacheCapacity"
argument_list|,
literal|0l
argument_list|)
argument_list|,
name|getLong
argument_list|(
name|m
argument_list|,
literal|"cacheUsed"
argument_list|,
literal|0l
argument_list|)
argument_list|,
name|getLong
argument_list|(
name|m
argument_list|,
literal|"lastUpdate"
argument_list|,
literal|0l
argument_list|)
argument_list|,
name|getInt
argument_list|(
name|m
argument_list|,
literal|"xceiverCount"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|getString
argument_list|(
name|m
argument_list|,
literal|"networkLocation"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|AdminStates
operator|.
name|valueOf
argument_list|(
name|getString
argument_list|(
name|m
argument_list|,
literal|"adminState"
argument_list|,
literal|"NORMAL"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Convert a DatanodeInfo[] to a Json array. */
DECL|method|toJsonArray (final DatanodeInfo[] array)
specifier|private
specifier|static
name|Object
index|[]
name|toJsonArray
parameter_list|(
specifier|final
name|DatanodeInfo
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|array
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_OBJECT_ARRAY
return|;
block|}
else|else
block|{
specifier|final
name|Object
index|[]
name|a
init|=
operator|new
name|Object
index|[
name|array
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|=
name|toJsonMap
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
block|}
comment|/** Convert an Object[] to a DatanodeInfo[]. */
DECL|method|toDatanodeInfoArray (final Object[] objects)
specifier|private
specifier|static
name|DatanodeInfo
index|[]
name|toDatanodeInfoArray
parameter_list|(
specifier|final
name|Object
index|[]
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|objects
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_DATANODE_INFO_ARRAY
return|;
block|}
else|else
block|{
specifier|final
name|DatanodeInfo
index|[]
name|array
init|=
operator|new
name|DatanodeInfo
index|[
name|objects
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|toDatanodeInfo
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
block|}
comment|/** Convert a LocatedBlock to a Json map. */
DECL|method|toJsonMap (final LocatedBlock locatedblock )
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toJsonMap
parameter_list|(
specifier|final
name|LocatedBlock
name|locatedblock
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|locatedblock
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blockToken"
argument_list|,
name|toJsonMap
argument_list|(
name|locatedblock
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"isCorrupt"
argument_list|,
name|locatedblock
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"startOffset"
argument_list|,
name|locatedblock
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"block"
argument_list|,
name|toJsonMap
argument_list|(
name|locatedblock
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"locations"
argument_list|,
name|toJsonArray
argument_list|(
name|locatedblock
operator|.
name|getLocations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"cachedLocations"
argument_list|,
name|toJsonArray
argument_list|(
name|locatedblock
operator|.
name|getCachedLocations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
comment|/** Convert a Json map to LocatedBlock. */
DECL|method|toLocatedBlock (final Map<?, ?> m)
specifier|private
specifier|static
name|LocatedBlock
name|toLocatedBlock
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|ExtendedBlock
name|b
init|=
name|toExtendedBlock
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"block"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|locations
init|=
name|toDatanodeInfoArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"locations"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|startOffset
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"startOffset"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isCorrupt
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isCorrupt"
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|cachedLocations
init|=
name|toDatanodeInfoArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"cachedLocations"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
name|locatedblock
init|=
operator|new
name|LocatedBlock
argument_list|(
name|b
argument_list|,
name|locations
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|startOffset
argument_list|,
name|isCorrupt
argument_list|,
name|cachedLocations
argument_list|)
decl_stmt|;
name|locatedblock
operator|.
name|setBlockToken
argument_list|(
name|toBlockToken
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockToken"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|locatedblock
return|;
block|}
comment|/** Convert a LocatedBlock[] to a Json array. */
DECL|method|toJsonArray (final List<LocatedBlock> array )
specifier|private
specifier|static
name|Object
index|[]
name|toJsonArray
parameter_list|(
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|array
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|array
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_OBJECT_ARRAY
return|;
block|}
else|else
block|{
specifier|final
name|Object
index|[]
name|a
init|=
operator|new
name|Object
index|[
name|array
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|=
name|toJsonMap
argument_list|(
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
block|}
comment|/** Convert an Object[] to a List of LocatedBlock. */
DECL|method|toLocatedBlockList (final Object[] objects )
specifier|private
specifier|static
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|toLocatedBlockList
parameter_list|(
specifier|final
name|Object
index|[]
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|objects
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|(
name|objects
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toLocatedBlock
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
comment|/** Convert LocatedBlocks to a Json string. */
DECL|method|toJsonString (final LocatedBlocks locatedblocks )
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|LocatedBlocks
name|locatedblocks
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|locatedblocks
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"fileLength"
argument_list|,
name|locatedblocks
operator|.
name|getFileLength
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"isUnderConstruction"
argument_list|,
name|locatedblocks
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"locatedBlocks"
argument_list|,
name|toJsonArray
argument_list|(
name|locatedblocks
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"lastLocatedBlock"
argument_list|,
name|toJsonMap
argument_list|(
name|locatedblocks
operator|.
name|getLastLocatedBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"isLastBlockComplete"
argument_list|,
name|locatedblocks
operator|.
name|isLastBlockComplete
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|toJsonString
argument_list|(
name|LocatedBlocks
operator|.
name|class
argument_list|,
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to LocatedBlock. */
DECL|method|toLocatedBlocks (final Map<?, ?> json )
specifier|public
specifier|static
name|LocatedBlocks
name|toLocatedBlocks
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|LocatedBlocks
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|fileLength
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"fileLength"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isUnderConstruction
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isUnderConstruction"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
init|=
name|toLocatedBlockList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"locatedBlocks"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
name|lastLocatedBlock
init|=
name|toLocatedBlock
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"lastLocatedBlock"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isLastBlockComplete
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isLastBlockComplete"
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocatedBlocks
argument_list|(
name|fileLength
argument_list|,
name|isUnderConstruction
argument_list|,
name|locatedBlocks
argument_list|,
name|lastLocatedBlock
argument_list|,
name|isLastBlockComplete
argument_list|,
literal|null
comment|/* key */
argument_list|,
literal|null
comment|/* IV */
argument_list|)
return|;
block|}
comment|/** Convert a ContentSummary to a Json string. */
DECL|method|toJsonString (final ContentSummary contentsummary)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|ContentSummary
name|contentsummary
parameter_list|)
block|{
if|if
condition|(
name|contentsummary
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"length"
argument_list|,
name|contentsummary
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"fileCount"
argument_list|,
name|contentsummary
operator|.
name|getFileCount
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"directoryCount"
argument_list|,
name|contentsummary
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"quota"
argument_list|,
name|contentsummary
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"spaceConsumed"
argument_list|,
name|contentsummary
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"spaceQuota"
argument_list|,
name|contentsummary
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|toJsonString
argument_list|(
name|ContentSummary
operator|.
name|class
argument_list|,
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a ContentSummary. */
DECL|method|toContentSummary (final Map<?, ?> json)
specifier|public
specifier|static
name|ContentSummary
name|toContentSummary
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|ContentSummary
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|length
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|fileCount
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"fileCount"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|directoryCount
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"directoryCount"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|quota
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"quota"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|spaceConsumed
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"spaceConsumed"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|spaceQuota
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"spaceQuota"
argument_list|)
decl_stmt|;
return|return
operator|new
name|ContentSummary
argument_list|(
name|length
argument_list|,
name|fileCount
argument_list|,
name|directoryCount
argument_list|,
name|quota
argument_list|,
name|spaceConsumed
argument_list|,
name|spaceQuota
argument_list|)
return|;
block|}
comment|/** Convert a MD5MD5CRC32FileChecksum to a Json string. */
DECL|method|toJsonString (final MD5MD5CRC32FileChecksum checksum)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|MD5MD5CRC32FileChecksum
name|checksum
parameter_list|)
block|{
if|if
condition|(
name|checksum
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"algorithm"
argument_list|,
name|checksum
operator|.
name|getAlgorithmName
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"length"
argument_list|,
name|checksum
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"bytes"
argument_list|,
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|checksum
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|toJsonString
argument_list|(
name|FileChecksum
operator|.
name|class
argument_list|,
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a MD5MD5CRC32FileChecksum. */
DECL|method|toMD5MD5CRC32FileChecksum ( final Map<?, ?> json)
specifier|public
specifier|static
name|MD5MD5CRC32FileChecksum
name|toMD5MD5CRC32FileChecksum
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|FileChecksum
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|algorithm
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"algorithm"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|length
init|=
call|(
name|int
call|)
argument_list|(
name|long
argument_list|)
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|StringUtils
operator|.
name|hexStringToByte
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"bytes"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DataChecksum
operator|.
name|Type
name|crcType
init|=
name|MD5MD5CRC32FileChecksum
operator|.
name|getCrcTypeFromAlgorithmName
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
specifier|final
name|MD5MD5CRC32FileChecksum
name|checksum
decl_stmt|;
comment|// Recreate what DFSClient would have returned.
switch|switch
condition|(
name|crcType
condition|)
block|{
case|case
name|CRC32
case|:
name|checksum
operator|=
operator|new
name|MD5MD5CRC32GzipFileChecksum
argument_list|()
expr_stmt|;
break|break;
case|case
name|CRC32C
case|:
name|checksum
operator|=
operator|new
name|MD5MD5CRC32CastagnoliFileChecksum
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown algorithm: "
operator|+
name|algorithm
argument_list|)
throw|;
block|}
name|checksum
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|//check algorithm name
if|if
condition|(
operator|!
name|checksum
operator|.
name|getAlgorithmName
argument_list|()
operator|.
name|equals
argument_list|(
name|algorithm
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Algorithm not matched. Expected "
operator|+
name|algorithm
operator|+
literal|", Received "
operator|+
name|checksum
operator|.
name|getAlgorithmName
argument_list|()
argument_list|)
throw|;
block|}
comment|//check length
if|if
condition|(
name|length
operator|!=
name|checksum
operator|.
name|getLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Length not matched: length="
operator|+
name|length
operator|+
literal|", checksum.getLength()="
operator|+
name|checksum
operator|.
name|getLength
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|checksum
return|;
block|}
comment|/** Convert a AclStatus object to a Json string. */
DECL|method|toJsonString (final AclStatus status)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|AclStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"stickyBit"
argument_list|,
name|status
operator|.
name|isStickyBit
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"entries"
argument_list|,
name|status
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|finalMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|finalMap
operator|.
name|put
argument_list|(
name|AclStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|finalMap
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a AclStatus object. */
DECL|method|toAclStatus (final Map<?, ?> json)
specifier|public
specifier|static
name|AclStatus
name|toAclStatus
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|AclStatus
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|AclStatus
operator|.
name|Builder
name|aclStatusBuilder
init|=
operator|new
name|AclStatus
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|aclStatusBuilder
operator|.
name|owner
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|group
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
argument_list|)
expr_stmt|;
name|aclStatusBuilder
operator|.
name|stickyBit
argument_list|(
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"stickyBit"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Object
index|[]
name|entries
init|=
operator|(
name|Object
index|[]
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"entries"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntryList
init|=
operator|new
name|ArrayList
argument_list|<
name|AclEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|AclEntry
name|aclEntry
init|=
name|AclEntry
operator|.
name|parseAclEntry
argument_list|(
operator|(
name|String
operator|)
name|entries
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aclEntryList
operator|.
name|add
argument_list|(
name|aclEntry
argument_list|)
expr_stmt|;
block|}
name|aclStatusBuilder
operator|.
name|addEntries
argument_list|(
name|aclEntryList
argument_list|)
expr_stmt|;
return|return
name|aclStatusBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|toJsonString (final XAttr xAttr, final XAttrCodec encoding)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|XAttr
name|xAttr
parameter_list|,
specifier|final
name|XAttrCodec
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|xAttr
operator|==
literal|null
condition|)
block|{
return|return
literal|"{}"
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|XAttrHelper
operator|.
name|getPrefixName
argument_list|(
name|xAttr
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|xAttr
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|?
name|XAttrCodec
operator|.
name|encodeValue
argument_list|(
name|xAttr
operator|.
name|getValue
argument_list|()
argument_list|,
name|encoding
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|finalMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|finalMap
operator|.
name|put
argument_list|(
name|XAttr
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|finalMap
argument_list|)
return|;
block|}
DECL|method|toJsonMap (final XAttr xAttr, final XAttrCodec encoding)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toJsonMap
parameter_list|(
specifier|final
name|XAttr
name|xAttr
parameter_list|,
specifier|final
name|XAttrCodec
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|xAttr
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|XAttrHelper
operator|.
name|getPrefixName
argument_list|(
name|xAttr
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|xAttr
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|?
name|XAttrCodec
operator|.
name|encodeValue
argument_list|(
name|xAttr
operator|.
name|getValue
argument_list|()
argument_list|,
name|encoding
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
DECL|method|toJsonArray (final List<XAttr> array, final XAttrCodec encoding)
specifier|private
specifier|static
name|Object
index|[]
name|toJsonArray
parameter_list|(
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|array
parameter_list|,
specifier|final
name|XAttrCodec
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|array
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_OBJECT_ARRAY
return|;
block|}
else|else
block|{
specifier|final
name|Object
index|[]
name|a
init|=
operator|new
name|Object
index|[
name|array
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|=
name|toJsonMap
argument_list|(
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
block|}
DECL|method|toJsonString (final List<XAttr> xAttrs, final XAttrCodec encoding)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|,
specifier|final
name|XAttrCodec
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|finalMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|finalMap
operator|.
name|put
argument_list|(
literal|"XAttrs"
argument_list|,
name|toJsonArray
argument_list|(
name|xAttrs
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|finalMap
argument_list|)
return|;
block|}
DECL|method|toXAttr (final Map<?, ?> json)
specifier|public
specifier|static
name|XAttr
name|toXAttr
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|XAttr
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|name
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
return|return
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|name
argument_list|,
name|decodeXAttrValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toXAttrs (final Map<?, ?> json)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|toXAttrs
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|toXAttrMap
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"XAttrs"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toXAttrs (final Map<?, ?> json, List<String> names)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|toXAttrs
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|json
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|json
operator|==
literal|null
operator|||
name|names
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Maps
operator|.
name|newHashMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|toXAttrs
argument_list|(
name|json
argument_list|)
decl_stmt|;
if|if
condition|(
name|xAttrs
operator|==
literal|null
operator|||
name|xAttrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|xAttrs
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|xAttrs
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|xAttrs
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|toXAttrMap (final Object[] objects)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|toXAttrMap
parameter_list|(
specifier|final
name|Object
index|[]
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|objects
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Maps
operator|.
name|newHashMap
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xAttrs
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|objects
index|[
name|i
index|]
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|xAttrs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|decodeXAttrValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|xAttrs
return|;
block|}
block|}
DECL|method|decodeXAttrValue (String value)
specifier|private
specifier|static
name|byte
index|[]
name|decodeXAttrValue
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|XAttrCodec
operator|.
name|decodeValue
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
end_class

end_unit

