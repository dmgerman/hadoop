begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_comment
comment|/** JSON Utilities */
end_comment

begin_class
DECL|class|JsonUtil
specifier|public
class|class
name|JsonUtil
block|{
DECL|class|ThreadLocalMap
specifier|private
specifier|static
class|class
name|ThreadLocalMap
extends|extends
name|ThreadLocal
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|initialValue ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|get
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|super
operator|.
name|get
argument_list|()
decl_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|m
return|;
block|}
block|}
DECL|field|jsonMap
specifier|private
specifier|static
specifier|final
name|ThreadLocalMap
name|jsonMap
init|=
operator|new
name|ThreadLocalMap
argument_list|()
decl_stmt|;
DECL|field|tokenMap
specifier|private
specifier|static
specifier|final
name|ThreadLocalMap
name|tokenMap
init|=
operator|new
name|ThreadLocalMap
argument_list|()
decl_stmt|;
DECL|field|datanodeInfoMap
specifier|private
specifier|static
specifier|final
name|ThreadLocalMap
name|datanodeInfoMap
init|=
operator|new
name|ThreadLocalMap
argument_list|()
decl_stmt|;
DECL|field|extendedBlockMap
specifier|private
specifier|static
specifier|final
name|ThreadLocalMap
name|extendedBlockMap
init|=
operator|new
name|ThreadLocalMap
argument_list|()
decl_stmt|;
DECL|field|locatedBlockMap
specifier|private
specifier|static
specifier|final
name|ThreadLocalMap
name|locatedBlockMap
init|=
operator|new
name|ThreadLocalMap
argument_list|()
decl_stmt|;
DECL|field|EMPTY_DATANODE_INFO_ARRAY
specifier|private
specifier|static
specifier|final
name|DatanodeInfo
index|[]
name|EMPTY_DATANODE_INFO_ARRAY
init|=
block|{}
decl_stmt|;
comment|/** Convert a token object to a Json string. */
DECL|method|toJsonString (final Token<? extends TokenIdentifier> token )
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|tokenMap
operator|.
name|get
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"urlString"
argument_list|,
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a Token. */
DECL|method|toToken ( final Map<?, ?> m)
specifier|public
specifier|static
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|toToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"urlString"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Convert a Json map to a Token of DelegationTokenIdentifier. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toDelegationToken ( final Map<?, ?> m)
specifier|public
specifier|static
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|toDelegationToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
operator|)
name|toToken
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a Token of BlockTokenIdentifier. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toBlockToken ( final Map<?, ?> m)
specifier|public
specifier|static
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|toBlockToken
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
operator|)
name|toToken
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert an exception object to a Json string. */
DECL|method|toJsonString (final Exception e)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|jsonMap
operator|.
name|get
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"className"
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"message"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a RemoteException. */
DECL|method|toRemoteException (final Map<String, Object> m)
specifier|public
specifier|static
name|RemoteException
name|toRemoteException
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
parameter_list|)
block|{
specifier|final
name|String
name|className
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"className"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|message
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
return|return
operator|new
name|RemoteException
argument_list|(
name|className
argument_list|,
name|message
argument_list|)
return|;
block|}
comment|/** Convert a key-value pair to a Json string. */
DECL|method|toJsonString (final Object key, final Object value)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|Object
name|key
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|jsonMap
operator|.
name|get
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|key
operator|instanceof
name|String
condition|?
operator|(
name|String
operator|)
name|key
else|:
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a FsPermission object to a string. */
DECL|method|toString (final FsPermission permission)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
specifier|final
name|FsPermission
name|permission
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%o"
argument_list|,
name|permission
operator|.
name|toShort
argument_list|()
argument_list|)
return|;
block|}
comment|/** Convert a string to a FsPermission object. */
DECL|method|toFsPermission (final String s)
specifier|public
specifier|static
name|FsPermission
name|toFsPermission
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|FsPermission
argument_list|(
name|Short
operator|.
name|parseShort
argument_list|(
name|s
argument_list|,
literal|8
argument_list|)
argument_list|)
return|;
block|}
comment|/** Convert a HdfsFileStatus object to a Json string. */
DECL|method|toJsonString (final HdfsFileStatus status)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|HdfsFileStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|jsonMap
operator|.
name|get
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"localName"
argument_list|,
name|status
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"isDir"
argument_list|,
name|status
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"isSymlink"
argument_list|,
name|status
operator|.
name|isSymlink
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
literal|"symlink"
argument_list|,
name|status
operator|.
name|getSymlink
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|put
argument_list|(
literal|"len"
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"permission"
argument_list|,
name|toString
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"accessTime"
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"modificationTime"
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blockSize"
argument_list|,
name|status
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"replication"
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|m
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|parse (String jsonString)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parse
parameter_list|(
name|String
name|jsonString
parameter_list|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|jsonString
argument_list|)
return|;
block|}
comment|/** Convert a Json map to a HdfsFileStatus object. */
DECL|method|toFileStatus (final Map<String, Object> m)
specifier|public
specifier|static
name|HdfsFileStatus
name|toFileStatus
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|localName
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"localName"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isDir
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isDir"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isSymlink
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isSymlink"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|symlink
init|=
name|isSymlink
condition|?
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"symlink"
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
specifier|final
name|long
name|len
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"len"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|owner
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
specifier|final
name|FsPermission
name|permission
init|=
name|toFsPermission
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"permission"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|aTime
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"accessTime"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|mTime
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"modificationTime"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|blockSize
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockSize"
argument_list|)
decl_stmt|;
specifier|final
name|short
name|replication
init|=
call|(
name|short
call|)
argument_list|(
name|long
argument_list|)
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"replication"
argument_list|)
decl_stmt|;
return|return
operator|new
name|HdfsFileStatus
argument_list|(
name|len
argument_list|,
name|isDir
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|mTime
argument_list|,
name|aTime
argument_list|,
name|permission
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|symlink
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|localName
argument_list|)
argument_list|)
return|;
block|}
comment|/** Convert a LocatedBlock to a Json string. */
DECL|method|toJsonString (final ExtendedBlock extendedblock)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|ExtendedBlock
name|extendedblock
parameter_list|)
block|{
if|if
condition|(
name|extendedblock
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|extendedBlockMap
operator|.
name|get
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blockPoolId"
argument_list|,
name|extendedblock
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blockId"
argument_list|,
name|extendedblock
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"numBytes"
argument_list|,
name|extendedblock
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"generationStamp"
argument_list|,
name|extendedblock
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to an ExtendedBlock object. */
DECL|method|toExtendedBlock (final Map<?, ?> m)
specifier|public
specifier|static
name|ExtendedBlock
name|toExtendedBlock
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|String
name|blockPoolId
init|=
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockPoolId"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|blockId
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockId"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|numBytes
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"numBytes"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|generationStamp
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"generationStamp"
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExtendedBlock
argument_list|(
name|blockPoolId
argument_list|,
name|blockId
argument_list|,
name|numBytes
argument_list|,
name|generationStamp
argument_list|)
return|;
block|}
comment|/** Convert a DatanodeInfo to a Json string. */
DECL|method|toJsonString (final DatanodeInfo datanodeinfo)
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|DatanodeInfo
name|datanodeinfo
parameter_list|)
block|{
if|if
condition|(
name|datanodeinfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|datanodeInfoMap
operator|.
name|get
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|datanodeinfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"storageID"
argument_list|,
name|datanodeinfo
operator|.
name|getStorageID
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"infoPort"
argument_list|,
name|datanodeinfo
operator|.
name|getInfoPort
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"ipcPort"
argument_list|,
name|datanodeinfo
operator|.
name|getIpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"capacity"
argument_list|,
name|datanodeinfo
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"dfsUsed"
argument_list|,
name|datanodeinfo
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"remaining"
argument_list|,
name|datanodeinfo
operator|.
name|getRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blockPoolUsed"
argument_list|,
name|datanodeinfo
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"lastUpdate"
argument_list|,
name|datanodeinfo
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"xceiverCount"
argument_list|,
name|datanodeinfo
operator|.
name|getXceiverCount
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"networkLocation"
argument_list|,
name|datanodeinfo
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"hostName"
argument_list|,
name|datanodeinfo
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"adminState"
argument_list|,
name|datanodeinfo
operator|.
name|getAdminState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to an DatanodeInfo object. */
DECL|method|toDatanodeInfo (final Map<?, ?> m)
specifier|public
specifier|static
name|DatanodeInfo
name|toDatanodeInfo
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|DatanodeInfo
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"storageID"
argument_list|)
argument_list|,
call|(
name|int
call|)
argument_list|(
name|long
argument_list|)
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"infoPort"
argument_list|)
argument_list|,
call|(
name|int
call|)
argument_list|(
name|long
argument_list|)
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"ipcPort"
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"capacity"
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"dfsUsed"
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"remaining"
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockPoolUsed"
argument_list|)
argument_list|,
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"lastUpdate"
argument_list|)
argument_list|,
call|(
name|int
call|)
argument_list|(
name|long
argument_list|)
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"xceiverCount"
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"networkLocation"
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"hostName"
argument_list|)
argument_list|,
name|AdminStates
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"adminState"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Convert a DatanodeInfo[] to a Json string. */
DECL|method|toJsonString (final DatanodeInfo[] array )
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|DatanodeInfo
index|[]
name|array
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|array
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
else|else
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|toJsonString
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|toJsonString
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/** Convert an Object[] to a DatanodeInfo[]. */
DECL|method|toDatanodeInfoArray (final Object[] objects)
specifier|public
specifier|static
name|DatanodeInfo
index|[]
name|toDatanodeInfoArray
parameter_list|(
specifier|final
name|Object
index|[]
name|objects
parameter_list|)
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|objects
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_DATANODE_INFO_ARRAY
return|;
block|}
else|else
block|{
specifier|final
name|DatanodeInfo
index|[]
name|array
init|=
operator|new
name|DatanodeInfo
index|[
name|objects
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
operator|(
name|DatanodeInfo
operator|)
name|toDatanodeInfo
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
block|}
comment|/** Convert a LocatedBlock to a Json string. */
DECL|method|toJsonString (final LocatedBlock locatedblock )
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|LocatedBlock
name|locatedblock
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|locatedblock
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|locatedBlockMap
operator|.
name|get
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"blockToken"
argument_list|,
name|toJsonString
argument_list|(
name|locatedblock
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"isCorrupt"
argument_list|,
name|locatedblock
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"startOffset"
argument_list|,
name|locatedblock
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"block"
argument_list|,
name|toJsonString
argument_list|(
name|locatedblock
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"locations"
argument_list|,
name|toJsonString
argument_list|(
name|locatedblock
operator|.
name|getLocations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to LocatedBlock. */
DECL|method|toLocatedBlock (final Map<?, ?> m)
specifier|public
specifier|static
name|LocatedBlock
name|toLocatedBlock
parameter_list|(
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|ExtendedBlock
name|b
init|=
name|toExtendedBlock
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"block"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|locations
init|=
name|toDatanodeInfoArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|JSON
operator|.
name|parse
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"locations"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|long
name|startOffset
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"startOffset"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isCorrupt
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isCorrupt"
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
name|locatedblock
init|=
operator|new
name|LocatedBlock
argument_list|(
name|b
argument_list|,
name|locations
argument_list|,
name|startOffset
argument_list|,
name|isCorrupt
argument_list|)
decl_stmt|;
name|locatedblock
operator|.
name|setBlockToken
argument_list|(
name|toBlockToken
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"blockToken"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|locatedblock
return|;
block|}
comment|/** Convert a LocatedBlock[] to a Json string. */
DECL|method|toJsonString (final List<LocatedBlock> array )
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|array
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|array
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"[]"
return|;
block|}
else|else
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|toJsonString
argument_list|(
name|array
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|",\n  "
argument_list|)
operator|.
name|append
argument_list|(
name|toJsonString
argument_list|(
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/** Convert an Object[] to a List of LocatedBlock.     * @throws IOException */
DECL|method|toLocatedBlockList (final Object[] objects )
specifier|public
specifier|static
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|toLocatedBlockList
parameter_list|(
specifier|final
name|Object
index|[]
name|objects
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|objects
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|(
name|objects
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
name|LocatedBlock
operator|)
name|toLocatedBlock
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|objects
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
comment|/** Convert LocatedBlocks to a Json string. */
DECL|method|toJsonString (final LocatedBlocks locatedblocks )
specifier|public
specifier|static
name|String
name|toJsonString
parameter_list|(
specifier|final
name|LocatedBlocks
name|locatedblocks
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|locatedblocks
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|jsonMap
operator|.
name|get
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"fileLength"
argument_list|,
name|locatedblocks
operator|.
name|getFileLength
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"isUnderConstruction"
argument_list|,
name|locatedblocks
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"locatedBlocks"
argument_list|,
name|toJsonString
argument_list|(
name|locatedblocks
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"lastLocatedBlock"
argument_list|,
name|toJsonString
argument_list|(
name|locatedblocks
operator|.
name|getLastLocatedBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"isLastBlockComplete"
argument_list|,
name|locatedblocks
operator|.
name|isLastBlockComplete
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|m
argument_list|)
return|;
block|}
comment|/** Convert a Json map to LocatedBlock. */
DECL|method|toLocatedBlocks (final Map<String, Object> m )
specifier|public
specifier|static
name|LocatedBlocks
name|toLocatedBlocks
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|long
name|fileLength
init|=
operator|(
name|Long
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"fileLength"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isUnderConstruction
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isUnderConstruction"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedBlocks
init|=
name|toLocatedBlockList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|JSON
operator|.
name|parse
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"locatedBlocks"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
name|lastLocatedBlock
init|=
name|toLocatedBlock
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
operator|(
name|String
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"lastLocatedBlock"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isLastBlockComplete
init|=
operator|(
name|Boolean
operator|)
name|m
operator|.
name|get
argument_list|(
literal|"isLastBlockComplete"
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocatedBlocks
argument_list|(
name|fileLength
argument_list|,
name|isUnderConstruction
argument_list|,
name|locatedBlocks
argument_list|,
name|lastLocatedBlock
argument_list|,
name|isLastBlockComplete
argument_list|)
return|;
block|}
block|}
end_class

end_unit

