begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoContiguous
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|BlocksMapUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|QuotaCounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotFSImageFormat
operator|.
name|ReferenceMap
import|;
end_import

begin_comment
comment|/**  * The difference of an {@link INodeFile} between two snapshots.  */
end_comment

begin_class
DECL|class|FileDiff
specifier|public
class|class
name|FileDiff
extends|extends
name|AbstractINodeDiff
argument_list|<
name|INodeFile
argument_list|,
name|INodeFileAttributes
argument_list|,
name|FileDiff
argument_list|>
block|{
comment|/** The file size at snapshot creation time. */
DECL|field|fileSize
specifier|private
specifier|final
name|long
name|fileSize
decl_stmt|;
comment|/** A copy of the INodeFile block list. Used in truncate. */
DECL|field|blocks
specifier|private
name|BlockInfoContiguous
index|[]
name|blocks
decl_stmt|;
DECL|method|FileDiff (int snapshotId, INodeFile file)
name|FileDiff
parameter_list|(
name|int
name|snapshotId
parameter_list|,
name|INodeFile
name|file
parameter_list|)
block|{
name|super
argument_list|(
name|snapshotId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fileSize
operator|=
name|file
operator|.
name|computeFileSize
argument_list|()
expr_stmt|;
name|blocks
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Constructor used by FSImage loading */
DECL|method|FileDiff (int snapshotId, INodeFileAttributes snapshotINode, FileDiff posteriorDiff, long fileSize)
name|FileDiff
parameter_list|(
name|int
name|snapshotId
parameter_list|,
name|INodeFileAttributes
name|snapshotINode
parameter_list|,
name|FileDiff
name|posteriorDiff
parameter_list|,
name|long
name|fileSize
parameter_list|)
block|{
name|super
argument_list|(
name|snapshotId
argument_list|,
name|snapshotINode
argument_list|,
name|posteriorDiff
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSize
operator|=
name|fileSize
expr_stmt|;
name|blocks
operator|=
literal|null
expr_stmt|;
block|}
comment|/** @return the file size in the snapshot. */
DECL|method|getFileSize ()
specifier|public
name|long
name|getFileSize
parameter_list|()
block|{
return|return
name|fileSize
return|;
block|}
comment|/**    * Copy block references into the snapshot    * up to the current {@link #fileSize}.    * Should be done only once.    */
DECL|method|setBlocks (BlockInfoContiguous[] blocks)
specifier|public
name|void
name|setBlocks
parameter_list|(
name|BlockInfoContiguous
index|[]
name|blocks
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|blocks
operator|!=
literal|null
condition|)
return|return;
name|int
name|numBlocks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|s
init|=
literal|0
init|;
name|numBlocks
operator|<
name|blocks
operator|.
name|length
operator|&&
name|s
operator|<
name|fileSize
condition|;
name|numBlocks
operator|++
control|)
name|s
operator|+=
name|blocks
index|[
name|numBlocks
index|]
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|blocks
argument_list|,
name|numBlocks
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlocks ()
specifier|public
name|BlockInfoContiguous
index|[]
name|getBlocks
parameter_list|()
block|{
return|return
name|blocks
return|;
block|}
annotation|@
name|Override
DECL|method|combinePosteriorAndCollectBlocks ( BlockStoragePolicySuite bsps, INodeFile currentINode, FileDiff posterior, BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
name|QuotaCounts
name|combinePosteriorAndCollectBlocks
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|INodeFile
name|currentINode
parameter_list|,
name|FileDiff
name|posterior
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|)
block|{
name|FileWithSnapshotFeature
name|sf
init|=
name|currentINode
operator|.
name|getFileWithSnapshotFeature
argument_list|()
decl_stmt|;
assert|assert
name|sf
operator|!=
literal|null
operator|:
literal|"FileWithSnapshotFeature is null"
assert|;
return|return
name|sf
operator|.
name|updateQuotaAndCollectBlocks
argument_list|(
name|bsps
argument_list|,
name|currentINode
argument_list|,
name|posterior
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" fileSize="
operator|+
name|fileSize
operator|+
literal|", rep="
operator|+
operator|(
name|snapshotINode
operator|==
literal|null
condition|?
literal|"?"
else|:
name|snapshotINode
operator|.
name|getFileReplication
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out, ReferenceMap referenceMap)
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|ReferenceMap
name|referenceMap
parameter_list|)
throws|throws
name|IOException
block|{
name|writeSnapshot
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|fileSize
argument_list|)
expr_stmt|;
comment|// write snapshotINode
if|if
condition|(
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FSImageSerialization
operator|.
name|writeINodeFileAttributes
argument_list|(
name|snapshotINode
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroyDiffAndCollectBlocks (BlockStoragePolicySuite bsps, INodeFile currentINode, BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
name|QuotaCounts
name|destroyDiffAndCollectBlocks
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|INodeFile
name|currentINode
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|)
block|{
return|return
name|currentINode
operator|.
name|getFileWithSnapshotFeature
argument_list|()
operator|.
name|updateQuotaAndCollectBlocks
argument_list|(
name|bsps
argument_list|,
name|currentINode
argument_list|,
name|this
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
return|;
block|}
DECL|method|destroyAndCollectSnapshotBlocks ( BlocksMapUpdateInfo collectedBlocks)
specifier|public
name|void
name|destroyAndCollectSnapshotBlocks
parameter_list|(
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
if|if
condition|(
name|blocks
operator|==
literal|null
operator|||
name|collectedBlocks
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|BlockInfoContiguous
name|blk
range|:
name|blocks
control|)
name|collectedBlocks
operator|.
name|addDeleteBlock
argument_list|(
name|blk
argument_list|)
expr_stmt|;
name|blocks
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

