begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|BlocksMapUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Quota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotFSImageFormat
operator|.
name|ReferenceMap
import|;
end_import

begin_comment
comment|/**  * The difference of an {@link INodeFile} between two snapshots.  */
end_comment

begin_class
DECL|class|FileDiff
specifier|public
class|class
name|FileDiff
extends|extends
name|AbstractINodeDiff
argument_list|<
name|INodeFile
argument_list|,
name|INodeFileAttributes
argument_list|,
name|FileDiff
argument_list|>
block|{
comment|/** The file size at snapshot creation time. */
DECL|field|fileSize
specifier|private
specifier|final
name|long
name|fileSize
decl_stmt|;
DECL|method|FileDiff (Snapshot snapshot, INodeFile file)
name|FileDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeFile
name|file
parameter_list|)
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fileSize
operator|=
name|file
operator|.
name|computeFileSize
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor used by FSImage loading */
DECL|method|FileDiff (Snapshot snapshot, INodeFileAttributes snapshotINode, FileDiff posteriorDiff, long fileSize)
name|FileDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeFileAttributes
name|snapshotINode
parameter_list|,
name|FileDiff
name|posteriorDiff
parameter_list|,
name|long
name|fileSize
parameter_list|)
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
name|snapshotINode
argument_list|,
name|posteriorDiff
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSize
operator|=
name|fileSize
expr_stmt|;
block|}
comment|/** @return the file size in the snapshot. */
DECL|method|getFileSize ()
specifier|public
name|long
name|getFileSize
parameter_list|()
block|{
return|return
name|fileSize
return|;
block|}
annotation|@
name|Override
DECL|method|combinePosteriorAndCollectBlocks (INodeFile currentINode, FileDiff posterior, BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
name|Quota
operator|.
name|Counts
name|combinePosteriorAndCollectBlocks
parameter_list|(
name|INodeFile
name|currentINode
parameter_list|,
name|FileDiff
name|posterior
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|)
block|{
return|return
name|currentINode
operator|.
name|getFileWithSnapshotFeature
argument_list|()
operator|.
name|updateQuotaAndCollectBlocks
argument_list|(
name|currentINode
argument_list|,
name|posterior
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" fileSize="
operator|+
name|fileSize
operator|+
literal|", rep="
operator|+
operator|(
name|snapshotINode
operator|==
literal|null
condition|?
literal|"?"
else|:
name|snapshotINode
operator|.
name|getFileReplication
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out, ReferenceMap referenceMap)
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|ReferenceMap
name|referenceMap
parameter_list|)
throws|throws
name|IOException
block|{
name|writeSnapshot
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|fileSize
argument_list|)
expr_stmt|;
comment|// write snapshotINode
if|if
condition|(
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FSImageSerialization
operator|.
name|writeINodeFileAttributes
argument_list|(
name|snapshotINode
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroyDiffAndCollectBlocks (INodeFile currentINode, BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
name|Quota
operator|.
name|Counts
name|destroyDiffAndCollectBlocks
parameter_list|(
name|INodeFile
name|currentINode
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|)
block|{
return|return
name|currentINode
operator|.
name|getFileWithSnapshotFeature
argument_list|()
operator|.
name|updateQuotaAndCollectBlocks
argument_list|(
name|currentINode
argument_list|,
name|this
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

