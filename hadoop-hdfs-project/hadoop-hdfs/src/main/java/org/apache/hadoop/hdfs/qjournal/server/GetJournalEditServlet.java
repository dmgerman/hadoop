begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|QuorumJournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FileJournalManager
operator|.
name|EditLogFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|GetImageServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|SecondaryNameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|TransferFsImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|DataTransferThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServletUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * This servlet is used in two cases:  *<ul>  *<li>The QuorumJournalManager, when reading edits, fetches the edit streams  * from the journal nodes.</li>  *<li>During edits synchronization, one journal node will fetch edits from  * another journal node.</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|GetJournalEditServlet
specifier|public
class|class
name|GetJournalEditServlet
extends|extends
name|HttpServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4635891628211723009L
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GetJournalEditServlet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|STORAGEINFO_PARAM
specifier|static
specifier|final
name|String
name|STORAGEINFO_PARAM
init|=
literal|"storageInfo"
decl_stmt|;
DECL|field|JOURNAL_ID_PARAM
specifier|static
specifier|final
name|String
name|JOURNAL_ID_PARAM
init|=
literal|"jid"
decl_stmt|;
DECL|field|SEGMENT_TXID_PARAM
specifier|static
specifier|final
name|String
name|SEGMENT_TXID_PARAM
init|=
literal|"segmentTxId"
decl_stmt|;
DECL|method|isValidRequestor (HttpServletRequest request, Configuration conf)
specifier|protected
name|boolean
name|isValidRequestor
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|remotePrincipal
init|=
name|request
operator|.
name|getUserPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|remoteShortName
init|=
name|request
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|remotePrincipal
operator|==
literal|null
condition|)
block|{
comment|// This really shouldn't happen...
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received null remoteUser while authorizing access to "
operator|+
literal|"GetJournalEditServlet"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Validating request made by "
operator|+
name|remotePrincipal
operator|+
literal|" / "
operator|+
name|remoteShortName
operator|+
literal|". This user is: "
operator|+
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|validRequestors
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|validRequestors
operator|.
name|addAll
argument_list|(
name|DFSUtil
operator|.
name|getAllNnPrincipals
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|validRequestors
operator|.
name|add
argument_list|(
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SECONDARY_NAMENODE_USER_NAME_KEY
argument_list|)
argument_list|,
name|SecondaryNameNode
operator|.
name|getHttpAddress
argument_list|(
name|conf
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the full principal name of all the configured valid requestors.
for|for
control|(
name|String
name|v
range|:
name|validRequestors
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"isValidRequestor is comparing to valid requestor: "
operator|+
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|equals
argument_list|(
name|remotePrincipal
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"isValidRequestor is allowing: "
operator|+
name|remotePrincipal
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// Additionally, we compare the short name of the requestor to this JN's
comment|// username, because we want to allow requests from other JNs during
comment|// recovery, but we can't enumerate the full list of JNs.
if|if
condition|(
name|remoteShortName
operator|.
name|equals
argument_list|(
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"isValidRequestor is allowing other JN principal: "
operator|+
name|remotePrincipal
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"isValidRequestor is rejecting: "
operator|+
name|remotePrincipal
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|checkRequestorOrSendError (Configuration conf, HttpServletRequest request, HttpServletResponse response)
specifier|private
name|boolean
name|checkRequestorOrSendError
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
operator|!
name|isValidRequestor
argument_list|(
name|request
argument_list|,
name|conf
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Only Namenode and another JournalNode may access this servlet"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received non-NN/JN request for edits from "
operator|+
name|request
operator|.
name|getRemoteHost
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|checkStorageInfoOrSendError (JNStorage storage, HttpServletRequest request, HttpServletResponse response)
specifier|private
name|boolean
name|checkStorageInfoOrSendError
parameter_list|(
name|JNStorage
name|storage
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|myNsId
init|=
name|storage
operator|.
name|getNamespaceID
argument_list|()
decl_stmt|;
name|String
name|myClusterId
init|=
name|storage
operator|.
name|getClusterID
argument_list|()
decl_stmt|;
name|String
name|theirStorageInfoString
init|=
name|StringEscapeUtils
operator|.
name|escapeHtml
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|STORAGEINFO_PARAM
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|theirStorageInfoString
operator|!=
literal|null
condition|)
block|{
name|int
name|theirNsId
init|=
name|StorageInfo
operator|.
name|getNsIdFromColonSeparatedString
argument_list|(
name|theirStorageInfoString
argument_list|)
decl_stmt|;
name|String
name|theirClusterId
init|=
name|StorageInfo
operator|.
name|getClusterIdFromColonSeparatedString
argument_list|(
name|theirStorageInfoString
argument_list|)
decl_stmt|;
if|if
condition|(
name|myNsId
operator|!=
name|theirNsId
operator|||
operator|!
name|myClusterId
operator|.
name|equals
argument_list|(
name|theirClusterId
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"This node has namespaceId '"
operator|+
name|myNsId
operator|+
literal|" and clusterId '"
operator|+
name|myClusterId
operator|+
literal|"' but the requesting node expected '"
operator|+
name|theirNsId
operator|+
literal|"' and '"
operator|+
name|theirClusterId
operator|+
literal|"'"
decl_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received an invalid request file transfer request from "
operator|+
name|request
operator|.
name|getRemoteAddr
argument_list|()
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|doGet (final HttpServletRequest request, final HttpServletResponse response)
specifier|public
name|void
name|doGet
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|FileInputStream
name|editFileIn
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|ServletContext
name|context
init|=
name|getServletContext
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|(
name|Configuration
operator|)
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
decl_stmt|;
specifier|final
name|String
name|journalId
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|JOURNAL_ID_PARAM
argument_list|)
decl_stmt|;
name|QuorumJournalManager
operator|.
name|checkJournalId
argument_list|(
name|journalId
argument_list|)
expr_stmt|;
specifier|final
name|JNStorage
name|storage
init|=
name|JournalNodeHttpServer
operator|.
name|getJournalFromContext
argument_list|(
name|context
argument_list|,
name|journalId
argument_list|)
operator|.
name|getStorage
argument_list|()
decl_stmt|;
comment|// Check security
if|if
condition|(
operator|!
name|checkRequestorOrSendError
argument_list|(
name|conf
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Check that the namespace info is correct
if|if
condition|(
operator|!
name|checkStorageInfoOrSendError
argument_list|(
name|storage
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
return|return;
block|}
name|long
name|segmentTxId
init|=
name|ServletUtil
operator|.
name|parseLongParam
argument_list|(
name|request
argument_list|,
name|SEGMENT_TXID_PARAM
argument_list|)
decl_stmt|;
name|FileJournalManager
name|fjm
init|=
name|storage
operator|.
name|getJournalManager
argument_list|()
decl_stmt|;
name|File
name|editFile
decl_stmt|;
synchronized|synchronized
init|(
name|fjm
init|)
block|{
comment|// Synchronize on the FJM so that the file doesn't get finalized
comment|// out from underneath us while we're in the process of opening
comment|// it up.
name|EditLogFile
name|elf
init|=
name|fjm
operator|.
name|getLogFile
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
if|if
condition|(
name|elf
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"No edit log found starting at txid "
operator|+
name|segmentTxId
argument_list|)
expr_stmt|;
return|return;
block|}
name|editFile
operator|=
name|elf
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|GetImageServlet
operator|.
name|setVerificationHeaders
argument_list|(
name|response
argument_list|,
name|editFile
argument_list|)
expr_stmt|;
name|GetImageServlet
operator|.
name|setFileNameHeaders
argument_list|(
name|response
argument_list|,
name|editFile
argument_list|)
expr_stmt|;
name|editFileIn
operator|=
operator|new
name|FileInputStream
argument_list|(
name|editFile
argument_list|)
expr_stmt|;
block|}
name|DataTransferThrottler
name|throttler
init|=
name|GetImageServlet
operator|.
name|getThrottler
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// send edits
name|TransferFsImage
operator|.
name|getFileServer
argument_list|(
name|response
argument_list|,
name|editFile
argument_list|,
name|editFileIn
argument_list|,
name|throttler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"getedit failed. "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|editFileIn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildPath (String journalId, long segmentTxId, NamespaceInfo nsInfo)
specifier|public
specifier|static
name|String
name|buildPath
parameter_list|(
name|String
name|journalId
parameter_list|,
name|long
name|segmentTxId
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|)
block|{
name|StringBuilder
name|path
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"/getJournal?"
argument_list|)
decl_stmt|;
try|try
block|{
name|path
operator|.
name|append
argument_list|(
name|JOURNAL_ID_PARAM
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|journalId
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
literal|"&"
operator|+
name|SEGMENT_TXID_PARAM
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|segmentTxId
argument_list|)
expr_stmt|;
name|path
operator|.
name|append
argument_list|(
literal|"&"
operator|+
name|STORAGEINFO_PARAM
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|nsInfo
operator|.
name|toColonSeparatedString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// Never get here -- everyone supports UTF-8
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

