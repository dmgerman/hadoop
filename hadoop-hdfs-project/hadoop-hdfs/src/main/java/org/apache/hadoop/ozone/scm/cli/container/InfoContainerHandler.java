begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.cli.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|cli
operator|.
name|container
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|cli
operator|.
name|OzoneCommandHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|cli
operator|.
name|SCMCLI
operator|.
name|CMD_WIDTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|cli
operator|.
name|SCMCLI
operator|.
name|HELP_OP
import|;
end_import

begin_comment
comment|/**  * This is the handler that process container info command.  */
end_comment

begin_class
DECL|class|InfoContainerHandler
specifier|public
class|class
name|InfoContainerHandler
extends|extends
name|OzoneCommandHandler
block|{
DECL|field|CONTAINER_INFO
specifier|public
specifier|static
specifier|final
name|String
name|CONTAINER_INFO
init|=
literal|"info"
decl_stmt|;
DECL|field|OPT_CONTAINER_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|OPT_CONTAINER_NAME
init|=
literal|"c"
decl_stmt|;
comment|/**    * Constructs a handler object.    *    * @param scmClient scm client.    */
DECL|method|InfoContainerHandler (ScmClient scmClient)
specifier|public
name|InfoContainerHandler
parameter_list|(
name|ScmClient
name|scmClient
parameter_list|)
block|{
name|super
argument_list|(
name|scmClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (CommandLine cmd)
specifier|public
name|void
name|execute
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
name|CONTAINER_INFO
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expecting container info"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
name|OPT_CONTAINER_NAME
argument_list|)
condition|)
block|{
name|displayHelp
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
name|HELP_OP
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expecting container name"
argument_list|)
throw|;
block|}
else|else
block|{
return|return;
block|}
block|}
name|String
name|containerName
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPT_CONTAINER_NAME
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|getScmClient
argument_list|()
operator|.
name|getContainer
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|,
literal|"Pipeline cannot be null"
argument_list|)
expr_stmt|;
name|ContainerData
name|containerData
init|=
name|getScmClient
argument_list|()
operator|.
name|readContainer
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
comment|// Print container report info.
name|logOut
argument_list|(
literal|"Container Name: %s"
argument_list|,
name|containerData
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|openStatus
init|=
name|containerData
operator|.
name|getOpen
argument_list|()
condition|?
literal|"OPEN"
else|:
literal|"CLOSED"
decl_stmt|;
name|logOut
argument_list|(
literal|"Container State: %s"
argument_list|,
name|openStatus
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|containerData
operator|.
name|getHash
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logOut
argument_list|(
literal|"Container Hash: %s"
argument_list|,
name|containerData
operator|.
name|getHash
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logOut
argument_list|(
literal|"Container DB Path: %s"
argument_list|,
name|containerData
operator|.
name|getDbPath
argument_list|()
argument_list|)
expr_stmt|;
name|logOut
argument_list|(
literal|"Container Path: %s"
argument_list|,
name|containerData
operator|.
name|getContainerPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Output meta data.
name|String
name|metadataStr
init|=
name|containerData
operator|.
name|getMetadataList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
name|logOut
argument_list|(
literal|"Container Metadata: {%s}"
argument_list|,
name|metadataStr
argument_list|)
expr_stmt|;
comment|// Print pipeline of an existing container.
name|logOut
argument_list|(
literal|"LeaderID: %s"
argument_list|,
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|machinesStr
init|=
name|pipeline
operator|.
name|getMachines
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DatanodeID
operator|::
name|getHostName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|logOut
argument_list|(
literal|"Datanodes: [%s]"
argument_list|,
name|machinesStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|displayHelp ()
specifier|public
name|void
name|displayHelp
parameter_list|()
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|addOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
name|CMD_WIDTH
argument_list|,
literal|"hdfs scm -container -info<option>"
argument_list|,
literal|"where<option> is"
argument_list|,
name|options
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|addOptions (Options options)
specifier|public
specifier|static
name|void
name|addOptions
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|Option
name|containerNameOpt
init|=
operator|new
name|Option
argument_list|(
name|OPT_CONTAINER_NAME
argument_list|,
literal|true
argument_list|,
literal|"Specify container name"
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|containerNameOpt
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

