begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HAContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HAState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BackupState
specifier|public
class|class
name|BackupState
extends|extends
name|HAState
block|{
DECL|method|BackupState ()
specifier|public
name|BackupState
parameter_list|()
block|{
name|super
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// HAState
DECL|method|checkOperation (HAContext context, OperationCategory op)
specifier|public
name|void
name|checkOperation
parameter_list|(
name|HAContext
name|context
parameter_list|,
name|OperationCategory
name|op
parameter_list|)
throws|throws
name|StandbyException
block|{
name|context
operator|.
name|checkOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// HAState
DECL|method|shouldPopulateReplQueues ()
specifier|public
name|boolean
name|shouldPopulateReplQueues
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
comment|// HAState
DECL|method|enterState (HAContext context)
specifier|public
name|void
name|enterState
parameter_list|(
name|HAContext
name|context
parameter_list|)
throws|throws
name|ServiceFailedException
block|{
try|try
block|{
name|context
operator|.
name|startActiveServices
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed to start backup services"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
comment|// HAState
DECL|method|exitState (HAContext context)
specifier|public
name|void
name|exitState
parameter_list|(
name|HAContext
name|context
parameter_list|)
throws|throws
name|ServiceFailedException
block|{
try|try
block|{
name|context
operator|.
name|stopActiveServices
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed to stop backup services"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
comment|// HAState
DECL|method|prepareToExitState (HAContext context)
specifier|public
name|void
name|prepareToExitState
parameter_list|(
name|HAContext
name|context
parameter_list|)
throws|throws
name|ServiceFailedException
block|{
name|context
operator|.
name|prepareToStopStandbyServices
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

