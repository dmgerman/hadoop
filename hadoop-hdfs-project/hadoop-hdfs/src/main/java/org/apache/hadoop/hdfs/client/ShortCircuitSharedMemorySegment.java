begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
operator|.
name|POSIX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|CloseableReferenceCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|Unsafe
import|;
end_import

begin_class
DECL|class|ShortCircuitSharedMemorySegment
specifier|public
class|class
name|ShortCircuitSharedMemorySegment
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ShortCircuitSharedMemorySegment
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BYTES_PER_SLOT
specifier|private
specifier|static
specifier|final
name|int
name|BYTES_PER_SLOT
init|=
literal|64
decl_stmt|;
DECL|field|unsafe
specifier|private
specifier|static
specifier|final
name|Unsafe
name|unsafe
decl_stmt|;
static|static
block|{
name|Unsafe
name|theUnsafe
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Field
name|f
init|=
name|Unsafe
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"theUnsafe"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theUnsafe
operator|=
operator|(
name|Unsafe
operator|)
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to load misc.Unsafe"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|unsafe
operator|=
name|theUnsafe
expr_stmt|;
block|}
comment|/**    * A slot containing information about a replica.    *    * The format is:    * word 0    *   bit 0:32   Slot flags (see below).    *   bit 33:63  Anchor count.    * word 1:7    *   Reserved for future use, such as statistics.    *   Padding is also useful for avoiding false sharing.    *    * Little-endian versus big-endian is not relevant here since both the client    * and the server reside on the same computer and use the same orientation.    */
DECL|class|Slot
specifier|public
class|class
name|Slot
implements|implements
name|Closeable
block|{
comment|/**      * Flag indicating that the slot is in use.      */
DECL|field|SLOT_IN_USE_FLAG
specifier|private
specifier|static
specifier|final
name|long
name|SLOT_IN_USE_FLAG
init|=
literal|1L
operator|<<
literal|63
decl_stmt|;
comment|/**      * Flag indicating that the slot can be anchored.      */
DECL|field|ANCHORABLE_FLAG
specifier|private
specifier|static
specifier|final
name|long
name|ANCHORABLE_FLAG
init|=
literal|1L
operator|<<
literal|62
decl_stmt|;
DECL|field|slotAddress
specifier|private
name|long
name|slotAddress
decl_stmt|;
DECL|method|Slot (long slotAddress)
name|Slot
parameter_list|(
name|long
name|slotAddress
parameter_list|)
block|{
name|this
operator|.
name|slotAddress
operator|=
name|slotAddress
expr_stmt|;
block|}
comment|/**      * Make a given slot anchorable.      */
DECL|method|makeAnchorable ()
specifier|public
name|void
name|makeAnchorable
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|slotAddress
operator|!=
literal|0
argument_list|,
literal|"Called makeAnchorable on a slot that was closed."
argument_list|)
expr_stmt|;
name|long
name|prev
decl_stmt|;
do|do
block|{
name|prev
operator|=
name|unsafe
operator|.
name|getLongVolatile
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|slotAddress
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|prev
operator|&
name|ANCHORABLE_FLAG
operator|)
operator|!=
literal|0
condition|)
block|{
return|return;
block|}
block|}
do|while
condition|(
operator|!
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|slotAddress
argument_list|,
name|prev
argument_list|,
name|prev
operator||
name|ANCHORABLE_FLAG
argument_list|)
condition|)
do|;
block|}
comment|/**      * Make a given slot unanchorable.      */
DECL|method|makeUnanchorable ()
specifier|public
name|void
name|makeUnanchorable
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|slotAddress
operator|!=
literal|0
argument_list|,
literal|"Called makeUnanchorable on a slot that was closed."
argument_list|)
expr_stmt|;
name|long
name|prev
decl_stmt|;
do|do
block|{
name|prev
operator|=
name|unsafe
operator|.
name|getLongVolatile
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|slotAddress
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|prev
operator|&
name|ANCHORABLE_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
return|return;
block|}
block|}
do|while
condition|(
operator|!
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|slotAddress
argument_list|,
name|prev
argument_list|,
name|prev
operator|&
operator|(
operator|~
name|ANCHORABLE_FLAG
operator|)
argument_list|)
condition|)
do|;
block|}
comment|/**      * Try to add an anchor for a given slot.      *      * When a slot is anchored, we know that the block it refers to is resident      * in memory.      *      * @return          True if the slot is anchored.      */
DECL|method|addAnchor ()
specifier|public
name|boolean
name|addAnchor
parameter_list|()
block|{
name|long
name|prev
decl_stmt|;
do|do
block|{
name|prev
operator|=
name|unsafe
operator|.
name|getLongVolatile
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|slotAddress
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|prev
operator|&
literal|0x7fffffff
operator|)
operator|==
literal|0x7fffffff
condition|)
block|{
comment|// Too many other threads have anchored the slot (2 billion?)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|prev
operator|&
name|ANCHORABLE_FLAG
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Slot can't be anchored right now.
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
operator|!
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|slotAddress
argument_list|,
name|prev
argument_list|,
name|prev
operator|+
literal|1
argument_list|)
condition|)
do|;
return|return
literal|true
return|;
block|}
comment|/**      * Remove an anchor for a given slot.      */
DECL|method|removeAnchor ()
specifier|public
name|void
name|removeAnchor
parameter_list|()
block|{
name|long
name|prev
decl_stmt|;
do|do
block|{
name|prev
operator|=
name|unsafe
operator|.
name|getLongVolatile
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|slotAddress
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|(
name|prev
operator|&
literal|0x7fffffff
operator|)
operator|!=
literal|0
argument_list|,
literal|"Tried to remove anchor for slot "
operator|+
name|slotAddress
operator|+
literal|", which was "
operator|+
literal|"not anchored."
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|slotAddress
argument_list|,
name|prev
argument_list|,
name|prev
operator|-
literal|1
argument_list|)
condition|)
do|;
block|}
comment|/**      * @return      The index of this slot.      */
DECL|method|getIndex ()
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|slotAddress
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|Ints
operator|.
name|checkedCast
argument_list|(
operator|(
name|slotAddress
operator|-
name|baseAddress
operator|)
operator|/
name|BYTES_PER_SLOT
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|slotAddress
operator|==
literal|0
condition|)
return|return;
name|long
name|prev
decl_stmt|;
do|do
block|{
name|prev
operator|=
name|unsafe
operator|.
name|getLongVolatile
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|slotAddress
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|(
name|prev
operator|&
name|SLOT_IN_USE_FLAG
operator|)
operator|!=
literal|0
argument_list|,
literal|"tried to close slot that wasn't open"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|slotAddress
argument_list|,
name|prev
argument_list|,
literal|0
argument_list|)
condition|)
do|;
name|slotAddress
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|ShortCircuitSharedMemorySegment
operator|.
name|this
operator|.
name|refCount
operator|.
name|unreference
argument_list|()
condition|)
block|{
name|ShortCircuitSharedMemorySegment
operator|.
name|this
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * The stream that we're going to use to create this shared memory segment.    *    * Although this is a FileInputStream, we are going to assume that the    * underlying file descriptor is writable as well as readable.    * It would be more appropriate to use a RandomAccessFile here, but that class    * does not have any public accessor which returns a FileDescriptor, unlike    * FileInputStream.    */
DECL|field|stream
specifier|private
specifier|final
name|FileInputStream
name|stream
decl_stmt|;
comment|/**    * Length of the shared memory segment.    */
DECL|field|length
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
comment|/**    * The base address of the memory-mapped file.    */
DECL|field|baseAddress
specifier|private
specifier|final
name|long
name|baseAddress
decl_stmt|;
comment|/**    * Reference count and 'closed' status.    */
DECL|field|refCount
specifier|private
specifier|final
name|CloseableReferenceCount
name|refCount
init|=
operator|new
name|CloseableReferenceCount
argument_list|()
decl_stmt|;
DECL|method|ShortCircuitSharedMemorySegment (FileInputStream stream)
specifier|public
name|ShortCircuitSharedMemorySegment
parameter_list|(
name|FileInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|NativeIO
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NativeIO is not available."
argument_list|)
throw|;
block|}
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ShortCircuitSharedMemorySegment is not yet implemented "
operator|+
literal|"for Windows."
argument_list|)
throw|;
block|}
if|if
condition|(
name|unsafe
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"can't use ShortCircuitSharedMemorySegment because we failed to "
operator|+
literal|"load misc.Unsafe."
argument_list|)
throw|;
block|}
name|this
operator|.
name|refCount
operator|.
name|reference
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|getEffectiveLength
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseAddress
operator|=
name|POSIX
operator|.
name|mmap
argument_list|(
name|this
operator|.
name|stream
operator|.
name|getFD
argument_list|()
argument_list|,
name|POSIX
operator|.
name|MMAP_PROT_READ
operator||
name|POSIX
operator|.
name|MMAP_PROT_WRITE
argument_list|,
literal|true
argument_list|,
name|this
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calculate the effective usable size of the shared memory segment.    * We round down to a multiple of the slot size and do some validation.    *    * @param stream The stream we're using.    * @return       The effective usable size of the shared memory segment.    */
DECL|method|getEffectiveLength (FileInputStream stream)
specifier|private
specifier|static
name|int
name|getEffectiveLength
parameter_list|(
name|FileInputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|intSize
init|=
name|Ints
operator|.
name|checkedCast
argument_list|(
name|stream
operator|.
name|getChannel
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|slots
init|=
name|intSize
operator|/
name|BYTES_PER_SLOT
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|slots
operator|>
literal|0
argument_list|,
literal|"size of shared memory segment was "
operator|+
name|intSize
operator|+
literal|", but that is not enough to hold even one slot."
argument_list|)
expr_stmt|;
return|return
name|slots
operator|*
name|BYTES_PER_SLOT
return|;
block|}
DECL|method|allocateSlot (long address)
specifier|private
name|boolean
name|allocateSlot
parameter_list|(
name|long
name|address
parameter_list|)
block|{
name|long
name|prev
decl_stmt|;
do|do
block|{
name|prev
operator|=
name|unsafe
operator|.
name|getLongVolatile
argument_list|(
literal|null
argument_list|,
name|address
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|prev
operator|&
name|Slot
operator|.
name|SLOT_IN_USE_FLAG
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
operator|!
name|unsafe
operator|.
name|compareAndSwapLong
argument_list|(
literal|null
argument_list|,
name|address
argument_list|,
name|prev
argument_list|,
name|prev
operator||
name|Slot
operator|.
name|SLOT_IN_USE_FLAG
argument_list|)
condition|)
do|;
return|return
literal|true
return|;
block|}
comment|/**    * Allocate a new Slot in this shared memory segment.    *    * @return        A newly allocated Slot, or null if there were no available    *                slots.    */
DECL|method|allocateNextSlot ()
specifier|public
name|Slot
name|allocateNextSlot
parameter_list|()
throws|throws
name|IOException
block|{
name|ShortCircuitSharedMemorySegment
operator|.
name|this
operator|.
name|refCount
operator|.
name|reference
argument_list|()
expr_stmt|;
name|Slot
name|slot
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|numSlots
init|=
name|length
operator|/
name|BYTES_PER_SLOT
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSlots
condition|;
name|i
operator|++
control|)
block|{
name|long
name|address
init|=
name|this
operator|.
name|baseAddress
operator|+
operator|(
name|i
operator|*
name|BYTES_PER_SLOT
operator|)
decl_stmt|;
if|if
condition|(
name|allocateSlot
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|slot
operator|=
operator|new
name|Slot
argument_list|(
name|address
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|slot
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|refCount
operator|.
name|unreference
argument_list|()
condition|)
block|{
name|free
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|slot
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|refCount
operator|.
name|setClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|refCount
operator|.
name|unreference
argument_list|()
condition|)
block|{
name|free
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|free ()
name|void
name|free
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|POSIX
operator|.
name|munmap
argument_list|(
name|baseAddress
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

