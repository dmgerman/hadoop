begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Given a set of checkable resources, this class is capable of determining  * whether sufficient resources are available for the NN to continue operating.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|NameNodeResourcePolicy
specifier|final
class|class
name|NameNodeResourcePolicy
block|{
comment|/**    * Return true if and only if there are sufficient NN    * resources to continue logging edits.    *     * @param resources the collection of resources to check.    * @param minimumRedundantResources the minimum number of redundant resources    *        required to continue operation.    * @return true if and only if there are sufficient NN resources to    *         continue logging edits.    */
DECL|method|areResourcesAvailable ( Collection<? extends CheckableNameNodeResource> resources, int minimumRedundantResources)
specifier|static
name|boolean
name|areResourcesAvailable
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|CheckableNameNodeResource
argument_list|>
name|resources
parameter_list|,
name|int
name|minimumRedundantResources
parameter_list|)
block|{
name|int
name|requiredResourceCount
init|=
literal|0
decl_stmt|;
name|int
name|redundantResourceCount
init|=
literal|0
decl_stmt|;
name|int
name|disabledRedundantResourceCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CheckableNameNodeResource
name|resource
range|:
name|resources
control|)
block|{
if|if
condition|(
operator|!
name|resource
operator|.
name|isRequired
argument_list|()
condition|)
block|{
name|redundantResourceCount
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|resource
operator|.
name|isResourceAvailable
argument_list|()
condition|)
block|{
name|disabledRedundantResourceCount
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|requiredResourceCount
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|resource
operator|.
name|isResourceAvailable
argument_list|()
condition|)
block|{
comment|// Short circuit - a required resource is not available.
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|redundantResourceCount
operator|==
literal|0
condition|)
block|{
comment|// If there are no redundant resources, return true if there are any
comment|// required resources available.
return|return
name|requiredResourceCount
operator|>
literal|0
return|;
block|}
else|else
block|{
return|return
name|redundantResourceCount
operator|-
name|disabledRedundantResourceCount
operator|>=
name|minimumRedundantResources
return|;
block|}
block|}
block|}
end_class

end_unit

