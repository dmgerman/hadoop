begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
operator|.
name|DeletedBlocksTransaction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * A helper class to wrap the info about under deletion container blocks.  */
end_comment

begin_class
DECL|class|DeletedContainerBlocksSummary
specifier|public
specifier|final
class|class
name|DeletedContainerBlocksSummary
block|{
DECL|field|blocks
specifier|private
specifier|final
name|List
argument_list|<
name|DeletedBlocksTransaction
argument_list|>
name|blocks
decl_stmt|;
comment|// key : txID
comment|// value : times of this tx has been processed
DECL|field|txSummary
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|txSummary
decl_stmt|;
comment|// key : container name
comment|// value : the number of blocks need to be deleted in this container
comment|// if the message contains multiple entries for same block,
comment|// blocks will be merged
DECL|field|blockSummary
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|blockSummary
decl_stmt|;
comment|// total number of blocks in this message
DECL|field|numOfBlocks
specifier|private
name|int
name|numOfBlocks
decl_stmt|;
DECL|method|DeletedContainerBlocksSummary (List<DeletedBlocksTransaction> blocks)
specifier|private
name|DeletedContainerBlocksSummary
parameter_list|(
name|List
argument_list|<
name|DeletedBlocksTransaction
argument_list|>
name|blocks
parameter_list|)
block|{
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
name|txSummary
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|blockSummary
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|blocks
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
block|{
name|txSummary
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getTxID
argument_list|()
argument_list|,
name|entry
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockSummary
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getContainerName
argument_list|()
argument_list|)
condition|)
block|{
name|blockSummary
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getContainerName
argument_list|()
argument_list|,
name|blockSummary
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|+
name|entry
operator|.
name|getBlockIDCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|blockSummary
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getContainerName
argument_list|()
argument_list|,
name|entry
operator|.
name|getBlockIDCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numOfBlocks
operator|+=
name|entry
operator|.
name|getBlockIDCount
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getFrom ( List<DeletedBlocksTransaction> blocks)
specifier|public
specifier|static
name|DeletedContainerBlocksSummary
name|getFrom
parameter_list|(
name|List
argument_list|<
name|DeletedBlocksTransaction
argument_list|>
name|blocks
parameter_list|)
block|{
return|return
operator|new
name|DeletedContainerBlocksSummary
argument_list|(
name|blocks
argument_list|)
return|;
block|}
DECL|method|getNumOfBlocks ()
specifier|public
name|int
name|getNumOfBlocks
parameter_list|()
block|{
return|return
name|numOfBlocks
return|;
block|}
DECL|method|getNumOfContainers ()
specifier|public
name|int
name|getNumOfContainers
parameter_list|()
block|{
return|return
name|blockSummary
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getTXIDs ()
specifier|public
name|String
name|getTXIDs
parameter_list|()
block|{
return|return
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|txSummary
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|String
operator|::
name|valueOf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getTxIDSummary ()
specifier|public
name|String
name|getTxIDSummary
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|txSummaryEntry
init|=
name|txSummary
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|")"
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
literal|"["
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|txSummaryEntry
argument_list|)
operator|+
literal|"]"
return|;
block|}
DECL|method|toString ()
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|DeletedBlocksTransaction
name|blks
range|:
name|blocks
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
literal|"TXID="
argument_list|)
operator|.
name|append
argument_list|(
name|blks
operator|.
name|getTxID
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"TimesProceed="
argument_list|)
operator|.
name|append
argument_list|(
name|blks
operator|.
name|getCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|blks
operator|.
name|getContainerName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" : ["
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|blks
operator|.
name|getBlockIDList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

