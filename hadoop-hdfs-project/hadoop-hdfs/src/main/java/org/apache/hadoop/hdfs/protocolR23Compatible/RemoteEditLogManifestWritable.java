begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * An enumeration of logs available on a remote NameNode.  */
end_comment

begin_class
DECL|class|RemoteEditLogManifestWritable
specifier|public
class|class
name|RemoteEditLogManifestWritable
implements|implements
name|Writable
block|{
DECL|field|logs
specifier|private
name|List
argument_list|<
name|RemoteEditLogWritable
argument_list|>
name|logs
decl_stmt|;
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|RemoteEditLogManifestWritable
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|RemoteEditLogManifestWritable
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|RemoteEditLogManifestWritable ()
specifier|public
name|RemoteEditLogManifestWritable
parameter_list|()
block|{   }
DECL|method|RemoteEditLogManifestWritable (List<RemoteEditLogWritable> logs)
specifier|public
name|RemoteEditLogManifestWritable
parameter_list|(
name|List
argument_list|<
name|RemoteEditLogWritable
argument_list|>
name|logs
parameter_list|)
block|{
name|this
operator|.
name|logs
operator|=
name|logs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RemoteEditLogWritable
name|log
range|:
name|logs
control|)
block|{
name|log
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numLogs
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|logs
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLogs
condition|;
name|i
operator|++
control|)
block|{
name|RemoteEditLogWritable
name|log
init|=
operator|new
name|RemoteEditLogWritable
argument_list|()
decl_stmt|;
name|log
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|logs
operator|.
name|add
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|convert ( RemoteEditLogManifest editLogManifest)
specifier|public
specifier|static
name|RemoteEditLogManifestWritable
name|convert
parameter_list|(
name|RemoteEditLogManifest
name|editLogManifest
parameter_list|)
block|{
name|List
argument_list|<
name|RemoteEditLogWritable
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteEditLog
name|log
range|:
name|editLogManifest
operator|.
name|getLogs
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|RemoteEditLogWritable
operator|.
name|convert
argument_list|(
name|log
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RemoteEditLogManifestWritable
argument_list|(
name|list
argument_list|)
return|;
block|}
DECL|method|convert ()
specifier|public
name|RemoteEditLogManifest
name|convert
parameter_list|()
block|{
name|List
argument_list|<
name|RemoteEditLog
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteEditLogWritable
name|log
range|:
name|logs
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|log
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RemoteEditLogManifest
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
end_class

end_unit

