begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableQuantiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_comment
comment|/**  * This class is for maintaining Datanode Volume IO related statistics and  * publishing them through the metrics interfaces.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|Metrics
argument_list|(
name|name
operator|=
literal|"DataNodeVolume"
argument_list|,
name|about
operator|=
literal|"DataNode Volume metrics"
argument_list|,
name|context
operator|=
literal|"dfs"
argument_list|)
DECL|class|DataNodeVolumeMetrics
specifier|public
class|class
name|DataNodeVolumeMetrics
block|{
DECL|field|registry
specifier|private
specifier|final
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"FsVolume"
argument_list|)
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"number of metadata operations"
argument_list|)
DECL|field|totalMetadataOperations
specifier|private
name|MutableCounterLong
name|totalMetadataOperations
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"metadata operation rate"
argument_list|)
DECL|field|metadataOperationRate
specifier|private
name|MutableRate
name|metadataOperationRate
decl_stmt|;
DECL|field|metadataOperationLatencyQuantiles
specifier|private
name|MutableQuantiles
index|[]
name|metadataOperationLatencyQuantiles
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"number of data file io operations"
argument_list|)
DECL|field|totalDataFileIos
specifier|private
name|MutableCounterLong
name|totalDataFileIos
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"data file io operation rate"
argument_list|)
DECL|field|dataFileIoRate
specifier|private
name|MutableRate
name|dataFileIoRate
decl_stmt|;
DECL|field|dataFileIoLatencyQuantiles
specifier|private
name|MutableQuantiles
index|[]
name|dataFileIoLatencyQuantiles
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"file io flush rate"
argument_list|)
DECL|field|flushIoRate
specifier|private
name|MutableRate
name|flushIoRate
decl_stmt|;
DECL|field|flushIoLatencyQuantiles
specifier|private
name|MutableQuantiles
index|[]
name|flushIoLatencyQuantiles
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"file io sync rate"
argument_list|)
DECL|field|syncIoRate
specifier|private
name|MutableRate
name|syncIoRate
decl_stmt|;
DECL|field|syncIoLatencyQuantiles
specifier|private
name|MutableQuantiles
index|[]
name|syncIoLatencyQuantiles
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"file io read rate"
argument_list|)
DECL|field|readIoRate
specifier|private
name|MutableRate
name|readIoRate
decl_stmt|;
DECL|field|readIoLatencyQuantiles
specifier|private
name|MutableQuantiles
index|[]
name|readIoLatencyQuantiles
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"file io write rate"
argument_list|)
DECL|field|writeIoRate
specifier|private
name|MutableRate
name|writeIoRate
decl_stmt|;
DECL|field|writeIoLatencyQuantiles
specifier|private
name|MutableQuantiles
index|[]
name|writeIoLatencyQuantiles
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"number of file io errors"
argument_list|)
DECL|field|totalFileIoErrors
specifier|private
name|MutableCounterLong
name|totalFileIoErrors
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"file io error rate"
argument_list|)
DECL|field|fileIoErrorRate
specifier|private
name|MutableRate
name|fileIoErrorRate
decl_stmt|;
DECL|method|getTotalMetadataOperations ()
specifier|public
name|long
name|getTotalMetadataOperations
parameter_list|()
block|{
return|return
name|totalMetadataOperations
operator|.
name|value
argument_list|()
return|;
block|}
comment|// Based on metadataOperationRate
DECL|method|getMetadataOperationSampleCount ()
specifier|public
name|long
name|getMetadataOperationSampleCount
parameter_list|()
block|{
return|return
name|metadataOperationRate
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
DECL|method|getMetadataOperationMean ()
specifier|public
name|double
name|getMetadataOperationMean
parameter_list|()
block|{
return|return
name|metadataOperationRate
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
return|;
block|}
DECL|method|getMetadataOperationStdDev ()
specifier|public
name|double
name|getMetadataOperationStdDev
parameter_list|()
block|{
return|return
name|metadataOperationRate
operator|.
name|lastStat
argument_list|()
operator|.
name|stddev
argument_list|()
return|;
block|}
DECL|method|getTotalDataFileIos ()
specifier|public
name|long
name|getTotalDataFileIos
parameter_list|()
block|{
return|return
name|totalDataFileIos
operator|.
name|value
argument_list|()
return|;
block|}
comment|// Based on dataFileIoRate
DECL|method|getDataFileIoSampleCount ()
specifier|public
name|long
name|getDataFileIoSampleCount
parameter_list|()
block|{
return|return
name|dataFileIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
DECL|method|getDataFileIoMean ()
specifier|public
name|double
name|getDataFileIoMean
parameter_list|()
block|{
return|return
name|dataFileIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
return|;
block|}
DECL|method|getDataFileIoStdDev ()
specifier|public
name|double
name|getDataFileIoStdDev
parameter_list|()
block|{
return|return
name|dataFileIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|stddev
argument_list|()
return|;
block|}
comment|// Based on flushIoRate
DECL|method|getFlushIoSampleCount ()
specifier|public
name|long
name|getFlushIoSampleCount
parameter_list|()
block|{
return|return
name|flushIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
DECL|method|getFlushIoMean ()
specifier|public
name|double
name|getFlushIoMean
parameter_list|()
block|{
return|return
name|flushIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
return|;
block|}
DECL|method|getFlushIoStdDev ()
specifier|public
name|double
name|getFlushIoStdDev
parameter_list|()
block|{
return|return
name|flushIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|stddev
argument_list|()
return|;
block|}
comment|// Based on syncIoRate
DECL|method|getSyncIoSampleCount ()
specifier|public
name|long
name|getSyncIoSampleCount
parameter_list|()
block|{
return|return
name|syncIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
DECL|method|getSyncIoMean ()
specifier|public
name|double
name|getSyncIoMean
parameter_list|()
block|{
return|return
name|syncIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
return|;
block|}
DECL|method|getSyncIoStdDev ()
specifier|public
name|double
name|getSyncIoStdDev
parameter_list|()
block|{
return|return
name|syncIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|stddev
argument_list|()
return|;
block|}
comment|// Based on readIoRate
DECL|method|getReadIoSampleCount ()
specifier|public
name|long
name|getReadIoSampleCount
parameter_list|()
block|{
return|return
name|readIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
DECL|method|getReadIoMean ()
specifier|public
name|double
name|getReadIoMean
parameter_list|()
block|{
return|return
name|readIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
return|;
block|}
DECL|method|getReadIoStdDev ()
specifier|public
name|double
name|getReadIoStdDev
parameter_list|()
block|{
return|return
name|readIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|stddev
argument_list|()
return|;
block|}
comment|// Based on writeIoRate
DECL|method|getWriteIoSampleCount ()
specifier|public
name|long
name|getWriteIoSampleCount
parameter_list|()
block|{
return|return
name|syncIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
DECL|method|getWriteIoMean ()
specifier|public
name|double
name|getWriteIoMean
parameter_list|()
block|{
return|return
name|syncIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
return|;
block|}
DECL|method|getWriteIoStdDev ()
specifier|public
name|double
name|getWriteIoStdDev
parameter_list|()
block|{
return|return
name|syncIoRate
operator|.
name|lastStat
argument_list|()
operator|.
name|stddev
argument_list|()
return|;
block|}
DECL|method|getTotalFileIoErrors ()
specifier|public
name|long
name|getTotalFileIoErrors
parameter_list|()
block|{
return|return
name|totalFileIoErrors
operator|.
name|value
argument_list|()
return|;
block|}
comment|// Based on fileIoErrorRate
DECL|method|getFileIoErrorSampleCount ()
specifier|public
name|long
name|getFileIoErrorSampleCount
parameter_list|()
block|{
return|return
name|fileIoErrorRate
operator|.
name|lastStat
argument_list|()
operator|.
name|numSamples
argument_list|()
return|;
block|}
DECL|method|getFileIoErrorMean ()
specifier|public
name|double
name|getFileIoErrorMean
parameter_list|()
block|{
return|return
name|fileIoErrorRate
operator|.
name|lastStat
argument_list|()
operator|.
name|mean
argument_list|()
return|;
block|}
DECL|method|getFileIoErrorStdDev ()
specifier|public
name|double
name|getFileIoErrorStdDev
parameter_list|()
block|{
return|return
name|fileIoErrorRate
operator|.
name|lastStat
argument_list|()
operator|.
name|stddev
argument_list|()
return|;
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|ms
specifier|private
specifier|final
name|MetricsSystem
name|ms
decl_stmt|;
DECL|method|DataNodeVolumeMetrics (final MetricsSystem metricsSystem, final String volumeName, final int[] intervals)
specifier|public
name|DataNodeVolumeMetrics
parameter_list|(
specifier|final
name|MetricsSystem
name|metricsSystem
parameter_list|,
specifier|final
name|String
name|volumeName
parameter_list|,
specifier|final
name|int
index|[]
name|intervals
parameter_list|)
block|{
name|this
operator|.
name|ms
operator|=
name|metricsSystem
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|volumeName
expr_stmt|;
specifier|final
name|int
name|len
init|=
name|intervals
operator|.
name|length
decl_stmt|;
name|metadataOperationLatencyQuantiles
operator|=
operator|new
name|MutableQuantiles
index|[
name|len
index|]
expr_stmt|;
name|dataFileIoLatencyQuantiles
operator|=
operator|new
name|MutableQuantiles
index|[
name|len
index|]
expr_stmt|;
name|flushIoLatencyQuantiles
operator|=
operator|new
name|MutableQuantiles
index|[
name|len
index|]
expr_stmt|;
name|syncIoLatencyQuantiles
operator|=
operator|new
name|MutableQuantiles
index|[
name|len
index|]
expr_stmt|;
name|readIoLatencyQuantiles
operator|=
operator|new
name|MutableQuantiles
index|[
name|len
index|]
expr_stmt|;
name|writeIoLatencyQuantiles
operator|=
operator|new
name|MutableQuantiles
index|[
name|len
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|interval
init|=
name|intervals
index|[
name|i
index|]
decl_stmt|;
name|metadataOperationLatencyQuantiles
index|[
name|i
index|]
operator|=
name|registry
operator|.
name|newQuantiles
argument_list|(
literal|"metadataOperationLatency"
operator|+
name|interval
operator|+
literal|"s"
argument_list|,
literal|"Meatadata Operation Latency in ms"
argument_list|,
literal|"ops"
argument_list|,
literal|"latency"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|dataFileIoLatencyQuantiles
index|[
name|i
index|]
operator|=
name|registry
operator|.
name|newQuantiles
argument_list|(
literal|"dataFileIoLatency"
operator|+
name|interval
operator|+
literal|"s"
argument_list|,
literal|"Data File Io Latency in ms"
argument_list|,
literal|"ops"
argument_list|,
literal|"latency"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|flushIoLatencyQuantiles
index|[
name|i
index|]
operator|=
name|registry
operator|.
name|newQuantiles
argument_list|(
literal|"flushIoLatency"
operator|+
name|interval
operator|+
literal|"s"
argument_list|,
literal|"Data flush Io Latency in ms"
argument_list|,
literal|"ops"
argument_list|,
literal|"latency"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|syncIoLatencyQuantiles
index|[
name|i
index|]
operator|=
name|registry
operator|.
name|newQuantiles
argument_list|(
literal|"syncIoLatency"
operator|+
name|interval
operator|+
literal|"s"
argument_list|,
literal|"Data sync Io Latency in ms"
argument_list|,
literal|"ops"
argument_list|,
literal|"latency"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|readIoLatencyQuantiles
index|[
name|i
index|]
operator|=
name|registry
operator|.
name|newQuantiles
argument_list|(
literal|"readIoLatency"
operator|+
name|interval
operator|+
literal|"s"
argument_list|,
literal|"Data read Io Latency in ms"
argument_list|,
literal|"ops"
argument_list|,
literal|"latency"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|writeIoLatencyQuantiles
index|[
name|i
index|]
operator|=
name|registry
operator|.
name|newQuantiles
argument_list|(
literal|"writeIoLatency"
operator|+
name|interval
operator|+
literal|"s"
argument_list|,
literal|"Data write Io Latency in ms"
argument_list|,
literal|"ops"
argument_list|,
literal|"latency"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|create (final Configuration conf, final String volumeName)
specifier|public
specifier|static
name|DataNodeVolumeMetrics
name|create
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|volumeName
parameter_list|)
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|"DataNodeVolume-"
operator|+
operator|(
name|volumeName
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"UndefinedDataNodeVolume"
operator|+
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|()
else|:
name|volumeName
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'-'
argument_list|)
operator|)
decl_stmt|;
comment|// Percentile measurement is off by default, by watching no intervals
name|int
index|[]
name|intervals
init|=
name|conf
operator|.
name|getInts
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_METRICS_PERCENTILES_INTERVALS_KEY
argument_list|)
decl_stmt|;
return|return
name|ms
operator|.
name|register
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
operator|new
name|DataNodeVolumeMetrics
argument_list|(
name|ms
argument_list|,
name|name
argument_list|,
name|intervals
argument_list|)
argument_list|)
return|;
block|}
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|unRegister ()
specifier|public
name|void
name|unRegister
parameter_list|()
block|{
name|ms
operator|.
name|unregisterSource
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|addMetadastaOperationLatency (final long latency)
specifier|public
name|void
name|addMetadastaOperationLatency
parameter_list|(
specifier|final
name|long
name|latency
parameter_list|)
block|{
name|totalMetadataOperations
operator|.
name|incr
argument_list|()
expr_stmt|;
name|metadataOperationRate
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
for|for
control|(
name|MutableQuantiles
name|q
range|:
name|metadataOperationLatencyQuantiles
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addDataFileIoLatency (final long latency)
specifier|public
name|void
name|addDataFileIoLatency
parameter_list|(
specifier|final
name|long
name|latency
parameter_list|)
block|{
name|totalDataFileIos
operator|.
name|incr
argument_list|()
expr_stmt|;
name|dataFileIoRate
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
for|for
control|(
name|MutableQuantiles
name|q
range|:
name|dataFileIoLatencyQuantiles
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addSyncIoLatency (final long latency)
specifier|public
name|void
name|addSyncIoLatency
parameter_list|(
specifier|final
name|long
name|latency
parameter_list|)
block|{
name|syncIoRate
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
for|for
control|(
name|MutableQuantiles
name|q
range|:
name|syncIoLatencyQuantiles
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addFlushIoLatency (final long latency)
specifier|public
name|void
name|addFlushIoLatency
parameter_list|(
specifier|final
name|long
name|latency
parameter_list|)
block|{
name|flushIoRate
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
for|for
control|(
name|MutableQuantiles
name|q
range|:
name|flushIoLatencyQuantiles
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addReadIoLatency (final long latency)
specifier|public
name|void
name|addReadIoLatency
parameter_list|(
specifier|final
name|long
name|latency
parameter_list|)
block|{
name|readIoRate
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
for|for
control|(
name|MutableQuantiles
name|q
range|:
name|readIoLatencyQuantiles
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addWriteIoLatency (final long latency)
specifier|public
name|void
name|addWriteIoLatency
parameter_list|(
specifier|final
name|long
name|latency
parameter_list|)
block|{
name|writeIoRate
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
for|for
control|(
name|MutableQuantiles
name|q
range|:
name|writeIoLatencyQuantiles
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addFileIoError (final long latency)
specifier|public
name|void
name|addFileIoError
parameter_list|(
specifier|final
name|long
name|latency
parameter_list|)
block|{
name|totalFileIoErrors
operator|.
name|incr
argument_list|()
expr_stmt|;
name|metadataOperationRate
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

