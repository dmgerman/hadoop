begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.node
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This class represents the SCM node stat.  */
end_comment

begin_class
DECL|class|SCMNodeStat
specifier|public
specifier|final
class|class
name|SCMNodeStat
implements|implements
name|NodeStat
block|{
DECL|field|capacity
specifier|private
name|long
name|capacity
decl_stmt|;
DECL|field|scmUsed
specifier|private
name|long
name|scmUsed
decl_stmt|;
DECL|field|remaining
specifier|private
name|long
name|remaining
decl_stmt|;
DECL|method|SCMNodeStat ()
specifier|public
name|SCMNodeStat
parameter_list|()
block|{   }
DECL|method|SCMNodeStat (final SCMNodeStat other)
specifier|public
name|SCMNodeStat
parameter_list|(
specifier|final
name|SCMNodeStat
name|other
parameter_list|)
block|{
name|set
argument_list|(
name|other
operator|.
name|capacity
argument_list|,
name|other
operator|.
name|scmUsed
argument_list|,
name|other
operator|.
name|remaining
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the total configured capacity of the node.    */
annotation|@
name|Override
DECL|method|getCapacity ()
specifier|public
name|long
name|getCapacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
comment|/**    * @return the total SCM used space on the node.    */
annotation|@
name|Override
DECL|method|getScmUsed ()
specifier|public
name|long
name|getScmUsed
parameter_list|()
block|{
return|return
name|scmUsed
return|;
block|}
comment|/**    * @return the total remaining space available on the node.    */
annotation|@
name|Override
DECL|method|getRemaining ()
specifier|public
name|long
name|getRemaining
parameter_list|()
block|{
return|return
name|remaining
return|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Override
DECL|method|set (final long total, final long used, final long remain)
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|long
name|total
parameter_list|,
specifier|final
name|long
name|used
parameter_list|,
specifier|final
name|long
name|remain
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|total
expr_stmt|;
name|this
operator|.
name|scmUsed
operator|=
name|used
expr_stmt|;
name|this
operator|.
name|remaining
operator|=
name|remain
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add (final NodeStat stat)
specifier|public
name|SCMNodeStat
name|add
parameter_list|(
specifier|final
name|NodeStat
name|stat
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|+=
name|stat
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|this
operator|.
name|scmUsed
operator|+=
name|stat
operator|.
name|getScmUsed
argument_list|()
expr_stmt|;
name|this
operator|.
name|remaining
operator|+=
name|stat
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|subtract (final NodeStat stat)
specifier|public
name|SCMNodeStat
name|subtract
parameter_list|(
specifier|final
name|NodeStat
name|stat
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|-=
name|stat
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|this
operator|.
name|scmUsed
operator|-=
name|stat
operator|.
name|getScmUsed
argument_list|()
expr_stmt|;
name|this
operator|.
name|remaining
operator|-=
name|stat
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|equals (final Object to)
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|to
parameter_list|)
block|{
return|return
name|this
operator|==
name|to
operator|||
operator|(
name|to
operator|instanceof
name|SCMNodeStat
operator|&&
name|capacity
operator|==
operator|(
operator|(
name|SCMNodeStat
operator|)
name|to
operator|)
operator|.
name|getCapacity
argument_list|()
operator|&&
name|scmUsed
operator|==
operator|(
operator|(
name|SCMNodeStat
operator|)
name|to
operator|)
operator|.
name|getScmUsed
argument_list|()
operator|&&
name|remaining
operator|==
operator|(
operator|(
name|SCMNodeStat
operator|)
name|to
operator|)
operator|.
name|getRemaining
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
assert|assert
literal|false
operator|:
literal|"hashCode not designed"
assert|;
return|return
literal|42
return|;
comment|// any arbitrary constant will do
block|}
block|}
end_class

end_unit

