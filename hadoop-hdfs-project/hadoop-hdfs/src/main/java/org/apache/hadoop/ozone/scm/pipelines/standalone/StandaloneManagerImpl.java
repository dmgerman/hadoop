begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.pipelines.standalone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|standalone
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
operator|.
name|placement
operator|.
name|algorithms
operator|.
name|ContainerPlacementPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|pipelines
operator|.
name|PipelineSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_comment
comment|/**  * Standalone Manager Impl to prove that pluggable interface  * works with current tests.  */
end_comment

begin_class
DECL|class|StandaloneManagerImpl
specifier|public
class|class
name|StandaloneManagerImpl
implements|implements
name|PipelineManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StandaloneManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|placementPolicy
specifier|private
specifier|final
name|ContainerPlacementPolicy
name|placementPolicy
decl_stmt|;
DECL|field|containerSize
specifier|private
specifier|final
name|long
name|containerSize
decl_stmt|;
comment|/**    * Constructor for Standalone Node Manager Impl.    * @param nodeManager - Node Manager.    * @param placementPolicy - Placement Policy    * @param containerSize - Container Size.    */
DECL|method|StandaloneManagerImpl (NodeManager nodeManager, ContainerPlacementPolicy placementPolicy, long containerSize)
specifier|public
name|StandaloneManagerImpl
parameter_list|(
name|NodeManager
name|nodeManager
parameter_list|,
name|ContainerPlacementPolicy
name|placementPolicy
parameter_list|,
name|long
name|containerSize
parameter_list|)
block|{
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|this
operator|.
name|placementPolicy
operator|=
name|placementPolicy
expr_stmt|;
name|this
operator|.
name|containerSize
operator|=
name|containerSize
expr_stmt|;
block|}
comment|/**    * This function is called by the Container Manager while allocating a new    * container. The client specifies what kind of replication pipeline is needed    * and based on the replication type in the request appropriate Interface is    * invoked.    *    * @param containerName Name of the container    * @param replicationFactor - Replication Factor    * @return a Pipeline.    */
annotation|@
name|Override
DECL|method|getPipeline (String containerName, OzoneProtos .ReplicationFactor replicationFactor)
specifier|public
name|Pipeline
name|getPipeline
parameter_list|(
name|String
name|containerName
parameter_list|,
name|OzoneProtos
operator|.
name|ReplicationFactor
name|replicationFactor
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|datanodes
init|=
name|placementPolicy
operator|.
name|chooseDatanodes
argument_list|(
name|replicationFactor
operator|.
name|getNumber
argument_list|()
argument_list|,
name|containerSize
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|PipelineSelector
operator|.
name|newPipelineFromNodes
argument_list|(
name|datanodes
argument_list|)
decl_stmt|;
name|String
name|pipelineName
init|=
literal|"SA-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|pipeline
operator|.
name|setContainerName
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|setPipelineName
argument_list|(
name|pipelineName
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|setFactor
argument_list|(
name|replicationFactor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating new standalone pipeline: {}"
argument_list|,
name|pipeline
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
comment|/**    * Creates a pipeline from a specified set of Nodes.    *    * @param pipelineID - Name of the pipeline    * @param datanodes - The list of datanodes that make this pipeline.    */
annotation|@
name|Override
DECL|method|createPipeline (String pipelineID, List<DatanodeID> datanodes)
specifier|public
name|void
name|createPipeline
parameter_list|(
name|String
name|pipelineID
parameter_list|,
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|datanodes
parameter_list|)
block|{
comment|//return newPipelineFromNodes(datanodes, pipelineID);
block|}
comment|/**    * Close the  pipeline with the given clusterId.    *    * @param pipelineID    */
annotation|@
name|Override
DECL|method|closePipeline (String pipelineID)
specifier|public
name|void
name|closePipeline
parameter_list|(
name|String
name|pipelineID
parameter_list|)
throws|throws
name|IOException
block|{    }
comment|/**    * list members in the pipeline .    *    * @param pipelineID    * @return the datanode    */
annotation|@
name|Override
DECL|method|getMembers (String pipelineID)
specifier|public
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|getMembers
parameter_list|(
name|String
name|pipelineID
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Update the datanode list of the pipeline.    *    * @param pipelineID    * @param newDatanodes    */
annotation|@
name|Override
DECL|method|updatePipeline (String pipelineID, List<DatanodeID> newDatanodes)
specifier|public
name|void
name|updatePipeline
parameter_list|(
name|String
name|pipelineID
parameter_list|,
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|newDatanodes
parameter_list|)
throws|throws
name|IOException
block|{    }
block|}
end_class

end_unit

