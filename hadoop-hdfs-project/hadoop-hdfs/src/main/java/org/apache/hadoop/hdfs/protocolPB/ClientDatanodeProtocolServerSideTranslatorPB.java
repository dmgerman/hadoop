begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockLocalPathInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|DeleteBlockPoolRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|DeleteBlockPoolResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|GetBlockLocalPathInfoRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|GetBlockLocalPathInfoResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|GetReplicaVisibleLengthRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|GetReplicaVisibleLengthResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|RefreshNamenodesRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientDatanodeProtocolProtos
operator|.
name|RefreshNamenodesResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ProtocolSignatureWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|VersionedProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Implementation for protobuf service that forwards requests  * received on {@link ClientDatanodeProtocolPB} to the  * {@link ClientDatanodeProtocol} server implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ClientDatanodeProtocolServerSideTranslatorPB
specifier|public
class|class
name|ClientDatanodeProtocolServerSideTranslatorPB
implements|implements
name|ClientDatanodeProtocolPB
block|{
DECL|field|REFRESH_NAMENODE_RESP
specifier|private
specifier|final
specifier|static
name|RefreshNamenodesResponseProto
name|REFRESH_NAMENODE_RESP
init|=
name|RefreshNamenodesResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|DELETE_BLOCKPOOL_RESP
specifier|private
specifier|final
specifier|static
name|DeleteBlockPoolResponseProto
name|DELETE_BLOCKPOOL_RESP
init|=
name|DeleteBlockPoolResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|impl
specifier|private
specifier|final
name|ClientDatanodeProtocol
name|impl
decl_stmt|;
DECL|method|ClientDatanodeProtocolServerSideTranslatorPB ( ClientDatanodeProtocol impl)
specifier|public
name|ClientDatanodeProtocolServerSideTranslatorPB
parameter_list|(
name|ClientDatanodeProtocol
name|impl
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReplicaVisibleLength ( RpcController unused, GetReplicaVisibleLengthRequestProto request)
specifier|public
name|GetReplicaVisibleLengthResponseProto
name|getReplicaVisibleLength
parameter_list|(
name|RpcController
name|unused
parameter_list|,
name|GetReplicaVisibleLengthRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|long
name|len
decl_stmt|;
try|try
block|{
name|len
operator|=
name|impl
operator|.
name|getReplicaVisibleLength
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|GetReplicaVisibleLengthResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLength
argument_list|(
name|len
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|refreshNamenode ( RpcController unused, RefreshNamenodesRequestProto request)
specifier|public
name|RefreshNamenodesResponseProto
name|refreshNamenode
parameter_list|(
name|RpcController
name|unused
parameter_list|,
name|RefreshNamenodesRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|refreshNamenodes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|REFRESH_NAMENODE_RESP
return|;
block|}
annotation|@
name|Override
DECL|method|deleteBlockPool (RpcController unused, DeleteBlockPoolRequestProto request)
specifier|public
name|DeleteBlockPoolResponseProto
name|deleteBlockPool
parameter_list|(
name|RpcController
name|unused
parameter_list|,
name|DeleteBlockPoolRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|impl
operator|.
name|deleteBlockPool
argument_list|(
name|request
operator|.
name|getBlockPool
argument_list|()
argument_list|,
name|request
operator|.
name|getForce
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|DELETE_BLOCKPOOL_RESP
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockLocalPathInfo ( RpcController unused, GetBlockLocalPathInfoRequestProto request)
specifier|public
name|GetBlockLocalPathInfoResponseProto
name|getBlockLocalPathInfo
parameter_list|(
name|RpcController
name|unused
parameter_list|,
name|GetBlockLocalPathInfoRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|BlockLocalPathInfo
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|impl
operator|.
name|getBlockLocalPathInfo
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|GetBlockLocalPathInfoResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlock
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|resp
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setLocalPath
argument_list|(
name|resp
operator|.
name|getBlockPath
argument_list|()
argument_list|)
operator|.
name|setLocalMetaPath
argument_list|(
name|resp
operator|.
name|getMetaPath
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|ClientDatanodeProtocolPB
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * The client side will redirect getProtocolSignature to    * getProtocolSignature2.    *     * However the RPC layer below on the Server side will call getProtocolVersion    * and possibly in the future getProtocolSignature. Hence we still implement    * it even though the end client will never call this method.    *     * @see VersionedProtocol#getProtocolVersion    */
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Don't forward this to the server. The protocol version and signature is      * that of {@link ClientDatanodeProtocol}      */
if|if
condition|(
operator|!
name|protocol
operator|.
name|equals
argument_list|(
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|ClientDatanodeProtocol
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Namenode Serverside implements "
operator|+
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|ClientDatanodeProtocol
operator|.
name|class
argument_list|)
operator|+
literal|". The following requested protocol is unknown: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|clientMethodsHash
argument_list|,
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|ClientDatanodeProtocolPB
operator|.
name|class
argument_list|)
argument_list|,
name|ClientDatanodeProtocolPB
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature2 (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignatureWritable
name|getProtocolSignature2
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Don't forward this to the server. The protocol version and signature is      * that of {@link ClientDatanodeProtocol}      */
return|return
name|ProtocolSignatureWritable
operator|.
name|convert
argument_list|(
name|this
operator|.
name|getProtocolSignature
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

