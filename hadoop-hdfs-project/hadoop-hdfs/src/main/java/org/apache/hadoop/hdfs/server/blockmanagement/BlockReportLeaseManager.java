begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_comment
comment|/**  * The BlockReportLeaseManager manages block report leases.<p/>  *  * DataNodes request BR leases from the NameNode by sending a heartbeat with  * the requestBlockReportLease field set.  The NameNode may choose to respond  * with a non-zero lease ID.  If so, that DataNode can send a block report with  * the given lease ID for the next few minutes.  The NameNode will accept  * these full block reports.<p/>  *  * BR leases limit the number of incoming full block reports to the NameNode  * at any given time.  For compatibility reasons, the NN will always accept  * block reports sent with a lease ID of 0 and queue them for processing  * immediately.  Full block reports which were manually triggered will also  * have a lease ID of 0, bypassing the rate-limiting.<p/>  *  * Block report leases expire after a certain amount of time.  This mechanism  * is in place so that a DN which dies while holding a lease does not  * permanently decrease the number of concurrent block reports which the NN is  * willing to accept.<p/>  *  * When considering which DNs to grant a BR lease, the NameNode gives priority  * to the DNs which have gone the longest without sending a full block  * report.<p/>  */
end_comment

begin_class
DECL|class|BlockReportLeaseManager
class|class
name|BlockReportLeaseManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockReportLeaseManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|NodeData
specifier|private
specifier|static
class|class
name|NodeData
block|{
comment|/**      * The UUID of the datanode.      */
DECL|field|datanodeUuid
specifier|final
name|String
name|datanodeUuid
decl_stmt|;
comment|/**      * The lease ID, or 0 if there is no lease.      */
DECL|field|leaseId
name|long
name|leaseId
decl_stmt|;
comment|/**      * The time when the lease was issued, or 0 if there is no lease.      */
DECL|field|leaseTimeMs
name|long
name|leaseTimeMs
decl_stmt|;
comment|/**      * Previous element in the list.      */
DECL|field|prev
name|NodeData
name|prev
decl_stmt|;
comment|/**      * Next element in the list.      */
DECL|field|next
name|NodeData
name|next
decl_stmt|;
DECL|method|ListHead (String name)
specifier|static
name|NodeData
name|ListHead
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeData
name|node
init|=
operator|new
name|NodeData
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|node
operator|.
name|next
operator|=
name|node
expr_stmt|;
name|node
operator|.
name|prev
operator|=
name|node
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|NodeData (String datanodeUuid)
name|NodeData
parameter_list|(
name|String
name|datanodeUuid
parameter_list|)
block|{
name|this
operator|.
name|datanodeUuid
operator|=
name|datanodeUuid
expr_stmt|;
block|}
DECL|method|removeSelf ()
name|void
name|removeSelf
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|prev
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|prev
operator|.
name|next
operator|=
name|this
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|next
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|next
operator|.
name|prev
operator|=
name|this
operator|.
name|prev
expr_stmt|;
block|}
name|this
operator|.
name|next
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|prev
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|addToEnd (NodeData node)
name|void
name|addToEnd
parameter_list|(
name|NodeData
name|node
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|node
operator|.
name|next
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|node
operator|.
name|prev
operator|==
literal|null
argument_list|)
expr_stmt|;
name|node
operator|.
name|prev
operator|=
name|this
operator|.
name|prev
expr_stmt|;
name|node
operator|.
name|next
operator|=
name|this
expr_stmt|;
name|this
operator|.
name|prev
operator|.
name|next
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|prev
operator|=
name|node
expr_stmt|;
block|}
DECL|method|addToBeginning (NodeData node)
name|void
name|addToBeginning
parameter_list|(
name|NodeData
name|node
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|node
operator|.
name|next
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|node
operator|.
name|prev
operator|==
literal|null
argument_list|)
expr_stmt|;
name|node
operator|.
name|next
operator|=
name|this
operator|.
name|next
expr_stmt|;
name|node
operator|.
name|prev
operator|=
name|this
expr_stmt|;
name|this
operator|.
name|next
operator|.
name|prev
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|node
expr_stmt|;
block|}
block|}
comment|/**    * List of datanodes which don't currently have block report leases.    */
DECL|field|deferredHead
specifier|private
specifier|final
name|NodeData
name|deferredHead
init|=
name|NodeData
operator|.
name|ListHead
argument_list|(
literal|"deferredHead"
argument_list|)
decl_stmt|;
comment|/**    * List of datanodes which currently have block report leases.    */
DECL|field|pendingHead
specifier|private
specifier|final
name|NodeData
name|pendingHead
init|=
name|NodeData
operator|.
name|ListHead
argument_list|(
literal|"pendingHead"
argument_list|)
decl_stmt|;
comment|/**    * Maps datanode UUIDs to NodeData.    */
DECL|field|nodes
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeData
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * The current length of the pending list.    */
DECL|field|numPending
specifier|private
name|int
name|numPending
init|=
literal|0
decl_stmt|;
comment|/**    * The maximum number of leases to hand out at any given time.    */
DECL|field|maxPending
specifier|private
specifier|final
name|int
name|maxPending
decl_stmt|;
comment|/**    * The number of milliseconds after which a lease will expire.    */
DECL|field|leaseExpiryMs
specifier|private
specifier|final
name|long
name|leaseExpiryMs
decl_stmt|;
comment|/**    * The next ID we will use for a block report lease.    */
DECL|field|nextId
specifier|private
name|long
name|nextId
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
DECL|method|BlockReportLeaseManager (Configuration conf)
name|BlockReportLeaseManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_FULL_BLOCK_REPORT_LEASES
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_FULL_BLOCK_REPORT_LEASES_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_FULL_BLOCK_REPORT_LEASE_LENGTH_MS
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_FULL_BLOCK_REPORT_LEASE_LENGTH_MS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockReportLeaseManager (int maxPending, long leaseExpiryMs)
name|BlockReportLeaseManager
parameter_list|(
name|int
name|maxPending
parameter_list|,
name|long
name|leaseExpiryMs
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|maxPending
operator|>=
literal|1
argument_list|,
literal|"Cannot set the maximum number of block report leases to a "
operator|+
literal|"value less than 1."
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxPending
operator|=
name|maxPending
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|leaseExpiryMs
operator|>=
literal|1
argument_list|,
literal|"Cannot set full block report lease expiry period to a value "
operator|+
literal|"less than 1."
argument_list|)
expr_stmt|;
name|this
operator|.
name|leaseExpiryMs
operator|=
name|leaseExpiryMs
expr_stmt|;
block|}
comment|/**    * Get the next block report lease ID.  Any number is valid except 0.    */
DECL|method|getNextId ()
specifier|private
specifier|synchronized
name|long
name|getNextId
parameter_list|()
block|{
name|long
name|id
decl_stmt|;
do|do
block|{
name|id
operator|=
name|nextId
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|id
operator|==
literal|0
condition|)
do|;
return|return
name|id
return|;
block|}
DECL|method|register (DatanodeDescriptor dn)
specifier|public
specifier|synchronized
name|void
name|register
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|registerNode
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
DECL|method|registerNode (DatanodeDescriptor dn)
specifier|private
specifier|synchronized
name|NodeData
name|registerNode
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
if|if
condition|(
name|nodes
operator|.
name|containsKey
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't register DN {} because it is already registered."
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|NodeData
name|node
init|=
operator|new
name|NodeData
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
name|deferredHead
operator|.
name|addToBeginning
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered DN {} ({})."
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|dn
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|remove (NodeData node)
specifier|private
specifier|synchronized
name|void
name|remove
parameter_list|(
name|NodeData
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|leaseId
operator|!=
literal|0
condition|)
block|{
name|numPending
operator|--
expr_stmt|;
name|node
operator|.
name|leaseId
operator|=
literal|0
expr_stmt|;
name|node
operator|.
name|leaseTimeMs
operator|=
literal|0
expr_stmt|;
block|}
name|node
operator|.
name|removeSelf
argument_list|()
expr_stmt|;
block|}
DECL|method|unregister (DatanodeDescriptor dn)
specifier|public
specifier|synchronized
name|void
name|unregister
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|NodeData
name|node
init|=
name|nodes
operator|.
name|remove
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't unregister DN {} because it is not currently "
operator|+
literal|"registered."
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|requestLease (DatanodeDescriptor dn)
specifier|public
specifier|synchronized
name|long
name|requestLease
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|NodeData
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DN {} ({}) requested a lease even though it wasn't yet "
operator|+
literal|"registered.  Registering now."
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|dn
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|registerNode
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|leaseId
operator|!=
literal|0
condition|)
block|{
comment|// The DataNode wants a new lease, even though it already has one.
comment|// This can happen if the DataNode is restarted in between requesting
comment|// a lease and using it.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing existing BR lease 0x{} for DN {} in order to "
operator|+
literal|"issue a new one."
argument_list|,
name|Long
operator|.
name|toHexString
argument_list|(
name|node
operator|.
name|leaseId
argument_list|)
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|long
name|monotonicNowMs
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|pruneExpiredPending
argument_list|(
name|monotonicNowMs
argument_list|)
expr_stmt|;
if|if
condition|(
name|numPending
operator|>=
name|maxPending
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|allLeases
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|NodeData
name|cur
init|=
name|pendingHead
operator|.
name|next
init|;
name|cur
operator|!=
name|pendingHead
condition|;
name|cur
operator|=
name|cur
operator|.
name|next
control|)
block|{
name|allLeases
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
name|cur
operator|.
name|datanodeUuid
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|", "
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can't create a new BR lease for DN {}, because "
operator|+
literal|"numPending equals maxPending at {}.  Current leases: {}"
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|numPending
argument_list|,
name|allLeases
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
name|numPending
operator|++
expr_stmt|;
name|node
operator|.
name|leaseId
operator|=
name|getNextId
argument_list|()
expr_stmt|;
name|node
operator|.
name|leaseTimeMs
operator|=
name|monotonicNowMs
expr_stmt|;
name|pendingHead
operator|.
name|addToEnd
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created a new BR lease 0x{} for DN {}.  numPending = {}"
argument_list|,
name|Long
operator|.
name|toHexString
argument_list|(
name|node
operator|.
name|leaseId
argument_list|)
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|numPending
argument_list|)
expr_stmt|;
block|}
return|return
name|node
operator|.
name|leaseId
return|;
block|}
DECL|method|pruneIfExpired (long monotonicNowMs, NodeData node)
specifier|private
specifier|synchronized
name|boolean
name|pruneIfExpired
parameter_list|(
name|long
name|monotonicNowMs
parameter_list|,
name|NodeData
name|node
parameter_list|)
block|{
if|if
condition|(
name|monotonicNowMs
operator|<
name|node
operator|.
name|leaseTimeMs
operator|+
name|leaseExpiryMs
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing expired block report lease 0x{} for DN {}."
argument_list|,
name|Long
operator|.
name|toHexString
argument_list|(
name|node
operator|.
name|leaseId
argument_list|)
argument_list|,
name|node
operator|.
name|datanodeUuid
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|node
operator|.
name|leaseId
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|deferredHead
operator|.
name|addToBeginning
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|pruneExpiredPending (long monotonicNowMs)
specifier|private
specifier|synchronized
name|void
name|pruneExpiredPending
parameter_list|(
name|long
name|monotonicNowMs
parameter_list|)
block|{
name|NodeData
name|cur
init|=
name|pendingHead
operator|.
name|next
decl_stmt|;
while|while
condition|(
name|cur
operator|!=
name|pendingHead
condition|)
block|{
name|NodeData
name|next
init|=
name|cur
operator|.
name|next
decl_stmt|;
if|if
condition|(
operator|!
name|pruneIfExpired
argument_list|(
name|monotonicNowMs
argument_list|,
name|cur
argument_list|)
condition|)
block|{
return|return;
block|}
name|cur
operator|=
name|next
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"No entries remaining in the pending list."
argument_list|)
expr_stmt|;
block|}
DECL|method|checkLease (DatanodeDescriptor dn, long monotonicNowMs, long id)
specifier|public
specifier|synchronized
name|boolean
name|checkLease
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|long
name|monotonicNowMs
parameter_list|,
name|long
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Datanode {} is using BR lease id 0x0 to bypass "
operator|+
literal|"rate-limiting."
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|NodeData
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"BR lease 0x{} is not valid for unknown datanode {}"
argument_list|,
name|Long
operator|.
name|toHexString
argument_list|(
name|id
argument_list|)
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|node
operator|.
name|leaseId
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"BR lease 0x{} is not valid for DN {}, because the DN "
operator|+
literal|"is not in the pending set."
argument_list|,
name|Long
operator|.
name|toHexString
argument_list|(
name|id
argument_list|)
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|pruneIfExpired
argument_list|(
name|monotonicNowMs
argument_list|,
name|node
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"BR lease 0x{} is not valid for DN {}, because the lease "
operator|+
literal|"has expired."
argument_list|,
name|Long
operator|.
name|toHexString
argument_list|(
name|id
argument_list|)
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|id
operator|!=
name|node
operator|.
name|leaseId
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"BR lease 0x{} is not valid for DN {}.  Expected BR lease 0x{}."
argument_list|,
name|Long
operator|.
name|toHexString
argument_list|(
name|id
argument_list|)
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|Long
operator|.
name|toHexString
argument_list|(
name|node
operator|.
name|leaseId
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"BR lease 0x{} is valid for DN {}."
argument_list|,
name|Long
operator|.
name|toHexString
argument_list|(
name|id
argument_list|)
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|removeLease (DatanodeDescriptor dn)
specifier|public
specifier|synchronized
name|long
name|removeLease
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|NodeData
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't remove lease for unknown datanode {}"
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|long
name|id
init|=
name|node
operator|.
name|leaseId
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"DN {} has no lease to remove."
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|deferredHead
operator|.
name|addToEnd
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removed BR lease 0x{} for DN {}.  numPending = {}"
argument_list|,
name|Long
operator|.
name|toHexString
argument_list|(
name|id
argument_list|)
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|numPending
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

