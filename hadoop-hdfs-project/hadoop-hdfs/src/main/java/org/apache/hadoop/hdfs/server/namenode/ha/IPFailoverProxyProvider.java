begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * A NNFailoverProxyProvider implementation which works on IP failover setup.  * Only one proxy is used to connect to both servers and switching between  * the servers is done by the environment/infrastructure, which guarantees  * clients can consistently reach only one node at a time.  *  * Clients with a live connection will likely get connection reset after an  * IP failover. This case will be handled by the   * FailoverOnNetworkExceptionRetry retry policy. I.e. if the call is  * not idempotent, it won't get retried.  *  * A connection reset while setting up a connection (i.e. before sending a  * request) will be handled in ipc client.  *  * The namenode URI must contain a resolvable host name.  */
end_comment

begin_class
DECL|class|IPFailoverProxyProvider
specifier|public
class|class
name|IPFailoverProxyProvider
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractNNFailoverProxyProvider
argument_list|<
name|T
argument_list|>
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|xface
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|xface
decl_stmt|;
DECL|field|nameNodeUri
specifier|private
specifier|final
name|URI
name|nameNodeUri
decl_stmt|;
DECL|field|nnProxyInfo
specifier|private
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|nnProxyInfo
init|=
literal|null
decl_stmt|;
DECL|method|IPFailoverProxyProvider (Configuration conf, URI uri, Class<T> xface)
specifier|public
name|IPFailoverProxyProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|xface
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|xface
operator|.
name|isAssignableFrom
argument_list|(
name|NamenodeProtocols
operator|.
name|class
argument_list|)
argument_list|,
literal|"Interface class %s is not a valid NameNode protocol!"
argument_list|)
expr_stmt|;
name|this
operator|.
name|xface
operator|=
name|xface
expr_stmt|;
name|this
operator|.
name|nameNodeUri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|maxRetries
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|CONNECTION_RETRIES_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|CONNECTION_RETRIES_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
name|int
name|maxRetriesOnSocketTimeouts
init|=
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|CONNECTION_RETRIES_ON_SOCKET_TIMEOUTS_KEY
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|Failover
operator|.
name|CONNECTION_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY
argument_list|,
name|maxRetriesOnSocketTimeouts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInterface ()
specifier|public
name|Class
argument_list|<
name|T
argument_list|>
name|getInterface
parameter_list|()
block|{
return|return
name|xface
return|;
block|}
annotation|@
name|Override
DECL|method|getProxy ()
specifier|public
specifier|synchronized
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|getProxy
parameter_list|()
block|{
comment|// Create a non-ha proxy if not already created.
if|if
condition|(
name|nnProxyInfo
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// Create a proxy that is not wrapped in RetryProxy
name|InetSocketAddress
name|nnAddr
init|=
name|NameNode
operator|.
name|getAddress
argument_list|(
name|nameNodeUri
argument_list|)
decl_stmt|;
name|nnProxyInfo
operator|=
operator|new
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|(
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddr
argument_list|,
name|xface
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getProxy
argument_list|()
argument_list|,
name|nnAddr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
return|return
name|nnProxyInfo
return|;
block|}
comment|/** Nothing to do for IP failover */
annotation|@
name|Override
DECL|method|performFailover (T currentProxy)
specifier|public
name|void
name|performFailover
parameter_list|(
name|T
name|currentProxy
parameter_list|)
block|{   }
comment|/**    * Close the proxy,    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nnProxyInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nnProxyInfo
operator|.
name|proxy
operator|instanceof
name|Closeable
condition|)
block|{
operator|(
operator|(
name|Closeable
operator|)
name|nnProxyInfo
operator|.
name|proxy
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|nnProxyInfo
operator|.
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Logical URI is not used for IP failover.    */
annotation|@
name|Override
DECL|method|useLogicalURI ()
specifier|public
name|boolean
name|useLogicalURI
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

