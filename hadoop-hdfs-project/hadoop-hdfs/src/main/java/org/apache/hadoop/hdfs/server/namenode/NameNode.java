begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Trash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|NameNodeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**********************************************************  * NameNode serves as both directory namespace manager and  * "inode table" for the Hadoop DFS.  There is a single NameNode  * running in any DFS deployment.  (Well, except when there  * is a second backup/failover NameNode, or when using federated NameNodes.)  *  * The NameNode controls two critical tables:  *   1)  filename->blocksequence (namespace)  *   2)  block->machinelist ("inodes")  *  * The first table is stored on disk and is very precious.  * The second table is rebuilt every time the NameNode comes up.  *  * 'NameNode' refers to both this class as well as the 'NameNode server'.  * The 'FSNamesystem' class actually performs most of the filesystem  * management.  The majority of the 'NameNode' class itself is concerned  * with exposing the IPC interface and the HTTP server to the outside world,  * plus some configuration management.  *  * NameNode implements the  * {@link org.apache.hadoop.hdfs.protocol.ClientProtocol} interface, which  * allows clients to ask for DFS services.  * {@link org.apache.hadoop.hdfs.protocol.ClientProtocol} is not designed for  * direct use by authors of DFS client code.  End-users should instead use the  * {@link org.apache.hadoop.fs.FileSystem} class.  *  * NameNode also implements the  * {@link org.apache.hadoop.hdfs.server.protocol.DatanodeProtocol} interface,  * used by DataNodes that actually store DFS data blocks.  These  * methods are invoked repeatedly and automatically by all the  * DataNodes in a DFS deployment.  *  * NameNode also implements the  * {@link org.apache.hadoop.hdfs.server.protocol.NamenodeProtocol} interface,  * used by secondary namenodes or rebalancing processes to get partial  * NameNode state, for example partial blocksMap etc.  **********************************************************/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|NameNode
specifier|public
class|class
name|NameNode
block|{
static|static
block|{
name|HdfsConfiguration
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**    * HDFS federation configuration can have two types of parameters:    *<ol>    *<li>Parameter that is common for all the name services in the cluster.</li>    *<li>Parameters that are specific to a name service. This keys are suffixed    * with nameserviceId in the configuration. For example,    * "dfs.namenode.rpc-address.nameservice1".</li>    *</ol>    *     * Following are nameservice specific keys.    */
DECL|field|NAMESERVICE_SPECIFIC_KEYS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|NAMESERVICE_SPECIFIC_KEYS
init|=
block|{
name|DFS_NAMENODE_RPC_ADDRESS_KEY
block|,
name|DFS_NAMENODE_NAME_DIR_KEY
block|,
name|DFS_NAMENODE_EDITS_DIR_KEY
block|,
name|DFS_NAMENODE_CHECKPOINT_DIR_KEY
block|,
name|DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY
block|,
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
block|,
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
block|,
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
block|,
name|DFS_NAMENODE_KEYTAB_FILE_KEY
block|,
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
block|,
name|DFS_NAMENODE_SECONDARY_HTTPS_PORT_KEY
block|,
name|DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY
block|,
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
block|,
name|DFS_NAMENODE_BACKUP_HTTP_ADDRESS_KEY
block|,
name|DFS_NAMENODE_BACKUP_SERVICE_RPC_ADDRESS_KEY
block|}
decl_stmt|;
DECL|field|DEFAULT_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PORT
init|=
literal|8020
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NameNode
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|stateChangeLog
specifier|public
specifier|static
specifier|final
name|Log
name|stateChangeLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.StateChange"
argument_list|)
decl_stmt|;
DECL|field|namesystem
specifier|protected
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|role
specifier|protected
name|NamenodeRole
name|role
decl_stmt|;
comment|/** httpServer */
DECL|field|httpServer
specifier|protected
name|NameNodeHttpServer
name|httpServer
decl_stmt|;
DECL|field|emptier
specifier|private
name|Thread
name|emptier
decl_stmt|;
comment|/** only used for testing purposes  */
DECL|field|stopRequested
specifier|protected
name|boolean
name|stopRequested
init|=
literal|false
decl_stmt|;
comment|/** Registration information of this name-node  */
DECL|field|nodeRegistration
specifier|protected
name|NamenodeRegistration
name|nodeRegistration
decl_stmt|;
comment|/** Activated plug-ins. */
DECL|field|plugins
specifier|private
name|List
argument_list|<
name|ServicePlugin
argument_list|>
name|plugins
decl_stmt|;
DECL|field|rpcServer
specifier|private
name|NameNodeRpcServer
name|rpcServer
decl_stmt|;
comment|/** Format a new filesystem.  Destroys any filesystem that may already    * exist at this location.  **/
DECL|method|format (Configuration conf)
specifier|public
specifier|static
name|void
name|format
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|format
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|field|metrics
specifier|static
name|NameNodeMetrics
name|metrics
decl_stmt|;
comment|/** Return the {@link FSNamesystem} object.    * @return {@link FSNamesystem} object.    */
DECL|method|getNamesystem ()
specifier|public
name|FSNamesystem
name|getNamesystem
parameter_list|()
block|{
return|return
name|namesystem
return|;
block|}
DECL|method|getRpcServer ()
specifier|public
name|NamenodeProtocols
name|getRpcServer
parameter_list|()
block|{
return|return
name|rpcServer
return|;
block|}
DECL|method|initMetrics (Configuration conf, NamenodeRole role)
specifier|static
name|void
name|initMetrics
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NamenodeRole
name|role
parameter_list|)
block|{
name|metrics
operator|=
name|NameNodeMetrics
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
DECL|method|getNameNodeMetrics ()
specifier|public
specifier|static
name|NameNodeMetrics
name|getNameNodeMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
DECL|method|getAddress (String address)
specifier|public
specifier|static
name|InetSocketAddress
name|getAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|address
argument_list|,
name|DEFAULT_PORT
argument_list|)
return|;
block|}
comment|/**    * Set the configuration property for the service rpc address    * to address    */
DECL|method|setServiceAddress (Configuration conf, String address)
specifier|public
specifier|static
name|void
name|setServiceAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|address
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting ADDRESS "
operator|+
name|address
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fetches the address for services to use when connecting to namenode    * based on the value of fallback returns null if the special    * address is not specified or returns the default namenode address    * to be used by both clients and services.    * Services here are datanodes, backup node, any non client connection    */
DECL|method|getServiceAddress (Configuration conf, boolean fallback)
specifier|public
specifier|static
name|InetSocketAddress
name|getServiceAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|fallback
parameter_list|)
block|{
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
operator|||
name|addr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|fallback
condition|?
name|getAddress
argument_list|(
name|conf
argument_list|)
else|:
literal|null
return|;
block|}
return|return
name|getAddress
argument_list|(
name|addr
argument_list|)
return|;
block|}
DECL|method|getAddress (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|URI
name|filesystemURI
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|getAddress
argument_list|(
name|filesystemURI
argument_list|)
return|;
block|}
comment|/**    * TODO:FEDERATION    * @param filesystemURI    * @return address of file system    */
DECL|method|getAddress (URI filesystemURI)
specifier|static
name|InetSocketAddress
name|getAddress
parameter_list|(
name|URI
name|filesystemURI
parameter_list|)
block|{
name|String
name|authority
init|=
name|filesystemURI
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|authority
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid URI for NameNode address (check %s): %s has no authority."
argument_list|,
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|filesystemURI
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
operator|.
name|equalsIgnoreCase
argument_list|(
name|filesystemURI
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Invalid URI for NameNode address (check %s): %s is not of scheme '%s'."
argument_list|,
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|filesystemURI
operator|.
name|toString
argument_list|()
argument_list|,
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|getAddress
argument_list|(
name|authority
argument_list|)
return|;
block|}
DECL|method|getUri (InetSocketAddress namenode)
specifier|public
specifier|static
name|URI
name|getUri
parameter_list|(
name|InetSocketAddress
name|namenode
parameter_list|)
block|{
name|int
name|port
init|=
name|namenode
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|String
name|portString
init|=
name|port
operator|==
name|DEFAULT_PORT
condition|?
literal|""
else|:
operator|(
literal|":"
operator|+
name|port
operator|)
decl_stmt|;
return|return
name|URI
operator|.
name|create
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
operator|+
literal|"://"
operator|+
name|namenode
operator|.
name|getHostName
argument_list|()
operator|+
name|portString
argument_list|)
return|;
block|}
comment|//
comment|// Common NameNode methods implementation for the active name-node role.
comment|//
DECL|method|getRole ()
specifier|public
name|NamenodeRole
name|getRole
parameter_list|()
block|{
return|return
name|role
return|;
block|}
DECL|method|isRole (NamenodeRole that)
name|boolean
name|isRole
parameter_list|(
name|NamenodeRole
name|that
parameter_list|)
block|{
return|return
name|role
operator|.
name|equals
argument_list|(
name|that
argument_list|)
return|;
block|}
comment|/**    * Given a configuration get the address of the service rpc server    * If the service rpc is not configured returns null    */
DECL|method|getServiceRpcServerAddress (Configuration conf)
specifier|protected
name|InetSocketAddress
name|getServiceRpcServerAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|NameNode
operator|.
name|getServiceAddress
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getRpcServerAddress (Configuration conf)
specifier|protected
name|InetSocketAddress
name|getRpcServerAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getAddress
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Modifies the configuration passed to contain the service rpc address setting    */
DECL|method|setRpcServiceServerAddress (Configuration conf, InetSocketAddress serviceRPCAddress)
specifier|protected
name|void
name|setRpcServiceServerAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|serviceRPCAddress
parameter_list|)
block|{
name|setServiceAddress
argument_list|(
name|conf
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|serviceRPCAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setRpcServerAddress (Configuration conf, InetSocketAddress rpcAddress)
specifier|protected
name|void
name|setRpcServerAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|rpcAddress
parameter_list|)
block|{
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|getUri
argument_list|(
name|rpcAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpServerAddress (Configuration conf)
specifier|protected
name|InetSocketAddress
name|getHttpServerAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getHttpAddress
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/** @return the NameNode HTTP address set in the conf. */
DECL|method|getHttpAddress (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getHttpAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_HTTP_ADDRESS_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setHttpServerAddress (Configuration conf)
specifier|protected
name|void
name|setHttpServerAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|getHttpAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|loadNamesystem (Configuration conf)
specifier|protected
name|void
name|loadNamesystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|namesystem
operator|=
name|FSNamesystem
operator|.
name|loadFromDisk
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getRegistration ()
name|NamenodeRegistration
name|getRegistration
parameter_list|()
block|{
return|return
name|nodeRegistration
return|;
block|}
DECL|method|setRegistration ()
name|NamenodeRegistration
name|setRegistration
parameter_list|()
block|{
name|nodeRegistration
operator|=
operator|new
name|NamenodeRegistration
argument_list|(
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|rpcServer
operator|.
name|getRpcAddress
argument_list|()
argument_list|)
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|getHttpAddress
argument_list|()
argument_list|)
argument_list|,
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
argument_list|,
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nodeRegistration
return|;
block|}
comment|/**    * Login as the configured user for the NameNode.    */
DECL|method|loginAsNameNodeUser (Configuration conf)
name|void
name|loginAsNameNodeUser
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|socAddr
init|=
name|getRpcServerAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|login
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_KEYTAB_FILE_KEY
argument_list|,
name|DFS_NAMENODE_USER_NAME_KEY
argument_list|,
name|socAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize name-node.    *     * @param conf the configuration    */
DECL|method|initialize (Configuration conf)
specifier|protected
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|loginAsNameNodeUser
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|initMetrics
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
name|loadNamesystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rpcServer
operator|=
name|createRpcServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|validateConfigurationSettings
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|activate
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getRole
argument_list|()
operator|+
literal|" up at: "
operator|+
name|rpcServer
operator|.
name|getRpcAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rpcServer
operator|.
name|getServiceRpcAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getRole
argument_list|()
operator|+
literal|" service server is up at: "
operator|+
name|rpcServer
operator|.
name|getServiceRpcAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create the RPC server implementation. Used as an extension point for the    * BackupNode.    */
DECL|method|createRpcServer (Configuration conf)
specifier|protected
name|NameNodeRpcServer
name|createRpcServer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|NameNodeRpcServer
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/**    * Verifies that the final Configuration Settings look ok for the NameNode to    * properly start up    * Things to check for include:    * - HTTP Server Port does not equal the RPC Server Port    * @param conf    * @throws IOException    */
DECL|method|validateConfigurationSettings (final Configuration conf)
specifier|protected
name|void
name|validateConfigurationSettings
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check to make sure the web port and rpc port do not match
if|if
condition|(
name|getHttpServerAddress
argument_list|(
name|conf
argument_list|)
operator|.
name|getPort
argument_list|()
operator|==
name|getRpcServerAddress
argument_list|(
name|conf
argument_list|)
operator|.
name|getPort
argument_list|()
condition|)
block|{
name|String
name|errMsg
init|=
literal|"dfs.namenode.rpc-address "
operator|+
literal|"("
operator|+
name|getRpcServerAddress
argument_list|(
name|conf
argument_list|)
operator|+
literal|") and "
operator|+
literal|"dfs.namenode.http-address ("
operator|+
name|getHttpServerAddress
argument_list|(
name|conf
argument_list|)
operator|+
literal|") "
operator|+
literal|"configuration keys are bound to the same port, unable to start "
operator|+
literal|"NameNode. Port: "
operator|+
name|getRpcServerAddress
argument_list|(
name|conf
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Activate name-node servers and threads.    */
DECL|method|activate (Configuration conf)
name|void
name|activate
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|isRole
argument_list|(
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
operator|)
operator|&&
operator|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|)
condition|)
block|{
name|namesystem
operator|.
name|activateSecretManager
argument_list|()
expr_stmt|;
block|}
name|namesystem
operator|.
name|activate
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|startHttpServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|startTrashEmptier
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|plugins
operator|=
name|conf
operator|.
name|getInstances
argument_list|(
name|DFS_NAMENODE_PLUGINS_KEY
argument_list|,
name|ServicePlugin
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|ServicePlugin
name|p
range|:
name|plugins
control|)
block|{
try|try
block|{
name|p
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ServicePlugin "
operator|+
name|p
operator|+
literal|" could not be started"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|startTrashEmptier (Configuration conf)
specifier|private
name|void
name|startTrashEmptier
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|trashInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_TRASH_INTERVAL_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|FS_TRASH_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|trashInterval
operator|==
literal|0
condition|)
return|return;
name|this
operator|.
name|emptier
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Trash
argument_list|(
name|conf
argument_list|)
operator|.
name|getEmptier
argument_list|()
argument_list|,
literal|"Trash Emptier"
argument_list|)
expr_stmt|;
name|this
operator|.
name|emptier
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|emptier
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|startHttpServer (final Configuration conf)
specifier|private
name|void
name|startHttpServer
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|httpServer
operator|=
operator|new
name|NameNodeHttpServer
argument_list|(
name|conf
argument_list|,
name|this
argument_list|,
name|getHttpServerAddress
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|setHttpServerAddress
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start NameNode.    *<p>    * The name-node can be started with one of the following startup options:    *<ul>     *<li>{@link StartupOption#REGULAR REGULAR} - normal name node startup</li>    *<li>{@link StartupOption#FORMAT FORMAT} - format name node</li>    *<li>{@link StartupOption#BACKUP BACKUP} - start backup node</li>    *<li>{@link StartupOption#CHECKPOINT CHECKPOINT} - start checkpoint node</li>    *<li>{@link StartupOption#UPGRADE UPGRADE} - start the cluster      * upgrade and create a snapshot of the current file system state</li>     *<li>{@link StartupOption#ROLLBACK ROLLBACK} - roll the      *            cluster back to the previous state</li>    *<li>{@link StartupOption#FINALIZE FINALIZE} - finalize     *            previous upgrade</li>    *<li>{@link StartupOption#IMPORT IMPORT} - import checkpoint</li>    *</ul>    * The option is passed via configuration field:     *<tt>dfs.namenode.startup</tt>    *     * The conf will be modified to reflect the actual ports on which     * the NameNode is up and running if the user passes the port as    *<code>zero</code> in the conf.    *     * @param conf  confirguration    * @throws IOException    */
DECL|method|NameNode (Configuration conf)
specifier|public
name|NameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
expr_stmt|;
block|}
DECL|method|NameNode (Configuration conf, NamenodeRole role)
specifier|protected
name|NameNode
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NamenodeRole
name|role
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
try|try
block|{
name|initializeGenericKeys
argument_list|(
name|conf
argument_list|,
name|getNameServiceId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|HadoopIllegalArgumentException
name|e
parameter_list|)
block|{
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Wait for service to finish.    * (Normally, it runs forever.)    */
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|rpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{     }
block|}
comment|/**    * Stop all NameNode threads and wait for all to finish.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|stopRequested
condition|)
return|return;
name|stopRequested
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|plugins
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServicePlugin
name|p
range|:
name|plugins
control|)
block|{
try|try
block|{
name|p
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ServicePlugin "
operator|+
name|p
operator|+
literal|" could not be stopped"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while stopping httpserver"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namesystem
operator|!=
literal|null
condition|)
name|namesystem
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|emptier
operator|!=
literal|null
condition|)
name|emptier
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|rpcServer
operator|!=
literal|null
condition|)
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|namesystem
operator|!=
literal|null
condition|)
block|{
name|namesystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isStopRequested ()
specifier|synchronized
name|boolean
name|isStopRequested
parameter_list|()
block|{
return|return
name|stopRequested
return|;
block|}
comment|/**    * Is the cluster currently in safe mode?    */
DECL|method|isInSafeMode ()
specifier|public
name|boolean
name|isInSafeMode
parameter_list|()
block|{
return|return
name|namesystem
operator|.
name|isInSafeMode
argument_list|()
return|;
block|}
comment|/** get FSImage */
DECL|method|getFSImage ()
name|FSImage
name|getFSImage
parameter_list|()
block|{
return|return
name|namesystem
operator|.
name|dir
operator|.
name|fsImage
return|;
block|}
comment|/**    * Returns the address on which the NameNodes is listening to.    * @return namenode rpc address    */
DECL|method|getNameNodeAddress ()
specifier|public
name|InetSocketAddress
name|getNameNodeAddress
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getRpcAddress
argument_list|()
return|;
block|}
comment|/**    * Returns namenode service rpc address, if set. Otherwise returns    * namenode rpc address.    * @return namenode service rpc address used by datanodes    */
DECL|method|getServiceRpcAddress ()
specifier|public
name|InetSocketAddress
name|getServiceRpcAddress
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getServiceRpcAddress
argument_list|()
operator|!=
literal|null
condition|?
name|rpcServer
operator|.
name|getServiceRpcAddress
argument_list|()
else|:
name|rpcServer
operator|.
name|getRpcAddress
argument_list|()
return|;
block|}
comment|/**    * Returns the address of the NameNodes http server,     * which is used to access the name-node web UI.    *     * @return the http address.    */
DECL|method|getHttpAddress ()
specifier|public
name|InetSocketAddress
name|getHttpAddress
parameter_list|()
block|{
return|return
name|httpServer
operator|.
name|getHttpAddress
argument_list|()
return|;
block|}
comment|/**    * Verify that configured directories exist, then    * Interactively confirm that formatting is desired     * for each existing directory and format them.    *     * @param conf    * @param isConfirmationNeeded    * @return true if formatting was aborted, false otherwise    * @throws IOException    */
DECL|method|format (Configuration conf, boolean isConfirmationNeeded)
specifier|private
specifier|static
name|boolean
name|format
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isConfirmationNeeded
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY
argument_list|,
name|DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_DEFAULT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The option "
operator|+
name|DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY
operator|+
literal|" is set to false for this filesystem, so it "
operator|+
literal|"cannot be formatted. You will need to set "
operator|+
name|DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY
operator|+
literal|" parameter "
operator|+
literal|"to true in order to format this filesystem"
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|URI
argument_list|>
name|dirsToFormat
init|=
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|editDirsToFormat
init|=
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|URI
argument_list|>
name|it
init|=
name|dirsToFormat
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|curDir
init|=
operator|new
name|File
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Its alright for a dir not to exist, or to exist (properly accessible)
comment|// and be completely empty.
if|if
condition|(
operator|!
name|curDir
operator|.
name|exists
argument_list|()
operator|||
operator|(
name|curDir
operator|.
name|isDirectory
argument_list|()
operator|&&
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|curDir
argument_list|)
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
continue|continue;
if|if
condition|(
name|isConfirmationNeeded
condition|)
block|{
if|if
condition|(
operator|!
name|confirmPrompt
argument_list|(
literal|"Re-format filesystem in "
operator|+
name|curDir
operator|+
literal|" ?"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Format aborted in "
operator|+
name|curDir
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// if clusterID is not provided - see if you can find the current one
name|String
name|clusterId
init|=
name|StartupOption
operator|.
name|FORMAT
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterId
operator|==
literal|null
operator|||
name|clusterId
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|//Generate a new cluster id
name|clusterId
operator|=
name|NNStorage
operator|.
name|newClusterID
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Formatting using clusterid: "
operator|+
name|clusterId
argument_list|)
expr_stmt|;
name|FSImage
name|fsImage
init|=
operator|new
name|FSImage
argument_list|(
name|conf
argument_list|,
name|dirsToFormat
argument_list|,
name|editDirsToFormat
argument_list|)
decl_stmt|;
name|FSNamesystem
name|fsn
init|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|,
name|fsImage
argument_list|)
decl_stmt|;
name|fsImage
operator|.
name|format
argument_list|(
name|fsn
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|finalize (Configuration conf, boolean isConfirmationNeeded )
specifier|private
specifier|static
name|boolean
name|finalize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isConfirmationNeeded
parameter_list|)
throws|throws
name|IOException
block|{
name|FSNamesystem
name|nsys
init|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|,
operator|new
name|FSImage
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"\"finalize\" will remove the previous state of the files system.\n"
operator|+
literal|"Recent upgrade will become permanent.\n"
operator|+
literal|"Rollback option will not be available anymore.\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isConfirmationNeeded
condition|)
block|{
if|if
condition|(
operator|!
name|confirmPrompt
argument_list|(
literal|"Finalize filesystem state?"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Finalize aborted."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|nsys
operator|.
name|dir
operator|.
name|fsImage
operator|.
name|finalizeUpgrade
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|printUsage ()
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java NameNode ["
operator|+
name|StartupOption
operator|.
name|BACKUP
operator|.
name|getName
argument_list|()
operator|+
literal|"] | ["
operator|+
name|StartupOption
operator|.
name|CHECKPOINT
operator|.
name|getName
argument_list|()
operator|+
literal|"] | ["
operator|+
name|StartupOption
operator|.
name|FORMAT
operator|.
name|getName
argument_list|()
operator|+
literal|"["
operator|+
name|StartupOption
operator|.
name|CLUSTERID
operator|.
name|getName
argument_list|()
operator|+
literal|" cid ]] | ["
operator|+
name|StartupOption
operator|.
name|UPGRADE
operator|.
name|getName
argument_list|()
operator|+
literal|"] | ["
operator|+
name|StartupOption
operator|.
name|ROLLBACK
operator|.
name|getName
argument_list|()
operator|+
literal|"] | ["
operator|+
name|StartupOption
operator|.
name|FINALIZE
operator|.
name|getName
argument_list|()
operator|+
literal|"] | ["
operator|+
name|StartupOption
operator|.
name|IMPORT
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
DECL|method|parseArguments (String args[])
specifier|private
specifier|static
name|StartupOption
name|parseArguments
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|int
name|argsLen
init|=
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|args
operator|.
name|length
decl_stmt|;
name|StartupOption
name|startOpt
init|=
name|StartupOption
operator|.
name|REGULAR
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argsLen
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmd
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|StartupOption
operator|.
name|FORMAT
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|FORMAT
expr_stmt|;
comment|// might be followed by two args
if|if
condition|(
name|i
operator|+
literal|2
operator|<
name|argsLen
operator|&&
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|StartupOption
operator|.
name|CLUSTERID
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|+=
literal|2
expr_stmt|;
name|startOpt
operator|.
name|setClusterId
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|StartupOption
operator|.
name|GENCLUSTERID
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|GENCLUSTERID
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StartupOption
operator|.
name|REGULAR
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|REGULAR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StartupOption
operator|.
name|BACKUP
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|BACKUP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StartupOption
operator|.
name|CHECKPOINT
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|CHECKPOINT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StartupOption
operator|.
name|UPGRADE
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|UPGRADE
expr_stmt|;
comment|// might be followed by two args
if|if
condition|(
name|i
operator|+
literal|2
operator|<
name|argsLen
operator|&&
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|StartupOption
operator|.
name|CLUSTERID
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|i
operator|+=
literal|2
expr_stmt|;
name|startOpt
operator|.
name|setClusterId
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|StartupOption
operator|.
name|ROLLBACK
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|ROLLBACK
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StartupOption
operator|.
name|FINALIZE
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|FINALIZE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StartupOption
operator|.
name|IMPORT
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|startOpt
operator|=
name|StartupOption
operator|.
name|IMPORT
expr_stmt|;
block|}
else|else
return|return
literal|null
return|;
block|}
return|return
name|startOpt
return|;
block|}
DECL|method|setStartupOption (Configuration conf, StartupOption opt)
specifier|private
specifier|static
name|void
name|setStartupOption
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|StartupOption
name|opt
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_STARTUP_KEY
argument_list|,
name|opt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getStartupOption (Configuration conf)
specifier|static
name|StartupOption
name|getStartupOption
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|StartupOption
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_STARTUP_KEY
argument_list|,
name|StartupOption
operator|.
name|REGULAR
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Print out a prompt to the user, and return true if the user    * responds with "Y" or "yes".    */
DECL|method|confirmPrompt (String prompt)
specifier|static
name|boolean
name|confirmPrompt
parameter_list|(
name|String
name|prompt
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|prompt
operator|+
literal|" (Y or N) "
argument_list|)
expr_stmt|;
name|StringBuilder
name|responseBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|c
init|=
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
operator|||
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
name|responseBuilder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|String
name|response
init|=
name|responseBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"y"
argument_list|)
operator|||
name|response
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|response
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"n"
argument_list|)
operator|||
name|response
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// else ask them again
block|}
block|}
DECL|method|createNameNode (String argv[], Configuration conf)
specifier|public
specifier|static
name|NameNode
name|createNameNode
parameter_list|(
name|String
name|argv
index|[]
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|StartupOption
name|startOpt
init|=
name|parseArguments
argument_list|(
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
name|startOpt
operator|==
literal|null
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|setStartupOption
argument_list|(
name|conf
argument_list|,
name|startOpt
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|startOpt
condition|)
block|{
case|case
name|FORMAT
case|:
name|boolean
name|aborted
init|=
name|format
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|aborted
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// avoid javac warning
case|case
name|GENCLUSTERID
case|:
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Generating new cluster id:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|NNStorage
operator|.
name|newClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
case|case
name|FINALIZE
case|:
name|aborted
operator|=
name|finalize
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|aborted
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// avoid javac warning
case|case
name|BACKUP
case|:
case|case
name|CHECKPOINT
case|:
name|NamenodeRole
name|role
init|=
name|startOpt
operator|.
name|toNodeRole
argument_list|()
decl_stmt|;
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
name|role
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|BackupNode
argument_list|(
name|conf
argument_list|,
name|role
argument_list|)
return|;
default|default:
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"NameNode"
argument_list|)
expr_stmt|;
return|return
operator|new
name|NameNode
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
comment|/**    * In federation configuration is set for a set of    * namenode and secondary namenode/backup/checkpointer, which are    * grouped under a logical nameservice ID. The configuration keys specific     * to them have suffix set to configured nameserviceId.    *     * This method copies the value from specific key of format key.nameserviceId    * to key, to set up the generic configuration. Once this is done, only    * generic version of the configuration is read in rest of the code, for    * backward compatibility and simpler code changes.    *     * @param conf    *          Configuration object to lookup specific key and to set the value    *          to the key passed. Note the conf object is modified    * @param nameserviceId name service Id    * @see DFSUtil#setGenericConf(Configuration, String, String...)    */
DECL|method|initializeGenericKeys (Configuration conf, String nameserviceId)
specifier|public
specifier|static
name|void
name|initializeGenericKeys
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nameserviceId
parameter_list|)
block|{
if|if
condition|(
operator|(
name|nameserviceId
operator|==
literal|null
operator|)
operator|||
name|nameserviceId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|DFSUtil
operator|.
name|setGenericConf
argument_list|(
name|conf
argument_list|,
name|nameserviceId
argument_list|,
name|NAMESERVICE_SPECIFIC_KEYS
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|URI
name|defaultUri
init|=
name|URI
operator|.
name|create
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
operator|+
literal|"://"
operator|+
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|defaultUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Get the name service Id for the node    * @return name service Id or null if federation is not configured    */
DECL|method|getNameServiceId (Configuration conf)
specifier|protected
name|String
name|getNameServiceId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    */
DECL|method|main (String argv[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|NameNode
operator|.
name|class
argument_list|,
name|argv
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|NameNode
name|namenode
init|=
name|createNameNode
argument_list|(
name|argv
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|namenode
operator|!=
literal|null
condition|)
name|namenode
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in namenode join"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

