begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|now
import|;
end_import

begin_class
DECL|class|FSDirSymlinkOp
class|class
name|FSDirSymlinkOp
block|{
DECL|method|createSymlinkInt ( FSNamesystem fsn, String target, final String linkArg, PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)
specifier|static
name|HdfsFileStatus
name|createSymlinkInt
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|String
name|target
parameter_list|,
specifier|final
name|String
name|linkArg
parameter_list|,
name|PermissionStatus
name|dirPerms
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|String
name|link
init|=
name|linkArg
decl_stmt|;
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|link
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPathException
argument_list|(
literal|"Invalid link name: "
operator|+
name|link
argument_list|)
throw|;
block|}
if|if
condition|(
name|FSDirectory
operator|.
name|isReservedName
argument_list|(
name|target
argument_list|)
operator|||
name|target
operator|.
name|isEmpty
argument_list|()
operator|||
name|FSDirectory
operator|.
name|isExactReservedName
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPathException
argument_list|(
literal|"Invalid target name: "
operator|+
name|target
argument_list|)
throw|;
block|}
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* NameSystem.createSymlink: target="
operator|+
name|target
operator|+
literal|" link="
operator|+
name|link
argument_list|)
expr_stmt|;
block|}
name|FSPermissionChecker
name|pc
init|=
name|fsn
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|INodesInPath
name|iip
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|iip
operator|=
name|fsd
operator|.
name|resolvePathForWrite
argument_list|(
name|pc
argument_list|,
name|link
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|link
operator|=
name|iip
operator|.
name|getPath
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|createParent
condition|)
block|{
name|fsd
operator|.
name|verifyParentDir
argument_list|(
name|iip
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fsd
operator|.
name|isValidToCreate
argument_list|(
name|link
argument_list|,
name|iip
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to create link "
operator|+
name|link
operator|+
literal|" either because the filename is invalid or the file exists"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fsd
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsd
operator|.
name|checkAncestorAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
comment|// validate that we have enough inodes.
name|fsn
operator|.
name|checkFsObjectLimit
argument_list|()
expr_stmt|;
comment|// add symbolic link to namespace
name|addSymlink
argument_list|(
name|fsd
argument_list|,
name|link
argument_list|,
name|iip
argument_list|,
name|target
argument_list|,
name|dirPerms
argument_list|,
name|createParent
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
operator|.
name|incrCreateSymlinkOps
argument_list|()
expr_stmt|;
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
DECL|method|unprotectedAddSymlink (FSDirectory fsd, INodesInPath iip, byte[] localName, long id, String target, long mtime, long atime, PermissionStatus perm)
specifier|static
name|INodeSymlink
name|unprotectedAddSymlink
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|byte
index|[]
name|localName
parameter_list|,
name|long
name|id
parameter_list|,
name|String
name|target
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|,
name|PermissionStatus
name|perm
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|QuotaExceededException
block|{
assert|assert
name|fsd
operator|.
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INodeSymlink
name|symlink
init|=
operator|new
name|INodeSymlink
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|perm
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|symlink
operator|.
name|setLocalName
argument_list|(
name|localName
argument_list|)
expr_stmt|;
return|return
name|fsd
operator|.
name|addINode
argument_list|(
name|iip
argument_list|,
name|symlink
argument_list|)
operator|!=
literal|null
condition|?
name|symlink
else|:
literal|null
return|;
block|}
comment|/**    * Add the given symbolic link to the fs. Record it in the edits log.    */
DECL|method|addSymlink (FSDirectory fsd, String path, INodesInPath iip, String target, PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)
specifier|private
specifier|static
name|INodeSymlink
name|addSymlink
parameter_list|(
name|FSDirectory
name|fsd
parameter_list|,
name|String
name|path
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|String
name|target
parameter_list|,
name|PermissionStatus
name|dirPerms
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|mtime
init|=
name|now
argument_list|()
decl_stmt|;
specifier|final
name|INodesInPath
name|parent
decl_stmt|;
if|if
condition|(
name|createParent
condition|)
block|{
name|parent
operator|=
name|FSDirMkdirOp
operator|.
name|createAncestorDirectories
argument_list|(
name|fsd
argument_list|,
name|iip
argument_list|,
name|dirPerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|parent
operator|=
name|iip
operator|.
name|getParentINodesInPath
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|userName
init|=
name|dirPerms
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|long
name|id
init|=
name|fsd
operator|.
name|allocateNewInodeId
argument_list|()
decl_stmt|;
name|PermissionStatus
name|perm
init|=
operator|new
name|PermissionStatus
argument_list|(
name|userName
argument_list|,
literal|null
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|INodeSymlink
name|newNode
init|=
name|unprotectedAddSymlink
argument_list|(
name|fsd
argument_list|,
name|parent
argument_list|,
name|iip
operator|.
name|getLastLocalName
argument_list|()
argument_list|,
name|id
argument_list|,
name|target
argument_list|,
name|mtime
argument_list|,
name|mtime
argument_list|,
name|perm
argument_list|)
decl_stmt|;
if|if
condition|(
name|newNode
operator|==
literal|null
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|info
argument_list|(
literal|"addSymlink: failed to add "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|fsd
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSymlink
argument_list|(
name|path
argument_list|,
name|target
argument_list|,
name|mtime
argument_list|,
name|mtime
argument_list|,
name|newNode
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"addSymlink: "
operator|+
name|path
operator|+
literal|" is added"
argument_list|)
expr_stmt|;
block|}
return|return
name|newNode
return|;
block|}
block|}
end_class

end_unit

