begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogFileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|AutoCloseableLock
import|;
end_import

begin_comment
comment|/**  * An in-memory cache of edits in their serialized form. This is used to serve  * the {@link Journal#getJournaledEdits(long, int)} call, used by the  * QJM when {@value DFSConfigKeys#DFS_HA_TAILEDITS_INPROGRESS_KEY} is  * enabled.  *  *<p>When a batch of edits is received by the JournalNode, it is put into this  * cache via {@link #storeEdits(byte[], long, long, int)}. Edits must be  * stored contiguously; if a batch of edits is stored that does not align with  * the previously stored edits, the cache will be cleared before storing new  * edits to avoid gaps. This decision is made because gaps are only handled  * when in recovery mode, which the cache is not intended to be used for.  *  *<p>Batches of edits are stored in a {@link TreeMap} mapping the starting  * transaction ID of the batch to the data buffer. Upon retrieval, the  * relevant data buffers are concatenated together and a header is added  * to construct a fully-formed edit data stream.  *  *<p>The cache is of a limited size capacity determined by  * {@value DFSConfigKeys#DFS_JOURNALNODE_EDIT_CACHE_SIZE_KEY}. If the capacity  * is exceeded after adding a new batch of edits, batches of edits are removed  * until the total size is less than the capacity, starting from the ones  * containing the oldest transactions. Transactions range in size, but a  * decent rule of thumb is that 200 bytes are needed per transaction. Monitoring  * the {@link JournalMetrics#rpcRequestCacheMissAmount} metric is recommended  * to determine if the cache is too small; it will indicate both how many  * cache misses occurred, and how many more transactions would have been  * needed in the cache to serve the request.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|JournaledEditsCache
class|class
name|JournaledEditsCache
block|{
DECL|field|INVALID_LAYOUT_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|INVALID_LAYOUT_VERSION
init|=
literal|0
decl_stmt|;
DECL|field|INVALID_TXN_ID
specifier|private
specifier|static
specifier|final
name|long
name|INVALID_TXN_ID
init|=
operator|-
literal|1
decl_stmt|;
comment|/** The capacity, in bytes, of this cache. */
DECL|field|capacity
specifier|private
specifier|final
name|int
name|capacity
decl_stmt|;
comment|/**    * Read/write lock pair wrapped in AutoCloseable; these refer to the same    * underlying lock.    */
DECL|field|readLock
specifier|private
specifier|final
name|AutoCloseableLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|AutoCloseableLock
name|writeLock
decl_stmt|;
comment|// ** Start lock-protected fields **
comment|/**    * Stores the actual data as a mapping of the StartTxnId of a batch of edits    * to the serialized batch of edits. Stores only contiguous ranges; that is,    * the last transaction ID in one batch is always one less than the first    * transaction ID in the next batch. Though the map is protected by the lock,    * individual data buffers are immutable and can be accessed without locking.    */
DECL|field|dataMap
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|dataMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** Stores the layout version currently present in the cache. */
DECL|field|layoutVersion
specifier|private
name|int
name|layoutVersion
init|=
name|INVALID_LAYOUT_VERSION
decl_stmt|;
comment|/** Stores the serialized version of the header for the current version. */
DECL|field|layoutHeader
specifier|private
name|ByteBuffer
name|layoutHeader
decl_stmt|;
comment|/**    * The lowest/highest transaction IDs present in the cache.    * {@value INVALID_TXN_ID} if there are no transactions in the cache.    */
DECL|field|lowestTxnId
specifier|private
name|long
name|lowestTxnId
decl_stmt|;
DECL|field|highestTxnId
specifier|private
name|long
name|highestTxnId
decl_stmt|;
comment|/**    * The lowest transaction ID that was ever present in the cache since last    * being reset (i.e. since initialization or since reset due to being out of    * sync with the Journal). Until the cache size goes above capacity, this is    * equal to lowestTxnId.    */
DECL|field|initialTxnId
specifier|private
name|long
name|initialTxnId
decl_stmt|;
comment|/** The current total size of all buffers in this cache. */
DECL|field|totalSize
specifier|private
name|int
name|totalSize
decl_stmt|;
comment|// ** End lock-protected fields **
DECL|method|JournaledEditsCache (Configuration conf)
name|JournaledEditsCache
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|capacity
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_EDIT_CACHE_SIZE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_EDIT_CACHE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|capacity
operator|>
literal|0.9
operator|*
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
condition|)
block|{
name|Journal
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cache capacity is set at %d bytes but "
operator|+
literal|"maximum JVM memory is only %d bytes. It is recommended that you "
operator|+
literal|"decrease the cache size or increase the heap size."
argument_list|,
name|capacity
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Journal
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Enabling the journaled edits cache with a capacity "
operator|+
literal|"of bytes: "
operator|+
name|capacity
argument_list|)
expr_stmt|;
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|readLock
operator|=
operator|new
name|AutoCloseableLock
argument_list|(
name|lock
operator|.
name|readLock
argument_list|()
argument_list|)
expr_stmt|;
name|writeLock
operator|=
operator|new
name|AutoCloseableLock
argument_list|(
name|lock
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
name|initialize
argument_list|(
name|INVALID_TXN_ID
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fetch the data for edits starting at the specific transaction ID, fetching    * up to {@code maxTxns} transactions. Populates a list of output buffers    * which contains a serialized version of the edits, and returns the count of    * edits contained within the serialized buffers. The serialized edits are    * prefixed with a standard edit log header containing information about the    * layout version. The transactions returned are guaranteed to have contiguous    * transaction IDs.    *    * If {@code requestedStartTxn} is higher than the highest transaction which    * has been added to this cache, a response with an empty buffer and a    * transaction count of 0 will be returned. If {@code requestedStartTxn} is    * lower than the lowest transaction currently contained in this cache, or no    * transactions have yet been added to the cache, an exception will be thrown.    *    * @param requestedStartTxn The ID of the first transaction to return. If any    *                          transactions are returned, it is guaranteed that    *                          the first one will have this ID.    * @param maxTxns The maximum number of transactions to return.    * @param outputBuffers A list to populate with output buffers. When    *                      concatenated, these form a full response.    * @return The number of transactions contained within the set of output    *         buffers.    * @throws IOException If transactions are requested which cannot be served    *                     by this cache.    */
DECL|method|retrieveEdits (long requestedStartTxn, int maxTxns, List<ByteBuffer> outputBuffers)
name|int
name|retrieveEdits
parameter_list|(
name|long
name|requestedStartTxn
parameter_list|,
name|int
name|maxTxns
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|outputBuffers
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|txnCount
init|=
literal|0
decl_stmt|;
try|try
init|(
name|AutoCloseableLock
name|l
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|lowestTxnId
operator|==
name|INVALID_TXN_ID
operator|||
name|requestedStartTxn
operator|<
name|lowestTxnId
condition|)
block|{
throw|throw
name|getCacheMissException
argument_list|(
name|requestedStartTxn
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|requestedStartTxn
operator|>
name|highestTxnId
condition|)
block|{
return|return
literal|0
return|;
block|}
name|outputBuffers
operator|.
name|add
argument_list|(
name|layoutHeader
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|incrBuffIter
init|=
name|dataMap
operator|.
name|tailMap
argument_list|(
name|dataMap
operator|.
name|floorKey
argument_list|(
name|requestedStartTxn
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|prevTxn
init|=
name|requestedStartTxn
decl_stmt|;
name|byte
index|[]
name|prevBuf
init|=
literal|null
decl_stmt|;
comment|// Stop when maximum transactions reached...
while|while
condition|(
operator|(
name|txnCount
operator|<
name|maxTxns
operator|)
operator|&&
comment|// ... or there are no more entries ...
operator|(
name|incrBuffIter
operator|.
name|hasNext
argument_list|()
operator|||
name|prevBuf
operator|!=
literal|null
operator|)
condition|)
block|{
name|long
name|currTxn
decl_stmt|;
name|byte
index|[]
name|currBuf
decl_stmt|;
if|if
condition|(
name|incrBuffIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|ent
init|=
name|incrBuffIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|currTxn
operator|=
name|ent
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|currBuf
operator|=
name|ent
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// This accounts for the trailing entry
name|currTxn
operator|=
name|highestTxnId
operator|+
literal|1
expr_stmt|;
name|currBuf
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|prevBuf
operator|!=
literal|null
condition|)
block|{
comment|// True except for the first loop iteration
name|outputBuffers
operator|.
name|add
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|prevBuf
argument_list|)
argument_list|)
expr_stmt|;
comment|// if prevTxn< requestedStartTxn, the extra transactions will get
comment|// removed after the loop, so don't include them in the txn count
name|txnCount
operator|+=
name|currTxn
operator|-
name|Math
operator|.
name|max
argument_list|(
name|requestedStartTxn
argument_list|,
name|prevTxn
argument_list|)
expr_stmt|;
block|}
name|prevTxn
operator|=
name|currTxn
expr_stmt|;
name|prevBuf
operator|=
name|currBuf
expr_stmt|;
block|}
comment|// Release the lock before doing operations on the buffers (deserializing
comment|// to find transaction boundaries, and copying into an output buffer)
block|}
comment|// Remove extra leading transactions in the first buffer
name|ByteBuffer
name|firstBuf
init|=
name|outputBuffers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// 0th is the header
name|firstBuf
operator|.
name|position
argument_list|(
name|findTransactionPosition
argument_list|(
name|firstBuf
operator|.
name|array
argument_list|()
argument_list|,
name|requestedStartTxn
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove trailing transactions in the last buffer if necessary
if|if
condition|(
name|txnCount
operator|>
name|maxTxns
condition|)
block|{
name|ByteBuffer
name|lastBuf
init|=
name|outputBuffers
operator|.
name|get
argument_list|(
name|outputBuffers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|limit
init|=
name|findTransactionPosition
argument_list|(
name|lastBuf
operator|.
name|array
argument_list|()
argument_list|,
name|requestedStartTxn
operator|+
name|maxTxns
argument_list|)
decl_stmt|;
name|lastBuf
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|txnCount
operator|=
name|maxTxns
expr_stmt|;
block|}
return|return
name|txnCount
return|;
block|}
comment|/**    * Store a batch of serialized edits into this cache. Removes old batches    * as necessary to keep the total size of the cache below the capacity.    * See the class Javadoc for more info.    *    * This attempts to always handle malformed inputs gracefully rather than    * throwing an exception, to allow the rest of the Journal's operations    * to proceed normally.    *    * @param inputData A buffer containing edits in serialized form    * @param newStartTxn The txn ID of the first edit in {@code inputData}    * @param newEndTxn The txn ID of the last edit in {@code inputData}    * @param newLayoutVersion The version of the layout used to serialize    *                         the edits    */
DECL|method|storeEdits (byte[] inputData, long newStartTxn, long newEndTxn, int newLayoutVersion)
name|void
name|storeEdits
parameter_list|(
name|byte
index|[]
name|inputData
parameter_list|,
name|long
name|newStartTxn
parameter_list|,
name|long
name|newEndTxn
parameter_list|,
name|int
name|newLayoutVersion
parameter_list|)
block|{
if|if
condition|(
name|newStartTxn
operator|<
literal|0
operator|||
name|newEndTxn
operator|<
name|newStartTxn
condition|)
block|{
name|Journal
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Attempted to cache data of length %d "
operator|+
literal|"with newStartTxn %d and newEndTxn %d"
argument_list|,
name|inputData
operator|.
name|length
argument_list|,
name|newStartTxn
argument_list|,
name|newEndTxn
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
init|(
name|AutoCloseableLock
name|l
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|newLayoutVersion
operator|!=
name|layoutVersion
condition|)
block|{
try|try
block|{
name|updateLayoutVersion
argument_list|(
name|newLayoutVersion
argument_list|,
name|newStartTxn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Journal
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to save new edits [%d, %d] "
operator|+
literal|"due to exception when updating to new layout version %d"
argument_list|,
name|newStartTxn
argument_list|,
name|newEndTxn
argument_list|,
name|newLayoutVersion
argument_list|)
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|lowestTxnId
operator|==
name|INVALID_TXN_ID
condition|)
block|{
name|Journal
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing edits cache starting from txn ID "
operator|+
name|newStartTxn
argument_list|)
expr_stmt|;
name|initialize
argument_list|(
name|newStartTxn
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|highestTxnId
operator|+
literal|1
operator|!=
name|newStartTxn
condition|)
block|{
comment|// Cache is out of sync; clear to avoid storing noncontiguous regions
name|Journal
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Edits cache is out of sync; "
operator|+
literal|"looked for next txn id at %d but got start txn id for "
operator|+
literal|"cache put request at %d. Reinitializing at new request."
argument_list|,
name|highestTxnId
operator|+
literal|1
argument_list|,
name|newStartTxn
argument_list|)
argument_list|)
expr_stmt|;
name|initialize
argument_list|(
name|newStartTxn
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|totalSize
operator|+
name|inputData
operator|.
name|length
operator|)
operator|>
name|capacity
operator|&&
operator|!
name|dataMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|lowest
init|=
name|dataMap
operator|.
name|firstEntry
argument_list|()
decl_stmt|;
name|dataMap
operator|.
name|remove
argument_list|(
name|lowest
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|totalSize
operator|-=
name|lowest
operator|.
name|getValue
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|inputData
operator|.
name|length
operator|>
name|capacity
condition|)
block|{
name|initialize
argument_list|(
name|INVALID_TXN_ID
argument_list|)
expr_stmt|;
name|Journal
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"A single batch of edits was too "
operator|+
literal|"large to fit into the cache: startTxn = %d, endTxn = %d, "
operator|+
literal|"input length = %d. The capacity of the cache (%s) must be "
operator|+
literal|"increased for it to work properly (current capacity %d)."
operator|+
literal|"Cache is now empty."
argument_list|,
name|newStartTxn
argument_list|,
name|newEndTxn
argument_list|,
name|inputData
operator|.
name|length
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_EDIT_CACHE_SIZE_KEY
argument_list|,
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dataMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lowestTxnId
operator|=
name|newStartTxn
expr_stmt|;
block|}
else|else
block|{
name|lowestTxnId
operator|=
name|dataMap
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
name|dataMap
operator|.
name|put
argument_list|(
name|newStartTxn
argument_list|,
name|inputData
argument_list|)
expr_stmt|;
name|highestTxnId
operator|=
name|newEndTxn
expr_stmt|;
name|totalSize
operator|+=
name|inputData
operator|.
name|length
expr_stmt|;
block|}
block|}
comment|/**    * Skip through a given stream of edits until the given transaction ID is    * found. Return the number of bytes that appear prior to the given    * transaction.    *    * @param buf A buffer containing a stream of serialized edits    * @param txnId The transaction ID to search for    * @return The number of bytes appearing in {@code buf}<i>before</i>    *         the start of the transaction with ID {@code txnId}.    */
DECL|method|findTransactionPosition (byte[] buf, long txnId)
specifier|private
name|int
name|findTransactionPosition
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|long
name|txnId
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|FSEditLogLoader
operator|.
name|PositionTrackingInputStream
name|tracker
init|=
operator|new
name|FSEditLogLoader
operator|.
name|PositionTrackingInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|FSEditLogOp
operator|.
name|Reader
name|reader
init|=
name|FSEditLogOp
operator|.
name|Reader
operator|.
name|create
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|tracker
argument_list|)
argument_list|,
name|tracker
argument_list|,
name|layoutVersion
argument_list|)
decl_stmt|;
name|long
name|previousPos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|scanOp
argument_list|()
operator|<
name|txnId
condition|)
block|{
name|previousPos
operator|=
name|tracker
operator|.
name|getPos
argument_list|()
expr_stmt|;
block|}
comment|// tracker is backed by a byte[]; position cannot go above an integer
return|return
operator|(
name|int
operator|)
name|previousPos
return|;
block|}
comment|/**    * Update the layout version of the cache. This clears out all existing    * entries, and populates the new layout version and header for that version.    *    * @param newLayoutVersion The new layout version to be stored in the cache    * @param newStartTxn The new lowest transaction in the cache    */
DECL|method|updateLayoutVersion (int newLayoutVersion, long newStartTxn)
specifier|private
name|void
name|updateLayoutVersion
parameter_list|(
name|int
name|newLayoutVersion
parameter_list|,
name|long
name|newStartTxn
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|logMsg
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"Updating edits cache to use layout version "
argument_list|)
operator|.
name|append
argument_list|(
name|newLayoutVersion
argument_list|)
operator|.
name|append
argument_list|(
literal|" starting from txn ID "
argument_list|)
operator|.
name|append
argument_list|(
name|newStartTxn
argument_list|)
decl_stmt|;
if|if
condition|(
name|layoutVersion
operator|!=
name|INVALID_LAYOUT_VERSION
condition|)
block|{
name|logMsg
operator|.
name|append
argument_list|(
literal|"; previous version was "
argument_list|)
operator|.
name|append
argument_list|(
name|layoutVersion
argument_list|)
operator|.
name|append
argument_list|(
literal|"; old entries will be cleared."
argument_list|)
expr_stmt|;
block|}
name|Journal
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|logMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|initialize
argument_list|(
name|newStartTxn
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|EditLogFileOutputStream
operator|.
name|writeHeader
argument_list|(
name|newLayoutVersion
argument_list|,
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
argument_list|)
expr_stmt|;
name|layoutVersion
operator|=
name|newLayoutVersion
expr_stmt|;
name|layoutHeader
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize the cache back to a clear state.    *    * @param newInitialTxnId The new lowest transaction ID stored in the cache.    *                        This should be {@value INVALID_TXN_ID} if the cache    *                        is to remain empty at this time.    */
DECL|method|initialize (long newInitialTxnId)
specifier|private
name|void
name|initialize
parameter_list|(
name|long
name|newInitialTxnId
parameter_list|)
block|{
name|dataMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|totalSize
operator|=
literal|0
expr_stmt|;
name|initialTxnId
operator|=
name|newInitialTxnId
expr_stmt|;
name|lowestTxnId
operator|=
name|initialTxnId
expr_stmt|;
name|highestTxnId
operator|=
name|INVALID_TXN_ID
expr_stmt|;
comment|// this will be set later
block|}
comment|/**    * Return the underlying data buffer used to store information about the    * given transaction ID.    *    * @param txnId Transaction ID whose containing buffer should be fetched.    * @return The data buffer for the transaction    */
annotation|@
name|VisibleForTesting
DECL|method|getRawDataForTests (long txnId)
name|byte
index|[]
name|getRawDataForTests
parameter_list|(
name|long
name|txnId
parameter_list|)
block|{
try|try
init|(
name|AutoCloseableLock
name|l
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
return|return
name|dataMap
operator|.
name|floorEntry
argument_list|(
name|txnId
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
DECL|method|getCacheMissException (long requestedTxnId)
specifier|private
name|CacheMissException
name|getCacheMissException
parameter_list|(
name|long
name|requestedTxnId
parameter_list|)
block|{
if|if
condition|(
name|lowestTxnId
operator|==
name|INVALID_TXN_ID
condition|)
block|{
return|return
operator|new
name|CacheMissException
argument_list|(
literal|0
argument_list|,
literal|"Cache is empty; either it was never "
operator|+
literal|"written to or the last write overflowed the cache capacity."
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|requestedTxnId
operator|<
name|initialTxnId
condition|)
block|{
return|return
operator|new
name|CacheMissException
argument_list|(
name|initialTxnId
operator|-
name|requestedTxnId
argument_list|,
literal|"Cache started at txn ID %d but requested txns starting at %d."
argument_list|,
name|initialTxnId
argument_list|,
name|requestedTxnId
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|CacheMissException
argument_list|(
name|lowestTxnId
operator|-
name|requestedTxnId
argument_list|,
literal|"Oldest txn ID available in the cache is %d, but requested txns "
operator|+
literal|"starting at %d. The cache size (%s) may need to be increased "
operator|+
literal|"to hold more transactions (currently %d bytes containing %d "
operator|+
literal|"transactions)"
argument_list|,
name|lowestTxnId
argument_list|,
name|requestedTxnId
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_EDIT_CACHE_SIZE_KEY
argument_list|,
name|capacity
argument_list|,
name|highestTxnId
operator|-
name|lowestTxnId
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
DECL|class|CacheMissException
specifier|static
class|class
name|CacheMissException
extends|extends
name|IOException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
DECL|field|cacheMissAmount
specifier|private
specifier|final
name|long
name|cacheMissAmount
decl_stmt|;
DECL|method|CacheMissException (long cacheMissAmount, String msgFormat, Object... msgArgs)
name|CacheMissException
parameter_list|(
name|long
name|cacheMissAmount
parameter_list|,
name|String
name|msgFormat
parameter_list|,
name|Object
modifier|...
name|msgArgs
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|msgFormat
argument_list|,
name|msgArgs
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheMissAmount
operator|=
name|cacheMissAmount
expr_stmt|;
block|}
DECL|method|getCacheMissAmount ()
name|long
name|getCacheMissAmount
parameter_list|()
block|{
return|return
name|cacheMissAmount
return|;
block|}
block|}
block|}
end_class

end_unit

