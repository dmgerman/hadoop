begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockStorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|VolumeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsLocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|InvalidBlockTokenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/****************************************************************  * Implementation of the abstract FileSystem for the DFS system.  * This object is the way end-user code interacts with a Hadoop  * DistributedFileSystem.  *  *****************************************************************/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"MapReduce"
block|,
literal|"HBase"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DistributedFileSystem
specifier|public
class|class
name|DistributedFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|dfs
name|DFSClient
name|dfs
decl_stmt|;
DECL|field|verifyChecksum
specifier|private
name|boolean
name|verifyChecksum
init|=
literal|true
decl_stmt|;
static|static
block|{
name|HdfsConfiguration
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|DistributedFileSystem ()
specifier|public
name|DistributedFileSystem
parameter_list|()
block|{   }
comment|/**    * Return the protocol scheme for the FileSystem.    *<p/>    *    * @return<code>hdfs</code>    */
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
return|;
block|}
annotation|@
name|Deprecated
DECL|method|DistributedFileSystem (InetSocketAddress namenode, Configuration conf)
specifier|public
name|DistributedFileSystem
parameter_list|(
name|InetSocketAddress
name|namenode
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|initialize
argument_list|(
name|NameNode
operator|.
name|getUri
argument_list|(
name|namenode
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incomplete HDFS URI, no host: "
operator|+
name|uri
argument_list|)
throw|;
block|}
name|this
operator|.
name|dfs
operator|=
operator|new
name|DFSClient
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|,
name|statistics
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|workingDir
operator|=
name|getHomeDirectory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|dfs
operator|.
name|getDefaultBlockSize
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultReplication ()
specifier|public
name|short
name|getDefaultReplication
parameter_list|()
block|{
return|return
name|dfs
operator|.
name|getDefaultReplication
argument_list|()
return|;
block|}
DECL|method|makeAbsolute (Path f)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|f
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|f
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
name|String
name|result
init|=
name|makeAbsolute
argument_list|(
name|dir
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|result
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid DFS directory name "
operator|+
name|result
argument_list|)
throw|;
block|}
name|workingDir
operator|=
name|makeAbsolute
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|dfs
operator|.
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getPathName (Path file)
specifier|private
name|String
name|getPathName
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|checkPath
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|makeAbsolute
argument_list|(
name|file
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|result
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Pathname "
operator|+
name|result
operator|+
literal|" from "
operator|+
name|file
operator|+
literal|" is not a valid DFS filename."
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (FileStatus file, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getFileBlockLocations
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileBlockLocations (Path p, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|getBlockLocations
argument_list|(
name|getPathName
argument_list|(
name|p
argument_list|)
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**    * Used to query storage location information for a list of blocks. This list    * of blocks is normally constructed via a series of calls to    * {@link DistributedFileSystem#getFileBlockLocations(Path, long, long)} to    * get the blocks for ranges of a file.    *     * The returned array of {@link BlockStorageLocation} augments    * {@link BlockLocation} with a {@link VolumeId} per block replica. The    * VolumeId specifies the volume on the datanode on which the replica resides.    * The VolumeId has to be checked via {@link VolumeId#isValid()} before being    * used because volume information can be unavailable if the corresponding    * datanode is down or if the requested block is not found.    *     * This API is unstable, and datanode-side support is disabled by default. It    * can be enabled by setting "dfs.datanode.hdfs-blocks-metadata.enabled" to    * true.    *     * @param blocks    *          List of target BlockLocations to query volume location information    * @return volumeBlockLocations Augmented array of    *         {@link BlockStorageLocation}s containing additional volume location    *         information for each replica of each block.    */
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|method|getFileBlockStorageLocations ( List<BlockLocation> blocks)
specifier|public
name|BlockStorageLocation
index|[]
name|getFileBlockStorageLocations
parameter_list|(
name|List
argument_list|<
name|BlockLocation
argument_list|>
name|blocks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
throws|,
name|InvalidBlockTokenException
block|{
return|return
name|dfs
operator|.
name|getBlockStorageLocations
argument_list|(
name|blocks
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setVerifyChecksum (boolean verifyChecksum)
specifier|public
name|void
name|setVerifyChecksum
parameter_list|(
name|boolean
name|verifyChecksum
parameter_list|)
block|{
name|this
operator|.
name|verifyChecksum
operator|=
name|verifyChecksum
expr_stmt|;
block|}
comment|/**     * Start the lease recovery of a file    *    * @param f a file    * @return true if the file is already closed    * @throws IOException if an error occurs    */
DECL|method|recoverLease (Path f)
specifier|public
name|boolean
name|recoverLease
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|recoverLease
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|HdfsDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|DFSClient
operator|.
name|DFSDataInputStream
argument_list|(
name|dfs
operator|.
name|open
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|,
name|bufferSize
argument_list|,
name|verifyChecksum
argument_list|)
argument_list|)
return|;
block|}
comment|/** This optional operation is not yet supported. */
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|HdfsDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|append
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|,
name|bufferSize
argument_list|,
name|progress
argument_list|,
name|statistics
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|HdfsDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|create
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
name|overwrite
condition|?
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
else|:
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, EnumSet<CreateFlag> cflags, int bufferSize, short replication, long blockSize, Progressable progress, ChecksumOpt checksumOpt)
specifier|public
name|HdfsDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|cflags
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|ChecksumOpt
name|checksumOpt
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DFSOutputStream
name|out
init|=
name|dfs
operator|.
name|create
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|,
name|permission
argument_list|,
name|cflags
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|bufferSize
argument_list|,
name|checksumOpt
argument_list|)
decl_stmt|;
return|return
operator|new
name|HdfsDataOutputStream
argument_list|(
name|out
argument_list|,
name|statistics
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|primitiveCreate (Path f, FsPermission absolutePermission, EnumSet<CreateFlag> flag, int bufferSize, short replication, long blockSize, Progressable progress, ChecksumOpt checksumOpt)
specifier|protected
name|HdfsDataOutputStream
name|primitiveCreate
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|absolutePermission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|ChecksumOpt
name|checksumOpt
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|HdfsDataOutputStream
argument_list|(
name|dfs
operator|.
name|primitiveCreate
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|,
name|absolutePermission
argument_list|,
name|flag
argument_list|,
literal|true
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|bufferSize
argument_list|,
name|checksumOpt
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
comment|/**    * Same as create(), except fails if parent directory doesn't already exist.    */
annotation|@
name|Override
DECL|method|createNonRecursive (Path f, FsPermission permission, EnumSet<CreateFlag> flag, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|HdfsDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
condition|)
block|{
name|flag
operator|.
name|add
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|HdfsDataOutputStream
argument_list|(
name|dfs
operator|.
name|create
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|,
name|permission
argument_list|,
name|flag
argument_list|,
literal|false
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|bufferSize
argument_list|,
literal|null
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setReplication (Path src, short replication )
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|Path
name|src
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|setReplication
argument_list|(
name|getPathName
argument_list|(
name|src
argument_list|)
argument_list|,
name|replication
argument_list|)
return|;
block|}
comment|/**    * Move blocks from srcs to trg and delete srcs afterwards.    * The file block sizes must be the same.    *     * @param trg existing file to append to    * @param psrcs list of files (same block size, same replication)    * @throws IOException    */
annotation|@
name|Override
DECL|method|concat (Path trg, Path [] psrcs)
specifier|public
name|void
name|concat
parameter_list|(
name|Path
name|trg
parameter_list|,
name|Path
index|[]
name|psrcs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|srcs
init|=
operator|new
name|String
index|[
name|psrcs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|psrcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|srcs
index|[
name|i
index|]
operator|=
name|getPathName
argument_list|(
name|psrcs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|concat
argument_list|(
name|getPathName
argument_list|(
name|trg
argument_list|)
argument_list|,
name|srcs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|rename
argument_list|(
name|getPathName
argument_list|(
name|src
argument_list|)
argument_list|,
name|getPathName
argument_list|(
name|dst
argument_list|)
argument_list|)
return|;
block|}
comment|/**     * This rename operation is guaranteed to be atomic.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|rename (Path src, Path dst, Options.Rename... options)
specifier|public
name|void
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|,
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|rename
argument_list|(
name|getPathName
argument_list|(
name|src
argument_list|)
argument_list|,
name|getPathName
argument_list|(
name|dst
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|delete
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|,
name|recursive
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContentSummary (Path f)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
comment|/** Set a directory's quotas    * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#setQuota(String, long, long)     */
DECL|method|setQuota (Path src, long namespaceQuota, long diskspaceQuota)
specifier|public
name|void
name|setQuota
parameter_list|(
name|Path
name|src
parameter_list|,
name|long
name|namespaceQuota
parameter_list|,
name|long
name|diskspaceQuota
parameter_list|)
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|setQuota
argument_list|(
name|getPathName
argument_list|(
name|src
argument_list|)
argument_list|,
name|namespaceQuota
argument_list|,
name|diskspaceQuota
argument_list|)
expr_stmt|;
block|}
DECL|method|makeQualified (HdfsFileStatus f, Path parent)
specifier|private
name|FileStatus
name|makeQualified
parameter_list|(
name|HdfsFileStatus
name|f
parameter_list|,
name|Path
name|parent
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|f
operator|.
name|getLen
argument_list|()
argument_list|,
name|f
operator|.
name|isDir
argument_list|()
argument_list|,
name|f
operator|.
name|getReplication
argument_list|()
argument_list|,
name|f
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|f
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|f
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|f
operator|.
name|getPermission
argument_list|()
argument_list|,
name|f
operator|.
name|getOwner
argument_list|()
argument_list|,
name|f
operator|.
name|getGroup
argument_list|()
argument_list|,
operator|(
name|f
operator|.
name|getFullPath
argument_list|(
name|parent
argument_list|)
operator|)
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
return|;
comment|// fully-qualify path
block|}
DECL|method|makeQualifiedLocated ( HdfsLocatedFileStatus f, Path parent)
specifier|private
name|LocatedFileStatus
name|makeQualifiedLocated
parameter_list|(
name|HdfsLocatedFileStatus
name|f
parameter_list|,
name|Path
name|parent
parameter_list|)
block|{
return|return
operator|new
name|LocatedFileStatus
argument_list|(
name|f
operator|.
name|getLen
argument_list|()
argument_list|,
name|f
operator|.
name|isDir
argument_list|()
argument_list|,
name|f
operator|.
name|getReplication
argument_list|()
argument_list|,
name|f
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|f
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|f
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|f
operator|.
name|getPermission
argument_list|()
argument_list|,
name|f
operator|.
name|getOwner
argument_list|()
argument_list|,
name|f
operator|.
name|getGroup
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|(
name|f
operator|.
name|getFullPath
argument_list|(
name|parent
argument_list|)
operator|)
operator|.
name|makeQualified
argument_list|(
name|getUri
argument_list|()
argument_list|,
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|,
comment|// fully-qualify path
name|DFSUtil
operator|.
name|locatedBlocks2Locations
argument_list|(
name|f
operator|.
name|getBlockLocations
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * List all the entries of a directory    *    * Note that this operation is not atomic for a large directory.    * The entries of a directory may be fetched from NameNode multiple times.    * It only guarantees that  each name occurs once if a directory    * undergoes changes between the calls.    */
annotation|@
name|Override
DECL|method|listStatus (Path p)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|src
init|=
name|getPathName
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|// fetch the first batch of entries in the directory
name|DirectoryListing
name|thisListing
init|=
name|dfs
operator|.
name|listPaths
argument_list|(
name|src
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisListing
operator|==
literal|null
condition|)
block|{
comment|// the directory does not exist
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|p
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|HdfsFileStatus
index|[]
name|partialListing
init|=
name|thisListing
operator|.
name|getPartialListing
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|thisListing
operator|.
name|hasMore
argument_list|()
condition|)
block|{
comment|// got all entries of the directory
name|FileStatus
index|[]
name|stats
init|=
operator|new
name|FileStatus
index|[
name|partialListing
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partialListing
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|stats
index|[
name|i
index|]
operator|=
name|makeQualified
argument_list|(
name|partialListing
index|[
name|i
index|]
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
comment|// The directory size is too big that it needs to fetch more
comment|// estimate the total number of entries in the directory
name|int
name|totalNumEntries
init|=
name|partialListing
operator|.
name|length
operator|+
name|thisListing
operator|.
name|getRemainingEntries
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|listing
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|(
name|totalNumEntries
argument_list|)
decl_stmt|;
comment|// add the first batch of entries to the array list
for|for
control|(
name|HdfsFileStatus
name|fileStatus
range|:
name|partialListing
control|)
block|{
name|listing
operator|.
name|add
argument_list|(
name|makeQualified
argument_list|(
name|fileStatus
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementLargeReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// now fetch more entries
do|do
block|{
name|thisListing
operator|=
name|dfs
operator|.
name|listPaths
argument_list|(
name|src
argument_list|,
name|thisListing
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|thisListing
operator|==
literal|null
condition|)
block|{
comment|// the directory is deleted
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|p
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|partialListing
operator|=
name|thisListing
operator|.
name|getPartialListing
argument_list|()
expr_stmt|;
for|for
control|(
name|HdfsFileStatus
name|fileStatus
range|:
name|partialListing
control|)
block|{
name|listing
operator|.
name|add
argument_list|(
name|makeQualified
argument_list|(
name|fileStatus
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementLargeReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|thisListing
operator|.
name|hasMore
argument_list|()
condition|)
do|;
return|return
name|listing
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|listing
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listLocatedStatus (final Path p, final PathFilter filter)
specifier|protected
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|,
specifier|final
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
argument_list|()
block|{
specifier|private
name|DirectoryListing
name|thisListing
decl_stmt|;
specifier|private
name|int
name|i
decl_stmt|;
specifier|private
name|String
name|src
decl_stmt|;
specifier|private
name|LocatedFileStatus
name|curStat
init|=
literal|null
decl_stmt|;
block|{
comment|// initializer
name|src
operator|=
name|getPathName
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// fetch the first batch of entries in the directory
name|thisListing
operator|=
name|dfs
operator|.
name|listPaths
argument_list|(
name|src
argument_list|,
name|HdfsFileStatus
operator|.
name|EMPTY_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|thisListing
operator|==
literal|null
condition|)
block|{
comment|// the directory does not exist
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|p
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|curStat
operator|==
literal|null
operator|&&
name|hasNextNoFilter
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|next
init|=
name|makeQualifiedLocated
argument_list|(
operator|(
name|HdfsLocatedFileStatus
operator|)
name|thisListing
operator|.
name|getPartialListing
argument_list|()
index|[
name|i
operator|++
index|]
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|next
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|curStat
operator|=
name|next
expr_stmt|;
block|}
block|}
return|return
name|curStat
operator|!=
literal|null
return|;
block|}
comment|/** Check if there is a next item before applying the given filter */
specifier|private
name|boolean
name|hasNextNoFilter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|thisListing
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|i
operator|>=
name|thisListing
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
operator|&&
name|thisListing
operator|.
name|hasMore
argument_list|()
condition|)
block|{
comment|// current listing is exhausted& fetch a new listing
name|thisListing
operator|=
name|dfs
operator|.
name|listPaths
argument_list|(
name|src
argument_list|,
name|thisListing
operator|.
name|getLastName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|thisListing
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|i
operator|=
literal|0
expr_stmt|;
block|}
return|return
operator|(
name|i
operator|<
name|thisListing
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LocatedFileStatus
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|tmp
init|=
name|curStat
decl_stmt|;
name|curStat
operator|=
literal|null
expr_stmt|;
return|return
name|tmp
return|;
block|}
throw|throw
operator|new
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
argument_list|(
literal|"No more entry in "
operator|+
name|p
argument_list|)
throw|;
block|}
block|}
return|;
block|}
comment|/**    * Create a directory, only when the parent directories exist.    *    * See {@link FsPermission#applyUMask(FsPermission)} for details of how    * the permission is applied.    *    * @param f           The path to create    * @param permission  The permission.  See FsPermission#applyUMask for     *                    details about how this is used to calculate the    *                    effective permission.    */
DECL|method|mkdir (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdir
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|mkdirs
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|,
name|permission
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create a directory and its parent directories.    *    * See {@link FsPermission#applyUMask(FsPermission)} for details of how    * the permission is applied.    *    * @param f           The path to create    * @param permission  The permission.  See FsPermission#applyUMask for     *                    details about how this is used to calculate the    *                    effective permission.    */
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|mkdirs
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|,
name|permission
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|primitiveMkdir (Path f, FsPermission absolutePermission)
specifier|protected
name|boolean
name|primitiveMkdir
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|absolutePermission
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|primitiveMkdir
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|,
name|absolutePermission
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|dfs
operator|.
name|closeOutputStreams
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DFS["
operator|+
name|dfs
operator|+
literal|"]"
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getClient ()
specifier|public
name|DFSClient
name|getClient
parameter_list|()
block|{
return|return
name|dfs
return|;
block|}
annotation|@
name|Override
DECL|method|getStatus (Path p)
specifier|public
name|FsStatus
name|getStatus
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|getDiskStatus
argument_list|()
return|;
block|}
comment|/**    * Returns count of blocks with no good replicas left. Normally should be    * zero.    *     * @throws IOException    */
DECL|method|getMissingBlocksCount ()
specifier|public
name|long
name|getMissingBlocksCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|getMissingBlocksCount
argument_list|()
return|;
block|}
comment|/**    * Returns count of blocks with one of more replica missing.    *     * @throws IOException    */
DECL|method|getUnderReplicatedBlocksCount ()
specifier|public
name|long
name|getUnderReplicatedBlocksCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|getUnderReplicatedBlocksCount
argument_list|()
return|;
block|}
comment|/**    * Returns count of blocks with at least one replica marked corrupt.    *     * @throws IOException    */
DECL|method|getCorruptBlocksCount ()
specifier|public
name|long
name|getCorruptBlocksCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|getCorruptBlocksCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listCorruptFileBlocks (Path path)
specifier|public
name|RemoteIterator
argument_list|<
name|Path
argument_list|>
name|listCorruptFileBlocks
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CorruptFileBlockIterator
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/** @return datanode statistics. */
DECL|method|getDataNodeStats ()
specifier|public
name|DatanodeInfo
index|[]
name|getDataNodeStats
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getDataNodeStats
argument_list|(
name|DatanodeReportType
operator|.
name|ALL
argument_list|)
return|;
block|}
comment|/** @return datanode statistics for the given type. */
DECL|method|getDataNodeStats (final DatanodeReportType type )
specifier|public
name|DatanodeInfo
index|[]
name|getDataNodeStats
parameter_list|(
specifier|final
name|DatanodeReportType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|datanodeReport
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Enter, leave or get safe mode.    *      * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#setSafeMode(    *    HdfsConstants.SafeModeAction,boolean)    */
DECL|method|setSafeMode (HdfsConstants.SafeModeAction action)
specifier|public
name|boolean
name|setSafeMode
parameter_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|setSafeMode
argument_list|(
name|action
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Enter, leave or get safe mode.    *     * @param action    *          One of SafeModeAction.ENTER, SafeModeAction.LEAVE and    *          SafeModeAction.GET    * @param isChecked    *          If true check only for Active NNs status, else check first NN's    *          status    * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#setSafeMode(SafeModeAction, boolean)    */
DECL|method|setSafeMode (HdfsConstants.SafeModeAction action, boolean isChecked)
specifier|public
name|boolean
name|setSafeMode
parameter_list|(
name|HdfsConstants
operator|.
name|SafeModeAction
name|action
parameter_list|,
name|boolean
name|isChecked
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|action
argument_list|,
name|isChecked
argument_list|)
return|;
block|}
comment|/**    * Save namespace image.    *     * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#saveNamespace()    */
DECL|method|saveNamespace ()
specifier|public
name|void
name|saveNamespace
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|dfs
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
block|}
comment|/**    * Rolls the edit log on the active NameNode.    * Requires super-user privileges.    * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#rollEdits()    * @return the transaction ID of the newly created segment    */
DECL|method|rollEdits ()
specifier|public
name|long
name|rollEdits
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
return|return
name|dfs
operator|.
name|rollEdits
argument_list|()
return|;
block|}
comment|/**    * enable/disable/check restoreFaileStorage    *     * @see org.apache.hadoop.hdfs.protocol.ClientProtocol#restoreFailedStorage(String arg)    */
DECL|method|restoreFailedStorage (String arg)
specifier|public
name|boolean
name|restoreFailedStorage
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
return|return
name|dfs
operator|.
name|restoreFailedStorage
argument_list|(
name|arg
argument_list|)
return|;
block|}
comment|/**    * Refreshes the list of hosts and excluded hosts from the configured     * files.      */
DECL|method|refreshNodes ()
specifier|public
name|void
name|refreshNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|refreshNodes
argument_list|()
expr_stmt|;
block|}
comment|/**    * Finalize previously upgraded files system state.    * @throws IOException    */
DECL|method|finalizeUpgrade ()
specifier|public
name|void
name|finalizeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|finalizeUpgrade
argument_list|()
expr_stmt|;
block|}
comment|/*    * Requests the namenode to dump data strcutures into specified     * file.    */
DECL|method|metaSave (String pathname)
specifier|public
name|void
name|metaSave
parameter_list|(
name|String
name|pathname
parameter_list|)
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|metaSave
argument_list|(
name|pathname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|getServerDefaults
argument_list|()
return|;
block|}
comment|/**    * We need to find the blocks that didn't match.  Likely only one     * is corrupt but we will report both to the namenode.  In the future,    * we can consider figuring out exactly which block is corrupt.    */
comment|// We do not see a need for user to report block checksum errors and do not
comment|// want to rely on user to report block corruptions.
annotation|@
name|Deprecated
DECL|method|reportChecksumFailure (Path f, FSDataInputStream in, long inPos, FSDataInputStream sums, long sumsPos)
specifier|public
name|boolean
name|reportChecksumFailure
parameter_list|(
name|Path
name|f
parameter_list|,
name|FSDataInputStream
name|in
parameter_list|,
name|long
name|inPos
parameter_list|,
name|FSDataInputStream
name|sums
parameter_list|,
name|long
name|sumsPos
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|in
operator|instanceof
name|HdfsDataInputStream
operator|&&
name|sums
operator|instanceof
name|HdfsDataInputStream
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Input streams must be types of HdfsDataInputStream"
argument_list|)
throw|;
name|LocatedBlock
name|lblocks
index|[]
init|=
operator|new
name|LocatedBlock
index|[
literal|2
index|]
decl_stmt|;
comment|// Find block in data stream.
name|HdfsDataInputStream
name|dfsIn
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|in
decl_stmt|;
name|ExtendedBlock
name|dataBlock
init|=
name|dfsIn
operator|.
name|getCurrentBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataBlock
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error: Current block in data stream is null! "
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DatanodeInfo
index|[]
name|dataNode
init|=
block|{
name|dfsIn
operator|.
name|getCurrentDatanode
argument_list|()
block|}
decl_stmt|;
name|lblocks
index|[
literal|0
index|]
operator|=
operator|new
name|LocatedBlock
argument_list|(
name|dataBlock
argument_list|,
name|dataNode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found checksum error in data stream at "
operator|+
name|dataBlock
operator|+
literal|" on datanode="
operator|+
name|dataNode
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Find block in checksum stream
name|HdfsDataInputStream
name|dfsSums
init|=
operator|(
name|HdfsDataInputStream
operator|)
name|sums
decl_stmt|;
name|ExtendedBlock
name|sumsBlock
init|=
name|dfsSums
operator|.
name|getCurrentBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|sumsBlock
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error: Current block in checksum stream is null! "
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DatanodeInfo
index|[]
name|sumsNode
init|=
block|{
name|dfsSums
operator|.
name|getCurrentDatanode
argument_list|()
block|}
decl_stmt|;
name|lblocks
index|[
literal|1
index|]
operator|=
operator|new
name|LocatedBlock
argument_list|(
name|sumsBlock
argument_list|,
name|sumsNode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found checksum error in checksum stream at "
operator|+
name|sumsBlock
operator|+
literal|" on datanode="
operator|+
name|sumsNode
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Ask client to delete blocks.
name|dfs
operator|.
name|reportChecksumFailure
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|,
name|lblocks
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Returns the stat information about the file.    * @throws FileNotFoundException if the file does not exist.    */
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|HdfsFileStatus
name|fi
init|=
name|dfs
operator|.
name|getFileInfo
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|!=
literal|null
condition|)
block|{
return|return
name|makeQualified
argument_list|(
name|fi
argument_list|,
name|f
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFileChecksum (Path f)
specifier|public
name|MD5MD5CRC32FileChecksum
name|getFileChecksum
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|dfs
operator|.
name|getFileChecksum
argument_list|(
name|getPathName
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setPermission (Path p, FsPermission permission )
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setPermission
argument_list|(
name|getPathName
argument_list|(
name|p
argument_list|)
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setOwner (Path p, String username, String groupname )
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|username
operator|==
literal|null
operator|&&
name|groupname
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"username == null&& groupname == null"
argument_list|)
throw|;
block|}
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setOwner
argument_list|(
name|getPathName
argument_list|(
name|p
argument_list|)
argument_list|,
name|username
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTimes (Path p, long mtime, long atime )
specifier|public
name|void
name|setTimes
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setTimes
argument_list|(
name|getPathName
argument_list|(
name|p
argument_list|)
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultPort ()
specifier|protected
name|int
name|getDefaultPort
parameter_list|()
block|{
return|return
name|NameNode
operator|.
name|DEFAULT_PORT
return|;
block|}
annotation|@
name|Override
specifier|public
DECL|method|getDelegationToken (String renewer )
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|result
init|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
name|renewer
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Text
argument_list|(
name|renewer
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/*    * Delegation Token Operations    * These are DFS only operations.    */
comment|/**    * Get a valid Delegation Token.    *     * @param renewer Name of the designated renewer for the token    * @return Token<DelegationTokenIdentifier>    * @throws IOException    * @deprecated use {@link #getDelegationToken(String)}    */
annotation|@
name|Deprecated
DECL|method|getDelegationToken (Text renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDelegationToken
argument_list|(
name|renewer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Renew an existing delegation token.    *     * @param token delegation token obtained earlier    * @return the new expiration time    * @throws IOException    * @deprecated Use Token.renew instead.    */
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|token
operator|.
name|renew
argument_list|(
name|getConf
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Caught interrupted"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Cancel an existing delegation token.    *     * @param token delegation token    * @throws IOException    * @deprecated Use Token.cancel instead.    */
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|token
operator|.
name|cancel
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Caught interrupted"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
comment|/**    * Requests the namenode to tell all datanodes to use a new, non-persistent    * bandwidth value for dfs.balance.bandwidthPerSec.    * The bandwidth parameter is the max number of bytes per second of network    * bandwidth to be used by a datanode during balancing.    *    * @param bandwidth Blanacer bandwidth in bytes per second for all datanodes.    * @throws IOException    */
DECL|method|setBalancerBandwidth (long bandwidth)
specifier|public
name|void
name|setBalancerBandwidth
parameter_list|(
name|long
name|bandwidth
parameter_list|)
throws|throws
name|IOException
block|{
name|dfs
operator|.
name|setBalancerBandwidth
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a canonical service name for this file system. If the URI is logical,    * the hostname part of the URI will be returned.    * @return a service string that uniquely identifies this file system.    */
annotation|@
name|Override
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
return|return
name|dfs
operator|.
name|getCanonicalServiceName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|canonicalizeUri (URI uri)
specifier|protected
name|URI
name|canonicalizeUri
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
if|if
condition|(
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|uri
argument_list|)
condition|)
block|{
comment|// Don't try to DNS-resolve logical URIs, since the 'authority'
comment|// portion isn't a proper hostname
return|return
name|uri
return|;
block|}
else|else
block|{
return|return
name|NetUtils
operator|.
name|getCanonicalUri
argument_list|(
name|uri
argument_list|,
name|getDefaultPort
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Utility function that returns if the NameNode is in safemode or not. In HA    * mode, this API will return only ActiveNN's safemode status.    *     * @return true if NameNode is in safemode, false otherwise.    * @throws IOException    *           when there is an issue communicating with the NameNode    */
DECL|method|isInSafeMode ()
specifier|public
name|boolean
name|isInSafeMode
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_GET
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Get the close status of a file    * @param src The path to the file    *    * @return return true if file is closed    * @throws FileNotFoundException if the file does not exist.    * @throws IOException If an I/O error occurred         */
DECL|method|isFileClosed (Path src)
specifier|public
name|boolean
name|isFileClosed
parameter_list|(
name|Path
name|src
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|isFileClosed
argument_list|(
name|getPathName
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

