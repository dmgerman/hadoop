begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * File name distribution visitor.   *<p>  * It analyzes file names in fsimage and prints the following information:   *<li>Number of unique file names</li>   *<li>Number file names and the corresponding number range of files that use   * these same names</li>  *<li>Heap saved if the file name objects are reused</li>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|NameDistributionVisitor
specifier|public
class|class
name|NameDistributionVisitor
extends|extends
name|TextWriterImageVisitor
block|{
DECL|field|counts
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|NameDistributionVisitor (String filename, boolean printToScreen)
specifier|public
name|NameDistributionVisitor
parameter_list|(
name|String
name|filename
parameter_list|,
name|boolean
name|printToScreen
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|filename
argument_list|,
name|printToScreen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish ()
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|BYTEARRAY_OVERHEAD
init|=
literal|24
decl_stmt|;
name|write
argument_list|(
literal|"Total unique file names "
operator|+
name|counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Columns: Frequency of file occurrence, savings in heap, total files using
comment|// the name and number of file names
specifier|final
name|long
name|stats
index|[]
index|[]
init|=
block|{
block|{
literal|100000
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|10000
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|1000
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|100
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|10
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|5
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
name|int
name|highbound
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|counts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|highbound
operator|=
name|Math
operator|.
name|max
argument_list|(
name|highbound
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|>=
name|stats
index|[
name|i
index|]
index|[
literal|0
index|]
condition|)
block|{
name|stats
index|[
name|i
index|]
index|[
literal|1
index|]
operator|+=
operator|(
name|BYTEARRAY_OVERHEAD
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|)
operator|*
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|-
literal|1
operator|)
expr_stmt|;
name|stats
index|[
name|i
index|]
index|[
literal|2
index|]
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|stats
index|[
name|i
index|]
index|[
literal|3
index|]
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
name|long
name|lowbound
init|=
literal|0
decl_stmt|;
name|long
name|totalsavings
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
index|[]
name|stat
range|:
name|stats
control|)
block|{
name|lowbound
operator|=
name|stat
index|[
literal|0
index|]
expr_stmt|;
name|totalsavings
operator|+=
name|stat
index|[
literal|1
index|]
expr_stmt|;
name|String
name|range
init|=
name|lowbound
operator|==
name|highbound
condition|?
literal|" "
operator|+
name|lowbound
else|:
literal|" between "
operator|+
name|lowbound
operator|+
literal|"-"
operator|+
name|highbound
decl_stmt|;
name|write
argument_list|(
literal|"\n"
operator|+
name|stat
index|[
literal|3
index|]
operator|+
literal|" names are used by "
operator|+
name|stat
index|[
literal|2
index|]
operator|+
literal|" files"
operator|+
name|range
operator|+
literal|" times. Heap savings ~"
operator|+
name|stat
index|[
literal|1
index|]
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
name|highbound
operator|=
operator|(
name|int
operator|)
name|stat
index|[
literal|0
index|]
operator|-
literal|1
expr_stmt|;
block|}
name|write
argument_list|(
literal|"\n\nTotal saved heap ~"
operator|+
name|totalsavings
operator|+
literal|"bytes.\n"
argument_list|)
expr_stmt|;
name|super
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|visit (ImageElement element, String value)
name|void
name|visit
parameter_list|(
name|ImageElement
name|element
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|element
operator|==
name|ImageElement
operator|.
name|INODE_PATH
condition|)
block|{
name|String
name|filename
init|=
name|value
operator|.
name|substring
argument_list|(
name|value
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|counts
operator|.
name|containsKey
argument_list|(
name|filename
argument_list|)
condition|)
block|{
name|counts
operator|.
name|put
argument_list|(
name|filename
argument_list|,
name|counts
operator|.
name|get
argument_list|(
name|filename
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|counts
operator|.
name|put
argument_list|(
name|filename
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|leaveEnclosingElement ()
name|void
name|leaveEnclosingElement
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|start ()
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|visitEnclosingElement (ImageElement element)
name|void
name|visitEnclosingElement
parameter_list|(
name|ImageElement
name|element
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|visitEnclosingElement (ImageElement element, ImageElement key, String value)
name|void
name|visitEnclosingElement
parameter_list|(
name|ImageElement
name|element
parameter_list|,
name|ImageElement
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{   }
block|}
end_class

end_unit

