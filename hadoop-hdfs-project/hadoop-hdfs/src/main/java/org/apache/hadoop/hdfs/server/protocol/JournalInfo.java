begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Information that describes a journal  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|JournalInfo
specifier|public
class|class
name|JournalInfo
block|{
DECL|field|layoutVersion
specifier|private
specifier|final
name|int
name|layoutVersion
decl_stmt|;
DECL|field|clusterId
specifier|private
specifier|final
name|String
name|clusterId
decl_stmt|;
DECL|field|namespaceId
specifier|private
specifier|final
name|int
name|namespaceId
decl_stmt|;
DECL|method|JournalInfo (int lv, String clusterId, int nsId)
specifier|public
name|JournalInfo
parameter_list|(
name|int
name|lv
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|int
name|nsId
parameter_list|)
block|{
name|this
operator|.
name|layoutVersion
operator|=
name|lv
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
name|this
operator|.
name|namespaceId
operator|=
name|nsId
expr_stmt|;
block|}
DECL|method|getLayoutVersion ()
specifier|public
name|int
name|getLayoutVersion
parameter_list|()
block|{
return|return
name|layoutVersion
return|;
block|}
DECL|method|getClusterId ()
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
DECL|method|getNamespaceId ()
specifier|public
name|int
name|getNamespaceId
parameter_list|()
block|{
return|return
name|namespaceId
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lv="
argument_list|)
operator|.
name|append
argument_list|(
name|layoutVersion
argument_list|)
operator|.
name|append
argument_list|(
literal|";cid="
argument_list|)
operator|.
name|append
argument_list|(
name|clusterId
argument_list|)
operator|.
name|append
argument_list|(
literal|";nsid="
argument_list|)
operator|.
name|append
argument_list|(
name|namespaceId
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|JournalInfo
name|jInfo
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|JournalInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|jInfo
operator|=
operator|(
name|JournalInfo
operator|)
name|o
expr_stmt|;
return|return
operator|(
operator|(
name|jInfo
operator|.
name|clusterId
operator|.
name|equals
argument_list|(
name|this
operator|.
name|clusterId
argument_list|)
operator|)
operator|&&
operator|(
name|jInfo
operator|.
name|namespaceId
operator|==
name|this
operator|.
name|namespaceId
operator|)
operator|&&
operator|(
name|jInfo
operator|.
name|layoutVersion
operator|==
name|this
operator|.
name|layoutVersion
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|namespaceId
operator|^
name|layoutVersion
operator|^
name|clusterId
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

