begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVAILABLE_SPACE_BLOCK_PLACEMENT_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVAILABLE_SPACE_BLOCK_PLACEMENT_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * Space balanced block placement policy.  */
end_comment

begin_class
DECL|class|AvailableSpaceBlockPlacementPolicy
specifier|public
class|class
name|AvailableSpaceBlockPlacementPolicy
extends|extends
name|BlockPlacementPolicyDefault
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AvailableSpaceBlockPlacementPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RAND
specifier|private
specifier|static
specifier|final
name|Random
name|RAND
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|balancedPreference
specifier|private
name|int
name|balancedPreference
init|=
call|(
name|int
call|)
argument_list|(
literal|100
operator|*
name|DFS_NAMENODE_AVAILABLE_SPACE_BLOCK_PLACEMENT_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (Configuration conf, FSClusterStats stats, NetworkTopology clusterMap, Host2NodesMap host2datanodeMap)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSClusterStats
name|stats
parameter_list|,
name|NetworkTopology
name|clusterMap
parameter_list|,
name|Host2NodesMap
name|host2datanodeMap
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|stats
argument_list|,
name|clusterMap
argument_list|,
name|host2datanodeMap
argument_list|)
expr_stmt|;
name|float
name|balancedPreferencePercent
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|DFS_NAMENODE_AVAILABLE_SPACE_BLOCK_PLACEMENT_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY
argument_list|,
name|DFS_NAMENODE_AVAILABLE_SPACE_BLOCK_PLACEMENT_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Available space block placement policy initialized: "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AVAILABLE_SPACE_BLOCK_PLACEMENT_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY
operator|+
literal|" = "
operator|+
name|balancedPreferencePercent
argument_list|)
expr_stmt|;
if|if
condition|(
name|balancedPreferencePercent
operator|>
literal|1.0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The value of "
operator|+
name|DFS_NAMENODE_AVAILABLE_SPACE_BLOCK_PLACEMENT_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY
operator|+
literal|" is greater than 1.0 but should be in the range 0.0 - 1.0"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|balancedPreferencePercent
operator|<
literal|0.5
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The value of "
operator|+
name|DFS_NAMENODE_AVAILABLE_SPACE_BLOCK_PLACEMENT_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY
operator|+
literal|" is less than 0.5 so datanodes with more used percent will"
operator|+
literal|" receive  more block allocations."
argument_list|)
expr_stmt|;
block|}
name|balancedPreference
operator|=
call|(
name|int
call|)
argument_list|(
literal|100
operator|*
name|balancedPreferencePercent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|chooseDataNode (final String scope, final Collection<Node> excludedNode)
specifier|protected
name|DatanodeDescriptor
name|chooseDataNode
parameter_list|(
specifier|final
name|String
name|scope
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|Node
argument_list|>
name|excludedNode
parameter_list|)
block|{
name|DatanodeDescriptor
name|a
init|=
operator|(
name|DatanodeDescriptor
operator|)
name|clusterMap
operator|.
name|chooseRandom
argument_list|(
name|scope
argument_list|,
name|excludedNode
argument_list|)
decl_stmt|;
name|DatanodeDescriptor
name|b
init|=
operator|(
name|DatanodeDescriptor
operator|)
name|clusterMap
operator|.
name|chooseRandom
argument_list|(
name|scope
argument_list|,
name|excludedNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|b
operator|!=
literal|null
condition|)
block|{
name|int
name|ret
init|=
name|compareDataNode
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
return|return
name|a
return|;
block|}
elseif|else
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
block|{
return|return
operator|(
name|RAND
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|balancedPreference
operator|)
condition|?
name|a
else|:
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|RAND
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|balancedPreference
operator|)
condition|?
name|b
else|:
name|a
return|;
block|}
block|}
else|else
block|{
return|return
name|a
operator|==
literal|null
condition|?
name|b
else|:
name|a
return|;
block|}
block|}
comment|/**    * Compare the two data nodes.    */
DECL|method|compareDataNode (final DatanodeDescriptor a, final DatanodeDescriptor b)
specifier|protected
name|int
name|compareDataNode
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|a
parameter_list|,
specifier|final
name|DatanodeDescriptor
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|a
operator|.
name|getDfsUsedPercent
argument_list|()
operator|-
name|b
operator|.
name|getDfsUsedPercent
argument_list|()
argument_list|)
operator|<
literal|5
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|a
operator|.
name|getDfsUsedPercent
argument_list|()
operator|<
name|b
operator|.
name|getDfsUsedPercent
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
end_class

end_unit

