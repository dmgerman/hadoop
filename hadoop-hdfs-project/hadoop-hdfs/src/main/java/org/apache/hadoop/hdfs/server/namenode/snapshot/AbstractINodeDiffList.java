begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|NSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|BlocksMapUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Quota
import|;
end_import

begin_comment
comment|/**  * A list of snapshot diffs for storing snapshot data.  *  * @param<N> The {@link INode} type.  * @param<D> The diff type, which must extend {@link AbstractINodeDiff}.  */
end_comment

begin_class
DECL|class|AbstractINodeDiffList
specifier|abstract
class|class
name|AbstractINodeDiffList
parameter_list|<
name|N
extends|extends
name|INode
parameter_list|,
name|D
extends|extends
name|AbstractINodeDiff
parameter_list|<
name|N
parameter_list|,
name|D
parameter_list|>
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|D
argument_list|>
block|{
comment|/** Diff list sorted by snapshot IDs, i.e. in chronological order. */
DECL|field|diffs
specifier|private
specifier|final
name|List
argument_list|<
name|D
argument_list|>
name|diffs
init|=
operator|new
name|ArrayList
argument_list|<
name|D
argument_list|>
argument_list|()
decl_stmt|;
comment|/** @return this list as a unmodifiable {@link List}. */
DECL|method|asList ()
specifier|public
specifier|final
name|List
argument_list|<
name|D
argument_list|>
name|asList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|diffs
argument_list|)
return|;
block|}
comment|/** Get the size of the list and then clear it. */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|diffs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** @return an {@link AbstractINodeDiff}. */
DECL|method|createDiff (Snapshot snapshot, N currentINode)
specifier|abstract
name|D
name|createDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|N
name|currentINode
parameter_list|)
function_decl|;
comment|/** @return a snapshot copy of the current inode. */
DECL|method|createSnapshotCopy (N currentINode)
specifier|abstract
name|N
name|createSnapshotCopy
parameter_list|(
name|N
name|currentINode
parameter_list|)
function_decl|;
comment|/**    * Delete a snapshot. The synchronization of the diff list will be done     * outside. If the diff to remove is not the first one in the diff list, we     * need to combine the diff with its previous one.    *     * @param snapshot The snapshot to be deleted    * @param prior The snapshot taken before the to-be-deleted snapshot    * @param collectedBlocks Used to collect information for blocksMap update    * @return delta in namespace.     */
DECL|method|deleteSnapshotDiff (final Snapshot snapshot, Snapshot prior, final N currentINode, final BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes, boolean countDiffChange)
specifier|public
specifier|final
name|Quota
operator|.
name|Counts
name|deleteSnapshotDiff
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
name|Snapshot
name|prior
parameter_list|,
specifier|final
name|N
name|currentINode
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|,
name|boolean
name|countDiffChange
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|int
name|snapshotIndex
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|diffs
argument_list|,
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Quota
operator|.
name|Counts
name|counts
init|=
name|Quota
operator|.
name|Counts
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|D
name|removed
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|snapshotIndex
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|prior
operator|!=
literal|null
condition|)
block|{
comment|// set the snapshot to latestBefore
name|diffs
operator|.
name|get
argument_list|(
name|snapshotIndex
argument_list|)
operator|.
name|setSnapshot
argument_list|(
name|prior
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removed
operator|=
name|diffs
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|countDiffChange
condition|)
block|{
name|counts
operator|.
name|add
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the currentINode must be a descendant of a WithName node, which set
comment|// countDiffChange to false. In that case we should count in the diff
comment|// change when updating the quota usage in the current tree
name|currentINode
operator|.
name|addSpaceConsumed
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|counts
operator|.
name|add
argument_list|(
name|removed
operator|.
name|destroyDiffAndCollectBlocks
argument_list|(
name|currentINode
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|snapshotIndex
operator|>
literal|0
condition|)
block|{
specifier|final
name|AbstractINodeDiff
argument_list|<
name|N
argument_list|,
name|D
argument_list|>
name|previous
init|=
name|diffs
operator|.
name|get
argument_list|(
name|snapshotIndex
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|previous
operator|.
name|getSnapshot
argument_list|()
operator|.
name|equals
argument_list|(
name|prior
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|get
argument_list|(
name|snapshotIndex
argument_list|)
operator|.
name|setSnapshot
argument_list|(
name|prior
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// combine the to-be-removed diff with its previous diff
name|removed
operator|=
name|diffs
operator|.
name|remove
argument_list|(
name|snapshotIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|countDiffChange
condition|)
block|{
name|counts
operator|.
name|add
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentINode
operator|.
name|addSpaceConsumed
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previous
operator|.
name|snapshotINode
operator|==
literal|null
condition|)
block|{
name|previous
operator|.
name|snapshotINode
operator|=
name|removed
operator|.
name|snapshotINode
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|removed
operator|.
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
name|removed
operator|.
name|snapshotINode
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|counts
operator|.
name|add
argument_list|(
name|previous
operator|.
name|combinePosteriorAndCollectBlocks
argument_list|(
name|currentINode
argument_list|,
name|removed
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
argument_list|)
expr_stmt|;
name|previous
operator|.
name|setPosterior
argument_list|(
name|removed
operator|.
name|getPosterior
argument_list|()
argument_list|)
expr_stmt|;
name|removed
operator|.
name|setPosterior
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counts
return|;
block|}
comment|/** Add an {@link AbstractINodeDiff} for the given snapshot. */
DECL|method|addDiff (Snapshot latest, N currentINode)
specifier|final
name|D
name|addDiff
parameter_list|(
name|Snapshot
name|latest
parameter_list|,
name|N
name|currentINode
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|currentINode
operator|.
name|addSpaceConsumed
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|addLast
argument_list|(
name|createDiff
argument_list|(
name|latest
argument_list|,
name|currentINode
argument_list|)
argument_list|)
return|;
block|}
comment|/** Append the diff at the end of the list. */
DECL|method|addLast (D diff)
specifier|private
specifier|final
name|D
name|addLast
parameter_list|(
name|D
name|diff
parameter_list|)
block|{
specifier|final
name|D
name|last
init|=
name|getLast
argument_list|()
decl_stmt|;
name|diffs
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|.
name|setPosterior
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
comment|/** Add the diff to the beginning of the list. */
DECL|method|addFirst (D diff)
specifier|final
name|void
name|addFirst
parameter_list|(
name|D
name|diff
parameter_list|)
block|{
specifier|final
name|D
name|first
init|=
name|diffs
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|diffs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|diffs
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|diff
argument_list|)
expr_stmt|;
name|diff
operator|.
name|setPosterior
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
comment|/** @return the last diff. */
DECL|method|getLast ()
specifier|public
specifier|final
name|D
name|getLast
parameter_list|()
block|{
specifier|final
name|int
name|n
init|=
name|diffs
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|n
operator|==
literal|0
condition|?
literal|null
else|:
name|diffs
operator|.
name|get
argument_list|(
name|n
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** @return the last snapshot. */
DECL|method|getLastSnapshot ()
specifier|public
specifier|final
name|Snapshot
name|getLastSnapshot
parameter_list|()
block|{
specifier|final
name|AbstractINodeDiff
argument_list|<
name|N
argument_list|,
name|D
argument_list|>
name|last
init|=
name|getLast
argument_list|()
decl_stmt|;
return|return
name|last
operator|==
literal|null
condition|?
literal|null
else|:
name|last
operator|.
name|getSnapshot
argument_list|()
return|;
block|}
comment|/**    * Find the latest snapshot before a given snapshot.    * @param anchorId The returned snapshot's id must be<= or< this given     *                 snapshot id.    * @param exclusive True means the returned snapshot's id must be< the given    *                  id, otherwise<=.    * @return The latest snapshot before the given snapshot.    */
DECL|method|getPrior (int anchorId, boolean exclusive)
specifier|private
specifier|final
name|Snapshot
name|getPrior
parameter_list|(
name|int
name|anchorId
parameter_list|,
name|boolean
name|exclusive
parameter_list|)
block|{
if|if
condition|(
name|anchorId
operator|==
name|Snapshot
operator|.
name|INVALID_ID
condition|)
block|{
return|return
name|getLastSnapshot
argument_list|()
return|;
block|}
specifier|final
name|int
name|i
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|diffs
argument_list|,
name|anchorId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exclusive
condition|)
block|{
comment|// must be the one before
if|if
condition|(
name|i
operator|==
operator|-
literal|1
operator|||
name|i
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|int
name|priorIndex
init|=
name|i
operator|>
literal|0
condition|?
name|i
operator|-
literal|1
else|:
operator|-
name|i
operator|-
literal|2
decl_stmt|;
return|return
name|diffs
operator|.
name|get
argument_list|(
name|priorIndex
argument_list|)
operator|.
name|getSnapshot
argument_list|()
return|;
block|}
block|}
else|else
block|{
comment|// the one, or the one before if not existing
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
return|return
name|diffs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSnapshot
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|<
operator|-
literal|1
condition|)
block|{
return|return
name|diffs
operator|.
name|get
argument_list|(
operator|-
name|i
operator|-
literal|2
argument_list|)
operator|.
name|getSnapshot
argument_list|()
return|;
block|}
else|else
block|{
comment|// i == -1
return|return
literal|null
return|;
block|}
block|}
block|}
DECL|method|getPrior (int snapshotId)
specifier|public
specifier|final
name|Snapshot
name|getPrior
parameter_list|(
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|getPrior
argument_list|(
name|snapshotId
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Update the prior snapshot.    */
DECL|method|updatePrior (Snapshot snapshot, Snapshot prior)
specifier|final
name|Snapshot
name|updatePrior
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|Snapshot
name|prior
parameter_list|)
block|{
name|int
name|id
init|=
name|snapshot
operator|==
literal|null
condition|?
name|Snapshot
operator|.
name|INVALID_ID
else|:
name|snapshot
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Snapshot
name|s
init|=
name|getPrior
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
operator|(
name|prior
operator|==
literal|null
operator|||
name|Snapshot
operator|.
name|ID_COMPARATOR
operator|.
name|compare
argument_list|(
name|s
argument_list|,
name|prior
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
return|return
name|s
return|;
block|}
return|return
name|prior
return|;
block|}
comment|/**    * @return the diff corresponding to the given snapshot.    *         When the diff is null, it means that the current state and    *         the corresponding snapshot state are the same.     */
DECL|method|getDiff (Snapshot snapshot)
specifier|public
specifier|final
name|D
name|getDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|getDiffById
argument_list|(
name|snapshot
operator|==
literal|null
condition|?
name|Snapshot
operator|.
name|INVALID_ID
else|:
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getDiffById (final int snapshotId)
specifier|private
specifier|final
name|D
name|getDiffById
parameter_list|(
specifier|final
name|int
name|snapshotId
parameter_list|)
block|{
if|if
condition|(
name|snapshotId
operator|==
name|Snapshot
operator|.
name|INVALID_ID
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|i
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|diffs
argument_list|,
name|snapshotId
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
comment|// exact match
return|return
name|diffs
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
else|else
block|{
comment|// Exact match not found means that there were no changes between
comment|// given snapshot and the next state so that the diff for the given
comment|// snapshot was not recorded. Thus, return the next state.
specifier|final
name|int
name|j
init|=
operator|-
name|i
operator|-
literal|1
decl_stmt|;
return|return
name|j
operator|<
name|diffs
operator|.
name|size
argument_list|()
condition|?
name|diffs
operator|.
name|get
argument_list|(
name|j
argument_list|)
else|:
literal|null
return|;
block|}
block|}
comment|/**    * Search for the snapshot whose id is 1) no less than the given id,     * and 2) most close to the given id.    */
DECL|method|getSnapshotById (final int snapshotId)
specifier|public
specifier|final
name|Snapshot
name|getSnapshotById
parameter_list|(
specifier|final
name|int
name|snapshotId
parameter_list|)
block|{
name|D
name|diff
init|=
name|getDiffById
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
return|return
name|diff
operator|==
literal|null
condition|?
literal|null
else|:
name|diff
operator|.
name|getSnapshot
argument_list|()
return|;
block|}
comment|/**    * Check if changes have happened between two snapshots.    * @param earlier The snapshot taken earlier    * @param later The snapshot taken later    * @return Whether or not modifications (including diretory/file metadata    *         change, file creation/deletion under the directory) have happened    *         between snapshots.    */
DECL|method|changedBetweenSnapshots (Snapshot earlier, Snapshot later)
specifier|final
name|boolean
name|changedBetweenSnapshots
parameter_list|(
name|Snapshot
name|earlier
parameter_list|,
name|Snapshot
name|later
parameter_list|)
block|{
specifier|final
name|int
name|size
init|=
name|diffs
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|earlierDiffIndex
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|diffs
argument_list|,
name|earlier
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
name|earlierDiffIndex
operator|-
literal|1
operator|==
name|size
condition|)
block|{
comment|// if the earlierSnapshot is after the latest SnapshotDiff stored in
comment|// diffs, no modification happened after the earlierSnapshot
return|return
literal|false
return|;
block|}
if|if
condition|(
name|later
operator|!=
literal|null
condition|)
block|{
name|int
name|laterDiffIndex
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|diffs
argument_list|,
name|later
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|laterDiffIndex
operator|==
operator|-
literal|1
operator|||
name|laterDiffIndex
operator|==
literal|0
condition|)
block|{
comment|// if the laterSnapshot is the earliest SnapshotDiff stored in diffs, or
comment|// before it, no modification happened before the laterSnapshot
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @return the inode corresponding to the given snapshot.    *         Note that the current inode is returned if there is no change    *         between the given snapshot and the current state.     */
DECL|method|getSnapshotINode (final Snapshot snapshot, final N currentINode)
name|N
name|getSnapshotINode
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
specifier|final
name|N
name|currentINode
parameter_list|)
block|{
specifier|final
name|D
name|diff
init|=
name|getDiff
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
specifier|final
name|N
name|inode
init|=
name|diff
operator|==
literal|null
condition|?
literal|null
else|:
name|diff
operator|.
name|getSnapshotINode
argument_list|()
decl_stmt|;
return|return
name|inode
operator|==
literal|null
condition|?
name|currentINode
else|:
name|inode
return|;
block|}
comment|/**    * Check if the latest snapshot diff exists.  If not, add it.    * @return the latest snapshot diff, which is never null.    */
DECL|method|checkAndAddLatestSnapshotDiff (Snapshot latest, N currentINode)
specifier|final
name|D
name|checkAndAddLatestSnapshotDiff
parameter_list|(
name|Snapshot
name|latest
parameter_list|,
name|N
name|currentINode
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
specifier|final
name|D
name|last
init|=
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
name|Snapshot
operator|.
name|ID_COMPARATOR
operator|.
name|compare
argument_list|(
name|last
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|latest
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
name|last
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|addDiff
argument_list|(
name|latest
argument_list|,
name|currentINode
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NSQuotaExceededException
name|e
parameter_list|)
block|{
name|e
operator|.
name|setMessagePrefix
argument_list|(
literal|"Failed to record modification for snapshot"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/** Save the snapshot copy to the latest snapshot. */
DECL|method|saveSelf2Snapshot (Snapshot latest, N currentINode, N snapshotCopy)
specifier|public
name|void
name|saveSelf2Snapshot
parameter_list|(
name|Snapshot
name|latest
parameter_list|,
name|N
name|currentINode
parameter_list|,
name|N
name|snapshotCopy
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
if|if
condition|(
name|latest
operator|!=
literal|null
condition|)
block|{
name|D
name|diff
init|=
name|checkAndAddLatestSnapshotDiff
argument_list|(
name|latest
argument_list|,
name|currentINode
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|snapshotINode
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|snapshotCopy
operator|==
literal|null
condition|)
block|{
name|snapshotCopy
operator|=
name|createSnapshotCopy
argument_list|(
name|currentINode
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|saveSnapshotCopy
argument_list|(
name|snapshotCopy
argument_list|,
name|currentINode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|D
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|diffs
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|diffs
return|;
block|}
block|}
end_class

end_unit

