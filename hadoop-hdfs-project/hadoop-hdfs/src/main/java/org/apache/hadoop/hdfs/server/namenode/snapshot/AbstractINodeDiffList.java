begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|BlocksMapUpdateInfo
import|;
end_import

begin_comment
comment|/**  * A list of snapshot diffs for storing snapshot data.  *  * @param<N> The {@link INode} type.  * @param<D> The diff type, which must extend {@link AbstractINodeDiff}.  */
end_comment

begin_class
DECL|class|AbstractINodeDiffList
specifier|abstract
class|class
name|AbstractINodeDiffList
parameter_list|<
name|N
extends|extends
name|INode
parameter_list|,
name|D
extends|extends
name|AbstractINodeDiff
parameter_list|<
name|N
parameter_list|,
name|D
parameter_list|>
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|D
argument_list|>
block|{
comment|/** Diff list sorted by snapshot IDs, i.e. in chronological order. */
DECL|field|diffs
specifier|private
specifier|final
name|List
argument_list|<
name|D
argument_list|>
name|diffs
init|=
operator|new
name|ArrayList
argument_list|<
name|D
argument_list|>
argument_list|()
decl_stmt|;
comment|/** @return this list as a unmodifiable {@link List}. */
DECL|method|asList ()
specifier|final
name|List
argument_list|<
name|D
argument_list|>
name|asList
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|diffs
argument_list|)
return|;
block|}
comment|/** @return the current inode. */
DECL|method|getCurrentINode ()
specifier|abstract
name|N
name|getCurrentINode
parameter_list|()
function_decl|;
comment|/** Add a {@link AbstractINodeDiff} for the given snapshot and inode. */
DECL|method|addSnapshotDiff (Snapshot snapshot, N inode, boolean isSnapshotCreation)
specifier|abstract
name|D
name|addSnapshotDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|N
name|inode
parameter_list|,
name|boolean
name|isSnapshotCreation
parameter_list|)
function_decl|;
comment|/**    * Delete the snapshot with the given name. The synchronization of the diff    * list will be done outside.    *     * If the diff to remove is not the first one in the diff list, we need to     * combine the diff with its previous one:    *     * @param snapshot The snapshot to be deleted    * @param collectedBlocks Used to collect information for blocksMap update    * @return The SnapshotDiff containing the deleted snapshot.     *         Null if the snapshot with the given name does not exist.     */
DECL|method|deleteSnapshotDiff (final Snapshot snapshot, final BlocksMapUpdateInfo collectedBlocks)
specifier|final
name|D
name|deleteSnapshotDiff
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
name|int
name|snapshotIndex
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|diffs
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotIndex
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
specifier|final
name|D
name|removed
init|=
name|diffs
operator|.
name|remove
argument_list|(
name|snapshotIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotIndex
operator|>
literal|0
condition|)
block|{
comment|// combine the to-be-removed diff with its previous diff
specifier|final
name|AbstractINodeDiff
argument_list|<
name|N
argument_list|,
name|D
argument_list|>
name|previous
init|=
name|diffs
operator|.
name|get
argument_list|(
name|snapshotIndex
operator|-
literal|1
argument_list|)
decl_stmt|;
name|previous
operator|.
name|combinePosteriorAndCollectBlocks
argument_list|(
name|removed
argument_list|,
name|collectedBlocks
argument_list|)
expr_stmt|;
name|previous
operator|.
name|setPosterior
argument_list|(
name|removed
operator|.
name|getPosterior
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|removed
operator|.
name|setPosterior
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|removed
return|;
block|}
block|}
comment|/** Append the diff at the end of the list. */
DECL|method|append (D diff)
specifier|final
name|D
name|append
parameter_list|(
name|D
name|diff
parameter_list|)
block|{
specifier|final
name|AbstractINodeDiff
argument_list|<
name|N
argument_list|,
name|D
argument_list|>
name|last
init|=
name|getLast
argument_list|()
decl_stmt|;
name|diffs
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|.
name|setPosterior
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
comment|/** Insert the diff to the beginning of the list. */
DECL|method|insert (D diff)
specifier|final
name|void
name|insert
parameter_list|(
name|D
name|diff
parameter_list|)
block|{
name|diffs
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
comment|/** @return the last diff. */
DECL|method|getLast ()
specifier|final
name|D
name|getLast
parameter_list|()
block|{
specifier|final
name|int
name|n
init|=
name|diffs
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|n
operator|==
literal|0
condition|?
literal|null
else|:
name|diffs
operator|.
name|get
argument_list|(
name|n
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** @return the last snapshot. */
DECL|method|getLastSnapshot ()
specifier|final
name|Snapshot
name|getLastSnapshot
parameter_list|()
block|{
specifier|final
name|AbstractINodeDiff
argument_list|<
name|N
argument_list|,
name|D
argument_list|>
name|last
init|=
name|getLast
argument_list|()
decl_stmt|;
return|return
name|last
operator|==
literal|null
condition|?
literal|null
else|:
name|last
operator|.
name|getSnapshot
argument_list|()
return|;
block|}
comment|/**    * @return the diff corresponding to the given snapshot.    *         When the diff is null, it means that the current state and    *         the corresponding snapshot state are the same.     */
DECL|method|getDiff (Snapshot snapshot)
specifier|final
name|D
name|getDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
comment|// snapshot == null means the current state, therefore, return null.
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|i
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|diffs
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
comment|// exact match
return|return
name|diffs
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
else|else
block|{
comment|// Exact match not found means that there were no changes between
comment|// given snapshot and the next state so that the diff for the given
comment|// snapshot was not recorded.  Thus, return the next state.
specifier|final
name|int
name|j
init|=
operator|-
name|i
operator|-
literal|1
decl_stmt|;
return|return
name|j
operator|<
name|diffs
operator|.
name|size
argument_list|()
condition|?
name|diffs
operator|.
name|get
argument_list|(
name|j
argument_list|)
else|:
literal|null
return|;
block|}
block|}
comment|/**    * Check if the latest snapshot diff exists.  If not, add it.    * @return the latest snapshot diff, which is never null.    */
DECL|method|checkAndAddLatestSnapshotDiff (Snapshot latest)
specifier|final
name|D
name|checkAndAddLatestSnapshotDiff
parameter_list|(
name|Snapshot
name|latest
parameter_list|)
block|{
specifier|final
name|D
name|last
init|=
name|getLast
argument_list|()
decl_stmt|;
return|return
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|snapshot
operator|.
name|equals
argument_list|(
name|latest
argument_list|)
condition|?
name|last
else|:
name|addSnapshotDiff
argument_list|(
name|latest
argument_list|,
name|getCurrentINode
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|D
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|diffs
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"diffs="
operator|+
name|diffs
return|;
block|}
block|}
end_class

end_unit

