begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_comment
comment|/**  * A node type that can be built into a tree reflecting the  * hierarchy of replicas on the local disk.  */
end_comment

begin_class
DECL|class|LDir
class|class
name|LDir
block|{
DECL|field|dir
specifier|final
name|File
name|dir
decl_stmt|;
DECL|field|maxBlocksPerDir
specifier|final
name|int
name|maxBlocksPerDir
decl_stmt|;
DECL|field|numBlocks
specifier|private
name|int
name|numBlocks
init|=
literal|0
decl_stmt|;
DECL|field|children
specifier|private
name|LDir
index|[]
name|children
init|=
literal|null
decl_stmt|;
DECL|field|lastChildIdx
specifier|private
name|int
name|lastChildIdx
init|=
literal|0
decl_stmt|;
DECL|method|LDir (File dir, int maxBlocksPerDir)
name|LDir
parameter_list|(
name|File
name|dir
parameter_list|,
name|int
name|maxBlocksPerDir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|maxBlocksPerDir
operator|=
name|maxBlocksPerDir
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to mkdirs "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|File
index|[]
name|files
init|=
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LDir
argument_list|>
name|dirList
init|=
operator|new
name|ArrayList
argument_list|<
name|LDir
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|files
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|idx
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dirList
operator|.
name|add
argument_list|(
operator|new
name|LDir
argument_list|(
name|files
index|[
name|idx
index|]
argument_list|,
name|maxBlocksPerDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Block
operator|.
name|isBlockFilename
argument_list|(
name|files
index|[
name|idx
index|]
argument_list|)
condition|)
block|{
name|numBlocks
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dirList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|children
operator|=
name|dirList
operator|.
name|toArray
argument_list|(
operator|new
name|LDir
index|[
name|dirList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addBlock (Block b, File src)
name|File
name|addBlock
parameter_list|(
name|Block
name|b
parameter_list|,
name|File
name|src
parameter_list|)
throws|throws
name|IOException
block|{
comment|//First try without creating subdirectories
name|File
name|file
init|=
name|addBlock
argument_list|(
name|b
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|(
name|file
operator|!=
literal|null
operator|)
condition|?
name|file
else|:
name|addBlock
argument_list|(
name|b
argument_list|,
name|src
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|addBlock (Block b, File src, boolean createOk, boolean resetIdx )
specifier|private
name|File
name|addBlock
parameter_list|(
name|Block
name|b
parameter_list|,
name|File
name|src
parameter_list|,
name|boolean
name|createOk
parameter_list|,
name|boolean
name|resetIdx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numBlocks
operator|<
name|maxBlocksPerDir
condition|)
block|{
specifier|final
name|File
name|dest
init|=
name|FsDatasetImpl
operator|.
name|moveBlockFiles
argument_list|(
name|b
argument_list|,
name|src
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|numBlocks
operator|+=
literal|1
expr_stmt|;
return|return
name|dest
return|;
block|}
if|if
condition|(
name|lastChildIdx
operator|<
literal|0
operator|&&
name|resetIdx
condition|)
block|{
comment|//reset so that all children will be checked
name|lastChildIdx
operator|=
name|DFSUtil
operator|.
name|getRandom
argument_list|()
operator|.
name|nextInt
argument_list|(
name|children
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastChildIdx
operator|>=
literal|0
operator|&&
name|children
operator|!=
literal|null
condition|)
block|{
comment|//Check if any child-tree has room for a block.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|idx
init|=
operator|(
name|lastChildIdx
operator|+
name|i
operator|)
operator|%
name|children
operator|.
name|length
decl_stmt|;
name|File
name|file
init|=
name|children
index|[
name|idx
index|]
operator|.
name|addBlock
argument_list|(
name|b
argument_list|,
name|src
argument_list|,
literal|false
argument_list|,
name|resetIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|lastChildIdx
operator|=
name|idx
expr_stmt|;
return|return
name|file
return|;
block|}
block|}
name|lastChildIdx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|createOk
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|children
operator|==
literal|null
operator|||
name|children
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|children
operator|=
operator|new
name|LDir
index|[
name|maxBlocksPerDir
index|]
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|maxBlocksPerDir
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|File
name|sub
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|DataStorage
operator|.
name|BLOCK_SUBDIR_PREFIX
operator|+
name|idx
argument_list|)
decl_stmt|;
name|children
index|[
name|idx
index|]
operator|=
operator|new
name|LDir
argument_list|(
name|sub
argument_list|,
name|maxBlocksPerDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|//now pick a child randomly for creating a new set of subdirs.
name|lastChildIdx
operator|=
name|DFSUtil
operator|.
name|getRandom
argument_list|()
operator|.
name|nextInt
argument_list|(
name|children
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|children
index|[
name|lastChildIdx
index|]
operator|.
name|addBlock
argument_list|(
name|b
argument_list|,
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getVolumeMap (String bpid, ReplicaMap volumeMap, FsVolumeImpl volume )
name|void
name|getVolumeMap
parameter_list|(
name|String
name|bpid
parameter_list|,
name|ReplicaMap
name|volumeMap
parameter_list|,
name|FsVolumeImpl
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
index|[
name|i
index|]
operator|.
name|getVolumeMap
argument_list|(
name|bpid
argument_list|,
name|volumeMap
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
name|recoverTempUnlinkedBlock
argument_list|()
expr_stmt|;
name|volume
operator|.
name|addToReplicasMap
argument_list|(
name|bpid
argument_list|,
name|volumeMap
argument_list|,
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Recover unlinked tmp files on datanode restart. If the original block    * does not exist, then the tmp file is renamed to be the    * original file name; otherwise the tmp file is deleted.    */
DECL|method|recoverTempUnlinkedBlock ()
specifier|private
name|void
name|recoverTempUnlinkedBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|files
index|[]
init|=
name|FileUtil
operator|.
name|listFiles
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|FsDatasetUtil
operator|.
name|isUnlinkTmpFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|blockFile
init|=
name|FsDatasetUtil
operator|.
name|getOrigFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// If the original block file still exists, then no recovery  is needed.
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to cleanup unlinked tmp file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|renameTo
argument_list|(
name|blockFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to cleanup detached file "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * check if a data diretory is healthy    * @throws DiskErrorException    */
DECL|method|checkDirTree ()
name|void
name|checkDirTree
parameter_list|()
throws|throws
name|DiskErrorException
block|{
name|DiskChecker
operator|.
name|checkDir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
index|[
name|i
index|]
operator|.
name|checkDirTree
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|clearPath (File f)
name|void
name|clearPath
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|String
name|root
init|=
name|dir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|dir
init|=
name|f
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|startsWith
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|String
index|[]
name|dirNames
init|=
name|dir
operator|.
name|substring
argument_list|(
name|root
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
name|File
operator|.
name|separator
operator|+
name|DataStorage
operator|.
name|BLOCK_SUBDIR_PREFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|clearPath
argument_list|(
name|f
argument_list|,
name|dirNames
argument_list|,
literal|1
argument_list|)
condition|)
return|return;
block|}
name|clearPath
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * dirNames is an array of string integers derived from    * usual directory structure data/subdirN/subdirXY/subdirM ...    * If dirName array is non-null, we only check the child at     * the children[dirNames[idx]]. This avoids iterating over    * children in common case. If directory structure changes     * in later versions, we need to revisit this.    */
DECL|method|clearPath (File f, String[] dirNames, int idx)
specifier|private
name|boolean
name|clearPath
parameter_list|(
name|File
name|f
parameter_list|,
name|String
index|[]
name|dirNames
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
operator|(
name|dirNames
operator|==
literal|null
operator|||
name|idx
operator|==
name|dirNames
operator|.
name|length
operator|)
operator|&&
name|dir
operator|.
name|compareTo
argument_list|(
name|f
argument_list|)
operator|==
literal|0
condition|)
block|{
name|numBlocks
operator|--
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|dirNames
operator|!=
literal|null
condition|)
block|{
comment|//guess the child index from the directory name
if|if
condition|(
name|idx
operator|>
operator|(
name|dirNames
operator|.
name|length
operator|-
literal|1
operator|)
operator|||
name|children
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|childIdx
decl_stmt|;
try|try
block|{
name|childIdx
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dirNames
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ignored
parameter_list|)
block|{
comment|// layout changed? we could print a warning.
return|return
literal|false
return|;
block|}
return|return
operator|(
name|childIdx
operator|>=
literal|0
operator|&&
name|childIdx
operator|<
name|children
operator|.
name|length
operator|)
condition|?
name|children
index|[
name|childIdx
index|]
operator|.
name|clearPath
argument_list|(
name|f
argument_list|,
name|dirNames
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
else|:
literal|false
return|;
block|}
comment|//guesses failed. back to blind iteration.
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|children
index|[
name|i
index|]
operator|.
name|clearPath
argument_list|(
name|f
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FSDir{dir="
operator|+
name|dir
operator|+
literal|", children="
operator|+
operator|(
name|children
operator|==
literal|null
condition|?
literal|null
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|children
argument_list|)
operator|)
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

