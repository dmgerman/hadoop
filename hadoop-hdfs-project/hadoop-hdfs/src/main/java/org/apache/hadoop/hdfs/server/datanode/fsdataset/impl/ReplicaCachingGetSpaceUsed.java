begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|FSCachingGetSpaceUsed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ReplicaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsDatasetSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Fast and accurate class to tell how much space HDFS is using. This class gets  * hdfs used space from FsDatasetImpl#volumeMap#ReplicaInfos that uses an in  * memory way.  *  * Getting hdfs used space by ReplicaCachingGetSpaceUsed impl only includes  * block and meta files, but DU impl is blockpool dir based statistics that will  * include additional files, e.g. tmp dir, scanner.cursor file. Getting space  * used by DU impl will be greater than by ReplicaCachingGetSpaceUsed impl, but  * the latter is more accurate.  *  * Setting fs.getspaceused.classname to  * org.apache.hadoop.hdfs.server.datanode.fsdataset  * impl.ReplicaCachingGetSpaceUsed in your core-site.xml if we want to enable.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ReplicaCachingGetSpaceUsed
specifier|public
class|class
name|ReplicaCachingGetSpaceUsed
extends|extends
name|FSCachingGetSpaceUsed
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicaCachingGetSpaceUsed
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEEP_COPY_REPLICA_THRESHOLD_MS
specifier|private
specifier|static
specifier|final
name|long
name|DEEP_COPY_REPLICA_THRESHOLD_MS
init|=
literal|50
decl_stmt|;
DECL|field|REPLICA_CACHING_GET_SPACE_USED_THRESHOLD_MS
specifier|private
specifier|static
specifier|final
name|long
name|REPLICA_CACHING_GET_SPACE_USED_THRESHOLD_MS
init|=
literal|1000
decl_stmt|;
DECL|field|volume
specifier|private
specifier|final
name|FsVolumeImpl
name|volume
decl_stmt|;
DECL|field|bpid
specifier|private
specifier|final
name|String
name|bpid
decl_stmt|;
DECL|method|ReplicaCachingGetSpaceUsed (Builder builder)
specifier|public
name|ReplicaCachingGetSpaceUsed
parameter_list|(
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|setShouldFirstRefresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|volume
operator|=
name|builder
operator|.
name|getVolume
argument_list|()
expr_stmt|;
name|bpid
operator|=
name|builder
operator|.
name|getBpid
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|protected
name|void
name|refresh
parameter_list|()
block|{
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|long
name|dfsUsed
init|=
literal|0
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|FsDatasetSpi
name|fsDataset
init|=
name|volume
operator|.
name|getDataset
argument_list|()
decl_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|ReplicaInfo
argument_list|>
name|replicaInfos
init|=
operator|(
name|Collection
argument_list|<
name|ReplicaInfo
argument_list|>
operator|)
name|fsDataset
operator|.
name|deepCopyReplica
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|long
name|cost
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|cost
operator|>
name|DEEP_COPY_REPLICA_THRESHOLD_MS
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copy replica infos, blockPoolId: {}, replicas size: {}, "
operator|+
literal|"duration: {}ms"
argument_list|,
name|bpid
argument_list|,
name|replicaInfos
operator|.
name|size
argument_list|()
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|replicaInfos
argument_list|)
condition|)
block|{
for|for
control|(
name|ReplicaInfo
name|replicaInfo
range|:
name|replicaInfos
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|replicaInfo
operator|.
name|getVolume
argument_list|()
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|volume
operator|.
name|getStorageID
argument_list|()
argument_list|)
condition|)
block|{
name|dfsUsed
operator|+=
name|replicaInfo
operator|.
name|getBlockDataLength
argument_list|()
expr_stmt|;
name|dfsUsed
operator|+=
name|replicaInfo
operator|.
name|getMetadataLength
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|used
operator|.
name|set
argument_list|(
name|dfsUsed
argument_list|)
expr_stmt|;
name|cost
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
expr_stmt|;
if|if
condition|(
name|cost
operator|>
name|REPLICA_CACHING_GET_SPACE_USED_THRESHOLD_MS
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Refresh dfs used, bpid: {}, replicas size: {}, dfsUsed: {} "
operator|+
literal|"on volume: {}, duration: {}ms"
argument_list|,
name|bpid
argument_list|,
name|count
argument_list|,
name|used
argument_list|,
name|volume
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ReplicaCachingGetSpaceUsed refresh error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

