begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|UpgradeObjectCollection
operator|.
name|UOSignature
import|;
end_import

begin_comment
comment|/**  * Abstract upgrade object.  *   * Contains default implementation of common methods of {@link Upgradeable}  * interface.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|UpgradeObject
specifier|public
specifier|abstract
class|class
name|UpgradeObject
implements|implements
name|Upgradeable
block|{
DECL|field|status
specifier|protected
name|short
name|status
decl_stmt|;
DECL|method|getUpgradeStatus ()
specifier|public
name|short
name|getUpgradeStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Upgrade object for "
operator|+
name|getType
argument_list|()
operator|+
literal|" layout version "
operator|+
name|getVersion
argument_list|()
return|;
block|}
DECL|method|getUpgradeStatusReport (boolean details)
specifier|public
name|UpgradeStatusReport
name|getUpgradeStatusReport
parameter_list|(
name|boolean
name|details
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|UpgradeStatusReport
argument_list|(
name|getVersion
argument_list|()
argument_list|,
name|getUpgradeStatus
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|compareTo (Upgradeable o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Upgradeable
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getVersion
argument_list|()
operator|!=
name|o
operator|.
name|getVersion
argument_list|()
condition|)
return|return
operator|(
name|getVersion
argument_list|()
operator|>
name|o
operator|.
name|getVersion
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
name|int
name|res
init|=
name|this
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|0
condition|)
return|return
name|res
return|;
return|return
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|UpgradeObject
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|compareTo
argument_list|(
operator|(
name|UpgradeObject
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|UOSignature
argument_list|(
name|this
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

