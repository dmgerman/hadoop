begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_comment
comment|/**  * Computes running MD5-of-CRC over reconstructed chunk CRCs.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StripedBlockChecksumMd5CrcReconstructor
specifier|public
class|class
name|StripedBlockChecksumMd5CrcReconstructor
extends|extends
name|StripedBlockChecksumReconstructor
block|{
DECL|field|md5
specifier|private
name|MD5Hash
name|md5
decl_stmt|;
DECL|field|digester
specifier|private
name|MessageDigest
name|digester
decl_stmt|;
DECL|method|StripedBlockChecksumMd5CrcReconstructor (ErasureCodingWorker worker, StripedReconstructionInfo stripedReconInfo, DataOutputBuffer checksumWriter, long requestedBlockLength)
specifier|public
name|StripedBlockChecksumMd5CrcReconstructor
parameter_list|(
name|ErasureCodingWorker
name|worker
parameter_list|,
name|StripedReconstructionInfo
name|stripedReconInfo
parameter_list|,
name|DataOutputBuffer
name|checksumWriter
parameter_list|,
name|long
name|requestedBlockLength
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|worker
argument_list|,
name|stripedReconInfo
argument_list|,
name|checksumWriter
argument_list|,
name|requestedBlockLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDigestObject ()
specifier|public
name|Object
name|getDigestObject
parameter_list|()
block|{
return|return
name|md5
return|;
block|}
annotation|@
name|Override
DECL|method|prepareDigester ()
name|void
name|prepareDigester
parameter_list|()
throws|throws
name|IOException
block|{
name|digester
operator|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateDigester (byte[] checksumBytes, int dataBytesPerChecksum)
name|void
name|updateDigester
parameter_list|(
name|byte
index|[]
name|checksumBytes
parameter_list|,
name|int
name|dataBytesPerChecksum
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|digester
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Called updatedDigester with checksumBytes.length=%d, "
operator|+
literal|"dataBytesPerChecksum=%d but digester is null"
argument_list|,
name|checksumBytes
operator|.
name|length
argument_list|,
name|dataBytesPerChecksum
argument_list|)
argument_list|)
throw|;
block|}
name|digester
operator|.
name|update
argument_list|(
name|checksumBytes
argument_list|,
literal|0
argument_list|,
name|checksumBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|commitDigest ()
name|void
name|commitDigest
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|digester
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Called commitDigest() but digester is null"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|digest
init|=
name|digester
operator|.
name|digest
argument_list|()
decl_stmt|;
name|md5
operator|=
operator|new
name|MD5Hash
argument_list|(
name|digest
argument_list|)
expr_stmt|;
name|md5
operator|.
name|write
argument_list|(
name|getChecksumWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

