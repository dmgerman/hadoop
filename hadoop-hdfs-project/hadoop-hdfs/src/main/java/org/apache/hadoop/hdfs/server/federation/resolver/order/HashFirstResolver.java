begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver.order
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|order
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|PathLocation
import|;
end_import

begin_comment
comment|/**  * Variation of HashResolver that only uses the first level of the path.  */
end_comment

begin_class
DECL|class|HashFirstResolver
specifier|public
class|class
name|HashFirstResolver
extends|extends
name|HashResolver
block|{
annotation|@
name|Override
DECL|method|getFirstNamespace (final String path, final PathLocation loc)
specifier|public
name|String
name|getFirstNamespace
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|PathLocation
name|loc
parameter_list|)
block|{
name|String
name|srcPath
init|=
name|loc
operator|.
name|getSourcePath
argument_list|()
decl_stmt|;
name|String
name|trimmedPath
init|=
name|trimPathToChild
argument_list|(
name|path
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Only using the first part of the path: {} -> {}"
argument_list|,
name|path
argument_list|,
name|trimmedPath
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getFirstNamespace
argument_list|(
name|trimmedPath
argument_list|,
name|loc
argument_list|)
return|;
block|}
comment|/**    * Hash only up to the immediate child of the mount point. This prevents the    * need to create/maintain subtrees under each multi-destination mount point.    * Each child of a multi-destination mount is mapped to only one hash    * location.    *<p>    * Trims a path to at most the immediate child of a parent path. For example:    *<ul>    *<li>path = /a/b/c, parent = /a will be trimmed to /a/b.    *<li>path = /a/b, parent = /a/b will be trimmed to /a/b    *</ul>    *    * @param path The path to trim.    * @param parent The parent used to find the immediate child.    * @return Trimmed path.    */
DECL|method|trimPathToChild (String path, String parent)
specifier|private
specifier|static
name|String
name|trimPathToChild
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|parent
parameter_list|)
block|{
comment|// Path is invalid or equal to the parent
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|<=
name|parent
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|parent
return|;
block|}
name|String
name|remainder
init|=
name|path
operator|.
name|substring
argument_list|(
name|parent
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|components
init|=
name|remainder
operator|.
name|replaceFirst
argument_list|(
literal|"^/"
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|components
operator|.
name|length
operator|>
literal|0
operator|&&
name|components
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
return|return
name|parent
operator|+
name|components
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
name|parent
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|components
index|[
literal|0
index|]
return|;
block|}
block|}
else|else
block|{
return|return
name|parent
return|;
block|}
block|}
block|}
end_class

end_unit

