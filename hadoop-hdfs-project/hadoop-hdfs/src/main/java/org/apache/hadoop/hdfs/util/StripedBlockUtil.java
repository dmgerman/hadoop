begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Utility class for analyzing striped block groups  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StripedBlockUtil
specifier|public
class|class
name|StripedBlockUtil
block|{
comment|/**    * This method parses a striped block group into individual blocks.    *    * @param bg The striped block group    * @param cellSize The size of a striping cell    * @param dataBlkNum The number of data blocks    * @return An array containing the blocks in the group    */
DECL|method|parseStripedBlockGroup (LocatedStripedBlock bg, int cellSize, int dataBlkNum, int parityBlkNum)
specifier|public
specifier|static
name|LocatedBlock
index|[]
name|parseStripedBlockGroup
parameter_list|(
name|LocatedStripedBlock
name|bg
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|int
name|parityBlkNum
parameter_list|)
block|{
name|int
name|locatedBGSize
init|=
name|bg
operator|.
name|getBlockIndices
argument_list|()
operator|.
name|length
decl_stmt|;
comment|// TODO not considering missing blocks for now, only identify data blocks
name|LocatedBlock
index|[]
name|lbs
init|=
operator|new
name|LocatedBlock
index|[
name|dataBlkNum
operator|+
name|parityBlkNum
index|]
decl_stmt|;
for|for
control|(
name|short
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locatedBGSize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|idx
init|=
name|bg
operator|.
name|getBlockIndices
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|<
operator|(
name|dataBlkNum
operator|+
name|parityBlkNum
operator|)
operator|&&
name|lbs
index|[
name|idx
index|]
operator|==
literal|null
condition|)
block|{
name|lbs
index|[
name|idx
index|]
operator|=
name|constructInternalBlock
argument_list|(
name|bg
argument_list|,
name|i
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lbs
return|;
block|}
comment|/**    * This method creates an internal block at the given index of a block group    *    * @param idxInReturnedLocs The index in the stored locations in the    *                          {@link LocatedStripedBlock} object    * @param idxInBlockGroup The logical index in the striped block group    * @return The constructed internal block    */
DECL|method|constructInternalBlock (LocatedStripedBlock bg, int idxInReturnedLocs, int cellSize, int dataBlkNum, int idxInBlockGroup)
specifier|public
specifier|static
name|LocatedBlock
name|constructInternalBlock
parameter_list|(
name|LocatedStripedBlock
name|bg
parameter_list|,
name|int
name|idxInReturnedLocs
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|int
name|idxInBlockGroup
parameter_list|)
block|{
specifier|final
name|ExtendedBlock
name|blk
init|=
name|constructInternalBlock
argument_list|(
name|bg
operator|.
name|getBlock
argument_list|()
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|idxInBlockGroup
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocatedBlock
argument_list|(
name|blk
argument_list|,
operator|new
name|DatanodeInfo
index|[]
block|{
name|bg
operator|.
name|getLocations
argument_list|()
index|[
name|idxInReturnedLocs
index|]
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|bg
operator|.
name|getStorageIDs
argument_list|()
index|[
name|idxInReturnedLocs
index|]
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|bg
operator|.
name|getStorageTypes
argument_list|()
index|[
name|idxInReturnedLocs
index|]
block|}
argument_list|,
name|bg
operator|.
name|getStartOffset
argument_list|()
operator|+
name|idxInBlockGroup
operator|*
name|cellSize
argument_list|,
name|bg
operator|.
name|isCorrupt
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * This method creates an internal {@link ExtendedBlock} at the given index    * of a block group.    */
DECL|method|constructInternalBlock (ExtendedBlock blockGroup, int cellSize, int dataBlkNum, int idxInBlockGroup)
specifier|public
specifier|static
name|ExtendedBlock
name|constructInternalBlock
parameter_list|(
name|ExtendedBlock
name|blockGroup
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|int
name|idxInBlockGroup
parameter_list|)
block|{
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|blockGroup
argument_list|)
decl_stmt|;
name|block
operator|.
name|setBlockId
argument_list|(
name|blockGroup
operator|.
name|getBlockId
argument_list|()
operator|+
name|idxInBlockGroup
argument_list|)
expr_stmt|;
name|block
operator|.
name|setNumBytes
argument_list|(
name|getInternalBlockLength
argument_list|(
name|blockGroup
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|idxInBlockGroup
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|block
return|;
block|}
comment|/**    * This method creates an internal {@link ExtendedBlock} at the given index    * of a block group, for both data and parity block.    */
DECL|method|constructStripedBlock (ExtendedBlock blockGroup, int cellSize, int dataBlkNum, int idxInBlockGroup)
specifier|public
specifier|static
name|ExtendedBlock
name|constructStripedBlock
parameter_list|(
name|ExtendedBlock
name|blockGroup
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|int
name|idxInBlockGroup
parameter_list|)
block|{
name|ExtendedBlock
name|block
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|blockGroup
argument_list|)
decl_stmt|;
name|block
operator|.
name|setBlockId
argument_list|(
name|blockGroup
operator|.
name|getBlockId
argument_list|()
operator|+
name|idxInBlockGroup
argument_list|)
expr_stmt|;
name|block
operator|.
name|setNumBytes
argument_list|(
name|getStripedBlockLength
argument_list|(
name|blockGroup
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|idxInBlockGroup
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|block
return|;
block|}
comment|/**    * Returns an internal block length at the given index of a block group,    * for both data and parity block.    */
DECL|method|getStripedBlockLength (long numBytes, int cellSize, int dataBlkNum, int idxInBlockGroup)
specifier|public
specifier|static
name|long
name|getStripedBlockLength
parameter_list|(
name|long
name|numBytes
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|int
name|idxInBlockGroup
parameter_list|)
block|{
comment|// parity block length is the same as the first striped block length.
return|return
name|StripedBlockUtil
operator|.
name|getInternalBlockLength
argument_list|(
name|numBytes
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|idxInBlockGroup
operator|<
name|dataBlkNum
condition|?
name|idxInBlockGroup
else|:
literal|0
argument_list|)
return|;
block|}
comment|/**    * Get the size of an internal block at the given index of a block group    *    * @param dataSize Size of the block group only counting data blocks    * @param cellSize The size of a striping cell    * @param numDataBlocks The number of data blocks    * @param i The logical index in the striped block group    * @return The size of the internal block at the specified index    */
DECL|method|getInternalBlockLength (long dataSize, int cellSize, int numDataBlocks, int i)
specifier|public
specifier|static
name|long
name|getInternalBlockLength
parameter_list|(
name|long
name|dataSize
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|int
name|numDataBlocks
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|dataSize
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|cellSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|numDataBlocks
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|i
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// Size of each stripe (only counting data blocks)
specifier|final
name|int
name|stripeSize
init|=
name|cellSize
operator|*
name|numDataBlocks
decl_stmt|;
comment|// If block group ends at stripe boundary, each internal block has an equal
comment|// share of the group
specifier|final
name|int
name|lastStripeDataLen
init|=
call|(
name|int
call|)
argument_list|(
name|dataSize
operator|%
name|stripeSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastStripeDataLen
operator|==
literal|0
condition|)
block|{
return|return
name|dataSize
operator|/
name|numDataBlocks
return|;
block|}
specifier|final
name|int
name|numStripes
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|dataSize
operator|-
literal|1
operator|)
operator|/
name|stripeSize
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|numStripes
operator|-
literal|1L
operator|)
operator|*
name|cellSize
operator|+
name|lastCellSize
argument_list|(
name|lastStripeDataLen
argument_list|,
name|cellSize
argument_list|,
name|numDataBlocks
argument_list|,
name|i
argument_list|)
return|;
block|}
DECL|method|lastCellSize (int size, int cellSize, int numDataBlocks, int i)
specifier|private
specifier|static
name|int
name|lastCellSize
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|int
name|numDataBlocks
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
name|numDataBlocks
condition|)
block|{
comment|// parity block size (i.e. i>= numDataBlocks) is the same as
comment|// the first data block size (i.e. i = 0).
name|size
operator|-=
name|i
operator|*
name|cellSize
expr_stmt|;
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|size
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
name|size
operator|>
name|cellSize
condition|?
name|cellSize
else|:
name|size
return|;
block|}
comment|/**    * Given a byte's offset in an internal block, calculate the offset in    * the block group    */
DECL|method|offsetInBlkToOffsetInBG (int cellSize, int dataBlkNum, long offsetInBlk, int idxInBlockGroup)
specifier|public
specifier|static
name|long
name|offsetInBlkToOffsetInBG
parameter_list|(
name|int
name|cellSize
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|long
name|offsetInBlk
parameter_list|,
name|int
name|idxInBlockGroup
parameter_list|)
block|{
name|int
name|cellIdxInBlk
init|=
call|(
name|int
call|)
argument_list|(
name|offsetInBlk
operator|/
name|cellSize
argument_list|)
decl_stmt|;
return|return
name|cellIdxInBlk
operator|*
name|cellSize
operator|*
name|dataBlkNum
comment|// n full stripes before offset
operator|+
name|idxInBlockGroup
operator|*
name|cellSize
comment|// m full cells before offset
operator|+
name|offsetInBlk
operator|%
name|cellSize
return|;
comment|// partial cell
block|}
comment|/**    * This method plans the read portion from each block in the stripe    * @param dataBlkNum The number of data blocks in the striping group    * @param cellSize The size of each striping cell    * @param startInBlk Starting offset in the striped block    * @param len Length of the read request    * @param bufOffset  Initial offset in the result buffer    * @return array of {@link ReadPortion}, each representing the portion of I/O    *         for an individual block in the group    */
annotation|@
name|VisibleForTesting
DECL|method|planReadPortions (final int dataBlkNum, final int cellSize, final long startInBlk, final int len, int bufOffset)
specifier|public
specifier|static
name|ReadPortion
index|[]
name|planReadPortions
parameter_list|(
specifier|final
name|int
name|dataBlkNum
parameter_list|,
specifier|final
name|int
name|cellSize
parameter_list|,
specifier|final
name|long
name|startInBlk
parameter_list|,
specifier|final
name|int
name|len
parameter_list|,
name|int
name|bufOffset
parameter_list|)
block|{
name|ReadPortion
index|[]
name|results
init|=
operator|new
name|ReadPortion
index|[
name|dataBlkNum
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
operator|new
name|ReadPortion
argument_list|()
expr_stmt|;
block|}
comment|// cellIdxInBlk is the index of the cell in the block
comment|// E.g., cell_3 is the 2nd cell in blk_0
name|int
name|cellIdxInBlk
init|=
call|(
name|int
call|)
argument_list|(
name|startInBlk
operator|/
operator|(
name|cellSize
operator|*
name|dataBlkNum
operator|)
argument_list|)
decl_stmt|;
comment|// blkIdxInGroup is the index of the block in the striped block group
comment|// E.g., blk_2 is the 3rd block in the group
specifier|final
name|int
name|blkIdxInGroup
init|=
call|(
name|int
call|)
argument_list|(
name|startInBlk
operator|/
name|cellSize
operator|%
name|dataBlkNum
argument_list|)
decl_stmt|;
name|results
index|[
name|blkIdxInGroup
index|]
operator|.
name|setStartOffsetInBlock
argument_list|(
name|cellSize
operator|*
name|cellIdxInBlk
operator|+
name|startInBlk
operator|%
name|cellSize
argument_list|)
expr_stmt|;
name|boolean
name|crossStripe
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|blkIdxInGroup
operator|+
name|i
operator|>=
name|dataBlkNum
operator|&&
operator|!
name|crossStripe
condition|)
block|{
name|cellIdxInBlk
operator|++
expr_stmt|;
name|crossStripe
operator|=
literal|true
expr_stmt|;
block|}
name|results
index|[
operator|(
name|blkIdxInGroup
operator|+
name|i
operator|)
operator|%
name|dataBlkNum
index|]
operator|.
name|setStartOffsetInBlock
argument_list|(
name|cellSize
operator|*
name|cellIdxInBlk
argument_list|)
expr_stmt|;
block|}
name|int
name|firstCellLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|cellSize
operator|-
call|(
name|int
call|)
argument_list|(
name|startInBlk
operator|%
name|cellSize
argument_list|)
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|results
index|[
name|blkIdxInGroup
index|]
operator|.
name|offsetsInBuf
operator|.
name|add
argument_list|(
name|bufOffset
argument_list|)
expr_stmt|;
name|results
index|[
name|blkIdxInGroup
index|]
operator|.
name|lengths
operator|.
name|add
argument_list|(
name|firstCellLen
argument_list|)
expr_stmt|;
name|results
index|[
name|blkIdxInGroup
index|]
operator|.
name|addReadLength
argument_list|(
name|firstCellLen
argument_list|)
expr_stmt|;
name|int
name|i
init|=
operator|(
name|blkIdxInGroup
operator|+
literal|1
operator|)
operator|%
name|dataBlkNum
decl_stmt|;
for|for
control|(
name|int
name|done
init|=
name|firstCellLen
init|;
name|done
operator|<
name|len
condition|;
name|done
operator|+=
name|cellSize
control|)
block|{
name|ReadPortion
name|rp
init|=
name|results
index|[
name|i
index|]
decl_stmt|;
name|rp
operator|.
name|offsetsInBuf
operator|.
name|add
argument_list|(
name|done
operator|+
name|bufOffset
argument_list|)
expr_stmt|;
specifier|final
name|int
name|readLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
operator|-
name|done
argument_list|,
name|cellSize
argument_list|)
decl_stmt|;
name|rp
operator|.
name|lengths
operator|.
name|add
argument_list|(
name|readLen
argument_list|)
expr_stmt|;
name|rp
operator|.
name|addReadLength
argument_list|(
name|readLen
argument_list|)
expr_stmt|;
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|dataBlkNum
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * Get the next completed striped read task    *    * @return {@link StripedReadResult} indicating the status of the read task    *          succeeded, and the block index of the task. If the method times    *          out without getting any completed read tasks, -1 is returned as    *          block index.    * @throws InterruptedException    */
DECL|method|getNextCompletedStripedRead ( CompletionService<Void> readService, Map<Future<Void>, Integer> futures, final long threshold)
specifier|public
specifier|static
name|StripedReadResult
name|getNextCompletedStripedRead
parameter_list|(
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|readService
parameter_list|,
name|Map
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|futures
parameter_list|,
specifier|final
name|long
name|threshold
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|futures
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|threshold
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
try|try
block|{
name|future
operator|=
name|readService
operator|.
name|poll
argument_list|(
name|threshold
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
operator|new
name|StripedReadResult
argument_list|(
name|futures
operator|.
name|remove
argument_list|(
name|future
argument_list|)
argument_list|,
name|StripedReadResult
operator|.
name|SUCCESSFUL
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|StripedReadResult
argument_list|(
name|StripedReadResult
operator|.
name|TIMEOUT
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
return|return
operator|new
name|StripedReadResult
argument_list|(
name|futures
operator|.
name|remove
argument_list|(
name|future
argument_list|)
argument_list|,
name|StripedReadResult
operator|.
name|FAILED
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
return|return
operator|new
name|StripedReadResult
argument_list|(
name|futures
operator|.
name|remove
argument_list|(
name|future
argument_list|)
argument_list|,
name|StripedReadResult
operator|.
name|CANCELLED
argument_list|)
return|;
block|}
block|}
comment|/**    * Get the total usage of the striped blocks, which is the total of data    * blocks and parity blocks    *    * @param numDataBlkBytes    *          Size of the block group only counting data blocks    * @param dataBlkNum    *          The number of data blocks    * @param parityBlkNum    *          The number of parity blocks    * @param cellSize    *          The size of a striping cell    * @return The total usage of data blocks and parity blocks    */
DECL|method|spaceConsumedByStripedBlock (long numDataBlkBytes, int dataBlkNum, int parityBlkNum, int cellSize)
specifier|public
specifier|static
name|long
name|spaceConsumedByStripedBlock
parameter_list|(
name|long
name|numDataBlkBytes
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|int
name|parityBlkNum
parameter_list|,
name|int
name|cellSize
parameter_list|)
block|{
name|int
name|parityIndex
init|=
name|dataBlkNum
operator|+
literal|1
decl_stmt|;
name|long
name|numParityBlkBytes
init|=
name|getInternalBlockLength
argument_list|(
name|numDataBlkBytes
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|parityIndex
argument_list|)
operator|*
name|parityBlkNum
decl_stmt|;
return|return
name|numDataBlkBytes
operator|+
name|numParityBlkBytes
return|;
block|}
comment|/**    * This class represents the portion of I/O associated with each block in the    * striped block group.    */
DECL|class|ReadPortion
specifier|public
specifier|static
class|class
name|ReadPortion
block|{
comment|/**      * startOffsetInBlock      *     |      *     v      *     |<-lengths[0]->|<-  lengths[1]  ->|<-lengths[2]->|      * +------------------+------------------+----------------+      * |      cell_0      |      cell_3      |     cell_6     |<- blk_0      * +------------------+------------------+----------------+      *   _/                \_______________________      *  |                                          |      *  v offsetsInBuf[0]                          v offsetsInBuf[1]      * +------------------------------------------------------+      * |  cell_0     |      cell_1 and cell_2      |cell_3 ...|<- buf      * |  (partial)  |    (from blk_1 and blk_2)   |          |      * +------------------------------------------------------+      */
DECL|field|startOffsetInBlock
specifier|private
name|long
name|startOffsetInBlock
init|=
literal|0
decl_stmt|;
DECL|field|readLength
specifier|private
name|int
name|readLength
init|=
literal|0
decl_stmt|;
DECL|field|offsetsInBuf
specifier|public
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|offsetsInBuf
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|lengths
specifier|public
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|lengths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getOffsets ()
specifier|public
name|int
index|[]
name|getOffsets
parameter_list|()
block|{
name|int
index|[]
name|offsets
init|=
operator|new
name|int
index|[
name|offsetsInBuf
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|offsets
index|[
name|i
index|]
operator|=
name|offsetsInBuf
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|offsets
return|;
block|}
DECL|method|getLengths ()
specifier|public
name|int
index|[]
name|getLengths
parameter_list|()
block|{
name|int
index|[]
name|lens
init|=
operator|new
name|int
index|[
name|this
operator|.
name|lengths
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|lens
index|[
name|i
index|]
operator|=
name|this
operator|.
name|lengths
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|lens
return|;
block|}
DECL|method|getStartOffsetInBlock ()
specifier|public
name|long
name|getStartOffsetInBlock
parameter_list|()
block|{
return|return
name|startOffsetInBlock
return|;
block|}
DECL|method|getReadLength ()
specifier|public
name|int
name|getReadLength
parameter_list|()
block|{
return|return
name|readLength
return|;
block|}
DECL|method|setStartOffsetInBlock (long startOffsetInBlock)
specifier|public
name|void
name|setStartOffsetInBlock
parameter_list|(
name|long
name|startOffsetInBlock
parameter_list|)
block|{
name|this
operator|.
name|startOffsetInBlock
operator|=
name|startOffsetInBlock
expr_stmt|;
block|}
DECL|method|addReadLength (int extraLength)
name|void
name|addReadLength
parameter_list|(
name|int
name|extraLength
parameter_list|)
block|{
name|this
operator|.
name|readLength
operator|+=
name|extraLength
expr_stmt|;
block|}
block|}
comment|/**    * This class represents result from a striped read request.    * If the task was successful or the internal computation failed,    * an index is also returned.    */
DECL|class|StripedReadResult
specifier|public
specifier|static
class|class
name|StripedReadResult
block|{
DECL|field|SUCCESSFUL
specifier|public
specifier|static
specifier|final
name|int
name|SUCCESSFUL
init|=
literal|0x01
decl_stmt|;
DECL|field|FAILED
specifier|public
specifier|static
specifier|final
name|int
name|FAILED
init|=
literal|0x02
decl_stmt|;
DECL|field|TIMEOUT
specifier|public
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|0x04
decl_stmt|;
DECL|field|CANCELLED
specifier|public
specifier|static
specifier|final
name|int
name|CANCELLED
init|=
literal|0x08
decl_stmt|;
DECL|field|index
specifier|public
specifier|final
name|int
name|index
decl_stmt|;
DECL|field|state
specifier|public
specifier|final
name|int
name|state
decl_stmt|;
DECL|method|StripedReadResult (int state)
specifier|public
name|StripedReadResult
parameter_list|(
name|int
name|state
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|state
operator|==
name|TIMEOUT
argument_list|,
literal|"Only timeout result should return negative index."
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
DECL|method|StripedReadResult (int index, int state)
specifier|public
name|StripedReadResult
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|state
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|state
operator|!=
name|TIMEOUT
argument_list|,
literal|"Timeout result should return negative index."
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

