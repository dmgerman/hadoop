begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_comment
comment|/**  * Utility class for analyzing striped block groups  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StripedBlockUtil
specifier|public
class|class
name|StripedBlockUtil
block|{
comment|/**    * This method parses a striped block group into individual blocks.    *    * @param bg The striped block group    * @param cellSize The size of a striping cell    * @param dataBlkNum The number of data blocks    * @return An array containing the blocks in the group    */
DECL|method|parseStripedBlockGroup (LocatedStripedBlock bg, int cellSize, int dataBlkNum, int parityBlkNum)
specifier|public
specifier|static
name|LocatedBlock
index|[]
name|parseStripedBlockGroup
parameter_list|(
name|LocatedStripedBlock
name|bg
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|int
name|parityBlkNum
parameter_list|)
block|{
name|int
name|locatedBGSize
init|=
name|bg
operator|.
name|getBlockIndices
argument_list|()
operator|.
name|length
decl_stmt|;
comment|// TODO not considering missing blocks for now, only identify data blocks
name|LocatedBlock
index|[]
name|lbs
init|=
operator|new
name|LocatedBlock
index|[
name|dataBlkNum
operator|+
name|parityBlkNum
index|]
decl_stmt|;
for|for
control|(
name|short
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locatedBGSize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|idx
init|=
name|bg
operator|.
name|getBlockIndices
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|<
operator|(
name|dataBlkNum
operator|+
name|parityBlkNum
operator|)
operator|&&
name|lbs
index|[
name|idx
index|]
operator|==
literal|null
condition|)
block|{
name|lbs
index|[
name|idx
index|]
operator|=
name|constructInternalBlock
argument_list|(
name|bg
argument_list|,
name|i
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lbs
return|;
block|}
comment|/**    * This method creates an internal block at the given index of a block group    *    * @param idxInReturnedLocs The index in the stored locations in the    *                          {@link LocatedStripedBlock} object    * @param idxInBlockGroup The logical index in the striped block group    * @return The constructed internal block    */
DECL|method|constructInternalBlock (LocatedStripedBlock bg, int idxInReturnedLocs, int cellSize, int dataBlkNum, int idxInBlockGroup)
specifier|public
specifier|static
name|LocatedBlock
name|constructInternalBlock
parameter_list|(
name|LocatedStripedBlock
name|bg
parameter_list|,
name|int
name|idxInReturnedLocs
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|int
name|idxInBlockGroup
parameter_list|)
block|{
specifier|final
name|ExtendedBlock
name|blk
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|bg
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|blk
operator|.
name|setBlockId
argument_list|(
name|bg
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
operator|+
name|idxInBlockGroup
argument_list|)
expr_stmt|;
name|blk
operator|.
name|setNumBytes
argument_list|(
name|getInternalBlockLength
argument_list|(
name|bg
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|idxInBlockGroup
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|LocatedBlock
argument_list|(
name|blk
argument_list|,
operator|new
name|DatanodeInfo
index|[]
block|{
name|bg
operator|.
name|getLocations
argument_list|()
index|[
name|idxInReturnedLocs
index|]
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|bg
operator|.
name|getStorageIDs
argument_list|()
index|[
name|idxInReturnedLocs
index|]
block|}
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|bg
operator|.
name|getStorageTypes
argument_list|()
index|[
name|idxInReturnedLocs
index|]
block|}
argument_list|,
name|bg
operator|.
name|getStartOffset
argument_list|()
operator|+
name|idxInBlockGroup
operator|*
name|cellSize
argument_list|,
name|bg
operator|.
name|isCorrupt
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Get the size of an internal block at the given index of a block group    *    * @param numBytesInGroup Size of the block group only counting data blocks    * @param cellSize The size of a striping cell    * @param dataBlkNum The number of data blocks    * @param idxInGroup The logical index in the striped block group    * @return The size of the internal block at the specified index    */
DECL|method|getInternalBlockLength (long numBytesInGroup, int cellSize, int dataBlkNum, int idxInGroup)
specifier|public
specifier|static
name|long
name|getInternalBlockLength
parameter_list|(
name|long
name|numBytesInGroup
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|int
name|idxInGroup
parameter_list|)
block|{
comment|// Size of each stripe (only counting data blocks)
specifier|final
name|long
name|numBytesPerStripe
init|=
name|cellSize
operator|*
name|dataBlkNum
decl_stmt|;
assert|assert
name|numBytesPerStripe
operator|>
literal|0
operator|:
literal|"getInternalBlockLength should only be called on valid striped blocks"
assert|;
comment|// If block group ends at stripe boundary, each internal block has an equal
comment|// share of the group
if|if
condition|(
name|numBytesInGroup
operator|%
name|numBytesPerStripe
operator|==
literal|0
condition|)
block|{
return|return
name|numBytesInGroup
operator|/
name|dataBlkNum
return|;
block|}
name|int
name|numStripes
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|numBytesInGroup
operator|-
literal|1
operator|)
operator|/
name|numBytesPerStripe
operator|+
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|numStripes
operator|>=
literal|1
operator|:
literal|"There should be at least 1 stripe"
assert|;
comment|// All stripes but the last one are full stripes. The block should at least
comment|// contain (numStripes - 1) full cells.
name|long
name|blkSize
init|=
operator|(
name|numStripes
operator|-
literal|1
operator|)
operator|*
name|cellSize
decl_stmt|;
name|long
name|lastStripeLen
init|=
name|numBytesInGroup
operator|%
name|numBytesPerStripe
decl_stmt|;
comment|// Size of parity cells should equal the size of the first cell, if it
comment|// is not full.
name|long
name|lastParityCellLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|cellSize
argument_list|,
name|lastStripeLen
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxInGroup
operator|>=
name|dataBlkNum
condition|)
block|{
comment|// for parity blocks
name|blkSize
operator|+=
name|lastParityCellLen
expr_stmt|;
block|}
else|else
block|{
comment|// for data blocks
name|blkSize
operator|+=
name|Math
operator|.
name|min
argument_list|(
name|cellSize
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|lastStripeLen
operator|-
name|cellSize
operator|*
name|idxInGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|blkSize
return|;
block|}
comment|/**    * Given a byte's offset in an internal block, calculate the offset in    * the block group    */
DECL|method|offsetInBlkToOffsetInBG (int cellSize, int dataBlkNum, long offsetInBlk, int idxInBlockGroup)
specifier|public
specifier|static
name|long
name|offsetInBlkToOffsetInBG
parameter_list|(
name|int
name|cellSize
parameter_list|,
name|int
name|dataBlkNum
parameter_list|,
name|long
name|offsetInBlk
parameter_list|,
name|int
name|idxInBlockGroup
parameter_list|)
block|{
name|int
name|cellIdxInBlk
init|=
call|(
name|int
call|)
argument_list|(
name|offsetInBlk
operator|/
name|cellSize
argument_list|)
decl_stmt|;
return|return
name|cellIdxInBlk
operator|*
name|cellSize
operator|*
name|dataBlkNum
comment|// n full stripes before offset
operator|+
name|idxInBlockGroup
operator|*
name|cellSize
comment|// m full cells before offset
operator|+
name|offsetInBlk
operator|%
name|cellSize
return|;
comment|// partial cell
block|}
block|}
end_class

end_unit

