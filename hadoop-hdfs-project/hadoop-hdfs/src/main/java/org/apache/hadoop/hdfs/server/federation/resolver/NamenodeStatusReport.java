begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_comment
comment|/**  * Status of the namenode.  */
end_comment

begin_class
DECL|class|NamenodeStatusReport
specifier|public
class|class
name|NamenodeStatusReport
block|{
comment|/** Namenode information. */
DECL|field|nameserviceId
specifier|private
name|String
name|nameserviceId
init|=
literal|""
decl_stmt|;
DECL|field|namenodeId
specifier|private
name|String
name|namenodeId
init|=
literal|""
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
init|=
literal|""
decl_stmt|;
DECL|field|blockPoolId
specifier|private
name|String
name|blockPoolId
init|=
literal|""
decl_stmt|;
DECL|field|rpcAddress
specifier|private
name|String
name|rpcAddress
init|=
literal|""
decl_stmt|;
DECL|field|serviceAddress
specifier|private
name|String
name|serviceAddress
init|=
literal|""
decl_stmt|;
DECL|field|lifelineAddress
specifier|private
name|String
name|lifelineAddress
init|=
literal|""
decl_stmt|;
DECL|field|webAddress
specifier|private
name|String
name|webAddress
init|=
literal|""
decl_stmt|;
comment|/** Namenode state. */
DECL|field|status
specifier|private
name|HAServiceState
name|status
init|=
name|HAServiceState
operator|.
name|STANDBY
decl_stmt|;
DECL|field|safeMode
specifier|private
name|boolean
name|safeMode
init|=
literal|false
decl_stmt|;
comment|/** If the fields are valid. */
DECL|field|registrationValid
specifier|private
name|boolean
name|registrationValid
init|=
literal|false
decl_stmt|;
DECL|field|haStateValid
specifier|private
name|boolean
name|haStateValid
init|=
literal|false
decl_stmt|;
DECL|method|NamenodeStatusReport (String ns, String nn, String rpc, String service, String lifeline, String web)
specifier|public
name|NamenodeStatusReport
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|nn
parameter_list|,
name|String
name|rpc
parameter_list|,
name|String
name|service
parameter_list|,
name|String
name|lifeline
parameter_list|,
name|String
name|web
parameter_list|)
block|{
name|this
operator|.
name|nameserviceId
operator|=
name|ns
expr_stmt|;
name|this
operator|.
name|namenodeId
operator|=
name|nn
expr_stmt|;
name|this
operator|.
name|rpcAddress
operator|=
name|rpc
expr_stmt|;
name|this
operator|.
name|serviceAddress
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|lifelineAddress
operator|=
name|lifeline
expr_stmt|;
name|this
operator|.
name|webAddress
operator|=
name|web
expr_stmt|;
block|}
comment|/**    * If the registration is valid.    *    * @return If the registration is valid.    */
DECL|method|registrationValid ()
specifier|public
name|boolean
name|registrationValid
parameter_list|()
block|{
return|return
name|this
operator|.
name|registrationValid
return|;
block|}
comment|/**    * If the HA state is valid.    *    * @return If the HA state is valid.    */
DECL|method|haStateValid ()
specifier|public
name|boolean
name|haStateValid
parameter_list|()
block|{
return|return
name|this
operator|.
name|haStateValid
return|;
block|}
comment|/**    * Get the state of the Namenode being monitored.    *    * @return State of the Namenode.    */
DECL|method|getState ()
specifier|public
name|FederationNamenodeServiceState
name|getState
parameter_list|()
block|{
if|if
condition|(
operator|!
name|registrationValid
condition|)
block|{
return|return
name|FederationNamenodeServiceState
operator|.
name|UNAVAILABLE
return|;
block|}
elseif|else
if|if
condition|(
name|haStateValid
condition|)
block|{
return|return
name|FederationNamenodeServiceState
operator|.
name|getState
argument_list|(
name|status
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|FederationNamenodeServiceState
operator|.
name|ACTIVE
return|;
block|}
block|}
comment|/**    * Get the name service identifier.    *    * @return The name service identifier.    */
DECL|method|getNameserviceId ()
specifier|public
name|String
name|getNameserviceId
parameter_list|()
block|{
return|return
name|this
operator|.
name|nameserviceId
return|;
block|}
comment|/**    * Get the namenode identifier.    *    * @return The namenode identifier.    */
DECL|method|getNamenodeId ()
specifier|public
name|String
name|getNamenodeId
parameter_list|()
block|{
return|return
name|this
operator|.
name|namenodeId
return|;
block|}
comment|/**    * Get the cluster identifier.    *    * @return The cluster identifier.    */
DECL|method|getClusterId ()
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|this
operator|.
name|clusterId
return|;
block|}
comment|/**    * Get the block pool identifier.    *    * @return The block pool identifier.    */
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockPoolId
return|;
block|}
comment|/**    * Get the RPC address.    *    * @return The RPC address.    */
DECL|method|getRpcAddress ()
specifier|public
name|String
name|getRpcAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|rpcAddress
return|;
block|}
comment|/**    * Get the Service RPC address.    *    * @return The Service RPC address.    */
DECL|method|getServiceAddress ()
specifier|public
name|String
name|getServiceAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|serviceAddress
return|;
block|}
comment|/**    * Get the Lifeline RPC address.    *    * @return The Lifeline RPC address.    */
DECL|method|getLifelineAddress ()
specifier|public
name|String
name|getLifelineAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|lifelineAddress
return|;
block|}
comment|/**    * Get the web address.    *    * @return The web address.    */
DECL|method|getWebAddress ()
specifier|public
name|String
name|getWebAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|webAddress
return|;
block|}
comment|/**    * Get the HA service state.    *    * @return The HA service state.    */
DECL|method|setHAServiceState (HAServiceState state)
specifier|public
name|void
name|setHAServiceState
parameter_list|(
name|HAServiceState
name|state
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|haStateValid
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Set the namespace information.    *    * @param info Namespace information.    */
DECL|method|setNamespaceInfo (NamespaceInfo info)
specifier|public
name|void
name|setNamespaceInfo
parameter_list|(
name|NamespaceInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|info
operator|.
name|getClusterID
argument_list|()
expr_stmt|;
name|this
operator|.
name|blockPoolId
operator|=
name|info
operator|.
name|getBlockPoolID
argument_list|()
expr_stmt|;
name|this
operator|.
name|registrationValid
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|setSafeMode (boolean safemode)
specifier|public
name|void
name|setSafeMode
parameter_list|(
name|boolean
name|safemode
parameter_list|)
block|{
name|this
operator|.
name|safeMode
operator|=
name|safemode
expr_stmt|;
block|}
DECL|method|getSafemode ()
specifier|public
name|boolean
name|getSafemode
parameter_list|()
block|{
return|return
name|this
operator|.
name|safeMode
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s-%s:%s"
argument_list|,
name|nameserviceId
argument_list|,
name|namenodeId
argument_list|,
name|serviceAddress
argument_list|)
return|;
block|}
block|}
end_class

end_unit

