begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CachingGetSpaceUsed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GetSpaceUsed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsVolumeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Fast and accurate class to tell how much space HDFS is using.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|FSCachingGetSpaceUsed
specifier|public
specifier|abstract
class|class
name|FSCachingGetSpaceUsed
extends|extends
name|CachingGetSpaceUsed
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSCachingGetSpaceUsed
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|FSCachingGetSpaceUsed (Builder builder)
specifier|public
name|FSCachingGetSpaceUsed
parameter_list|(
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
comment|/**    * The builder class.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|GetSpaceUsed
operator|.
name|Builder
block|{
DECL|field|volume
specifier|private
name|FsVolumeImpl
name|volume
decl_stmt|;
DECL|field|bpid
specifier|private
name|String
name|bpid
decl_stmt|;
DECL|method|getVolume ()
specifier|public
name|FsVolumeImpl
name|getVolume
parameter_list|()
block|{
return|return
name|volume
return|;
block|}
DECL|method|setVolume (FsVolumeImpl fsVolume)
specifier|public
name|Builder
name|setVolume
parameter_list|(
name|FsVolumeImpl
name|fsVolume
parameter_list|)
block|{
name|this
operator|.
name|volume
operator|=
name|fsVolume
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getBpid ()
specifier|public
name|String
name|getBpid
parameter_list|()
block|{
return|return
name|bpid
return|;
block|}
DECL|method|setBpid (String bpid)
specifier|public
name|Builder
name|setBpid
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|GetSpaceUsed
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|Class
name|clazz
init|=
name|getKlass
argument_list|()
decl_stmt|;
if|if
condition|(
name|FSCachingGetSpaceUsed
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
try|try
block|{
name|setCons
argument_list|(
name|clazz
operator|.
name|getConstructor
argument_list|(
name|Builder
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|super
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

