begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|EnumSetParam
specifier|abstract
class|class
name|EnumSetParam
parameter_list|<
name|E
extends|extends
name|Enum
parameter_list|<
name|E
parameter_list|>
parameter_list|>
extends|extends
name|Param
argument_list|<
name|EnumSet
argument_list|<
name|E
argument_list|>
argument_list|,
name|EnumSetParam
operator|.
name|Domain
argument_list|<
name|E
argument_list|>
argument_list|>
block|{
comment|/** Convert an EnumSet to a string of comma separated values. */
DECL|method|toString (EnumSet<E> set)
specifier|static
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|E
argument_list|>
parameter_list|>
name|String
name|toString
parameter_list|(
name|EnumSet
argument_list|<
name|E
argument_list|>
name|set
parameter_list|)
block|{
if|if
condition|(
name|set
operator|==
literal|null
operator|||
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|E
argument_list|>
name|i
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|toEnumSet (final Class<E> clazz, final E... values)
specifier|static
parameter_list|<
name|E
extends|extends
name|Enum
argument_list|<
name|E
argument_list|>
parameter_list|>
name|EnumSet
argument_list|<
name|E
argument_list|>
name|toEnumSet
parameter_list|(
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|E
modifier|...
name|values
parameter_list|)
block|{
specifier|final
name|EnumSet
argument_list|<
name|E
argument_list|>
name|set
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
DECL|method|EnumSetParam (final Domain<E> domain, final EnumSet<E> value)
name|EnumSetParam
parameter_list|(
specifier|final
name|Domain
argument_list|<
name|E
argument_list|>
name|domain
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|E
argument_list|>
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|domain
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/** @return the parameter value as a string */
annotation|@
name|Override
DECL|method|getValueString ()
specifier|public
name|String
name|getValueString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/** The domain of the parameter. */
DECL|class|Domain
specifier|static
specifier|final
class|class
name|Domain
parameter_list|<
name|E
extends|extends
name|Enum
parameter_list|<
name|E
parameter_list|>
parameter_list|>
extends|extends
name|Param
operator|.
name|Domain
argument_list|<
name|EnumSet
argument_list|<
name|E
argument_list|>
argument_list|>
block|{
DECL|field|enumClass
specifier|private
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|enumClass
decl_stmt|;
DECL|method|Domain (String name, final Class<E> enumClass)
name|Domain
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|enumClass
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|enumClass
operator|=
name|enumClass
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDomain ()
specifier|public
specifier|final
name|String
name|getDomain
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|enumClass
operator|.
name|getEnumConstants
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** The string contains a comma separated values. */
annotation|@
name|Override
DECL|method|parse (final String str)
specifier|final
name|EnumSet
argument_list|<
name|E
argument_list|>
name|parse
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
specifier|final
name|EnumSet
argument_list|<
name|E
argument_list|>
name|set
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|enumClass
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|,
name|j
init|=
literal|0
init|;
name|j
operator|>=
literal|0
condition|;
control|)
block|{
name|i
operator|=
name|j
operator|>
literal|0
condition|?
name|j
operator|+
literal|1
else|:
literal|0
expr_stmt|;
name|j
operator|=
name|str
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|,
name|i
argument_list|)
expr_stmt|;
specifier|final
name|String
name|sub
init|=
name|j
operator|>=
literal|0
condition|?
name|str
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
else|:
name|str
operator|.
name|substring
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|Enum
operator|.
name|valueOf
argument_list|(
name|enumClass
argument_list|,
name|sub
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|set
return|;
block|}
block|}
block|}
end_class

end_unit

