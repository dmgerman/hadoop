begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ExtendedBlockWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ProtocolSignatureWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|InterDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_comment
comment|/**  * This class is used on the server side. Calls come across the wire for the  * protocol family of Release 23 onwards. This class translates the R23 data  * types to the internal data types used inside the DN as specified in the  * generic InterDatanodeProtocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|InterDatanodeProtocolServerSideTranslatorR23
specifier|public
class|class
name|InterDatanodeProtocolServerSideTranslatorR23
implements|implements
name|InterDatanodeWireProtocol
block|{
DECL|field|server
specifier|final
specifier|private
name|InterDatanodeProtocol
name|server
decl_stmt|;
comment|/**    *     * @param server - datanode server    * @throws IOException    */
DECL|method|InterDatanodeProtocolServerSideTranslatorR23 ( InterDatanodeProtocol server)
specifier|public
name|InterDatanodeProtocolServerSideTranslatorR23
parameter_list|(
name|InterDatanodeProtocol
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
comment|/**    * the client side will redirect getProtocolSignature to    * getProtocolSignature2.    *     * However the RPC layer below on the Server side will call getProtocolVersion    * and possibly in the future getProtocolSignature. Hence we still implement    * it even though the end client's call will never reach here.    */
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Don't forward this to the server. The protocol version and signature is      * that of {@link InterDatanodeProtocol}      */
if|if
condition|(
operator|!
name|protocol
operator|.
name|equals
argument_list|(
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|InterDatanodeWireProtocol
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Datanode Serverside implements "
operator|+
name|InterDatanodeWireProtocol
operator|.
name|class
operator|+
literal|". The following requested protocol is unknown: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|clientMethodsHash
argument_list|,
name|InterDatanodeWireProtocol
operator|.
name|versionID
argument_list|,
name|InterDatanodeWireProtocol
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature2 (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignatureWritable
name|getProtocolSignature2
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * Don't forward this to the server. The protocol version and signature is      * that of {@link ClientNamenodeProtocol}      */
return|return
name|ProtocolSignatureWritable
operator|.
name|convert
argument_list|(
name|this
operator|.
name|getProtocolSignature
argument_list|(
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|RPC
operator|.
name|getProtocolName
argument_list|(
name|InterDatanodeWireProtocol
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|InterDatanodeWireProtocol
operator|.
name|versionID
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Datanode Serverside implements "
operator|+
name|InterDatanodeWireProtocol
operator|.
name|class
operator|+
literal|". The following requested protocol is unknown: "
operator|+
name|protocol
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|initReplicaRecovery ( RecoveringBlockWritable rBlock)
specifier|public
name|ReplicaRecoveryInfoWritable
name|initReplicaRecovery
parameter_list|(
name|RecoveringBlockWritable
name|rBlock
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ReplicaRecoveryInfoWritable
operator|.
name|convert
argument_list|(
name|server
operator|.
name|initReplicaRecovery
argument_list|(
name|rBlock
operator|.
name|convert
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateReplicaUnderRecovery ( ExtendedBlockWritable oldBlock, long recoveryId, long newLength)
specifier|public
name|ExtendedBlockWritable
name|updateReplicaUnderRecovery
parameter_list|(
name|ExtendedBlockWritable
name|oldBlock
parameter_list|,
name|long
name|recoveryId
parameter_list|,
name|long
name|newLength
parameter_list|)
throws|throws
name|IOException
block|{
name|ExtendedBlock
name|b
init|=
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|oldBlock
argument_list|)
decl_stmt|;
return|return
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|server
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|b
argument_list|,
name|recoveryId
argument_list|,
name|newLength
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

