begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Information about a cache pool.  *   * CachePoolInfo permissions roughly map to Unix file permissions.  * Write permissions allow addition and removal of a {@link PathCacheEntry} from  * the pool. Execute permissions allow listing of PathCacheEntries in a pool.  * Read permissions have no associated meaning.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|CachePoolInfo
specifier|public
class|class
name|CachePoolInfo
block|{
DECL|field|poolName
specifier|private
name|String
name|poolName
decl_stmt|;
DECL|field|ownerName
specifier|private
name|String
name|ownerName
decl_stmt|;
DECL|field|groupName
specifier|private
name|String
name|groupName
decl_stmt|;
DECL|field|mode
specifier|private
name|FsPermission
name|mode
decl_stmt|;
DECL|field|weight
specifier|private
name|Integer
name|weight
decl_stmt|;
comment|/**    * For Builder use    */
DECL|method|CachePoolInfo ()
specifier|private
name|CachePoolInfo
parameter_list|()
block|{}
comment|/**    * Use a CachePoolInfo {@link Builder} to create a new CachePoolInfo with    * more parameters    */
DECL|method|CachePoolInfo (String poolName)
specifier|public
name|CachePoolInfo
parameter_list|(
name|String
name|poolName
parameter_list|)
block|{
name|this
operator|.
name|poolName
operator|=
name|poolName
expr_stmt|;
block|}
DECL|method|getPoolName ()
specifier|public
name|String
name|getPoolName
parameter_list|()
block|{
return|return
name|poolName
return|;
block|}
DECL|method|getOwnerName ()
specifier|public
name|String
name|getOwnerName
parameter_list|()
block|{
return|return
name|ownerName
return|;
block|}
DECL|method|getGroupName ()
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|groupName
return|;
block|}
DECL|method|getMode ()
specifier|public
name|FsPermission
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
DECL|method|getWeight ()
specifier|public
name|Integer
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
operator|.
name|append
argument_list|(
literal|"poolName:"
argument_list|)
operator|.
name|append
argument_list|(
name|poolName
argument_list|)
operator|.
name|append
argument_list|(
literal|", ownerName:"
argument_list|)
operator|.
name|append
argument_list|(
name|ownerName
argument_list|)
operator|.
name|append
argument_list|(
literal|", groupName:"
argument_list|)
operator|.
name|append
argument_list|(
name|groupName
argument_list|)
operator|.
name|append
argument_list|(
literal|", mode:"
argument_list|)
operator|.
name|append
argument_list|(
name|mode
argument_list|)
operator|.
name|append
argument_list|(
literal|", weight:"
argument_list|)
operator|.
name|append
argument_list|(
name|weight
argument_list|)
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|poolName
argument_list|)
operator|.
name|append
argument_list|(
name|ownerName
argument_list|)
operator|.
name|append
argument_list|(
name|groupName
argument_list|)
operator|.
name|append
argument_list|(
name|mode
operator|.
name|toShort
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|weight
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CachePoolInfo
name|rhs
init|=
operator|(
name|CachePoolInfo
operator|)
name|obj
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|poolName
argument_list|,
name|rhs
operator|.
name|poolName
argument_list|)
operator|.
name|append
argument_list|(
name|ownerName
argument_list|,
name|rhs
operator|.
name|ownerName
argument_list|)
operator|.
name|append
argument_list|(
name|groupName
argument_list|,
name|rhs
operator|.
name|groupName
argument_list|)
operator|.
name|append
argument_list|(
name|mode
argument_list|,
name|rhs
operator|.
name|mode
argument_list|)
operator|.
name|append
argument_list|(
name|weight
argument_list|,
name|rhs
operator|.
name|weight
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
DECL|method|newBuilder (CachePoolInfo info)
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|info
argument_list|)
return|;
block|}
comment|/**    * CachePoolInfo Builder    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|info
specifier|private
name|CachePoolInfo
name|info
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|this
operator|.
name|info
operator|=
operator|new
name|CachePoolInfo
argument_list|()
expr_stmt|;
block|}
DECL|method|Builder (CachePoolInfo info)
specifier|public
name|Builder
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
DECL|method|build ()
specifier|public
name|CachePoolInfo
name|build
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|info
operator|.
name|poolName
argument_list|,
literal|"Cannot create a CachePoolInfo without a pool name"
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|method|setPoolName (String poolName)
specifier|public
name|Builder
name|setPoolName
parameter_list|(
name|String
name|poolName
parameter_list|)
block|{
name|info
operator|.
name|poolName
operator|=
name|poolName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOwnerName (String ownerName)
specifier|public
name|Builder
name|setOwnerName
parameter_list|(
name|String
name|ownerName
parameter_list|)
block|{
name|info
operator|.
name|ownerName
operator|=
name|ownerName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setGroupName (String groupName)
specifier|public
name|Builder
name|setGroupName
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|info
operator|.
name|groupName
operator|=
name|groupName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMode (FsPermission mode)
specifier|public
name|Builder
name|setMode
parameter_list|(
name|FsPermission
name|mode
parameter_list|)
block|{
name|info
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setWeight (Integer weight)
specifier|public
name|Builder
name|setWeight
parameter_list|(
name|Integer
name|weight
parameter_list|)
block|{
name|info
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

