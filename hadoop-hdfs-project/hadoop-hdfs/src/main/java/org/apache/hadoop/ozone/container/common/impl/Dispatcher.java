begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Ozone Container dispatcher takes a call from the netty server and routes it  * to the right handler function.  */
end_comment

begin_class
DECL|class|Dispatcher
specifier|public
class|class
name|Dispatcher
implements|implements
name|ContainerDispatcher
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerManager
specifier|private
specifier|final
name|ContainerManager
name|containerManager
decl_stmt|;
comment|/**    * Constructs an OzoneContainer that receives calls from    * XceiverServerHandler.    *    * @param containerManager - A class that manages containers.    */
DECL|method|Dispatcher (ContainerManager containerManager)
specifier|public
name|Dispatcher
parameter_list|(
name|ContainerManager
name|containerManager
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerManager
operator|=
name|containerManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dispatch ( ContainerCommandRequestProto msg)
specifier|public
name|ContainerCommandResponseProto
name|dispatch
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|Type
name|cmdType
init|=
name|msg
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|cmdType
operator|==
name|Type
operator|.
name|CreateContainer
operator|)
operator|||
operator|(
name|cmdType
operator|==
name|Type
operator|.
name|DeleteContainer
operator|)
operator|||
operator|(
name|cmdType
operator|==
name|Type
operator|.
name|ReadContainer
operator|)
operator|||
operator|(
name|cmdType
operator|==
name|Type
operator|.
name|ListContainer
operator|)
operator|||
operator|(
name|cmdType
operator|==
name|Type
operator|.
name|UpdateContainer
operator|)
condition|)
block|{
return|return
name|containerProcessHandler
argument_list|(
name|msg
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
name|cmdType
operator|==
name|Type
operator|.
name|WriteChunk
operator|)
operator|||
operator|(
name|cmdType
operator|==
name|Type
operator|.
name|ReadChunk
operator|)
operator|||
operator|(
name|cmdType
operator|==
name|Type
operator|.
name|DeleteChunk
operator|)
condition|)
block|{
return|return
name|chunkProcessHandler
argument_list|(
name|msg
argument_list|)
return|;
block|}
return|return
name|ContainerUtils
operator|.
name|unsupportedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
comment|/**    * Handles the all Container related functionality.    *    * @param msg - command    * @return - response    * @throws IOException    */
DECL|method|containerProcessHandler ( ContainerCommandRequestProto msg)
specifier|private
name|ContainerCommandResponseProto
name|containerProcessHandler
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
switch|switch
condition|(
name|msg
operator|.
name|getCmdType
argument_list|()
condition|)
block|{
case|case
name|CreateContainer
case|:
return|return
name|handleCreateContainer
argument_list|(
name|msg
argument_list|)
return|;
case|case
name|DeleteContainer
case|:
return|return
name|handleDeleteContainer
argument_list|(
name|msg
argument_list|)
return|;
case|case
name|ListContainer
case|:
comment|// TODO : Support List Container.
return|return
name|ContainerUtils
operator|.
name|unsupportedRequest
argument_list|(
name|msg
argument_list|)
return|;
case|case
name|UpdateContainer
case|:
comment|// TODO : Support Update Container.
return|return
name|ContainerUtils
operator|.
name|unsupportedRequest
argument_list|(
name|msg
argument_list|)
return|;
case|case
name|ReadContainer
case|:
return|return
name|handleReadContainer
argument_list|(
name|msg
argument_list|)
return|;
default|default:
return|return
name|ContainerUtils
operator|.
name|unsupportedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container operation failed. "
operator|+
literal|"Container: {} Operation: {}  trace ID: {} Error: {}"
argument_list|,
name|msg
operator|.
name|getCreateContainer
argument_list|()
operator|.
name|getContainerData
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|msg
operator|.
name|getCmdType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|msg
operator|.
name|getTraceID
argument_list|()
argument_list|,
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO : Replace with finer error codes.
return|return
name|ContainerUtils
operator|.
name|getContainerResponse
argument_list|(
name|msg
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_INTERNAL_ERROR
argument_list|,
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**    * Handles the all chunk related functionality.    *    * @param msg - command    * @return - response    * @throws IOException    */
DECL|method|chunkProcessHandler ( ContainerCommandRequestProto msg)
specifier|private
name|ContainerCommandResponseProto
name|chunkProcessHandler
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
switch|switch
condition|(
name|msg
operator|.
name|getCmdType
argument_list|()
condition|)
block|{
case|case
name|WriteChunk
case|:
return|return
name|handleWriteChunk
argument_list|(
name|msg
argument_list|)
return|;
case|case
name|ReadChunk
case|:
return|return
name|handleReadChunk
argument_list|(
name|msg
argument_list|)
return|;
case|case
name|DeleteChunk
case|:
return|return
name|handleDeleteChunk
argument_list|(
name|msg
argument_list|)
return|;
case|case
name|ListChunk
case|:
return|return
name|ContainerUtils
operator|.
name|unsupportedRequest
argument_list|(
name|msg
argument_list|)
return|;
default|default:
return|return
name|ContainerUtils
operator|.
name|unsupportedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container operation failed. "
operator|+
literal|"Container: {} Operation: {}  trace ID: {} Error: {}"
argument_list|,
name|msg
operator|.
name|getCreateContainer
argument_list|()
operator|.
name|getContainerData
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|msg
operator|.
name|getCmdType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|msg
operator|.
name|getTraceID
argument_list|()
argument_list|,
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO : Replace with finer error codes.
return|return
name|ContainerUtils
operator|.
name|getContainerResponse
argument_list|(
name|msg
argument_list|,
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_INTERNAL_ERROR
argument_list|,
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**    * Calls into container logic and returns appropriate response.    *    * @param msg - Request    * @return ContainerCommandResponseProto    * @throws IOException    */
DECL|method|handleReadContainer ( ContainerCommandRequestProto msg)
specifier|private
name|ContainerCommandResponseProto
name|handleReadContainer
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|msg
operator|.
name|hasReadContainer
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed read container request. trace ID: {}"
argument_list|,
name|msg
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
name|String
name|name
init|=
name|msg
operator|.
name|getReadContainer
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ContainerData
name|container
init|=
name|this
operator|.
name|containerManager
operator|.
name|readContainer
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|ContainerUtils
operator|.
name|getReadContainerResponse
argument_list|(
name|msg
argument_list|,
name|container
argument_list|)
return|;
block|}
comment|/**    * Calls into container logic and returns appropriate response.    *    * @param msg - Request    * @return Response.    * @throws IOException    */
DECL|method|handleDeleteContainer ( ContainerCommandRequestProto msg)
specifier|private
name|ContainerCommandResponseProto
name|handleDeleteContainer
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|msg
operator|.
name|hasDeleteContainer
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed delete container request. trace ID: {}"
argument_list|,
name|msg
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
name|String
name|name
init|=
name|msg
operator|.
name|getDeleteContainer
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|getFromProtoBuf
argument_list|(
name|msg
operator|.
name|getDeleteContainer
argument_list|()
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerManager
operator|.
name|deleteContainer
argument_list|(
name|pipeline
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|getContainerResponse
argument_list|(
name|msg
argument_list|)
return|;
block|}
comment|/**    * Calls into container logic and returns appropriate response.    *    * @param msg - Request    * @return Response.    * @throws IOException    */
DECL|method|handleCreateContainer ( ContainerCommandRequestProto msg)
specifier|private
name|ContainerCommandResponseProto
name|handleCreateContainer
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|msg
operator|.
name|hasCreateContainer
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed create container request. trace ID: {}"
argument_list|,
name|msg
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
name|ContainerData
name|cData
init|=
name|ContainerData
operator|.
name|getFromProtBuf
argument_list|(
name|msg
operator|.
name|getCreateContainer
argument_list|()
operator|.
name|getContainerData
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|cData
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|getFromProtoBuf
argument_list|(
name|msg
operator|.
name|getCreateContainer
argument_list|()
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerManager
operator|.
name|createContainer
argument_list|(
name|pipeline
argument_list|,
name|cData
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|getContainerResponse
argument_list|(
name|msg
argument_list|)
return|;
block|}
comment|/**    * Calls into chunk manager to write a chunk.    *    * @param msg - Request.    * @return Response.    * @throws IOException    */
DECL|method|handleWriteChunk ( ContainerCommandRequestProto msg)
specifier|private
name|ContainerCommandResponseProto
name|handleWriteChunk
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|msg
operator|.
name|hasWriteChunk
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed write chunk request. trace ID: {}"
argument_list|,
name|msg
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
name|String
name|keyName
init|=
name|msg
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|getFromProtoBuf
argument_list|(
name|msg
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|msg
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getChunkData
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|msg
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|this
operator|.
name|containerManager
operator|.
name|getChunkManager
argument_list|()
operator|.
name|writeChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|chunkInfo
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|ChunkUtils
operator|.
name|getChunkResponse
argument_list|(
name|msg
argument_list|)
return|;
block|}
comment|/**    * Calls into chunk manager to read a chunk.    *    * @param msg - Request.    * @return - Response.    * @throws IOException    */
DECL|method|handleReadChunk ( ContainerCommandRequestProto msg)
specifier|private
name|ContainerCommandResponseProto
name|handleReadChunk
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|msg
operator|.
name|hasReadChunk
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed read chunk request. trace ID: {}"
argument_list|,
name|msg
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
name|String
name|keyName
init|=
name|msg
operator|.
name|getReadChunk
argument_list|()
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|getFromProtoBuf
argument_list|(
name|msg
operator|.
name|getReadChunk
argument_list|()
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|msg
operator|.
name|getReadChunk
argument_list|()
operator|.
name|getChunkData
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|this
operator|.
name|containerManager
operator|.
name|getChunkManager
argument_list|()
operator|.
name|readChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|chunkInfo
argument_list|)
decl_stmt|;
return|return
name|ChunkUtils
operator|.
name|getReadChunkResponse
argument_list|(
name|msg
argument_list|,
name|data
argument_list|,
name|chunkInfo
argument_list|)
return|;
block|}
comment|/**    * Calls into chunk manager to write a chunk.    *    * @param msg - Request.    * @return Response.    * @throws IOException    */
DECL|method|handleDeleteChunk ( ContainerCommandRequestProto msg)
specifier|private
name|ContainerCommandResponseProto
name|handleDeleteChunk
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|msg
operator|.
name|hasDeleteChunk
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Malformed delete chunk request. trace ID: {}"
argument_list|,
name|msg
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ContainerUtils
operator|.
name|malformedRequest
argument_list|(
name|msg
argument_list|)
return|;
block|}
name|String
name|keyName
init|=
name|msg
operator|.
name|getDeleteChunk
argument_list|()
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|getFromProtoBuf
argument_list|(
name|msg
operator|.
name|getDeleteChunk
argument_list|()
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|ChunkInfo
name|chunkInfo
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|msg
operator|.
name|getDeleteChunk
argument_list|()
operator|.
name|getChunkData
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|chunkInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerManager
operator|.
name|getChunkManager
argument_list|()
operator|.
name|deleteChunk
argument_list|(
name|pipeline
argument_list|,
name|keyName
argument_list|,
name|chunkInfo
argument_list|)
expr_stmt|;
return|return
name|ChunkUtils
operator|.
name|getChunkResponse
argument_list|(
name|msg
argument_list|)
return|;
block|}
block|}
end_class

end_unit

