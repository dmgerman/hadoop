begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * A BlockECRecoveryCommand is an instruction to a DataNode to reconstruct a  * striped block group with missing blocks.  *  * Upon receiving this command, the DataNode pulls data from other DataNodes  * hosting blocks in this group and reconstructs the lost blocks through codec  * calculation.  *  * After the reconstruction, the DataNode pushes the reconstructed blocks to  * their final destinations if necessary (e.g., the destination is different  * from the reconstruction node, or multiple blocks in a group are to be  * reconstructed).  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BlockECRecoveryCommand
specifier|public
class|class
name|BlockECRecoveryCommand
extends|extends
name|DatanodeCommand
block|{
DECL|field|ecTasks
specifier|final
name|Collection
argument_list|<
name|BlockECRecoveryInfo
argument_list|>
name|ecTasks
decl_stmt|;
comment|/**    * Create BlockECRecoveryCommand from a collection of    * {@link BlockECRecoveryInfo}, each representing a recovery task    */
DECL|method|BlockECRecoveryCommand (int action, Collection<BlockECRecoveryInfo> blockECRecoveryInfoList)
specifier|public
name|BlockECRecoveryCommand
parameter_list|(
name|int
name|action
parameter_list|,
name|Collection
argument_list|<
name|BlockECRecoveryInfo
argument_list|>
name|blockECRecoveryInfoList
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|this
operator|.
name|ecTasks
operator|=
name|blockECRecoveryInfoList
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"BlockECRecoveryCommand(\n  "
argument_list|)
expr_stmt|;
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n  "
argument_list|)
operator|.
name|appendTo
argument_list|(
name|sb
argument_list|,
name|ecTasks
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n)"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Block and targets pair */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BlockECRecoveryInfo
specifier|public
specifier|static
class|class
name|BlockECRecoveryInfo
block|{
DECL|field|block
specifier|private
specifier|final
name|ExtendedBlock
name|block
decl_stmt|;
DECL|field|sources
specifier|private
specifier|final
name|DatanodeInfo
index|[]
name|sources
decl_stmt|;
DECL|field|targets
specifier|private
name|DatanodeInfo
index|[]
name|targets
decl_stmt|;
DECL|field|targetStorageIDs
specifier|private
name|String
index|[]
name|targetStorageIDs
decl_stmt|;
DECL|field|targetStorageTypes
specifier|private
name|StorageType
index|[]
name|targetStorageTypes
decl_stmt|;
DECL|field|liveBlockIndices
specifier|private
specifier|final
name|short
index|[]
name|liveBlockIndices
decl_stmt|;
DECL|field|ecPolicy
specifier|private
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|method|BlockECRecoveryInfo (ExtendedBlock block, DatanodeInfo[] sources, DatanodeStorageInfo[] targetDnStorageInfo, short[] liveBlockIndices, ErasureCodingPolicy ecPolicy)
specifier|public
name|BlockECRecoveryInfo
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|DatanodeInfo
index|[]
name|sources
parameter_list|,
name|DatanodeStorageInfo
index|[]
name|targetDnStorageInfo
parameter_list|,
name|short
index|[]
name|liveBlockIndices
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|)
block|{
name|this
argument_list|(
name|block
argument_list|,
name|sources
argument_list|,
name|DatanodeStorageInfo
operator|.
name|toDatanodeInfos
argument_list|(
name|targetDnStorageInfo
argument_list|)
argument_list|,
name|DatanodeStorageInfo
operator|.
name|toStorageIDs
argument_list|(
name|targetDnStorageInfo
argument_list|)
argument_list|,
name|DatanodeStorageInfo
operator|.
name|toStorageTypes
argument_list|(
name|targetDnStorageInfo
argument_list|)
argument_list|,
name|liveBlockIndices
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockECRecoveryInfo (ExtendedBlock block, DatanodeInfo[] sources, DatanodeInfo[] targets, String[] targetStorageIDs, StorageType[] targetStorageTypes, short[] liveBlockIndices, ErasureCodingPolicy ecPolicy)
specifier|public
name|BlockECRecoveryInfo
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|DatanodeInfo
index|[]
name|sources
parameter_list|,
name|DatanodeInfo
index|[]
name|targets
parameter_list|,
name|String
index|[]
name|targetStorageIDs
parameter_list|,
name|StorageType
index|[]
name|targetStorageTypes
parameter_list|,
name|short
index|[]
name|liveBlockIndices
parameter_list|,
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|)
block|{
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
name|this
operator|.
name|sources
operator|=
name|sources
expr_stmt|;
name|this
operator|.
name|targets
operator|=
name|targets
expr_stmt|;
name|this
operator|.
name|targetStorageIDs
operator|=
name|targetStorageIDs
expr_stmt|;
name|this
operator|.
name|targetStorageTypes
operator|=
name|targetStorageTypes
expr_stmt|;
name|this
operator|.
name|liveBlockIndices
operator|=
name|liveBlockIndices
expr_stmt|;
name|this
operator|.
name|ecPolicy
operator|=
name|ecPolicy
expr_stmt|;
block|}
DECL|method|getExtendedBlock ()
specifier|public
name|ExtendedBlock
name|getExtendedBlock
parameter_list|()
block|{
return|return
name|block
return|;
block|}
DECL|method|getSourceDnInfos ()
specifier|public
name|DatanodeInfo
index|[]
name|getSourceDnInfos
parameter_list|()
block|{
return|return
name|sources
return|;
block|}
DECL|method|getTargetDnInfos ()
specifier|public
name|DatanodeInfo
index|[]
name|getTargetDnInfos
parameter_list|()
block|{
return|return
name|targets
return|;
block|}
DECL|method|getTargetStorageIDs ()
specifier|public
name|String
index|[]
name|getTargetStorageIDs
parameter_list|()
block|{
return|return
name|targetStorageIDs
return|;
block|}
DECL|method|getTargetStorageTypes ()
specifier|public
name|StorageType
index|[]
name|getTargetStorageTypes
parameter_list|()
block|{
return|return
name|targetStorageTypes
return|;
block|}
DECL|method|getLiveBlockIndices ()
specifier|public
name|short
index|[]
name|getLiveBlockIndices
parameter_list|()
block|{
return|return
name|liveBlockIndices
return|;
block|}
DECL|method|getErasureCodingPolicy ()
specifier|public
name|ErasureCodingPolicy
name|getErasureCodingPolicy
parameter_list|()
block|{
return|return
name|ecPolicy
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"BlockECRecoveryInfo(\n  "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Recovering "
argument_list|)
operator|.
name|append
argument_list|(
name|block
argument_list|)
operator|.
name|append
argument_list|(
literal|" From: "
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sources
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" To: ["
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|targets
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|")\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|" Block Indices: "
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|liveBlockIndices
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|getECTasks ()
specifier|public
name|Collection
argument_list|<
name|BlockECRecoveryInfo
argument_list|>
name|getECTasks
parameter_list|()
block|{
return|return
name|this
operator|.
name|ecTasks
return|;
block|}
block|}
end_class

end_unit

