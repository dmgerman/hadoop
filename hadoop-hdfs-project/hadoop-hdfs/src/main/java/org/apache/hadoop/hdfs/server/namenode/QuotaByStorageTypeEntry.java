begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
import|;
end_import

begin_class
DECL|class|QuotaByStorageTypeEntry
specifier|public
class|class
name|QuotaByStorageTypeEntry
block|{
DECL|field|type
specifier|private
name|StorageType
name|type
decl_stmt|;
DECL|field|quota
specifier|private
name|long
name|quota
decl_stmt|;
DECL|method|getStorageType ()
specifier|public
name|StorageType
name|getStorageType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|getQuota ()
specifier|public
name|long
name|getQuota
parameter_list|()
block|{
return|return
name|quota
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|QuotaByStorageTypeEntry
name|other
init|=
operator|(
name|QuotaByStorageTypeEntry
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|type
argument_list|,
name|other
operator|.
name|type
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|quota
argument_list|,
name|other
operator|.
name|quota
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|type
argument_list|,
name|quota
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|type
operator|!=
literal|null
operator|)
assert|;
name|sb
operator|.
name|append
argument_list|(
name|type
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|quota
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|type
specifier|private
name|StorageType
name|type
decl_stmt|;
DECL|field|quota
specifier|private
name|long
name|quota
decl_stmt|;
DECL|method|setStorageType (StorageType type)
specifier|public
name|Builder
name|setStorageType
parameter_list|(
name|StorageType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setQuota (long quota)
specifier|public
name|Builder
name|setQuota
parameter_list|(
name|long
name|quota
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|=
name|quota
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|QuotaByStorageTypeEntry
name|build
parameter_list|()
block|{
return|return
operator|new
name|QuotaByStorageTypeEntry
argument_list|(
name|type
argument_list|,
name|quota
argument_list|)
return|;
block|}
block|}
DECL|method|QuotaByStorageTypeEntry (StorageType type, long quota)
specifier|private
name|QuotaByStorageTypeEntry
parameter_list|(
name|StorageType
name|type
parameter_list|,
name|long
name|quota
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|quota
operator|=
name|quota
expr_stmt|;
block|}
block|}
end_class

end_unit

