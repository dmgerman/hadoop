begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|BLOCK_STRIPED_CELL_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|NUM_DATA_BLOCKS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|NUM_PARITY_BLOCKS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSStripedOutputStream
operator|.
name|Coordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|CachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ByteArrayManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/****************************************************************************  * The StripedDataStreamer class is used by {@link DFSStripedOutputStream}.  * There are two kinds of StripedDataStreamer, leading streamer and ordinary  * stream. Leading streamer requests a block group from NameNode, unwraps  * it to located blocks and transfers each located block to its corresponding  * ordinary streamer via a blocking queue.  *  ****************************************************************************/
end_comment

begin_class
DECL|class|StripedDataStreamer
specifier|public
class|class
name|StripedDataStreamer
extends|extends
name|DataStreamer
block|{
DECL|field|coordinator
specifier|private
specifier|final
name|Coordinator
name|coordinator
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
DECL|field|isFailed
specifier|private
specifier|volatile
name|boolean
name|isFailed
decl_stmt|;
DECL|method|StripedDataStreamer (HdfsFileStatus stat, DFSClient dfsClient, String src, Progressable progress, DataChecksum checksum, AtomicReference<CachingStrategy> cachingStrategy, ByteArrayManager byteArrayManage, String[] favoredNodes, short index, Coordinator coordinator)
name|StripedDataStreamer
parameter_list|(
name|HdfsFileStatus
name|stat
parameter_list|,
name|DFSClient
name|dfsClient
parameter_list|,
name|String
name|src
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|DataChecksum
name|checksum
parameter_list|,
name|AtomicReference
argument_list|<
name|CachingStrategy
argument_list|>
name|cachingStrategy
parameter_list|,
name|ByteArrayManager
name|byteArrayManage
parameter_list|,
name|String
index|[]
name|favoredNodes
parameter_list|,
name|short
name|index
parameter_list|,
name|Coordinator
name|coordinator
parameter_list|)
block|{
name|super
argument_list|(
name|stat
argument_list|,
literal|null
argument_list|,
name|dfsClient
argument_list|,
name|src
argument_list|,
name|progress
argument_list|,
name|checksum
argument_list|,
name|cachingStrategy
argument_list|,
name|byteArrayManage
argument_list|,
name|favoredNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|coordinator
operator|=
name|coordinator
expr_stmt|;
block|}
DECL|method|getIndex ()
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|setIsFailed (boolean isFailed)
name|void
name|setIsFailed
parameter_list|(
name|boolean
name|isFailed
parameter_list|)
block|{
name|this
operator|.
name|isFailed
operator|=
name|isFailed
expr_stmt|;
block|}
DECL|method|isFailed ()
name|boolean
name|isFailed
parameter_list|()
block|{
return|return
name|isFailed
return|;
block|}
DECL|method|isLeadingStreamer ()
specifier|public
name|boolean
name|isLeadingStreamer
parameter_list|()
block|{
return|return
name|index
operator|==
literal|0
return|;
block|}
DECL|method|isParityStreamer ()
specifier|private
name|boolean
name|isParityStreamer
parameter_list|()
block|{
return|return
name|index
operator|>=
name|NUM_DATA_BLOCKS
return|;
block|}
annotation|@
name|Override
DECL|method|endBlock ()
specifier|protected
name|void
name|endBlock
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isParityStreamer
argument_list|()
condition|)
block|{
name|coordinator
operator|.
name|putEndBlock
argument_list|(
name|index
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|endBlock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|locateFollowingBlock (DatanodeInfo[] excludedNodes)
specifier|protected
name|LocatedBlock
name|locateFollowingBlock
parameter_list|(
name|DatanodeInfo
index|[]
name|excludedNodes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isLeadingStreamer
argument_list|()
condition|)
block|{
if|if
condition|(
name|coordinator
operator|.
name|shouldLocateFollowingBlock
argument_list|()
condition|)
block|{
comment|// set numByte for the previous block group
name|long
name|bytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DATA_BLOCKS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ExtendedBlock
name|b
init|=
name|coordinator
operator|.
name|getEndBlock
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bytes
operator|+=
name|b
operator|==
literal|null
condition|?
literal|0
else|:
name|b
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
name|block
operator|.
name|setNumBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LocatedStripedBlock
name|lsb
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|super
operator|.
name|locateFollowingBlock
argument_list|(
name|excludedNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Obtained block group "
operator|+
name|lsb
argument_list|)
expr_stmt|;
block|}
name|LocatedBlock
index|[]
name|blocks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
name|lsb
argument_list|,
name|BLOCK_STRIPED_CELL_SIZE
argument_list|,
name|NUM_DATA_BLOCKS
argument_list|,
name|NUM_PARITY_BLOCKS
argument_list|)
decl_stmt|;
assert|assert
name|blocks
operator|.
name|length
operator|==
operator|(
name|NUM_DATA_BLOCKS
operator|+
name|NUM_PARITY_BLOCKS
operator|)
operator|:
literal|"Fail to get block group from namenode: blockGroupSize: "
operator|+
operator|(
name|NUM_DATA_BLOCKS
operator|+
name|NUM_PARITY_BLOCKS
operator|)
operator|+
literal|", blocks.length: "
operator|+
name|blocks
operator|.
name|length
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|coordinator
operator|.
name|putStripedBlock
argument_list|(
name|i
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|coordinator
operator|.
name|getStripedBlock
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"#"
operator|+
name|index
operator|+
literal|": isFailed? "
operator|+
name|Boolean
operator|.
name|toString
argument_list|(
name|isFailed
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|+
literal|", "
operator|+
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

