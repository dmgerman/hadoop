begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|BLOCK_STRIPED_CELL_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|NUM_DATA_BLOCKS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|NUM_PARITY_BLOCKS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSStripedOutputStream
operator|.
name|Coordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSStripedOutputStream
operator|.
name|MultipleBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|CachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ByteArrayManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * This class extends {@link DataStreamer} to support writing striped blocks  * to datanodes.  * A {@link DFSStripedOutputStream} has multiple {@link StripedDataStreamer}s.  * Whenever the streamers need to talk the namenode, only the fastest streamer  * sends an rpc call to the namenode and then populates the result for the  * other streamers.  */
end_comment

begin_class
DECL|class|StripedDataStreamer
specifier|public
class|class
name|StripedDataStreamer
extends|extends
name|DataStreamer
block|{
comment|/**    * This class is designed for multiple threads to share a    * {@link MultipleBlockingQueue}. Initially, the queue is empty. The earliest    * thread calling poll populates entries to the queue and the other threads    * will wait for it. Once the entries are populated, all the threads can poll    * their entries.    *    * @param<T> the queue entry type.    */
DECL|class|ConcurrentPoll
specifier|static
specifier|abstract
class|class
name|ConcurrentPoll
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|queue
specifier|private
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|T
argument_list|>
name|queue
decl_stmt|;
DECL|method|ConcurrentPoll (MultipleBlockingQueue<T> queue)
name|ConcurrentPoll
parameter_list|(
name|MultipleBlockingQueue
argument_list|<
name|T
argument_list|>
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
DECL|method|poll (final int i)
name|T
name|poll
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
synchronized|synchronized
init|(
name|queue
init|)
block|{
specifier|final
name|T
name|polled
init|=
name|queue
operator|.
name|poll
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|polled
operator|!=
literal|null
condition|)
block|{
comment|// already populated; return polled item.
return|return
name|polled
return|;
block|}
if|if
condition|(
name|isReady2Populate
argument_list|()
condition|)
block|{
name|populate
argument_list|()
expr_stmt|;
return|return
name|queue
operator|.
name|poll
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
comment|// sleep and then retry.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
name|DFSUtil
operator|.
name|toInterruptedIOException
argument_list|(
literal|"Sleep interrupted during poll"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|isReady2Populate ()
name|boolean
name|isReady2Populate
parameter_list|()
block|{
return|return
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|populate ()
specifier|abstract
name|void
name|populate
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
DECL|field|coordinator
specifier|private
specifier|final
name|Coordinator
name|coordinator
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
DECL|field|failed
specifier|private
specifier|volatile
name|boolean
name|failed
decl_stmt|;
DECL|method|StripedDataStreamer (HdfsFileStatus stat, DFSClient dfsClient, String src, Progressable progress, DataChecksum checksum, AtomicReference<CachingStrategy> cachingStrategy, ByteArrayManager byteArrayManage, String[] favoredNodes, short index, Coordinator coordinator)
name|StripedDataStreamer
parameter_list|(
name|HdfsFileStatus
name|stat
parameter_list|,
name|DFSClient
name|dfsClient
parameter_list|,
name|String
name|src
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|DataChecksum
name|checksum
parameter_list|,
name|AtomicReference
argument_list|<
name|CachingStrategy
argument_list|>
name|cachingStrategy
parameter_list|,
name|ByteArrayManager
name|byteArrayManage
parameter_list|,
name|String
index|[]
name|favoredNodes
parameter_list|,
name|short
name|index
parameter_list|,
name|Coordinator
name|coordinator
parameter_list|)
block|{
name|super
argument_list|(
name|stat
argument_list|,
literal|null
argument_list|,
name|dfsClient
argument_list|,
name|src
argument_list|,
name|progress
argument_list|,
name|checksum
argument_list|,
name|cachingStrategy
argument_list|,
name|byteArrayManage
argument_list|,
name|favoredNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|coordinator
operator|=
name|coordinator
expr_stmt|;
block|}
DECL|method|getIndex ()
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|setFailed (boolean failed)
name|void
name|setFailed
parameter_list|(
name|boolean
name|failed
parameter_list|)
block|{
name|this
operator|.
name|failed
operator|=
name|failed
expr_stmt|;
block|}
DECL|method|isFailed ()
name|boolean
name|isFailed
parameter_list|()
block|{
return|return
name|failed
return|;
block|}
DECL|method|isParityStreamer ()
specifier|private
name|boolean
name|isParityStreamer
parameter_list|()
block|{
return|return
name|index
operator|>=
name|NUM_DATA_BLOCKS
return|;
block|}
annotation|@
name|Override
DECL|method|endBlock ()
specifier|protected
name|void
name|endBlock
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isParityStreamer
argument_list|()
condition|)
block|{
name|coordinator
operator|.
name|offerEndBlock
argument_list|(
name|index
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|endBlock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|locateFollowingBlock (final DatanodeInfo[] excludedNodes)
specifier|protected
name|LocatedBlock
name|locateFollowingBlock
parameter_list|(
specifier|final
name|DatanodeInfo
index|[]
name|excludedNodes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|LocatedBlock
argument_list|>
name|followingBlocks
init|=
name|coordinator
operator|.
name|getFollowingBlocks
argument_list|()
decl_stmt|;
return|return
operator|new
name|ConcurrentPoll
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|(
name|followingBlocks
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|isReady2Populate
parameter_list|()
block|{
return|return
name|super
operator|.
name|isReady2Populate
argument_list|()
operator|&&
operator|(
name|block
operator|==
literal|null
operator|||
name|coordinator
operator|.
name|hasAllEndBlocks
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
name|void
name|populate
parameter_list|()
throws|throws
name|IOException
block|{
name|getLastException
argument_list|()
operator|.
name|check
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|block
operator|!=
literal|null
condition|)
block|{
comment|// set numByte for the previous block group
name|long
name|bytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DATA_BLOCKS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ExtendedBlock
name|b
init|=
name|coordinator
operator|.
name|takeEndBlock
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StripedBlockUtil
operator|.
name|checkBlocks
argument_list|(
name|index
argument_list|,
name|block
argument_list|,
name|i
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|bytes
operator|+=
name|b
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
name|block
operator|.
name|setNumBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|block
operator|.
name|setBlockId
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
operator|-
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"locateFollowingBlock: index="
operator|+
name|index
operator|+
literal|", block="
operator|+
name|block
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LocatedBlock
name|lb
init|=
name|StripedDataStreamer
operator|.
name|super
operator|.
name|locateFollowingBlock
argument_list|(
name|excludedNodes
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
index|[]
name|blocks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
operator|(
name|LocatedStripedBlock
operator|)
name|lb
argument_list|,
name|BLOCK_STRIPED_CELL_SIZE
argument_list|,
name|NUM_DATA_BLOCKS
argument_list|,
name|NUM_PARITY_BLOCKS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|coordinator
operator|.
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
operator|.
name|isFailed
argument_list|()
condition|)
block|{
if|if
condition|(
name|blocks
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|getLastException
argument_list|()
operator|.
name|set
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Failed to get following block, i="
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|followingBlocks
operator|.
name|offer
argument_list|(
name|i
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
operator|.
name|poll
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateBlockForPipeline ()
name|LocatedBlock
name|updateBlockForPipeline
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|LocatedBlock
argument_list|>
name|newBlocks
init|=
name|coordinator
operator|.
name|getNewBlocks
argument_list|()
decl_stmt|;
return|return
operator|new
name|ConcurrentPoll
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|(
name|newBlocks
argument_list|)
block|{
annotation|@
name|Override
name|void
name|populate
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ExtendedBlock
name|bg
init|=
name|coordinator
operator|.
name|getBlockGroup
argument_list|()
decl_stmt|;
specifier|final
name|LocatedBlock
name|updated
init|=
name|callUpdateBlockForPipeline
argument_list|(
name|bg
argument_list|)
decl_stmt|;
specifier|final
name|long
name|newGS
init|=
name|updated
operator|.
name|getBlock
argument_list|()
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DATA_BLOCKS
operator|+
name|NUM_PARITY_BLOCKS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ExtendedBlock
name|bi
init|=
name|coordinator
operator|.
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|bi
operator|!=
literal|null
condition|)
block|{
specifier|final
name|LocatedBlock
name|lb
init|=
operator|new
name|LocatedBlock
argument_list|(
name|newBlock
argument_list|(
name|bi
argument_list|,
name|newGS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|updated
operator|.
name|isCorrupt
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|lb
operator|.
name|setBlockToken
argument_list|(
name|updated
operator|.
name|getBlockToken
argument_list|()
argument_list|)
expr_stmt|;
name|newBlocks
operator|.
name|offer
argument_list|(
name|i
argument_list|,
name|lb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|LocatedBlock
name|lb
init|=
name|coordinator
operator|.
name|getFollowingBlocks
argument_list|()
operator|.
name|peek
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|lb
operator|.
name|getBlock
argument_list|()
operator|.
name|setGenerationStamp
argument_list|(
name|newGS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
operator|.
name|poll
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updatePipeline (final long newGS)
name|ExtendedBlock
name|updatePipeline
parameter_list|(
specifier|final
name|long
name|newGS
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MultipleBlockingQueue
argument_list|<
name|ExtendedBlock
argument_list|>
name|updateBlocks
init|=
name|coordinator
operator|.
name|getUpdateBlocks
argument_list|()
decl_stmt|;
return|return
operator|new
name|ConcurrentPoll
argument_list|<
name|ExtendedBlock
argument_list|>
argument_list|(
name|updateBlocks
argument_list|)
block|{
annotation|@
name|Override
name|void
name|populate
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ExtendedBlock
name|bg
init|=
name|coordinator
operator|.
name|getBlockGroup
argument_list|()
decl_stmt|;
specifier|final
name|ExtendedBlock
name|newBG
init|=
name|newBlock
argument_list|(
name|bg
argument_list|,
name|newGS
argument_list|)
decl_stmt|;
specifier|final
name|ExtendedBlock
name|updated
init|=
name|callUpdatePipeline
argument_list|(
name|bg
argument_list|,
name|newBG
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DATA_BLOCKS
operator|+
name|NUM_PARITY_BLOCKS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ExtendedBlock
name|bi
init|=
name|coordinator
operator|.
name|getStripedDataStreamer
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|updateBlocks
operator|.
name|offer
argument_list|(
name|i
argument_list|,
name|newBlock
argument_list|(
name|bi
argument_list|,
name|updated
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|poll
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"#"
operator|+
name|index
operator|+
literal|": failed? "
operator|+
name|Boolean
operator|.
name|toString
argument_list|(
name|failed
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|+
literal|", "
operator|+
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

