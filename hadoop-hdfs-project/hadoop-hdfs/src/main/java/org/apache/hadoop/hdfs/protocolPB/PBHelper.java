begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockKeyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockWithLocationsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlocksWithLocationsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|CheckpointCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|CheckpointSignatureProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeIDProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ExportedBlockKeysProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamenodeCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamenodeRegistrationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamespaceInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|RemoteEditLogManifestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|RemoteEditLogProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamenodeRegistrationProto
operator|.
name|NamenodeRoleProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CheckpointSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|CheckpointCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
operator|.
name|BlockWithLocations
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * Utilities for converting protobuf classes to and from implementation classes.  */
end_comment

begin_class
DECL|class|PBHelper
class|class
name|PBHelper
block|{
DECL|method|PBHelper ()
specifier|private
name|PBHelper
parameter_list|()
block|{
comment|/** Hidden constructor */
block|}
DECL|method|getByteString (byte[] bytes)
specifier|public
specifier|static
name|ByteString
name|getByteString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bytes
argument_list|)
return|;
block|}
DECL|method|convert (NamenodeRoleProto role)
specifier|public
specifier|static
name|NamenodeRole
name|convert
parameter_list|(
name|NamenodeRoleProto
name|role
parameter_list|)
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|NAMENODE
case|:
return|return
name|NamenodeRole
operator|.
name|NAMENODE
return|;
case|case
name|BACKUP
case|:
return|return
name|NamenodeRole
operator|.
name|BACKUP
return|;
case|case
name|CHECKPOINT
case|:
return|return
name|NamenodeRole
operator|.
name|CHECKPOINT
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert (NamenodeRole role)
specifier|public
specifier|static
name|NamenodeRoleProto
name|convert
parameter_list|(
name|NamenodeRole
name|role
parameter_list|)
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|NAMENODE
case|:
return|return
name|NamenodeRoleProto
operator|.
name|NAMENODE
return|;
case|case
name|BACKUP
case|:
return|return
name|NamenodeRoleProto
operator|.
name|BACKUP
return|;
case|case
name|CHECKPOINT
case|:
return|return
name|NamenodeRoleProto
operator|.
name|CHECKPOINT
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert (StorageInfo info)
specifier|public
specifier|static
name|StorageInfoProto
name|convert
parameter_list|(
name|StorageInfo
name|info
parameter_list|)
block|{
return|return
name|StorageInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterID
argument_list|(
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|.
name|setCTime
argument_list|(
name|info
operator|.
name|getCTime
argument_list|()
argument_list|)
operator|.
name|setLayoutVersion
argument_list|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
operator|.
name|setNamespceID
argument_list|(
name|info
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (StorageInfoProto info)
specifier|public
specifier|static
name|StorageInfo
name|convert
parameter_list|(
name|StorageInfoProto
name|info
parameter_list|)
block|{
return|return
operator|new
name|StorageInfo
argument_list|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|info
operator|.
name|getNamespceID
argument_list|()
argument_list|,
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|info
operator|.
name|getCTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (NamenodeRegistration reg)
specifier|public
specifier|static
name|NamenodeRegistrationProto
name|convert
parameter_list|(
name|NamenodeRegistration
name|reg
parameter_list|)
block|{
return|return
name|NamenodeRegistrationProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setHttpAddress
argument_list|(
name|reg
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
operator|.
name|setRole
argument_list|(
name|convert
argument_list|(
name|reg
operator|.
name|getRole
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setRpcAddress
argument_list|(
name|reg
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|convert
argument_list|(
operator|(
name|StorageInfo
operator|)
name|reg
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (NamenodeRegistrationProto reg)
specifier|public
specifier|static
name|NamenodeRegistration
name|convert
parameter_list|(
name|NamenodeRegistrationProto
name|reg
parameter_list|)
block|{
return|return
operator|new
name|NamenodeRegistration
argument_list|(
name|reg
operator|.
name|getRpcAddress
argument_list|()
argument_list|,
name|reg
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|convert
argument_list|(
name|reg
operator|.
name|getStorageInfo
argument_list|()
argument_list|)
argument_list|,
name|convert
argument_list|(
name|reg
operator|.
name|getRole
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeIDProto dn)
specifier|public
specifier|static
name|DatanodeID
name|convert
parameter_list|(
name|DatanodeIDProto
name|dn
parameter_list|)
block|{
return|return
operator|new
name|DatanodeID
argument_list|(
name|dn
operator|.
name|getName
argument_list|()
argument_list|,
name|dn
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|dn
operator|.
name|getInfoPort
argument_list|()
argument_list|,
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeID dn)
specifier|public
specifier|static
name|DatanodeIDProto
name|convert
parameter_list|(
name|DatanodeID
name|dn
parameter_list|)
block|{
return|return
name|DatanodeIDProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dn
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setInfoPort
argument_list|(
name|dn
operator|.
name|getInfoPort
argument_list|()
argument_list|)
operator|.
name|setIpcPort
argument_list|(
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
operator|.
name|setStorageID
argument_list|(
name|dn
operator|.
name|getStorageID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (Block b)
specifier|public
specifier|static
name|BlockProto
name|convert
parameter_list|(
name|Block
name|b
parameter_list|)
block|{
return|return
name|BlockProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockId
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setGenStamp
argument_list|(
name|b
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
operator|.
name|setNumBytes
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockProto b)
specifier|public
specifier|static
name|Block
name|convert
parameter_list|(
name|BlockProto
name|b
parameter_list|)
block|{
return|return
operator|new
name|Block
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|b
operator|.
name|getGenStamp
argument_list|()
argument_list|,
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (BlockWithLocations blk)
specifier|public
specifier|static
name|BlockWithLocationsProto
name|convert
parameter_list|(
name|BlockWithLocations
name|blk
parameter_list|)
block|{
return|return
name|BlockWithLocationsProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlock
argument_list|(
name|convert
argument_list|(
name|blk
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAllDatanodeIDs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blk
operator|.
name|getDatanodes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockWithLocationsProto b)
specifier|public
specifier|static
name|BlockWithLocations
name|convert
parameter_list|(
name|BlockWithLocationsProto
name|b
parameter_list|)
block|{
return|return
operator|new
name|BlockWithLocations
argument_list|(
name|convert
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|b
operator|.
name|getDatanodeIDsList
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (BlocksWithLocations blks)
specifier|public
specifier|static
name|BlocksWithLocationsProto
name|convert
parameter_list|(
name|BlocksWithLocations
name|blks
parameter_list|)
block|{
name|BlocksWithLocationsProto
operator|.
name|Builder
name|builder
init|=
name|BlocksWithLocationsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockWithLocations
name|b
range|:
name|blks
operator|.
name|getBlocks
argument_list|()
control|)
block|{
name|builder
operator|.
name|addBlocks
argument_list|(
name|convert
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlocksWithLocationsProto blocks)
specifier|public
specifier|static
name|BlocksWithLocations
name|convert
parameter_list|(
name|BlocksWithLocationsProto
name|blocks
parameter_list|)
block|{
return|return
operator|new
name|BlocksWithLocations
argument_list|(
name|convert
argument_list|(
name|blocks
operator|.
name|getBlocksList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (BlockKey key)
specifier|public
specifier|static
name|BlockKeyProto
name|convert
parameter_list|(
name|BlockKey
name|key
parameter_list|)
block|{
name|byte
index|[]
name|encodedKey
init|=
name|key
operator|.
name|getEncodedKey
argument_list|()
decl_stmt|;
name|ByteString
name|keyBytes
init|=
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|encodedKey
operator|==
literal|null
condition|?
operator|new
name|byte
index|[
literal|0
index|]
else|:
name|encodedKey
argument_list|)
decl_stmt|;
return|return
name|BlockKeyProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyId
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
operator|.
name|setKeyBytes
argument_list|(
name|keyBytes
argument_list|)
operator|.
name|setExpiryDate
argument_list|(
name|key
operator|.
name|getExpiryDate
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockKeyProto k)
specifier|public
specifier|static
name|BlockKey
name|convert
parameter_list|(
name|BlockKeyProto
name|k
parameter_list|)
block|{
return|return
operator|new
name|BlockKey
argument_list|(
name|k
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|k
operator|.
name|getExpiryDate
argument_list|()
argument_list|,
name|k
operator|.
name|getKeyBytes
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (ExportedBlockKeys keys)
specifier|public
specifier|static
name|ExportedBlockKeysProto
name|convert
parameter_list|(
name|ExportedBlockKeys
name|keys
parameter_list|)
block|{
name|ExportedBlockKeysProto
operator|.
name|Builder
name|builder
init|=
name|ExportedBlockKeysProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setIsBlockTokenEnabled
argument_list|(
name|keys
operator|.
name|isBlockTokenEnabled
argument_list|()
argument_list|)
operator|.
name|setKeyUpdateInterval
argument_list|(
name|keys
operator|.
name|getKeyUpdateInterval
argument_list|()
argument_list|)
operator|.
name|setTokenLifeTime
argument_list|(
name|keys
operator|.
name|getTokenLifetime
argument_list|()
argument_list|)
operator|.
name|setCurrentKey
argument_list|(
name|convert
argument_list|(
name|keys
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockKey
name|k
range|:
name|keys
operator|.
name|getAllKeys
argument_list|()
control|)
block|{
name|builder
operator|.
name|addAllKeys
argument_list|(
name|convert
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (ExportedBlockKeysProto keys)
specifier|public
specifier|static
name|ExportedBlockKeys
name|convert
parameter_list|(
name|ExportedBlockKeysProto
name|keys
parameter_list|)
block|{
return|return
operator|new
name|ExportedBlockKeys
argument_list|(
name|keys
operator|.
name|getIsBlockTokenEnabled
argument_list|()
argument_list|,
name|keys
operator|.
name|getKeyUpdateInterval
argument_list|()
argument_list|,
name|keys
operator|.
name|getTokenLifeTime
argument_list|()
argument_list|,
name|convert
argument_list|(
name|keys
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
argument_list|,
name|convertBlockKeys
argument_list|(
name|keys
operator|.
name|getAllKeysList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (CheckpointSignature s)
specifier|public
specifier|static
name|CheckpointSignatureProto
name|convert
parameter_list|(
name|CheckpointSignature
name|s
parameter_list|)
block|{
return|return
name|CheckpointSignatureProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolId
argument_list|(
name|s
operator|.
name|getBlockpoolID
argument_list|()
argument_list|)
operator|.
name|setCurSegmentTxId
argument_list|(
name|s
operator|.
name|getCurSegmentTxId
argument_list|()
argument_list|)
operator|.
name|setMostRecentCheckpointTxId
argument_list|(
name|s
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|StorageInfo
operator|)
name|s
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CheckpointSignatureProto s)
specifier|public
specifier|static
name|CheckpointSignature
name|convert
parameter_list|(
name|CheckpointSignatureProto
name|s
parameter_list|)
block|{
return|return
operator|new
name|CheckpointSignature
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|s
operator|.
name|getStorageInfo
argument_list|()
argument_list|)
argument_list|,
name|s
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|s
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
argument_list|,
name|s
operator|.
name|getCurSegmentTxId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (RemoteEditLog log)
specifier|public
specifier|static
name|RemoteEditLogProto
name|convert
parameter_list|(
name|RemoteEditLog
name|log
parameter_list|)
block|{
return|return
name|RemoteEditLogProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setEndTxId
argument_list|(
name|log
operator|.
name|getEndTxId
argument_list|()
argument_list|)
operator|.
name|setStartTxId
argument_list|(
name|log
operator|.
name|getStartTxId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (RemoteEditLogProto l)
specifier|public
specifier|static
name|RemoteEditLog
name|convert
parameter_list|(
name|RemoteEditLogProto
name|l
parameter_list|)
block|{
return|return
operator|new
name|RemoteEditLog
argument_list|(
name|l
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|l
operator|.
name|getEndTxId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert ( RemoteEditLogManifest manifest)
specifier|public
specifier|static
name|RemoteEditLogManifestProto
name|convert
parameter_list|(
name|RemoteEditLogManifest
name|manifest
parameter_list|)
block|{
name|RemoteEditLogManifestProto
operator|.
name|Builder
name|builder
init|=
name|RemoteEditLogManifestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteEditLog
name|log
range|:
name|manifest
operator|.
name|getLogs
argument_list|()
control|)
block|{
name|builder
operator|.
name|addLogs
argument_list|(
name|convert
argument_list|(
name|log
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( RemoteEditLogManifestProto manifest)
specifier|public
specifier|static
name|RemoteEditLogManifest
name|convert
parameter_list|(
name|RemoteEditLogManifestProto
name|manifest
parameter_list|)
block|{
name|List
argument_list|<
name|RemoteEditLog
argument_list|>
name|logs
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteEditLog
argument_list|>
argument_list|(
name|manifest
operator|.
name|getLogsList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RemoteEditLogProto
name|l
range|:
name|manifest
operator|.
name|getLogsList
argument_list|()
control|)
block|{
name|logs
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RemoteEditLogManifest
argument_list|(
name|logs
argument_list|)
return|;
block|}
DECL|method|convert (CheckpointCommand cmd)
specifier|public
specifier|static
name|CheckpointCommandProto
name|convert
parameter_list|(
name|CheckpointCommand
name|cmd
parameter_list|)
block|{
return|return
name|CheckpointCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSignature
argument_list|(
name|convert
argument_list|(
name|cmd
operator|.
name|getSignature
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (NamenodeCommand cmd)
specifier|public
specifier|static
name|NamenodeCommandProto
name|convert
parameter_list|(
name|NamenodeCommand
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|instanceof
name|CheckpointCommand
condition|)
block|{
return|return
name|NamenodeCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAction
argument_list|(
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|NamenodeCommandProto
operator|.
name|Type
operator|.
name|NamenodeCommand
argument_list|)
operator|.
name|setCheckpointCmd
argument_list|(
name|convert
argument_list|(
operator|(
name|CheckpointCommand
operator|)
name|cmd
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|NamenodeCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAction
argument_list|(
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (List<BlockWithLocationsProto> b)
specifier|public
specifier|static
name|BlockWithLocations
index|[]
name|convert
parameter_list|(
name|List
argument_list|<
name|BlockWithLocationsProto
argument_list|>
name|b
parameter_list|)
block|{
name|BlockWithLocations
index|[]
name|ret
init|=
operator|new
name|BlockWithLocations
index|[
name|b
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockWithLocationsProto
name|entry
range|:
name|b
control|)
block|{
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|convert
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|convertBlockKeys (List<BlockKeyProto> list)
specifier|public
specifier|static
name|BlockKey
index|[]
name|convertBlockKeys
parameter_list|(
name|List
argument_list|<
name|BlockKeyProto
argument_list|>
name|list
parameter_list|)
block|{
name|BlockKey
index|[]
name|ret
init|=
operator|new
name|BlockKey
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockKeyProto
name|k
range|:
name|list
control|)
block|{
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|convert
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|convert (NamespaceInfoProto info)
specifier|public
specifier|static
name|NamespaceInfo
name|convert
parameter_list|(
name|NamespaceInfoProto
name|info
parameter_list|)
block|{
name|StorageInfoProto
name|storage
init|=
name|info
operator|.
name|getStorageInfo
argument_list|()
decl_stmt|;
return|return
operator|new
name|NamespaceInfo
argument_list|(
name|storage
operator|.
name|getNamespceID
argument_list|()
argument_list|,
name|storage
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|info
operator|.
name|getBlockPoolID
argument_list|()
argument_list|,
name|storage
operator|.
name|getCTime
argument_list|()
argument_list|,
name|info
operator|.
name|getDistUpgradeVersion
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (NamenodeCommandProto cmd)
specifier|public
specifier|static
name|NamenodeCommand
name|convert
parameter_list|(
name|NamenodeCommandProto
name|cmd
parameter_list|)
block|{
switch|switch
condition|(
name|cmd
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CheckPointCommand
case|:
name|CheckpointCommandProto
name|chkPt
init|=
name|cmd
operator|.
name|getCheckpointCmd
argument_list|()
decl_stmt|;
return|return
operator|new
name|CheckpointCommand
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|chkPt
operator|.
name|getSignature
argument_list|()
argument_list|)
argument_list|,
name|chkPt
operator|.
name|getNeedToReturnImage
argument_list|()
argument_list|)
return|;
default|default:
return|return
operator|new
name|NamenodeCommand
argument_list|(
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

