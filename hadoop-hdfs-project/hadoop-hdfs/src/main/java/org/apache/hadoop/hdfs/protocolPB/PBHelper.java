begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|AdminStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|UpgradeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsLocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CreateFlagProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|DatanodeReportTypeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|GetFsStatsResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|SafeModeActionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|UpgradeActionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BalancerBandwidthCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockRecoveryCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|DatanodeCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|DatanodeRegistrationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|FinalizeCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|KeyUpdateCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|NNHAStatusHeartbeatProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|ReceivedDeletedBlockInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|RegisterCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|UpgradeCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockKeyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockTokenIdentifierProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockWithLocationsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlocksWithLocationsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|CheckpointCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|CheckpointSignatureProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ContentSummaryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|CorruptFileBlocksProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeIDProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeInfoProto
operator|.
name|AdminState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeInfosProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DirectoryListingProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ExportedBlockKeysProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ExtendedBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|FsPermissionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|FsServerDefaultsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|HdfsFileStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|HdfsFileStatusProto
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|LocatedBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|LocatedBlockProto
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|LocatedBlocksProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamenodeCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamenodeRegistrationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamespaceInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|RecoveringBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|RemoteEditLogManifestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|RemoteEditLogProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamenodeRegistrationProto
operator|.
name|NamenodeRoleProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ReplicaStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|UpgradeStatusReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|UpgradeStatusReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CheckpointSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BalancerBandwidthCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|CheckpointCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|FinalizeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|KeyUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NNHAStatusHeartbeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RegisterCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
operator|.
name|BlockWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|UpgradeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * Utilities for converting protobuf classes to and from implementation classes.  *   * Note that when converting from an internal type to protobuf type, the  * converter never return null for protobuf type. The check for internal type  * being null must be done before calling the convert() method.  */
end_comment

begin_class
DECL|class|PBHelper
specifier|public
class|class
name|PBHelper
block|{
DECL|field|REG_CMD_PROTO
specifier|private
specifier|static
specifier|final
name|RegisterCommandProto
name|REG_CMD_PROTO
init|=
name|RegisterCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|REG_CMD
specifier|private
specifier|static
specifier|final
name|RegisterCommand
name|REG_CMD
init|=
operator|new
name|RegisterCommand
argument_list|()
decl_stmt|;
DECL|method|PBHelper ()
specifier|private
name|PBHelper
parameter_list|()
block|{
comment|/** Hidden constructor */
block|}
DECL|method|getByteString (byte[] bytes)
specifier|public
specifier|static
name|ByteString
name|getByteString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bytes
argument_list|)
return|;
block|}
DECL|method|convert (NamenodeRoleProto role)
specifier|public
specifier|static
name|NamenodeRole
name|convert
parameter_list|(
name|NamenodeRoleProto
name|role
parameter_list|)
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|NAMENODE
case|:
return|return
name|NamenodeRole
operator|.
name|NAMENODE
return|;
case|case
name|BACKUP
case|:
return|return
name|NamenodeRole
operator|.
name|BACKUP
return|;
case|case
name|CHECKPOINT
case|:
return|return
name|NamenodeRole
operator|.
name|CHECKPOINT
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert (NamenodeRole role)
specifier|public
specifier|static
name|NamenodeRoleProto
name|convert
parameter_list|(
name|NamenodeRole
name|role
parameter_list|)
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|NAMENODE
case|:
return|return
name|NamenodeRoleProto
operator|.
name|NAMENODE
return|;
case|case
name|BACKUP
case|:
return|return
name|NamenodeRoleProto
operator|.
name|BACKUP
return|;
case|case
name|CHECKPOINT
case|:
return|return
name|NamenodeRoleProto
operator|.
name|CHECKPOINT
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert (StorageInfo info)
specifier|public
specifier|static
name|StorageInfoProto
name|convert
parameter_list|(
name|StorageInfo
name|info
parameter_list|)
block|{
return|return
name|StorageInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterID
argument_list|(
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|.
name|setCTime
argument_list|(
name|info
operator|.
name|getCTime
argument_list|()
argument_list|)
operator|.
name|setLayoutVersion
argument_list|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
operator|.
name|setNamespceID
argument_list|(
name|info
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (StorageInfoProto info)
specifier|public
specifier|static
name|StorageInfo
name|convert
parameter_list|(
name|StorageInfoProto
name|info
parameter_list|)
block|{
return|return
operator|new
name|StorageInfo
argument_list|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|info
operator|.
name|getNamespceID
argument_list|()
argument_list|,
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|info
operator|.
name|getCTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (NamenodeRegistration reg)
specifier|public
specifier|static
name|NamenodeRegistrationProto
name|convert
parameter_list|(
name|NamenodeRegistration
name|reg
parameter_list|)
block|{
return|return
name|NamenodeRegistrationProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setHttpAddress
argument_list|(
name|reg
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
operator|.
name|setRole
argument_list|(
name|convert
argument_list|(
name|reg
operator|.
name|getRole
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setRpcAddress
argument_list|(
name|reg
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|convert
argument_list|(
operator|(
name|StorageInfo
operator|)
name|reg
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (NamenodeRegistrationProto reg)
specifier|public
specifier|static
name|NamenodeRegistration
name|convert
parameter_list|(
name|NamenodeRegistrationProto
name|reg
parameter_list|)
block|{
return|return
operator|new
name|NamenodeRegistration
argument_list|(
name|reg
operator|.
name|getRpcAddress
argument_list|()
argument_list|,
name|reg
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|convert
argument_list|(
name|reg
operator|.
name|getStorageInfo
argument_list|()
argument_list|)
argument_list|,
name|convert
argument_list|(
name|reg
operator|.
name|getRole
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// DatanodeId
DECL|method|convert (DatanodeIDProto dn)
specifier|public
specifier|static
name|DatanodeID
name|convert
parameter_list|(
name|DatanodeIDProto
name|dn
parameter_list|)
block|{
return|return
operator|new
name|DatanodeID
argument_list|(
name|dn
operator|.
name|getName
argument_list|()
argument_list|,
name|dn
operator|.
name|getStorageID
argument_list|()
argument_list|,
name|dn
operator|.
name|getInfoPort
argument_list|()
argument_list|,
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeID dn)
specifier|public
specifier|static
name|DatanodeIDProto
name|convert
parameter_list|(
name|DatanodeID
name|dn
parameter_list|)
block|{
return|return
name|DatanodeIDProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|dn
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setInfoPort
argument_list|(
name|dn
operator|.
name|getInfoPort
argument_list|()
argument_list|)
operator|.
name|setIpcPort
argument_list|(
name|dn
operator|.
name|getIpcPort
argument_list|()
argument_list|)
operator|.
name|setStorageID
argument_list|(
name|dn
operator|.
name|getStorageID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Arrays of DatanodeId
DECL|method|convert (DatanodeID[] did)
specifier|public
specifier|static
name|DatanodeIDProto
index|[]
name|convert
parameter_list|(
name|DatanodeID
index|[]
name|did
parameter_list|)
block|{
if|if
condition|(
name|did
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|did
operator|.
name|length
decl_stmt|;
name|DatanodeIDProto
index|[]
name|result
init|=
operator|new
name|DatanodeIDProto
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|did
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convert (DatanodeIDProto[] did)
specifier|public
specifier|static
name|DatanodeID
index|[]
name|convert
parameter_list|(
name|DatanodeIDProto
index|[]
name|did
parameter_list|)
block|{
if|if
condition|(
name|did
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|did
operator|.
name|length
decl_stmt|;
name|DatanodeID
index|[]
name|result
init|=
operator|new
name|DatanodeID
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|did
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Block
DECL|method|convert (Block b)
specifier|public
specifier|static
name|BlockProto
name|convert
parameter_list|(
name|Block
name|b
parameter_list|)
block|{
return|return
name|BlockProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockId
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setGenStamp
argument_list|(
name|b
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
operator|.
name|setNumBytes
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockProto b)
specifier|public
specifier|static
name|Block
name|convert
parameter_list|(
name|BlockProto
name|b
parameter_list|)
block|{
return|return
operator|new
name|Block
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|b
operator|.
name|getGenStamp
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (BlockWithLocations blk)
specifier|public
specifier|static
name|BlockWithLocationsProto
name|convert
parameter_list|(
name|BlockWithLocations
name|blk
parameter_list|)
block|{
return|return
name|BlockWithLocationsProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlock
argument_list|(
name|convert
argument_list|(
name|blk
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAllDatanodeIDs
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blk
operator|.
name|getDatanodes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockWithLocationsProto b)
specifier|public
specifier|static
name|BlockWithLocations
name|convert
parameter_list|(
name|BlockWithLocationsProto
name|b
parameter_list|)
block|{
return|return
operator|new
name|BlockWithLocations
argument_list|(
name|convert
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|b
operator|.
name|getDatanodeIDsList
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (BlocksWithLocations blks)
specifier|public
specifier|static
name|BlocksWithLocationsProto
name|convert
parameter_list|(
name|BlocksWithLocations
name|blks
parameter_list|)
block|{
name|BlocksWithLocationsProto
operator|.
name|Builder
name|builder
init|=
name|BlocksWithLocationsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockWithLocations
name|b
range|:
name|blks
operator|.
name|getBlocks
argument_list|()
control|)
block|{
name|builder
operator|.
name|addBlocks
argument_list|(
name|convert
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlocksWithLocationsProto blocks)
specifier|public
specifier|static
name|BlocksWithLocations
name|convert
parameter_list|(
name|BlocksWithLocationsProto
name|blocks
parameter_list|)
block|{
name|List
argument_list|<
name|BlockWithLocationsProto
argument_list|>
name|b
init|=
name|blocks
operator|.
name|getBlocksList
argument_list|()
decl_stmt|;
name|BlockWithLocations
index|[]
name|ret
init|=
operator|new
name|BlockWithLocations
index|[
name|b
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockWithLocationsProto
name|entry
range|:
name|b
control|)
block|{
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|convert
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BlocksWithLocations
argument_list|(
name|ret
argument_list|)
return|;
block|}
DECL|method|convert (BlockKey key)
specifier|public
specifier|static
name|BlockKeyProto
name|convert
parameter_list|(
name|BlockKey
name|key
parameter_list|)
block|{
name|byte
index|[]
name|encodedKey
init|=
name|key
operator|.
name|getEncodedKey
argument_list|()
decl_stmt|;
name|ByteString
name|keyBytes
init|=
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|encodedKey
operator|==
literal|null
condition|?
operator|new
name|byte
index|[
literal|0
index|]
else|:
name|encodedKey
argument_list|)
decl_stmt|;
return|return
name|BlockKeyProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyId
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
operator|.
name|setKeyBytes
argument_list|(
name|keyBytes
argument_list|)
operator|.
name|setExpiryDate
argument_list|(
name|key
operator|.
name|getExpiryDate
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockKeyProto k)
specifier|public
specifier|static
name|BlockKey
name|convert
parameter_list|(
name|BlockKeyProto
name|k
parameter_list|)
block|{
return|return
operator|new
name|BlockKey
argument_list|(
name|k
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|k
operator|.
name|getExpiryDate
argument_list|()
argument_list|,
name|k
operator|.
name|getKeyBytes
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (ExportedBlockKeys keys)
specifier|public
specifier|static
name|ExportedBlockKeysProto
name|convert
parameter_list|(
name|ExportedBlockKeys
name|keys
parameter_list|)
block|{
name|ExportedBlockKeysProto
operator|.
name|Builder
name|builder
init|=
name|ExportedBlockKeysProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setIsBlockTokenEnabled
argument_list|(
name|keys
operator|.
name|isBlockTokenEnabled
argument_list|()
argument_list|)
operator|.
name|setKeyUpdateInterval
argument_list|(
name|keys
operator|.
name|getKeyUpdateInterval
argument_list|()
argument_list|)
operator|.
name|setTokenLifeTime
argument_list|(
name|keys
operator|.
name|getTokenLifetime
argument_list|()
argument_list|)
operator|.
name|setCurrentKey
argument_list|(
name|convert
argument_list|(
name|keys
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockKey
name|k
range|:
name|keys
operator|.
name|getAllKeys
argument_list|()
control|)
block|{
name|builder
operator|.
name|addAllKeys
argument_list|(
name|convert
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (ExportedBlockKeysProto keys)
specifier|public
specifier|static
name|ExportedBlockKeys
name|convert
parameter_list|(
name|ExportedBlockKeysProto
name|keys
parameter_list|)
block|{
return|return
operator|new
name|ExportedBlockKeys
argument_list|(
name|keys
operator|.
name|getIsBlockTokenEnabled
argument_list|()
argument_list|,
name|keys
operator|.
name|getKeyUpdateInterval
argument_list|()
argument_list|,
name|keys
operator|.
name|getTokenLifeTime
argument_list|()
argument_list|,
name|convert
argument_list|(
name|keys
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
argument_list|,
name|convertBlockKeys
argument_list|(
name|keys
operator|.
name|getAllKeysList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (CheckpointSignature s)
specifier|public
specifier|static
name|CheckpointSignatureProto
name|convert
parameter_list|(
name|CheckpointSignature
name|s
parameter_list|)
block|{
return|return
name|CheckpointSignatureProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolId
argument_list|(
name|s
operator|.
name|getBlockpoolID
argument_list|()
argument_list|)
operator|.
name|setCurSegmentTxId
argument_list|(
name|s
operator|.
name|getCurSegmentTxId
argument_list|()
argument_list|)
operator|.
name|setMostRecentCheckpointTxId
argument_list|(
name|s
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|StorageInfo
operator|)
name|s
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CheckpointSignatureProto s)
specifier|public
specifier|static
name|CheckpointSignature
name|convert
parameter_list|(
name|CheckpointSignatureProto
name|s
parameter_list|)
block|{
return|return
operator|new
name|CheckpointSignature
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|s
operator|.
name|getStorageInfo
argument_list|()
argument_list|)
argument_list|,
name|s
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|s
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
argument_list|,
name|s
operator|.
name|getCurSegmentTxId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (RemoteEditLog log)
specifier|public
specifier|static
name|RemoteEditLogProto
name|convert
parameter_list|(
name|RemoteEditLog
name|log
parameter_list|)
block|{
return|return
name|RemoteEditLogProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setEndTxId
argument_list|(
name|log
operator|.
name|getEndTxId
argument_list|()
argument_list|)
operator|.
name|setStartTxId
argument_list|(
name|log
operator|.
name|getStartTxId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (RemoteEditLogProto l)
specifier|public
specifier|static
name|RemoteEditLog
name|convert
parameter_list|(
name|RemoteEditLogProto
name|l
parameter_list|)
block|{
return|return
operator|new
name|RemoteEditLog
argument_list|(
name|l
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|l
operator|.
name|getEndTxId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert ( RemoteEditLogManifest manifest)
specifier|public
specifier|static
name|RemoteEditLogManifestProto
name|convert
parameter_list|(
name|RemoteEditLogManifest
name|manifest
parameter_list|)
block|{
name|RemoteEditLogManifestProto
operator|.
name|Builder
name|builder
init|=
name|RemoteEditLogManifestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteEditLog
name|log
range|:
name|manifest
operator|.
name|getLogs
argument_list|()
control|)
block|{
name|builder
operator|.
name|addLogs
argument_list|(
name|convert
argument_list|(
name|log
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( RemoteEditLogManifestProto manifest)
specifier|public
specifier|static
name|RemoteEditLogManifest
name|convert
parameter_list|(
name|RemoteEditLogManifestProto
name|manifest
parameter_list|)
block|{
name|List
argument_list|<
name|RemoteEditLog
argument_list|>
name|logs
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteEditLog
argument_list|>
argument_list|(
name|manifest
operator|.
name|getLogsList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RemoteEditLogProto
name|l
range|:
name|manifest
operator|.
name|getLogsList
argument_list|()
control|)
block|{
name|logs
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RemoteEditLogManifest
argument_list|(
name|logs
argument_list|)
return|;
block|}
DECL|method|convert (CheckpointCommand cmd)
specifier|public
specifier|static
name|CheckpointCommandProto
name|convert
parameter_list|(
name|CheckpointCommand
name|cmd
parameter_list|)
block|{
return|return
name|CheckpointCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSignature
argument_list|(
name|convert
argument_list|(
name|cmd
operator|.
name|getSignature
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setNeedToReturnImage
argument_list|(
name|cmd
operator|.
name|needToReturnImage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (NamenodeCommand cmd)
specifier|public
specifier|static
name|NamenodeCommandProto
name|convert
parameter_list|(
name|NamenodeCommand
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|instanceof
name|CheckpointCommand
condition|)
block|{
return|return
name|NamenodeCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAction
argument_list|(
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|NamenodeCommandProto
operator|.
name|Type
operator|.
name|CheckPointCommand
argument_list|)
operator|.
name|setCheckpointCmd
argument_list|(
name|convert
argument_list|(
operator|(
name|CheckpointCommand
operator|)
name|cmd
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|NamenodeCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|NamenodeCommandProto
operator|.
name|Type
operator|.
name|NamenodeCommand
argument_list|)
operator|.
name|setAction
argument_list|(
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertBlockKeys (List<BlockKeyProto> list)
specifier|public
specifier|static
name|BlockKey
index|[]
name|convertBlockKeys
parameter_list|(
name|List
argument_list|<
name|BlockKeyProto
argument_list|>
name|list
parameter_list|)
block|{
name|BlockKey
index|[]
name|ret
init|=
operator|new
name|BlockKey
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockKeyProto
name|k
range|:
name|list
control|)
block|{
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|convert
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|convert (NamespaceInfoProto info)
specifier|public
specifier|static
name|NamespaceInfo
name|convert
parameter_list|(
name|NamespaceInfoProto
name|info
parameter_list|)
block|{
name|StorageInfoProto
name|storage
init|=
name|info
operator|.
name|getStorageInfo
argument_list|()
decl_stmt|;
return|return
operator|new
name|NamespaceInfo
argument_list|(
name|storage
operator|.
name|getNamespceID
argument_list|()
argument_list|,
name|storage
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|info
operator|.
name|getBlockPoolID
argument_list|()
argument_list|,
name|storage
operator|.
name|getCTime
argument_list|()
argument_list|,
name|info
operator|.
name|getDistUpgradeVersion
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (NamenodeCommandProto cmd)
specifier|public
specifier|static
name|NamenodeCommand
name|convert
parameter_list|(
name|NamenodeCommandProto
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
return|return
literal|null
return|;
switch|switch
condition|(
name|cmd
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CheckPointCommand
case|:
name|CheckpointCommandProto
name|chkPt
init|=
name|cmd
operator|.
name|getCheckpointCmd
argument_list|()
decl_stmt|;
return|return
operator|new
name|CheckpointCommand
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|chkPt
operator|.
name|getSignature
argument_list|()
argument_list|)
argument_list|,
name|chkPt
operator|.
name|getNeedToReturnImage
argument_list|()
argument_list|)
return|;
default|default:
return|return
operator|new
name|NamenodeCommand
argument_list|(
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|convert (ExtendedBlockProto eb)
specifier|public
specifier|static
name|ExtendedBlock
name|convert
parameter_list|(
name|ExtendedBlockProto
name|eb
parameter_list|)
block|{
if|if
condition|(
name|eb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|ExtendedBlock
argument_list|(
name|eb
operator|.
name|getPoolId
argument_list|()
argument_list|,
name|eb
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|eb
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|eb
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (final ExtendedBlock b)
specifier|public
specifier|static
name|ExtendedBlockProto
name|convert
parameter_list|(
specifier|final
name|ExtendedBlock
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|ExtendedBlockProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPoolId
argument_list|(
name|b
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
operator|.
name|setBlockId
argument_list|(
name|b
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setNumBytes
argument_list|(
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
operator|.
name|setGenerationStamp
argument_list|(
name|b
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (RecoveringBlock b)
specifier|public
specifier|static
name|RecoveringBlockProto
name|convert
parameter_list|(
name|RecoveringBlock
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LocatedBlockProto
name|lb
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|LocatedBlock
operator|)
name|b
argument_list|)
decl_stmt|;
return|return
name|RecoveringBlockProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlock
argument_list|(
name|lb
argument_list|)
operator|.
name|setNewGenStamp
argument_list|(
name|b
operator|.
name|getNewGenerationStamp
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (RecoveringBlockProto b)
specifier|public
specifier|static
name|RecoveringBlock
name|convert
parameter_list|(
name|RecoveringBlockProto
name|b
parameter_list|)
block|{
name|ExtendedBlock
name|block
init|=
name|convert
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
operator|.
name|getB
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeInfo
index|[]
name|locs
init|=
name|convert
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocsList
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|RecoveringBlock
argument_list|(
name|block
argument_list|,
name|locs
argument_list|,
name|b
operator|.
name|getNewGenStamp
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert ( final DatanodeInfo.AdminStates inAs)
specifier|public
specifier|static
name|DatanodeInfoProto
operator|.
name|AdminState
name|convert
parameter_list|(
specifier|final
name|DatanodeInfo
operator|.
name|AdminStates
name|inAs
parameter_list|)
block|{
switch|switch
condition|(
name|inAs
condition|)
block|{
case|case
name|NORMAL
case|:
return|return
name|DatanodeInfoProto
operator|.
name|AdminState
operator|.
name|NORMAL
return|;
case|case
name|DECOMMISSION_INPROGRESS
case|:
return|return
name|DatanodeInfoProto
operator|.
name|AdminState
operator|.
name|DECOMMISSION_INPROGRESS
return|;
case|case
name|DECOMMISSIONED
case|:
return|return
name|DatanodeInfoProto
operator|.
name|AdminState
operator|.
name|DECOMMISSIONED
return|;
default|default:
return|return
name|DatanodeInfoProto
operator|.
name|AdminState
operator|.
name|NORMAL
return|;
block|}
block|}
DECL|method|convert (DatanodeInfoProto di)
specifier|static
specifier|public
name|DatanodeInfo
name|convert
parameter_list|(
name|DatanodeInfoProto
name|di
parameter_list|)
block|{
if|if
condition|(
name|di
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|DatanodeInfo
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|di
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|di
operator|.
name|hasLocation
argument_list|()
condition|?
name|di
operator|.
name|getLocation
argument_list|()
else|:
literal|null
argument_list|,
name|di
operator|.
name|hasHostName
argument_list|()
condition|?
name|di
operator|.
name|getHostName
argument_list|()
else|:
literal|null
argument_list|,
name|di
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|di
operator|.
name|getDfsUsed
argument_list|()
argument_list|,
name|di
operator|.
name|getRemaining
argument_list|()
argument_list|,
name|di
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|,
name|di
operator|.
name|getLastUpdate
argument_list|()
argument_list|,
name|di
operator|.
name|getXceiverCount
argument_list|()
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|di
operator|.
name|getAdminState
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convertDatanodeInfo (DatanodeInfo di)
specifier|static
specifier|public
name|DatanodeInfoProto
name|convertDatanodeInfo
parameter_list|(
name|DatanodeInfo
name|di
parameter_list|)
block|{
if|if
condition|(
name|di
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DatanodeInfoProto
operator|.
name|Builder
name|builder
init|=
name|DatanodeInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getHostName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setHostName
argument_list|(
name|di
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|di
operator|.
name|getNetworkLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLocation
argument_list|(
name|di
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|setId
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|DatanodeID
operator|)
name|di
argument_list|)
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|di
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|.
name|setDfsUsed
argument_list|(
name|di
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|di
operator|.
name|getRemaining
argument_list|()
argument_list|)
operator|.
name|setBlockPoolUsed
argument_list|(
name|di
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|)
operator|.
name|setLastUpdate
argument_list|(
name|di
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
operator|.
name|setXceiverCount
argument_list|(
name|di
operator|.
name|getXceiverCount
argument_list|()
argument_list|)
operator|.
name|setAdminState
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|di
operator|.
name|getAdminState
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (DatanodeInfoProto di[])
specifier|static
specifier|public
name|DatanodeInfo
index|[]
name|convert
parameter_list|(
name|DatanodeInfoProto
name|di
index|[]
parameter_list|)
block|{
if|if
condition|(
name|di
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DatanodeInfo
index|[]
name|result
init|=
operator|new
name|DatanodeInfo
index|[
name|di
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|di
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|di
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convert (DatanodeInfo[] di)
specifier|static
specifier|public
name|DatanodeInfoProto
index|[]
name|convert
parameter_list|(
name|DatanodeInfo
index|[]
name|di
parameter_list|)
block|{
if|if
condition|(
name|di
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DatanodeInfoProto
index|[]
name|result
init|=
operator|new
name|DatanodeInfoProto
index|[
name|di
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|di
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|PBHelper
operator|.
name|convertDatanodeInfo
argument_list|(
name|di
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convert (List<DatanodeInfoProto> list)
specifier|public
specifier|static
name|DatanodeInfo
index|[]
name|convert
parameter_list|(
name|List
argument_list|<
name|DatanodeInfoProto
argument_list|>
name|list
parameter_list|)
block|{
name|DatanodeInfo
index|[]
name|info
init|=
operator|new
name|DatanodeInfo
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|info
index|[
name|i
index|]
operator|=
name|convert
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|convert (DatanodeInfo info)
specifier|public
specifier|static
name|DatanodeInfoProto
name|convert
parameter_list|(
name|DatanodeInfo
name|info
parameter_list|)
block|{
name|DatanodeInfoProto
operator|.
name|Builder
name|builder
init|=
name|DatanodeInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBlockPoolUsed
argument_list|(
name|info
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAdminState
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|info
operator|.
name|getAdminState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCapacity
argument_list|(
name|info
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|.
name|setDfsUsed
argument_list|(
name|info
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
operator|.
name|setHostName
argument_list|(
name|info
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|DatanodeID
operator|)
name|info
argument_list|)
argument_list|)
operator|.
name|setLastUpdate
argument_list|(
name|info
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
operator|.
name|setLocation
argument_list|(
name|info
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
operator|.
name|setRemaining
argument_list|(
name|info
operator|.
name|getRemaining
argument_list|()
argument_list|)
operator|.
name|setXceiverCount
argument_list|(
name|info
operator|.
name|getXceiverCount
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (AdminState adminState)
specifier|public
specifier|static
name|AdminStates
name|convert
parameter_list|(
name|AdminState
name|adminState
parameter_list|)
block|{
switch|switch
condition|(
name|adminState
condition|)
block|{
case|case
name|DECOMMISSION_INPROGRESS
case|:
return|return
name|AdminStates
operator|.
name|DECOMMISSION_INPROGRESS
return|;
case|case
name|DECOMMISSIONED
case|:
return|return
name|AdminStates
operator|.
name|DECOMMISSIONED
return|;
case|case
name|NORMAL
case|:
default|default:
return|return
name|AdminStates
operator|.
name|NORMAL
return|;
block|}
block|}
DECL|method|convert (LocatedBlock b)
specifier|public
specifier|static
name|LocatedBlockProto
name|convert
parameter_list|(
name|LocatedBlock
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Builder
name|builder
init|=
name|LocatedBlockProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|locs
init|=
name|b
operator|.
name|getLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|addLocs
argument_list|(
name|i
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|locs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|setB
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setBlockToken
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|b
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCorrupt
argument_list|(
name|b
operator|.
name|isCorrupt
argument_list|()
argument_list|)
operator|.
name|setOffset
argument_list|(
name|b
operator|.
name|getStartOffset
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (LocatedBlockProto proto)
specifier|public
specifier|static
name|LocatedBlock
name|convert
parameter_list|(
name|LocatedBlockProto
name|proto
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|DatanodeInfoProto
argument_list|>
name|locs
init|=
name|proto
operator|.
name|getLocsList
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|targets
init|=
operator|new
name|DatanodeInfo
index|[
name|locs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|targets
index|[
name|i
index|]
operator|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|locs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LocatedBlock
name|lb
init|=
operator|new
name|LocatedBlock
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getB
argument_list|()
argument_list|)
argument_list|,
name|targets
argument_list|,
name|proto
operator|.
name|getOffset
argument_list|()
argument_list|,
name|proto
operator|.
name|getCorrupt
argument_list|()
argument_list|)
decl_stmt|;
name|lb
operator|.
name|setBlockToken
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getBlockToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|lb
return|;
block|}
DECL|method|convert (Token<?> tok)
specifier|public
specifier|static
name|BlockTokenIdentifierProto
name|convert
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|tok
parameter_list|)
block|{
return|return
name|BlockTokenIdentifierProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setIdentifier
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|tok
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPassword
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|tok
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setKind
argument_list|(
name|tok
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setService
argument_list|(
name|tok
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( BlockTokenIdentifierProto blockToken)
specifier|public
specifier|static
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|convert
parameter_list|(
name|BlockTokenIdentifierProto
name|blockToken
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
argument_list|(
name|blockToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|blockToken
operator|.
name|getPassword
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|blockToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|blockToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convertDelegationToken ( BlockTokenIdentifierProto blockToken)
specifier|public
specifier|static
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|convertDelegationToken
parameter_list|(
name|BlockTokenIdentifierProto
name|blockToken
parameter_list|)
block|{
return|return
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|blockToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|blockToken
operator|.
name|getPassword
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|blockToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|blockToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (ReplicaStateProto state)
specifier|public
specifier|static
name|ReplicaState
name|convert
parameter_list|(
name|ReplicaStateProto
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|RBW
case|:
return|return
name|ReplicaState
operator|.
name|RBW
return|;
case|case
name|RUR
case|:
return|return
name|ReplicaState
operator|.
name|RUR
return|;
case|case
name|RWR
case|:
return|return
name|ReplicaState
operator|.
name|RWR
return|;
case|case
name|TEMPORARY
case|:
return|return
name|ReplicaState
operator|.
name|TEMPORARY
return|;
case|case
name|FINALIZED
case|:
default|default:
return|return
name|ReplicaState
operator|.
name|FINALIZED
return|;
block|}
block|}
DECL|method|convert (ReplicaState state)
specifier|public
specifier|static
name|ReplicaStateProto
name|convert
parameter_list|(
name|ReplicaState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|RBW
case|:
return|return
name|ReplicaStateProto
operator|.
name|RBW
return|;
case|case
name|RUR
case|:
return|return
name|ReplicaStateProto
operator|.
name|RUR
return|;
case|case
name|RWR
case|:
return|return
name|ReplicaStateProto
operator|.
name|RWR
return|;
case|case
name|TEMPORARY
case|:
return|return
name|ReplicaStateProto
operator|.
name|TEMPORARY
return|;
case|case
name|FINALIZED
case|:
default|default:
return|return
name|ReplicaStateProto
operator|.
name|FINALIZED
return|;
block|}
block|}
DECL|method|convert ( DatanodeRegistration registration)
specifier|public
specifier|static
name|DatanodeRegistrationProto
name|convert
parameter_list|(
name|DatanodeRegistration
name|registration
parameter_list|)
block|{
name|DatanodeRegistrationProto
operator|.
name|Builder
name|builder
init|=
name|DatanodeRegistrationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|setDatanodeID
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|DatanodeID
operator|)
name|registration
argument_list|)
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|registration
operator|.
name|storageInfo
argument_list|)
argument_list|)
operator|.
name|setKeys
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|registration
operator|.
name|exportedKeys
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (DatanodeRegistrationProto proto)
specifier|public
specifier|static
name|DatanodeRegistration
name|convert
parameter_list|(
name|DatanodeRegistrationProto
name|proto
parameter_list|)
block|{
return|return
operator|new
name|DatanodeRegistration
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getDatanodeID
argument_list|()
argument_list|)
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getStorageInfo
argument_list|()
argument_list|)
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getKeys
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeCommandProto proto)
specifier|public
specifier|static
name|DatanodeCommand
name|convert
parameter_list|(
name|DatanodeCommandProto
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
operator|.
name|getCmdType
argument_list|()
condition|)
block|{
case|case
name|BalancerBandwidthCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getBalancerCmd
argument_list|()
argument_list|)
return|;
case|case
name|BlockCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getBlkCmd
argument_list|()
argument_list|)
return|;
case|case
name|BlockRecoveryCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getRecoveryCmd
argument_list|()
argument_list|)
return|;
case|case
name|FinalizeCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getFinalizeCmd
argument_list|()
argument_list|)
return|;
case|case
name|KeyUpdateCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getKeyUpdateCmd
argument_list|()
argument_list|)
return|;
case|case
name|RegisterCommand
case|:
return|return
name|REG_CMD
return|;
case|case
name|UpgradeCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getUpgradeCmd
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert ( BalancerBandwidthCommand bbCmd)
specifier|public
specifier|static
name|BalancerBandwidthCommandProto
name|convert
parameter_list|(
name|BalancerBandwidthCommand
name|bbCmd
parameter_list|)
block|{
return|return
name|BalancerBandwidthCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBandwidth
argument_list|(
name|bbCmd
operator|.
name|getBalancerBandwidthValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (KeyUpdateCommand cmd)
specifier|public
specifier|static
name|KeyUpdateCommandProto
name|convert
parameter_list|(
name|KeyUpdateCommand
name|cmd
parameter_list|)
block|{
return|return
name|KeyUpdateCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeys
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|cmd
operator|.
name|getExportedKeys
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockRecoveryCommand cmd)
specifier|public
specifier|static
name|BlockRecoveryCommandProto
name|convert
parameter_list|(
name|BlockRecoveryCommand
name|cmd
parameter_list|)
block|{
name|BlockRecoveryCommandProto
operator|.
name|Builder
name|builder
init|=
name|BlockRecoveryCommandProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RecoveringBlock
name|b
range|:
name|cmd
operator|.
name|getRecoveringBlocks
argument_list|()
control|)
block|{
name|builder
operator|.
name|addBlocks
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (FinalizeCommand cmd)
specifier|public
specifier|static
name|FinalizeCommandProto
name|convert
parameter_list|(
name|FinalizeCommand
name|cmd
parameter_list|)
block|{
return|return
name|FinalizeCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolId
argument_list|(
name|cmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockCommand cmd)
specifier|public
specifier|static
name|BlockCommandProto
name|convert
parameter_list|(
name|BlockCommand
name|cmd
parameter_list|)
block|{
name|BlockCommandProto
operator|.
name|Builder
name|builder
init|=
name|BlockCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolId
argument_list|(
name|cmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cmd
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|DatanodeProtocol
operator|.
name|DNA_TRANSFER
case|:
name|builder
operator|.
name|setAction
argument_list|(
name|BlockCommandProto
operator|.
name|Action
operator|.
name|TRANSFER
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_INVALIDATE
case|:
name|builder
operator|.
name|setAction
argument_list|(
name|BlockCommandProto
operator|.
name|Action
operator|.
name|INVALIDATE
argument_list|)
expr_stmt|;
break|break;
block|}
name|Block
index|[]
name|blocks
init|=
name|cmd
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|addBlocks
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addAllTargets
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|cmd
operator|.
name|getTargets
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (DatanodeInfo[][] targets)
specifier|private
specifier|static
name|List
argument_list|<
name|DatanodeInfosProto
argument_list|>
name|convert
parameter_list|(
name|DatanodeInfo
index|[]
index|[]
name|targets
parameter_list|)
block|{
name|DatanodeInfosProto
index|[]
name|ret
init|=
operator|new
name|DatanodeInfosProto
index|[
name|targets
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|DatanodeInfosProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllDatanodes
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|targets
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ret
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeCommand datanodeCommand)
specifier|public
specifier|static
name|DatanodeCommandProto
name|convert
parameter_list|(
name|DatanodeCommand
name|datanodeCommand
parameter_list|)
block|{
name|DatanodeCommandProto
operator|.
name|Builder
name|builder
init|=
name|DatanodeCommandProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|datanodeCommand
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|DatanodeProtocol
operator|.
name|DNA_BALANCERBANDWIDTHUPDATE
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|BalancerBandwidthCommand
argument_list|)
operator|.
name|setBalancerCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|BalancerBandwidthCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_ACCESSKEYUPDATE
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|KeyUpdateCommand
argument_list|)
operator|.
name|setKeyUpdateCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|KeyUpdateCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_RECOVERBLOCK
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|BlockRecoveryCommand
argument_list|)
operator|.
name|setRecoveryCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|BlockRecoveryCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_FINALIZE
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|FinalizeCommand
argument_list|)
operator|.
name|setFinalizeCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|FinalizeCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_REGISTER
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|RegisterCommand
argument_list|)
operator|.
name|setRegisterCmd
argument_list|(
name|REG_CMD_PROTO
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_TRANSFER
case|:
case|case
name|DatanodeProtocol
operator|.
name|DNA_INVALIDATE
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|BlockCommand
argument_list|)
operator|.
name|setBlkCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|BlockCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_SHUTDOWN
case|:
comment|//Not expected
case|case
name|DatanodeProtocol
operator|.
name|DNA_UNKNOWN
case|:
comment|//Not expected
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (UpgradeCommandProto upgradeCmd)
specifier|public
specifier|static
name|UpgradeCommand
name|convert
parameter_list|(
name|UpgradeCommandProto
name|upgradeCmd
parameter_list|)
block|{
name|int
name|action
init|=
name|UpgradeCommand
operator|.
name|UC_ACTION_UNKNOWN
decl_stmt|;
switch|switch
condition|(
name|upgradeCmd
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|REPORT_STATUS
case|:
name|action
operator|=
name|UpgradeCommand
operator|.
name|UC_ACTION_REPORT_STATUS
expr_stmt|;
break|break;
case|case
name|START_UPGRADE
case|:
name|action
operator|=
name|UpgradeCommand
operator|.
name|UC_ACTION_START_UPGRADE
expr_stmt|;
block|}
return|return
operator|new
name|UpgradeCommand
argument_list|(
name|action
argument_list|,
name|upgradeCmd
operator|.
name|getVersion
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|upgradeCmd
operator|.
name|getUpgradeStatus
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (KeyUpdateCommandProto keyUpdateCmd)
specifier|public
specifier|static
name|KeyUpdateCommand
name|convert
parameter_list|(
name|KeyUpdateCommandProto
name|keyUpdateCmd
parameter_list|)
block|{
return|return
operator|new
name|KeyUpdateCommand
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|keyUpdateCmd
operator|.
name|getKeys
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (FinalizeCommandProto finalizeCmd)
specifier|public
specifier|static
name|FinalizeCommand
name|convert
parameter_list|(
name|FinalizeCommandProto
name|finalizeCmd
parameter_list|)
block|{
return|return
operator|new
name|FinalizeCommand
argument_list|(
name|finalizeCmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert ( BlockRecoveryCommandProto recoveryCmd)
specifier|public
specifier|static
name|BlockRecoveryCommand
name|convert
parameter_list|(
name|BlockRecoveryCommandProto
name|recoveryCmd
parameter_list|)
block|{
name|List
argument_list|<
name|RecoveringBlockProto
argument_list|>
name|list
init|=
name|recoveryCmd
operator|.
name|getBlocksList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecoveringBlock
argument_list|>
name|recoveringBlocks
init|=
operator|new
name|ArrayList
argument_list|<
name|RecoveringBlock
argument_list|>
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|recoveringBlocks
operator|.
name|add
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BlockRecoveryCommand
argument_list|(
name|recoveringBlocks
argument_list|)
return|;
block|}
DECL|method|convert (BlockCommandProto blkCmd)
specifier|public
specifier|static
name|BlockCommand
name|convert
parameter_list|(
name|BlockCommandProto
name|blkCmd
parameter_list|)
block|{
name|List
argument_list|<
name|BlockProto
argument_list|>
name|blockProtoList
init|=
name|blkCmd
operator|.
name|getBlocksList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeInfosProto
argument_list|>
name|targetList
init|=
name|blkCmd
operator|.
name|getTargetsList
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
index|[]
name|targets
init|=
operator|new
name|DatanodeInfo
index|[
name|blockProtoList
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|Block
index|[]
name|blocks
init|=
operator|new
name|Block
index|[
name|blockProtoList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockProtoList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|targets
index|[
name|i
index|]
operator|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|targetList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|blocks
index|[
name|i
index|]
operator|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|blockProtoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|action
init|=
name|DatanodeProtocol
operator|.
name|DNA_UNKNOWN
decl_stmt|;
switch|switch
condition|(
name|blkCmd
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|TRANSFER
case|:
name|action
operator|=
name|DatanodeProtocol
operator|.
name|DNA_TRANSFER
expr_stmt|;
break|break;
case|case
name|INVALIDATE
case|:
name|action
operator|=
name|DatanodeProtocol
operator|.
name|DNA_INVALIDATE
expr_stmt|;
break|break;
block|}
return|return
operator|new
name|BlockCommand
argument_list|(
name|action
argument_list|,
name|blkCmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|blocks
argument_list|,
name|targets
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeInfosProto datanodeInfosProto)
specifier|public
specifier|static
name|DatanodeInfo
index|[]
name|convert
parameter_list|(
name|DatanodeInfosProto
name|datanodeInfosProto
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeInfoProto
argument_list|>
name|proto
init|=
name|datanodeInfosProto
operator|.
name|getDatanodesList
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|infos
init|=
operator|new
name|DatanodeInfo
index|[
name|proto
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|infos
index|[
name|i
index|]
operator|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
return|;
block|}
DECL|method|convert ( BalancerBandwidthCommandProto balancerCmd)
specifier|public
specifier|static
name|BalancerBandwidthCommand
name|convert
parameter_list|(
name|BalancerBandwidthCommandProto
name|balancerCmd
parameter_list|)
block|{
return|return
operator|new
name|BalancerBandwidthCommand
argument_list|(
name|balancerCmd
operator|.
name|getBandwidth
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert ( ReceivedDeletedBlockInfo receivedDeletedBlockInfo)
specifier|public
specifier|static
name|ReceivedDeletedBlockInfoProto
name|convert
parameter_list|(
name|ReceivedDeletedBlockInfo
name|receivedDeletedBlockInfo
parameter_list|)
block|{
name|ReceivedDeletedBlockInfoProto
operator|.
name|Builder
name|builder
init|=
name|ReceivedDeletedBlockInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|receivedDeletedBlockInfo
operator|.
name|getDelHints
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setDeleteHint
argument_list|(
name|receivedDeletedBlockInfo
operator|.
name|getDelHints
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|setBlock
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|receivedDeletedBlockInfo
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (UpgradeCommand comm)
specifier|public
specifier|static
name|UpgradeCommandProto
name|convert
parameter_list|(
name|UpgradeCommand
name|comm
parameter_list|)
block|{
name|UpgradeCommandProto
operator|.
name|Builder
name|builder
init|=
name|UpgradeCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|comm
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|setUpgradeStatus
argument_list|(
name|comm
operator|.
name|getCurrentStatus
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|comm
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|UpgradeCommand
operator|.
name|UC_ACTION_REPORT_STATUS
case|:
name|builder
operator|.
name|setAction
argument_list|(
name|UpgradeCommandProto
operator|.
name|Action
operator|.
name|REPORT_STATUS
argument_list|)
expr_stmt|;
break|break;
case|case
name|UpgradeCommand
operator|.
name|UC_ACTION_START_UPGRADE
case|:
name|builder
operator|.
name|setAction
argument_list|(
name|UpgradeCommandProto
operator|.
name|Action
operator|.
name|START_UPGRADE
argument_list|)
expr_stmt|;
break|break;
default|default:
name|builder
operator|.
name|setAction
argument_list|(
name|UpgradeCommandProto
operator|.
name|Action
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( ReceivedDeletedBlockInfoProto proto)
specifier|public
specifier|static
name|ReceivedDeletedBlockInfo
name|convert
parameter_list|(
name|ReceivedDeletedBlockInfoProto
name|proto
parameter_list|)
block|{
return|return
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|proto
operator|.
name|hasDeleteHint
argument_list|()
condition|?
name|proto
operator|.
name|getDeleteHint
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|convert (NamespaceInfo info)
specifier|public
specifier|static
name|NamespaceInfoProto
name|convert
parameter_list|(
name|NamespaceInfo
name|info
parameter_list|)
block|{
return|return
name|NamespaceInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolID
argument_list|(
name|info
operator|.
name|getBlockPoolID
argument_list|()
argument_list|)
operator|.
name|setBuildVersion
argument_list|(
name|info
operator|.
name|getBuildVersion
argument_list|()
argument_list|)
operator|.
name|setDistUpgradeVersion
argument_list|(
name|info
operator|.
name|getDistributedUpgradeVersion
argument_list|()
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|StorageInfo
operator|)
name|info
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// Located Block Arrays and Lists
DECL|method|convertLocatedBlock (LocatedBlock[] lb)
specifier|public
specifier|static
name|LocatedBlockProto
index|[]
name|convertLocatedBlock
parameter_list|(
name|LocatedBlock
index|[]
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|length
decl_stmt|;
name|LocatedBlockProto
index|[]
name|result
init|=
operator|new
name|LocatedBlockProto
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|lb
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convertLocatedBlock (LocatedBlockProto[] lb)
specifier|public
specifier|static
name|LocatedBlock
index|[]
name|convertLocatedBlock
parameter_list|(
name|LocatedBlockProto
index|[]
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|length
decl_stmt|;
name|LocatedBlock
index|[]
name|result
init|=
operator|new
name|LocatedBlock
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|LocatedBlock
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|lb
index|[
name|i
index|]
operator|.
name|getB
argument_list|()
argument_list|)
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|lb
index|[
name|i
index|]
operator|.
name|getLocsList
argument_list|()
argument_list|)
argument_list|,
name|lb
index|[
name|i
index|]
operator|.
name|getOffset
argument_list|()
argument_list|,
name|lb
index|[
name|i
index|]
operator|.
name|getCorrupt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convertLocatedBlock ( List<LocatedBlockProto> lb)
specifier|public
specifier|static
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|convertLocatedBlock
parameter_list|(
name|List
argument_list|<
name|LocatedBlockProto
argument_list|>
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|lb
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convertLocatedBlock2 (List<LocatedBlock> lb)
specifier|public
specifier|static
name|List
argument_list|<
name|LocatedBlockProto
argument_list|>
name|convertLocatedBlock2
parameter_list|(
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|lb
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlockProto
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|LocatedBlockProto
argument_list|>
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|lb
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// LocatedBlocks
DECL|method|convert (LocatedBlocksProto lb)
specifier|public
specifier|static
name|LocatedBlocks
name|convert
parameter_list|(
name|LocatedBlocksProto
name|lb
parameter_list|)
block|{
return|return
operator|new
name|LocatedBlocks
argument_list|(
name|lb
operator|.
name|getFileLength
argument_list|()
argument_list|,
name|lb
operator|.
name|getUnderConstruction
argument_list|()
argument_list|,
name|PBHelper
operator|.
name|convertLocatedBlock
argument_list|(
name|lb
operator|.
name|getBlocksList
argument_list|()
argument_list|)
argument_list|,
name|lb
operator|.
name|hasLastBlock
argument_list|()
condition|?
name|PBHelper
operator|.
name|convert
argument_list|(
name|lb
operator|.
name|getLastBlock
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|lb
operator|.
name|getIsLastBlockComplete
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (LocatedBlocks lb)
specifier|public
specifier|static
name|LocatedBlocksProto
name|convert
parameter_list|(
name|LocatedBlocks
name|lb
parameter_list|)
block|{
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LocatedBlocksProto
operator|.
name|Builder
name|builder
init|=
name|LocatedBlocksProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|lb
operator|.
name|getLastLocatedBlock
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLastBlock
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|lb
operator|.
name|getLastLocatedBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|setFileLength
argument_list|(
name|lb
operator|.
name|getFileLength
argument_list|()
argument_list|)
operator|.
name|setUnderConstruction
argument_list|(
name|lb
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
operator|.
name|addAllBlocks
argument_list|(
name|PBHelper
operator|.
name|convertLocatedBlock2
argument_list|(
name|lb
operator|.
name|getLocatedBlocks
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setIsLastBlockComplete
argument_list|(
name|lb
operator|.
name|isLastBlockComplete
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (FsServerDefaultsProto fs)
specifier|public
specifier|static
name|FsServerDefaults
name|convert
parameter_list|(
name|FsServerDefaultsProto
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|FsServerDefaults
argument_list|(
name|fs
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|fs
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|,
name|fs
operator|.
name|getWritePacketSize
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|fs
operator|.
name|getReplication
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileBufferSize
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (FsServerDefaults fs)
specifier|public
specifier|static
name|FsServerDefaultsProto
name|convert
parameter_list|(
name|FsServerDefaults
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|FsServerDefaultsProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockSize
argument_list|(
name|fs
operator|.
name|getBlockSize
argument_list|()
argument_list|)
operator|.
name|setBytesPerChecksum
argument_list|(
name|fs
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
operator|.
name|setWritePacketSize
argument_list|(
name|fs
operator|.
name|getWritePacketSize
argument_list|()
argument_list|)
operator|.
name|setReplication
argument_list|(
name|fs
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|setFileBufferSize
argument_list|(
name|fs
operator|.
name|getFileBufferSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (FsPermission p)
specifier|public
specifier|static
name|FsPermissionProto
name|convert
parameter_list|(
name|FsPermission
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|FsPermissionProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPerm
argument_list|(
name|p
operator|.
name|toShort
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (FsPermissionProto p)
specifier|public
specifier|static
name|FsPermission
name|convert
parameter_list|(
name|FsPermissionProto
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|p
operator|.
name|getPerm
argument_list|()
argument_list|)
return|;
block|}
comment|// The creatFlag field in PB is a bitmask whose values are the same a the
comment|// emum values of CreateFlag
DECL|method|convertCreateFlag (EnumSetWritable<CreateFlag> flag)
specifier|public
specifier|static
name|int
name|convertCreateFlag
parameter_list|(
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|)
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
condition|)
block|{
name|value
operator||=
name|CreateFlagProto
operator|.
name|APPEND
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
condition|)
block|{
name|value
operator||=
name|CreateFlagProto
operator|.
name|CREATE
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
condition|)
block|{
name|value
operator||=
name|CreateFlagProto
operator|.
name|OVERWRITE
operator|.
name|getNumber
argument_list|()
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|convert (int flag)
specifier|public
specifier|static
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|convert
parameter_list|(
name|int
name|flag
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|result
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CreateFlag
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flag
operator|&
name|CreateFlagProto
operator|.
name|APPEND_VALUE
operator|)
operator|==
name|CreateFlagProto
operator|.
name|APPEND_VALUE
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
argument_list|(
name|result
argument_list|)
return|;
block|}
DECL|method|convert (HdfsFileStatusProto fs)
specifier|public
specifier|static
name|HdfsFileStatus
name|convert
parameter_list|(
name|HdfsFileStatusProto
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|fs
operator|.
name|hasLocations
argument_list|()
condition|)
block|{
return|return
operator|new
name|HdfsLocatedFileStatus
argument_list|(
name|fs
operator|.
name|getLength
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileType
argument_list|()
operator|.
name|equals
argument_list|(
name|FileType
operator|.
name|IS_DIR
argument_list|)
argument_list|,
name|fs
operator|.
name|getBlockReplication
argument_list|()
argument_list|,
name|fs
operator|.
name|getBlocksize
argument_list|()
argument_list|,
name|fs
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|fs
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|fs
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|,
name|fs
operator|.
name|getOwner
argument_list|()
argument_list|,
name|fs
operator|.
name|getGroup
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileType
argument_list|()
operator|.
name|equals
argument_list|(
name|FileType
operator|.
name|IS_SYMLINK
argument_list|)
condition|?
name|fs
operator|.
name|getSymlink
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|fs
operator|.
name|hasLocations
argument_list|()
condition|?
name|fs
operator|.
name|getLocations
argument_list|()
else|:
literal|null
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|HdfsFileStatus
argument_list|(
name|fs
operator|.
name|getLength
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileType
argument_list|()
operator|.
name|equals
argument_list|(
name|FileType
operator|.
name|IS_DIR
argument_list|)
argument_list|,
name|fs
operator|.
name|getBlockReplication
argument_list|()
argument_list|,
name|fs
operator|.
name|getBlocksize
argument_list|()
argument_list|,
name|fs
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|fs
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|PBHelper
operator|.
name|convert
argument_list|(
name|fs
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|,
name|fs
operator|.
name|getOwner
argument_list|()
argument_list|,
name|fs
operator|.
name|getGroup
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileType
argument_list|()
operator|.
name|equals
argument_list|(
name|FileType
operator|.
name|IS_SYMLINK
argument_list|)
condition|?
name|fs
operator|.
name|getSymlink
argument_list|()
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|fs
operator|.
name|getPath
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (HdfsFileStatus fs)
specifier|public
specifier|static
name|HdfsFileStatusProto
name|convert
parameter_list|(
name|HdfsFileStatus
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|FileType
name|fType
init|=
name|FileType
operator|.
name|IS_DIR
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|fs
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|fType
operator|=
name|FileType
operator|.
name|IS_DIR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fs
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
name|fType
operator|=
name|FileType
operator|.
name|IS_SYMLINK
expr_stmt|;
block|}
name|HdfsFileStatusProto
operator|.
name|Builder
name|builder
init|=
name|HdfsFileStatusProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLength
argument_list|(
name|fs
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|setFileType
argument_list|(
name|fType
argument_list|)
operator|.
name|setBlockReplication
argument_list|(
name|fs
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|.
name|setBlocksize
argument_list|(
name|fs
operator|.
name|getBlockSize
argument_list|()
argument_list|)
operator|.
name|setModificationTime
argument_list|(
name|fs
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|setAccessTime
argument_list|(
name|fs
operator|.
name|getAccessTime
argument_list|()
argument_list|)
operator|.
name|setPermission
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|fs
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setOwner
argument_list|(
name|fs
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|setGroup
argument_list|(
name|fs
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|setPath
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|fs
operator|.
name|getLocalNameInBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|getSymlink
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setSymlink
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|fs
operator|.
name|getSymlinkInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|instanceof
name|HdfsLocatedFileStatus
condition|)
block|{
name|LocatedBlocks
name|locations
init|=
operator|(
operator|(
name|HdfsLocatedFileStatus
operator|)
name|fs
operator|)
operator|.
name|getBlockLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLocations
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|locations
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (HdfsFileStatus[] fs)
specifier|public
specifier|static
name|HdfsFileStatusProto
index|[]
name|convert
parameter_list|(
name|HdfsFileStatus
index|[]
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|fs
operator|.
name|length
decl_stmt|;
name|HdfsFileStatusProto
index|[]
name|result
init|=
operator|new
name|HdfsFileStatusProto
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|fs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convert (HdfsFileStatusProto[] fs)
specifier|public
specifier|static
name|HdfsFileStatus
index|[]
name|convert
parameter_list|(
name|HdfsFileStatusProto
index|[]
name|fs
parameter_list|)
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
specifier|final
name|int
name|len
init|=
name|fs
operator|.
name|length
decl_stmt|;
name|HdfsFileStatus
index|[]
name|result
init|=
operator|new
name|HdfsFileStatus
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|PBHelper
operator|.
name|convert
argument_list|(
name|fs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convert (DirectoryListingProto dl)
specifier|public
specifier|static
name|DirectoryListing
name|convert
parameter_list|(
name|DirectoryListingProto
name|dl
parameter_list|)
block|{
if|if
condition|(
name|dl
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|DirectoryListing
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|HdfsFileStatusProto
index|[]
operator|)
name|dl
operator|.
name|getPartialListingList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|dl
operator|.
name|getRemainingEntries
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (DirectoryListing d)
specifier|public
specifier|static
name|DirectoryListingProto
name|convert
parameter_list|(
name|DirectoryListing
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|DirectoryListingProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllPartialListing
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|d
operator|.
name|getPartialListing
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setRemainingEntries
argument_list|(
name|d
operator|.
name|getRemainingEntries
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (GetFsStatsResponseProto res)
specifier|public
specifier|static
name|long
index|[]
name|convert
parameter_list|(
name|GetFsStatsResponseProto
name|res
parameter_list|)
block|{
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
literal|6
index|]
decl_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CAPACITY_IDX
index|]
operator|=
name|res
operator|.
name|getCapacity
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_USED_IDX
index|]
operator|=
name|res
operator|.
name|getUsed
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_REMAINING_IDX
index|]
operator|=
name|res
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_UNDER_REPLICATED_IDX
index|]
operator|=
name|res
operator|.
name|getUnderReplicated
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CORRUPT_BLOCKS_IDX
index|]
operator|=
name|res
operator|.
name|getCorruptBlocks
argument_list|()
expr_stmt|;
name|result
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_BLOCKS_IDX
index|]
operator|=
name|res
operator|.
name|getMissingBlocks
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|convert (long[] fsStats)
specifier|public
specifier|static
name|GetFsStatsResponseProto
name|convert
parameter_list|(
name|long
index|[]
name|fsStats
parameter_list|)
block|{
name|GetFsStatsResponseProto
operator|.
name|Builder
name|result
init|=
name|GetFsStatsResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_CAPACITY_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setCapacity
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CAPACITY_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_USED_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setUsed
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_USED_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_REMAINING_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setRemaining
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_REMAINING_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_UNDER_REPLICATED_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setUnderReplicated
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_UNDER_REPLICATED_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_CORRUPT_BLOCKS_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setCorruptBlocks
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CORRUPT_BLOCKS_IDX
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsStats
operator|.
name|length
operator|>=
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_BLOCKS_IDX
operator|+
literal|1
condition|)
name|result
operator|.
name|setMissingBlocks
argument_list|(
name|fsStats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_BLOCKS_IDX
index|]
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|DatanodeReportTypeProto
DECL|method|convert (DatanodeReportType t)
name|convert
parameter_list|(
name|DatanodeReportType
name|t
parameter_list|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|ALL
case|:
return|return
name|DatanodeReportTypeProto
operator|.
name|ALL
return|;
case|case
name|LIVE
case|:
return|return
name|DatanodeReportTypeProto
operator|.
name|LIVE
return|;
case|case
name|DEAD
case|:
return|return
name|DatanodeReportTypeProto
operator|.
name|DEAD
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected data type report:"
operator|+
name|t
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|DatanodeReportType
DECL|method|convert (DatanodeReportTypeProto t)
name|convert
parameter_list|(
name|DatanodeReportTypeProto
name|t
parameter_list|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|ALL
case|:
return|return
name|DatanodeReportType
operator|.
name|ALL
return|;
case|case
name|LIVE
case|:
return|return
name|DatanodeReportType
operator|.
name|LIVE
return|;
case|case
name|DEAD
case|:
return|return
name|DatanodeReportType
operator|.
name|DEAD
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected data type report:"
operator|+
name|t
argument_list|)
throw|;
block|}
block|}
DECL|method|convert ( SafeModeAction a)
specifier|public
specifier|static
name|SafeModeActionProto
name|convert
parameter_list|(
name|SafeModeAction
name|a
parameter_list|)
block|{
switch|switch
condition|(
name|a
condition|)
block|{
case|case
name|SAFEMODE_LEAVE
case|:
return|return
name|SafeModeActionProto
operator|.
name|SAFEMODE_LEAVE
return|;
case|case
name|SAFEMODE_ENTER
case|:
return|return
name|SafeModeActionProto
operator|.
name|SAFEMODE_ENTER
return|;
case|case
name|SAFEMODE_GET
case|:
return|return
name|SafeModeActionProto
operator|.
name|SAFEMODE_GET
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected SafeModeAction :"
operator|+
name|a
argument_list|)
throw|;
block|}
block|}
DECL|method|convert ( ClientNamenodeProtocolProtos.SafeModeActionProto a)
specifier|public
specifier|static
name|SafeModeAction
name|convert
parameter_list|(
name|ClientNamenodeProtocolProtos
operator|.
name|SafeModeActionProto
name|a
parameter_list|)
block|{
switch|switch
condition|(
name|a
condition|)
block|{
case|case
name|SAFEMODE_LEAVE
case|:
return|return
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
return|;
case|case
name|SAFEMODE_ENTER
case|:
return|return
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
return|;
case|case
name|SAFEMODE_GET
case|:
return|return
name|SafeModeAction
operator|.
name|SAFEMODE_GET
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected SafeModeAction :"
operator|+
name|a
argument_list|)
throw|;
block|}
block|}
DECL|method|convert ( UpgradeAction a)
specifier|public
specifier|static
name|UpgradeActionProto
name|convert
parameter_list|(
name|UpgradeAction
name|a
parameter_list|)
block|{
switch|switch
condition|(
name|a
condition|)
block|{
case|case
name|GET_STATUS
case|:
return|return
name|UpgradeActionProto
operator|.
name|GET_STATUS
return|;
case|case
name|DETAILED_STATUS
case|:
return|return
name|UpgradeActionProto
operator|.
name|DETAILED_STATUS
return|;
case|case
name|FORCE_PROCEED
case|:
return|return
name|UpgradeActionProto
operator|.
name|FORCE_PROCEED
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected UpgradeAction :"
operator|+
name|a
argument_list|)
throw|;
block|}
block|}
DECL|method|convert ( UpgradeActionProto a)
specifier|public
specifier|static
name|UpgradeAction
name|convert
parameter_list|(
name|UpgradeActionProto
name|a
parameter_list|)
block|{
switch|switch
condition|(
name|a
condition|)
block|{
case|case
name|GET_STATUS
case|:
return|return
name|UpgradeAction
operator|.
name|GET_STATUS
return|;
case|case
name|DETAILED_STATUS
case|:
return|return
name|UpgradeAction
operator|.
name|DETAILED_STATUS
return|;
case|case
name|FORCE_PROCEED
case|:
return|return
name|UpgradeAction
operator|.
name|FORCE_PROCEED
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected UpgradeAction :"
operator|+
name|a
argument_list|)
throw|;
block|}
block|}
DECL|method|convert (UpgradeStatusReport r)
specifier|public
specifier|static
name|UpgradeStatusReportProto
name|convert
parameter_list|(
name|UpgradeStatusReport
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|UpgradeStatusReportProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|r
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|setUpgradeStatus
argument_list|(
name|r
operator|.
name|getUpgradeStatus
argument_list|()
argument_list|)
operator|.
name|setFinalized
argument_list|(
name|r
operator|.
name|isFinalized
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (UpgradeStatusReportProto r)
specifier|public
specifier|static
name|UpgradeStatusReport
name|convert
parameter_list|(
name|UpgradeStatusReportProto
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|UpgradeStatusReport
argument_list|(
name|r
operator|.
name|getVersion
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|r
operator|.
name|getUpgradeStatus
argument_list|()
argument_list|,
name|r
operator|.
name|getFinalized
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (CorruptFileBlocksProto c)
specifier|public
specifier|static
name|CorruptFileBlocks
name|convert
parameter_list|(
name|CorruptFileBlocksProto
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|CorruptFileBlocks
argument_list|(
operator|(
name|String
index|[]
operator|)
name|c
operator|.
name|getFilesList
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|,
name|c
operator|.
name|getCookie
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (CorruptFileBlocks c)
specifier|public
specifier|static
name|CorruptFileBlocksProto
name|convert
parameter_list|(
name|CorruptFileBlocks
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|CorruptFileBlocksProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllFiles
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|c
operator|.
name|getFiles
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCookie
argument_list|(
name|c
operator|.
name|getCookie
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (ContentSummaryProto cs)
specifier|public
specifier|static
name|ContentSummary
name|convert
parameter_list|(
name|ContentSummaryProto
name|cs
parameter_list|)
block|{
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|ContentSummary
argument_list|(
name|cs
operator|.
name|getLength
argument_list|()
argument_list|,
name|cs
operator|.
name|getFileCount
argument_list|()
argument_list|,
name|cs
operator|.
name|getDirectoryCount
argument_list|()
argument_list|,
name|cs
operator|.
name|getQuota
argument_list|()
argument_list|,
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|,
name|cs
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (ContentSummary cs)
specifier|public
specifier|static
name|ContentSummaryProto
name|convert
parameter_list|(
name|ContentSummary
name|cs
parameter_list|)
block|{
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|ContentSummaryProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLength
argument_list|(
name|cs
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|setFileCount
argument_list|(
name|cs
operator|.
name|getFileCount
argument_list|()
argument_list|)
operator|.
name|setDirectoryCount
argument_list|(
name|cs
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
operator|.
name|setQuota
argument_list|(
name|cs
operator|.
name|getQuota
argument_list|()
argument_list|)
operator|.
name|setSpaceConsumed
argument_list|(
name|cs
operator|.
name|getSpaceConsumed
argument_list|()
argument_list|)
operator|.
name|setSpaceQuota
argument_list|(
name|cs
operator|.
name|getSpaceQuota
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (NNHAStatusHeartbeatProto s)
specifier|public
specifier|static
name|NNHAStatusHeartbeat
name|convert
parameter_list|(
name|NNHAStatusHeartbeatProto
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
return|return
literal|null
return|;
switch|switch
condition|(
name|s
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|ACTIVE
case|:
return|return
operator|new
name|NNHAStatusHeartbeat
argument_list|(
name|NNHAStatusHeartbeat
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
name|s
operator|.
name|getTxid
argument_list|()
argument_list|)
return|;
case|case
name|STANDBY
case|:
return|return
operator|new
name|NNHAStatusHeartbeat
argument_list|(
name|NNHAStatusHeartbeat
operator|.
name|State
operator|.
name|STANDBY
argument_list|,
name|s
operator|.
name|getTxid
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected NNHAStatusHeartbeat.State:"
operator|+
name|s
operator|.
name|getState
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

