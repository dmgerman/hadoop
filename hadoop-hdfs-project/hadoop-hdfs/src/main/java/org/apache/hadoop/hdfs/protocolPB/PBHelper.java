begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamenodeRegistrationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|NamenodeRegistrationProto
operator|.
name|NamenodeRoleProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * Utilities for converting protobuf classes to and from   * implementation classes.  */
end_comment

begin_class
DECL|class|PBHelper
class|class
name|PBHelper
block|{
DECL|method|PBHelper ()
specifier|private
name|PBHelper
parameter_list|()
block|{
comment|/** Hidden constructor */
block|}
DECL|method|getByteString (byte[] bytes)
specifier|public
specifier|static
name|ByteString
name|getByteString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|bytes
argument_list|)
return|;
block|}
DECL|method|convert (NamenodeRoleProto role)
specifier|public
specifier|static
name|NamenodeRole
name|convert
parameter_list|(
name|NamenodeRoleProto
name|role
parameter_list|)
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|NAMENODE
case|:
return|return
name|NamenodeRole
operator|.
name|NAMENODE
return|;
case|case
name|BACKUP
case|:
return|return
name|NamenodeRole
operator|.
name|BACKUP
return|;
case|case
name|CHECKPOINT
case|:
return|return
name|NamenodeRole
operator|.
name|CHECKPOINT
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert (NamenodeRole role)
specifier|public
specifier|static
name|NamenodeRoleProto
name|convert
parameter_list|(
name|NamenodeRole
name|role
parameter_list|)
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|NAMENODE
case|:
return|return
name|NamenodeRoleProto
operator|.
name|NAMENODE
return|;
case|case
name|BACKUP
case|:
return|return
name|NamenodeRoleProto
operator|.
name|BACKUP
return|;
case|case
name|CHECKPOINT
case|:
return|return
name|NamenodeRoleProto
operator|.
name|CHECKPOINT
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert (StorageInfo info)
specifier|public
specifier|static
name|StorageInfoProto
name|convert
parameter_list|(
name|StorageInfo
name|info
parameter_list|)
block|{
return|return
name|StorageInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterID
argument_list|(
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|.
name|setCTime
argument_list|(
name|info
operator|.
name|getCTime
argument_list|()
argument_list|)
operator|.
name|setLayoutVersion
argument_list|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
operator|.
name|setNamespceID
argument_list|(
name|info
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (StorageInfoProto info)
specifier|public
specifier|static
name|StorageInfo
name|convert
parameter_list|(
name|StorageInfoProto
name|info
parameter_list|)
block|{
return|return
operator|new
name|StorageInfo
argument_list|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|info
operator|.
name|getNamespceID
argument_list|()
argument_list|,
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|info
operator|.
name|getCTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (NamenodeRegistration reg)
specifier|public
specifier|static
name|NamenodeRegistrationProto
name|convert
parameter_list|(
name|NamenodeRegistration
name|reg
parameter_list|)
block|{
return|return
name|NamenodeRegistrationProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setHttpAddress
argument_list|(
name|reg
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
operator|.
name|setRole
argument_list|(
name|convert
argument_list|(
name|reg
operator|.
name|getRole
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setRpcAddress
argument_list|(
name|reg
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|convert
argument_list|(
operator|(
name|StorageInfo
operator|)
name|reg
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (NamenodeRegistrationProto reg)
specifier|public
specifier|static
name|NamenodeRegistration
name|convert
parameter_list|(
name|NamenodeRegistrationProto
name|reg
parameter_list|)
block|{
return|return
operator|new
name|NamenodeRegistration
argument_list|(
name|reg
operator|.
name|getRpcAddress
argument_list|()
argument_list|,
name|reg
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|convert
argument_list|(
name|reg
operator|.
name|getStorageInfo
argument_list|()
argument_list|)
argument_list|,
name|convert
argument_list|(
name|reg
operator|.
name|getRole
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

