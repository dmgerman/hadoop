begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ProvidedStorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|AliasMapProtocolProtos
operator|.
name|KeyValueProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BalancerBandwidthCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockECReconstructionCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockIdCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockRecoveryCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|DatanodeCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|DatanodeRegistrationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|DropSPSWorkCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|FinalizeCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|KeyUpdateCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|ReceivedDeletedBlockInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|RegisterCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|SlowDiskReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|SlowPeerReportProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|VolumeFailureSummaryProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockReportContextProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockStorageMovementCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlockStorageMovementProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|BlocksStorageMovementResultProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ErasureCodingProtos
operator|.
name|BlockECReconstructionInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ExtendedBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|ProvidedStorageLocationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageUuidsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|DatanodeInfosProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|LocatedBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageTypeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|StorageTypesProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|BlockKeyProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|BlockWithLocationsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|BlocksWithLocationsProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|CheckpointCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|CheckpointSignatureProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|ExportedBlockKeysProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|NamenodeCommandProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|NamenodeRegistrationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|NamenodeRegistrationProto
operator|.
name|NamenodeRoleProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|NamespaceInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|NNHAStatusHeartbeatProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|RecoveringBlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|RemoteEditLogManifestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|RemoteEditLogProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|ReplicaStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsServerProtos
operator|.
name|StorageInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|JournalProtocolProtos
operator|.
name|JournalInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CheckpointSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BalancerBandwidthCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockECReconstructionCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockIdCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockECReconstructionCommand
operator|.
name|BlockECReconstructionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockReportContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockStorageMovementCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockStorageMovementCommand
operator|.
name|BlockMovingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksStorageMovementResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksStorageMovementResult
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
operator|.
name|BlockWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
operator|.
name|StripedBlockWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|CheckpointCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DropSPSWorkCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|FinalizeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|JournalInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|KeyUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NNHAStatusHeartbeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RegisterCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowDiskReports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowPeerReports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|VolumeFailureSummary
import|;
end_import

begin_comment
comment|/**  * Utilities for converting protobuf classes to and from implementation classes  * and other helper utilities to help in dealing with protobuf.  *   * Note that when converting from an internal type to protobuf type, the  * converter never return null for protobuf type. The check for internal type  * being null must be done before calling the convert() method.  *  * For those helper methods that convert HDFS client-side data structures from  * and to protobuf, see {@link PBHelperClient}.  */
end_comment

begin_class
DECL|class|PBHelper
specifier|public
class|class
name|PBHelper
block|{
DECL|field|REG_CMD_PROTO
specifier|private
specifier|static
specifier|final
name|RegisterCommandProto
name|REG_CMD_PROTO
init|=
name|RegisterCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|REG_CMD
specifier|private
specifier|static
specifier|final
name|RegisterCommand
name|REG_CMD
init|=
operator|new
name|RegisterCommand
argument_list|()
decl_stmt|;
DECL|field|DROP_SPS_WORK_CMD_PROTO
specifier|private
specifier|static
specifier|final
name|DropSPSWorkCommandProto
name|DROP_SPS_WORK_CMD_PROTO
init|=
name|DropSPSWorkCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|DROP_SPS_WORK_CMD
specifier|private
specifier|static
specifier|final
name|DropSPSWorkCommand
name|DROP_SPS_WORK_CMD
init|=
operator|new
name|DropSPSWorkCommand
argument_list|()
decl_stmt|;
DECL|method|PBHelper ()
specifier|private
name|PBHelper
parameter_list|()
block|{
comment|/** Hidden constructor */
block|}
DECL|method|convert (NamenodeRoleProto role)
specifier|public
specifier|static
name|NamenodeRole
name|convert
parameter_list|(
name|NamenodeRoleProto
name|role
parameter_list|)
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|NAMENODE
case|:
return|return
name|NamenodeRole
operator|.
name|NAMENODE
return|;
case|case
name|BACKUP
case|:
return|return
name|NamenodeRole
operator|.
name|BACKUP
return|;
case|case
name|CHECKPOINT
case|:
return|return
name|NamenodeRole
operator|.
name|CHECKPOINT
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert (NamenodeRole role)
specifier|public
specifier|static
name|NamenodeRoleProto
name|convert
parameter_list|(
name|NamenodeRole
name|role
parameter_list|)
block|{
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|NAMENODE
case|:
return|return
name|NamenodeRoleProto
operator|.
name|NAMENODE
return|;
case|case
name|BACKUP
case|:
return|return
name|NamenodeRoleProto
operator|.
name|BACKUP
return|;
case|case
name|CHECKPOINT
case|:
return|return
name|NamenodeRoleProto
operator|.
name|CHECKPOINT
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|convert (StorageInfo info)
specifier|public
specifier|static
name|StorageInfoProto
name|convert
parameter_list|(
name|StorageInfo
name|info
parameter_list|)
block|{
return|return
name|StorageInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterID
argument_list|(
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|.
name|setCTime
argument_list|(
name|info
operator|.
name|getCTime
argument_list|()
argument_list|)
operator|.
name|setLayoutVersion
argument_list|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
operator|.
name|setNamespceID
argument_list|(
name|info
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (StorageInfoProto info, NodeType type)
specifier|public
specifier|static
name|StorageInfo
name|convert
parameter_list|(
name|StorageInfoProto
name|info
parameter_list|,
name|NodeType
name|type
parameter_list|)
block|{
return|return
operator|new
name|StorageInfo
argument_list|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|info
operator|.
name|getNamespceID
argument_list|()
argument_list|,
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|info
operator|.
name|getCTime
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|method|convert (NamenodeRegistration reg)
specifier|public
specifier|static
name|NamenodeRegistrationProto
name|convert
parameter_list|(
name|NamenodeRegistration
name|reg
parameter_list|)
block|{
return|return
name|NamenodeRegistrationProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setHttpAddress
argument_list|(
name|reg
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
operator|.
name|setRole
argument_list|(
name|convert
argument_list|(
name|reg
operator|.
name|getRole
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setRpcAddress
argument_list|(
name|reg
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|convert
argument_list|(
operator|(
name|StorageInfo
operator|)
name|reg
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (NamenodeRegistrationProto reg)
specifier|public
specifier|static
name|NamenodeRegistration
name|convert
parameter_list|(
name|NamenodeRegistrationProto
name|reg
parameter_list|)
block|{
name|StorageInfo
name|si
init|=
name|convert
argument_list|(
name|reg
operator|.
name|getStorageInfo
argument_list|()
argument_list|,
name|NodeType
operator|.
name|NAME_NODE
argument_list|)
decl_stmt|;
return|return
operator|new
name|NamenodeRegistration
argument_list|(
name|reg
operator|.
name|getRpcAddress
argument_list|()
argument_list|,
name|reg
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|si
argument_list|,
name|convert
argument_list|(
name|reg
operator|.
name|getRole
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (BlockWithLocations blk)
specifier|public
specifier|static
name|BlockWithLocationsProto
name|convert
parameter_list|(
name|BlockWithLocations
name|blk
parameter_list|)
block|{
name|BlockWithLocationsProto
operator|.
name|Builder
name|builder
init|=
name|BlockWithLocationsProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlock
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|blk
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAllDatanodeUuids
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blk
operator|.
name|getDatanodeUuids
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAllStorageUuids
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blk
operator|.
name|getStorageIDs
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAllStorageTypes
argument_list|(
name|PBHelperClient
operator|.
name|convertStorageTypes
argument_list|(
name|blk
operator|.
name|getStorageTypes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|blk
operator|instanceof
name|StripedBlockWithLocations
condition|)
block|{
name|StripedBlockWithLocations
name|sblk
init|=
operator|(
name|StripedBlockWithLocations
operator|)
name|blk
decl_stmt|;
name|builder
operator|.
name|setIndices
argument_list|(
name|PBHelperClient
operator|.
name|getByteString
argument_list|(
name|sblk
operator|.
name|getIndices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDataBlockNum
argument_list|(
name|sblk
operator|.
name|getDataBlockNum
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCellSize
argument_list|(
name|sblk
operator|.
name|getCellSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockWithLocationsProto b)
specifier|public
specifier|static
name|BlockWithLocations
name|convert
parameter_list|(
name|BlockWithLocationsProto
name|b
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|datanodeUuids
init|=
name|b
operator|.
name|getDatanodeUuidsList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|storageUuids
init|=
name|b
operator|.
name|getStorageUuidsList
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StorageTypeProto
argument_list|>
name|storageTypes
init|=
name|b
operator|.
name|getStorageTypesList
argument_list|()
decl_stmt|;
name|BlockWithLocations
name|blk
init|=
operator|new
name|BlockWithLocations
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|datanodeUuids
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|datanodeUuids
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|storageUuids
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|storageUuids
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|PBHelperClient
operator|.
name|convertStorageTypes
argument_list|(
name|storageTypes
argument_list|,
name|storageUuids
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|hasIndices
argument_list|()
condition|)
block|{
name|blk
operator|=
operator|new
name|StripedBlockWithLocations
argument_list|(
name|blk
argument_list|,
name|b
operator|.
name|getIndices
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|b
operator|.
name|getDataBlockNum
argument_list|()
argument_list|,
name|b
operator|.
name|getCellSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|blk
return|;
block|}
DECL|method|convert (BlocksWithLocations blks)
specifier|public
specifier|static
name|BlocksWithLocationsProto
name|convert
parameter_list|(
name|BlocksWithLocations
name|blks
parameter_list|)
block|{
name|BlocksWithLocationsProto
operator|.
name|Builder
name|builder
init|=
name|BlocksWithLocationsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockWithLocations
name|b
range|:
name|blks
operator|.
name|getBlocks
argument_list|()
control|)
block|{
name|builder
operator|.
name|addBlocks
argument_list|(
name|convert
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlocksWithLocationsProto blocks)
specifier|public
specifier|static
name|BlocksWithLocations
name|convert
parameter_list|(
name|BlocksWithLocationsProto
name|blocks
parameter_list|)
block|{
name|List
argument_list|<
name|BlockWithLocationsProto
argument_list|>
name|b
init|=
name|blocks
operator|.
name|getBlocksList
argument_list|()
decl_stmt|;
name|BlockWithLocations
index|[]
name|ret
init|=
operator|new
name|BlockWithLocations
index|[
name|b
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockWithLocationsProto
name|entry
range|:
name|b
control|)
block|{
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|convert
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BlocksWithLocations
argument_list|(
name|ret
argument_list|)
return|;
block|}
DECL|method|convert (BlockKey key)
specifier|public
specifier|static
name|BlockKeyProto
name|convert
parameter_list|(
name|BlockKey
name|key
parameter_list|)
block|{
name|byte
index|[]
name|encodedKey
init|=
name|key
operator|.
name|getEncodedKey
argument_list|()
decl_stmt|;
name|ByteString
name|keyBytes
init|=
name|PBHelperClient
operator|.
name|getByteString
argument_list|(
name|encodedKey
operator|==
literal|null
condition|?
name|DFSUtilClient
operator|.
name|EMPTY_BYTES
else|:
name|encodedKey
argument_list|)
decl_stmt|;
return|return
name|BlockKeyProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyId
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
operator|.
name|setKeyBytes
argument_list|(
name|keyBytes
argument_list|)
operator|.
name|setExpiryDate
argument_list|(
name|key
operator|.
name|getExpiryDate
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockKeyProto k)
specifier|public
specifier|static
name|BlockKey
name|convert
parameter_list|(
name|BlockKeyProto
name|k
parameter_list|)
block|{
return|return
operator|new
name|BlockKey
argument_list|(
name|k
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|k
operator|.
name|getExpiryDate
argument_list|()
argument_list|,
name|k
operator|.
name|getKeyBytes
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (ExportedBlockKeys keys)
specifier|public
specifier|static
name|ExportedBlockKeysProto
name|convert
parameter_list|(
name|ExportedBlockKeys
name|keys
parameter_list|)
block|{
name|ExportedBlockKeysProto
operator|.
name|Builder
name|builder
init|=
name|ExportedBlockKeysProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setIsBlockTokenEnabled
argument_list|(
name|keys
operator|.
name|isBlockTokenEnabled
argument_list|()
argument_list|)
operator|.
name|setKeyUpdateInterval
argument_list|(
name|keys
operator|.
name|getKeyUpdateInterval
argument_list|()
argument_list|)
operator|.
name|setTokenLifeTime
argument_list|(
name|keys
operator|.
name|getTokenLifetime
argument_list|()
argument_list|)
operator|.
name|setCurrentKey
argument_list|(
name|convert
argument_list|(
name|keys
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockKey
name|k
range|:
name|keys
operator|.
name|getAllKeys
argument_list|()
control|)
block|{
name|builder
operator|.
name|addAllKeys
argument_list|(
name|convert
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (ExportedBlockKeysProto keys)
specifier|public
specifier|static
name|ExportedBlockKeys
name|convert
parameter_list|(
name|ExportedBlockKeysProto
name|keys
parameter_list|)
block|{
return|return
operator|new
name|ExportedBlockKeys
argument_list|(
name|keys
operator|.
name|getIsBlockTokenEnabled
argument_list|()
argument_list|,
name|keys
operator|.
name|getKeyUpdateInterval
argument_list|()
argument_list|,
name|keys
operator|.
name|getTokenLifeTime
argument_list|()
argument_list|,
name|convert
argument_list|(
name|keys
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
argument_list|,
name|convertBlockKeys
argument_list|(
name|keys
operator|.
name|getAllKeysList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (CheckpointSignature s)
specifier|public
specifier|static
name|CheckpointSignatureProto
name|convert
parameter_list|(
name|CheckpointSignature
name|s
parameter_list|)
block|{
return|return
name|CheckpointSignatureProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolId
argument_list|(
name|s
operator|.
name|getBlockpoolID
argument_list|()
argument_list|)
operator|.
name|setCurSegmentTxId
argument_list|(
name|s
operator|.
name|getCurSegmentTxId
argument_list|()
argument_list|)
operator|.
name|setMostRecentCheckpointTxId
argument_list|(
name|s
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|StorageInfo
operator|)
name|s
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (CheckpointSignatureProto s)
specifier|public
specifier|static
name|CheckpointSignature
name|convert
parameter_list|(
name|CheckpointSignatureProto
name|s
parameter_list|)
block|{
name|StorageInfo
name|si
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|s
operator|.
name|getStorageInfo
argument_list|()
argument_list|,
name|NodeType
operator|.
name|NAME_NODE
argument_list|)
decl_stmt|;
return|return
operator|new
name|CheckpointSignature
argument_list|(
name|si
argument_list|,
name|s
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|s
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
argument_list|,
name|s
operator|.
name|getCurSegmentTxId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (RemoteEditLog log)
specifier|public
specifier|static
name|RemoteEditLogProto
name|convert
parameter_list|(
name|RemoteEditLog
name|log
parameter_list|)
block|{
return|return
name|RemoteEditLogProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStartTxId
argument_list|(
name|log
operator|.
name|getStartTxId
argument_list|()
argument_list|)
operator|.
name|setEndTxId
argument_list|(
name|log
operator|.
name|getEndTxId
argument_list|()
argument_list|)
operator|.
name|setIsInProgress
argument_list|(
name|log
operator|.
name|isInProgress
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (RemoteEditLogProto l)
specifier|public
specifier|static
name|RemoteEditLog
name|convert
parameter_list|(
name|RemoteEditLogProto
name|l
parameter_list|)
block|{
return|return
operator|new
name|RemoteEditLog
argument_list|(
name|l
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|l
operator|.
name|getEndTxId
argument_list|()
argument_list|,
name|l
operator|.
name|getIsInProgress
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert ( RemoteEditLogManifest manifest)
specifier|public
specifier|static
name|RemoteEditLogManifestProto
name|convert
parameter_list|(
name|RemoteEditLogManifest
name|manifest
parameter_list|)
block|{
name|RemoteEditLogManifestProto
operator|.
name|Builder
name|builder
init|=
name|RemoteEditLogManifestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCommittedTxnId
argument_list|(
name|manifest
operator|.
name|getCommittedTxnId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RemoteEditLog
name|log
range|:
name|manifest
operator|.
name|getLogs
argument_list|()
control|)
block|{
name|builder
operator|.
name|addLogs
argument_list|(
name|convert
argument_list|(
name|log
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( RemoteEditLogManifestProto manifest)
specifier|public
specifier|static
name|RemoteEditLogManifest
name|convert
parameter_list|(
name|RemoteEditLogManifestProto
name|manifest
parameter_list|)
block|{
name|List
argument_list|<
name|RemoteEditLog
argument_list|>
name|logs
init|=
operator|new
name|ArrayList
argument_list|<
name|RemoteEditLog
argument_list|>
argument_list|(
name|manifest
operator|.
name|getLogsList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RemoteEditLogProto
name|l
range|:
name|manifest
operator|.
name|getLogsList
argument_list|()
control|)
block|{
name|logs
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RemoteEditLogManifest
argument_list|(
name|logs
argument_list|,
name|manifest
operator|.
name|getCommittedTxnId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (CheckpointCommand cmd)
specifier|public
specifier|static
name|CheckpointCommandProto
name|convert
parameter_list|(
name|CheckpointCommand
name|cmd
parameter_list|)
block|{
return|return
name|CheckpointCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSignature
argument_list|(
name|convert
argument_list|(
name|cmd
operator|.
name|getSignature
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setNeedToReturnImage
argument_list|(
name|cmd
operator|.
name|needToReturnImage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (NamenodeCommand cmd)
specifier|public
specifier|static
name|NamenodeCommandProto
name|convert
parameter_list|(
name|NamenodeCommand
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|instanceof
name|CheckpointCommand
condition|)
block|{
return|return
name|NamenodeCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAction
argument_list|(
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|NamenodeCommandProto
operator|.
name|Type
operator|.
name|CheckPointCommand
argument_list|)
operator|.
name|setCheckpointCmd
argument_list|(
name|convert
argument_list|(
operator|(
name|CheckpointCommand
operator|)
name|cmd
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|NamenodeCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|NamenodeCommandProto
operator|.
name|Type
operator|.
name|NamenodeCommand
argument_list|)
operator|.
name|setAction
argument_list|(
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertBlockKeys (List<BlockKeyProto> list)
specifier|public
specifier|static
name|BlockKey
index|[]
name|convertBlockKeys
parameter_list|(
name|List
argument_list|<
name|BlockKeyProto
argument_list|>
name|list
parameter_list|)
block|{
name|BlockKey
index|[]
name|ret
init|=
operator|new
name|BlockKey
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockKeyProto
name|k
range|:
name|list
control|)
block|{
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|convert
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|convert (NamespaceInfoProto info)
specifier|public
specifier|static
name|NamespaceInfo
name|convert
parameter_list|(
name|NamespaceInfoProto
name|info
parameter_list|)
block|{
name|StorageInfoProto
name|storage
init|=
name|info
operator|.
name|getStorageInfo
argument_list|()
decl_stmt|;
return|return
operator|new
name|NamespaceInfo
argument_list|(
name|storage
operator|.
name|getNamespceID
argument_list|()
argument_list|,
name|storage
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|info
operator|.
name|getBlockPoolID
argument_list|()
argument_list|,
name|storage
operator|.
name|getCTime
argument_list|()
argument_list|,
name|info
operator|.
name|getBuildVersion
argument_list|()
argument_list|,
name|info
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|,
name|info
operator|.
name|getCapabilities
argument_list|()
argument_list|,
name|convert
argument_list|(
name|info
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (NamenodeCommandProto cmd)
specifier|public
specifier|static
name|NamenodeCommand
name|convert
parameter_list|(
name|NamenodeCommandProto
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
return|return
literal|null
return|;
switch|switch
condition|(
name|cmd
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CheckPointCommand
case|:
name|CheckpointCommandProto
name|chkPt
init|=
name|cmd
operator|.
name|getCheckpointCmd
argument_list|()
decl_stmt|;
return|return
operator|new
name|CheckpointCommand
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|chkPt
operator|.
name|getSignature
argument_list|()
argument_list|)
argument_list|,
name|chkPt
operator|.
name|getNeedToReturnImage
argument_list|()
argument_list|)
return|;
default|default:
return|return
operator|new
name|NamenodeCommand
argument_list|(
name|cmd
operator|.
name|getAction
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|convert (RecoveringBlock b)
specifier|public
specifier|static
name|RecoveringBlockProto
name|convert
parameter_list|(
name|RecoveringBlock
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LocatedBlockProto
name|lb
init|=
name|PBHelperClient
operator|.
name|convertLocatedBlock
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|RecoveringBlockProto
operator|.
name|Builder
name|builder
init|=
name|RecoveringBlockProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBlock
argument_list|(
name|lb
argument_list|)
operator|.
name|setNewGenStamp
argument_list|(
name|b
operator|.
name|getNewGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|getNewBlock
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setTruncateBlock
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|b
operator|.
name|getNewBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|instanceof
name|RecoveringStripedBlock
condition|)
block|{
name|RecoveringStripedBlock
name|sb
init|=
operator|(
name|RecoveringStripedBlock
operator|)
name|b
decl_stmt|;
name|builder
operator|.
name|setEcPolicy
argument_list|(
name|PBHelperClient
operator|.
name|convertErasureCodingPolicy
argument_list|(
name|sb
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBlockIndices
argument_list|(
name|PBHelperClient
operator|.
name|getByteString
argument_list|(
name|sb
operator|.
name|getBlockIndices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (RecoveringBlockProto b)
specifier|public
specifier|static
name|RecoveringBlock
name|convert
parameter_list|(
name|RecoveringBlockProto
name|b
parameter_list|)
block|{
name|LocatedBlock
name|lb
init|=
name|PBHelperClient
operator|.
name|convertLocatedBlockProto
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|RecoveringBlock
name|rBlock
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|hasTruncateBlock
argument_list|()
condition|)
block|{
name|rBlock
operator|=
operator|new
name|RecoveringBlock
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
argument_list|,
name|lb
operator|.
name|getLocations
argument_list|()
argument_list|,
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|b
operator|.
name|getTruncateBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rBlock
operator|=
operator|new
name|RecoveringBlock
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
argument_list|,
name|lb
operator|.
name|getLocations
argument_list|()
argument_list|,
name|b
operator|.
name|getNewGenStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|.
name|hasEcPolicy
argument_list|()
condition|)
block|{
assert|assert
name|b
operator|.
name|hasBlockIndices
argument_list|()
assert|;
name|byte
index|[]
name|indices
init|=
name|b
operator|.
name|getBlockIndices
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|rBlock
operator|=
operator|new
name|RecoveringStripedBlock
argument_list|(
name|rBlock
argument_list|,
name|indices
argument_list|,
name|PBHelperClient
operator|.
name|convertErasureCodingPolicy
argument_list|(
name|b
operator|.
name|getEcPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rBlock
return|;
block|}
DECL|method|convert (ReplicaStateProto state)
specifier|public
specifier|static
name|ReplicaState
name|convert
parameter_list|(
name|ReplicaStateProto
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|RBW
case|:
return|return
name|ReplicaState
operator|.
name|RBW
return|;
case|case
name|RUR
case|:
return|return
name|ReplicaState
operator|.
name|RUR
return|;
case|case
name|RWR
case|:
return|return
name|ReplicaState
operator|.
name|RWR
return|;
case|case
name|TEMPORARY
case|:
return|return
name|ReplicaState
operator|.
name|TEMPORARY
return|;
case|case
name|FINALIZED
case|:
default|default:
return|return
name|ReplicaState
operator|.
name|FINALIZED
return|;
block|}
block|}
DECL|method|convert (ReplicaState state)
specifier|public
specifier|static
name|ReplicaStateProto
name|convert
parameter_list|(
name|ReplicaState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|RBW
case|:
return|return
name|ReplicaStateProto
operator|.
name|RBW
return|;
case|case
name|RUR
case|:
return|return
name|ReplicaStateProto
operator|.
name|RUR
return|;
case|case
name|RWR
case|:
return|return
name|ReplicaStateProto
operator|.
name|RWR
return|;
case|case
name|TEMPORARY
case|:
return|return
name|ReplicaStateProto
operator|.
name|TEMPORARY
return|;
case|case
name|FINALIZED
case|:
default|default:
return|return
name|ReplicaStateProto
operator|.
name|FINALIZED
return|;
block|}
block|}
DECL|method|convert ( DatanodeRegistration registration)
specifier|public
specifier|static
name|DatanodeRegistrationProto
name|convert
parameter_list|(
name|DatanodeRegistration
name|registration
parameter_list|)
block|{
name|DatanodeRegistrationProto
operator|.
name|Builder
name|builder
init|=
name|DatanodeRegistrationProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|setDatanodeID
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
operator|(
name|DatanodeID
operator|)
name|registration
argument_list|)
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|convert
argument_list|(
name|registration
operator|.
name|getStorageInfo
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setKeys
argument_list|(
name|convert
argument_list|(
name|registration
operator|.
name|getExportedKeys
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSoftwareVersion
argument_list|(
name|registration
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (DatanodeRegistrationProto proto)
specifier|public
specifier|static
name|DatanodeRegistration
name|convert
parameter_list|(
name|DatanodeRegistrationProto
name|proto
parameter_list|)
block|{
name|StorageInfo
name|si
init|=
name|convert
argument_list|(
name|proto
operator|.
name|getStorageInfo
argument_list|()
argument_list|,
name|NodeType
operator|.
name|DATA_NODE
argument_list|)
decl_stmt|;
return|return
operator|new
name|DatanodeRegistration
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getDatanodeID
argument_list|()
argument_list|)
argument_list|,
name|si
argument_list|,
name|convert
argument_list|(
name|proto
operator|.
name|getKeys
argument_list|()
argument_list|)
argument_list|,
name|proto
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeCommandProto proto)
specifier|public
specifier|static
name|DatanodeCommand
name|convert
parameter_list|(
name|DatanodeCommandProto
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
operator|.
name|getCmdType
argument_list|()
condition|)
block|{
case|case
name|BalancerBandwidthCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getBalancerCmd
argument_list|()
argument_list|)
return|;
case|case
name|BlockCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getBlkCmd
argument_list|()
argument_list|)
return|;
case|case
name|BlockRecoveryCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getRecoveryCmd
argument_list|()
argument_list|)
return|;
case|case
name|FinalizeCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getFinalizeCmd
argument_list|()
argument_list|)
return|;
case|case
name|KeyUpdateCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getKeyUpdateCmd
argument_list|()
argument_list|)
return|;
case|case
name|RegisterCommand
case|:
return|return
name|REG_CMD
return|;
case|case
name|BlockIdCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getBlkIdCmd
argument_list|()
argument_list|)
return|;
case|case
name|BlockECReconstructionCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getBlkECReconstructionCmd
argument_list|()
argument_list|)
return|;
case|case
name|BlockStorageMovementCommand
case|:
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getBlkStorageMovementCmd
argument_list|()
argument_list|)
return|;
case|case
name|DropSPSWorkCommand
case|:
return|return
name|DROP_SPS_WORK_CMD
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
DECL|method|convert ( BalancerBandwidthCommand bbCmd)
specifier|public
specifier|static
name|BalancerBandwidthCommandProto
name|convert
parameter_list|(
name|BalancerBandwidthCommand
name|bbCmd
parameter_list|)
block|{
return|return
name|BalancerBandwidthCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBandwidth
argument_list|(
name|bbCmd
operator|.
name|getBalancerBandwidthValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (KeyUpdateCommand cmd)
specifier|public
specifier|static
name|KeyUpdateCommandProto
name|convert
parameter_list|(
name|KeyUpdateCommand
name|cmd
parameter_list|)
block|{
return|return
name|KeyUpdateCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeys
argument_list|(
name|convert
argument_list|(
name|cmd
operator|.
name|getExportedKeys
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockRecoveryCommand cmd)
specifier|public
specifier|static
name|BlockRecoveryCommandProto
name|convert
parameter_list|(
name|BlockRecoveryCommand
name|cmd
parameter_list|)
block|{
name|BlockRecoveryCommandProto
operator|.
name|Builder
name|builder
init|=
name|BlockRecoveryCommandProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RecoveringBlock
name|b
range|:
name|cmd
operator|.
name|getRecoveringBlocks
argument_list|()
control|)
block|{
name|builder
operator|.
name|addBlocks
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (FinalizeCommand cmd)
specifier|public
specifier|static
name|FinalizeCommandProto
name|convert
parameter_list|(
name|FinalizeCommand
name|cmd
parameter_list|)
block|{
return|return
name|FinalizeCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolId
argument_list|(
name|cmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockCommand cmd)
specifier|public
specifier|static
name|BlockCommandProto
name|convert
parameter_list|(
name|BlockCommand
name|cmd
parameter_list|)
block|{
name|BlockCommandProto
operator|.
name|Builder
name|builder
init|=
name|BlockCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolId
argument_list|(
name|cmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cmd
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|DatanodeProtocol
operator|.
name|DNA_TRANSFER
case|:
name|builder
operator|.
name|setAction
argument_list|(
name|BlockCommandProto
operator|.
name|Action
operator|.
name|TRANSFER
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_INVALIDATE
case|:
name|builder
operator|.
name|setAction
argument_list|(
name|BlockCommandProto
operator|.
name|Action
operator|.
name|INVALIDATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_SHUTDOWN
case|:
name|builder
operator|.
name|setAction
argument_list|(
name|BlockCommandProto
operator|.
name|Action
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Invalid action"
argument_list|)
throw|;
block|}
name|Block
index|[]
name|blocks
init|=
name|cmd
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|addBlocks
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addAllTargets
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|cmd
operator|.
name|getTargets
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAllTargetStorageUuids
argument_list|(
name|convert
argument_list|(
name|cmd
operator|.
name|getTargetStorageIDs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StorageType
index|[]
index|[]
name|types
init|=
name|cmd
operator|.
name|getTargetStorageTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllTargetStorageTypes
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|types
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockIdCommand cmd)
specifier|public
specifier|static
name|BlockIdCommandProto
name|convert
parameter_list|(
name|BlockIdCommand
name|cmd
parameter_list|)
block|{
name|BlockIdCommandProto
operator|.
name|Builder
name|builder
init|=
name|BlockIdCommandProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockPoolId
argument_list|(
name|cmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cmd
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|DatanodeProtocol
operator|.
name|DNA_CACHE
case|:
name|builder
operator|.
name|setAction
argument_list|(
name|BlockIdCommandProto
operator|.
name|Action
operator|.
name|CACHE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_UNCACHE
case|:
name|builder
operator|.
name|setAction
argument_list|(
name|BlockIdCommandProto
operator|.
name|Action
operator|.
name|UNCACHE
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Invalid action"
argument_list|)
throw|;
block|}
name|long
index|[]
name|blockIds
init|=
name|cmd
operator|.
name|getBlockIds
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|addBlockIds
argument_list|(
name|blockIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (String[][] targetStorageUuids)
specifier|private
specifier|static
name|List
argument_list|<
name|StorageUuidsProto
argument_list|>
name|convert
parameter_list|(
name|String
index|[]
index|[]
name|targetStorageUuids
parameter_list|)
block|{
name|StorageUuidsProto
index|[]
name|ret
init|=
operator|new
name|StorageUuidsProto
index|[
name|targetStorageUuids
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetStorageUuids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|StorageUuidsProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllStorageUuids
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|targetStorageUuids
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|ret
argument_list|)
return|;
block|}
DECL|method|convert (DatanodeCommand datanodeCommand)
specifier|public
specifier|static
name|DatanodeCommandProto
name|convert
parameter_list|(
name|DatanodeCommand
name|datanodeCommand
parameter_list|)
block|{
name|DatanodeCommandProto
operator|.
name|Builder
name|builder
init|=
name|DatanodeCommandProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|datanodeCommand
operator|==
literal|null
condition|)
block|{
return|return
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|NullDatanodeCommand
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
switch|switch
condition|(
name|datanodeCommand
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|DatanodeProtocol
operator|.
name|DNA_BALANCERBANDWIDTHUPDATE
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|BalancerBandwidthCommand
argument_list|)
operator|.
name|setBalancerCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|BalancerBandwidthCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_ACCESSKEYUPDATE
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|KeyUpdateCommand
argument_list|)
operator|.
name|setKeyUpdateCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|KeyUpdateCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_RECOVERBLOCK
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|BlockRecoveryCommand
argument_list|)
operator|.
name|setRecoveryCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|BlockRecoveryCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_FINALIZE
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|FinalizeCommand
argument_list|)
operator|.
name|setFinalizeCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|FinalizeCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_REGISTER
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|RegisterCommand
argument_list|)
operator|.
name|setRegisterCmd
argument_list|(
name|REG_CMD_PROTO
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_TRANSFER
case|:
case|case
name|DatanodeProtocol
operator|.
name|DNA_INVALIDATE
case|:
case|case
name|DatanodeProtocol
operator|.
name|DNA_SHUTDOWN
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|BlockCommand
argument_list|)
operator|.
name|setBlkCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|BlockCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_CACHE
case|:
case|case
name|DatanodeProtocol
operator|.
name|DNA_UNCACHE
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|BlockIdCommand
argument_list|)
operator|.
name|setBlkIdCmd
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|BlockIdCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_ERASURE_CODING_RECONSTRUCTION
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|BlockECReconstructionCommand
argument_list|)
operator|.
name|setBlkECReconstructionCmd
argument_list|(
name|convert
argument_list|(
operator|(
name|BlockECReconstructionCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_BLOCK_STORAGE_MOVEMENT
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|BlockStorageMovementCommand
argument_list|)
operator|.
name|setBlkStorageMovementCmd
argument_list|(
name|convert
argument_list|(
operator|(
name|BlockStorageMovementCommand
operator|)
name|datanodeCommand
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_DROP_SPS_WORK_COMMAND
case|:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|DropSPSWorkCommand
argument_list|)
operator|.
name|setDropSPSWorkCmd
argument_list|(
name|DROP_SPS_WORK_CMD_PROTO
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatanodeProtocol
operator|.
name|DNA_UNKNOWN
case|:
comment|//Not expected
default|default:
name|builder
operator|.
name|setCmdType
argument_list|(
name|DatanodeCommandProto
operator|.
name|Type
operator|.
name|NullDatanodeCommand
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (KeyUpdateCommandProto keyUpdateCmd)
specifier|public
specifier|static
name|KeyUpdateCommand
name|convert
parameter_list|(
name|KeyUpdateCommandProto
name|keyUpdateCmd
parameter_list|)
block|{
return|return
operator|new
name|KeyUpdateCommand
argument_list|(
name|convert
argument_list|(
name|keyUpdateCmd
operator|.
name|getKeys
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (FinalizeCommandProto finalizeCmd)
specifier|public
specifier|static
name|FinalizeCommand
name|convert
parameter_list|(
name|FinalizeCommandProto
name|finalizeCmd
parameter_list|)
block|{
return|return
operator|new
name|FinalizeCommand
argument_list|(
name|finalizeCmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert ( BlockRecoveryCommandProto recoveryCmd)
specifier|public
specifier|static
name|BlockRecoveryCommand
name|convert
parameter_list|(
name|BlockRecoveryCommandProto
name|recoveryCmd
parameter_list|)
block|{
name|List
argument_list|<
name|RecoveringBlockProto
argument_list|>
name|list
init|=
name|recoveryCmd
operator|.
name|getBlocksList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecoveringBlock
argument_list|>
name|recoveringBlocks
init|=
operator|new
name|ArrayList
argument_list|<
name|RecoveringBlock
argument_list|>
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RecoveringBlockProto
name|rbp
range|:
name|list
control|)
block|{
name|recoveringBlocks
operator|.
name|add
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|rbp
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BlockRecoveryCommand
argument_list|(
name|recoveringBlocks
argument_list|)
return|;
block|}
DECL|method|convert (BlockCommandProto blkCmd)
specifier|public
specifier|static
name|BlockCommand
name|convert
parameter_list|(
name|BlockCommandProto
name|blkCmd
parameter_list|)
block|{
name|List
argument_list|<
name|BlockProto
argument_list|>
name|blockProtoList
init|=
name|blkCmd
operator|.
name|getBlocksList
argument_list|()
decl_stmt|;
name|Block
index|[]
name|blocks
init|=
operator|new
name|Block
index|[
name|blockProtoList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockProtoList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|blocks
index|[
name|i
index|]
operator|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|blockProtoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DatanodeInfosProto
argument_list|>
name|targetList
init|=
name|blkCmd
operator|.
name|getTargetsList
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
index|[]
name|targets
init|=
operator|new
name|DatanodeInfo
index|[
name|targetList
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|targets
index|[
name|i
index|]
operator|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|targetList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StorageType
index|[]
index|[]
name|targetStorageTypes
init|=
operator|new
name|StorageType
index|[
name|targetList
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|List
argument_list|<
name|StorageTypesProto
argument_list|>
name|targetStorageTypesList
init|=
name|blkCmd
operator|.
name|getTargetStorageTypesList
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetStorageTypesList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// missing storage types
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetStorageTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|targetStorageTypes
index|[
name|i
index|]
operator|=
operator|new
name|StorageType
index|[
name|targets
index|[
name|i
index|]
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|targetStorageTypes
index|[
name|i
index|]
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetStorageTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|StorageTypeProto
argument_list|>
name|p
init|=
name|targetStorageTypesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStorageTypesList
argument_list|()
decl_stmt|;
name|targetStorageTypes
index|[
name|i
index|]
operator|=
name|PBHelperClient
operator|.
name|convertStorageTypes
argument_list|(
name|p
argument_list|,
name|targets
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|StorageUuidsProto
argument_list|>
name|targetStorageUuidsList
init|=
name|blkCmd
operator|.
name|getTargetStorageUuidsList
argument_list|()
decl_stmt|;
name|String
index|[]
index|[]
name|targetStorageIDs
init|=
operator|new
name|String
index|[
name|targetStorageUuidsList
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targetStorageIDs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|storageIDs
init|=
name|targetStorageUuidsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStorageUuidsList
argument_list|()
decl_stmt|;
name|targetStorageIDs
index|[
name|i
index|]
operator|=
name|storageIDs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|storageIDs
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|int
name|action
init|=
name|DatanodeProtocol
operator|.
name|DNA_UNKNOWN
decl_stmt|;
switch|switch
condition|(
name|blkCmd
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|TRANSFER
case|:
name|action
operator|=
name|DatanodeProtocol
operator|.
name|DNA_TRANSFER
expr_stmt|;
break|break;
case|case
name|INVALIDATE
case|:
name|action
operator|=
name|DatanodeProtocol
operator|.
name|DNA_INVALIDATE
expr_stmt|;
break|break;
case|case
name|SHUTDOWN
case|:
name|action
operator|=
name|DatanodeProtocol
operator|.
name|DNA_SHUTDOWN
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown action type: "
operator|+
name|blkCmd
operator|.
name|getAction
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|BlockCommand
argument_list|(
name|action
argument_list|,
name|blkCmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|blocks
argument_list|,
name|targets
argument_list|,
name|targetStorageTypes
argument_list|,
name|targetStorageIDs
argument_list|)
return|;
block|}
DECL|method|convert (BlockIdCommandProto blkIdCmd)
specifier|public
specifier|static
name|BlockIdCommand
name|convert
parameter_list|(
name|BlockIdCommandProto
name|blkIdCmd
parameter_list|)
block|{
name|int
name|numBlockIds
init|=
name|blkIdCmd
operator|.
name|getBlockIdsCount
argument_list|()
decl_stmt|;
name|long
name|blockIds
index|[]
init|=
operator|new
name|long
index|[
name|numBlockIds
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlockIds
condition|;
name|i
operator|++
control|)
block|{
name|blockIds
index|[
name|i
index|]
operator|=
name|blkIdCmd
operator|.
name|getBlockIds
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|action
init|=
name|DatanodeProtocol
operator|.
name|DNA_UNKNOWN
decl_stmt|;
switch|switch
condition|(
name|blkIdCmd
operator|.
name|getAction
argument_list|()
condition|)
block|{
case|case
name|CACHE
case|:
name|action
operator|=
name|DatanodeProtocol
operator|.
name|DNA_CACHE
expr_stmt|;
break|break;
case|case
name|UNCACHE
case|:
name|action
operator|=
name|DatanodeProtocol
operator|.
name|DNA_UNCACHE
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown action type: "
operator|+
name|blkIdCmd
operator|.
name|getAction
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|BlockIdCommand
argument_list|(
name|action
argument_list|,
name|blkIdCmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|blockIds
argument_list|)
return|;
block|}
DECL|method|convert ( BalancerBandwidthCommandProto balancerCmd)
specifier|public
specifier|static
name|BalancerBandwidthCommand
name|convert
parameter_list|(
name|BalancerBandwidthCommandProto
name|balancerCmd
parameter_list|)
block|{
return|return
operator|new
name|BalancerBandwidthCommand
argument_list|(
name|balancerCmd
operator|.
name|getBandwidth
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert ( ReceivedDeletedBlockInfo receivedDeletedBlockInfo)
specifier|public
specifier|static
name|ReceivedDeletedBlockInfoProto
name|convert
parameter_list|(
name|ReceivedDeletedBlockInfo
name|receivedDeletedBlockInfo
parameter_list|)
block|{
name|ReceivedDeletedBlockInfoProto
operator|.
name|Builder
name|builder
init|=
name|ReceivedDeletedBlockInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ReceivedDeletedBlockInfoProto
operator|.
name|BlockStatus
name|status
decl_stmt|;
switch|switch
condition|(
name|receivedDeletedBlockInfo
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|RECEIVING_BLOCK
case|:
name|status
operator|=
name|ReceivedDeletedBlockInfoProto
operator|.
name|BlockStatus
operator|.
name|RECEIVING
expr_stmt|;
break|break;
case|case
name|RECEIVED_BLOCK
case|:
name|status
operator|=
name|ReceivedDeletedBlockInfoProto
operator|.
name|BlockStatus
operator|.
name|RECEIVED
expr_stmt|;
break|break;
case|case
name|DELETED_BLOCK
case|:
name|status
operator|=
name|ReceivedDeletedBlockInfoProto
operator|.
name|BlockStatus
operator|.
name|DELETED
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad status: "
operator|+
name|receivedDeletedBlockInfo
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
name|builder
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|receivedDeletedBlockInfo
operator|.
name|getDelHints
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setDeleteHint
argument_list|(
name|receivedDeletedBlockInfo
operator|.
name|getDelHints
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|setBlock
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|receivedDeletedBlockInfo
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( ReceivedDeletedBlockInfoProto proto)
specifier|public
specifier|static
name|ReceivedDeletedBlockInfo
name|convert
parameter_list|(
name|ReceivedDeletedBlockInfoProto
name|proto
parameter_list|)
block|{
name|ReceivedDeletedBlockInfo
operator|.
name|BlockStatus
name|status
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|RECEIVING
case|:
name|status
operator|=
name|BlockStatus
operator|.
name|RECEIVING_BLOCK
expr_stmt|;
break|break;
case|case
name|RECEIVED
case|:
name|status
operator|=
name|BlockStatus
operator|.
name|RECEIVED_BLOCK
expr_stmt|;
break|break;
case|case
name|DELETED
case|:
name|status
operator|=
name|BlockStatus
operator|.
name|DELETED_BLOCK
expr_stmt|;
break|break;
block|}
return|return
operator|new
name|ReceivedDeletedBlockInfo
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|proto
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|,
name|status
argument_list|,
name|proto
operator|.
name|hasDeleteHint
argument_list|()
condition|?
name|proto
operator|.
name|getDeleteHint
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|convert (NamespaceInfo info)
specifier|public
specifier|static
name|NamespaceInfoProto
name|convert
parameter_list|(
name|NamespaceInfo
name|info
parameter_list|)
block|{
name|NamespaceInfoProto
operator|.
name|Builder
name|builder
init|=
name|NamespaceInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBlockPoolID
argument_list|(
name|info
operator|.
name|getBlockPoolID
argument_list|()
argument_list|)
operator|.
name|setBuildVersion
argument_list|(
name|info
operator|.
name|getBuildVersion
argument_list|()
argument_list|)
operator|.
name|setUnused
argument_list|(
literal|0
argument_list|)
operator|.
name|setStorageInfo
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
operator|(
name|StorageInfo
operator|)
name|info
argument_list|)
argument_list|)
operator|.
name|setSoftwareVersion
argument_list|(
name|info
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|)
operator|.
name|setCapabilities
argument_list|(
name|info
operator|.
name|getCapabilities
argument_list|()
argument_list|)
expr_stmt|;
name|HAServiceState
name|state
init|=
name|info
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setState
argument_list|(
name|convert
argument_list|(
name|info
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (NNHAStatusHeartbeatProto.State s)
specifier|public
specifier|static
name|HAServiceState
name|convert
parameter_list|(
name|NNHAStatusHeartbeatProto
operator|.
name|State
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|ACTIVE
case|:
return|return
name|HAServiceState
operator|.
name|ACTIVE
return|;
case|case
name|STANDBY
case|:
return|return
name|HAServiceState
operator|.
name|STANDBY
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected HAServiceStateProto:"
operator|+
name|s
argument_list|)
throw|;
block|}
block|}
DECL|method|convert (HAServiceState s)
specifier|public
specifier|static
name|NNHAStatusHeartbeatProto
operator|.
name|State
name|convert
parameter_list|(
name|HAServiceState
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|ACTIVE
case|:
return|return
name|NNHAStatusHeartbeatProto
operator|.
name|State
operator|.
name|ACTIVE
return|;
case|case
name|STANDBY
case|:
return|return
name|NNHAStatusHeartbeatProto
operator|.
name|State
operator|.
name|STANDBY
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected HAServiceState:"
operator|+
name|s
argument_list|)
throw|;
block|}
block|}
DECL|method|convert (NNHAStatusHeartbeatProto s)
specifier|public
specifier|static
name|NNHAStatusHeartbeat
name|convert
parameter_list|(
name|NNHAStatusHeartbeatProto
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|NNHAStatusHeartbeat
argument_list|(
name|convert
argument_list|(
name|s
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|,
name|s
operator|.
name|getTxid
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (NNHAStatusHeartbeat hb)
specifier|public
specifier|static
name|NNHAStatusHeartbeatProto
name|convert
parameter_list|(
name|NNHAStatusHeartbeat
name|hb
parameter_list|)
block|{
if|if
condition|(
name|hb
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NNHAStatusHeartbeatProto
operator|.
name|Builder
name|builder
init|=
name|NNHAStatusHeartbeatProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setState
argument_list|(
name|convert
argument_list|(
name|hb
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTxid
argument_list|(
name|hb
operator|.
name|getTxId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertVolumeFailureSummary ( VolumeFailureSummaryProto proto)
specifier|public
specifier|static
name|VolumeFailureSummary
name|convertVolumeFailureSummary
parameter_list|(
name|VolumeFailureSummaryProto
name|proto
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|failedStorageLocations
init|=
name|proto
operator|.
name|getFailedStorageLocationsList
argument_list|()
decl_stmt|;
return|return
operator|new
name|VolumeFailureSummary
argument_list|(
name|failedStorageLocations
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|failedStorageLocations
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|proto
operator|.
name|getLastVolumeFailureDate
argument_list|()
argument_list|,
name|proto
operator|.
name|getEstimatedCapacityLostTotal
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertVolumeFailureSummary ( VolumeFailureSummary volumeFailureSummary)
specifier|public
specifier|static
name|VolumeFailureSummaryProto
name|convertVolumeFailureSummary
parameter_list|(
name|VolumeFailureSummary
name|volumeFailureSummary
parameter_list|)
block|{
name|VolumeFailureSummaryProto
operator|.
name|Builder
name|builder
init|=
name|VolumeFailureSummaryProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|failedStorageLocation
range|:
name|volumeFailureSummary
operator|.
name|getFailedStorageLocations
argument_list|()
control|)
block|{
name|builder
operator|.
name|addFailedStorageLocations
argument_list|(
name|failedStorageLocation
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setLastVolumeFailureDate
argument_list|(
name|volumeFailureSummary
operator|.
name|getLastVolumeFailureDate
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setEstimatedCapacityLostTotal
argument_list|(
name|volumeFailureSummary
operator|.
name|getEstimatedCapacityLostTotal
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertSlowPeerInfo ( SlowPeerReports slowPeers)
specifier|public
specifier|static
name|List
argument_list|<
name|SlowPeerReportProto
argument_list|>
name|convertSlowPeerInfo
parameter_list|(
name|SlowPeerReports
name|slowPeers
parameter_list|)
block|{
if|if
condition|(
name|slowPeers
operator|.
name|getSlowPeers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|SlowPeerReportProto
argument_list|>
name|slowPeerInfoProtos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|slowPeers
operator|.
name|getSlowPeers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|entry
range|:
name|slowPeers
operator|.
name|getSlowPeers
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|slowPeerInfoProtos
operator|.
name|add
argument_list|(
name|SlowPeerReportProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDataNodeId
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setAggregateLatency
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|slowPeerInfoProtos
return|;
block|}
DECL|method|convertSlowPeerInfo ( List<SlowPeerReportProto> slowPeerProtos)
specifier|public
specifier|static
name|SlowPeerReports
name|convertSlowPeerInfo
parameter_list|(
name|List
argument_list|<
name|SlowPeerReportProto
argument_list|>
name|slowPeerProtos
parameter_list|)
block|{
comment|// No slow peers, or possibly an older DataNode.
if|if
condition|(
name|slowPeerProtos
operator|==
literal|null
operator|||
name|slowPeerProtos
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|SlowPeerReports
operator|.
name|EMPTY_REPORT
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|slowPeersMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|slowPeerProtos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SlowPeerReportProto
name|proto
range|:
name|slowPeerProtos
control|)
block|{
if|if
condition|(
operator|!
name|proto
operator|.
name|hasDataNodeId
argument_list|()
condition|)
block|{
comment|// The DataNodeId should be reported.
continue|continue;
block|}
name|slowPeersMap
operator|.
name|put
argument_list|(
name|proto
operator|.
name|getDataNodeId
argument_list|()
argument_list|,
name|proto
operator|.
name|hasAggregateLatency
argument_list|()
condition|?
name|proto
operator|.
name|getAggregateLatency
argument_list|()
else|:
literal|0.0
argument_list|)
expr_stmt|;
block|}
return|return
name|SlowPeerReports
operator|.
name|create
argument_list|(
name|slowPeersMap
argument_list|)
return|;
block|}
DECL|method|convertSlowDiskInfo ( SlowDiskReports slowDisks)
specifier|public
specifier|static
name|List
argument_list|<
name|SlowDiskReportProto
argument_list|>
name|convertSlowDiskInfo
parameter_list|(
name|SlowDiskReports
name|slowDisks
parameter_list|)
block|{
if|if
condition|(
name|slowDisks
operator|.
name|getSlowDisks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|SlowDiskReportProto
argument_list|>
name|slowDiskInfoProtos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|slowDisks
operator|.
name|getSlowDisks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|SlowDiskReports
operator|.
name|DiskOp
argument_list|,
name|Double
argument_list|>
argument_list|>
name|entry
range|:
name|slowDisks
operator|.
name|getSlowDisks
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SlowDiskReportProto
operator|.
name|Builder
name|builder
init|=
name|SlowDiskReportProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBasePath
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SlowDiskReports
operator|.
name|DiskOp
argument_list|,
name|Double
argument_list|>
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|get
argument_list|(
name|SlowDiskReports
operator|.
name|DiskOp
operator|.
name|METADATA
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMeanMetadataOpLatency
argument_list|(
name|value
operator|.
name|get
argument_list|(
name|SlowDiskReports
operator|.
name|DiskOp
operator|.
name|METADATA
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|get
argument_list|(
name|SlowDiskReports
operator|.
name|DiskOp
operator|.
name|READ
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMeanReadIoLatency
argument_list|(
name|value
operator|.
name|get
argument_list|(
name|SlowDiskReports
operator|.
name|DiskOp
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|get
argument_list|(
name|SlowDiskReports
operator|.
name|DiskOp
operator|.
name|WRITE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMeanWriteIoLatency
argument_list|(
name|value
operator|.
name|get
argument_list|(
name|SlowDiskReports
operator|.
name|DiskOp
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|slowDiskInfoProtos
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|slowDiskInfoProtos
return|;
block|}
DECL|method|convertSlowDiskInfo ( List<SlowDiskReportProto> slowDiskProtos)
specifier|public
specifier|static
name|SlowDiskReports
name|convertSlowDiskInfo
parameter_list|(
name|List
argument_list|<
name|SlowDiskReportProto
argument_list|>
name|slowDiskProtos
parameter_list|)
block|{
comment|// No slow disks, or possibly an older DataNode.
if|if
condition|(
name|slowDiskProtos
operator|==
literal|null
operator|||
name|slowDiskProtos
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|SlowDiskReports
operator|.
name|EMPTY_REPORT
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|SlowDiskReports
operator|.
name|DiskOp
argument_list|,
name|Double
argument_list|>
argument_list|>
name|slowDisksMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|slowDiskProtos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SlowDiskReportProto
name|proto
range|:
name|slowDiskProtos
control|)
block|{
if|if
condition|(
operator|!
name|proto
operator|.
name|hasBasePath
argument_list|()
condition|)
block|{
comment|// The disk basePath should be reported.
continue|continue;
block|}
name|Map
argument_list|<
name|SlowDiskReports
operator|.
name|DiskOp
argument_list|,
name|Double
argument_list|>
name|latencyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasMeanMetadataOpLatency
argument_list|()
condition|)
block|{
name|latencyMap
operator|.
name|put
argument_list|(
name|SlowDiskReports
operator|.
name|DiskOp
operator|.
name|METADATA
argument_list|,
name|proto
operator|.
name|getMeanMetadataOpLatency
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMeanReadIoLatency
argument_list|()
condition|)
block|{
name|latencyMap
operator|.
name|put
argument_list|(
name|SlowDiskReports
operator|.
name|DiskOp
operator|.
name|READ
argument_list|,
name|proto
operator|.
name|getMeanReadIoLatency
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasMeanWriteIoLatency
argument_list|()
condition|)
block|{
name|latencyMap
operator|.
name|put
argument_list|(
name|SlowDiskReports
operator|.
name|DiskOp
operator|.
name|WRITE
argument_list|,
name|proto
operator|.
name|getMeanWriteIoLatency
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|slowDisksMap
operator|.
name|put
argument_list|(
name|proto
operator|.
name|getBasePath
argument_list|()
argument_list|,
name|latencyMap
argument_list|)
expr_stmt|;
block|}
return|return
name|SlowDiskReports
operator|.
name|create
argument_list|(
name|slowDisksMap
argument_list|)
return|;
block|}
DECL|method|convertBlksMovResults ( List<BlocksStorageMovementResultProto> protos)
specifier|public
specifier|static
name|BlocksStorageMovementResult
index|[]
name|convertBlksMovResults
parameter_list|(
name|List
argument_list|<
name|BlocksStorageMovementResultProto
argument_list|>
name|protos
parameter_list|)
block|{
name|BlocksStorageMovementResult
index|[]
name|results
init|=
operator|new
name|BlocksStorageMovementResult
index|[
name|protos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|protos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BlocksStorageMovementResultProto
name|resultProto
init|=
name|protos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BlocksStorageMovementResult
operator|.
name|Status
name|status
decl_stmt|;
switch|switch
condition|(
name|resultProto
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|SUCCESS
case|:
name|status
operator|=
name|Status
operator|.
name|SUCCESS
expr_stmt|;
break|break;
case|case
name|FAILURE
case|:
name|status
operator|=
name|Status
operator|.
name|FAILURE
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown status: "
operator|+
name|resultProto
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
name|results
index|[
name|i
index|]
operator|=
operator|new
name|BlocksStorageMovementResult
argument_list|(
name|resultProto
operator|.
name|getTrackID
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|method|convertBlksMovResults ( BlocksStorageMovementResult[] blocksMovementResults)
specifier|public
specifier|static
name|List
argument_list|<
name|BlocksStorageMovementResultProto
argument_list|>
name|convertBlksMovResults
parameter_list|(
name|BlocksStorageMovementResult
index|[]
name|blocksMovementResults
parameter_list|)
block|{
name|List
argument_list|<
name|BlocksStorageMovementResultProto
argument_list|>
name|blocksMovementResultsProto
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|BlocksStorageMovementResultProto
operator|.
name|Builder
name|builder
init|=
name|BlocksStorageMovementResultProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocksMovementResults
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BlocksStorageMovementResult
name|report
init|=
name|blocksMovementResults
index|[
name|i
index|]
decl_stmt|;
name|builder
operator|.
name|setTrackID
argument_list|(
name|report
operator|.
name|getTrackId
argument_list|()
argument_list|)
expr_stmt|;
name|BlocksStorageMovementResultProto
operator|.
name|Status
name|status
decl_stmt|;
switch|switch
condition|(
name|report
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|SUCCESS
case|:
name|status
operator|=
name|BlocksStorageMovementResultProto
operator|.
name|Status
operator|.
name|SUCCESS
expr_stmt|;
break|break;
case|case
name|FAILURE
case|:
name|status
operator|=
name|BlocksStorageMovementResultProto
operator|.
name|Status
operator|.
name|FAILURE
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown status: "
operator|+
name|report
operator|.
name|getStatus
argument_list|()
argument_list|)
throw|;
block|}
name|builder
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|blocksMovementResultsProto
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|blocksMovementResultsProto
return|;
block|}
DECL|method|convert (JournalInfoProto info)
specifier|public
specifier|static
name|JournalInfo
name|convert
parameter_list|(
name|JournalInfoProto
name|info
parameter_list|)
block|{
name|int
name|lv
init|=
name|info
operator|.
name|hasLayoutVersion
argument_list|()
condition|?
name|info
operator|.
name|getLayoutVersion
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|nsID
init|=
name|info
operator|.
name|hasNamespaceID
argument_list|()
condition|?
name|info
operator|.
name|getNamespaceID
argument_list|()
else|:
literal|0
decl_stmt|;
return|return
operator|new
name|JournalInfo
argument_list|(
name|lv
argument_list|,
name|info
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|nsID
argument_list|)
return|;
block|}
comment|/**    * Method used for converting {@link JournalInfoProto} sent from Namenode    * to Journal receivers to {@link NamenodeRegistration}.    */
DECL|method|convert (JournalInfo j)
specifier|public
specifier|static
name|JournalInfoProto
name|convert
parameter_list|(
name|JournalInfo
name|j
parameter_list|)
block|{
return|return
name|JournalInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterID
argument_list|(
name|j
operator|.
name|getClusterId
argument_list|()
argument_list|)
operator|.
name|setLayoutVersion
argument_list|(
name|j
operator|.
name|getLayoutVersion
argument_list|()
argument_list|)
operator|.
name|setNamespaceID
argument_list|(
name|j
operator|.
name|getNamespaceId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (BlockReportContextProto proto)
specifier|public
specifier|static
name|BlockReportContext
name|convert
parameter_list|(
name|BlockReportContextProto
name|proto
parameter_list|)
block|{
return|return
operator|new
name|BlockReportContext
argument_list|(
name|proto
operator|.
name|getTotalRpcs
argument_list|()
argument_list|,
name|proto
operator|.
name|getCurRpc
argument_list|()
argument_list|,
name|proto
operator|.
name|getId
argument_list|()
argument_list|,
name|proto
operator|.
name|getLeaseId
argument_list|()
argument_list|,
name|proto
operator|.
name|getSorted
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (BlockReportContext context)
specifier|public
specifier|static
name|BlockReportContextProto
name|convert
parameter_list|(
name|BlockReportContext
name|context
parameter_list|)
block|{
return|return
name|BlockReportContextProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTotalRpcs
argument_list|(
name|context
operator|.
name|getTotalRpcs
argument_list|()
argument_list|)
operator|.
name|setCurRpc
argument_list|(
name|context
operator|.
name|getCurRpc
argument_list|()
argument_list|)
operator|.
name|setId
argument_list|(
name|context
operator|.
name|getReportId
argument_list|()
argument_list|)
operator|.
name|setLeaseId
argument_list|(
name|context
operator|.
name|getLeaseId
argument_list|()
argument_list|)
operator|.
name|setSorted
argument_list|(
name|context
operator|.
name|isSorted
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertStorageTypesProto ( StorageType[] targetStorageTypes)
specifier|private
specifier|static
name|StorageTypesProto
name|convertStorageTypesProto
parameter_list|(
name|StorageType
index|[]
name|targetStorageTypes
parameter_list|)
block|{
name|StorageTypesProto
operator|.
name|Builder
name|builder
init|=
name|StorageTypesProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageType
name|storageType
range|:
name|targetStorageTypes
control|)
block|{
name|builder
operator|.
name|addStorageTypes
argument_list|(
name|PBHelperClient
operator|.
name|convertStorageType
argument_list|(
name|storageType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertStorageIDs (String[] targetStorageIDs)
specifier|private
specifier|static
name|HdfsProtos
operator|.
name|StorageUuidsProto
name|convertStorageIDs
parameter_list|(
name|String
index|[]
name|targetStorageIDs
parameter_list|)
block|{
name|HdfsProtos
operator|.
name|StorageUuidsProto
operator|.
name|Builder
name|builder
init|=
name|HdfsProtos
operator|.
name|StorageUuidsProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|storageUuid
range|:
name|targetStorageIDs
control|)
block|{
name|builder
operator|.
name|addStorageUuids
argument_list|(
name|storageUuid
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertToDnInfosProto (DatanodeInfo[] dnInfos)
specifier|private
specifier|static
name|DatanodeInfosProto
name|convertToDnInfosProto
parameter_list|(
name|DatanodeInfo
index|[]
name|dnInfos
parameter_list|)
block|{
name|DatanodeInfosProto
operator|.
name|Builder
name|builder
init|=
name|DatanodeInfosProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|datanodeInfo
range|:
name|dnInfos
control|)
block|{
name|builder
operator|.
name|addDatanodes
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|datanodeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert (HdfsProtos.StorageUuidsProto targetStorageUuidsProto)
specifier|private
specifier|static
name|String
index|[]
name|convert
parameter_list|(
name|HdfsProtos
operator|.
name|StorageUuidsProto
name|targetStorageUuidsProto
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|storageUuidsList
init|=
name|targetStorageUuidsProto
operator|.
name|getStorageUuidsList
argument_list|()
decl_stmt|;
name|String
index|[]
name|storageUuids
init|=
operator|new
name|String
index|[
name|storageUuidsList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|storageUuidsList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|storageUuids
index|[
name|i
index|]
operator|=
name|storageUuidsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|storageUuids
return|;
block|}
DECL|method|convertBlockECReconstructionInfo ( BlockECReconstructionInfoProto blockEcReconstructionInfoProto)
specifier|public
specifier|static
name|BlockECReconstructionInfo
name|convertBlockECReconstructionInfo
parameter_list|(
name|BlockECReconstructionInfoProto
name|blockEcReconstructionInfoProto
parameter_list|)
block|{
name|ExtendedBlockProto
name|blockProto
init|=
name|blockEcReconstructionInfoProto
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|ExtendedBlock
name|block
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|blockProto
argument_list|)
decl_stmt|;
name|DatanodeInfosProto
name|sourceDnInfosProto
init|=
name|blockEcReconstructionInfoProto
operator|.
name|getSourceDnInfos
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|sourceDnInfos
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|sourceDnInfosProto
argument_list|)
decl_stmt|;
name|DatanodeInfosProto
name|targetDnInfosProto
init|=
name|blockEcReconstructionInfoProto
operator|.
name|getTargetDnInfos
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|targetDnInfos
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|targetDnInfosProto
argument_list|)
decl_stmt|;
name|HdfsProtos
operator|.
name|StorageUuidsProto
name|targetStorageUuidsProto
init|=
name|blockEcReconstructionInfoProto
operator|.
name|getTargetStorageUuids
argument_list|()
decl_stmt|;
name|String
index|[]
name|targetStorageUuids
init|=
name|convert
argument_list|(
name|targetStorageUuidsProto
argument_list|)
decl_stmt|;
name|StorageTypesProto
name|targetStorageTypesProto
init|=
name|blockEcReconstructionInfoProto
operator|.
name|getTargetStorageTypes
argument_list|()
decl_stmt|;
name|StorageType
index|[]
name|convertStorageTypes
init|=
name|PBHelperClient
operator|.
name|convertStorageTypes
argument_list|(
name|targetStorageTypesProto
operator|.
name|getStorageTypesList
argument_list|()
argument_list|,
name|targetStorageTypesProto
operator|.
name|getStorageTypesList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|liveBlkIndices
init|=
name|blockEcReconstructionInfoProto
operator|.
name|getLiveBlockIndices
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ErasureCodingPolicy
name|ecPolicy
init|=
name|PBHelperClient
operator|.
name|convertErasureCodingPolicy
argument_list|(
name|blockEcReconstructionInfoProto
operator|.
name|getEcPolicy
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|BlockECReconstructionInfo
argument_list|(
name|block
argument_list|,
name|sourceDnInfos
argument_list|,
name|targetDnInfos
argument_list|,
name|targetStorageUuids
argument_list|,
name|convertStorageTypes
argument_list|,
name|liveBlkIndices
argument_list|,
name|ecPolicy
argument_list|)
return|;
block|}
DECL|method|convertBlockECRecoveryInfo ( BlockECReconstructionInfo blockEcRecoveryInfo)
specifier|public
specifier|static
name|BlockECReconstructionInfoProto
name|convertBlockECRecoveryInfo
parameter_list|(
name|BlockECReconstructionInfo
name|blockEcRecoveryInfo
parameter_list|)
block|{
name|BlockECReconstructionInfoProto
operator|.
name|Builder
name|builder
init|=
name|BlockECReconstructionInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBlock
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|blockEcRecoveryInfo
operator|.
name|getExtendedBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|sourceDnInfos
init|=
name|blockEcRecoveryInfo
operator|.
name|getSourceDnInfos
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setSourceDnInfos
argument_list|(
name|convertToDnInfosProto
argument_list|(
name|sourceDnInfos
argument_list|)
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|targetDnInfos
init|=
name|blockEcRecoveryInfo
operator|.
name|getTargetDnInfos
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTargetDnInfos
argument_list|(
name|convertToDnInfosProto
argument_list|(
name|targetDnInfos
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|targetStorageIDs
init|=
name|blockEcRecoveryInfo
operator|.
name|getTargetStorageIDs
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTargetStorageUuids
argument_list|(
name|convertStorageIDs
argument_list|(
name|targetStorageIDs
argument_list|)
argument_list|)
expr_stmt|;
name|StorageType
index|[]
name|targetStorageTypes
init|=
name|blockEcRecoveryInfo
operator|.
name|getTargetStorageTypes
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTargetStorageTypes
argument_list|(
name|convertStorageTypesProto
argument_list|(
name|targetStorageTypes
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|liveBlockIndices
init|=
name|blockEcRecoveryInfo
operator|.
name|getLiveBlockIndices
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setLiveBlockIndices
argument_list|(
name|PBHelperClient
operator|.
name|getByteString
argument_list|(
name|liveBlockIndices
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setEcPolicy
argument_list|(
name|PBHelperClient
operator|.
name|convertErasureCodingPolicy
argument_list|(
name|blockEcRecoveryInfo
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( BlockECReconstructionCommand blkECReconstructionCmd)
specifier|public
specifier|static
name|BlockECReconstructionCommandProto
name|convert
parameter_list|(
name|BlockECReconstructionCommand
name|blkECReconstructionCmd
parameter_list|)
block|{
name|BlockECReconstructionCommandProto
operator|.
name|Builder
name|builder
init|=
name|BlockECReconstructionCommandProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|BlockECReconstructionInfo
argument_list|>
name|blockECRInfos
init|=
name|blkECReconstructionCmd
operator|.
name|getECTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockECReconstructionInfo
name|blkECReconstructInfo
range|:
name|blockECRInfos
control|)
block|{
name|builder
operator|.
name|addBlockECReconstructioninfo
argument_list|(
name|convertBlockECRecoveryInfo
argument_list|(
name|blkECReconstructInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( BlockECReconstructionCommandProto blkECReconstructionCmdProto)
specifier|public
specifier|static
name|BlockECReconstructionCommand
name|convert
parameter_list|(
name|BlockECReconstructionCommandProto
name|blkECReconstructionCmdProto
parameter_list|)
block|{
name|Collection
argument_list|<
name|BlockECReconstructionInfo
argument_list|>
name|blkECReconstructionInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockECReconstructionInfoProto
argument_list|>
name|blkECRInfoList
init|=
name|blkECReconstructionCmdProto
operator|.
name|getBlockECReconstructioninfoList
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockECReconstructionInfoProto
name|blkECRInfoProto
range|:
name|blkECRInfoList
control|)
block|{
name|blkECReconstructionInfos
operator|.
name|add
argument_list|(
name|convertBlockECReconstructionInfo
argument_list|(
name|blkECRInfoProto
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BlockECReconstructionCommand
argument_list|(
name|DatanodeProtocol
operator|.
name|DNA_ERASURE_CODING_RECONSTRUCTION
argument_list|,
name|blkECReconstructionInfos
argument_list|)
return|;
block|}
DECL|method|convert (FileRegion fileRegion)
specifier|public
specifier|static
name|KeyValueProto
name|convert
parameter_list|(
name|FileRegion
name|fileRegion
parameter_list|)
block|{
return|return
name|KeyValueProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|fileRegion
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setValue
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|fileRegion
operator|.
name|getProvidedStorageLocation
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|FileRegion
DECL|method|convert (KeyValueProto keyValueProto)
name|convert
parameter_list|(
name|KeyValueProto
name|keyValueProto
parameter_list|)
block|{
name|BlockProto
name|blockProto
init|=
name|keyValueProto
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ProvidedStorageLocationProto
name|providedStorageLocationProto
init|=
name|keyValueProto
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Block
name|block
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|blockProto
argument_list|)
decl_stmt|;
name|ProvidedStorageLocation
name|providedStorageLocation
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|providedStorageLocationProto
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileRegion
argument_list|(
name|block
argument_list|,
name|providedStorageLocation
argument_list|)
return|;
block|}
DECL|method|convert ( BlockStorageMovementCommand blkStorageMovementCmd)
specifier|private
specifier|static
name|BlockStorageMovementCommandProto
name|convert
parameter_list|(
name|BlockStorageMovementCommand
name|blkStorageMovementCmd
parameter_list|)
block|{
name|BlockStorageMovementCommandProto
operator|.
name|Builder
name|builder
init|=
name|BlockStorageMovementCommandProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTrackID
argument_list|(
name|blkStorageMovementCmd
operator|.
name|getTrackID
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBlockPoolId
argument_list|(
name|blkStorageMovementCmd
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
init|=
name|blkStorageMovementCmd
operator|.
name|getBlockMovingTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockMovingInfo
name|blkMovingInfo
range|:
name|blockMovingInfos
control|)
block|{
name|builder
operator|.
name|addBlockStorageMovement
argument_list|(
name|convertBlockMovingInfo
argument_list|(
name|blkMovingInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertBlockMovingInfo ( BlockMovingInfo blkMovingInfo)
specifier|private
specifier|static
name|BlockStorageMovementProto
name|convertBlockMovingInfo
parameter_list|(
name|BlockMovingInfo
name|blkMovingInfo
parameter_list|)
block|{
name|BlockStorageMovementProto
operator|.
name|Builder
name|builder
init|=
name|BlockStorageMovementProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBlock
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|blkMovingInfo
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|sourceDnInfos
init|=
name|blkMovingInfo
operator|.
name|getSources
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setSourceDnInfos
argument_list|(
name|convertToDnInfosProto
argument_list|(
name|sourceDnInfos
argument_list|)
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|targetDnInfos
init|=
name|blkMovingInfo
operator|.
name|getTargets
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTargetDnInfos
argument_list|(
name|convertToDnInfosProto
argument_list|(
name|targetDnInfos
argument_list|)
argument_list|)
expr_stmt|;
name|StorageType
index|[]
name|sourceStorageTypes
init|=
name|blkMovingInfo
operator|.
name|getSourceStorageTypes
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setSourceStorageTypes
argument_list|(
name|convertStorageTypesProto
argument_list|(
name|sourceStorageTypes
argument_list|)
argument_list|)
expr_stmt|;
name|StorageType
index|[]
name|targetStorageTypes
init|=
name|blkMovingInfo
operator|.
name|getTargetStorageTypes
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTargetStorageTypes
argument_list|(
name|convertStorageTypesProto
argument_list|(
name|targetStorageTypes
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convert ( BlockStorageMovementCommandProto blkStorageMovementCmdProto)
specifier|private
specifier|static
name|DatanodeCommand
name|convert
parameter_list|(
name|BlockStorageMovementCommandProto
name|blkStorageMovementCmdProto
parameter_list|)
block|{
name|Collection
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockStorageMovementProto
argument_list|>
name|blkSPSatisfyList
init|=
name|blkStorageMovementCmdProto
operator|.
name|getBlockStorageMovementList
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockStorageMovementProto
name|blkSPSatisfy
range|:
name|blkSPSatisfyList
control|)
block|{
name|blockMovingInfos
operator|.
name|add
argument_list|(
name|convertBlockMovingInfo
argument_list|(
name|blkSPSatisfy
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BlockStorageMovementCommand
argument_list|(
name|DatanodeProtocol
operator|.
name|DNA_BLOCK_STORAGE_MOVEMENT
argument_list|,
name|blkStorageMovementCmdProto
operator|.
name|getTrackID
argument_list|()
argument_list|,
name|blkStorageMovementCmdProto
operator|.
name|getBlockPoolId
argument_list|()
argument_list|,
name|blockMovingInfos
argument_list|)
return|;
block|}
DECL|method|convertBlockMovingInfo ( BlockStorageMovementProto blockStoragePolicySatisfyProto)
specifier|private
specifier|static
name|BlockMovingInfo
name|convertBlockMovingInfo
parameter_list|(
name|BlockStorageMovementProto
name|blockStoragePolicySatisfyProto
parameter_list|)
block|{
name|BlockProto
name|blockProto
init|=
name|blockStoragePolicySatisfyProto
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|Block
name|block
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|blockProto
argument_list|)
decl_stmt|;
name|DatanodeInfosProto
name|sourceDnInfosProto
init|=
name|blockStoragePolicySatisfyProto
operator|.
name|getSourceDnInfos
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|sourceDnInfos
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|sourceDnInfosProto
argument_list|)
decl_stmt|;
name|DatanodeInfosProto
name|targetDnInfosProto
init|=
name|blockStoragePolicySatisfyProto
operator|.
name|getTargetDnInfos
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|targetDnInfos
init|=
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|targetDnInfosProto
argument_list|)
decl_stmt|;
name|StorageTypesProto
name|srcStorageTypesProto
init|=
name|blockStoragePolicySatisfyProto
operator|.
name|getSourceStorageTypes
argument_list|()
decl_stmt|;
name|StorageType
index|[]
name|srcStorageTypes
init|=
name|PBHelperClient
operator|.
name|convertStorageTypes
argument_list|(
name|srcStorageTypesProto
operator|.
name|getStorageTypesList
argument_list|()
argument_list|,
name|srcStorageTypesProto
operator|.
name|getStorageTypesList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|StorageTypesProto
name|targetStorageTypesProto
init|=
name|blockStoragePolicySatisfyProto
operator|.
name|getTargetStorageTypes
argument_list|()
decl_stmt|;
name|StorageType
index|[]
name|targetStorageTypes
init|=
name|PBHelperClient
operator|.
name|convertStorageTypes
argument_list|(
name|targetStorageTypesProto
operator|.
name|getStorageTypesList
argument_list|()
argument_list|,
name|targetStorageTypesProto
operator|.
name|getStorageTypesList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|BlockMovingInfo
argument_list|(
name|block
argument_list|,
name|sourceDnInfos
argument_list|,
name|targetDnInfos
argument_list|,
name|srcStorageTypes
argument_list|,
name|targetStorageTypes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

