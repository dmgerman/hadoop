begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|UpgradeObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|UpgradeCommand
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_comment
comment|/**  * Base class for data-node upgrade objects.  * Data-node upgrades are run in separate threads.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|UpgradeObjectDatanode
specifier|public
specifier|abstract
class|class
name|UpgradeObjectDatanode
extends|extends
name|UpgradeObject
implements|implements
name|Runnable
block|{
DECL|field|dataNode
specifier|private
name|DataNode
name|dataNode
init|=
literal|null
decl_stmt|;
DECL|field|bpid
specifier|private
name|String
name|bpid
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|getType ()
specifier|public
name|HdfsServerConstants
operator|.
name|NodeType
name|getType
parameter_list|()
block|{
return|return
name|HdfsServerConstants
operator|.
name|NodeType
operator|.
name|DATA_NODE
return|;
block|}
DECL|method|getDatanode ()
specifier|protected
name|DataNode
name|getDatanode
parameter_list|()
block|{
return|return
name|dataNode
return|;
block|}
DECL|method|getNamenode ()
specifier|protected
name|DatanodeProtocol
name|getNamenode
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dataNode
operator|.
name|getActiveNamenodeForBP
argument_list|(
name|bpid
argument_list|)
return|;
block|}
DECL|method|setDatanode (DataNode dataNode, String bpid)
name|void
name|setDatanode
parameter_list|(
name|DataNode
name|dataNode
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
name|this
operator|.
name|dataNode
operator|=
name|dataNode
expr_stmt|;
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
block|}
comment|/**    * Specifies how the upgrade is performed.     * @throws IOException    */
DECL|method|doUpgrade ()
specifier|public
specifier|abstract
name|void
name|doUpgrade
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Specifies what to do before the upgrade is started.    *     * The default implementation checks whether the data-node missed the upgrade    * and throws an exception if it did. This leads to the data-node shutdown.    *     * Data-nodes usually start distributed upgrade when the name-node replies    * to its heartbeat with a start upgrade command.    * Sometimes though, e.g. when a data-node missed the upgrade and wants to    * catchup with the rest of the cluster, it is necessary to initiate the     * upgrade directly on the data-node, since the name-node might not ever     * start it. An override of this method should then return true.    * And the upgrade will start after data-ndoe registration but before sending    * its first heartbeat.    *     * @param nsInfo name-node versions, verify that the upgrade    * object can talk to this name-node version if necessary.    *     * @throws IOException    * @return true if data-node itself should start the upgrade or     * false if it should wait until the name-node starts the upgrade.    */
DECL|method|preUpgradeAction (NamespaceInfo nsInfo)
name|boolean
name|preUpgradeAction
parameter_list|(
name|NamespaceInfo
name|nsInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nsUpgradeVersion
init|=
name|nsInfo
operator|.
name|getDistributedUpgradeVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsUpgradeVersion
operator|>=
name|getVersion
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// name-node will perform the upgrade
comment|// Missed the upgrade. Report problem to the name-node and throw exception
name|String
name|errorMsg
init|=
literal|"\n   Data-node missed a distributed upgrade and will shutdown."
operator|+
literal|"\n   "
operator|+
name|getDescription
argument_list|()
operator|+
literal|"."
operator|+
literal|" Name-node version = "
operator|+
name|nsInfo
operator|.
name|getLayoutVersion
argument_list|()
operator|+
literal|"."
decl_stmt|;
name|DataNode
operator|.
name|LOG
operator|.
name|fatal
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
name|String
name|bpid
init|=
name|nsInfo
operator|.
name|getBlockPoolID
argument_list|()
decl_stmt|;
name|dataNode
operator|.
name|trySendErrorReport
argument_list|(
name|bpid
argument_list|,
name|DatanodeProtocol
operator|.
name|NOTIFY
argument_list|,
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
assert|assert
name|dataNode
operator|!=
literal|null
operator|:
literal|"UpgradeObjectDatanode.dataNode is null"
assert|;
while|while
condition|(
name|dataNode
operator|.
name|shouldRun
condition|)
block|{
try|try
block|{
name|doUpgrade
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DataNode
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in doUpgrade"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// report results
if|if
condition|(
name|getUpgradeStatus
argument_list|()
operator|<
literal|100
condition|)
block|{
name|DataNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"\n   Distributed upgrade for DataNode version "
operator|+
name|getVersion
argument_list|()
operator|+
literal|" to current LV "
operator|+
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|" cannot be completed."
argument_list|)
expr_stmt|;
block|}
comment|// Complete the upgrade by calling the manager method
try|try
block|{
name|UpgradeManagerDatanode
name|upgradeManager
init|=
name|dataNode
operator|.
name|getUpgradeManagerDatanode
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|upgradeManager
operator|!=
literal|null
condition|)
name|upgradeManager
operator|.
name|completeUpgrade
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DataNode
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in completeUpgrade"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Complete upgrade and return a status complete command for broadcasting.    *     * Data-nodes finish upgrade at different times.    * The data-node needs to re-confirm with the name-node that the upgrade    * is complete while other nodes are still upgrading.    */
annotation|@
name|Override
DECL|method|completeUpgrade ()
specifier|public
name|UpgradeCommand
name|completeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|UpgradeCommand
argument_list|(
name|UpgradeCommand
operator|.
name|UC_ACTION_REPORT_STATUS
argument_list|,
name|getVersion
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|100
argument_list|)
return|;
block|}
block|}
end_class

end_unit

