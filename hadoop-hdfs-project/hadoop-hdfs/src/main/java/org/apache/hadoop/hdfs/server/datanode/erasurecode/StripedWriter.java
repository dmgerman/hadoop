begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|PacketHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|CachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_comment
comment|/**  * Manage striped writers that writes to a target with reconstructed data.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StripedWriter
class|class
name|StripedWriter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|DataNode
operator|.
name|LOG
decl_stmt|;
DECL|field|WRITE_PACKET_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|WRITE_PACKET_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
DECL|field|reconstructor
specifier|private
specifier|final
name|StripedReconstructor
name|reconstructor
decl_stmt|;
DECL|field|datanode
specifier|private
specifier|final
name|DataNode
name|datanode
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|dataBlkNum
specifier|private
specifier|final
name|int
name|dataBlkNum
decl_stmt|;
DECL|field|parityBlkNum
specifier|private
specifier|final
name|int
name|parityBlkNum
decl_stmt|;
DECL|field|targetsStatus
specifier|private
name|boolean
index|[]
name|targetsStatus
decl_stmt|;
comment|// targets
DECL|field|targets
specifier|private
specifier|final
name|DatanodeInfo
index|[]
name|targets
decl_stmt|;
DECL|field|targetIndices
specifier|private
specifier|final
name|short
index|[]
name|targetIndices
decl_stmt|;
DECL|field|hasValidTargets
specifier|private
name|boolean
name|hasValidTargets
decl_stmt|;
DECL|field|targetStorageTypes
specifier|private
specifier|final
name|StorageType
index|[]
name|targetStorageTypes
decl_stmt|;
DECL|field|targetStorageIds
specifier|private
specifier|final
name|String
index|[]
name|targetStorageIds
decl_stmt|;
DECL|field|writers
specifier|private
name|StripedBlockWriter
index|[]
name|writers
decl_stmt|;
DECL|field|maxChunksPerPacket
specifier|private
name|int
name|maxChunksPerPacket
decl_stmt|;
DECL|field|packetBuf
specifier|private
name|byte
index|[]
name|packetBuf
decl_stmt|;
DECL|field|checksumBuf
specifier|private
name|byte
index|[]
name|checksumBuf
decl_stmt|;
DECL|field|bytesPerChecksum
specifier|private
name|int
name|bytesPerChecksum
decl_stmt|;
DECL|field|checksumSize
specifier|private
name|int
name|checksumSize
decl_stmt|;
DECL|method|StripedWriter (StripedReconstructor reconstructor, DataNode datanode, Configuration conf, StripedReconstructionInfo stripedReconInfo)
name|StripedWriter
parameter_list|(
name|StripedReconstructor
name|reconstructor
parameter_list|,
name|DataNode
name|datanode
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|StripedReconstructionInfo
name|stripedReconInfo
parameter_list|)
block|{
name|this
operator|.
name|reconstructor
operator|=
name|reconstructor
expr_stmt|;
name|this
operator|.
name|datanode
operator|=
name|datanode
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|dataBlkNum
operator|=
name|stripedReconInfo
operator|.
name|getEcPolicy
argument_list|()
operator|.
name|getNumDataUnits
argument_list|()
expr_stmt|;
name|parityBlkNum
operator|=
name|stripedReconInfo
operator|.
name|getEcPolicy
argument_list|()
operator|.
name|getNumParityUnits
argument_list|()
expr_stmt|;
name|this
operator|.
name|targets
operator|=
name|stripedReconInfo
operator|.
name|getTargets
argument_list|()
expr_stmt|;
assert|assert
name|targets
operator|!=
literal|null
assert|;
name|this
operator|.
name|targetStorageTypes
operator|=
name|stripedReconInfo
operator|.
name|getTargetStorageTypes
argument_list|()
expr_stmt|;
assert|assert
name|targetStorageTypes
operator|!=
literal|null
assert|;
name|this
operator|.
name|targetStorageIds
operator|=
name|stripedReconInfo
operator|.
name|getTargetStorageIds
argument_list|()
expr_stmt|;
assert|assert
name|targetStorageIds
operator|!=
literal|null
assert|;
name|writers
operator|=
operator|new
name|StripedBlockWriter
index|[
name|targets
operator|.
name|length
index|]
expr_stmt|;
name|targetIndices
operator|=
operator|new
name|short
index|[
name|targets
operator|.
name|length
index|]
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|targetIndices
operator|.
name|length
operator|<=
name|parityBlkNum
argument_list|,
literal|"Too much missed striped blocks."
argument_list|)
expr_stmt|;
name|initTargetIndices
argument_list|()
expr_stmt|;
name|long
name|maxTargetLength
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|short
name|targetIndex
range|:
name|targetIndices
control|)
block|{
name|maxTargetLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxTargetLength
argument_list|,
name|reconstructor
operator|.
name|getBlockLen
argument_list|(
name|targetIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reconstructor
operator|.
name|setMaxTargetLength
argument_list|(
name|maxTargetLength
argument_list|)
expr_stmt|;
comment|// targetsStatus store whether some target is success, it will record
comment|// any failed target once, if some target failed (invalid DN or transfer
comment|// failed), will not transfer data to it any more.
name|targetsStatus
operator|=
operator|new
name|boolean
index|[
name|targets
operator|.
name|length
index|]
expr_stmt|;
block|}
DECL|method|init ()
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|DataChecksum
name|checksum
init|=
name|reconstructor
operator|.
name|getChecksum
argument_list|()
decl_stmt|;
name|checksumSize
operator|=
name|checksum
operator|.
name|getChecksumSize
argument_list|()
expr_stmt|;
name|bytesPerChecksum
operator|=
name|checksum
operator|.
name|getBytesPerChecksum
argument_list|()
expr_stmt|;
name|int
name|chunkSize
init|=
name|bytesPerChecksum
operator|+
name|checksumSize
decl_stmt|;
name|maxChunksPerPacket
operator|=
name|Math
operator|.
name|max
argument_list|(
operator|(
name|WRITE_PACKET_SIZE
operator|-
name|PacketHeader
operator|.
name|PKT_MAX_HEADER_LEN
operator|)
operator|/
name|chunkSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|maxPacketSize
init|=
name|chunkSize
operator|*
name|maxChunksPerPacket
operator|+
name|PacketHeader
operator|.
name|PKT_MAX_HEADER_LEN
decl_stmt|;
name|packetBuf
operator|=
operator|new
name|byte
index|[
name|maxPacketSize
index|]
expr_stmt|;
name|int
name|tmpLen
init|=
name|checksumSize
operator|*
operator|(
name|reconstructor
operator|.
name|getBufferSize
argument_list|()
operator|/
name|bytesPerChecksum
operator|)
decl_stmt|;
name|checksumBuf
operator|=
operator|new
name|byte
index|[
name|tmpLen
index|]
expr_stmt|;
if|if
condition|(
name|initTargetStreams
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|error
init|=
literal|"All targets are failed."
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
DECL|method|initTargetIndices ()
specifier|private
name|void
name|initTargetIndices
parameter_list|()
block|{
name|BitSet
name|bitset
init|=
name|reconstructor
operator|.
name|getLiveBitSet
argument_list|()
decl_stmt|;
name|int
name|m
init|=
literal|0
decl_stmt|;
name|hasValidTargets
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
operator|+
name|parityBlkNum
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|bitset
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|reconstructor
operator|.
name|getBlockLen
argument_list|(
name|i
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|m
operator|<
name|targets
operator|.
name|length
condition|)
block|{
name|targetIndices
index|[
name|m
operator|++
index|]
operator|=
operator|(
name|short
operator|)
name|i
expr_stmt|;
name|hasValidTargets
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Send reconstructed data to targets.    */
DECL|method|transferData2Targets ()
name|int
name|transferData2Targets
parameter_list|()
block|{
name|int
name|nSuccess
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|targetsStatus
index|[
name|i
index|]
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|writers
index|[
name|i
index|]
operator|.
name|transferData2Target
argument_list|(
name|packetBuf
argument_list|)
expr_stmt|;
name|nSuccess
operator|++
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|targetsStatus
index|[
name|i
index|]
operator|=
name|success
expr_stmt|;
block|}
block|}
return|return
name|nSuccess
return|;
block|}
comment|/**    * Send an empty packet to mark the end of the block.    */
DECL|method|endTargetBlocks ()
name|void
name|endTargetBlocks
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|targetsStatus
index|[
name|i
index|]
condition|)
block|{
try|try
block|{
name|writers
index|[
name|i
index|]
operator|.
name|endTargetBlock
argument_list|(
name|packetBuf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Initialize  output/input streams for transferring data to target    * and send create block request.    */
DECL|method|initTargetStreams ()
name|int
name|initTargetStreams
parameter_list|()
block|{
name|int
name|nSuccess
init|=
literal|0
decl_stmt|;
for|for
control|(
name|short
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|writers
index|[
name|i
index|]
operator|=
name|createWriter
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|nSuccess
operator|++
expr_stmt|;
name|targetsStatus
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nSuccess
return|;
block|}
DECL|method|createWriter (short index)
specifier|private
name|StripedBlockWriter
name|createWriter
parameter_list|(
name|short
name|index
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StripedBlockWriter
argument_list|(
name|this
argument_list|,
name|datanode
argument_list|,
name|conf
argument_list|,
name|reconstructor
operator|.
name|getBlock
argument_list|(
name|targetIndices
index|[
name|index
index|]
argument_list|)
argument_list|,
name|targets
index|[
name|index
index|]
argument_list|,
name|targetStorageTypes
index|[
name|index
index|]
argument_list|,
name|targetStorageIds
index|[
name|index
index|]
argument_list|)
return|;
block|}
DECL|method|allocateWriteBuffer ()
name|ByteBuffer
name|allocateWriteBuffer
parameter_list|()
block|{
return|return
name|reconstructor
operator|.
name|allocateBuffer
argument_list|(
name|reconstructor
operator|.
name|getBufferSize
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getTargets ()
name|int
name|getTargets
parameter_list|()
block|{
return|return
name|targets
operator|.
name|length
return|;
block|}
DECL|method|getRealTargets ()
specifier|private
name|int
name|getRealTargets
parameter_list|()
block|{
name|int
name|m
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|targetsStatus
index|[
name|i
index|]
condition|)
block|{
name|m
operator|++
expr_stmt|;
block|}
block|}
return|return
name|m
return|;
block|}
DECL|method|getRealTargetIndices ()
name|int
index|[]
name|getRealTargetIndices
parameter_list|()
block|{
name|int
name|realTargets
init|=
name|getRealTargets
argument_list|()
decl_stmt|;
name|int
index|[]
name|results
init|=
operator|new
name|int
index|[
name|realTargets
index|]
decl_stmt|;
name|int
name|m
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|targetsStatus
index|[
name|i
index|]
condition|)
block|{
name|results
index|[
name|m
operator|++
index|]
operator|=
name|targetIndices
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
DECL|method|getRealTargetBuffers (int toReconstructLen)
name|ByteBuffer
index|[]
name|getRealTargetBuffers
parameter_list|(
name|int
name|toReconstructLen
parameter_list|)
block|{
name|int
name|numGood
init|=
name|getRealTargets
argument_list|()
decl_stmt|;
name|ByteBuffer
index|[]
name|outputs
init|=
operator|new
name|ByteBuffer
index|[
name|numGood
index|]
decl_stmt|;
name|int
name|m
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|targetsStatus
index|[
name|i
index|]
condition|)
block|{
name|writers
index|[
name|i
index|]
operator|.
name|getTargetBuffer
argument_list|()
operator|.
name|limit
argument_list|(
name|toReconstructLen
argument_list|)
expr_stmt|;
name|outputs
index|[
name|m
operator|++
index|]
operator|=
name|writers
index|[
name|i
index|]
operator|.
name|getTargetBuffer
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|outputs
return|;
block|}
DECL|method|updateRealTargetBuffers (int toReconstructLen)
name|void
name|updateRealTargetBuffers
parameter_list|(
name|int
name|toReconstructLen
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|targetsStatus
index|[
name|i
index|]
condition|)
block|{
name|long
name|blockLen
init|=
name|reconstructor
operator|.
name|getBlockLen
argument_list|(
name|targetIndices
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|long
name|remaining
init|=
name|blockLen
operator|-
name|reconstructor
operator|.
name|getPositionInBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|<=
literal|0
condition|)
block|{
name|writers
index|[
name|i
index|]
operator|.
name|getTargetBuffer
argument_list|()
operator|.
name|limit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remaining
operator|<
name|toReconstructLen
condition|)
block|{
name|writers
index|[
name|i
index|]
operator|.
name|getTargetBuffer
argument_list|()
operator|.
name|limit
argument_list|(
operator|(
name|int
operator|)
name|remaining
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getChecksumBuf ()
name|byte
index|[]
name|getChecksumBuf
parameter_list|()
block|{
return|return
name|checksumBuf
return|;
block|}
DECL|method|getBytesPerChecksum ()
name|int
name|getBytesPerChecksum
parameter_list|()
block|{
return|return
name|bytesPerChecksum
return|;
block|}
DECL|method|getChecksumSize ()
name|int
name|getChecksumSize
parameter_list|()
block|{
return|return
name|checksumSize
return|;
block|}
DECL|method|getChecksum ()
name|DataChecksum
name|getChecksum
parameter_list|()
block|{
return|return
name|reconstructor
operator|.
name|getChecksum
argument_list|()
return|;
block|}
DECL|method|getMaxChunksPerPacket ()
name|int
name|getMaxChunksPerPacket
parameter_list|()
block|{
return|return
name|maxChunksPerPacket
return|;
block|}
DECL|method|getCachingStrategy ()
name|CachingStrategy
name|getCachingStrategy
parameter_list|()
block|{
return|return
name|reconstructor
operator|.
name|getCachingStrategy
argument_list|()
return|;
block|}
DECL|method|getSocketAddress4Transfer (DatanodeInfo target)
name|InetSocketAddress
name|getSocketAddress4Transfer
parameter_list|(
name|DatanodeInfo
name|target
parameter_list|)
block|{
return|return
name|reconstructor
operator|.
name|getSocketAddress4Transfer
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|method|getReconstructor ()
name|StripedReconstructor
name|getReconstructor
parameter_list|()
block|{
return|return
name|reconstructor
return|;
block|}
DECL|method|hasValidTargets ()
name|boolean
name|hasValidTargets
parameter_list|()
block|{
return|return
name|hasValidTargets
return|;
block|}
comment|/**    * Clear all buffers.    */
DECL|method|clearBuffers ()
name|void
name|clearBuffers
parameter_list|()
block|{
for|for
control|(
name|StripedBlockWriter
name|writer
range|:
name|writers
control|)
block|{
name|ByteBuffer
name|targetBuffer
init|=
name|writer
operator|.
name|getTargetBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetBuffer
operator|!=
literal|null
condition|)
block|{
name|targetBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|StripedBlockWriter
name|writer
range|:
name|writers
control|)
block|{
name|ByteBuffer
name|targetBuffer
init|=
name|writer
operator|.
name|getTargetBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetBuffer
operator|!=
literal|null
condition|)
block|{
name|reconstructor
operator|.
name|freeBuffer
argument_list|(
name|targetBuffer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|freeTargetBuffer
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writers
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

