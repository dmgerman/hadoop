begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|BucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|ListKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|FileEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|InputStreamEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_CREATED
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
operator|.
name|ENCODING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
operator|.
name|ENCODING_NAME
import|;
end_import

begin_comment
comment|/**  * A Bucket class the represents an Ozone Bucket.  */
end_comment

begin_class
DECL|class|OzoneBucket
specifier|public
class|class
name|OzoneBucket
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneBucket
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|bucketInfo
specifier|private
name|BucketInfo
name|bucketInfo
decl_stmt|;
DECL|field|volume
specifier|private
name|OzoneVolume
name|volume
decl_stmt|;
comment|/**    * Constructor for bucket.    *    * @param info   - BucketInfo    * @param volume - OzoneVolume Object that contains this bucket    */
DECL|method|OzoneBucket (BucketInfo info, OzoneVolume volume)
specifier|public
name|OzoneBucket
parameter_list|(
name|BucketInfo
name|info
parameter_list|,
name|OzoneVolume
name|volume
parameter_list|)
block|{
name|this
operator|.
name|bucketInfo
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|volume
operator|=
name|volume
expr_stmt|;
block|}
comment|/**    * Gets bucket Info.    *    * @return BucketInfo    */
DECL|method|getBucketInfo ()
specifier|public
name|BucketInfo
name|getBucketInfo
parameter_list|()
block|{
return|return
name|bucketInfo
return|;
block|}
comment|/**    * Sets Bucket Info.    *    * @param bucketInfo BucketInfo    */
DECL|method|setBucketInfo (BucketInfo bucketInfo)
specifier|public
name|void
name|setBucketInfo
parameter_list|(
name|BucketInfo
name|bucketInfo
parameter_list|)
block|{
name|this
operator|.
name|bucketInfo
operator|=
name|bucketInfo
expr_stmt|;
block|}
comment|/**    * Returns the parent volume class.    *    * @return - OzoneVolume    */
DECL|method|getVolume ()
name|OzoneVolume
name|getVolume
parameter_list|()
block|{
return|return
name|volume
return|;
block|}
comment|/**    * Returns bucket name.    *    * @return Bucket Name    */
DECL|method|getBucketName ()
specifier|public
name|String
name|getBucketName
parameter_list|()
block|{
return|return
name|bucketInfo
operator|.
name|getBucketName
argument_list|()
return|;
block|}
comment|/**    * Returns the Acls on the bucket.    *    * @return - Acls    */
DECL|method|getAcls ()
specifier|public
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|getAcls
parameter_list|()
block|{
return|return
name|bucketInfo
operator|.
name|getAcls
argument_list|()
return|;
block|}
comment|/**    * Return versioning info on the bucket - Enabled or disabled.    *    * @return - Version Enum    */
DECL|method|getVersioning ()
specifier|public
name|OzoneConsts
operator|.
name|Versioning
name|getVersioning
parameter_list|()
block|{
return|return
name|bucketInfo
operator|.
name|getVersioning
argument_list|()
return|;
block|}
comment|/**    * Gets the Storage class for the bucket.    *    * @return Storage Class Enum    */
DECL|method|getStorageType ()
specifier|public
name|StorageType
name|getStorageType
parameter_list|()
block|{
return|return
name|bucketInfo
operator|.
name|getStorageType
argument_list|()
return|;
block|}
comment|/**    * Puts an Object in Ozone bucket.    *    * @param keyName - Name of the key    * @param data    - Data that you want to put    * @throws OzoneException    */
DECL|method|putKey (String keyName, String data)
specifier|public
name|void
name|putKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|OzoneException
block|{
if|if
condition|(
operator|(
name|keyName
operator|==
literal|null
operator|)
operator|||
name|keyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Invalid key Name."
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Invalid data."
argument_list|)
throw|;
block|}
name|HttpPut
name|putRequest
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
init|(
name|CloseableHttpClient
name|httpClient
init|=
name|OzoneClientUtils
operator|.
name|newHttpClient
argument_list|()
init|)
block|{
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|volume
operator|.
name|getClient
argument_list|()
operator|.
name|getEndPointURI
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|getVolume
argument_list|()
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|getBucketName
argument_list|()
operator|+
literal|"/"
operator|+
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|putRequest
operator|=
name|getVolume
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getHttpPut
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|putRequest
operator|.
name|setEntity
argument_list|(
operator|new
name|InputStreamEntity
argument_list|(
name|is
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|.
name|mark
argument_list|(
name|data
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|putRequest
operator|.
name|setHeader
argument_list|(
name|Header
operator|.
name|CONTENT_MD5
argument_list|,
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|executePutKey
argument_list|(
name|putRequest
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|OzoneClientUtils
operator|.
name|releaseConnection
argument_list|(
name|putRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Puts an Object in Ozone Bucket.    *    * @param dataFile - File from which you want the data to be put. Key Name    *                 will same as the file name, devoid of any path.    * @throws OzoneException    */
DECL|method|putKey (File dataFile)
specifier|public
name|void
name|putKey
parameter_list|(
name|File
name|dataFile
parameter_list|)
throws|throws
name|OzoneException
block|{
if|if
condition|(
name|dataFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Invalid file object."
argument_list|)
throw|;
block|}
name|String
name|keyName
init|=
name|dataFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|putKey
argument_list|(
name|keyName
argument_list|,
name|dataFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Puts a Key in Ozone Bucket.    *    * @param keyName - Name of the Key    * @param file    - Stream that gets read to be put into Ozone.    * @throws OzoneException    */
DECL|method|putKey (String keyName, File file)
specifier|public
name|void
name|putKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|OzoneException
block|{
if|if
condition|(
operator|(
name|keyName
operator|==
literal|null
operator|)
operator|||
name|keyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Invalid key Name"
argument_list|)
throw|;
block|}
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Invalid data stream"
argument_list|)
throw|;
block|}
name|HttpPut
name|putRequest
init|=
literal|null
decl_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
init|(
name|CloseableHttpClient
name|httpClient
init|=
name|OzoneClientUtils
operator|.
name|newHttpClient
argument_list|()
init|)
block|{
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|volume
operator|.
name|getClient
argument_list|()
operator|.
name|getEndPointURI
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|getVolume
argument_list|()
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|getBucketName
argument_list|()
operator|+
literal|"/"
operator|+
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|putRequest
operator|=
name|getVolume
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getHttpPut
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileEntity
name|fileEntity
init|=
operator|new
name|FileEntity
argument_list|(
name|file
argument_list|,
name|ContentType
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
decl_stmt|;
name|putRequest
operator|.
name|setEntity
argument_list|(
name|fileEntity
argument_list|)
expr_stmt|;
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|putRequest
operator|.
name|setHeader
argument_list|(
name|Header
operator|.
name|CONTENT_MD5
argument_list|,
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|fis
argument_list|)
argument_list|)
expr_stmt|;
name|executePutKey
argument_list|(
name|putRequest
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
name|ex
parameter_list|)
block|{
specifier|final
name|OzoneRestClientException
name|orce
init|=
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Failed to putKey: keyName="
operator|+
name|keyName
operator|+
literal|", file="
operator|+
name|file
argument_list|)
decl_stmt|;
name|orce
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|""
argument_list|,
name|orce
argument_list|)
expr_stmt|;
throw|throw
name|orce
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|OzoneClientUtils
operator|.
name|releaseConnection
argument_list|(
name|putRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * executePutKey executes the Put request against the Ozone Server.    *    * @param putRequest - Http Put Request    * @param httpClient - httpClient    * @throws OzoneException    * @throws IOException    */
DECL|method|executePutKey (HttpPut putRequest, CloseableHttpClient httpClient)
specifier|public
specifier|static
name|void
name|executePutKey
parameter_list|(
name|HttpPut
name|putRequest
parameter_list|,
name|CloseableHttpClient
name|httpClient
parameter_list|)
throws|throws
name|OzoneException
throws|,
name|IOException
block|{
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|putRequest
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|errorCode
operator|==
name|HTTP_OK
operator|)
operator|||
operator|(
name|errorCode
operator|==
name|HTTP_CREATED
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Unexpected null in http payload"
argument_list|)
throw|;
block|}
throw|throw
name|OzoneException
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Gets a key from the Ozone server and writes to the file pointed by the    * downloadTo PAth.    *    * @param keyName    - Key Name in Ozone.    * @param downloadTo File Name to download the Key's Data to    */
DECL|method|getKey (String keyName, Path downloadTo)
specifier|public
name|void
name|getKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|Path
name|downloadTo
parameter_list|)
throws|throws
name|OzoneException
block|{
if|if
condition|(
operator|(
name|keyName
operator|==
literal|null
operator|)
operator|||
name|keyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Invalid key Name"
argument_list|)
throw|;
block|}
if|if
condition|(
name|downloadTo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Invalid download path"
argument_list|)
throw|;
block|}
name|FileOutputStream
name|outPutFile
init|=
literal|null
decl_stmt|;
name|HttpGet
name|getRequest
init|=
literal|null
decl_stmt|;
try|try
init|(
name|CloseableHttpClient
name|httpClient
init|=
name|OzoneClientUtils
operator|.
name|newHttpClient
argument_list|()
init|)
block|{
name|outPutFile
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|downloadTo
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|volume
operator|.
name|getClient
argument_list|()
operator|.
name|getEndPointURI
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|getVolume
argument_list|()
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|getBucketName
argument_list|()
operator|+
literal|"/"
operator|+
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|getRequest
operator|=
name|getVolume
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getHttpGet
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|executeGetKey
argument_list|(
name|getRequest
argument_list|,
name|httpClient
argument_list|,
name|outPutFile
argument_list|)
expr_stmt|;
name|outPutFile
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outPutFile
argument_list|)
expr_stmt|;
name|OzoneClientUtils
operator|.
name|releaseConnection
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the data part of the key as a string.    *    * @param keyName - KeyName to get    * @return String - Data    * @throws OzoneException    */
DECL|method|getKey (String keyName)
specifier|public
name|String
name|getKey
parameter_list|(
name|String
name|keyName
parameter_list|)
throws|throws
name|OzoneException
block|{
if|if
condition|(
operator|(
name|keyName
operator|==
literal|null
operator|)
operator|||
name|keyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Invalid key Name"
argument_list|)
throw|;
block|}
name|HttpGet
name|getRequest
init|=
literal|null
decl_stmt|;
name|ByteArrayOutputStream
name|outPutStream
init|=
literal|null
decl_stmt|;
try|try
init|(
name|CloseableHttpClient
name|httpClient
init|=
name|OzoneClientUtils
operator|.
name|newHttpClient
argument_list|()
init|)
block|{
name|outPutStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|volume
operator|.
name|getClient
argument_list|()
operator|.
name|getEndPointURI
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|getVolume
argument_list|()
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|getBucketName
argument_list|()
operator|+
literal|"/"
operator|+
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|getRequest
operator|=
name|getVolume
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getHttpGet
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|executeGetKey
argument_list|(
name|getRequest
argument_list|,
name|httpClient
argument_list|,
name|outPutStream
argument_list|)
expr_stmt|;
return|return
name|outPutStream
operator|.
name|toString
argument_list|(
name|ENCODING_NAME
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|outPutStream
argument_list|)
expr_stmt|;
name|OzoneClientUtils
operator|.
name|releaseConnection
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Executes get key and returns the data.    *    * @param getRequest - http Get Request    * @param httpClient - Client    * @param stream     - Stream to write data to.    * @throws IOException    * @throws OzoneException    */
DECL|method|executeGetKey (HttpGet getRequest, CloseableHttpClient httpClient, OutputStream stream)
specifier|public
specifier|static
name|void
name|executeGetKey
parameter_list|(
name|HttpGet
name|getRequest
parameter_list|,
name|CloseableHttpClient
name|httpClient
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|HTTP_OK
condition|)
block|{
name|entity
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Unexpected null in http payload"
argument_list|)
throw|;
block|}
throw|throw
name|OzoneException
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Deletes a key in this bucket.    *    * @param keyName - Name of the Key    * @throws OzoneException    */
DECL|method|deleteKey (String keyName)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|String
name|keyName
parameter_list|)
throws|throws
name|OzoneException
block|{
if|if
condition|(
operator|(
name|keyName
operator|==
literal|null
operator|)
operator|||
name|keyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Invalid key Name"
argument_list|)
throw|;
block|}
name|HttpDelete
name|deleteRequest
init|=
literal|null
decl_stmt|;
try|try
init|(
name|CloseableHttpClient
name|httpClient
init|=
name|OzoneClientUtils
operator|.
name|newHttpClient
argument_list|()
init|)
block|{
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|volume
operator|.
name|getClient
argument_list|()
operator|.
name|getEndPointURI
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|getVolume
argument_list|()
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|getBucketName
argument_list|()
operator|+
literal|"/"
operator|+
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|deleteRequest
operator|=
name|getVolume
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getHttpDelete
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|executeDeleteKey
argument_list|(
name|deleteRequest
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|OzoneClientUtils
operator|.
name|releaseConnection
argument_list|(
name|deleteRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Executes deleteKey.    *    * @param deleteRequest - http Delete Request    * @param httpClient    - Client    * @throws IOException    * @throws OzoneException    */
DECL|method|executeDeleteKey (HttpDelete deleteRequest, CloseableHttpClient httpClient)
specifier|private
name|void
name|executeDeleteKey
parameter_list|(
name|HttpDelete
name|deleteRequest
parameter_list|,
name|CloseableHttpClient
name|httpClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|deleteRequest
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|HTTP_OK
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Unexpected null in http payload"
argument_list|)
throw|;
block|}
throw|throw
name|OzoneException
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * List all keys in a bucket.    *    * @param resultLength The max length of listing result.    * @param previousKey The key from where listing should start,    *                    this key is excluded in the result.    * @param prefix The prefix that return list keys start with.    * @return List of OzoneKeys    * @throws OzoneException    */
DECL|method|listKeys (String resultLength, String previousKey, String prefix)
specifier|public
name|List
argument_list|<
name|OzoneKey
argument_list|>
name|listKeys
parameter_list|(
name|String
name|resultLength
parameter_list|,
name|String
name|previousKey
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|OzoneException
block|{
name|HttpGet
name|getRequest
init|=
literal|null
decl_stmt|;
try|try
init|(
name|CloseableHttpClient
name|httpClient
init|=
name|OzoneClientUtils
operator|.
name|newHttpClient
argument_list|()
init|)
block|{
name|OzoneRestClient
name|client
init|=
name|getVolume
argument_list|()
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|volume
operator|.
name|getClient
argument_list|()
operator|.
name|getEndPointURI
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|getVolume
argument_list|()
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|resultLength
argument_list|)
condition|)
block|{
name|builder
operator|.
name|addParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_MAXKEYS
argument_list|,
name|resultLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|previousKey
argument_list|)
condition|)
block|{
name|builder
operator|.
name|addParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_PREVKEY
argument_list|,
name|previousKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|builder
operator|.
name|addParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_PREFIX
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|uri
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|getRequest
operator|=
name|client
operator|.
name|getHttpGet
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"listKeys URI={}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
return|return
name|executeListKeys
argument_list|(
name|getRequest
argument_list|,
name|httpClient
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|OzoneClientUtils
operator|.
name|releaseConnection
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Execute list Key.    *    * @param getRequest - HttpGet    * @param httpClient - HttpClient    * @return List<OzoneKey>    * @throws IOException    * @throws OzoneException    */
DECL|method|executeListKeys (HttpGet getRequest, CloseableHttpClient httpClient)
specifier|public
specifier|static
name|List
argument_list|<
name|OzoneKey
argument_list|>
name|executeListKeys
parameter_list|(
name|HttpGet
name|getRequest
parameter_list|,
name|CloseableHttpClient
name|httpClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|OzoneKey
argument_list|>
name|ozoneKeyList
init|=
operator|new
name|LinkedList
argument_list|<
name|OzoneKey
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Unexpected null in http payload"
argument_list|)
throw|;
block|}
if|if
condition|(
name|errorCode
operator|==
name|HTTP_OK
condition|)
block|{
name|String
name|temp
init|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|ListKeys
name|keyList
init|=
name|ListKeys
operator|.
name|parse
argument_list|(
name|temp
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyInfo
name|info
range|:
name|keyList
operator|.
name|getKeyList
argument_list|()
control|)
block|{
name|ozoneKeyList
operator|.
name|add
argument_list|(
operator|new
name|OzoneKey
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ozoneKeyList
return|;
block|}
else|else
block|{
throw|throw
name|OzoneException
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get info of the specified key.    */
DECL|method|getKeyInfo (String keyName)
specifier|public
name|OzoneKey
name|getKeyInfo
parameter_list|(
name|String
name|keyName
parameter_list|)
throws|throws
name|OzoneException
block|{
if|if
condition|(
operator|(
name|keyName
operator|==
literal|null
operator|)
operator|||
name|keyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Unable to get key info, key name is null or empty"
argument_list|)
throw|;
block|}
name|HttpGet
name|getRequest
init|=
literal|null
decl_stmt|;
try|try
init|(
name|CloseableHttpClient
name|httpClient
init|=
name|OzoneClientUtils
operator|.
name|newHttpClient
argument_list|()
init|)
block|{
name|OzoneRestClient
name|client
init|=
name|getVolume
argument_list|()
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|URIBuilder
name|builder
init|=
operator|new
name|URIBuilder
argument_list|(
name|volume
operator|.
name|getClient
argument_list|()
operator|.
name|getEndPointURI
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPath
argument_list|(
literal|"/"
operator|+
name|getVolume
argument_list|()
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|"/"
operator|+
name|getBucketName
argument_list|()
operator|+
literal|"/"
operator|+
name|keyName
argument_list|)
operator|.
name|setParameter
argument_list|(
name|Header
operator|.
name|OZONE_LIST_QUERY_TAG
argument_list|,
name|Header
operator|.
name|OZONE_LIST_QUERY_KEY
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|getRequest
operator|=
name|client
operator|.
name|getHttpGet
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|executeGetKeyInfo
argument_list|(
name|getRequest
argument_list|,
name|httpClient
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|OzoneClientUtils
operator|.
name|releaseConnection
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Execute get Key info.    *    * @param getRequest - HttpGet    * @param httpClient - HttpClient    * @return List<OzoneKey>    * @throws IOException    * @throws OzoneException    */
DECL|method|executeGetKeyInfo (HttpGet getRequest, CloseableHttpClient httpClient)
specifier|private
name|OzoneKey
name|executeGetKeyInfo
parameter_list|(
name|HttpGet
name|getRequest
parameter_list|,
name|CloseableHttpClient
name|httpClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|entity
operator|=
name|response
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneRestClientException
argument_list|(
literal|"Unexpected null in http payload"
argument_list|)
throw|;
block|}
if|if
condition|(
name|errorCode
operator|==
name|HTTP_OK
condition|)
block|{
name|OzoneKey
name|key
init|=
operator|new
name|OzoneKey
argument_list|(
name|KeyInfo
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|key
return|;
block|}
throw|throw
name|OzoneException
operator|.
name|parse
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

