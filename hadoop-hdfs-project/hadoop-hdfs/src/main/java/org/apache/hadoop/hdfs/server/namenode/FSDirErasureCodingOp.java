begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_comment
comment|/**  * Helper class to perform erasure coding related operations.  */
end_comment

begin_class
DECL|class|FSDirErasureCodingOp
specifier|final
class|class
name|FSDirErasureCodingOp
block|{
comment|/**    * Private constructor for preventing FSDirErasureCodingOp object    * creation. Static-only class.    */
DECL|method|FSDirErasureCodingOp ()
specifier|private
name|FSDirErasureCodingOp
parameter_list|()
block|{}
comment|/**    * Create an erasure coding zone on directory src.    *    * @param fsn namespace    * @param srcArg the path of a directory which will be the root of the    *          erasure coding zone. The directory must be empty.    * @param ecPolicy erasure coding policy for the erasure coding zone    * @param logRetryCache whether to record RPC ids in editlog for retry    *          cache rebuilding    * @return {@link HdfsFileStatus}    * @throws IOException    */
DECL|method|createErasureCodingZone (final FSNamesystem fsn, final String srcArg, final ErasureCodingPolicy ecPolicy, final boolean logRetryCache)
specifier|static
name|HdfsFileStatus
name|createErasureCodingZone
parameter_list|(
specifier|final
name|FSNamesystem
name|fsn
parameter_list|,
specifier|final
name|String
name|srcArg
parameter_list|,
specifier|final
name|ErasureCodingPolicy
name|ecPolicy
parameter_list|,
specifier|final
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsn
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|String
name|src
init|=
name|srcArg
decl_stmt|;
name|FSPermissionChecker
name|pc
init|=
literal|null
decl_stmt|;
name|byte
index|[]
index|[]
name|pathComponents
init|=
literal|null
decl_stmt|;
name|pathComponents
operator|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|pc
operator|=
name|fsn
operator|.
name|getPermissionChecker
argument_list|()
expr_stmt|;
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|pathComponents
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
decl_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
decl_stmt|;
name|fsd
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|iip
operator|=
name|fsd
operator|.
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|xAttrs
operator|=
name|fsn
operator|.
name|getErasureCodingZoneManager
argument_list|()
operator|.
name|createErasureCodingZone
argument_list|(
name|iip
argument_list|,
name|ecPolicy
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|fsn
operator|.
name|getEditLog
argument_list|()
operator|.
name|logSetXAttrs
argument_list|(
name|src
argument_list|,
name|xAttrs
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
return|return
name|fsd
operator|.
name|getAuditFileInfo
argument_list|(
name|iip
argument_list|)
return|;
block|}
comment|/**    * Get the erasure coding zone information for specified path.    *    * @param fsn namespace    * @param src path    * @return {@link ErasureCodingZone}    * @throws IOException    */
DECL|method|getErasureCodingZone (final FSNamesystem fsn, final String src)
specifier|static
name|ErasureCodingZone
name|getErasureCodingZone
parameter_list|(
specifier|final
name|FSNamesystem
name|fsn
parameter_list|,
specifier|final
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsn
operator|.
name|hasReadLock
argument_list|()
assert|;
specifier|final
name|INodesInPath
name|iip
init|=
name|getINodesInPath
argument_list|(
name|fsn
argument_list|,
name|src
argument_list|)
decl_stmt|;
return|return
name|getErasureCodingZoneForPath
argument_list|(
name|fsn
argument_list|,
name|iip
argument_list|)
return|;
block|}
comment|/**    * Get erasure coding zone information for specified path.    *    * @param fsn namespace    * @param iip inodes in the path containing the file    * @return {@link ErasureCodingZone}    * @throws IOException    */
DECL|method|getErasureCodingZone (final FSNamesystem fsn, final INodesInPath iip)
specifier|static
name|ErasureCodingZone
name|getErasureCodingZone
parameter_list|(
specifier|final
name|FSNamesystem
name|fsn
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsn
operator|.
name|hasReadLock
argument_list|()
assert|;
return|return
name|getErasureCodingZoneForPath
argument_list|(
name|fsn
argument_list|,
name|iip
argument_list|)
return|;
block|}
comment|/**    * Check if the file is in erasure coding zone.    *    * @param fsn namespace    * @param srcArg path    * @return true represents the file is in erasure coding zone, false otw    * @throws IOException    */
DECL|method|isInErasureCodingZone (final FSNamesystem fsn, final String srcArg)
specifier|static
name|boolean
name|isInErasureCodingZone
parameter_list|(
specifier|final
name|FSNamesystem
name|fsn
parameter_list|,
specifier|final
name|String
name|srcArg
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsn
operator|.
name|hasReadLock
argument_list|()
assert|;
specifier|final
name|INodesInPath
name|iip
init|=
name|getINodesInPath
argument_list|(
name|fsn
argument_list|,
name|srcArg
argument_list|)
decl_stmt|;
return|return
name|getErasureCodingPolicyForPath
argument_list|(
name|fsn
argument_list|,
name|iip
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Check if the file is in erasure coding zone.    *    * @param fsn namespace    * @param iip inodes in the path containing the file    * @return true represents the file is in erasure coding zone, false otw    * @throws IOException    */
DECL|method|isInErasureCodingZone (final FSNamesystem fsn, final INodesInPath iip)
specifier|static
name|boolean
name|isInErasureCodingZone
parameter_list|(
specifier|final
name|FSNamesystem
name|fsn
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getErasureCodingPolicy
argument_list|(
name|fsn
argument_list|,
name|iip
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Get the erasure coding policy.    *    * @param fsn namespace    * @param iip inodes in the path containing the file    * @return {@link ErasureCodingPolicy}    * @throws IOException    */
DECL|method|getErasureCodingPolicy (final FSNamesystem fsn, final INodesInPath iip)
specifier|static
name|ErasureCodingPolicy
name|getErasureCodingPolicy
parameter_list|(
specifier|final
name|FSNamesystem
name|fsn
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsn
operator|.
name|hasReadLock
argument_list|()
assert|;
return|return
name|getErasureCodingPolicyForPath
argument_list|(
name|fsn
argument_list|,
name|iip
argument_list|)
return|;
block|}
comment|/**    * Get available erasure coding polices.    *    * @param fsn namespace    * @return {@link ErasureCodingPolicy} array    */
DECL|method|getErasureCodingPolicies (final FSNamesystem fsn)
specifier|static
name|ErasureCodingPolicy
index|[]
name|getErasureCodingPolicies
parameter_list|(
specifier|final
name|FSNamesystem
name|fsn
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fsn
operator|.
name|hasReadLock
argument_list|()
assert|;
return|return
name|fsn
operator|.
name|getErasureCodingPolicyManager
argument_list|()
operator|.
name|getPolicies
argument_list|()
return|;
block|}
DECL|method|getINodesInPath (final FSNamesystem fsn, final String srcArg)
specifier|private
specifier|static
name|INodesInPath
name|getINodesInPath
parameter_list|(
specifier|final
name|FSNamesystem
name|fsn
parameter_list|,
specifier|final
name|String
name|srcArg
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|src
init|=
name|srcArg
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|pathComponents
init|=
name|FSDirectory
operator|.
name|getPathComponentsForReservedPath
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|final
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|fsn
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|src
operator|=
name|fsd
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|pathComponents
argument_list|)
expr_stmt|;
name|INodesInPath
name|iip
init|=
name|fsd
operator|.
name|getINodesInPath
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsn
operator|.
name|isPermissionEnabled
argument_list|()
condition|)
block|{
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
return|return
name|iip
return|;
block|}
DECL|method|getErasureCodingZoneForPath ( final FSNamesystem fsn, final INodesInPath iip)
specifier|private
specifier|static
name|ErasureCodingZone
name|getErasureCodingZoneForPath
parameter_list|(
specifier|final
name|FSNamesystem
name|fsn
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|fsn
operator|.
name|getErasureCodingZoneManager
argument_list|()
operator|.
name|getErasureCodingZone
argument_list|(
name|iip
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getErasureCodingPolicyForPath (final FSNamesystem fsn, final INodesInPath iip)
specifier|private
specifier|static
name|ErasureCodingPolicy
name|getErasureCodingPolicyForPath
parameter_list|(
specifier|final
name|FSNamesystem
name|fsn
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSDirectory
name|fsd
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|fsd
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|fsn
operator|.
name|getErasureCodingZoneManager
argument_list|()
operator|.
name|getErasureCodingPolicy
argument_list|(
name|iip
argument_list|)
return|;
block|}
finally|finally
block|{
name|fsd
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

