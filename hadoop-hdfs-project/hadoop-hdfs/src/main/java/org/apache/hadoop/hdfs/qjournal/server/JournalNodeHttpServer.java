begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_comment
comment|/**  * Encapsulates the HTTP server started by the Journal Service.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|JournalNodeHttpServer
specifier|public
class|class
name|JournalNodeHttpServer
block|{
DECL|field|JN_ATTRIBUTE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|JN_ATTRIBUTE_KEY
init|=
literal|"localjournal"
decl_stmt|;
DECL|field|httpServer
specifier|private
name|HttpServer2
name|httpServer
decl_stmt|;
DECL|field|localJournalNode
specifier|private
specifier|final
name|JournalNode
name|localJournalNode
decl_stmt|;
DECL|field|httpAddress
specifier|private
name|InetSocketAddress
name|httpAddress
decl_stmt|;
DECL|field|httpsAddress
specifier|private
name|InetSocketAddress
name|httpsAddress
decl_stmt|;
DECL|field|bindAddress
specifier|private
specifier|final
name|InetSocketAddress
name|bindAddress
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|method|JournalNodeHttpServer (Configuration conf, JournalNode jn, InetSocketAddress bindAddress)
name|JournalNodeHttpServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|JournalNode
name|jn
parameter_list|,
name|InetSocketAddress
name|bindAddress
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|localJournalNode
operator|=
name|jn
expr_stmt|;
name|this
operator|.
name|bindAddress
operator|=
name|bindAddress
expr_stmt|;
block|}
DECL|method|start ()
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|InetSocketAddress
name|httpAddr
init|=
name|bindAddress
decl_stmt|;
specifier|final
name|String
name|httpsAddrString
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_HTTPS_ADDRESS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_HTTPS_ADDRESS_DEFAULT
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|httpsAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|httpsAddrString
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpsAddr
operator|!=
literal|null
condition|)
block|{
comment|// If DFS_JOURNALNODE_HTTPS_BIND_HOST_KEY exists then it overrides the
comment|// host name portion of DFS_NAMENODE_HTTPS_ADDRESS_KEY.
specifier|final
name|String
name|bindHost
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_HTTPS_BIND_HOST_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindHost
operator|!=
literal|null
operator|&&
operator|!
name|bindHost
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|httpsAddr
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|bindHost
argument_list|,
name|httpsAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|HttpServer2
operator|.
name|Builder
name|builder
init|=
name|DFSUtil
operator|.
name|httpServerTemplateForNNAndJN
argument_list|(
name|conf
argument_list|,
name|httpAddr
argument_list|,
name|httpsAddr
argument_list|,
literal|"journal"
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_KEYTAB_FILE_KEY
argument_list|)
decl_stmt|;
name|httpServer
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|setAttribute
argument_list|(
name|JN_ATTRIBUTE_KEY
argument_list|,
name|localJournalNode
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|setAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|addInternalServlet
argument_list|(
literal|"getJournal"
argument_list|,
literal|"/getJournal"
argument_list|,
name|GetJournalEditServlet
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|HttpConfig
operator|.
name|Policy
name|policy
init|=
name|DFSUtil
operator|.
name|getHttpPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|connIdx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|policy
operator|.
name|isHttpEnabled
argument_list|()
condition|)
block|{
name|httpAddress
operator|=
name|httpServer
operator|.
name|getConnectorAddress
argument_list|(
name|connIdx
operator|++
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_HTTP_ADDRESS_KEY
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|httpAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isHttpsEnabled
argument_list|()
condition|)
block|{
name|httpsAddress
operator|=
name|httpServer
operator|.
name|getConnectorAddress
argument_list|(
name|connIdx
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_HTTPS_ADDRESS_KEY
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|httpsAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stop ()
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Return the actual HTTP/HTTPS address bound to by the running server.    */
DECL|method|getAddress ()
specifier|public
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
assert|assert
name|httpAddress
operator|!=
literal|null
operator|||
name|httpsAddress
operator|!=
literal|null
assert|;
return|return
name|httpAddress
operator|!=
literal|null
condition|?
name|httpAddress
else|:
name|httpsAddress
return|;
block|}
comment|/**    * Return the actual address bound to by the running server.    */
DECL|method|getHttpAddress ()
specifier|public
name|InetSocketAddress
name|getHttpAddress
parameter_list|()
block|{
return|return
name|httpAddress
return|;
block|}
comment|/**    * Return the actual address bound to by the running server.    */
DECL|method|getHttpsAddress ()
specifier|public
name|InetSocketAddress
name|getHttpsAddress
parameter_list|()
block|{
return|return
name|httpsAddress
return|;
block|}
comment|/**    * Return the URI that locates the HTTP server.    */
DECL|method|getServerURI ()
name|URI
name|getServerURI
parameter_list|()
block|{
comment|// getHttpClientScheme() only returns https for HTTPS_ONLY policy. This
comment|// matches the behavior that the first connector is a HTTPS connector only
comment|// for HTTPS_ONLY policy.
name|InetSocketAddress
name|addr
init|=
name|httpServer
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|URI
operator|.
name|create
argument_list|(
name|DFSUtil
operator|.
name|getHttpClientScheme
argument_list|(
name|conf
argument_list|)
operator|+
literal|"://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|addr
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getJournalFromContext (ServletContext context, String jid)
specifier|public
specifier|static
name|Journal
name|getJournalFromContext
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|String
name|jid
parameter_list|)
throws|throws
name|IOException
block|{
name|JournalNode
name|jn
init|=
operator|(
name|JournalNode
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|JN_ATTRIBUTE_KEY
argument_list|)
decl_stmt|;
return|return
name|jn
operator|.
name|getOrCreateJournal
argument_list|(
name|jid
argument_list|)
return|;
block|}
DECL|method|getConfFromContext (ServletContext context)
specifier|public
specifier|static
name|Configuration
name|getConfFromContext
parameter_list|(
name|ServletContext
name|context
parameter_list|)
block|{
return|return
operator|(
name|Configuration
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|JspHelper
operator|.
name|CURRENT_CONF
argument_list|)
return|;
block|}
block|}
end_class

end_unit

