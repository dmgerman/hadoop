begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.diskbalancer.planner
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|diskbalancer
operator|.
name|planner
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|type
operator|.
name|JavaType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * NodePlan is a set of volumeSetPlans.  */
end_comment

begin_class
DECL|class|NodePlan
specifier|public
class|class
name|NodePlan
block|{
annotation|@
name|JsonTypeInfo
argument_list|(
name|use
operator|=
name|JsonTypeInfo
operator|.
name|Id
operator|.
name|CLASS
argument_list|,
name|include
operator|=
name|JsonTypeInfo
operator|.
name|As
operator|.
name|PROPERTY
argument_list|,
name|property
operator|=
literal|"@class"
argument_list|)
DECL|field|volumeSetPlans
specifier|private
name|List
argument_list|<
name|Step
argument_list|>
name|volumeSetPlans
decl_stmt|;
DECL|field|nodeName
specifier|private
name|String
name|nodeName
decl_stmt|;
DECL|field|nodeUUID
specifier|private
name|String
name|nodeUUID
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|timeStamp
specifier|private
name|long
name|timeStamp
decl_stmt|;
comment|/**    * returns timestamp when this plan was created.    *    * @return long    */
DECL|method|getTimeStamp ()
specifier|public
name|long
name|getTimeStamp
parameter_list|()
block|{
return|return
name|timeStamp
return|;
block|}
comment|/**    * Sets the timestamp when this plan was created.    *    * @param timeStamp    */
DECL|method|setTimeStamp (long timeStamp)
specifier|public
name|void
name|setTimeStamp
parameter_list|(
name|long
name|timeStamp
parameter_list|)
block|{
name|this
operator|.
name|timeStamp
operator|=
name|timeStamp
expr_stmt|;
block|}
comment|/**    * Constructs an Empty Node Plan.    */
DECL|method|NodePlan ()
specifier|public
name|NodePlan
parameter_list|()
block|{
name|volumeSetPlans
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Constructs an empty NodePlan.    */
DECL|method|NodePlan (String datanodeName, int rpcPort)
specifier|public
name|NodePlan
parameter_list|(
name|String
name|datanodeName
parameter_list|,
name|int
name|rpcPort
parameter_list|)
block|{
name|volumeSetPlans
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|datanodeName
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|rpcPort
expr_stmt|;
block|}
comment|/**    * Returns a Map of  VolumeSetIDs and volumeSetPlans.    *    * @return Map    */
DECL|method|getVolumeSetPlans ()
specifier|public
name|List
argument_list|<
name|Step
argument_list|>
name|getVolumeSetPlans
parameter_list|()
block|{
return|return
name|volumeSetPlans
return|;
block|}
comment|/**    * Adds a step to the existing Plan.    *    * @param nextStep - nextStep    */
DECL|method|addStep (Step nextStep)
name|void
name|addStep
parameter_list|(
name|Step
name|nextStep
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nextStep
argument_list|)
expr_stmt|;
name|volumeSetPlans
operator|.
name|add
argument_list|(
name|nextStep
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets Node Name.    *    * @param nodeName - Name    */
DECL|method|setNodeName (String nodeName)
specifier|public
name|void
name|setNodeName
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
block|}
comment|/**    * Sets a volume List plan.    *    * @param volumeSetPlans - List of plans.    */
DECL|method|setVolumeSetPlans (List<Step> volumeSetPlans)
specifier|public
name|void
name|setVolumeSetPlans
parameter_list|(
name|List
argument_list|<
name|Step
argument_list|>
name|volumeSetPlans
parameter_list|)
block|{
name|this
operator|.
name|volumeSetPlans
operator|=
name|volumeSetPlans
expr_stmt|;
block|}
comment|/**    * Returns the DataNode URI.    *    * @return URI    */
DECL|method|getNodeName ()
specifier|public
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
comment|/**    * Sets the DataNodeURI.    *    * @param dataNodeName - String    */
DECL|method|setURI (String dataNodeName)
specifier|public
name|void
name|setURI
parameter_list|(
name|String
name|dataNodeName
parameter_list|)
block|{
name|this
operator|.
name|nodeName
operator|=
name|dataNodeName
expr_stmt|;
block|}
comment|/**    * Gets the DataNode RPC Port.    *    * @return port    */
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**    * Sets the DataNode RPC Port.    *    * @param port - int    */
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
comment|/**    * Parses a Json string and converts to NodePlan.    *    * @param json - Json String    * @return NodePlan    * @throws IOException    */
DECL|method|parseJson (String json)
specifier|public
specifier|static
name|NodePlan
name|parseJson
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|json
argument_list|,
name|NodePlan
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Returns a Json representation of NodePlan.    *    * @return - json String    * @throws IOException    */
DECL|method|toJson ()
specifier|public
name|String
name|toJson
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JavaType
name|planType
init|=
name|mapper
operator|.
name|constructType
argument_list|(
name|NodePlan
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|mapper
operator|.
name|writerWithType
argument_list|(
name|planType
argument_list|)
operator|.
name|writeValueAsString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * gets the Node UUID.    *    * @return Node UUID.    */
DECL|method|getNodeUUID ()
specifier|public
name|String
name|getNodeUUID
parameter_list|()
block|{
return|return
name|nodeUUID
return|;
block|}
comment|/**    * Sets the Node UUID.    *    * @param nodeUUID - UUID of the node.    */
DECL|method|setNodeUUID (String nodeUUID)
specifier|public
name|void
name|setNodeUUID
parameter_list|(
name|String
name|nodeUUID
parameter_list|)
block|{
name|this
operator|.
name|nodeUUID
operator|=
name|nodeUUID
expr_stmt|;
block|}
block|}
end_class

end_unit

