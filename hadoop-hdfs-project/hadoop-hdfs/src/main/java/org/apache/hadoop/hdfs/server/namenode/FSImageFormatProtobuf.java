begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CacheDirectiveInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CachePoolInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockIdManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|CacheManagerSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|FileSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|NameSystemSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SecretManagerSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|StringTableSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|FSImageFormatPBSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StepType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|MD5FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressorStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LimitInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_comment
comment|/**  * Utility class to read / write fsimage in protobuf format.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSImageFormatProtobuf
specifier|public
specifier|final
class|class
name|FSImageFormatProtobuf
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSImageFormatProtobuf
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|LoaderContext
specifier|public
specifier|static
specifier|final
class|class
name|LoaderContext
block|{
DECL|field|stringTable
specifier|private
name|String
index|[]
name|stringTable
decl_stmt|;
DECL|field|refList
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|INodeReference
argument_list|>
name|refList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|method|getStringTable ()
specifier|public
name|String
index|[]
name|getStringTable
parameter_list|()
block|{
return|return
name|stringTable
return|;
block|}
DECL|method|getRefList ()
specifier|public
name|ArrayList
argument_list|<
name|INodeReference
argument_list|>
name|getRefList
parameter_list|()
block|{
return|return
name|refList
return|;
block|}
block|}
DECL|class|SaverContext
specifier|public
specifier|static
specifier|final
class|class
name|SaverContext
block|{
DECL|class|DeduplicationMap
specifier|public
specifier|static
class|class
name|DeduplicationMap
parameter_list|<
name|E
parameter_list|>
block|{
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|E
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|DeduplicationMap ()
specifier|private
name|DeduplicationMap
parameter_list|()
block|{}
DECL|method|newMap ()
specifier|static
parameter_list|<
name|T
parameter_list|>
name|DeduplicationMap
argument_list|<
name|T
argument_list|>
name|newMap
parameter_list|()
block|{
return|return
operator|new
name|DeduplicationMap
argument_list|<
name|T
argument_list|>
argument_list|()
return|;
block|}
DECL|method|getId (E value)
name|int
name|getId
parameter_list|(
name|E
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Integer
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|int
name|nv
init|=
name|map
operator|.
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|nv
argument_list|)
expr_stmt|;
return|return
name|nv
return|;
block|}
return|return
name|v
return|;
block|}
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|entrySet ()
name|Set
argument_list|<
name|Entry
argument_list|<
name|E
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|map
operator|.
name|entrySet
argument_list|()
return|;
block|}
block|}
DECL|field|refList
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|INodeReference
argument_list|>
name|refList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|stringMap
specifier|private
specifier|final
name|DeduplicationMap
argument_list|<
name|String
argument_list|>
name|stringMap
init|=
name|DeduplicationMap
operator|.
name|newMap
argument_list|()
decl_stmt|;
DECL|method|getStringMap ()
specifier|public
name|DeduplicationMap
argument_list|<
name|String
argument_list|>
name|getStringMap
parameter_list|()
block|{
return|return
name|stringMap
return|;
block|}
DECL|method|getRefList ()
specifier|public
name|ArrayList
argument_list|<
name|INodeReference
argument_list|>
name|getRefList
parameter_list|()
block|{
return|return
name|refList
return|;
block|}
block|}
DECL|class|Loader
specifier|public
specifier|static
specifier|final
class|class
name|Loader
implements|implements
name|FSImageFormat
operator|.
name|AbstractLoader
block|{
DECL|field|MINIMUM_FILE_LENGTH
specifier|static
specifier|final
name|int
name|MINIMUM_FILE_LENGTH
init|=
literal|8
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|fsn
specifier|private
specifier|final
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|ctx
specifier|private
specifier|final
name|LoaderContext
name|ctx
decl_stmt|;
comment|/** The MD5 sum of the loaded file */
DECL|field|imgDigest
specifier|private
name|MD5Hash
name|imgDigest
decl_stmt|;
comment|/** The transaction ID of the last edit represented by the loaded file */
DECL|field|imgTxId
specifier|private
name|long
name|imgTxId
decl_stmt|;
comment|/**      * Whether the image's layout version must be the same with      * {@link HdfsServerConstants#NAMENODE_LAYOUT_VERSION}. This is only set to true      * when we're doing (rollingUpgrade rollback).      */
DECL|field|requireSameLayoutVersion
specifier|private
specifier|final
name|boolean
name|requireSameLayoutVersion
decl_stmt|;
DECL|method|Loader (Configuration conf, FSNamesystem fsn, boolean requireSameLayoutVersion)
name|Loader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSNamesystem
name|fsn
parameter_list|,
name|boolean
name|requireSameLayoutVersion
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fsn
operator|=
name|fsn
expr_stmt|;
name|this
operator|.
name|ctx
operator|=
operator|new
name|LoaderContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|requireSameLayoutVersion
operator|=
name|requireSameLayoutVersion
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLoadedImageMd5 ()
specifier|public
name|MD5Hash
name|getLoadedImageMd5
parameter_list|()
block|{
return|return
name|imgDigest
return|;
block|}
annotation|@
name|Override
DECL|method|getLoadedImageTxId ()
specifier|public
name|long
name|getLoadedImageTxId
parameter_list|()
block|{
return|return
name|imgTxId
return|;
block|}
DECL|method|getLoaderContext ()
specifier|public
name|LoaderContext
name|getLoaderContext
parameter_list|()
block|{
return|return
name|ctx
return|;
block|}
DECL|method|load (File file)
name|void
name|load
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|imgDigest
operator|=
name|MD5FileUtils
operator|.
name|computeMd5ForFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|RandomAccessFile
name|raFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|loadInternal
argument_list|(
name|raFile
argument_list|,
name|fin
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded FSImage in "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|raFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|loadInternal (RandomAccessFile raFile, FileInputStream fin)
specifier|private
name|void
name|loadInternal
parameter_list|(
name|RandomAccessFile
name|raFile
parameter_list|,
name|FileInputStream
name|fin
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|FSImageUtil
operator|.
name|checkFileFormat
argument_list|(
name|raFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unrecognized file format"
argument_list|)
throw|;
block|}
name|FileSummary
name|summary
init|=
name|FSImageUtil
operator|.
name|loadSummary
argument_list|(
name|raFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|requireSameLayoutVersion
operator|&&
name|summary
operator|.
name|getLayoutVersion
argument_list|()
operator|!=
name|HdfsServerConstants
operator|.
name|NAMENODE_LAYOUT_VERSION
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Image version "
operator|+
name|summary
operator|.
name|getLayoutVersion
argument_list|()
operator|+
literal|" is not equal to the software version "
operator|+
name|HdfsServerConstants
operator|.
name|NAMENODE_LAYOUT_VERSION
argument_list|)
throw|;
block|}
name|FileChannel
name|channel
init|=
name|fin
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|FSImageFormatPBINode
operator|.
name|Loader
name|inodeLoader
init|=
operator|new
name|FSImageFormatPBINode
operator|.
name|Loader
argument_list|(
name|fsn
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|FSImageFormatPBSnapshot
operator|.
name|Loader
name|snapshotLoader
init|=
operator|new
name|FSImageFormatPBSnapshot
operator|.
name|Loader
argument_list|(
name|fsn
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|FileSummary
operator|.
name|Section
argument_list|>
name|sections
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|summary
operator|.
name|getSectionsList
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sections
argument_list|,
operator|new
name|Comparator
argument_list|<
name|FileSummary
operator|.
name|Section
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FileSummary
operator|.
name|Section
name|s1
parameter_list|,
name|FileSummary
operator|.
name|Section
name|s2
parameter_list|)
block|{
name|SectionName
name|n1
init|=
name|SectionName
operator|.
name|fromString
argument_list|(
name|s1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SectionName
name|n2
init|=
name|SectionName
operator|.
name|fromString
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|n1
operator|==
literal|null
condition|)
block|{
return|return
name|n2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|n2
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|n1
operator|.
name|ordinal
argument_list|()
operator|-
name|n2
operator|.
name|ordinal
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
comment|/**        * beginStep() and the endStep() calls do not match the boundary of the        * sections. This is because that the current implementation only allows        * a particular step to be started for once.        */
name|Step
name|currentStep
init|=
literal|null
decl_stmt|;
for|for
control|(
name|FileSummary
operator|.
name|Section
name|s
range|:
name|sections
control|)
block|{
name|channel
operator|.
name|position
argument_list|(
name|s
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|LimitInputStream
argument_list|(
name|fin
argument_list|,
name|s
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|in
operator|=
name|FSImageUtil
operator|.
name|wrapInputStreamForCompression
argument_list|(
name|conf
argument_list|,
name|summary
operator|.
name|getCodec
argument_list|()
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|String
name|n
init|=
name|s
operator|.
name|getName
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|SectionName
operator|.
name|fromString
argument_list|(
name|n
argument_list|)
condition|)
block|{
case|case
name|NS_INFO
case|:
name|loadNameSystemSection
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING_TABLE
case|:
name|loadStringTableSection
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|INODE
case|:
block|{
name|currentStep
operator|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|INODES
argument_list|)
expr_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|currentStep
argument_list|)
expr_stmt|;
name|inodeLoader
operator|.
name|loadINodeSection
argument_list|(
name|in
argument_list|,
name|prog
argument_list|,
name|currentStep
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INODE_REFERENCE
case|:
name|snapshotLoader
operator|.
name|loadINodeReferenceSection
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|INODE_DIR
case|:
name|inodeLoader
operator|.
name|loadINodeDirectorySection
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|FILES_UNDERCONSTRUCTION
case|:
name|inodeLoader
operator|.
name|loadFilesUnderConstructionSection
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|SNAPSHOT
case|:
name|snapshotLoader
operator|.
name|loadSnapshotSection
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|SNAPSHOT_DIFF
case|:
name|snapshotLoader
operator|.
name|loadSnapshotDiffSection
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|SECRET_MANAGER
case|:
block|{
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|currentStep
argument_list|)
expr_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|DELEGATION_TOKENS
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|loadSecretManagerSection
argument_list|(
name|in
argument_list|,
name|prog
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CACHE_MANAGER
case|:
block|{
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_POOLS
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|loadCacheManagerSection
argument_list|(
name|in
argument_list|,
name|prog
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unrecognized section "
operator|+
name|n
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|loadNameSystemSection (InputStream in)
specifier|private
name|void
name|loadNameSystemSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|NameSystemSection
name|s
init|=
name|NameSystemSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|BlockIdManager
name|blockIdManager
init|=
name|fsn
operator|.
name|getBlockIdManager
argument_list|()
decl_stmt|;
name|blockIdManager
operator|.
name|setGenerationStampV1
argument_list|(
name|s
operator|.
name|getGenstampV1
argument_list|()
argument_list|)
expr_stmt|;
name|blockIdManager
operator|.
name|setGenerationStampV2
argument_list|(
name|s
operator|.
name|getGenstampV2
argument_list|()
argument_list|)
expr_stmt|;
name|blockIdManager
operator|.
name|setGenerationStampV1Limit
argument_list|(
name|s
operator|.
name|getGenstampV1Limit
argument_list|()
argument_list|)
expr_stmt|;
name|blockIdManager
operator|.
name|setLastAllocatedBlockId
argument_list|(
name|s
operator|.
name|getLastAllocatedBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|imgTxId
operator|=
name|s
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|hasRollingUpgradeStartTime
argument_list|()
operator|&&
name|fsn
operator|.
name|getFSImage
argument_list|()
operator|.
name|hasRollbackFSImage
argument_list|()
condition|)
block|{
comment|// we set the rollingUpgradeInfo only when we make sure we have the
comment|// rollback image
name|fsn
operator|.
name|setRollingUpgradeInfo
argument_list|(
literal|true
argument_list|,
name|s
operator|.
name|getRollingUpgradeStartTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadStringTableSection (InputStream in)
specifier|private
name|void
name|loadStringTableSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StringTableSection
name|s
init|=
name|StringTableSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|stringTable
operator|=
operator|new
name|String
index|[
name|s
operator|.
name|getNumEntry
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|getNumEntry
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|StringTableSection
operator|.
name|Entry
name|e
init|=
name|StringTableSection
operator|.
name|Entry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|stringTable
index|[
name|e
operator|.
name|getId
argument_list|()
index|]
operator|=
name|e
operator|.
name|getStr
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|loadSecretManagerSection (InputStream in, StartupProgress prog, Step currentStep)
specifier|private
name|void
name|loadSecretManagerSection
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|StartupProgress
name|prog
parameter_list|,
name|Step
name|currentStep
parameter_list|)
throws|throws
name|IOException
block|{
name|SecretManagerSection
name|s
init|=
name|SecretManagerSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|numKeys
init|=
name|s
operator|.
name|getNumKeys
argument_list|()
decl_stmt|,
name|numTokens
init|=
name|s
operator|.
name|getNumTokens
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|SecretManagerSection
operator|.
name|DelegationKey
argument_list|>
name|keys
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|numKeys
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|SecretManagerSection
operator|.
name|PersistToken
argument_list|>
name|tokens
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|numTokens
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numKeys
condition|;
operator|++
name|i
control|)
name|keys
operator|.
name|add
argument_list|(
name|SecretManagerSection
operator|.
name|DelegationKey
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|currentStep
argument_list|,
name|numTokens
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|currentStep
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTokens
condition|;
operator|++
name|i
control|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|SecretManagerSection
operator|.
name|PersistToken
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|fsn
operator|.
name|loadSecretManagerState
argument_list|(
name|s
argument_list|,
name|keys
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
DECL|method|loadCacheManagerSection (InputStream in, StartupProgress prog, Step currentStep)
specifier|private
name|void
name|loadCacheManagerSection
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|StartupProgress
name|prog
parameter_list|,
name|Step
name|currentStep
parameter_list|)
throws|throws
name|IOException
block|{
name|CacheManagerSection
name|s
init|=
name|CacheManagerSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|numPools
init|=
name|s
operator|.
name|getNumPools
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|CachePoolInfoProto
argument_list|>
name|pools
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|numPools
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|CacheDirectiveInfoProto
argument_list|>
name|directives
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|s
operator|.
name|getNumDirectives
argument_list|()
argument_list|)
decl_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|currentStep
argument_list|,
name|numPools
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|currentStep
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPools
condition|;
operator|++
name|i
control|)
block|{
name|pools
operator|.
name|add
argument_list|(
name|CachePoolInfoProto
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|getNumDirectives
argument_list|()
condition|;
operator|++
name|i
control|)
name|directives
operator|.
name|add
argument_list|(
name|CacheDirectiveInfoProto
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|fsn
operator|.
name|getCacheManager
argument_list|()
operator|.
name|loadState
argument_list|(
operator|new
name|CacheManager
operator|.
name|PersistState
argument_list|(
name|s
argument_list|,
name|pools
argument_list|,
name|directives
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Saver
specifier|public
specifier|static
specifier|final
class|class
name|Saver
block|{
DECL|field|CHECK_CANCEL_INTERVAL
specifier|public
specifier|static
specifier|final
name|int
name|CHECK_CANCEL_INTERVAL
init|=
literal|4096
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|SaveNamespaceContext
name|context
decl_stmt|;
DECL|field|saverContext
specifier|private
specifier|final
name|SaverContext
name|saverContext
decl_stmt|;
DECL|field|currentOffset
specifier|private
name|long
name|currentOffset
init|=
name|FSImageUtil
operator|.
name|MAGIC_HEADER
operator|.
name|length
decl_stmt|;
DECL|field|savedDigest
specifier|private
name|MD5Hash
name|savedDigest
decl_stmt|;
DECL|field|fileChannel
specifier|private
name|FileChannel
name|fileChannel
decl_stmt|;
comment|// OutputStream for the section data
DECL|field|sectionOutputStream
specifier|private
name|OutputStream
name|sectionOutputStream
decl_stmt|;
DECL|field|codec
specifier|private
name|CompressionCodec
name|codec
decl_stmt|;
DECL|field|underlyingOutputStream
specifier|private
name|OutputStream
name|underlyingOutputStream
decl_stmt|;
DECL|method|Saver (SaveNamespaceContext context)
name|Saver
parameter_list|(
name|SaveNamespaceContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|saverContext
operator|=
operator|new
name|SaverContext
argument_list|()
expr_stmt|;
block|}
DECL|method|getSavedDigest ()
specifier|public
name|MD5Hash
name|getSavedDigest
parameter_list|()
block|{
return|return
name|savedDigest
return|;
block|}
DECL|method|getContext ()
specifier|public
name|SaveNamespaceContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|getSaverContext ()
specifier|public
name|SaverContext
name|getSaverContext
parameter_list|()
block|{
return|return
name|saverContext
return|;
block|}
DECL|method|commitSection (FileSummary.Builder summary, SectionName name)
specifier|public
name|void
name|commitSection
parameter_list|(
name|FileSummary
operator|.
name|Builder
name|summary
parameter_list|,
name|SectionName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|oldOffset
init|=
name|currentOffset
decl_stmt|;
name|flushSectionOutputStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
name|sectionOutputStream
operator|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|underlyingOutputStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sectionOutputStream
operator|=
name|underlyingOutputStream
expr_stmt|;
block|}
name|long
name|length
init|=
name|fileChannel
operator|.
name|position
argument_list|()
operator|-
name|oldOffset
decl_stmt|;
name|summary
operator|.
name|addSections
argument_list|(
name|FileSummary
operator|.
name|Section
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|name
operator|.
name|name
argument_list|)
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
operator|.
name|setOffset
argument_list|(
name|currentOffset
argument_list|)
argument_list|)
expr_stmt|;
name|currentOffset
operator|+=
name|length
expr_stmt|;
block|}
DECL|method|flushSectionOutputStream ()
specifier|private
name|void
name|flushSectionOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CompressorStream
operator|)
name|sectionOutputStream
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
name|sectionOutputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|save (File file, FSImageCompression compression)
name|void
name|save
parameter_list|(
name|File
name|file
parameter_list|,
name|FSImageCompression
name|compression
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|fout
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|fileChannel
operator|=
name|fout
operator|.
name|getChannel
argument_list|()
expr_stmt|;
try|try
block|{
name|saveInternal
argument_list|(
name|fout
argument_list|,
name|compression
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|saveFileSummary (OutputStream out, FileSummary summary)
specifier|private
specifier|static
name|void
name|saveFileSummary
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|FileSummary
name|summary
parameter_list|)
throws|throws
name|IOException
block|{
name|summary
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|getOndiskTrunkSize
argument_list|(
name|summary
argument_list|)
decl_stmt|;
name|byte
index|[]
name|lengthBytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|lengthBytes
argument_list|)
operator|.
name|asIntBuffer
argument_list|()
operator|.
name|put
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|lengthBytes
argument_list|)
expr_stmt|;
block|}
DECL|method|saveInodes (FileSummary.Builder summary)
specifier|private
name|void
name|saveInodes
parameter_list|(
name|FileSummary
operator|.
name|Builder
name|summary
parameter_list|)
throws|throws
name|IOException
block|{
name|FSImageFormatPBINode
operator|.
name|Saver
name|saver
init|=
operator|new
name|FSImageFormatPBINode
operator|.
name|Saver
argument_list|(
name|this
argument_list|,
name|summary
argument_list|)
decl_stmt|;
name|saver
operator|.
name|serializeINodeSection
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
name|saver
operator|.
name|serializeINodeDirectorySection
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
name|saver
operator|.
name|serializeFilesUCSection
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
block|}
DECL|method|saveSnapshots (FileSummary.Builder summary)
specifier|private
name|void
name|saveSnapshots
parameter_list|(
name|FileSummary
operator|.
name|Builder
name|summary
parameter_list|)
throws|throws
name|IOException
block|{
name|FSImageFormatPBSnapshot
operator|.
name|Saver
name|snapshotSaver
init|=
operator|new
name|FSImageFormatPBSnapshot
operator|.
name|Saver
argument_list|(
name|this
argument_list|,
name|summary
argument_list|,
name|context
argument_list|,
name|context
operator|.
name|getSourceNamesystem
argument_list|()
argument_list|)
decl_stmt|;
name|snapshotSaver
operator|.
name|serializeSnapshotSection
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
name|snapshotSaver
operator|.
name|serializeSnapshotDiffSection
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
name|snapshotSaver
operator|.
name|serializeINodeReferenceSection
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
block|}
DECL|method|saveInternal (FileOutputStream fout, FSImageCompression compression, String filePath)
specifier|private
name|void
name|saveInternal
parameter_list|(
name|FileOutputStream
name|fout
parameter_list|,
name|FSImageCompression
name|compression
parameter_list|,
name|String
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|MessageDigest
name|digester
init|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
decl_stmt|;
name|underlyingOutputStream
operator|=
operator|new
name|DigestOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|fout
argument_list|)
argument_list|,
name|digester
argument_list|)
expr_stmt|;
name|underlyingOutputStream
operator|.
name|write
argument_list|(
name|FSImageUtil
operator|.
name|MAGIC_HEADER
argument_list|)
expr_stmt|;
name|fileChannel
operator|=
name|fout
operator|.
name|getChannel
argument_list|()
expr_stmt|;
name|FileSummary
operator|.
name|Builder
name|b
init|=
name|FileSummary
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOndiskVersion
argument_list|(
name|FSImageUtil
operator|.
name|FILE_VERSION
argument_list|)
operator|.
name|setLayoutVersion
argument_list|(
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
decl_stmt|;
name|codec
operator|=
name|compression
operator|.
name|getImageCodec
argument_list|()
expr_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setCodec
argument_list|(
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|sectionOutputStream
operator|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|underlyingOutputStream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sectionOutputStream
operator|=
name|underlyingOutputStream
expr_stmt|;
block|}
name|saveNameSystemSection
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// Check for cancellation right after serializing the name system section.
comment|// Some unit tests, such as TestSaveNamespace#testCancelSaveNameSpace
comment|// depends on this behavior.
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|INODES
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|saveInodes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|saveSnapshots
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|step
operator|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|DELEGATION_TOKENS
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|saveSecretManagerSection
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|step
operator|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_POOLS
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|saveCacheManagerSection
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|saveStringTableSection
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// We use the underlyingOutputStream to write the header. Therefore flush
comment|// the buffered stream (which is potentially compressed) first.
name|flushSectionOutputStream
argument_list|()
expr_stmt|;
name|FileSummary
name|summary
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|saveFileSummary
argument_list|(
name|underlyingOutputStream
argument_list|,
name|summary
argument_list|)
expr_stmt|;
name|underlyingOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|savedDigest
operator|=
operator|new
name|MD5Hash
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|saveSecretManagerSection (FileSummary.Builder summary)
specifier|private
name|void
name|saveSecretManagerSection
parameter_list|(
name|FileSummary
operator|.
name|Builder
name|summary
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSNamesystem
name|fsn
init|=
name|context
operator|.
name|getSourceNamesystem
argument_list|()
decl_stmt|;
name|DelegationTokenSecretManager
operator|.
name|SecretManagerState
name|state
init|=
name|fsn
operator|.
name|saveSecretManagerState
argument_list|()
decl_stmt|;
name|state
operator|.
name|section
operator|.
name|writeDelimitedTo
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
for|for
control|(
name|SecretManagerSection
operator|.
name|DelegationKey
name|k
range|:
name|state
operator|.
name|keys
control|)
name|k
operator|.
name|writeDelimitedTo
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
for|for
control|(
name|SecretManagerSection
operator|.
name|PersistToken
name|t
range|:
name|state
operator|.
name|tokens
control|)
name|t
operator|.
name|writeDelimitedTo
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
name|commitSection
argument_list|(
name|summary
argument_list|,
name|SectionName
operator|.
name|SECRET_MANAGER
argument_list|)
expr_stmt|;
block|}
DECL|method|saveCacheManagerSection (FileSummary.Builder summary)
specifier|private
name|void
name|saveCacheManagerSection
parameter_list|(
name|FileSummary
operator|.
name|Builder
name|summary
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSNamesystem
name|fsn
init|=
name|context
operator|.
name|getSourceNamesystem
argument_list|()
decl_stmt|;
name|CacheManager
operator|.
name|PersistState
name|state
init|=
name|fsn
operator|.
name|getCacheManager
argument_list|()
operator|.
name|saveState
argument_list|()
decl_stmt|;
name|state
operator|.
name|section
operator|.
name|writeDelimitedTo
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
for|for
control|(
name|CachePoolInfoProto
name|p
range|:
name|state
operator|.
name|pools
control|)
name|p
operator|.
name|writeDelimitedTo
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
for|for
control|(
name|CacheDirectiveInfoProto
name|p
range|:
name|state
operator|.
name|directives
control|)
name|p
operator|.
name|writeDelimitedTo
argument_list|(
name|sectionOutputStream
argument_list|)
expr_stmt|;
name|commitSection
argument_list|(
name|summary
argument_list|,
name|SectionName
operator|.
name|CACHE_MANAGER
argument_list|)
expr_stmt|;
block|}
DECL|method|saveNameSystemSection (FileSummary.Builder summary)
specifier|private
name|void
name|saveNameSystemSection
parameter_list|(
name|FileSummary
operator|.
name|Builder
name|summary
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSNamesystem
name|fsn
init|=
name|context
operator|.
name|getSourceNamesystem
argument_list|()
decl_stmt|;
name|OutputStream
name|out
init|=
name|sectionOutputStream
decl_stmt|;
name|BlockIdManager
name|blockIdManager
init|=
name|fsn
operator|.
name|getBlockIdManager
argument_list|()
decl_stmt|;
name|NameSystemSection
operator|.
name|Builder
name|b
init|=
name|NameSystemSection
operator|.
name|newBuilder
argument_list|()
operator|.
name|setGenstampV1
argument_list|(
name|blockIdManager
operator|.
name|getGenerationStampV1
argument_list|()
argument_list|)
operator|.
name|setGenstampV1Limit
argument_list|(
name|blockIdManager
operator|.
name|getGenerationStampV1Limit
argument_list|()
argument_list|)
operator|.
name|setGenstampV2
argument_list|(
name|blockIdManager
operator|.
name|getGenerationStampV2
argument_list|()
argument_list|)
operator|.
name|setLastAllocatedBlockId
argument_list|(
name|blockIdManager
operator|.
name|getLastAllocatedBlockId
argument_list|()
argument_list|)
operator|.
name|setTransactionId
argument_list|(
name|context
operator|.
name|getTxId
argument_list|()
argument_list|)
decl_stmt|;
comment|// We use the non-locked version of getNamespaceInfo here since
comment|// the coordinating thread of saveNamespace already has read-locked
comment|// the namespace for us. If we attempt to take another readlock
comment|// from the actual saver thread, there's a potential of a
comment|// fairness-related deadlock. See the comments on HDFS-2223.
name|b
operator|.
name|setNamespaceId
argument_list|(
name|fsn
operator|.
name|unprotectedGetNamespaceInfo
argument_list|()
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fsn
operator|.
name|isRollingUpgrade
argument_list|()
condition|)
block|{
name|b
operator|.
name|setRollingUpgradeStartTime
argument_list|(
name|fsn
operator|.
name|getRollingUpgradeInfo
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NameSystemSection
name|s
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|s
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|commitSection
argument_list|(
name|summary
argument_list|,
name|SectionName
operator|.
name|NS_INFO
argument_list|)
expr_stmt|;
block|}
DECL|method|saveStringTableSection (FileSummary.Builder summary)
specifier|private
name|void
name|saveStringTableSection
parameter_list|(
name|FileSummary
operator|.
name|Builder
name|summary
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|out
init|=
name|sectionOutputStream
decl_stmt|;
name|StringTableSection
operator|.
name|Builder
name|b
init|=
name|StringTableSection
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNumEntry
argument_list|(
name|saverContext
operator|.
name|stringMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|saverContext
operator|.
name|stringMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringTableSection
operator|.
name|Entry
operator|.
name|Builder
name|eb
init|=
name|StringTableSection
operator|.
name|Entry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|setStr
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|eb
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|commitSection
argument_list|(
name|summary
argument_list|,
name|SectionName
operator|.
name|STRING_TABLE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Supported section name. The order of the enum determines the order of    * loading.    */
DECL|enum|SectionName
specifier|public
enum|enum
name|SectionName
block|{
DECL|enumConstant|NS_INFO
name|NS_INFO
argument_list|(
literal|"NS_INFO"
argument_list|)
block|,
DECL|enumConstant|STRING_TABLE
name|STRING_TABLE
argument_list|(
literal|"STRING_TABLE"
argument_list|)
block|,
DECL|enumConstant|EXTENDED_ACL
name|EXTENDED_ACL
argument_list|(
literal|"EXTENDED_ACL"
argument_list|)
block|,
DECL|enumConstant|INODE
name|INODE
argument_list|(
literal|"INODE"
argument_list|)
block|,
DECL|enumConstant|INODE_REFERENCE
name|INODE_REFERENCE
argument_list|(
literal|"INODE_REFERENCE"
argument_list|)
block|,
DECL|enumConstant|SNAPSHOT
name|SNAPSHOT
argument_list|(
literal|"SNAPSHOT"
argument_list|)
block|,
DECL|enumConstant|INODE_DIR
name|INODE_DIR
argument_list|(
literal|"INODE_DIR"
argument_list|)
block|,
DECL|enumConstant|FILES_UNDERCONSTRUCTION
name|FILES_UNDERCONSTRUCTION
argument_list|(
literal|"FILES_UNDERCONSTRUCTION"
argument_list|)
block|,
DECL|enumConstant|SNAPSHOT_DIFF
name|SNAPSHOT_DIFF
argument_list|(
literal|"SNAPSHOT_DIFF"
argument_list|)
block|,
DECL|enumConstant|SECRET_MANAGER
name|SECRET_MANAGER
argument_list|(
literal|"SECRET_MANAGER"
argument_list|)
block|,
DECL|enumConstant|CACHE_MANAGER
name|CACHE_MANAGER
argument_list|(
literal|"CACHE_MANAGER"
argument_list|)
block|;
DECL|field|values
specifier|private
specifier|static
specifier|final
name|SectionName
index|[]
name|values
init|=
name|SectionName
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|method|fromString (String name)
specifier|public
specifier|static
name|SectionName
name|fromString
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|SectionName
name|n
range|:
name|values
control|)
block|{
if|if
condition|(
name|n
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|n
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|SectionName (String name)
specifier|private
name|SectionName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
DECL|method|getOndiskTrunkSize (com.google.protobuf.GeneratedMessage s)
specifier|private
specifier|static
name|int
name|getOndiskTrunkSize
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
name|s
parameter_list|)
block|{
return|return
name|CodedOutputStream
operator|.
name|computeRawVarint32Size
argument_list|(
name|s
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
operator|+
name|s
operator|.
name|getSerializedSize
argument_list|()
return|;
block|}
DECL|method|FSImageFormatProtobuf ()
specifier|private
name|FSImageFormatProtobuf
parameter_list|()
block|{   }
block|}
end_class

end_unit

