begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockStorageMovementCommand
operator|.
name|BlockMovingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksStorageMovementResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Setting storagePolicy on a file after the file write will only update the new  * storage policy type in Namespace, but physical block storage movement will  * not happen until user runs "Mover Tool" explicitly for such files. The  * StoragePolicySatisfier Daemon thread implemented for addressing the case  * where users may want to physically move the blocks by HDFS itself instead of  * running mover tool explicitly. Just calling client API to  * satisfyStoragePolicy on a file/dir will automatically trigger to move its  * physical storage locations as expected in asynchronous manner. Here Namenode  * will pick the file blocks which are expecting to change its storages, then it  * will build the mapping of source block location and expected storage type and  * location to move. After that this class will also prepare commands to send to  * Datanode for processing the physical block movements.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StoragePolicySatisfier
specifier|public
class|class
name|StoragePolicySatisfier
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StoragePolicySatisfier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|storagePolicySatisfierThread
specifier|private
name|Daemon
name|storagePolicySatisfierThread
decl_stmt|;
DECL|field|namesystem
specifier|private
specifier|final
name|Namesystem
name|namesystem
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|storageMovementNeeded
specifier|private
specifier|final
name|BlockStorageMovementNeeded
name|storageMovementNeeded
decl_stmt|;
DECL|field|storageMovementsMonitor
specifier|private
specifier|final
name|BlockStorageMovementAttemptedItems
name|storageMovementsMonitor
decl_stmt|;
DECL|field|isRunning
specifier|private
specifier|volatile
name|boolean
name|isRunning
init|=
literal|false
decl_stmt|;
DECL|method|StoragePolicySatisfier (final Namesystem namesystem, final BlockStorageMovementNeeded storageMovementNeeded, final BlockManager blkManager)
specifier|public
name|StoragePolicySatisfier
parameter_list|(
specifier|final
name|Namesystem
name|namesystem
parameter_list|,
specifier|final
name|BlockStorageMovementNeeded
name|storageMovementNeeded
parameter_list|,
specifier|final
name|BlockManager
name|blkManager
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|storageMovementNeeded
operator|=
name|storageMovementNeeded
expr_stmt|;
name|this
operator|.
name|blockManager
operator|=
name|blkManager
expr_stmt|;
comment|// TODO: below selfRetryTimeout and checkTimeout can be configurable later
comment|// Now, the default values of selfRetryTimeout and checkTimeout are 30mins
comment|// and 5mins respectively
name|this
operator|.
name|storageMovementsMonitor
operator|=
operator|new
name|BlockStorageMovementAttemptedItems
argument_list|(
literal|5
operator|*
literal|60
operator|*
literal|1000
argument_list|,
literal|30
operator|*
literal|60
operator|*
literal|1000
argument_list|,
name|storageMovementNeeded
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start storage policy satisfier demon thread. Also start block storage    * movements monitor for retry the attempts if needed.    */
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|isRunning
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting StoragePolicySatisfier."
argument_list|)
expr_stmt|;
name|storagePolicySatisfierThread
operator|=
operator|new
name|Daemon
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|storagePolicySatisfierThread
operator|.
name|setName
argument_list|(
literal|"StoragePolicySatisfier"
argument_list|)
expr_stmt|;
name|storagePolicySatisfierThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop storage policy satisfier demon thread.    */
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|isRunning
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping StoragePolicySatisfier."
argument_list|)
expr_stmt|;
if|if
condition|(
name|storagePolicySatisfierThread
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|storagePolicySatisfierThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|storagePolicySatisfierThread
operator|.
name|join
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{     }
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|clearQueues
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check whether StoragePolicySatisfier is running.    * @return true if running    */
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|isRunning
return|;
block|}
comment|// Return true if a Mover instance is running
DECL|method|checkIfMoverRunning ()
specifier|private
name|boolean
name|checkIfMoverRunning
parameter_list|()
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|moverId
init|=
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
operator|.
name|toString
argument_list|()
decl_stmt|;
name|INode
name|inode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|moverId
argument_list|,
name|FSDirectory
operator|.
name|DirOp
operator|.
name|READ
argument_list|)
decl_stmt|;
if|if
condition|(
name|inode
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"StoragePolicySatisfier is enabled as no Mover ID file found."
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|isMoverRunning
init|=
operator|!
name|checkIfMoverRunning
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|isRunning
operator|=
name|isMoverRunning
expr_stmt|;
if|if
condition|(
operator|!
name|isRunning
condition|)
block|{
comment|// Stopping monitor thread and clearing queues as well
name|this
operator|.
name|clearQueues
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Stopping StoragePolicySatisfier thread "
operator|+
literal|"as Mover ID file "
operator|+
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
operator|.
name|toString
argument_list|()
operator|+
literal|" exists"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
while|while
condition|(
name|namesystem
operator|.
name|isRunning
argument_list|()
operator|&&
name|isRunning
condition|)
block|{
try|try
block|{
name|Long
name|blockCollectionID
init|=
name|storageMovementNeeded
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockCollectionID
operator|!=
literal|null
condition|)
block|{
name|computeAndAssignStorageMismatchedBlocksToDNs
argument_list|(
name|blockCollectionID
argument_list|)
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|add
argument_list|(
name|blockCollectionID
argument_list|)
expr_stmt|;
block|}
comment|// TODO: We can think to make this as configurable later, how frequently
comment|// we want to check block movements.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|isRunning
operator|=
literal|false
expr_stmt|;
comment|// Stopping monitor thread and clearing queues as well
name|this
operator|.
name|clearQueues
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|namesystem
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping StoragePolicySatisfier."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|InterruptedException
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"StoragePolicySatisfier received an exception"
operator|+
literal|" while shutting down."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"StoragePolicySatisfier thread received runtime exception. "
operator|+
literal|"Stopping Storage policy satisfier work"
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// TODO: Just break for now. Once we implement dynamic start/stop
comment|// option, we can add conditions here when to break/terminate.
break|break;
block|}
block|}
block|}
DECL|method|computeAndAssignStorageMismatchedBlocksToDNs ( long blockCollectionID)
specifier|private
name|void
name|computeAndAssignStorageMismatchedBlocksToDNs
parameter_list|(
name|long
name|blockCollectionID
parameter_list|)
block|{
name|BlockCollection
name|blockCollection
init|=
name|namesystem
operator|.
name|getBlockCollection
argument_list|(
name|blockCollectionID
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockCollection
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|byte
name|existingStoragePolicyID
init|=
name|blockCollection
operator|.
name|getStoragePolicyID
argument_list|()
decl_stmt|;
name|BlockStoragePolicy
name|existingStoragePolicy
init|=
name|blockManager
operator|.
name|getStoragePolicy
argument_list|(
name|existingStoragePolicyID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|blockCollection
operator|.
name|getLastBlock
argument_list|()
operator|.
name|isComplete
argument_list|()
condition|)
block|{
comment|// Postpone, currently file is under construction
comment|// So, should we add back? or leave it to user
return|return;
block|}
comment|// First datanode will be chosen as the co-ordinator node for storage
comment|// movements. Later this can be optimized if needed.
name|DatanodeDescriptor
name|coordinatorNode
init|=
literal|null
decl_stmt|;
name|BlockInfo
index|[]
name|blocks
init|=
name|blockCollection
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockMovingInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BlockInfo
name|blockInfo
init|=
name|blocks
index|[
name|i
index|]
decl_stmt|;
name|List
argument_list|<
name|StorageType
argument_list|>
name|expectedStorageTypes
init|=
name|existingStoragePolicy
operator|.
name|chooseStorageTypes
argument_list|(
name|blockInfo
operator|.
name|getReplication
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeStorageInfo
index|[]
name|storages
init|=
name|blockManager
operator|.
name|getStorages
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
operator|new
name|StorageType
index|[
name|storages
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storages
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|DatanodeStorageInfo
name|datanodeStorageInfo
init|=
name|storages
index|[
name|j
index|]
decl_stmt|;
name|StorageType
name|storageType
init|=
name|datanodeStorageInfo
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
name|storageTypes
index|[
name|j
index|]
operator|=
name|storageType
expr_stmt|;
block|}
name|List
argument_list|<
name|StorageType
argument_list|>
name|existing
init|=
operator|new
name|LinkedList
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|storageTypes
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|removeOverlapBetweenStorageTypes
argument_list|(
name|expectedStorageTypes
argument_list|,
name|existing
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|StorageTypeNodePair
argument_list|>
name|sourceWithStorageMap
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageTypeNodePair
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|existingBlockStorages
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|storages
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|StorageType
name|existingType
range|:
name|existing
control|)
block|{
name|Iterator
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|iterator
init|=
name|existingBlockStorages
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeStorageInfo
name|datanodeStorageInfo
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|StorageType
name|storageType
init|=
name|datanodeStorageInfo
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageType
operator|==
name|existingType
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|sourceWithStorageMap
operator|.
name|add
argument_list|(
operator|new
name|StorageTypeNodePair
argument_list|(
name|storageType
argument_list|,
name|datanodeStorageInfo
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|StorageTypeNodeMap
name|locsForExpectedStorageTypes
init|=
name|findTargetsForExpectedStorageTypes
argument_list|(
name|expectedStorageTypes
argument_list|)
decl_stmt|;
name|BlockMovingInfo
name|blockMovingInfo
init|=
name|findSourceAndTargetToMove
argument_list|(
name|blockInfo
argument_list|,
name|existing
argument_list|,
name|sourceWithStorageMap
argument_list|,
name|expectedStorageTypes
argument_list|,
name|locsForExpectedStorageTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|coordinatorNode
operator|==
literal|null
condition|)
block|{
comment|// For now, first datanode will be chosen as the co-ordinator. Later
comment|// this can be optimized if needed.
name|coordinatorNode
operator|=
operator|(
name|DatanodeDescriptor
operator|)
name|blockMovingInfo
operator|.
name|getSources
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
name|blockMovingInfos
operator|.
name|add
argument_list|(
name|blockMovingInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|addBlockMovingInfosToCoordinatorDn
argument_list|(
name|blockCollectionID
argument_list|,
name|blockMovingInfos
argument_list|,
name|coordinatorNode
argument_list|)
expr_stmt|;
block|}
DECL|method|addBlockMovingInfosToCoordinatorDn (long blockCollectionID, List<BlockMovingInfo> blockMovingInfos, DatanodeDescriptor coordinatorNode)
specifier|private
name|void
name|addBlockMovingInfosToCoordinatorDn
parameter_list|(
name|long
name|blockCollectionID
parameter_list|,
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
parameter_list|,
name|DatanodeDescriptor
name|coordinatorNode
parameter_list|)
block|{
if|if
condition|(
name|blockMovingInfos
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
comment|// TODO: Major: handle this case. I think we need retry cases to
comment|// be implemented. Idea is, if some files are not getting storage movement
comment|// chances, then we can just retry limited number of times and exit.
return|return;
block|}
name|boolean
name|needBlockStorageMovement
init|=
literal|false
decl_stmt|;
for|for
control|(
name|BlockMovingInfo
name|blkMovingInfo
range|:
name|blockMovingInfos
control|)
block|{
comment|// Check for atleast one block storage movement has been chosen
if|if
condition|(
name|blkMovingInfo
operator|.
name|getTargets
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|needBlockStorageMovement
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|needBlockStorageMovement
condition|)
block|{
comment|// Simply return as there is no targets selected for scheduling the block
comment|// movement.
return|return;
block|}
comment|// 'BlockCollectionId' is used as the tracking ID. All the blocks under this
comment|// blockCollectionID will be added to this datanode.
name|coordinatorNode
operator|.
name|addBlocksToMoveStorage
argument_list|(
name|blockCollectionID
argument_list|,
name|blockMovingInfos
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find the good target node for each source node for which block storages was    * misplaced.    *    * @param blockInfo    *          - Block    * @param existing    *          - Existing storage types of block    * @param sourceWithStorageList    *          - Source Datanode with storages list    * @param expected    *          - Expecting storages to move    * @param locsForExpectedStorageTypes    *          - Available DNs for expected storage types    * @return list of block source and target node pair    */
DECL|method|findSourceAndTargetToMove (BlockInfo blockInfo, List<StorageType> existing, List<StorageTypeNodePair> sourceWithStorageList, List<StorageType> expected, StorageTypeNodeMap locsForExpectedStorageTypes)
specifier|private
name|BlockMovingInfo
name|findSourceAndTargetToMove
parameter_list|(
name|BlockInfo
name|blockInfo
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|existing
parameter_list|,
name|List
argument_list|<
name|StorageTypeNodePair
argument_list|>
name|sourceWithStorageList
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|expected
parameter_list|,
name|StorageTypeNodeMap
name|locsForExpectedStorageTypes
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|sourceNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StorageType
argument_list|>
name|sourceStorageTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeInfo
argument_list|>
name|targetNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetStorageTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chosenNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceWithStorageList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StorageTypeNodePair
name|existingTypeNodePair
init|=
name|sourceWithStorageList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StorageTypeNodePair
name|chosenTarget
init|=
name|chooseTargetTypeInSameNode
argument_list|(
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expected
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenTarget
operator|==
literal|null
operator|&&
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
operator|.
name|isNodeGroupAware
argument_list|()
condition|)
block|{
name|chosenTarget
operator|=
name|chooseTarget
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expected
argument_list|,
name|Matcher
operator|.
name|SAME_NODE_GROUP
argument_list|,
name|locsForExpectedStorageTypes
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
block|}
comment|// Then, match nodes on the same rack
if|if
condition|(
name|chosenTarget
operator|==
literal|null
condition|)
block|{
name|chosenTarget
operator|=
name|chooseTarget
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expected
argument_list|,
name|Matcher
operator|.
name|SAME_RACK
argument_list|,
name|locsForExpectedStorageTypes
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chosenTarget
operator|==
literal|null
condition|)
block|{
name|chosenTarget
operator|=
name|chooseTarget
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expected
argument_list|,
name|Matcher
operator|.
name|ANY_OTHER
argument_list|,
name|locsForExpectedStorageTypes
argument_list|,
name|chosenNodes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|chosenTarget
condition|)
block|{
name|sourceNodes
operator|.
name|add
argument_list|(
name|existingTypeNodePair
operator|.
name|dn
argument_list|)
expr_stmt|;
name|sourceStorageTypes
operator|.
name|add
argument_list|(
name|existingTypeNodePair
operator|.
name|storageType
argument_list|)
expr_stmt|;
name|targetNodes
operator|.
name|add
argument_list|(
name|chosenTarget
operator|.
name|dn
argument_list|)
expr_stmt|;
name|targetStorageTypes
operator|.
name|add
argument_list|(
name|chosenTarget
operator|.
name|storageType
argument_list|)
expr_stmt|;
name|chosenNodes
operator|.
name|add
argument_list|(
name|chosenTarget
operator|.
name|dn
argument_list|)
expr_stmt|;
comment|// TODO: We can increment scheduled block count for this node?
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to choose target datanode for the required"
operator|+
literal|" storage types {}, block:{}, existing storage type:{}"
argument_list|,
name|expected
argument_list|,
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|)
expr_stmt|;
name|sourceNodes
operator|.
name|add
argument_list|(
name|existingTypeNodePair
operator|.
name|dn
argument_list|)
expr_stmt|;
name|sourceStorageTypes
operator|.
name|add
argument_list|(
name|existingTypeNodePair
operator|.
name|storageType
argument_list|)
expr_stmt|;
comment|// Imp: Not setting the target details, empty targets. Later, this is
comment|// used as an indicator for retrying this block movement.
block|}
block|}
name|BlockMovingInfo
name|blkMovingInfo
init|=
operator|new
name|BlockMovingInfo
argument_list|(
name|blockInfo
argument_list|,
name|sourceNodes
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeInfo
index|[
name|sourceNodes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|targetNodes
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeInfo
index|[
name|targetNodes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|sourceStorageTypes
operator|.
name|toArray
argument_list|(
operator|new
name|StorageType
index|[
name|sourceStorageTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|targetStorageTypes
operator|.
name|toArray
argument_list|(
operator|new
name|StorageType
index|[
name|targetStorageTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|blkMovingInfo
return|;
block|}
comment|/**    * Choose the target storage within same datanode if possible.    *    * @param source source datanode    * @param targetTypes list of target storage types    */
DECL|method|chooseTargetTypeInSameNode ( DatanodeDescriptor source, List<StorageType> targetTypes)
specifier|private
name|StorageTypeNodePair
name|chooseTargetTypeInSameNode
parameter_list|(
name|DatanodeDescriptor
name|source
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetTypes
parameter_list|)
block|{
for|for
control|(
name|StorageType
name|t
range|:
name|targetTypes
control|)
block|{
name|DatanodeStorageInfo
name|chooseStorage4Block
init|=
name|source
operator|.
name|chooseStorage4Block
argument_list|(
name|t
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|chooseStorage4Block
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|StorageTypeNodePair
argument_list|(
name|t
argument_list|,
name|source
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|chooseTarget (Block block, DatanodeDescriptor source, List<StorageType> targetTypes, Matcher matcher, StorageTypeNodeMap locsForExpectedStorageTypes, List<DatanodeDescriptor> chosenNodes)
specifier|private
name|StorageTypeNodePair
name|chooseTarget
parameter_list|(
name|Block
name|block
parameter_list|,
name|DatanodeDescriptor
name|source
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetTypes
parameter_list|,
name|Matcher
name|matcher
parameter_list|,
name|StorageTypeNodeMap
name|locsForExpectedStorageTypes
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chosenNodes
parameter_list|)
block|{
for|for
control|(
name|StorageType
name|t
range|:
name|targetTypes
control|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodesWithStorages
init|=
name|locsForExpectedStorageTypes
operator|.
name|getNodesWithStorages
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesWithStorages
operator|==
literal|null
operator|||
name|nodesWithStorages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
comment|// no target nodes with the required storage type.
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodesWithStorages
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|target
range|:
name|nodesWithStorages
control|)
block|{
if|if
condition|(
operator|!
name|chosenNodes
operator|.
name|contains
argument_list|(
name|target
argument_list|)
operator|&&
name|matcher
operator|.
name|match
argument_list|(
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
argument_list|,
name|source
argument_list|,
name|target
argument_list|)
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|target
operator|.
name|chooseStorage4Block
argument_list|(
name|t
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|StorageTypeNodePair
argument_list|(
name|t
argument_list|,
name|target
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|class|StorageTypeNodePair
specifier|private
specifier|static
class|class
name|StorageTypeNodePair
block|{
DECL|field|storageType
specifier|public
name|StorageType
name|storageType
init|=
literal|null
decl_stmt|;
DECL|field|dn
specifier|public
name|DatanodeDescriptor
name|dn
init|=
literal|null
decl_stmt|;
DECL|method|StorageTypeNodePair (StorageType storageType, DatanodeDescriptor dn)
specifier|public
name|StorageTypeNodePair
parameter_list|(
name|StorageType
name|storageType
parameter_list|,
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|this
operator|.
name|storageType
operator|=
name|storageType
expr_stmt|;
name|this
operator|.
name|dn
operator|=
name|dn
expr_stmt|;
block|}
block|}
DECL|method|findTargetsForExpectedStorageTypes ( List<StorageType> expected)
specifier|private
name|StorageTypeNodeMap
name|findTargetsForExpectedStorageTypes
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|expected
parameter_list|)
block|{
name|StorageTypeNodeMap
name|targetMap
init|=
operator|new
name|StorageTypeNodeMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|reports
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeListForReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|reports
control|)
block|{
name|StorageReport
index|[]
name|storageReports
init|=
name|dn
operator|.
name|getStorageReports
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageReport
name|storageReport
range|:
name|storageReports
control|)
block|{
name|StorageType
name|t
init|=
name|storageReport
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
specifier|final
name|long
name|maxRemaining
init|=
name|getMaxRemaining
argument_list|(
name|dn
operator|.
name|getStorageReports
argument_list|()
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxRemaining
operator|>
literal|0L
condition|)
block|{
name|targetMap
operator|.
name|add
argument_list|(
name|t
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|targetMap
return|;
block|}
DECL|method|getMaxRemaining (StorageReport[] storageReports, StorageType t)
specifier|private
specifier|static
name|long
name|getMaxRemaining
parameter_list|(
name|StorageReport
index|[]
name|storageReports
parameter_list|,
name|StorageType
name|t
parameter_list|)
block|{
name|long
name|max
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|StorageReport
name|r
range|:
name|storageReports
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageType
argument_list|()
operator|==
name|t
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getRemaining
argument_list|()
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|r
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|max
return|;
block|}
DECL|class|StorageTypeNodeMap
specifier|private
specifier|static
class|class
name|StorageTypeNodeMap
block|{
DECL|field|typeNodeMap
specifier|private
specifier|final
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|>
name|typeNodeMap
init|=
operator|new
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|add (StorageType t, DatanodeDescriptor dn)
specifier|private
name|void
name|add
parameter_list|(
name|StorageType
name|t
parameter_list|,
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodesWithStorages
init|=
name|getNodesWithStorages
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nodesWithStorages
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
expr_stmt|;
name|value
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|typeNodeMap
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodesWithStorages
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param type      *          - Storage type      * @return datanodes which has the given storage type      */
DECL|method|getNodesWithStorages (StorageType type)
specifier|private
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|getNodesWithStorages
parameter_list|(
name|StorageType
name|type
parameter_list|)
block|{
return|return
name|typeNodeMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
comment|/**    * Receives the movement results of collection of blocks associated to a    * trackId.    *    * @param blksMovementResults    *          movement status of the set of blocks associated to a trackId.    */
DECL|method|handleBlocksStorageMovementResults ( BlocksStorageMovementResult[] blksMovementResults)
name|void
name|handleBlocksStorageMovementResults
parameter_list|(
name|BlocksStorageMovementResult
index|[]
name|blksMovementResults
parameter_list|)
block|{
if|if
condition|(
name|blksMovementResults
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|storageMovementsMonitor
operator|.
name|addResults
argument_list|(
name|blksMovementResults
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAttemptedItemsMonitor ()
name|BlockStorageMovementAttemptedItems
name|getAttemptedItemsMonitor
parameter_list|()
block|{
return|return
name|storageMovementsMonitor
return|;
block|}
comment|/**    * Clear the queues from to be storage movement needed lists and items tracked    * in storage movement monitor.    */
DECL|method|clearQueues ()
specifier|public
name|void
name|clearQueues
parameter_list|()
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Clearing all the queues from StoragePolicySatisfier. So, "
operator|+
literal|"user requests on satisfying block storages would be discarded."
argument_list|)
expr_stmt|;
name|storageMovementNeeded
operator|.
name|clearAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

