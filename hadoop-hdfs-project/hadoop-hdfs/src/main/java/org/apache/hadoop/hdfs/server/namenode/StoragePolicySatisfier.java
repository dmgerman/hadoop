begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|StoragePolicySatisfyPathStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoStriped
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoStriped
operator|.
name|StorageAndBlockIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockStorageMovementCommand
operator|.
name|BlockMovingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksStorageMoveAttemptFinished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Setting storagePolicy on a file after the file write will only update the new  * storage policy type in Namespace, but physical block storage movement will  * not happen until user runs "Mover Tool" explicitly for such files. The  * StoragePolicySatisfier Daemon thread implemented for addressing the case  * where users may want to physically move the blocks by HDFS itself instead of  * running mover tool explicitly. Just calling client API to  * satisfyStoragePolicy on a file/dir will automatically trigger to move its  * physical storage locations as expected in asynchronous manner. Here Namenode  * will pick the file blocks which are expecting to change its storages, then it  * will build the mapping of source block location and expected storage type and  * location to move. After that this class will also prepare commands to send to  * Datanode for processing the physical block movements.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StoragePolicySatisfier
specifier|public
class|class
name|StoragePolicySatisfier
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StoragePolicySatisfier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|storagePolicySatisfierThread
specifier|private
name|Daemon
name|storagePolicySatisfierThread
decl_stmt|;
DECL|field|namesystem
specifier|private
specifier|final
name|Namesystem
name|namesystem
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|storageMovementNeeded
specifier|private
specifier|final
name|BlockStorageMovementNeeded
name|storageMovementNeeded
decl_stmt|;
DECL|field|storageMovementsMonitor
specifier|private
specifier|final
name|BlockStorageMovementAttemptedItems
name|storageMovementsMonitor
decl_stmt|;
DECL|field|isRunning
specifier|private
specifier|volatile
name|boolean
name|isRunning
init|=
literal|false
decl_stmt|;
DECL|field|spsWorkMultiplier
specifier|private
name|int
name|spsWorkMultiplier
decl_stmt|;
DECL|field|blockCount
specifier|private
name|long
name|blockCount
init|=
literal|0L
decl_stmt|;
DECL|field|blockMovementMaxRetry
specifier|private
name|int
name|blockMovementMaxRetry
decl_stmt|;
comment|/**    * Represents the collective analysis status for all blocks.    */
DECL|class|BlocksMovingAnalysis
specifier|private
specifier|static
class|class
name|BlocksMovingAnalysis
block|{
DECL|enum|Status
enum|enum
name|Status
block|{
comment|// Represents that, the analysis skipped due to some conditions. A such
comment|// condition is if block collection is in incomplete state.
DECL|enumConstant|ANALYSIS_SKIPPED_FOR_RETRY
name|ANALYSIS_SKIPPED_FOR_RETRY
block|,
comment|// Represents that few or all blocks found respective target to do
comment|// the storage movement.
DECL|enumConstant|BLOCKS_TARGETS_PAIRED
name|BLOCKS_TARGETS_PAIRED
block|,
comment|// Represents that none of the blocks found respective target to do
comment|// the storage movement.
DECL|enumConstant|NO_BLOCKS_TARGETS_PAIRED
name|NO_BLOCKS_TARGETS_PAIRED
block|,
comment|// Represents that, none of the blocks found for block storage movements.
DECL|enumConstant|BLOCKS_ALREADY_SATISFIED
name|BLOCKS_ALREADY_SATISFIED
block|,
comment|// Represents that, the analysis skipped due to some conditions.
comment|// Example conditions are if no blocks really exists in block collection
comment|// or
comment|// if analysis is not required on ec files with unsuitable storage
comment|// policies
DECL|enumConstant|BLOCKS_TARGET_PAIRING_SKIPPED
name|BLOCKS_TARGET_PAIRING_SKIPPED
block|,
comment|// Represents that, All the reported blocks are satisfied the policy but
comment|// some of the blocks are low redundant.
DECL|enumConstant|FEW_LOW_REDUNDANCY_BLOCKS
name|FEW_LOW_REDUNDANCY_BLOCKS
block|}
DECL|field|status
specifier|private
name|Status
name|status
init|=
literal|null
decl_stmt|;
DECL|field|assignedBlocks
specifier|private
name|List
argument_list|<
name|Block
argument_list|>
name|assignedBlocks
init|=
literal|null
decl_stmt|;
DECL|method|BlocksMovingAnalysis (Status status, List<Block> blockMovingInfo)
name|BlocksMovingAnalysis
parameter_list|(
name|Status
name|status
parameter_list|,
name|List
argument_list|<
name|Block
argument_list|>
name|blockMovingInfo
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|assignedBlocks
operator|=
name|blockMovingInfo
expr_stmt|;
block|}
block|}
DECL|method|StoragePolicySatisfier (final Namesystem namesystem, final BlockManager blkManager, Configuration conf)
specifier|public
name|StoragePolicySatisfier
parameter_list|(
specifier|final
name|Namesystem
name|namesystem
parameter_list|,
specifier|final
name|BlockManager
name|blkManager
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|storageMovementNeeded
operator|=
operator|new
name|BlockStorageMovementNeeded
argument_list|(
name|namesystem
argument_list|,
name|this
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_QUEUE_LIMIT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_QUEUE_LIMIT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockManager
operator|=
name|blkManager
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|=
operator|new
name|BlockStorageMovementAttemptedItems
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_DEFAULT
argument_list|)
argument_list|,
name|storageMovementNeeded
argument_list|)
expr_stmt|;
name|this
operator|.
name|spsWorkMultiplier
operator|=
name|DFSUtil
operator|.
name|getSPSWorkMultiplier
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockMovementMaxRetry
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MAX_RETRY_ATTEMPTS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_STORAGE_POLICY_SATISFIER_MAX_RETRY_ATTEMPTS_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start storage policy satisfier demon thread. Also start block storage    * movements monitor for retry the attempts if needed.    */
DECL|method|start (boolean reconfigStart)
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|(
name|boolean
name|reconfigStart
parameter_list|)
block|{
name|isRunning
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|checkIfMoverRunning
argument_list|()
condition|)
block|{
name|isRunning
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Stopping StoragePolicySatisfier thread "
operator|+
literal|"as Mover ID file "
operator|+
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
operator|.
name|toString
argument_list|()
operator|+
literal|" been opened. Maybe a Mover instance is running!"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|reconfigStart
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting StoragePolicySatisfier, as admin requested to "
operator|+
literal|"start it."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting StoragePolicySatisfier."
argument_list|)
expr_stmt|;
block|}
comment|// Ensure that all the previously submitted block movements(if any) have to
comment|// be stopped in all datanodes.
name|addDropSPSWorkCommandsToAllDNs
argument_list|()
expr_stmt|;
name|storageMovementNeeded
operator|.
name|init
argument_list|()
expr_stmt|;
name|storagePolicySatisfierThread
operator|=
operator|new
name|Daemon
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|storagePolicySatisfierThread
operator|.
name|setName
argument_list|(
literal|"StoragePolicySatisfier"
argument_list|)
expr_stmt|;
name|storagePolicySatisfierThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Disables storage policy satisfier by stopping its services.    *    * @param forceStop    *          true represents that it should stop SPS service by clearing all    *          pending SPS work    */
DECL|method|disable (boolean forceStop)
specifier|public
specifier|synchronized
name|void
name|disable
parameter_list|(
name|boolean
name|forceStop
parameter_list|)
block|{
name|isRunning
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|storagePolicySatisfierThread
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|storageMovementNeeded
operator|.
name|close
argument_list|()
expr_stmt|;
name|storagePolicySatisfierThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|forceStop
condition|)
block|{
name|storageMovementNeeded
operator|.
name|clearQueuesWithNotification
argument_list|()
expr_stmt|;
name|addDropSPSWorkCommandsToAllDNs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping StoragePolicySatisfier."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Timed wait to stop storage policy satisfier daemon threads.    */
DECL|method|stopGracefully ()
specifier|public
specifier|synchronized
name|void
name|stopGracefully
parameter_list|()
block|{
if|if
condition|(
name|isRunning
condition|)
block|{
name|disable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
if|if
condition|(
name|storagePolicySatisfierThread
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|storagePolicySatisfierThread
operator|.
name|join
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{     }
block|}
comment|/**    * Check whether StoragePolicySatisfier is running.    * @return true if running    */
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|isRunning
return|;
block|}
comment|// Return true if a Mover instance is running
DECL|method|checkIfMoverRunning ()
specifier|private
name|boolean
name|checkIfMoverRunning
parameter_list|()
block|{
name|String
name|moverId
init|=
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|namesystem
operator|.
name|isFileOpenedForWrite
argument_list|(
name|moverId
argument_list|)
return|;
block|}
comment|/**    * Adding drop commands to all datanodes to stop performing the satisfier    * block movements, if any.    */
DECL|method|addDropSPSWorkCommandsToAllDNs ()
specifier|private
name|void
name|addDropSPSWorkCommandsToAllDNs
parameter_list|()
block|{
name|this
operator|.
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|addDropSPSWorkCommandsToAllDNs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|namesystem
operator|.
name|isRunning
argument_list|()
operator|&&
name|isRunning
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|namesystem
operator|.
name|isInSafeMode
argument_list|()
condition|)
block|{
name|ItemInfo
name|itemInfo
init|=
name|storageMovementNeeded
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|itemInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|itemInfo
operator|.
name|getRetryCount
argument_list|()
operator|>=
name|blockMovementMaxRetry
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to satisfy the policy after "
operator|+
name|blockMovementMaxRetry
operator|+
literal|" retries. Removing inode "
operator|+
name|itemInfo
operator|.
name|getTrackId
argument_list|()
operator|+
literal|" from the queue"
argument_list|)
expr_stmt|;
name|storageMovementNeeded
operator|.
name|removeItemTrackInfo
argument_list|(
name|itemInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|long
name|trackId
init|=
name|itemInfo
operator|.
name|getTrackId
argument_list|()
decl_stmt|;
name|BlockCollection
name|blockCollection
decl_stmt|;
name|BlocksMovingAnalysis
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|blockCollection
operator|=
name|namesystem
operator|.
name|getBlockCollection
argument_list|(
name|trackId
argument_list|)
expr_stmt|;
comment|// Check blockCollectionId existence.
if|if
condition|(
name|blockCollection
operator|==
literal|null
condition|)
block|{
comment|// File doesn't exists (maybe got deleted), remove trackId from
comment|// the queue
name|storageMovementNeeded
operator|.
name|removeItemTrackInfo
argument_list|(
name|itemInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
name|analyseBlocksStorageMovementsAndAssignToDN
argument_list|(
name|blockCollection
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|namesystem
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blockCollection
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|status
operator|.
name|status
condition|)
block|{
comment|// Just add to monitor, so it will be retried after timeout
case|case
name|ANALYSIS_SKIPPED_FOR_RETRY
case|:
comment|// Just add to monitor, so it will be tracked for report and
comment|// be removed on storage movement attempt finished report.
case|case
name|BLOCKS_TARGETS_PAIRED
case|:
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|add
argument_list|(
operator|new
name|AttemptedItemInfo
argument_list|(
name|itemInfo
operator|.
name|getStartId
argument_list|()
argument_list|,
name|itemInfo
operator|.
name|getTrackId
argument_list|()
argument_list|,
name|monotonicNow
argument_list|()
argument_list|,
name|status
operator|.
name|assignedBlocks
argument_list|,
name|itemInfo
operator|.
name|getRetryCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|NO_BLOCKS_TARGETS_PAIRED
case|:
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding trackID "
operator|+
name|trackId
operator|+
literal|" back to retry queue as none of the blocks"
operator|+
literal|" found its eligible targets."
argument_list|)
expr_stmt|;
block|}
name|itemInfo
operator|.
name|retryCount
operator|++
expr_stmt|;
name|this
operator|.
name|storageMovementNeeded
operator|.
name|add
argument_list|(
name|itemInfo
argument_list|)
expr_stmt|;
break|break;
case|case
name|FEW_LOW_REDUNDANCY_BLOCKS
case|:
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding trackID "
operator|+
name|trackId
operator|+
literal|" back to retry queue as some of the blocks"
operator|+
literal|" are low redundant."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storageMovementNeeded
operator|.
name|add
argument_list|(
name|itemInfo
argument_list|)
expr_stmt|;
break|break;
comment|// Just clean Xattrs
case|case
name|BLOCKS_TARGET_PAIRING_SKIPPED
case|:
case|case
name|BLOCKS_ALREADY_SATISFIED
case|:
default|default:
name|LOG
operator|.
name|info
argument_list|(
literal|"Block analysis skipped or blocks already satisfied"
operator|+
literal|" with storages. So, Cleaning up the Xattrs."
argument_list|)
expr_stmt|;
name|storageMovementNeeded
operator|.
name|removeItemTrackInfo
argument_list|(
name|itemInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|int
name|numLiveDn
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumLiveDataNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageMovementNeeded
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|blockCount
operator|>
operator|(
name|numLiveDn
operator|*
name|spsWorkMultiplier
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|blockCount
operator|=
literal|0L
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handleException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleException (Throwable t)
specifier|private
name|void
name|handleException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// double check to avoid entering into synchronized block.
if|if
condition|(
name|isRunning
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|isRunning
condition|)
block|{
name|isRunning
operator|=
literal|false
expr_stmt|;
comment|// Stopping monitor thread and clearing queues as well
name|this
operator|.
name|clearQueues
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageMovementsMonitor
operator|.
name|stopGracefully
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|namesystem
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping StoragePolicySatisfier."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|InterruptedException
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"StoragePolicySatisfier received an exception"
operator|+
literal|" while shutting down."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"StoragePolicySatisfier thread received runtime exception. "
operator|+
literal|"Stopping Storage policy satisfier work"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return;
block|}
DECL|method|analyseBlocksStorageMovementsAndAssignToDN ( BlockCollection blockCollection)
specifier|private
name|BlocksMovingAnalysis
name|analyseBlocksStorageMovementsAndAssignToDN
parameter_list|(
name|BlockCollection
name|blockCollection
parameter_list|)
block|{
name|BlocksMovingAnalysis
operator|.
name|Status
name|status
init|=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_ALREADY_SATISFIED
decl_stmt|;
name|byte
name|existingStoragePolicyID
init|=
name|blockCollection
operator|.
name|getStoragePolicyID
argument_list|()
decl_stmt|;
name|BlockStoragePolicy
name|existingStoragePolicy
init|=
name|blockManager
operator|.
name|getStoragePolicy
argument_list|(
name|existingStoragePolicyID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|blockCollection
operator|.
name|getLastBlock
argument_list|()
operator|.
name|isComplete
argument_list|()
condition|)
block|{
comment|// Postpone, currently file is under construction
comment|// So, should we add back? or leave it to user
name|LOG
operator|.
name|info
argument_list|(
literal|"BlockCollectionID: {} file is under construction. So, postpone"
operator|+
literal|" this to the next retry iteration"
argument_list|,
name|blockCollection
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|BlocksMovingAnalysis
argument_list|(
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|ANALYSIS_SKIPPED_FOR_RETRY
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
name|BlockInfo
index|[]
name|blocks
init|=
name|blockCollection
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|blocks
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"BlockCollectionID: {} file is not having any blocks."
operator|+
literal|" So, skipping the analysis."
argument_list|,
name|blockCollection
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|BlocksMovingAnalysis
argument_list|(
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_TARGET_PAIRING_SKIPPED
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockMovingInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BlockInfo
name|blockInfo
init|=
name|blocks
index|[
name|i
index|]
decl_stmt|;
name|List
argument_list|<
name|StorageType
argument_list|>
name|expectedStorageTypes
decl_stmt|;
if|if
condition|(
name|blockInfo
operator|.
name|isStriped
argument_list|()
condition|)
block|{
if|if
condition|(
name|ErasureCodingPolicyManager
operator|.
name|checkStoragePolicySuitableForECStripedMode
argument_list|(
name|existingStoragePolicyID
argument_list|)
condition|)
block|{
name|expectedStorageTypes
operator|=
name|existingStoragePolicy
operator|.
name|chooseStorageTypes
argument_list|(
operator|(
name|short
operator|)
name|blockInfo
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Currently we support only limited policies (HOT, COLD, ALLSSD)
comment|// for EC striped mode files. SPS will ignore to move the blocks if
comment|// the storage policy is not in EC Striped mode supported policies
name|LOG
operator|.
name|warn
argument_list|(
literal|"The storage policy "
operator|+
name|existingStoragePolicy
operator|.
name|getName
argument_list|()
operator|+
literal|" is not suitable for Striped EC files. "
operator|+
literal|"So, ignoring to move the blocks"
argument_list|)
expr_stmt|;
return|return
operator|new
name|BlocksMovingAnalysis
argument_list|(
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_TARGET_PAIRING_SKIPPED
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|expectedStorageTypes
operator|=
name|existingStoragePolicy
operator|.
name|chooseStorageTypes
argument_list|(
name|blockInfo
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DatanodeStorageInfo
index|[]
name|storages
init|=
name|blockManager
operator|.
name|getStorages
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
name|StorageType
index|[]
name|storageTypes
init|=
operator|new
name|StorageType
index|[
name|storages
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|storages
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|DatanodeStorageInfo
name|datanodeStorageInfo
init|=
name|storages
index|[
name|j
index|]
decl_stmt|;
name|StorageType
name|storageType
init|=
name|datanodeStorageInfo
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
name|storageTypes
index|[
name|j
index|]
operator|=
name|storageType
expr_stmt|;
block|}
name|List
argument_list|<
name|StorageType
argument_list|>
name|existing
init|=
operator|new
name|LinkedList
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|storageTypes
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|removeOverlapBetweenStorageTypes
argument_list|(
name|expectedStorageTypes
argument_list|,
name|existing
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|boolean
name|blocksPaired
init|=
name|computeBlockMovingInfos
argument_list|(
name|blockMovingInfos
argument_list|,
name|blockInfo
argument_list|,
name|expectedStorageTypes
argument_list|,
name|existing
argument_list|,
name|storages
argument_list|)
decl_stmt|;
if|if
condition|(
name|blocksPaired
condition|)
block|{
name|status
operator|=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|BLOCKS_TARGETS_PAIRED
expr_stmt|;
block|}
else|else
block|{
comment|// none of the blocks found its eligible targets for satisfying the
comment|// storage policy.
name|status
operator|=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|NO_BLOCKS_TARGETS_PAIRED
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|blockManager
operator|.
name|hasLowRedundancyBlocks
argument_list|(
name|blockCollection
argument_list|)
condition|)
block|{
name|status
operator|=
name|BlocksMovingAnalysis
operator|.
name|Status
operator|.
name|FEW_LOW_REDUNDANCY_BLOCKS
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|Block
argument_list|>
name|assignedBlockIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Block
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockMovingInfo
name|blkMovingInfo
range|:
name|blockMovingInfos
control|)
block|{
comment|// Check for at least one block storage movement has been chosen
if|if
condition|(
name|blkMovingInfo
operator|.
name|getTarget
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// assign block storage movement task to the target node
operator|(
operator|(
name|DatanodeDescriptor
operator|)
name|blkMovingInfo
operator|.
name|getTarget
argument_list|()
operator|)
operator|.
name|addBlocksToMoveStorage
argument_list|(
name|blkMovingInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"BlockMovingInfo: {}"
argument_list|,
name|blkMovingInfo
argument_list|)
expr_stmt|;
name|assignedBlockIds
operator|.
name|add
argument_list|(
name|blkMovingInfo
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|blockCount
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BlocksMovingAnalysis
argument_list|(
name|status
argument_list|,
name|assignedBlockIds
argument_list|)
return|;
block|}
comment|/**    * Compute the list of block moving information corresponding to the given    * blockId. This will check that each block location of the given block is    * satisfying the expected storage policy. If block location is not satisfied    * the policy then find out the target node with the expected storage type to    * satisfy the storage policy.    *    * @param blockMovingInfos    *          - list of block source and target node pair    * @param blockInfo    *          - block details    * @param expectedStorageTypes    *          - list of expected storage type to satisfy the storage policy    * @param existing    *          - list to get existing storage types    * @param storages    *          - available storages    * @return false if some of the block locations failed to find target node to    *         satisfy the storage policy, true otherwise    */
DECL|method|computeBlockMovingInfos ( List<BlockMovingInfo> blockMovingInfos, BlockInfo blockInfo, List<StorageType> expectedStorageTypes, List<StorageType> existing, DatanodeStorageInfo[] storages)
specifier|private
name|boolean
name|computeBlockMovingInfos
parameter_list|(
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
parameter_list|,
name|BlockInfo
name|blockInfo
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|expectedStorageTypes
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|existing
parameter_list|,
name|DatanodeStorageInfo
index|[]
name|storages
parameter_list|)
block|{
name|boolean
name|foundMatchingTargetNodesForBlock
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|removeOverlapBetweenStorageTypes
argument_list|(
name|expectedStorageTypes
argument_list|,
name|existing
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|StorageTypeNodePair
argument_list|>
name|sourceWithStorageMap
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageTypeNodePair
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|existingBlockStorages
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeStorageInfo
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|storages
argument_list|)
argument_list|)
decl_stmt|;
comment|// if expected type exists in source node already, local movement would be
comment|// possible, so lets find such sources first.
name|Iterator
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|iterator
init|=
name|existingBlockStorages
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeStorageInfo
name|datanodeStorageInfo
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkSourceAndTargetTypeExists
argument_list|(
name|datanodeStorageInfo
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|,
name|existing
argument_list|,
name|expectedStorageTypes
argument_list|)
condition|)
block|{
name|sourceWithStorageMap
operator|.
name|add
argument_list|(
operator|new
name|StorageTypeNodePair
argument_list|(
name|datanodeStorageInfo
operator|.
name|getStorageType
argument_list|()
argument_list|,
name|datanodeStorageInfo
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|existing
operator|.
name|remove
argument_list|(
name|datanodeStorageInfo
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Let's find sources for existing types left.
for|for
control|(
name|StorageType
name|existingType
range|:
name|existing
control|)
block|{
name|iterator
operator|=
name|existingBlockStorages
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeStorageInfo
name|datanodeStorageInfo
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|StorageType
name|storageType
init|=
name|datanodeStorageInfo
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageType
operator|==
name|existingType
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
name|sourceWithStorageMap
operator|.
name|add
argument_list|(
operator|new
name|StorageTypeNodePair
argument_list|(
name|storageType
argument_list|,
name|datanodeStorageInfo
operator|.
name|getDatanodeDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|StorageTypeNodeMap
name|locsForExpectedStorageTypes
init|=
name|findTargetsForExpectedStorageTypes
argument_list|(
name|expectedStorageTypes
argument_list|)
decl_stmt|;
name|foundMatchingTargetNodesForBlock
operator||=
name|findSourceAndTargetToMove
argument_list|(
name|blockMovingInfos
argument_list|,
name|blockInfo
argument_list|,
name|sourceWithStorageMap
argument_list|,
name|expectedStorageTypes
argument_list|,
name|locsForExpectedStorageTypes
argument_list|)
expr_stmt|;
block|}
return|return
name|foundMatchingTargetNodesForBlock
return|;
block|}
comment|/**    * Find the good target node for each source node for which block storages was    * misplaced.    *    * @param blockMovingInfos    *          - list of block source and target node pair    * @param blockInfo    *          - Block    * @param sourceWithStorageList    *          - Source Datanode with storages list    * @param expected    *          - Expecting storages to move    * @param locsForExpectedStorageTypes    *          - Available DNs for expected storage types    * @return false if some of the block locations failed to find target node to    *         satisfy the storage policy    */
DECL|method|findSourceAndTargetToMove ( List<BlockMovingInfo> blockMovingInfos, BlockInfo blockInfo, List<StorageTypeNodePair> sourceWithStorageList, List<StorageType> expected, StorageTypeNodeMap locsForExpectedStorageTypes)
specifier|private
name|boolean
name|findSourceAndTargetToMove
parameter_list|(
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
parameter_list|,
name|BlockInfo
name|blockInfo
parameter_list|,
name|List
argument_list|<
name|StorageTypeNodePair
argument_list|>
name|sourceWithStorageList
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|expected
parameter_list|,
name|StorageTypeNodeMap
name|locsForExpectedStorageTypes
parameter_list|)
block|{
name|boolean
name|foundMatchingTargetNodesForBlock
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|excludeNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Looping over all the source node locations and choose the target
comment|// storage within same node if possible. This is done separately to
comment|// avoid choosing a target which already has this block.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceWithStorageList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StorageTypeNodePair
name|existingTypeNodePair
init|=
name|sourceWithStorageList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Check whether the block replica is already placed in the expected
comment|// storage type in this source datanode.
if|if
condition|(
operator|!
name|expected
operator|.
name|contains
argument_list|(
name|existingTypeNodePair
operator|.
name|storageType
argument_list|)
condition|)
block|{
name|StorageTypeNodePair
name|chosenTarget
init|=
name|chooseTargetTypeInSameNode
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expected
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenTarget
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|blockInfo
operator|.
name|isStriped
argument_list|()
condition|)
block|{
name|buildStripedBlockMovingInfos
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|,
name|chosenTarget
operator|.
name|dn
argument_list|,
name|chosenTarget
operator|.
name|storageType
argument_list|,
name|blockMovingInfos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buildContinuousBlockMovingInfos
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|,
name|chosenTarget
operator|.
name|dn
argument_list|,
name|chosenTarget
operator|.
name|storageType
argument_list|,
name|blockMovingInfos
argument_list|)
expr_stmt|;
block|}
name|expected
operator|.
name|remove
argument_list|(
name|chosenTarget
operator|.
name|storageType
argument_list|)
expr_stmt|;
comment|// TODO: We can increment scheduled block count for this node?
block|}
block|}
comment|// To avoid choosing this excludeNodes as targets later
name|excludeNodes
operator|.
name|add
argument_list|(
name|existingTypeNodePair
operator|.
name|dn
argument_list|)
expr_stmt|;
block|}
comment|// Looping over all the source node locations. Choose a remote target
comment|// storage node if it was not found out within same node.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceWithStorageList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StorageTypeNodePair
name|existingTypeNodePair
init|=
name|sourceWithStorageList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StorageTypeNodePair
name|chosenTarget
init|=
literal|null
decl_stmt|;
comment|// Chosen the target storage within same datanode. So just skipping this
comment|// source node.
if|if
condition|(
name|checkIfAlreadyChosen
argument_list|(
name|blockMovingInfos
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|chosenTarget
operator|==
literal|null
operator|&&
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
operator|.
name|isNodeGroupAware
argument_list|()
condition|)
block|{
name|chosenTarget
operator|=
name|chooseTarget
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expected
argument_list|,
name|Matcher
operator|.
name|SAME_NODE_GROUP
argument_list|,
name|locsForExpectedStorageTypes
argument_list|,
name|excludeNodes
argument_list|)
expr_stmt|;
block|}
comment|// Then, match nodes on the same rack
if|if
condition|(
name|chosenTarget
operator|==
literal|null
condition|)
block|{
name|chosenTarget
operator|=
name|chooseTarget
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expected
argument_list|,
name|Matcher
operator|.
name|SAME_RACK
argument_list|,
name|locsForExpectedStorageTypes
argument_list|,
name|excludeNodes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chosenTarget
operator|==
literal|null
condition|)
block|{
name|chosenTarget
operator|=
name|chooseTarget
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|expected
argument_list|,
name|Matcher
operator|.
name|ANY_OTHER
argument_list|,
name|locsForExpectedStorageTypes
argument_list|,
name|excludeNodes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|chosenTarget
condition|)
block|{
if|if
condition|(
name|blockInfo
operator|.
name|isStriped
argument_list|()
condition|)
block|{
name|buildStripedBlockMovingInfos
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|,
name|chosenTarget
operator|.
name|dn
argument_list|,
name|chosenTarget
operator|.
name|storageType
argument_list|,
name|blockMovingInfos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buildContinuousBlockMovingInfos
argument_list|(
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|dn
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|,
name|chosenTarget
operator|.
name|dn
argument_list|,
name|chosenTarget
operator|.
name|storageType
argument_list|,
name|blockMovingInfos
argument_list|)
expr_stmt|;
block|}
name|expected
operator|.
name|remove
argument_list|(
name|chosenTarget
operator|.
name|storageType
argument_list|)
expr_stmt|;
name|excludeNodes
operator|.
name|add
argument_list|(
name|chosenTarget
operator|.
name|dn
argument_list|)
expr_stmt|;
comment|// TODO: We can increment scheduled block count for this node?
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to choose target datanode for the required"
operator|+
literal|" storage types {}, block:{}, existing storage type:{}"
argument_list|,
name|expected
argument_list|,
name|blockInfo
argument_list|,
name|existingTypeNodePair
operator|.
name|storageType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expected
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|foundMatchingTargetNodesForBlock
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|foundMatchingTargetNodesForBlock
return|;
block|}
DECL|method|checkIfAlreadyChosen (List<BlockMovingInfo> blockMovingInfos, DatanodeDescriptor dn)
specifier|private
name|boolean
name|checkIfAlreadyChosen
parameter_list|(
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
parameter_list|,
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
for|for
control|(
name|BlockMovingInfo
name|blockMovingInfo
range|:
name|blockMovingInfos
control|)
block|{
if|if
condition|(
name|blockMovingInfo
operator|.
name|getSource
argument_list|()
operator|.
name|equals
argument_list|(
name|dn
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|buildContinuousBlockMovingInfos (BlockInfo blockInfo, DatanodeInfo sourceNode, StorageType sourceStorageType, DatanodeInfo targetNode, StorageType targetStorageType, List<BlockMovingInfo> blkMovingInfos)
specifier|private
name|void
name|buildContinuousBlockMovingInfos
parameter_list|(
name|BlockInfo
name|blockInfo
parameter_list|,
name|DatanodeInfo
name|sourceNode
parameter_list|,
name|StorageType
name|sourceStorageType
parameter_list|,
name|DatanodeInfo
name|targetNode
parameter_list|,
name|StorageType
name|targetStorageType
parameter_list|,
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blkMovingInfos
parameter_list|)
block|{
name|Block
name|blk
init|=
operator|new
name|Block
argument_list|(
name|blockInfo
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|blockInfo
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|blockInfo
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
decl_stmt|;
name|BlockMovingInfo
name|blkMovingInfo
init|=
operator|new
name|BlockMovingInfo
argument_list|(
name|blk
argument_list|,
name|sourceNode
argument_list|,
name|targetNode
argument_list|,
name|sourceStorageType
argument_list|,
name|targetStorageType
argument_list|)
decl_stmt|;
name|blkMovingInfos
operator|.
name|add
argument_list|(
name|blkMovingInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|buildStripedBlockMovingInfos (BlockInfo blockInfo, DatanodeInfo sourceNode, StorageType sourceStorageType, DatanodeInfo targetNode, StorageType targetStorageType, List<BlockMovingInfo> blkMovingInfos)
specifier|private
name|void
name|buildStripedBlockMovingInfos
parameter_list|(
name|BlockInfo
name|blockInfo
parameter_list|,
name|DatanodeInfo
name|sourceNode
parameter_list|,
name|StorageType
name|sourceStorageType
parameter_list|,
name|DatanodeInfo
name|targetNode
parameter_list|,
name|StorageType
name|targetStorageType
parameter_list|,
name|List
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blkMovingInfos
parameter_list|)
block|{
comment|// For a striped block, it needs to construct internal block at the given
comment|// index of a block group. Here it is iterating over all the block indices
comment|// and construct internal blocks which can be then considered for block
comment|// movement.
name|BlockInfoStriped
name|sBlockInfo
init|=
operator|(
name|BlockInfoStriped
operator|)
name|blockInfo
decl_stmt|;
for|for
control|(
name|StorageAndBlockIndex
name|si
range|:
name|sBlockInfo
operator|.
name|getStorageAndIndexInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|si
operator|.
name|getBlockIndex
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|DatanodeDescriptor
name|dn
init|=
name|si
operator|.
name|getStorage
argument_list|()
operator|.
name|getDatanodeDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceNode
operator|.
name|equals
argument_list|(
name|dn
argument_list|)
condition|)
block|{
comment|// construct internal block
name|long
name|blockId
init|=
name|blockInfo
operator|.
name|getBlockId
argument_list|()
operator|+
name|si
operator|.
name|getBlockIndex
argument_list|()
decl_stmt|;
name|long
name|numBytes
init|=
name|StripedBlockUtil
operator|.
name|getInternalBlockLength
argument_list|(
name|sBlockInfo
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|sBlockInfo
operator|.
name|getCellSize
argument_list|()
argument_list|,
name|sBlockInfo
operator|.
name|getDataBlockNum
argument_list|()
argument_list|,
name|si
operator|.
name|getBlockIndex
argument_list|()
argument_list|)
decl_stmt|;
name|Block
name|blk
init|=
operator|new
name|Block
argument_list|(
name|blockId
argument_list|,
name|numBytes
argument_list|,
name|blockInfo
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
decl_stmt|;
name|BlockMovingInfo
name|blkMovingInfo
init|=
operator|new
name|BlockMovingInfo
argument_list|(
name|blk
argument_list|,
name|sourceNode
argument_list|,
name|targetNode
argument_list|,
name|sourceStorageType
argument_list|,
name|targetStorageType
argument_list|)
decl_stmt|;
name|blkMovingInfos
operator|.
name|add
argument_list|(
name|blkMovingInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Choose the target storage within same datanode if possible.    *    * @param block    *          - block info    * @param source    *          - source datanode    * @param targetTypes    *          - list of target storage types    */
DECL|method|chooseTargetTypeInSameNode (Block block, DatanodeDescriptor source, List<StorageType> targetTypes)
specifier|private
name|StorageTypeNodePair
name|chooseTargetTypeInSameNode
parameter_list|(
name|Block
name|block
parameter_list|,
name|DatanodeDescriptor
name|source
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetTypes
parameter_list|)
block|{
for|for
control|(
name|StorageType
name|t
range|:
name|targetTypes
control|)
block|{
name|DatanodeStorageInfo
name|chooseStorage4Block
init|=
name|source
operator|.
name|chooseStorage4Block
argument_list|(
name|t
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|chooseStorage4Block
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|StorageTypeNodePair
argument_list|(
name|t
argument_list|,
name|source
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|chooseTarget (Block block, DatanodeDescriptor source, List<StorageType> targetTypes, Matcher matcher, StorageTypeNodeMap locsForExpectedStorageTypes, List<DatanodeDescriptor> excludeNodes)
specifier|private
name|StorageTypeNodePair
name|chooseTarget
parameter_list|(
name|Block
name|block
parameter_list|,
name|DatanodeDescriptor
name|source
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|targetTypes
parameter_list|,
name|Matcher
name|matcher
parameter_list|,
name|StorageTypeNodeMap
name|locsForExpectedStorageTypes
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|excludeNodes
parameter_list|)
block|{
for|for
control|(
name|StorageType
name|t
range|:
name|targetTypes
control|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodesWithStorages
init|=
name|locsForExpectedStorageTypes
operator|.
name|getNodesWithStorages
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesWithStorages
operator|==
literal|null
operator|||
name|nodesWithStorages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
comment|// no target nodes with the required storage type.
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodesWithStorages
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|target
range|:
name|nodesWithStorages
control|)
block|{
if|if
condition|(
operator|!
name|excludeNodes
operator|.
name|contains
argument_list|(
name|target
argument_list|)
operator|&&
name|matcher
operator|.
name|match
argument_list|(
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
argument_list|,
name|source
argument_list|,
name|target
argument_list|)
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|target
operator|.
name|chooseStorage4Block
argument_list|(
name|t
argument_list|,
name|block
operator|.
name|getNumBytes
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|StorageTypeNodePair
argument_list|(
name|t
argument_list|,
name|target
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|class|StorageTypeNodePair
specifier|private
specifier|static
class|class
name|StorageTypeNodePair
block|{
DECL|field|storageType
specifier|private
name|StorageType
name|storageType
init|=
literal|null
decl_stmt|;
DECL|field|dn
specifier|private
name|DatanodeDescriptor
name|dn
init|=
literal|null
decl_stmt|;
DECL|method|StorageTypeNodePair (StorageType storageType, DatanodeDescriptor dn)
name|StorageTypeNodePair
parameter_list|(
name|StorageType
name|storageType
parameter_list|,
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|this
operator|.
name|storageType
operator|=
name|storageType
expr_stmt|;
name|this
operator|.
name|dn
operator|=
name|dn
expr_stmt|;
block|}
block|}
DECL|method|findTargetsForExpectedStorageTypes ( List<StorageType> expected)
specifier|private
name|StorageTypeNodeMap
name|findTargetsForExpectedStorageTypes
parameter_list|(
name|List
argument_list|<
name|StorageType
argument_list|>
name|expected
parameter_list|)
block|{
name|StorageTypeNodeMap
name|targetMap
init|=
operator|new
name|StorageTypeNodeMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|reports
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeListForReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|reports
control|)
block|{
name|StorageReport
index|[]
name|storageReports
init|=
name|dn
operator|.
name|getStorageReports
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageReport
name|storageReport
range|:
name|storageReports
control|)
block|{
name|StorageType
name|t
init|=
name|storageReport
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
specifier|final
name|long
name|maxRemaining
init|=
name|getMaxRemaining
argument_list|(
name|dn
operator|.
name|getStorageReports
argument_list|()
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxRemaining
operator|>
literal|0L
condition|)
block|{
name|targetMap
operator|.
name|add
argument_list|(
name|t
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|targetMap
return|;
block|}
DECL|method|getMaxRemaining (StorageReport[] storageReports, StorageType t)
specifier|private
specifier|static
name|long
name|getMaxRemaining
parameter_list|(
name|StorageReport
index|[]
name|storageReports
parameter_list|,
name|StorageType
name|t
parameter_list|)
block|{
name|long
name|max
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|StorageReport
name|r
range|:
name|storageReports
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageType
argument_list|()
operator|==
name|t
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getRemaining
argument_list|()
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|r
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|max
return|;
block|}
DECL|method|checkSourceAndTargetTypeExists (DatanodeDescriptor dn, List<StorageType> existing, List<StorageType> expectedStorageTypes)
specifier|private
name|boolean
name|checkSourceAndTargetTypeExists
parameter_list|(
name|DatanodeDescriptor
name|dn
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|existing
parameter_list|,
name|List
argument_list|<
name|StorageType
argument_list|>
name|expectedStorageTypes
parameter_list|)
block|{
name|DatanodeStorageInfo
index|[]
name|allDNStorageInfos
init|=
name|dn
operator|.
name|getStorageInfos
argument_list|()
decl_stmt|;
name|boolean
name|isExpectedTypeAvailable
init|=
literal|false
decl_stmt|;
name|boolean
name|isExistingTypeAvailable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatanodeStorageInfo
name|dnInfo
range|:
name|allDNStorageInfos
control|)
block|{
name|StorageType
name|storageType
init|=
name|dnInfo
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
if|if
condition|(
name|existing
operator|.
name|contains
argument_list|(
name|storageType
argument_list|)
condition|)
block|{
name|isExistingTypeAvailable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|expectedStorageTypes
operator|.
name|contains
argument_list|(
name|storageType
argument_list|)
condition|)
block|{
name|isExpectedTypeAvailable
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|isExistingTypeAvailable
operator|&&
name|isExpectedTypeAvailable
return|;
block|}
DECL|class|StorageTypeNodeMap
specifier|private
specifier|static
class|class
name|StorageTypeNodeMap
block|{
DECL|field|typeNodeMap
specifier|private
specifier|final
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|>
name|typeNodeMap
init|=
operator|new
name|EnumMap
argument_list|<
name|StorageType
argument_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|add (StorageType t, DatanodeDescriptor dn)
specifier|private
name|void
name|add
parameter_list|(
name|StorageType
name|t
parameter_list|,
name|DatanodeDescriptor
name|dn
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodesWithStorages
init|=
name|getNodesWithStorages
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nodesWithStorages
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
expr_stmt|;
name|value
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|typeNodeMap
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodesWithStorages
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param type      *          - Storage type      * @return datanodes which has the given storage type      */
DECL|method|getNodesWithStorages (StorageType type)
specifier|private
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|getNodesWithStorages
parameter_list|(
name|StorageType
name|type
parameter_list|)
block|{
return|return
name|typeNodeMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
comment|/**    * Receives set of storage movement attempt finished blocks report.    *    * @param moveAttemptFinishedBlks    *          set of storage movement attempt finished blocks.    */
DECL|method|handleStorageMovementAttemptFinishedBlks ( BlocksStorageMoveAttemptFinished moveAttemptFinishedBlks)
name|void
name|handleStorageMovementAttemptFinishedBlks
parameter_list|(
name|BlocksStorageMoveAttemptFinished
name|moveAttemptFinishedBlks
parameter_list|)
block|{
if|if
condition|(
name|moveAttemptFinishedBlks
operator|.
name|getBlocks
argument_list|()
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|storageMovementsMonitor
operator|.
name|addReportedMovedBlocks
argument_list|(
name|moveAttemptFinishedBlks
operator|.
name|getBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAttemptedItemsMonitor ()
name|BlockStorageMovementAttemptedItems
name|getAttemptedItemsMonitor
parameter_list|()
block|{
return|return
name|storageMovementsMonitor
return|;
block|}
comment|/**    * Clear the queues from to be storage movement needed lists and items tracked    * in storage movement monitor.    */
DECL|method|clearQueues ()
specifier|public
name|void
name|clearQueues
parameter_list|()
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Clearing all the queues from StoragePolicySatisfier. So, "
operator|+
literal|"user requests on satisfying block storages would be discarded."
argument_list|)
expr_stmt|;
name|storageMovementNeeded
operator|.
name|clearAll
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set file inode in queue for which storage movement needed for its blocks.    *    * @param inodeId    *          - file inode/blockcollection id.    */
DECL|method|satisfyStoragePolicy (Long inodeId)
specifier|public
name|void
name|satisfyStoragePolicy
parameter_list|(
name|Long
name|inodeId
parameter_list|)
block|{
comment|//For file startId and trackId is same
name|storageMovementNeeded
operator|.
name|add
argument_list|(
operator|new
name|ItemInfo
argument_list|(
name|inodeId
argument_list|,
name|inodeId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added track info for inode {} to block "
operator|+
literal|"storageMovementNeeded queue"
argument_list|,
name|inodeId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addInodeToPendingDirQueue (long id)
specifier|public
name|void
name|addInodeToPendingDirQueue
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|storageMovementNeeded
operator|.
name|addToPendingDirQueue
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear queues for given track id.    */
DECL|method|clearQueue (long trackId)
specifier|public
name|void
name|clearQueue
parameter_list|(
name|long
name|trackId
parameter_list|)
block|{
name|storageMovementNeeded
operator|.
name|clearQueue
argument_list|(
name|trackId
argument_list|)
expr_stmt|;
block|}
comment|/**    * ItemInfo is a file info object for which need to satisfy the    * policy.    */
DECL|class|ItemInfo
specifier|public
specifier|static
class|class
name|ItemInfo
block|{
DECL|field|startId
specifier|private
name|long
name|startId
decl_stmt|;
DECL|field|trackId
specifier|private
name|long
name|trackId
decl_stmt|;
DECL|field|retryCount
specifier|private
name|int
name|retryCount
decl_stmt|;
DECL|method|ItemInfo (long startId, long trackId)
specifier|public
name|ItemInfo
parameter_list|(
name|long
name|startId
parameter_list|,
name|long
name|trackId
parameter_list|)
block|{
name|this
operator|.
name|startId
operator|=
name|startId
expr_stmt|;
name|this
operator|.
name|trackId
operator|=
name|trackId
expr_stmt|;
comment|//set 0 when item is getting added first time in queue.
name|this
operator|.
name|retryCount
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|ItemInfo (long startId, long trackId, int retryCount)
specifier|public
name|ItemInfo
parameter_list|(
name|long
name|startId
parameter_list|,
name|long
name|trackId
parameter_list|,
name|int
name|retryCount
parameter_list|)
block|{
name|this
operator|.
name|startId
operator|=
name|startId
expr_stmt|;
name|this
operator|.
name|trackId
operator|=
name|trackId
expr_stmt|;
name|this
operator|.
name|retryCount
operator|=
name|retryCount
expr_stmt|;
block|}
comment|/**      * Return the start inode id of the current track Id.      */
DECL|method|getStartId ()
specifier|public
name|long
name|getStartId
parameter_list|()
block|{
return|return
name|startId
return|;
block|}
comment|/**      * Return the File inode Id for which needs to satisfy the policy.      */
DECL|method|getTrackId ()
specifier|public
name|long
name|getTrackId
parameter_list|()
block|{
return|return
name|trackId
return|;
block|}
comment|/**      * Returns true if the tracking path is a directory, false otherwise.      */
DECL|method|isDir ()
specifier|public
name|boolean
name|isDir
parameter_list|()
block|{
return|return
operator|(
name|startId
operator|!=
name|trackId
operator|)
return|;
block|}
comment|/**      * Get the attempted retry count of the block for satisfy the policy.      */
DECL|method|getRetryCount ()
specifier|public
name|int
name|getRetryCount
parameter_list|()
block|{
return|return
name|retryCount
return|;
block|}
block|}
comment|/**    * This class contains information of an attempted blocks and its last    * attempted or reported time stamp. This is used by    * {@link BlockStorageMovementAttemptedItems#storageMovementAttemptedItems}.    */
DECL|class|AttemptedItemInfo
specifier|final
specifier|static
class|class
name|AttemptedItemInfo
extends|extends
name|ItemInfo
block|{
DECL|field|lastAttemptedOrReportedTime
specifier|private
name|long
name|lastAttemptedOrReportedTime
decl_stmt|;
DECL|field|blocks
specifier|private
specifier|final
name|List
argument_list|<
name|Block
argument_list|>
name|blocks
decl_stmt|;
comment|/**      * AttemptedItemInfo constructor.      *      * @param rootId      *          rootId for trackId      * @param trackId      *          trackId for file.      * @param lastAttemptedOrReportedTime      *          last attempted or reported time      */
DECL|method|AttemptedItemInfo (long rootId, long trackId, long lastAttemptedOrReportedTime, List<Block> blocks, int retryCount)
name|AttemptedItemInfo
parameter_list|(
name|long
name|rootId
parameter_list|,
name|long
name|trackId
parameter_list|,
name|long
name|lastAttemptedOrReportedTime
parameter_list|,
name|List
argument_list|<
name|Block
argument_list|>
name|blocks
parameter_list|,
name|int
name|retryCount
parameter_list|)
block|{
name|super
argument_list|(
name|rootId
argument_list|,
name|trackId
argument_list|,
name|retryCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastAttemptedOrReportedTime
operator|=
name|lastAttemptedOrReportedTime
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
block|}
comment|/**      * @return last attempted or reported time stamp.      */
DECL|method|getLastAttemptedOrReportedTime ()
name|long
name|getLastAttemptedOrReportedTime
parameter_list|()
block|{
return|return
name|lastAttemptedOrReportedTime
return|;
block|}
comment|/**      * Update lastAttemptedOrReportedTime, so that the expiration time will be      * postponed to future.      */
DECL|method|touchLastReportedTimeStamp ()
name|void
name|touchLastReportedTimeStamp
parameter_list|()
block|{
name|this
operator|.
name|lastAttemptedOrReportedTime
operator|=
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
DECL|method|getBlocks ()
name|List
argument_list|<
name|Block
argument_list|>
name|getBlocks
parameter_list|()
block|{
return|return
name|this
operator|.
name|blocks
return|;
block|}
block|}
DECL|method|checkStoragePolicySatisfyPathStatus ( String path)
specifier|public
name|StoragePolicySatisfyPathStatus
name|checkStoragePolicySatisfyPathStatus
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|INode
name|inode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|storageMovementNeeded
operator|.
name|getStatus
argument_list|(
name|inode
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

