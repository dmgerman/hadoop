begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsJsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|RollingAverages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This class maintains DataNode peer metrics (e.g. numOps, AvgTime, etc.) for  * various peer operations.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|DataNodePeerMetrics
specifier|public
class|class
name|DataNodePeerMetrics
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataNodePeerMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sendPacketDownstreamRollingAvgerages
specifier|private
specifier|final
name|RollingAverages
name|sendPacketDownstreamRollingAvgerages
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**    * Threshold in milliseconds below which a DataNode is definitely not slow.    */
DECL|field|LOW_THRESHOLD_MS
specifier|private
specifier|static
specifier|final
name|long
name|LOW_THRESHOLD_MS
init|=
literal|5
decl_stmt|;
DECL|field|MIN_OUTLIER_DETECTION_NODES
specifier|private
specifier|static
specifier|final
name|long
name|MIN_OUTLIER_DETECTION_NODES
init|=
literal|10
decl_stmt|;
DECL|field|slowNodeDetector
specifier|private
specifier|final
name|OutlierDetector
name|slowNodeDetector
decl_stmt|;
comment|/**    * Minimum number of packet send samples which are required to qualify    * for outlier detection. If the number of samples is below this then    * outlier detection is skipped.    */
annotation|@
name|VisibleForTesting
DECL|field|MIN_OUTLIER_DETECTION_SAMPLES
specifier|static
specifier|final
name|long
name|MIN_OUTLIER_DETECTION_SAMPLES
init|=
literal|1000
decl_stmt|;
DECL|method|DataNodePeerMetrics ( final String name, final long windowSizeMs, final int numWindows)
specifier|public
name|DataNodePeerMetrics
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|long
name|windowSizeMs
parameter_list|,
specifier|final
name|int
name|numWindows
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|slowNodeDetector
operator|=
operator|new
name|OutlierDetector
argument_list|(
name|MIN_OUTLIER_DETECTION_NODES
argument_list|,
name|LOW_THRESHOLD_MS
argument_list|)
expr_stmt|;
name|sendPacketDownstreamRollingAvgerages
operator|=
operator|new
name|RollingAverages
argument_list|(
name|windowSizeMs
argument_list|,
name|numWindows
argument_list|)
expr_stmt|;
block|}
DECL|method|name ()
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Creates an instance of DataNodePeerMetrics, used for registration.    */
DECL|method|create (Configuration conf, String dnName)
specifier|public
specifier|static
name|DataNodePeerMetrics
name|create
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|dnName
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
literal|"DataNodePeerActivity-"
operator|+
operator|(
name|dnName
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"UndefinedDataNodeName"
operator|+
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|()
else|:
name|dnName
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'-'
argument_list|)
operator|)
decl_stmt|;
specifier|final
name|long
name|windowSizeMs
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_METRICS_ROLLING_AVERAGES_WINDOW_LENGTH_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_METRICS_ROLLING_AVERAGES_WINDOW_LENGTH_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numWindows
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_METRICS_ROLLING_AVERAGE_NUM_WINDOWS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_METRICS_ROLLING_AVERAGE_NUM_WINDOWS_DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|DataNodePeerMetrics
argument_list|(
name|name
argument_list|,
name|windowSizeMs
argument_list|,
name|numWindows
argument_list|)
return|;
block|}
comment|/**    * Adds invocation and elapsed time of SendPacketDownstream for peer.    *<p>    * The caller should pass in a well-formatted peerAddr. e.g.    * "[192.168.1.110:1010]" is good. This will be translated into a full    * qualified metric name, e.g. "[192.168.1.110:1010]AvgTime".    *</p>    */
DECL|method|addSendPacketDownstream ( final String peerAddr, final long elapsedMs)
specifier|public
name|void
name|addSendPacketDownstream
parameter_list|(
specifier|final
name|String
name|peerAddr
parameter_list|,
specifier|final
name|long
name|elapsedMs
parameter_list|)
block|{
name|sendPacketDownstreamRollingAvgerages
operator|.
name|add
argument_list|(
name|peerAddr
argument_list|,
name|elapsedMs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Dump SendPacketDownstreamRollingAvgTime metrics as JSON.    */
DECL|method|dumpSendPacketDownstreamAvgInfoAsJson ()
specifier|public
name|String
name|dumpSendPacketDownstreamAvgInfoAsJson
parameter_list|()
block|{
specifier|final
name|MetricsJsonBuilder
name|builder
init|=
operator|new
name|MetricsJsonBuilder
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|sendPacketDownstreamRollingAvgerages
operator|.
name|snapshot
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Collects states maintained in {@link ThreadLocal}, if any.    */
DECL|method|collectThreadLocalStates ()
specifier|public
name|void
name|collectThreadLocalStates
parameter_list|()
block|{
name|sendPacketDownstreamRollingAvgerages
operator|.
name|collectThreadLocalStates
argument_list|()
expr_stmt|;
block|}
comment|/**    * Retrieve the set of dataNodes that look significantly slower    * than their peers.    */
DECL|method|getOutliers ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|getOutliers
parameter_list|()
block|{
comment|// This maps the metric name to the aggregate latency.
comment|// The metric name is the datanode ID.
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|stats
init|=
name|sendPacketDownstreamRollingAvgerages
operator|.
name|getStats
argument_list|(
name|MIN_OUTLIER_DETECTION_SAMPLES
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"DataNodePeerMetrics: Got stats: {}"
argument_list|,
name|stats
argument_list|)
expr_stmt|;
return|return
name|slowNodeDetector
operator|.
name|getOutliers
argument_list|(
name|stats
argument_list|)
return|;
block|}
block|}
end_class

end_unit

