begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|DataEncryptionKeyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
operator|.
name|BlockDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
operator|.
name|BlockMovementAttemptFinished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
operator|.
name|BlockMovementStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
operator|.
name|BlockStorageMovementTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
operator|.
name|BlocksMovementsStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockStorageMovementCommand
operator|.
name|BlockMovingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * StoragePolicySatisfyWorker handles the storage policy satisfier commands.  * These commands would be issued from NameNode as part of Datanode's heart beat  * response. BPOfferService delegates the work to this class for handling  * BlockStorageMovement commands.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StoragePolicySatisfyWorker
specifier|public
class|class
name|StoragePolicySatisfyWorker
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StoragePolicySatisfyWorker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|datanode
specifier|private
specifier|final
name|DataNode
name|datanode
decl_stmt|;
DECL|field|moverThreads
specifier|private
specifier|final
name|int
name|moverThreads
decl_stmt|;
DECL|field|moveExecutor
specifier|private
specifier|final
name|ExecutorService
name|moveExecutor
decl_stmt|;
specifier|private
specifier|final
name|CompletionService
argument_list|<
name|BlockMovementAttemptFinished
argument_list|>
DECL|field|moverCompletionService
name|moverCompletionService
decl_stmt|;
DECL|field|movementTracker
specifier|private
specifier|final
name|BlockStorageMovementTracker
name|movementTracker
decl_stmt|;
DECL|field|movementTrackerThread
specifier|private
name|Daemon
name|movementTrackerThread
decl_stmt|;
DECL|field|blkDispatcher
specifier|private
specifier|final
name|BlockDispatcher
name|blkDispatcher
decl_stmt|;
DECL|method|StoragePolicySatisfyWorker (Configuration conf, DataNode datanode, BlocksMovementsStatusHandler handler)
specifier|public
name|StoragePolicySatisfyWorker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|DataNode
name|datanode
parameter_list|,
name|BlocksMovementsStatusHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|datanode
operator|=
name|datanode
expr_stmt|;
comment|// Defaulting to 10. This is to minimize the number of move ops.
name|moverThreads
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MOVERTHREADS_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|moveExecutor
operator|=
name|initializeBlockMoverThreadPool
argument_list|(
name|moverThreads
argument_list|)
expr_stmt|;
name|moverCompletionService
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|moveExecutor
argument_list|)
expr_stmt|;
name|movementTracker
operator|=
operator|new
name|BlockStorageMovementTracker
argument_list|(
name|moverCompletionService
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|movementTrackerThread
operator|=
operator|new
name|Daemon
argument_list|(
name|movementTracker
argument_list|)
expr_stmt|;
name|movementTrackerThread
operator|.
name|setName
argument_list|(
literal|"BlockStorageMovementTracker"
argument_list|)
expr_stmt|;
name|DNConf
name|dnConf
init|=
name|datanode
operator|.
name|getDnConf
argument_list|()
decl_stmt|;
name|int
name|ioFileBufferSize
init|=
name|DFSUtilClient
operator|.
name|getIoFileBufferSize
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|blkDispatcher
operator|=
operator|new
name|BlockDispatcher
argument_list|(
name|dnConf
operator|.
name|getSocketTimeout
argument_list|()
argument_list|,
name|ioFileBufferSize
argument_list|,
name|dnConf
operator|.
name|getConnectToDnViaHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start StoragePolicySatisfyWorker, which will start block movement tracker    * thread to track the completion of block movements.    */
DECL|method|start ()
name|void
name|start
parameter_list|()
block|{
name|movementTrackerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop StoragePolicySatisfyWorker, which will terminate executor service and    * stop block movement tracker thread.    */
DECL|method|stop ()
name|void
name|stop
parameter_list|()
block|{
name|movementTracker
operator|.
name|stopTracking
argument_list|()
expr_stmt|;
name|movementTrackerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|moveExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|moveExecutor
operator|.
name|awaitTermination
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted while waiting for mover thread to terminate"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initializeBlockMoverThreadPool (int num)
specifier|private
name|ThreadPoolExecutor
name|initializeBlockMoverThreadPool
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block mover to satisfy storage policy; pool threads={}"
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|ThreadPoolExecutor
name|moverThreadPool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|num
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicInteger
name|threadIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
name|super
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"BlockMoverTask-"
operator|+
name|threadIndex
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|moverThreadPool
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|moverThreadPool
return|;
block|}
comment|/**    * Handles the given set of block movement tasks. This will iterate over the    * block movement list and submit each block movement task asynchronously in a    * separate thread. Each task will move the block replica to the target node&    * wait for the completion.    *    * @param blockPoolID block pool identifier    *    * @param blockMovingInfos    *          list of blocks to be moved    */
DECL|method|processBlockMovingTasks (final String blockPoolID, final Collection<BlockMovingInfo> blockMovingInfos)
specifier|public
name|void
name|processBlockMovingTasks
parameter_list|(
specifier|final
name|String
name|blockPoolID
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received BlockMovingTasks {}"
argument_list|,
name|blockMovingInfos
argument_list|)
expr_stmt|;
for|for
control|(
name|BlockMovingInfo
name|blkMovingInfo
range|:
name|blockMovingInfos
control|)
block|{
name|StorageType
name|sourceStorageType
init|=
name|blkMovingInfo
operator|.
name|getSourceStorageType
argument_list|()
decl_stmt|;
name|StorageType
name|targetStorageType
init|=
name|blkMovingInfo
operator|.
name|getTargetStorageType
argument_list|()
decl_stmt|;
assert|assert
name|sourceStorageType
operator|!=
name|targetStorageType
operator|:
literal|"Source and Target storage type shouldn't be same!"
assert|;
name|BlockMovingTask
name|blockMovingTask
init|=
operator|new
name|BlockMovingTask
argument_list|(
name|blockPoolID
argument_list|,
name|blkMovingInfo
argument_list|)
decl_stmt|;
name|moverCompletionService
operator|.
name|submit
argument_list|(
name|blockMovingTask
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This class encapsulates the process of moving the block replica to the    * given target and wait for the response.    */
DECL|class|BlockMovingTask
specifier|private
class|class
name|BlockMovingTask
implements|implements
name|Callable
argument_list|<
name|BlockMovementAttemptFinished
argument_list|>
block|{
DECL|field|blockPoolID
specifier|private
specifier|final
name|String
name|blockPoolID
decl_stmt|;
DECL|field|blkMovingInfo
specifier|private
specifier|final
name|BlockMovingInfo
name|blkMovingInfo
decl_stmt|;
DECL|method|BlockMovingTask (String blockPoolID, BlockMovingInfo blkMovInfo)
name|BlockMovingTask
parameter_list|(
name|String
name|blockPoolID
parameter_list|,
name|BlockMovingInfo
name|blkMovInfo
parameter_list|)
block|{
name|this
operator|.
name|blockPoolID
operator|=
name|blockPoolID
expr_stmt|;
name|this
operator|.
name|blkMovingInfo
operator|=
name|blkMovInfo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|BlockMovementAttemptFinished
name|call
parameter_list|()
block|{
name|BlockMovementStatus
name|status
init|=
name|moveBlock
argument_list|()
decl_stmt|;
return|return
operator|new
name|BlockMovementAttemptFinished
argument_list|(
name|blkMovingInfo
operator|.
name|getBlock
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getSource
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getTarget
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getTargetStorageType
argument_list|()
argument_list|,
name|status
argument_list|)
return|;
block|}
DECL|method|moveBlock ()
specifier|private
name|BlockMovementStatus
name|moveBlock
parameter_list|()
block|{
name|datanode
operator|.
name|incrementXmitsInProgress
argument_list|()
expr_stmt|;
name|ExtendedBlock
name|eb
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|blockPoolID
argument_list|,
name|blkMovingInfo
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
init|=
name|datanode
operator|.
name|getBlockAccessToken
argument_list|(
name|eb
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|WRITE
argument_list|)
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|blkMovingInfo
operator|.
name|getTargetStorageType
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|DataEncryptionKeyFactory
name|keyFactory
init|=
name|datanode
operator|.
name|getDataEncryptionKeyFactoryForBlock
argument_list|(
name|eb
argument_list|)
decl_stmt|;
return|return
name|blkDispatcher
operator|.
name|moveBlock
argument_list|(
name|blkMovingInfo
argument_list|,
name|datanode
operator|.
name|getSaslClient
argument_list|()
argument_list|,
name|eb
argument_list|,
name|datanode
operator|.
name|newSocket
argument_list|()
argument_list|,
name|keyFactory
argument_list|,
name|accessToken
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO: handle failure retries
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to move block:{} from src:{} to destin:{} to satisfy "
operator|+
literal|"storageType:{}"
argument_list|,
name|blkMovingInfo
operator|.
name|getBlock
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getSource
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getTarget
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getTargetStorageType
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|BlockMovementStatus
operator|.
name|DN_BLK_STORAGE_MOVEMENT_FAILURE
return|;
block|}
finally|finally
block|{
name|datanode
operator|.
name|decrementXmitsInProgress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Drop the in-progress SPS work queues.    */
DECL|method|dropSPSWork ()
specifier|public
name|void
name|dropSPSWork
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received request to drop StoragePolicySatisfierWorker queues. "
operator|+
literal|"So, none of the SPS Worker queued block movements will"
operator|+
literal|" be scheduled."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

