begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common.blockaliasmap.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBIterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|leveldbjni
operator|.
name|JniDBFactory
operator|.
name|factory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ProvidedStorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|BlockAliasMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_LEVELDB_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|aliasmap
operator|.
name|InMemoryAliasMap
operator|.
name|fromBlockBytes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|aliasmap
operator|.
name|InMemoryAliasMap
operator|.
name|fromProvidedStorageLocationBytes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|aliasmap
operator|.
name|InMemoryAliasMap
operator|.
name|toProtoBufBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A LevelDB based implementation of {@link BlockAliasMap}.  */
end_comment

begin_class
DECL|class|LevelDBFileRegionAliasMap
specifier|public
class|class
name|LevelDBFileRegionAliasMap
extends|extends
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
implements|implements
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|opts
specifier|private
name|LevelDBOptions
name|opts
init|=
operator|new
name|LevelDBOptions
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LevelDBFileRegionAliasMap
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|opts
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|getReader (Reader.Options opts)
specifier|public
name|Reader
argument_list|<
name|FileRegion
argument_list|>
name|getReader
parameter_list|(
name|Reader
operator|.
name|Options
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|opts
condition|)
block|{
name|opts
operator|=
name|this
operator|.
name|opts
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|opts
operator|instanceof
name|LevelDBOptions
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid options "
operator|+
name|opts
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|LevelDBOptions
name|o
init|=
operator|(
name|LevelDBOptions
operator|)
name|opts
decl_stmt|;
return|return
operator|new
name|LevelDBFileRegionAliasMap
operator|.
name|LevelDBReader
argument_list|(
name|createDB
argument_list|(
name|o
operator|.
name|levelDBPath
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriter (Writer.Options opts)
specifier|public
name|Writer
argument_list|<
name|FileRegion
argument_list|>
name|getWriter
parameter_list|(
name|Writer
operator|.
name|Options
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|opts
condition|)
block|{
name|opts
operator|=
name|this
operator|.
name|opts
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|opts
operator|instanceof
name|LevelDBOptions
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid options "
operator|+
name|opts
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|LevelDBOptions
name|o
init|=
operator|(
name|LevelDBOptions
operator|)
name|opts
decl_stmt|;
return|return
operator|new
name|LevelDBFileRegionAliasMap
operator|.
name|LevelDBWriter
argument_list|(
name|createDB
argument_list|(
name|o
operator|.
name|levelDBPath
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createDB (String levelDBPath, boolean createIfMissing)
specifier|private
specifier|static
name|DB
name|createDB
parameter_list|(
name|String
name|levelDBPath
parameter_list|,
name|boolean
name|createIfMissing
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|levelDBPath
operator|==
literal|null
operator|||
name|levelDBPath
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A valid path needs to be specified for "
operator|+
name|LevelDBFileRegionAliasMap
operator|.
name|class
operator|+
literal|" using the parameter "
operator|+
name|DFS_PROVIDED_ALIASMAP_LEVELDB_PATH
argument_list|)
throw|;
block|}
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
name|options
init|=
operator|new
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|createIfMissing
argument_list|(
name|createIfMissing
argument_list|)
expr_stmt|;
return|return
name|factory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|levelDBPath
argument_list|)
argument_list|,
name|options
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do nothing.
block|}
comment|/**    * Class specifying reader options for the {@link LevelDBFileRegionAliasMap}.    */
DECL|class|LevelDBOptions
specifier|public
specifier|static
class|class
name|LevelDBOptions
implements|implements
name|LevelDBReader
operator|.
name|Options
implements|,
name|LevelDBWriter
operator|.
name|Options
implements|,
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|levelDBPath
specifier|private
name|String
name|levelDBPath
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|levelDBPath
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_PROVIDED_ALIASMAP_LEVELDB_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|filename (String levelDBPath)
specifier|public
name|LevelDBOptions
name|filename
parameter_list|(
name|String
name|levelDBPath
parameter_list|)
block|{
name|this
operator|.
name|levelDBPath
operator|=
name|levelDBPath
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**    * This class is used as a reader for block maps which    * are stored as LevelDB files.    */
DECL|class|LevelDBReader
specifier|public
specifier|static
class|class
name|LevelDBReader
extends|extends
name|Reader
argument_list|<
name|FileRegion
argument_list|>
block|{
comment|/**      * Options for {@link LevelDBReader}.      */
DECL|interface|Options
specifier|public
interface|interface
name|Options
extends|extends
name|Reader
operator|.
name|Options
block|{
DECL|method|filename (String levelDBPath)
name|Options
name|filename
parameter_list|(
name|String
name|levelDBPath
parameter_list|)
function_decl|;
block|}
DECL|field|db
specifier|private
name|DB
name|db
decl_stmt|;
DECL|method|LevelDBReader (DB db)
name|LevelDBReader
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolve (Block block)
specifier|public
name|Optional
argument_list|<
name|FileRegion
argument_list|>
name|resolve
parameter_list|(
name|Block
name|block
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|// consider layering index w/ composable format
name|byte
index|[]
name|key
init|=
name|toProtoBufBytes
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|db
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ProvidedStorageLocation
name|psl
init|=
name|fromProvidedStorageLocationBytes
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|FileRegion
argument_list|(
name|block
argument_list|,
name|psl
argument_list|)
argument_list|)
return|;
block|}
DECL|class|FRIterator
specifier|static
class|class
name|FRIterator
implements|implements
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
block|{
DECL|field|internal
specifier|private
specifier|final
name|DBIterator
name|internal
decl_stmt|;
DECL|method|FRIterator (DBIterator internal)
name|FRIterator
parameter_list|(
name|DBIterator
name|internal
parameter_list|)
block|{
name|this
operator|.
name|internal
operator|=
name|internal
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|internal
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|FileRegion
name|next
parameter_list|()
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|internal
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|Block
name|block
init|=
name|fromBlockBytes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|ProvidedStorageLocation
name|psl
init|=
name|fromProvidedStorageLocationBytes
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileRegion
argument_list|(
name|block
argument_list|,
name|psl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|FileRegion
argument_list|>
name|iterator
parameter_list|()
block|{
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DBIterator
name|iterator
init|=
name|db
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
return|return
operator|new
name|FRIterator
argument_list|(
name|iterator
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This class is used as a writer for block maps which    * are stored as LevelDB files.    */
DECL|class|LevelDBWriter
specifier|public
specifier|static
class|class
name|LevelDBWriter
extends|extends
name|Writer
argument_list|<
name|FileRegion
argument_list|>
block|{
comment|/**      * Interface for Writer options.      */
DECL|interface|Options
specifier|public
interface|interface
name|Options
extends|extends
name|Writer
operator|.
name|Options
block|{
DECL|method|filename (String levelDBPath)
name|Options
name|filename
parameter_list|(
name|String
name|levelDBPath
parameter_list|)
function_decl|;
block|}
DECL|field|db
specifier|private
specifier|final
name|DB
name|db
decl_stmt|;
DECL|method|LevelDBWriter (DB db)
name|LevelDBWriter
parameter_list|(
name|DB
name|db
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|store (FileRegion token)
specifier|public
name|void
name|store
parameter_list|(
name|FileRegion
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|key
init|=
name|toProtoBufBytes
argument_list|(
name|token
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|toProtoBufBytes
argument_list|(
name|token
operator|.
name|getProvidedStorageLocation
argument_list|()
argument_list|)
decl_stmt|;
name|db
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

