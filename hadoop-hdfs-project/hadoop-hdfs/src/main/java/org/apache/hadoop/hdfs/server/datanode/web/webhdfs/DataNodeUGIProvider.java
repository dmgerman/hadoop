begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web.webhdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
operator|.
name|webhdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|JspHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Create UGI from the request for the WebHDFS requests for the DNs. Note that  * the DN does not authenticate the UGI -- the NN will authenticate them in  * subsequent operations.  */
end_comment

begin_class
DECL|class|DataNodeUGIProvider
specifier|public
class|class
name|DataNodeUGIProvider
block|{
DECL|field|params
specifier|private
specifier|final
name|ParameterParser
name|params
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|ugiCache
specifier|static
name|Cache
argument_list|<
name|String
argument_list|,
name|UserGroupInformation
argument_list|>
name|ugiCache
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Client
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DataNodeUGIProvider (ParameterParser params)
name|DataNodeUGIProvider
parameter_list|(
name|ParameterParser
name|params
parameter_list|)
block|{
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
DECL|method|init (Configuration conf)
specifier|public
specifier|static
specifier|synchronized
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|ugiCache
operator|==
literal|null
condition|)
block|{
name|ugiCache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEBHDFS_UGI_EXPIRE_AFTER_ACCESS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_WEBHDFS_UGI_EXPIRE_AFTER_ACCESS_DEFAULT
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|ugi ()
name|UserGroupInformation
name|ugi
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
decl_stmt|;
try|try
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|params
operator|.
name|delegationToken
argument_list|()
decl_stmt|;
name|ugi
operator|=
name|ugiCache
operator|.
name|get
argument_list|(
name|buildTokenCacheKey
argument_list|(
name|token
argument_list|)
argument_list|,
operator|new
name|Callable
argument_list|<
name|UserGroupInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|tokenUGI
argument_list|(
name|token
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|usernameFromQuery
init|=
name|params
operator|.
name|userName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|doAsUserFromQuery
init|=
name|params
operator|.
name|doAsUser
argument_list|()
decl_stmt|;
specifier|final
name|String
name|remoteUser
init|=
name|usernameFromQuery
operator|==
literal|null
condition|?
name|JspHelper
operator|.
name|getDefaultWebUserName
argument_list|(
name|params
operator|.
name|conf
argument_list|()
argument_list|)
comment|// not specified in request
else|:
name|usernameFromQuery
decl_stmt|;
name|ugi
operator|=
name|ugiCache
operator|.
name|get
argument_list|(
name|buildNonTokenCacheKey
argument_list|(
name|doAsUserFromQuery
argument_list|,
name|remoteUser
argument_list|)
argument_list|,
operator|new
name|Callable
argument_list|<
name|UserGroupInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|nonTokenUGI
argument_list|(
name|usernameFromQuery
argument_list|,
name|doAsUserFromQuery
argument_list|,
name|remoteUser
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
return|return
name|ugi
return|;
block|}
DECL|method|buildTokenCacheKey (Token<DelegationTokenIdentifier> token)
specifier|private
name|String
name|buildTokenCacheKey
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
return|return
name|token
operator|.
name|buildCacheKey
argument_list|()
return|;
block|}
DECL|method|tokenUGI (Token<DelegationTokenIdentifier> token)
specifier|private
name|UserGroupInformation
name|tokenUGI
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|id
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
DECL|method|buildNonTokenCacheKey (String doAsUserFromQuery, String remoteUser)
specifier|private
name|String
name|buildNonTokenCacheKey
parameter_list|(
name|String
name|doAsUserFromQuery
parameter_list|,
name|String
name|remoteUser
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|doAsUserFromQuery
operator|==
literal|null
condition|?
name|String
operator|.
name|format
argument_list|(
literal|"{%s}"
argument_list|,
name|remoteUser
argument_list|)
else|:
name|String
operator|.
name|format
argument_list|(
literal|"{%s}:{%s}"
argument_list|,
name|remoteUser
argument_list|,
name|doAsUserFromQuery
argument_list|)
decl_stmt|;
return|return
name|key
return|;
block|}
DECL|method|nonTokenUGI (String usernameFromQuery, String doAsUserFromQuery, String remoteUser)
specifier|private
name|UserGroupInformation
name|nonTokenUGI
parameter_list|(
name|String
name|usernameFromQuery
parameter_list|,
name|String
name|doAsUserFromQuery
parameter_list|,
name|String
name|remoteUser
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
decl_stmt|;
name|JspHelper
operator|.
name|checkUsername
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|usernameFromQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|doAsUserFromQuery
operator|!=
literal|null
condition|)
block|{
comment|// create and attempt to authorize a proxy user
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|doAsUserFromQuery
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
block|}
return|return
name|ugi
return|;
block|}
block|}
end_class

end_unit

