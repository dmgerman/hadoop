begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
comment|/**  * Abstract class for deriving exceptions related to filesystem constraints  */
DECL|class|FSLimitException
specifier|public
specifier|abstract
class|class
name|FSLimitException
extends|extends
name|QuotaExceededException
block|{
DECL|field|serialVersionUID
specifier|protected
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|FSLimitException ()
specifier|protected
name|FSLimitException
parameter_list|()
block|{}
DECL|method|FSLimitException (String msg)
specifier|protected
name|FSLimitException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|FSLimitException (long quota, long count)
specifier|protected
name|FSLimitException
parameter_list|(
name|long
name|quota
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|quota
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * Path component length is too long    */
specifier|public
specifier|static
specifier|final
DECL|class|PathComponentTooLongException
class|class
name|PathComponentTooLongException
extends|extends
name|FSLimitException
block|{
DECL|field|serialVersionUID
specifier|protected
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|PathComponentTooLongException ()
specifier|protected
name|PathComponentTooLongException
parameter_list|()
block|{}
DECL|method|PathComponentTooLongException (String msg)
specifier|protected
name|PathComponentTooLongException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|PathComponentTooLongException (long quota, long count)
specifier|public
name|PathComponentTooLongException
parameter_list|(
name|long
name|quota
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|quota
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
name|Path
name|violator
init|=
operator|new
name|Path
argument_list|(
name|pathName
argument_list|)
decl_stmt|;
return|return
literal|"The maximum path component name limit of "
operator|+
name|violator
operator|.
name|getName
argument_list|()
operator|+
literal|" in directory "
operator|+
name|violator
operator|.
name|getParent
argument_list|()
operator|+
literal|" is exceeded: limit="
operator|+
name|quota
operator|+
literal|" length="
operator|+
name|count
return|;
block|}
block|}
comment|/**    * Directory has too many items    */
specifier|public
specifier|static
specifier|final
DECL|class|MaxDirectoryItemsExceededException
class|class
name|MaxDirectoryItemsExceededException
extends|extends
name|FSLimitException
block|{
DECL|field|serialVersionUID
specifier|protected
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|MaxDirectoryItemsExceededException ()
specifier|protected
name|MaxDirectoryItemsExceededException
parameter_list|()
block|{}
DECL|method|MaxDirectoryItemsExceededException (String msg)
specifier|protected
name|MaxDirectoryItemsExceededException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|MaxDirectoryItemsExceededException (long quota, long count)
specifier|public
name|MaxDirectoryItemsExceededException
parameter_list|(
name|long
name|quota
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|quota
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
literal|"The directory item limit of "
operator|+
name|pathName
operator|+
literal|" is exceeded: limit="
operator|+
name|quota
operator|+
literal|" items="
operator|+
name|count
return|;
block|}
block|}
block|}
end_class

end_unit

