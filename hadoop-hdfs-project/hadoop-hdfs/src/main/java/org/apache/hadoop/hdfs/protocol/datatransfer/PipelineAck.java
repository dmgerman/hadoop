begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
operator|.
name|vintPrefixed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_OOB_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_OOB_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|PipelineAckProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|LongBitFormat
import|;
end_import

begin_comment
comment|/** Pipeline Acknowledgment **/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|PipelineAck
specifier|public
class|class
name|PipelineAck
block|{
DECL|field|proto
name|PipelineAckProto
name|proto
decl_stmt|;
DECL|field|UNKOWN_SEQNO
specifier|public
specifier|final
specifier|static
name|long
name|UNKOWN_SEQNO
init|=
operator|-
literal|2
decl_stmt|;
DECL|field|OOB_START
specifier|final
specifier|static
name|int
name|OOB_START
init|=
name|Status
operator|.
name|OOB_RESTART_VALUE
decl_stmt|;
comment|// the first OOB type
DECL|field|OOB_END
specifier|final
specifier|static
name|int
name|OOB_END
init|=
name|Status
operator|.
name|OOB_RESERVED3_VALUE
decl_stmt|;
comment|// the last OOB type
DECL|field|NUM_OOB_TYPES
specifier|final
specifier|static
name|int
name|NUM_OOB_TYPES
init|=
name|OOB_END
operator|-
name|OOB_START
operator|+
literal|1
decl_stmt|;
comment|// place holder for timeout value of each OOB type
DECL|field|OOB_TIMEOUT
specifier|final
specifier|static
name|long
index|[]
name|OOB_TIMEOUT
decl_stmt|;
DECL|enum|ECN
specifier|public
enum|enum
name|ECN
block|{
DECL|enumConstant|DISABLED
name|DISABLED
argument_list|(
literal|0
argument_list|)
block|,
DECL|enumConstant|SUPPORTED
name|SUPPORTED
argument_list|(
literal|1
argument_list|)
block|,
DECL|enumConstant|SUPPORTED2
name|SUPPORTED2
argument_list|(
literal|2
argument_list|)
block|,
DECL|enumConstant|CONGESTED
name|CONGESTED
argument_list|(
literal|3
argument_list|)
block|;
DECL|field|value
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
DECL|field|VALUES
specifier|private
specifier|static
specifier|final
name|ECN
index|[]
name|VALUES
init|=
name|values
argument_list|()
decl_stmt|;
DECL|method|valueOf (int value)
specifier|static
name|ECN
name|valueOf
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|VALUES
index|[
name|value
index|]
return|;
block|}
DECL|method|ECN (int value)
name|ECN
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
DECL|enum|StatusFormat
specifier|private
enum|enum
name|StatusFormat
block|{
DECL|enumConstant|STATUS
name|STATUS
argument_list|(
literal|null
argument_list|,
literal|4
argument_list|)
block|,
DECL|enumConstant|RESERVED
name|RESERVED
argument_list|(
name|STATUS
operator|.
name|BITS
argument_list|,
literal|1
argument_list|)
block|,
DECL|enumConstant|ECN_BITS
name|ECN_BITS
argument_list|(
name|RESERVED
operator|.
name|BITS
argument_list|,
literal|2
argument_list|)
block|;
DECL|field|BITS
specifier|private
specifier|final
name|LongBitFormat
name|BITS
decl_stmt|;
DECL|method|StatusFormat (LongBitFormat prev, int bits)
name|StatusFormat
parameter_list|(
name|LongBitFormat
name|prev
parameter_list|,
name|int
name|bits
parameter_list|)
block|{
name|BITS
operator|=
operator|new
name|LongBitFormat
argument_list|(
name|name
argument_list|()
argument_list|,
name|prev
argument_list|,
name|bits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getStatus (int header)
specifier|static
name|Status
name|getStatus
parameter_list|(
name|int
name|header
parameter_list|)
block|{
return|return
name|Status
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
name|STATUS
operator|.
name|BITS
operator|.
name|retrieve
argument_list|(
name|header
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getECN (int header)
specifier|static
name|ECN
name|getECN
parameter_list|(
name|int
name|header
parameter_list|)
block|{
return|return
name|ECN
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
name|ECN_BITS
operator|.
name|BITS
operator|.
name|retrieve
argument_list|(
name|header
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setStatus (int old, Status status)
specifier|public
specifier|static
name|int
name|setStatus
parameter_list|(
name|int
name|old
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|STATUS
operator|.
name|BITS
operator|.
name|combine
argument_list|(
name|status
operator|.
name|getNumber
argument_list|()
argument_list|,
name|old
argument_list|)
return|;
block|}
DECL|method|setECN (int old, ECN ecn)
specifier|public
specifier|static
name|int
name|setECN
parameter_list|(
name|int
name|old
parameter_list|,
name|ECN
name|ecn
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|ECN_BITS
operator|.
name|BITS
operator|.
name|combine
argument_list|(
name|ecn
operator|.
name|getValue
argument_list|()
argument_list|,
name|old
argument_list|)
return|;
block|}
block|}
static|static
block|{
name|OOB_TIMEOUT
operator|=
operator|new
name|long
index|[
name|NUM_OOB_TYPES
index|]
expr_stmt|;
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|String
index|[]
name|ele
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATANODE_OOB_TIMEOUT_KEY
argument_list|,
name|DFS_DATANODE_OOB_TIMEOUT_DEFAULT
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OOB_TYPES
condition|;
name|i
operator|++
control|)
block|{
name|OOB_TIMEOUT
index|[
name|i
index|]
operator|=
operator|(
name|i
operator|<
name|ele
operator|.
name|length
operator|)
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|ele
index|[
name|i
index|]
argument_list|)
else|:
literal|0
expr_stmt|;
block|}
block|}
comment|/** default constructor **/
DECL|method|PipelineAck ()
specifier|public
name|PipelineAck
parameter_list|()
block|{   }
comment|/**    * Constructor assuming no next DN in pipeline    * @param seqno sequence number    * @param replies an array of replies    */
DECL|method|PipelineAck (long seqno, int[] replies)
specifier|public
name|PipelineAck
parameter_list|(
name|long
name|seqno
parameter_list|,
name|int
index|[]
name|replies
parameter_list|)
block|{
name|this
argument_list|(
name|seqno
argument_list|,
name|replies
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    * @param seqno sequence number    * @param replies an array of replies    * @param downstreamAckTimeNanos ack RTT in nanoseconds, 0 if no next DN in pipeline    */
DECL|method|PipelineAck (long seqno, int[] replies, long downstreamAckTimeNanos)
specifier|public
name|PipelineAck
parameter_list|(
name|long
name|seqno
parameter_list|,
name|int
index|[]
name|replies
parameter_list|,
name|long
name|downstreamAckTimeNanos
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Status
argument_list|>
name|statusList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|flagList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|r
range|:
name|replies
control|)
block|{
name|statusList
operator|.
name|add
argument_list|(
name|StatusFormat
operator|.
name|getStatus
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|flagList
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|proto
operator|=
name|PipelineAckProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSeqno
argument_list|(
name|seqno
argument_list|)
operator|.
name|addAllReply
argument_list|(
name|statusList
argument_list|)
operator|.
name|addAllFlag
argument_list|(
name|flagList
argument_list|)
operator|.
name|setDownstreamAckTimeNanos
argument_list|(
name|downstreamAckTimeNanos
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the sequence number    * @return the sequence number    */
DECL|method|getSeqno ()
specifier|public
name|long
name|getSeqno
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getSeqno
argument_list|()
return|;
block|}
comment|/**    * Get the number of replies    * @return the number of replies    */
DECL|method|getNumOfReplies ()
specifier|public
name|short
name|getNumOfReplies
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|proto
operator|.
name|getReplyCount
argument_list|()
return|;
block|}
comment|/**    * get the header flag of ith reply    */
DECL|method|getHeaderFlag (int i)
specifier|public
name|int
name|getHeaderFlag
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|proto
operator|.
name|getFlagCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|proto
operator|.
name|getFlag
argument_list|(
name|i
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|combineHeader
argument_list|(
name|ECN
operator|.
name|DISABLED
argument_list|,
name|proto
operator|.
name|getReply
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|getFlag (int i)
specifier|public
name|int
name|getFlag
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|proto
operator|.
name|getFlag
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/**    * Get the time elapsed for downstream ack RTT in nanoseconds    * @return time elapsed for downstream ack in nanoseconds, 0 if no next DN in pipeline    */
DECL|method|getDownstreamAckTimeNanos ()
specifier|public
name|long
name|getDownstreamAckTimeNanos
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getDownstreamAckTimeNanos
argument_list|()
return|;
block|}
comment|/**    * Check if this ack contains error status    * @return true if all statuses are SUCCESS    */
DECL|method|isSuccess ()
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
for|for
control|(
name|Status
name|s
range|:
name|proto
operator|.
name|getReplyList
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|!=
name|Status
operator|.
name|SUCCESS
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns the OOB status if this ack contains one.     * @return null if it is not an OOB ack.    */
DECL|method|getOOBStatus ()
specifier|public
name|Status
name|getOOBStatus
parameter_list|()
block|{
comment|// Normal data transfer acks will have a valid sequence number, so
comment|// this will return right away in most cases.
if|if
condition|(
name|getSeqno
argument_list|()
operator|!=
name|UNKOWN_SEQNO
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Status
name|s
range|:
name|proto
operator|.
name|getReplyList
argument_list|()
control|)
block|{
comment|// The following check is valid because protobuf guarantees to
comment|// preserve the ordering of enum elements.
if|if
condition|(
name|s
operator|.
name|getNumber
argument_list|()
operator|>=
name|OOB_START
operator|&&
name|s
operator|.
name|getNumber
argument_list|()
operator|<=
name|OOB_END
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the timeout to be used for transmitting the OOB type    * @return the timeout in milliseconds    */
DECL|method|getOOBTimeout (Status status)
specifier|public
specifier|static
name|long
name|getOOBTimeout
parameter_list|(
name|Status
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|index
init|=
name|status
operator|.
name|getNumber
argument_list|()
operator|-
name|OOB_START
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|NUM_OOB_TYPES
condition|)
block|{
return|return
name|OOB_TIMEOUT
index|[
name|index
index|]
return|;
block|}
comment|// Not an OOB.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not an OOB status: "
operator|+
name|status
argument_list|)
throw|;
block|}
comment|/** Get the Restart OOB ack status */
DECL|method|getRestartOOBStatus ()
specifier|public
specifier|static
name|Status
name|getRestartOOBStatus
parameter_list|()
block|{
return|return
name|Status
operator|.
name|OOB_RESTART
return|;
block|}
comment|/** return true if it is the restart OOB status code  */
DECL|method|isRestartOOBStatus (Status st)
specifier|public
specifier|static
name|boolean
name|isRestartOOBStatus
parameter_list|(
name|Status
name|st
parameter_list|)
block|{
return|return
name|st
operator|.
name|equals
argument_list|(
name|Status
operator|.
name|OOB_RESTART
argument_list|)
return|;
block|}
comment|/**** Writable interface ****/
DECL|method|readFields (InputStream in)
specifier|public
name|void
name|readFields
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|proto
operator|=
name|PipelineAckProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|write (OutputStream out)
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|proto
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|//Object
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|proto
argument_list|)
return|;
block|}
DECL|method|getStatusFromHeader (int header)
specifier|public
specifier|static
name|Status
name|getStatusFromHeader
parameter_list|(
name|int
name|header
parameter_list|)
block|{
return|return
name|StatusFormat
operator|.
name|getStatus
argument_list|(
name|header
argument_list|)
return|;
block|}
DECL|method|getECNFromHeader (int header)
specifier|public
specifier|static
name|ECN
name|getECNFromHeader
parameter_list|(
name|int
name|header
parameter_list|)
block|{
return|return
name|StatusFormat
operator|.
name|getECN
argument_list|(
name|header
argument_list|)
return|;
block|}
DECL|method|setStatusForHeader (int old, Status status)
specifier|public
specifier|static
name|int
name|setStatusForHeader
parameter_list|(
name|int
name|old
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
return|return
name|StatusFormat
operator|.
name|setStatus
argument_list|(
name|old
argument_list|,
name|status
argument_list|)
return|;
block|}
DECL|method|combineHeader (ECN ecn, Status status)
specifier|public
specifier|static
name|int
name|combineHeader
parameter_list|(
name|ECN
name|ecn
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|int
name|header
init|=
literal|0
decl_stmt|;
name|header
operator|=
name|StatusFormat
operator|.
name|setStatus
argument_list|(
name|header
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|header
operator|=
name|StatusFormat
operator|.
name|setECN
argument_list|(
name|header
argument_list|,
name|ecn
argument_list|)
expr_stmt|;
return|return
name|header
return|;
block|}
block|}
end_class

end_unit

