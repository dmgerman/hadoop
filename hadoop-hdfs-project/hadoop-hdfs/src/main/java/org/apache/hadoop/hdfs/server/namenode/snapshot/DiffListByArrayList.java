begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Resizable-array implementation of the DiffList interface.  * @param<T> Type of the object in the list  */
end_comment

begin_class
DECL|class|DiffListByArrayList
specifier|public
class|class
name|DiffListByArrayList
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|<
name|Integer
parameter_list|>
parameter_list|>
implements|implements
name|DiffList
argument_list|<
name|T
argument_list|>
block|{
DECL|field|list
specifier|private
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
DECL|method|DiffListByArrayList (List<T> list)
name|DiffListByArrayList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
DECL|method|DiffListByArrayList (int initialCapacity)
specifier|public
name|DiffListByArrayList
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|initialCapacity
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get (int i)
specifier|public
name|T
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|list
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove (int i)
specifier|public
name|T
name|remove
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|list
operator|.
name|remove
argument_list|(
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addLast (T t)
specifier|public
name|boolean
name|addLast
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|list
operator|.
name|add
argument_list|(
name|t
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addFirst (T t)
specifier|public
name|void
name|addFirst
parameter_list|(
name|T
name|t
parameter_list|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|binarySearch (int i)
specifier|public
name|int
name|binarySearch
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|binarySearch
argument_list|(
name|list
argument_list|,
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

