begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.sps
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|sps
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|TrustedChannelResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|DataTransferSaslUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|sasl
operator|.
name|SaslDataTransferClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|balancer
operator|.
name|NameNodeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
operator|.
name|BlockDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
operator|.
name|BlockMovementAttemptFinished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
operator|.
name|BlockMovementStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
operator|.
name|BlockStorageMovementTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|sps
operator|.
name|BlocksMovementsStatusHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|BlockMoveTaskHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
operator|.
name|SPSService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockStorageMovementCommand
operator|.
name|BlockMovingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class handles the external SPS block movements. This will move the  * given block to a target datanode by directly establishing socket connection  * to it and invokes function  * {@link Sender#replaceBlock(ExtendedBlock, StorageType, Token, String,  * DatanodeInfo, String)}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|ExternalSPSBlockMoveTaskHandler
specifier|public
class|class
name|ExternalSPSBlockMoveTaskHandler
implements|implements
name|BlockMoveTaskHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExternalSPSBlockMoveTaskHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|moveExecutor
specifier|private
specifier|final
name|ExecutorService
name|moveExecutor
decl_stmt|;
DECL|field|mCompletionServ
specifier|private
specifier|final
name|CompletionService
argument_list|<
name|BlockMovementAttemptFinished
argument_list|>
name|mCompletionServ
decl_stmt|;
DECL|field|nnc
specifier|private
specifier|final
name|NameNodeConnector
name|nnc
decl_stmt|;
DECL|field|saslClient
specifier|private
specifier|final
name|SaslDataTransferClient
name|saslClient
decl_stmt|;
DECL|field|blkMovementTracker
specifier|private
specifier|final
name|BlockStorageMovementTracker
name|blkMovementTracker
decl_stmt|;
DECL|field|movementTrackerThread
specifier|private
name|Daemon
name|movementTrackerThread
decl_stmt|;
DECL|field|service
specifier|private
specifier|final
name|SPSService
argument_list|<
name|String
argument_list|>
name|service
decl_stmt|;
DECL|field|blkDispatcher
specifier|private
specifier|final
name|BlockDispatcher
name|blkDispatcher
decl_stmt|;
DECL|method|ExternalSPSBlockMoveTaskHandler (Configuration conf, NameNodeConnector nnc, SPSService<String> spsService)
specifier|public
name|ExternalSPSBlockMoveTaskHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NameNodeConnector
name|nnc
parameter_list|,
name|SPSService
argument_list|<
name|String
argument_list|>
name|spsService
parameter_list|)
block|{
name|int
name|moverThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MOVERTHREADS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_MOVER_MOVERTHREADS_DEFAULT
argument_list|)
decl_stmt|;
name|moveExecutor
operator|=
name|initializeBlockMoverThreadPool
argument_list|(
name|moverThreads
argument_list|)
expr_stmt|;
name|mCompletionServ
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|moveExecutor
argument_list|)
expr_stmt|;
name|this
operator|.
name|nnc
operator|=
name|nnc
expr_stmt|;
name|this
operator|.
name|saslClient
operator|=
operator|new
name|SaslDataTransferClient
argument_list|(
name|conf
argument_list|,
name|DataTransferSaslUtil
operator|.
name|getSaslPropertiesResolver
argument_list|(
name|conf
argument_list|)
argument_list|,
name|TrustedChannelResolver
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
argument_list|,
name|nnc
operator|.
name|getFallbackToSimpleAuth
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blkMovementTracker
operator|=
operator|new
name|BlockStorageMovementTracker
argument_list|(
name|mCompletionServ
argument_list|,
operator|new
name|ExternalBlocksMovementsStatusHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|spsService
expr_stmt|;
name|boolean
name|connectToDnViaHostname
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_DN_HOSTNAME
argument_list|,
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_USE_DN_HOSTNAME_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|ioFileBufferSize
init|=
name|DFSUtilClient
operator|.
name|getIoFileBufferSize
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|blkDispatcher
operator|=
operator|new
name|BlockDispatcher
argument_list|(
name|HdfsConstants
operator|.
name|READ_TIMEOUT
argument_list|,
name|ioFileBufferSize
argument_list|,
name|connectToDnViaHostname
argument_list|)
expr_stmt|;
name|startMovementTracker
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initializes block movement tracker daemon and starts the thread.    */
DECL|method|startMovementTracker ()
specifier|private
name|void
name|startMovementTracker
parameter_list|()
block|{
name|movementTrackerThread
operator|=
operator|new
name|Daemon
argument_list|(
name|this
operator|.
name|blkMovementTracker
argument_list|)
expr_stmt|;
name|movementTrackerThread
operator|.
name|setName
argument_list|(
literal|"BlockStorageMovementTracker"
argument_list|)
expr_stmt|;
name|movementTrackerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|initializeBlockMoverThreadPool (int num)
specifier|private
name|ThreadPoolExecutor
name|initializeBlockMoverThreadPool
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block mover to satisfy storage policy; pool threads={}"
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|ThreadPoolExecutor
name|moverThreadPool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|num
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicInteger
name|threadIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
name|super
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"BlockMoverTask-"
operator|+
name|threadIndex
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|,
operator|new
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|rejectedExecution
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|ThreadPoolExecutor
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Execution for block movement to satisfy storage policy"
operator|+
literal|" got rejected, Executing in current thread"
argument_list|)
expr_stmt|;
comment|// will run in the current thread.
name|super
operator|.
name|rejectedExecution
argument_list|(
name|runnable
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|moverThreadPool
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|moverThreadPool
return|;
block|}
annotation|@
name|Override
DECL|method|submitMoveTask (BlockMovingInfo blkMovingInfo)
specifier|public
name|void
name|submitMoveTask
parameter_list|(
name|BlockMovingInfo
name|blkMovingInfo
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: Need to increment scheduled block size on the target node. This
comment|// count will be used to calculate the remaining space of target datanode
comment|// during block movement assignment logic. In the internal movement,
comment|// remaining space is bookkeeping at the DatanodeDescriptor, please refer
comment|// IntraSPSNameNodeBlockMoveTaskHandler#submitMoveTask implementation and
comment|// updating via the funcation call -
comment|// dn.incrementBlocksScheduled(blkMovingInfo.getTargetStorageType());
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received BlockMovingTask {}"
argument_list|,
name|blkMovingInfo
argument_list|)
expr_stmt|;
name|BlockMovingTask
name|blockMovingTask
init|=
operator|new
name|BlockMovingTask
argument_list|(
name|blkMovingInfo
argument_list|)
decl_stmt|;
name|mCompletionServ
operator|.
name|submit
argument_list|(
name|blockMovingTask
argument_list|)
expr_stmt|;
block|}
DECL|class|ExternalBlocksMovementsStatusHandler
specifier|private
class|class
name|ExternalBlocksMovementsStatusHandler
implements|implements
name|BlocksMovementsStatusHandler
block|{
annotation|@
name|Override
DECL|method|handle (BlockMovementAttemptFinished attemptedMove)
specifier|public
name|void
name|handle
parameter_list|(
name|BlockMovementAttemptFinished
name|attemptedMove
parameter_list|)
block|{
name|service
operator|.
name|notifyStorageMovementAttemptFinishedBlk
argument_list|(
name|attemptedMove
operator|.
name|getTargetDatanode
argument_list|()
argument_list|,
name|attemptedMove
operator|.
name|getTargetType
argument_list|()
argument_list|,
name|attemptedMove
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This class encapsulates the process of moving the block replica to the    * given target.    */
DECL|class|BlockMovingTask
specifier|private
class|class
name|BlockMovingTask
implements|implements
name|Callable
argument_list|<
name|BlockMovementAttemptFinished
argument_list|>
block|{
DECL|field|blkMovingInfo
specifier|private
specifier|final
name|BlockMovingInfo
name|blkMovingInfo
decl_stmt|;
DECL|method|BlockMovingTask (BlockMovingInfo blkMovingInfo)
name|BlockMovingTask
parameter_list|(
name|BlockMovingInfo
name|blkMovingInfo
parameter_list|)
block|{
name|this
operator|.
name|blkMovingInfo
operator|=
name|blkMovingInfo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|BlockMovementAttemptFinished
name|call
parameter_list|()
block|{
name|BlockMovementStatus
name|blkMovementStatus
init|=
name|moveBlock
argument_list|()
decl_stmt|;
return|return
operator|new
name|BlockMovementAttemptFinished
argument_list|(
name|blkMovingInfo
operator|.
name|getBlock
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getSource
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getTarget
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getTargetStorageType
argument_list|()
argument_list|,
name|blkMovementStatus
argument_list|)
return|;
block|}
DECL|method|moveBlock ()
specifier|private
name|BlockMovementStatus
name|moveBlock
parameter_list|()
block|{
name|ExtendedBlock
name|eb
init|=
operator|new
name|ExtendedBlock
argument_list|(
name|nnc
operator|.
name|getBlockpoolID
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|KeyManager
name|km
init|=
name|nnc
operator|.
name|getKeyManager
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|accessToken
decl_stmt|;
try|try
block|{
name|accessToken
operator|=
name|km
operator|.
name|getAccessToken
argument_list|(
name|eb
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|blkMovingInfo
operator|.
name|getTargetStorageType
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO: handle failure retries
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to move block:{} from src:{} to destin:{} to satisfy "
operator|+
literal|"storageType:{}"
argument_list|,
name|blkMovingInfo
operator|.
name|getBlock
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getSource
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getTarget
argument_list|()
argument_list|,
name|blkMovingInfo
operator|.
name|getTargetStorageType
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|BlockMovementStatus
operator|.
name|DN_BLK_STORAGE_MOVEMENT_FAILURE
return|;
block|}
return|return
name|blkDispatcher
operator|.
name|moveBlock
argument_list|(
name|blkMovingInfo
argument_list|,
name|saslClient
argument_list|,
name|eb
argument_list|,
operator|new
name|Socket
argument_list|()
argument_list|,
name|km
argument_list|,
name|accessToken
argument_list|)
return|;
block|}
block|}
comment|/**    * Cleanup the resources.    */
DECL|method|cleanUp ()
name|void
name|cleanUp
parameter_list|()
block|{
name|blkMovementTracker
operator|.
name|stopTracking
argument_list|()
expr_stmt|;
if|if
condition|(
name|movementTrackerThread
operator|!=
literal|null
condition|)
block|{
name|movementTrackerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

