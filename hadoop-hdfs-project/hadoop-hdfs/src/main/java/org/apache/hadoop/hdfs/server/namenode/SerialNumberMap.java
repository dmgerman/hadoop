begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Map object to serial number.  *   *<p>It allows to get the serial number of an object, if the object doesn't  * exist in the map, a new serial number increased by 1 is generated to  * map to the object. The mapped object can also be got through the serial  * number.  *   *<p>The map is thread-safe.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|SerialNumberMap
specifier|public
class|class
name|SerialNumberMap
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|max
specifier|private
specifier|final
name|int
name|max
decl_stmt|;
DECL|field|current
specifier|private
specifier|final
name|AtomicInteger
name|current
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|t2i
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
name|t2i
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|T
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|i2t
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|>
name|i2t
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|SerialNumberMap (SerialNumberManager snm)
name|SerialNumberMap
parameter_list|(
name|SerialNumberManager
name|snm
parameter_list|)
block|{
name|this
argument_list|(
name|snm
operator|.
name|name
argument_list|()
argument_list|,
name|snm
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|SerialNumberMap (String name, int bitLength)
name|SerialNumberMap
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|bitLength
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|max
operator|=
operator|(
literal|1
operator|<<
name|bitLength
operator|)
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|get (T t)
specifier|public
name|int
name|get
parameter_list|(
name|T
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Integer
name|sn
init|=
name|t2i
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|==
literal|null
condition|)
block|{
name|sn
operator|=
name|current
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
if|if
condition|(
name|sn
operator|>
name|max
condition|)
block|{
name|current
operator|.
name|getAndDecrement
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|name
operator|+
literal|": serial number map is full"
argument_list|)
throw|;
block|}
name|Integer
name|old
init|=
name|t2i
operator|.
name|putIfAbsent
argument_list|(
name|t
argument_list|,
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
return|return
name|old
return|;
block|}
name|i2t
operator|.
name|put
argument_list|(
name|sn
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|sn
return|;
block|}
DECL|method|get (int i)
specifier|public
name|T
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|t
init|=
name|i2t
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|name
operator|+
literal|": serial number "
operator|+
name|i
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
return|return
name|t
return|;
block|}
DECL|method|getMax ()
name|int
name|getMax
parameter_list|()
block|{
return|return
name|max
return|;
block|}
DECL|method|entrySet ()
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|T
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|i2t
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|i2t
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"current="
operator|+
name|current
operator|+
literal|",\n"
operator|+
literal|"max="
operator|+
name|max
operator|+
literal|",\n  t2i="
operator|+
name|t2i
operator|+
literal|",\n  i2t="
operator|+
name|i2t
return|;
block|}
block|}
end_class

end_unit

