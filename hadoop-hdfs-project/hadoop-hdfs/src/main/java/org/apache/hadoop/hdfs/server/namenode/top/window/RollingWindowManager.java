begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.top.window
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|Metrics2Util
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|Metrics2Util
operator|.
name|TopN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A class to manage the set of {@link RollingWindow}s. This class is the  * interface of metrics system to the {@link RollingWindow}s to retrieve the  * current top metrics.  *<p>  * Thread-safety is provided by each {@link RollingWindow} being thread-safe as  * well as {@link ConcurrentHashMap} for the collection of them.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|RollingWindowManager
specifier|public
class|class
name|RollingWindowManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RollingWindowManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|windowLenMs
specifier|private
specifier|final
name|int
name|windowLenMs
decl_stmt|;
DECL|field|bucketsPerWindow
specifier|private
specifier|final
name|int
name|bucketsPerWindow
decl_stmt|;
comment|// e.g., 10 buckets per minute
DECL|field|topUsersCnt
specifier|private
specifier|final
name|int
name|topUsersCnt
decl_stmt|;
comment|// e.g., report top 10 metrics
DECL|class|RollingWindowMap
specifier|static
specifier|private
class|class
name|RollingWindowMap
extends|extends
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|RollingWindow
argument_list|>
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6785807073237052051L
decl_stmt|;
block|}
comment|/**    * Represents a snapshot of the rolling window. It contains one Op per     * operation in the window, with ranked users for each Op.    */
DECL|class|TopWindow
specifier|public
specifier|static
class|class
name|TopWindow
block|{
DECL|field|windowMillis
specifier|private
specifier|final
name|int
name|windowMillis
decl_stmt|;
DECL|field|top
specifier|private
specifier|final
name|List
argument_list|<
name|Op
argument_list|>
name|top
decl_stmt|;
DECL|method|TopWindow (int windowMillis)
specifier|public
name|TopWindow
parameter_list|(
name|int
name|windowMillis
parameter_list|)
block|{
name|this
operator|.
name|windowMillis
operator|=
name|windowMillis
expr_stmt|;
name|this
operator|.
name|top
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
DECL|method|addOp (Op op)
specifier|public
name|void
name|addOp
parameter_list|(
name|Op
name|op
parameter_list|)
block|{
name|top
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
DECL|method|getWindowLenMs ()
specifier|public
name|int
name|getWindowLenMs
parameter_list|()
block|{
return|return
name|windowMillis
return|;
block|}
DECL|method|getOps ()
specifier|public
name|List
argument_list|<
name|Op
argument_list|>
name|getOps
parameter_list|()
block|{
return|return
name|top
return|;
block|}
block|}
comment|/**    * Represents an operation within a TopWindow. It contains a ranked     * set of the top users for the operation.    */
DECL|class|Op
specifier|public
specifier|static
class|class
name|Op
block|{
DECL|field|opType
specifier|private
specifier|final
name|String
name|opType
decl_stmt|;
DECL|field|topUsers
specifier|private
specifier|final
name|List
argument_list|<
name|User
argument_list|>
name|topUsers
decl_stmt|;
DECL|field|totalCount
specifier|private
specifier|final
name|long
name|totalCount
decl_stmt|;
DECL|method|Op (String opType, long totalCount)
specifier|public
name|Op
parameter_list|(
name|String
name|opType
parameter_list|,
name|long
name|totalCount
parameter_list|)
block|{
name|this
operator|.
name|opType
operator|=
name|opType
expr_stmt|;
name|this
operator|.
name|topUsers
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalCount
operator|=
name|totalCount
expr_stmt|;
block|}
DECL|method|addUser (User u)
specifier|public
name|void
name|addUser
parameter_list|(
name|User
name|u
parameter_list|)
block|{
name|topUsers
operator|.
name|add
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
DECL|method|getOpType ()
specifier|public
name|String
name|getOpType
parameter_list|()
block|{
return|return
name|opType
return|;
block|}
DECL|method|getTopUsers ()
specifier|public
name|List
argument_list|<
name|User
argument_list|>
name|getTopUsers
parameter_list|()
block|{
return|return
name|topUsers
return|;
block|}
DECL|method|getTotalCount ()
specifier|public
name|long
name|getTotalCount
parameter_list|()
block|{
return|return
name|totalCount
return|;
block|}
block|}
comment|/**    * Represents a user who called an Op within a TopWindow. Specifies the     * user and the number of times the user called the operation.    */
DECL|class|User
specifier|public
specifier|static
class|class
name|User
block|{
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|count
specifier|private
specifier|final
name|long
name|count
decl_stmt|;
DECL|method|User (String user, long count)
specifier|public
name|User
parameter_list|(
name|String
name|user
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|getCount ()
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
comment|/**    * A mapping from each reported metric to its {@link RollingWindowMap} that    * maintains the set of {@link RollingWindow}s for the users that have    * operated on that metric.    */
DECL|field|metricMap
specifier|public
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|RollingWindowMap
argument_list|>
name|metricMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|RollingWindowMap
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|RollingWindowManager (Configuration conf, int reportingPeriodMs)
specifier|public
name|RollingWindowManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|reportingPeriodMs
parameter_list|)
block|{
name|windowLenMs
operator|=
name|reportingPeriodMs
expr_stmt|;
name|bucketsPerWindow
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_BUCKETS_PER_WINDOW_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|NNTOP_BUCKETS_PER_WINDOW_DEFAULT
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|bucketsPerWindow
operator|>
literal|0
argument_list|,
literal|"a window should have at least one bucket"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|bucketsPerWindow
operator|<=
name|windowLenMs
argument_list|,
literal|"the minimum size of a bucket is 1 ms"
argument_list|)
expr_stmt|;
comment|//same-size buckets
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|windowLenMs
operator|%
name|bucketsPerWindow
operator|==
literal|0
argument_list|,
literal|"window size must be a multiplication of number of buckets"
argument_list|)
expr_stmt|;
name|topUsersCnt
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|NNTOP_NUM_USERS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|NNTOP_NUM_USERS_DEFAULT
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|topUsersCnt
operator|>
literal|0
argument_list|,
literal|"the number of requested top users must be at least 1"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called when the metric command is changed by "delta" units at time "time"    * via user "user"    *    * @param time the time of the event    * @param command the metric that is updated, e.g., the operation name    * @param user the user that updated the metric    * @param delta the amount of change in the metric, e.g., +1    */
DECL|method|recordMetric (long time, String command, String user, long delta)
specifier|public
name|void
name|recordMetric
parameter_list|(
name|long
name|time
parameter_list|,
name|String
name|command
parameter_list|,
name|String
name|user
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
name|RollingWindow
name|window
init|=
name|getRollingWindow
argument_list|(
name|command
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|window
operator|.
name|incAt
argument_list|(
name|time
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
comment|/**    * Take a snapshot of current top users in the past period.    *    * @param time the current time    * @return a TopWindow describing the top users for each metric in the     * window.    */
DECL|method|snapshot (long time)
specifier|public
name|TopWindow
name|snapshot
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|TopWindow
name|window
init|=
operator|new
name|TopWindow
argument_list|(
name|windowLenMs
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|metricNames
init|=
name|metricMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"iterating in reported metrics, size={} values={}"
argument_list|,
name|metricNames
operator|.
name|size
argument_list|()
argument_list|,
name|metricNames
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RollingWindowMap
argument_list|>
name|entry
range|:
name|metricMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|metricName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RollingWindowMap
name|rollingWindows
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|TopN
name|topN
init|=
name|getTopUsersForMetric
argument_list|(
name|time
argument_list|,
name|metricName
argument_list|,
name|rollingWindows
argument_list|)
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|topN
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|Op
name|op
init|=
operator|new
name|Op
argument_list|(
name|metricName
argument_list|,
name|topN
operator|.
name|getTotal
argument_list|()
argument_list|)
decl_stmt|;
name|window
operator|.
name|addOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
comment|// Reverse the users from the TopUsers using a stack,
comment|// since we'd like them sorted in descending rather than ascending order
name|Stack
argument_list|<
name|NameValuePair
argument_list|>
name|reverse
init|=
operator|new
name|Stack
argument_list|<
name|NameValuePair
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|reverse
operator|.
name|push
argument_list|(
name|topN
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|NameValuePair
name|userEntry
init|=
name|reverse
operator|.
name|pop
argument_list|()
decl_stmt|;
name|User
name|user
init|=
operator|new
name|User
argument_list|(
name|userEntry
operator|.
name|getName
argument_list|()
argument_list|,
name|userEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|op
operator|.
name|addUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|window
return|;
block|}
comment|/**    * Calculates the top N users over a time interval.    *     * @param time the current time    * @param metricName Name of metric    * @return    */
DECL|method|getTopUsersForMetric (long time, String metricName, RollingWindowMap rollingWindows)
specifier|private
name|TopN
name|getTopUsersForMetric
parameter_list|(
name|long
name|time
parameter_list|,
name|String
name|metricName
parameter_list|,
name|RollingWindowMap
name|rollingWindows
parameter_list|)
block|{
name|TopN
name|topN
init|=
operator|new
name|TopN
argument_list|(
name|topUsersCnt
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RollingWindow
argument_list|>
argument_list|>
name|iterator
init|=
name|rollingWindows
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RollingWindow
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RollingWindow
name|aWindow
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|windowSum
init|=
name|aWindow
operator|.
name|getSum
argument_list|(
name|time
argument_list|)
decl_stmt|;
comment|// do the gc here
if|if
condition|(
name|windowSum
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"gc window of metric: {} userName: {}"
argument_list|,
name|metricName
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"offer window of metric: {} userName: {} sum: {}"
argument_list|,
name|metricName
argument_list|,
name|userName
argument_list|,
name|windowSum
argument_list|)
expr_stmt|;
name|topN
operator|.
name|offer
argument_list|(
operator|new
name|NameValuePair
argument_list|(
name|userName
argument_list|,
name|windowSum
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"topN users size for command {} is: {}"
argument_list|,
name|metricName
argument_list|,
name|topN
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|topN
return|;
block|}
comment|/**    * Get the rolling window specified by metric and user.    *    * @param metric the updated metric    * @param user the user that updated the metric    * @return the rolling window    */
DECL|method|getRollingWindow (String metric, String user)
specifier|private
name|RollingWindow
name|getRollingWindow
parameter_list|(
name|String
name|metric
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|RollingWindowMap
name|rwMap
init|=
name|metricMap
operator|.
name|get
argument_list|(
name|metric
argument_list|)
decl_stmt|;
if|if
condition|(
name|rwMap
operator|==
literal|null
condition|)
block|{
name|rwMap
operator|=
operator|new
name|RollingWindowMap
argument_list|()
expr_stmt|;
name|RollingWindowMap
name|prevRwMap
init|=
name|metricMap
operator|.
name|putIfAbsent
argument_list|(
name|metric
argument_list|,
name|rwMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevRwMap
operator|!=
literal|null
condition|)
block|{
name|rwMap
operator|=
name|prevRwMap
expr_stmt|;
block|}
block|}
name|RollingWindow
name|window
init|=
name|rwMap
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
operator|!=
literal|null
condition|)
block|{
return|return
name|window
return|;
block|}
name|window
operator|=
operator|new
name|RollingWindow
argument_list|(
name|windowLenMs
argument_list|,
name|bucketsPerWindow
argument_list|)
expr_stmt|;
name|RollingWindow
name|prevWindow
init|=
name|rwMap
operator|.
name|putIfAbsent
argument_list|(
name|user
argument_list|,
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevWindow
operator|!=
literal|null
condition|)
block|{
name|window
operator|=
name|prevWindow
expr_stmt|;
block|}
return|return
name|window
return|;
block|}
block|}
end_class

end_unit

