begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|LongBitFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Class to pack an AclEntry into an integer.<br>  * An ACL entry is represented by a 32-bit integer in Big Endian format.<br>  *  * Note:  this format is used both in-memory and on-disk.  Changes will be  * incompatible.  *  */
end_comment

begin_enum
DECL|enum|AclEntryStatusFormat
specifier|public
enum|enum
name|AclEntryStatusFormat
implements|implements
name|LongBitFormat
operator|.
name|Enum
block|{
DECL|enumConstant|PERMISSION
name|PERMISSION
argument_list|(
literal|null
argument_list|,
literal|3
argument_list|)
block|,
DECL|enumConstant|TYPE
name|TYPE
argument_list|(
name|PERMISSION
operator|.
name|BITS
argument_list|,
literal|2
argument_list|)
block|,
DECL|enumConstant|SCOPE
name|SCOPE
argument_list|(
name|TYPE
operator|.
name|BITS
argument_list|,
literal|1
argument_list|)
block|,
DECL|enumConstant|NAME
name|NAME
argument_list|(
name|SCOPE
operator|.
name|BITS
argument_list|,
literal|24
argument_list|)
block|;
DECL|field|FSACTION_VALUES
specifier|private
specifier|static
specifier|final
name|FsAction
index|[]
name|FSACTION_VALUES
init|=
name|FsAction
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|field|ACL_ENTRY_SCOPE_VALUES
specifier|private
specifier|static
specifier|final
name|AclEntryScope
index|[]
name|ACL_ENTRY_SCOPE_VALUES
init|=
name|AclEntryScope
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|field|ACL_ENTRY_TYPE_VALUES
specifier|private
specifier|static
specifier|final
name|AclEntryType
index|[]
name|ACL_ENTRY_TYPE_VALUES
init|=
name|AclEntryType
operator|.
name|values
argument_list|()
decl_stmt|;
DECL|field|BITS
specifier|private
specifier|final
name|LongBitFormat
name|BITS
decl_stmt|;
DECL|method|AclEntryStatusFormat (LongBitFormat previous, int length)
specifier|private
name|AclEntryStatusFormat
parameter_list|(
name|LongBitFormat
name|previous
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|BITS
operator|=
operator|new
name|LongBitFormat
argument_list|(
name|name
argument_list|()
argument_list|,
name|previous
argument_list|,
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getScope (int aclEntry)
specifier|static
name|AclEntryScope
name|getScope
parameter_list|(
name|int
name|aclEntry
parameter_list|)
block|{
name|int
name|ordinal
init|=
operator|(
name|int
operator|)
name|SCOPE
operator|.
name|BITS
operator|.
name|retrieve
argument_list|(
name|aclEntry
argument_list|)
decl_stmt|;
return|return
name|ACL_ENTRY_SCOPE_VALUES
index|[
name|ordinal
index|]
return|;
block|}
DECL|method|getType (int aclEntry)
specifier|static
name|AclEntryType
name|getType
parameter_list|(
name|int
name|aclEntry
parameter_list|)
block|{
name|int
name|ordinal
init|=
operator|(
name|int
operator|)
name|TYPE
operator|.
name|BITS
operator|.
name|retrieve
argument_list|(
name|aclEntry
argument_list|)
decl_stmt|;
return|return
name|ACL_ENTRY_TYPE_VALUES
index|[
name|ordinal
index|]
return|;
block|}
DECL|method|getPermission (int aclEntry)
specifier|static
name|FsAction
name|getPermission
parameter_list|(
name|int
name|aclEntry
parameter_list|)
block|{
name|int
name|ordinal
init|=
operator|(
name|int
operator|)
name|PERMISSION
operator|.
name|BITS
operator|.
name|retrieve
argument_list|(
name|aclEntry
argument_list|)
decl_stmt|;
return|return
name|FSACTION_VALUES
index|[
name|ordinal
index|]
return|;
block|}
DECL|method|getName (int aclEntry)
specifier|static
name|String
name|getName
parameter_list|(
name|int
name|aclEntry
parameter_list|)
block|{
return|return
name|getName
argument_list|(
name|aclEntry
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getName (int aclEntry, SerialNumberManager.StringTable stringTable)
specifier|static
name|String
name|getName
parameter_list|(
name|int
name|aclEntry
parameter_list|,
name|SerialNumberManager
operator|.
name|StringTable
name|stringTable
parameter_list|)
block|{
name|SerialNumberManager
name|snm
init|=
name|getSerialNumberManager
argument_list|(
name|getType
argument_list|(
name|aclEntry
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|snm
operator|!=
literal|null
condition|)
block|{
name|int
name|nid
init|=
operator|(
name|int
operator|)
name|NAME
operator|.
name|BITS
operator|.
name|retrieve
argument_list|(
name|aclEntry
argument_list|)
decl_stmt|;
return|return
name|snm
operator|.
name|getString
argument_list|(
name|nid
argument_list|,
name|stringTable
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|toInt (AclEntry aclEntry)
specifier|static
name|int
name|toInt
parameter_list|(
name|AclEntry
name|aclEntry
parameter_list|)
block|{
name|long
name|aclEntryInt
init|=
literal|0
decl_stmt|;
name|aclEntryInt
operator|=
name|SCOPE
operator|.
name|BITS
operator|.
name|combine
argument_list|(
name|aclEntry
operator|.
name|getScope
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|,
name|aclEntryInt
argument_list|)
expr_stmt|;
name|aclEntryInt
operator|=
name|TYPE
operator|.
name|BITS
operator|.
name|combine
argument_list|(
name|aclEntry
operator|.
name|getType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|,
name|aclEntryInt
argument_list|)
expr_stmt|;
name|aclEntryInt
operator|=
name|PERMISSION
operator|.
name|BITS
operator|.
name|combine
argument_list|(
name|aclEntry
operator|.
name|getPermission
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|,
name|aclEntryInt
argument_list|)
expr_stmt|;
name|SerialNumberManager
name|snm
init|=
name|getSerialNumberManager
argument_list|(
name|aclEntry
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|snm
operator|!=
literal|null
condition|)
block|{
name|int
name|nid
init|=
name|snm
operator|.
name|getSerialNumber
argument_list|(
name|aclEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|aclEntryInt
operator|=
name|NAME
operator|.
name|BITS
operator|.
name|combine
argument_list|(
name|nid
argument_list|,
name|aclEntryInt
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|aclEntryInt
return|;
block|}
DECL|method|toAclEntry (int aclEntry)
specifier|static
name|AclEntry
name|toAclEntry
parameter_list|(
name|int
name|aclEntry
parameter_list|)
block|{
return|return
name|toAclEntry
argument_list|(
name|aclEntry
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|toAclEntry (int aclEntry, SerialNumberManager.StringTable stringTable)
specifier|static
name|AclEntry
name|toAclEntry
parameter_list|(
name|int
name|aclEntry
parameter_list|,
name|SerialNumberManager
operator|.
name|StringTable
name|stringTable
parameter_list|)
block|{
return|return
operator|new
name|AclEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setScope
argument_list|(
name|getScope
argument_list|(
name|aclEntry
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|getType
argument_list|(
name|aclEntry
argument_list|)
argument_list|)
operator|.
name|setPermission
argument_list|(
name|getPermission
argument_list|(
name|aclEntry
argument_list|)
argument_list|)
operator|.
name|setName
argument_list|(
name|getName
argument_list|(
name|aclEntry
argument_list|,
name|stringTable
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|toInt (List<AclEntry> aclEntries)
specifier|public
specifier|static
name|int
index|[]
name|toInt
parameter_list|(
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclEntries
parameter_list|)
block|{
name|int
index|[]
name|entries
init|=
operator|new
name|int
index|[
name|aclEntries
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|entries
index|[
name|i
index|]
operator|=
name|toInt
argument_list|(
name|aclEntries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|entries
return|;
block|}
DECL|method|getSerialNumberManager (AclEntryType type)
specifier|private
specifier|static
name|SerialNumberManager
name|getSerialNumberManager
parameter_list|(
name|AclEntryType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|USER
case|:
return|return
name|SerialNumberManager
operator|.
name|USER
return|;
case|case
name|GROUP
case|:
return|return
name|SerialNumberManager
operator|.
name|GROUP
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|BITS
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
end_enum

end_unit

