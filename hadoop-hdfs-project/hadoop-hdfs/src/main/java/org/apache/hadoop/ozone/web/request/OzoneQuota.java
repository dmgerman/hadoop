begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.request
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|request
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnore
import|;
end_import

begin_comment
comment|/**  * represents an OzoneQuota Object that can be applied to  * a storage volume.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|OzoneQuota
specifier|public
class|class
name|OzoneQuota
block|{
DECL|field|unit
specifier|private
name|Units
name|unit
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
comment|/** Quota Units.*/
DECL|enum|Units
DECL|enumConstant|UNDEFINED
DECL|enumConstant|BYTES
DECL|enumConstant|MB
DECL|enumConstant|GB
DECL|enumConstant|TB
specifier|public
enum|enum
name|Units
block|{
name|UNDEFINED
block|,
name|BYTES
block|,
name|MB
block|,
name|GB
block|,
name|TB
block|}
comment|/**    * Returns size.    *    * @return int    */
DECL|method|getSize ()
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**    * Returns Units.    *    * @return Unit in MB, GB or TB    */
DECL|method|getUnit ()
specifier|public
name|Units
name|getUnit
parameter_list|()
block|{
return|return
name|unit
return|;
block|}
comment|/**    * Constructs a default Quota object.    */
DECL|method|OzoneQuota ()
specifier|public
name|OzoneQuota
parameter_list|()
block|{
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|unit
operator|=
name|Units
operator|.
name|UNDEFINED
expr_stmt|;
block|}
comment|/**    * Constructor for Ozone Quota.    *    * @param size - Integer Size    * @param unit MB, GB  or TB    */
DECL|method|OzoneQuota (int size, Units unit)
specifier|public
name|OzoneQuota
parameter_list|(
name|int
name|size
parameter_list|,
name|Units
name|unit
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|unit
operator|=
name|unit
expr_stmt|;
block|}
comment|/**    * Formats a quota as a string.    *    * @param quota the quota to format    * @return string representation of quota    */
DECL|method|formatQuota (OzoneQuota quota)
specifier|public
specifier|static
name|String
name|formatQuota
parameter_list|(
name|OzoneQuota
name|quota
parameter_list|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|quota
operator|.
name|size
argument_list|)
operator|+
name|quota
operator|.
name|unit
return|;
block|}
comment|/**    * Parses a user provided string and returns the    * Quota Object.    *    * @param quotaString Quota String    *    * @return OzoneQuota object    *    * @throws IllegalArgumentException    */
DECL|method|parseQuota (String quotaString)
specifier|public
specifier|static
name|OzoneQuota
name|parseQuota
parameter_list|(
name|String
name|quotaString
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|quotaString
operator|==
literal|null
operator|)
operator|||
operator|(
name|quotaString
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Quota string cannot be null or empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isRemove
argument_list|(
name|quotaString
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Remove is invalid in this context."
argument_list|)
throw|;
block|}
name|String
name|uppercase
init|=
name|quotaString
operator|.
name|toUpperCase
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|size
init|=
literal|""
decl_stmt|;
name|int
name|nSize
decl_stmt|;
name|Units
name|currUnit
init|=
name|Units
operator|.
name|MB
decl_stmt|;
name|Boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|uppercase
operator|.
name|endsWith
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_MB
argument_list|)
condition|)
block|{
name|size
operator|=
name|uppercase
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uppercase
operator|.
name|length
argument_list|()
operator|-
name|Header
operator|.
name|OZONE_QUOTA_MB
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|currUnit
operator|=
name|Units
operator|.
name|MB
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|uppercase
operator|.
name|endsWith
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_GB
argument_list|)
condition|)
block|{
name|size
operator|=
name|uppercase
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uppercase
operator|.
name|length
argument_list|()
operator|-
name|Header
operator|.
name|OZONE_QUOTA_GB
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|currUnit
operator|=
name|Units
operator|.
name|GB
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|uppercase
operator|.
name|endsWith
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_TB
argument_list|)
condition|)
block|{
name|size
operator|=
name|uppercase
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uppercase
operator|.
name|length
argument_list|()
operator|-
name|Header
operator|.
name|OZONE_QUOTA_TB
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|currUnit
operator|=
name|Units
operator|.
name|TB
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|uppercase
operator|.
name|endsWith
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_BYTES
argument_list|)
condition|)
block|{
name|size
operator|=
name|uppercase
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uppercase
operator|.
name|length
argument_list|()
operator|-
name|Header
operator|.
name|OZONE_QUOTA_BYTES
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|currUnit
operator|=
name|Units
operator|.
name|BYTES
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Quota unit not recognized. Supported values are BYTES, MB, GB and "
operator|+
literal|"TB."
argument_list|)
throw|;
block|}
name|nSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|nSize
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Quota cannot be negative."
argument_list|)
throw|;
block|}
return|return
operator|new
name|OzoneQuota
argument_list|(
name|nSize
argument_list|,
name|currUnit
argument_list|)
return|;
block|}
comment|/**    * Checks if Quota String is just as remove operation.    *    * @param quotaString User provided quota String    *    * @return True if it is Remove, false otherwise    */
DECL|method|isRemove (String quotaString)
specifier|public
specifier|static
name|boolean
name|isRemove
parameter_list|(
name|String
name|quotaString
parameter_list|)
block|{
return|return
operator|(
name|quotaString
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|quotaString
operator|.
name|compareToIgnoreCase
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_REMOVE
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
comment|/**    * Returns size in Bytes or -1 if there is no Quota.    */
annotation|@
name|JsonIgnore
DECL|method|sizeInBytes ()
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
switch|switch
condition|(
name|this
operator|.
name|unit
condition|)
block|{
case|case
name|BYTES
case|:
return|return
name|this
operator|.
name|getSize
argument_list|()
return|;
case|case
name|MB
case|:
return|return
name|this
operator|.
name|getSize
argument_list|()
operator|*
name|OzoneConsts
operator|.
name|MB
return|;
case|case
name|GB
case|:
return|return
name|this
operator|.
name|getSize
argument_list|()
operator|*
name|OzoneConsts
operator|.
name|GB
return|;
case|case
name|TB
case|:
return|return
name|this
operator|.
name|getSize
argument_list|()
operator|*
name|OzoneConsts
operator|.
name|TB
return|;
case|case
name|UNDEFINED
case|:
default|default:
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**    * Returns OzoneQuota corresponding to size in bytes.    *    * @param sizeInBytes size in bytes to be converted    *    * @return OzoneQuota object    */
DECL|method|getOzoneQuota (long sizeInBytes)
specifier|public
specifier|static
name|OzoneQuota
name|getOzoneQuota
parameter_list|(
name|long
name|sizeInBytes
parameter_list|)
block|{
name|long
name|size
decl_stmt|;
name|Units
name|unit
decl_stmt|;
if|if
condition|(
name|sizeInBytes
operator|%
name|OzoneConsts
operator|.
name|TB
operator|==
literal|0
condition|)
block|{
name|size
operator|=
name|sizeInBytes
operator|/
name|OzoneConsts
operator|.
name|TB
expr_stmt|;
name|unit
operator|=
name|Units
operator|.
name|TB
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sizeInBytes
operator|%
name|OzoneConsts
operator|.
name|GB
operator|==
literal|0
condition|)
block|{
name|size
operator|=
name|sizeInBytes
operator|/
name|OzoneConsts
operator|.
name|GB
expr_stmt|;
name|unit
operator|=
name|Units
operator|.
name|GB
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sizeInBytes
operator|%
name|OzoneConsts
operator|.
name|MB
operator|==
literal|0
condition|)
block|{
name|size
operator|=
name|sizeInBytes
operator|/
name|OzoneConsts
operator|.
name|MB
expr_stmt|;
name|unit
operator|=
name|Units
operator|.
name|MB
expr_stmt|;
block|}
else|else
block|{
name|size
operator|=
name|sizeInBytes
expr_stmt|;
name|unit
operator|=
name|Units
operator|.
name|BYTES
expr_stmt|;
block|}
return|return
operator|new
name|OzoneQuota
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|,
name|unit
argument_list|)
return|;
block|}
block|}
end_class

end_unit

