begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|ProvidedStorageMap
operator|.
name|ProvidedBlockList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|RwLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Used to load provided blocks in the {@link BlockManager}.  */
end_comment

begin_class
DECL|class|BlockProvider
specifier|public
specifier|abstract
class|class
name|BlockProvider
implements|implements
name|Iterable
argument_list|<
name|Block
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProvidedStorageMap
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|lock
specifier|private
name|RwLock
name|lock
decl_stmt|;
DECL|field|bm
specifier|private
name|BlockManager
name|bm
decl_stmt|;
DECL|field|storage
specifier|private
name|DatanodeStorageInfo
name|storage
decl_stmt|;
DECL|field|hasDNs
specifier|private
name|boolean
name|hasDNs
init|=
literal|false
decl_stmt|;
comment|/**    * @param lock the namesystem lock    * @param bm block manager    * @param storage storage for provided blocks    */
DECL|method|init (RwLock lock, BlockManager bm, DatanodeStorageInfo storage)
name|void
name|init
parameter_list|(
name|RwLock
name|lock
parameter_list|,
name|BlockManager
name|bm
parameter_list|,
name|DatanodeStorageInfo
name|storage
parameter_list|)
block|{
name|this
operator|.
name|bm
operator|=
name|bm
expr_stmt|;
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
block|}
comment|/**    * start the processing of block report for provided blocks.    * @throws IOException    */
DECL|method|start ()
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|lock
operator|.
name|hasWriteLock
argument_list|()
operator|:
literal|"Not holding write lock"
assert|;
if|if
condition|(
name|hasDNs
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling process first blk report from storage: "
operator|+
name|storage
argument_list|)
expr_stmt|;
comment|// first pass; periodic refresh should call bm.processReport
name|bm
operator|.
name|processFirstBlockReport
argument_list|(
name|storage
argument_list|,
operator|new
name|ProvidedBlockList
argument_list|(
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hasDNs
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

