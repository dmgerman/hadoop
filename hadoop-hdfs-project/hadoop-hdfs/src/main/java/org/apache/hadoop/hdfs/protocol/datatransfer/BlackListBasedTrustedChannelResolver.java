begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|CombinedIPList
import|;
end_import

begin_comment
comment|/**  * Implements {@link TrustedChannelResolver}  * to trust ips/host/subnets based on a blackList.  */
end_comment

begin_class
DECL|class|BlackListBasedTrustedChannelResolver
specifier|public
class|class
name|BlackListBasedTrustedChannelResolver
extends|extends
name|TrustedChannelResolver
block|{
DECL|field|blackListForServer
specifier|private
name|CombinedIPList
name|blackListForServer
decl_stmt|;
DECL|field|blackListForClient
specifier|private
name|CombinedIPList
name|blackListForClient
decl_stmt|;
DECL|field|FIXED_BLACK_LIST_DEFAULT_LOCATION
specifier|private
specifier|static
specifier|final
name|String
name|FIXED_BLACK_LIST_DEFAULT_LOCATION
init|=
literal|"/etc/hadoop"
operator|+
literal|"/fixedBlackList"
decl_stmt|;
DECL|field|VARIABLE_BLACK_LIST_DEFAULT_LOCATION
specifier|private
specifier|static
specifier|final
name|String
name|VARIABLE_BLACK_LIST_DEFAULT_LOCATION
init|=
literal|"/etc/"
operator|+
literal|"hadoop/blackList"
decl_stmt|;
comment|/**    * Path to the file containing subnets and ip addresses to form    * fixed BlackList. Server side config.    */
DECL|field|DFS_DATATRANSFER_SERVER_FIXED_BLACK_LIST_FILE
specifier|public
specifier|static
specifier|final
name|String
name|DFS_DATATRANSFER_SERVER_FIXED_BLACK_LIST_FILE
init|=
literal|"dfs.datatransfer.server.fixedBlackList.file"
decl_stmt|;
comment|/**    * Enables/Disables variable BlackList. Server side config.    */
DECL|field|DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_ENABLE
init|=
literal|"dfs.datatransfer.server.variableBlackList.enable"
decl_stmt|;
comment|/**    * Path to the file containing subnets and ip addresses to form    * variable BlackList. Server side config.    */
DECL|field|DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_FILE
specifier|public
specifier|static
specifier|final
name|String
name|DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_FILE
init|=
literal|"dfs.datatransfer.server.variableBlackList.file"
decl_stmt|;
comment|/**    * Time in seconds after which the variable BlackList file is checked for    * updates. Server side config.    */
specifier|public
specifier|static
specifier|final
name|String
DECL|field|DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_CACHE_SECS
name|DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_CACHE_SECS
init|=
literal|"dfs."
operator|+
literal|"datatransfer.server.variableBlackList.cache.secs"
decl_stmt|;
comment|/**    * Path to the file containing subnets and ip addresses to    * form fixed BlackList. This key is for client.    */
DECL|field|DFS_DATATRANSFER_CLIENT_FIXED_BLACK_LIST_FILE
specifier|public
specifier|static
specifier|final
name|String
name|DFS_DATATRANSFER_CLIENT_FIXED_BLACK_LIST_FILE
init|=
literal|"dfs.datatransfer.client.fixedBlackList.file"
decl_stmt|;
comment|/**    * Enables/Disables variable BlackList. This key is for client.    */
DECL|field|DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_ENABLE
init|=
literal|"dfs.datatransfer.client.variableBlackList.enable"
decl_stmt|;
comment|/**    * Path to the file to containing subnets and ip addresses to form variable    * BlackList. This key is for client.    */
DECL|field|DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_FILE
specifier|public
specifier|static
specifier|final
name|String
name|DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_FILE
init|=
literal|"dfs.datatransfer.client.variableBlackList.file"
decl_stmt|;
comment|/**    * Time in seconds after which the variable BlackList file is    * checked for updates. This key is for client.    */
specifier|public
specifier|static
specifier|final
name|String
DECL|field|DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_CACHE_SECS
name|DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_CACHE_SECS
init|=
literal|"dfs.datatransfer.client.variableBlackList.cache.secs"
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|fixedFile
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATATRANSFER_SERVER_FIXED_BLACK_LIST_FILE
argument_list|,
name|FIXED_BLACK_LIST_DEFAULT_LOCATION
argument_list|)
decl_stmt|;
name|String
name|variableFile
init|=
literal|null
decl_stmt|;
name|long
name|expiryTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_ENABLE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|variableFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_FILE
argument_list|,
name|VARIABLE_BLACK_LIST_DEFAULT_LOCATION
argument_list|)
expr_stmt|;
name|expiryTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_DATATRANSFER_SERVER_VARIABLE_BLACK_LIST_CACHE_SECS
argument_list|,
literal|3600
argument_list|)
operator|*
literal|1000
expr_stmt|;
block|}
name|blackListForServer
operator|=
operator|new
name|CombinedIPList
argument_list|(
name|fixedFile
argument_list|,
name|variableFile
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
name|fixedFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATATRANSFER_CLIENT_FIXED_BLACK_LIST_FILE
argument_list|,
name|fixedFile
argument_list|)
expr_stmt|;
name|expiryTime
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_ENABLE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|variableFile
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_FILE
argument_list|,
name|variableFile
argument_list|)
expr_stmt|;
name|expiryTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_DATATRANSFER_CLIENT_VARIABLE_BLACK_LIST_CACHE_SECS
argument_list|,
literal|3600
argument_list|)
operator|*
literal|1000
expr_stmt|;
block|}
name|blackListForClient
operator|=
operator|new
name|CombinedIPList
argument_list|(
name|fixedFile
argument_list|,
name|variableFile
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
block|}
DECL|method|isTrusted ()
specifier|public
name|boolean
name|isTrusted
parameter_list|()
block|{
try|try
block|{
return|return
operator|!
name|blackListForClient
operator|.
name|isIn
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|isTrusted (InetAddress clientAddress)
specifier|public
name|boolean
name|isTrusted
parameter_list|(
name|InetAddress
name|clientAddress
parameter_list|)
block|{
return|return
operator|!
name|blackListForServer
operator|.
name|isIn
argument_list|(
name|clientAddress
operator|.
name|getHostAddress
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

