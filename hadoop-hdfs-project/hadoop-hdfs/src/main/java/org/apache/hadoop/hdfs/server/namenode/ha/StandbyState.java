begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_comment
comment|/**  * Namenode standby state. In this state the namenode acts as warm standby and  * keeps the following updated:  *<ul>  *<li>Namespace by getting the edits.</li>  *<li>Block location information by receiving block reports and blocks  * received from the datanodes.</li>  *</ul>  *   * It does not handle read/write/checkpoint operations.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StandbyState
specifier|public
class|class
name|StandbyState
extends|extends
name|HAState
block|{
comment|// TODO: consider implementing a ObserverState instead of using the flag.
DECL|field|isObserver
specifier|private
specifier|final
name|boolean
name|isObserver
decl_stmt|;
DECL|method|StandbyState ()
specifier|public
name|StandbyState
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|StandbyState (boolean isObserver)
specifier|public
name|StandbyState
parameter_list|(
name|boolean
name|isObserver
parameter_list|)
block|{
name|super
argument_list|(
name|isObserver
condition|?
name|HAServiceState
operator|.
name|OBSERVER
else|:
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|this
operator|.
name|isObserver
operator|=
name|isObserver
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setState (HAContext context, HAState s)
specifier|public
name|void
name|setState
parameter_list|(
name|HAContext
name|context
parameter_list|,
name|HAState
name|s
parameter_list|)
throws|throws
name|ServiceFailedException
block|{
if|if
condition|(
name|s
operator|==
name|NameNode
operator|.
name|ACTIVE_STATE
operator|||
operator|(
operator|!
name|isObserver
operator|&&
name|s
operator|==
name|NameNode
operator|.
name|OBSERVER_STATE
operator|)
operator|||
operator|(
name|isObserver
operator|&&
name|s
operator|==
name|NameNode
operator|.
name|STANDBY_STATE
operator|)
condition|)
block|{
name|setStateInternal
argument_list|(
name|context
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|setState
argument_list|(
name|context
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|enterState (HAContext context)
specifier|public
name|void
name|enterState
parameter_list|(
name|HAContext
name|context
parameter_list|)
throws|throws
name|ServiceFailedException
block|{
try|try
block|{
name|context
operator|.
name|startStandbyServices
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed to start standby services"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|prepareToExitState (HAContext context)
specifier|public
name|void
name|prepareToExitState
parameter_list|(
name|HAContext
name|context
parameter_list|)
throws|throws
name|ServiceFailedException
block|{
name|context
operator|.
name|prepareToStopStandbyServices
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exitState (HAContext context)
specifier|public
name|void
name|exitState
parameter_list|(
name|HAContext
name|context
parameter_list|)
throws|throws
name|ServiceFailedException
block|{
try|try
block|{
name|context
operator|.
name|stopStandbyServices
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Failed to stop standby services"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|checkOperation (HAContext context, OperationCategory op)
specifier|public
name|void
name|checkOperation
parameter_list|(
name|HAContext
name|context
parameter_list|,
name|OperationCategory
name|op
parameter_list|)
throws|throws
name|StandbyException
block|{
if|if
condition|(
name|op
operator|==
name|OperationCategory
operator|.
name|UNCHECKED
operator|||
operator|(
name|op
operator|==
name|OperationCategory
operator|.
name|READ
operator|&&
name|context
operator|.
name|allowStaleReads
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|String
name|faq
init|=
literal|". Visit https://s.apache.org/sbnn-error"
decl_stmt|;
name|String
name|msg
init|=
literal|"Operation category "
operator|+
name|op
operator|+
literal|" is not supported in state "
operator|+
name|context
operator|.
name|getState
argument_list|()
operator|+
name|faq
decl_stmt|;
throw|throw
operator|new
name|StandbyException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|shouldPopulateReplQueues ()
specifier|public
name|boolean
name|shouldPopulateReplQueues
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|isObserver
condition|?
literal|"observer"
else|:
literal|"standby"
return|;
block|}
block|}
end_class

end_unit

