begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|RemoteLocationContext
import|;
end_import

begin_comment
comment|/**  * A single in a remote namespace consisting of a nameservice ID  * and a HDFS path.  */
end_comment

begin_class
DECL|class|RemoteLocation
specifier|public
class|class
name|RemoteLocation
implements|implements
name|RemoteLocationContext
block|{
comment|/** Identifier of the remote namespace for this location. */
DECL|field|nameserviceId
specifier|private
name|String
name|nameserviceId
decl_stmt|;
comment|/** Path in the remote location. */
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
comment|/**    * Create a new remote location.    *    * @param nsId Destination namespace.    * @param pPath Path in the destination namespace.    */
DECL|method|RemoteLocation (String nsId, String pPath)
specifier|public
name|RemoteLocation
parameter_list|(
name|String
name|nsId
parameter_list|,
name|String
name|pPath
parameter_list|)
block|{
name|this
operator|.
name|nameserviceId
operator|=
name|nsId
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|pPath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNameserviceId ()
specifier|public
name|String
name|getNameserviceId
parameter_list|()
block|{
return|return
name|this
operator|.
name|nameserviceId
return|;
block|}
annotation|@
name|Override
DECL|method|getDest ()
specifier|public
name|String
name|getDest
parameter_list|()
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|nameserviceId
operator|+
literal|"->"
operator|+
name|this
operator|.
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|(
literal|17
argument_list|,
literal|31
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|nameserviceId
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|path
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|.
name|getClass
argument_list|()
operator|==
name|this
operator|.
name|getClass
argument_list|()
operator|&&
name|obj
operator|.
name|hashCode
argument_list|()
operator|==
name|this
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

