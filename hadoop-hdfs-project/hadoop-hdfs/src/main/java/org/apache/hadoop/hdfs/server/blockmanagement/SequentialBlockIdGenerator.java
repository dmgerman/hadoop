begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|SequentialNumber
import|;
end_import

begin_comment
comment|/**  * Generate the next valid block ID by incrementing the maximum block  * ID allocated so far, starting at 2^30+1.  *  * Block IDs used to be allocated randomly in the past. Hence we may  * find some conflicts while stepping through the ID space sequentially.  * However given the sparsity of the ID space, conflicts should be rare  * and can be skipped over when detected.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|SequentialBlockIdGenerator
specifier|public
class|class
name|SequentialBlockIdGenerator
extends|extends
name|SequentialNumber
block|{
comment|/**    * The last reserved block ID.    */
DECL|field|LAST_RESERVED_BLOCK_ID
specifier|public
specifier|static
specifier|final
name|long
name|LAST_RESERVED_BLOCK_ID
init|=
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|method|SequentialBlockIdGenerator (BlockManager blockManagerRef)
name|SequentialBlockIdGenerator
parameter_list|(
name|BlockManager
name|blockManagerRef
parameter_list|)
block|{
name|super
argument_list|(
name|LAST_RESERVED_BLOCK_ID
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockManager
operator|=
name|blockManagerRef
expr_stmt|;
block|}
annotation|@
name|Override
comment|// NumberGenerator
DECL|method|nextValue ()
specifier|public
name|long
name|nextValue
parameter_list|()
block|{
name|Block
name|b
init|=
operator|new
name|Block
argument_list|(
name|super
operator|.
name|nextValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// There may be an occasional conflict with randomly generated
comment|// block IDs. Skip over the conflicts.
while|while
condition|(
name|isValidBlock
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|b
operator|.
name|setBlockId
argument_list|(
name|super
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|.
name|getBlockId
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"All positive block IDs are used, "
operator|+
literal|"wrapping to negative IDs, "
operator|+
literal|"which might conflict with erasure coded block groups."
argument_list|)
throw|;
block|}
return|return
name|b
operator|.
name|getBlockId
argument_list|()
return|;
block|}
comment|/**    * Returns whether the given block is one pointed-to by a file.    */
DECL|method|isValidBlock (Block b)
specifier|private
name|boolean
name|isValidBlock
parameter_list|(
name|Block
name|b
parameter_list|)
block|{
return|return
operator|(
name|blockManager
operator|.
name|getBlockCollection
argument_list|(
name|b
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

