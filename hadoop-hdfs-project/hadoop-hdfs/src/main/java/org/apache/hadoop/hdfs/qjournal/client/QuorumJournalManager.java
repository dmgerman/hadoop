begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|NewEpochResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|PrepareRecoveryResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|protocol
operator|.
name|QJournalProtocolProtos
operator|.
name|SegmentStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|EditLogOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|JournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|JournalSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * A JournalManager that writes to a set of remote JournalNodes,  * requiring a quorum of nodes to ack each write.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|QuorumJournalManager
specifier|public
class|class
name|QuorumJournalManager
implements|implements
name|JournalManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QuorumJournalManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Timeouts for which the QJM will wait for each of the following actions.
DECL|field|startSegmentTimeoutMs
specifier|private
specifier|final
name|int
name|startSegmentTimeoutMs
decl_stmt|;
DECL|field|prepareRecoveryTimeoutMs
specifier|private
specifier|final
name|int
name|prepareRecoveryTimeoutMs
decl_stmt|;
DECL|field|acceptRecoveryTimeoutMs
specifier|private
specifier|final
name|int
name|acceptRecoveryTimeoutMs
decl_stmt|;
DECL|field|finalizeSegmentTimeoutMs
specifier|private
specifier|final
name|int
name|finalizeSegmentTimeoutMs
decl_stmt|;
DECL|field|selectInputStreamsTimeoutMs
specifier|private
specifier|final
name|int
name|selectInputStreamsTimeoutMs
decl_stmt|;
comment|// Since these don't occur during normal operation, we can
comment|// use rather lengthy timeouts, and don't need to make them
comment|// configurable.
DECL|field|FORMAT_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|int
name|FORMAT_TIMEOUT_MS
init|=
literal|60000
decl_stmt|;
DECL|field|HASDATA_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|int
name|HASDATA_TIMEOUT_MS
init|=
literal|60000
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|URI
name|uri
decl_stmt|;
DECL|field|nsInfo
specifier|private
specifier|final
name|NamespaceInfo
name|nsInfo
decl_stmt|;
DECL|field|isActiveWriter
specifier|private
name|boolean
name|isActiveWriter
decl_stmt|;
DECL|field|loggers
specifier|private
specifier|final
name|AsyncLoggerSet
name|loggers
decl_stmt|;
DECL|method|QuorumJournalManager (Configuration conf, URI uri, NamespaceInfo nsInfo)
specifier|public
name|QuorumJournalManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|,
name|nsInfo
argument_list|,
name|IPCLoggerChannel
operator|.
name|FACTORY
argument_list|)
expr_stmt|;
block|}
DECL|method|QuorumJournalManager (Configuration conf, URI uri, NamespaceInfo nsInfo, AsyncLogger.Factory loggerFactory)
name|QuorumJournalManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|,
name|AsyncLogger
operator|.
name|Factory
name|loggerFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|conf
operator|!=
literal|null
argument_list|,
literal|"must be configured"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|nsInfo
operator|=
name|nsInfo
expr_stmt|;
name|this
operator|.
name|loggers
operator|=
operator|new
name|AsyncLoggerSet
argument_list|(
name|createLoggers
argument_list|(
name|loggerFactory
argument_list|)
argument_list|)
expr_stmt|;
comment|// Configure timeouts.
name|this
operator|.
name|startSegmentTimeoutMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_START_SEGMENT_TIMEOUT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_START_SEGMENT_TIMEOUT_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|prepareRecoveryTimeoutMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_PREPARE_RECOVERY_TIMEOUT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_PREPARE_RECOVERY_TIMEOUT_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|acceptRecoveryTimeoutMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_ACCEPT_RECOVERY_TIMEOUT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_ACCEPT_RECOVERY_TIMEOUT_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|finalizeSegmentTimeoutMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_FINALIZE_SEGMENT_TIMEOUT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_FINALIZE_SEGMENT_TIMEOUT_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|selectInputStreamsTimeoutMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_SELECT_INPUT_STREAMS_TIMEOUT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_QJOURNAL_SELECT_INPUT_STREAMS_TIMEOUT_DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|createLoggers ( AsyncLogger.Factory factory)
specifier|protected
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|createLoggers
parameter_list|(
name|AsyncLogger
operator|.
name|Factory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createLoggers
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|,
name|nsInfo
argument_list|,
name|factory
argument_list|)
return|;
block|}
DECL|method|parseJournalId (URI uri)
specifier|static
name|String
name|parseJournalId
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Bad URI '%s': must identify journal in path component"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|String
name|journalId
init|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|checkJournalId
argument_list|(
name|journalId
argument_list|)
expr_stmt|;
return|return
name|journalId
return|;
block|}
DECL|method|checkJournalId (String jid)
specifier|public
specifier|static
name|void
name|checkJournalId
parameter_list|(
name|String
name|jid
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|jid
operator|!=
literal|null
operator|&&
operator|!
name|jid
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|jid
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|!
name|jid
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
argument_list|,
literal|"bad journal id: "
operator|+
name|jid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|format (NamespaceInfo nsInfo)
specifier|public
name|void
name|format
parameter_list|(
name|NamespaceInfo
name|nsInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|QuorumCall
argument_list|<
name|AsyncLogger
argument_list|,
name|Void
argument_list|>
name|call
init|=
name|loggers
operator|.
name|format
argument_list|(
name|nsInfo
argument_list|)
decl_stmt|;
try|try
block|{
name|call
operator|.
name|waitFor
argument_list|(
name|loggers
operator|.
name|size
argument_list|()
argument_list|,
name|loggers
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
name|FORMAT_TIMEOUT_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted waiting for format() response"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Timed out waiting for format() response"
argument_list|)
throw|;
block|}
if|if
condition|(
name|call
operator|.
name|countExceptions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|call
operator|.
name|rethrowException
argument_list|(
literal|"Could not format one or more JournalNodes"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasSomeData ()
specifier|public
name|boolean
name|hasSomeData
parameter_list|()
throws|throws
name|IOException
block|{
name|QuorumCall
argument_list|<
name|AsyncLogger
argument_list|,
name|Boolean
argument_list|>
name|call
init|=
name|loggers
operator|.
name|isFormatted
argument_list|()
decl_stmt|;
try|try
block|{
name|call
operator|.
name|waitFor
argument_list|(
name|loggers
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|HASDATA_TIMEOUT_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while determining if JNs have data"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Timed out waiting for response from loggers"
argument_list|)
throw|;
block|}
if|if
condition|(
name|call
operator|.
name|countExceptions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|call
operator|.
name|rethrowException
argument_list|(
literal|"Unable to check if JNs are ready for formatting"
argument_list|)
expr_stmt|;
block|}
comment|// If any of the loggers returned with a non-empty manifest, then
comment|// we should prompt for format.
for|for
control|(
name|Boolean
name|hasData
range|:
name|call
operator|.
name|getResults
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hasData
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// Otherwise, none were formatted, we can safely format.
return|return
literal|false
return|;
block|}
comment|/**    * Run recovery/synchronization for a specific segment.    * Postconditions:    *<ul>    *<li>This segment will be finalized on a majority    * of nodes.</li>    *<li>All nodes which contain the finalized segment will    * agree on the length.</li>    *</ul>    *     * @param segmentTxId the starting txid of the segment    * @throws IOException    */
DECL|method|recoverUnclosedSegment (long segmentTxId)
specifier|private
name|void
name|recoverUnclosedSegment
parameter_list|(
name|long
name|segmentTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|segmentTxId
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Beginning recovery of unclosed segment starting at txid "
operator|+
name|segmentTxId
argument_list|)
expr_stmt|;
comment|// Step 1. Prepare recovery
name|QuorumCall
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|prepare
init|=
name|loggers
operator|.
name|prepareRecovery
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|prepareResponses
init|=
name|loggers
operator|.
name|waitForWriteQuorum
argument_list|(
name|prepare
argument_list|,
name|prepareRecoveryTimeoutMs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovery prepare phase complete. Responses:\n"
operator|+
name|QuorumCall
operator|.
name|mapToString
argument_list|(
name|prepareResponses
argument_list|)
argument_list|)
expr_stmt|;
comment|// Determine the logger who either:
comment|// a) Has already accepted a previous proposal that's higher than any
comment|//    other
comment|//
comment|//  OR, if no such logger exists:
comment|//
comment|// b) Has the longest log starting at this transaction ID
comment|// TODO: we should collect any "ties" and pass the URL for all of them
comment|// when syncing, so we can tolerate failure during recovery better.
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|bestEntry
init|=
name|Collections
operator|.
name|max
argument_list|(
name|prepareResponses
operator|.
name|entrySet
argument_list|()
argument_list|,
name|SegmentRecoveryComparator
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|AsyncLogger
name|bestLogger
init|=
name|bestEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PrepareRecoveryResponseProto
name|bestResponse
init|=
name|bestEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Log the above decision, check invariants.
if|if
condition|(
name|bestResponse
operator|.
name|hasAcceptedInEpoch
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using already-accepted recovery for segment "
operator|+
literal|"starting at txid "
operator|+
name|segmentTxId
operator|+
literal|": "
operator|+
name|bestEntry
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bestResponse
operator|.
name|hasSegmentState
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using longest log: "
operator|+
name|bestEntry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// None of the responses to prepareRecovery() had a segment at the given
comment|// txid. This can happen for example in the following situation:
comment|// - 3 JNs: JN1, JN2, JN3
comment|// - writer starts segment 101 on JN1, then crashes before
comment|//   writing to JN2 and JN3
comment|// - during newEpoch(), we saw the segment on JN1 and decide to
comment|//   recover segment 101
comment|// - before prepare(), JN1 crashes, and we only talk to JN2 and JN3,
comment|//   neither of which has any entry for this log.
comment|// In this case, it is allowed to do nothing for recovery, since the
comment|// segment wasn't started on a quorum of nodes.
comment|// Sanity check: we should only get here if none of the responses had
comment|// a log. This should be a postcondition of the recovery comparator,
comment|// but a bug in the comparator might cause us to get here.
for|for
control|(
name|PrepareRecoveryResponseProto
name|resp
range|:
name|prepareResponses
operator|.
name|values
argument_list|()
control|)
block|{
assert|assert
operator|!
name|resp
operator|.
name|hasSegmentState
argument_list|()
operator|:
literal|"One of the loggers had a response, but no best logger "
operator|+
literal|"was found."
assert|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"None of the responders had a log to recover: "
operator|+
name|QuorumCall
operator|.
name|mapToString
argument_list|(
name|prepareResponses
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// TODO: check that md5s match up between any "tied" logs
name|SegmentStateProto
name|logToSync
init|=
name|bestResponse
operator|.
name|getSegmentState
argument_list|()
decl_stmt|;
assert|assert
name|segmentTxId
operator|==
name|logToSync
operator|.
name|getStartTxId
argument_list|()
assert|;
comment|// Sanity check: none of the loggers should be aware of a higher
comment|// txid than the txid we intend to truncate to
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|PrepareRecoveryResponseProto
argument_list|>
name|e
range|:
name|prepareResponses
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AsyncLogger
name|logger
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PrepareRecoveryResponseProto
name|resp
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|hasLastCommittedTxId
argument_list|()
operator|&&
name|resp
operator|.
name|getLastCommittedTxId
argument_list|()
operator|>
name|logToSync
operator|.
name|getEndTxId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Decided to synchronize log to "
operator|+
name|logToSync
operator|+
literal|" but logger "
operator|+
name|logger
operator|+
literal|" had seen txid "
operator|+
name|resp
operator|.
name|getLastCommittedTxId
argument_list|()
operator|+
literal|" committed"
argument_list|)
throw|;
block|}
block|}
name|URL
name|syncFromUrl
init|=
name|bestLogger
operator|.
name|buildURLToFetchLogs
argument_list|(
name|segmentTxId
argument_list|)
decl_stmt|;
name|QuorumCall
argument_list|<
name|AsyncLogger
argument_list|,
name|Void
argument_list|>
name|accept
init|=
name|loggers
operator|.
name|acceptRecovery
argument_list|(
name|logToSync
argument_list|,
name|syncFromUrl
argument_list|)
decl_stmt|;
name|loggers
operator|.
name|waitForWriteQuorum
argument_list|(
name|accept
argument_list|,
name|acceptRecoveryTimeoutMs
argument_list|)
expr_stmt|;
comment|// TODO:
comment|// we should only try to finalize loggers who successfully synced above
comment|// eg if a logger was down, we don't want to send the finalize request.
comment|// write a test for this!
name|QuorumCall
argument_list|<
name|AsyncLogger
argument_list|,
name|Void
argument_list|>
name|finalize
init|=
name|loggers
operator|.
name|finalizeLogSegment
argument_list|(
name|logToSync
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|logToSync
operator|.
name|getEndTxId
argument_list|()
argument_list|)
decl_stmt|;
name|loggers
operator|.
name|waitForWriteQuorum
argument_list|(
name|finalize
argument_list|,
name|finalizeSegmentTimeoutMs
argument_list|)
expr_stmt|;
block|}
DECL|method|createLoggers (Configuration conf, URI uri, NamespaceInfo nsInfo, AsyncLogger.Factory factory)
specifier|static
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|createLoggers
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|,
name|NamespaceInfo
name|nsInfo
parameter_list|,
name|AsyncLogger
operator|.
name|Factory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|AsyncLogger
argument_list|>
name|ret
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|addrs
init|=
name|getLoggerAddresses
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|String
name|jid
init|=
name|parseJournalId
argument_list|(
name|uri
argument_list|)
decl_stmt|;
for|for
control|(
name|InetSocketAddress
name|addr
range|:
name|addrs
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createLogger
argument_list|(
name|conf
argument_list|,
name|nsInfo
argument_list|,
name|jid
argument_list|,
name|addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|getLoggerAddresses (URI uri)
specifier|private
specifier|static
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|getLoggerAddresses
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|authority
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|authority
operator|!=
literal|null
operator|&&
operator|!
name|authority
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"URI has no authority: "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|authority
argument_list|,
literal|';'
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|=
name|parts
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parts
operator|.
name|length
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Quorum journal URI '"
operator|+
name|uri
operator|+
literal|"' has an even number "
operator|+
literal|"of Journal Nodes specified. This is not recommended!"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|addrs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|addr
range|:
name|parts
control|)
block|{
name|addrs
operator|.
name|add
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_RPC_PORT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|addrs
return|;
block|}
annotation|@
name|Override
DECL|method|startLogSegment (long txId)
specifier|public
name|EditLogOutputStream
name|startLogSegment
parameter_list|(
name|long
name|txId
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|isActiveWriter
argument_list|,
literal|"must recover segments before starting a new one"
argument_list|)
expr_stmt|;
name|QuorumCall
argument_list|<
name|AsyncLogger
argument_list|,
name|Void
argument_list|>
name|q
init|=
name|loggers
operator|.
name|startLogSegment
argument_list|(
name|txId
argument_list|)
decl_stmt|;
name|loggers
operator|.
name|waitForWriteQuorum
argument_list|(
name|q
argument_list|,
name|startSegmentTimeoutMs
argument_list|)
expr_stmt|;
return|return
operator|new
name|QuorumOutputStream
argument_list|(
name|loggers
argument_list|,
name|txId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|finalizeLogSegment (long firstTxId, long lastTxId)
specifier|public
name|void
name|finalizeLogSegment
parameter_list|(
name|long
name|firstTxId
parameter_list|,
name|long
name|lastTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|QuorumCall
argument_list|<
name|AsyncLogger
argument_list|,
name|Void
argument_list|>
name|q
init|=
name|loggers
operator|.
name|finalizeLogSegment
argument_list|(
name|firstTxId
argument_list|,
name|lastTxId
argument_list|)
decl_stmt|;
name|loggers
operator|.
name|waitForWriteQuorum
argument_list|(
name|q
argument_list|,
name|finalizeSegmentTimeoutMs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setOutputBufferCapacity (int size)
specifier|public
name|void
name|setOutputBufferCapacity
parameter_list|(
name|int
name|size
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
DECL|method|purgeLogsOlderThan (long minTxIdToKeep)
specifier|public
name|void
name|purgeLogsOlderThan
parameter_list|(
name|long
name|minTxIdToKeep
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This purges asynchronously -- there's no need to wait for a quorum
comment|// here, because it's always OK to fail.
name|LOG
operator|.
name|info
argument_list|(
literal|"Purging remote journals older than txid "
operator|+
name|minTxIdToKeep
argument_list|)
expr_stmt|;
name|loggers
operator|.
name|purgeLogsOlderThan
argument_list|(
name|minTxIdToKeep
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recoverUnfinalizedSegments ()
specifier|public
name|void
name|recoverUnfinalizedSegments
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|isActiveWriter
argument_list|,
literal|"already active writer"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|AsyncLogger
argument_list|,
name|NewEpochResponseProto
argument_list|>
name|resps
init|=
name|loggers
operator|.
name|createNewUniqueEpoch
argument_list|(
name|nsInfo
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"newEpoch("
operator|+
name|loggers
operator|.
name|getEpoch
argument_list|()
operator|+
literal|") responses:\n"
operator|+
name|QuorumCall
operator|.
name|mapToString
argument_list|(
name|resps
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|mostRecentSegmentTxId
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|NewEpochResponseProto
name|r
range|:
name|resps
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasLastSegmentTxId
argument_list|()
condition|)
block|{
name|mostRecentSegmentTxId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|mostRecentSegmentTxId
argument_list|,
name|r
operator|.
name|getLastSegmentTxId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// On a completely fresh system, none of the journals have any
comment|// segments, so there's nothing to recover.
if|if
condition|(
name|mostRecentSegmentTxId
operator|!=
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
name|recoverUnclosedSegment
argument_list|(
name|mostRecentSegmentTxId
argument_list|)
expr_stmt|;
block|}
name|isActiveWriter
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|loggers
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|selectInputStreams (Collection<EditLogInputStream> streams, long fromTxnId, boolean inProgressOk)
specifier|public
name|void
name|selectInputStreams
parameter_list|(
name|Collection
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
parameter_list|,
name|long
name|fromTxnId
parameter_list|,
name|boolean
name|inProgressOk
parameter_list|)
throws|throws
name|IOException
block|{
name|QuorumCall
argument_list|<
name|AsyncLogger
argument_list|,
name|RemoteEditLogManifest
argument_list|>
name|q
init|=
name|loggers
operator|.
name|getEditLogManifest
argument_list|(
name|fromTxnId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|AsyncLogger
argument_list|,
name|RemoteEditLogManifest
argument_list|>
name|resps
init|=
name|loggers
operator|.
name|waitForWriteQuorum
argument_list|(
name|q
argument_list|,
name|selectInputStreamsTimeoutMs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"selectInputStream manifests:\n"
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|": "
argument_list|)
operator|.
name|join
argument_list|(
name|resps
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|PriorityQueue
argument_list|<
name|EditLogInputStream
argument_list|>
name|allStreams
init|=
operator|new
name|PriorityQueue
argument_list|<
name|EditLogInputStream
argument_list|>
argument_list|(
literal|64
argument_list|,
name|JournalSet
operator|.
name|EDIT_LOG_INPUT_STREAM_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AsyncLogger
argument_list|,
name|RemoteEditLogManifest
argument_list|>
name|e
range|:
name|resps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AsyncLogger
name|logger
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RemoteEditLogManifest
name|manifest
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|RemoteEditLog
name|remoteLog
range|:
name|manifest
operator|.
name|getLogs
argument_list|()
control|)
block|{
name|URL
name|url
init|=
name|logger
operator|.
name|buildURLToFetchLogs
argument_list|(
name|remoteLog
operator|.
name|getStartTxId
argument_list|()
argument_list|)
decl_stmt|;
name|EditLogInputStream
name|elis
init|=
name|EditLogFileInputStream
operator|.
name|fromUrl
argument_list|(
name|url
argument_list|,
name|remoteLog
operator|.
name|getStartTxId
argument_list|()
argument_list|,
name|remoteLog
operator|.
name|getEndTxId
argument_list|()
argument_list|,
name|remoteLog
operator|.
name|isInProgress
argument_list|()
argument_list|)
decl_stmt|;
name|allStreams
operator|.
name|add
argument_list|(
name|elis
argument_list|)
expr_stmt|;
block|}
block|}
name|JournalSet
operator|.
name|chainAndMakeRedundantStreams
argument_list|(
name|streams
argument_list|,
name|allStreams
argument_list|,
name|fromTxnId
argument_list|,
name|inProgressOk
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Quorum journal manager "
operator|+
name|uri
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLoggerSetForTests ()
name|AsyncLoggerSet
name|getLoggerSetForTests
parameter_list|()
block|{
return|return
name|loggers
return|;
block|}
block|}
end_class

end_unit

