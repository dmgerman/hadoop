begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ECInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|UnsupportedActionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/******************************************************************************  * DFSStripedInputStream reads from striped block groups, illustrated below:  *  * |<- Striped Block Group -> |  *  blk_0      blk_1       blk_2<- A striped block group has  *    |          |           |          {@link #dataBlkNum} blocks  *    v          v           v  * +------+   +------+   +------+  * |cell_0|   |cell_1|   |cell_2|<- The logical read order should be  * +------+   +------+   +------+       cell_0, cell_1, ...  * |cell_3|   |cell_4|   |cell_5|  * +------+   +------+   +------+  * |cell_6|   |cell_7|   |cell_8|  * +------+   +------+   +------+  * |cell_9|  * +------+<- A cell contains {@link #cellSize} bytes of data  *  * Three styles of read will eventually be supported:  *   1. Stateful read: TODO: HDFS-8033  *   2. pread without decode support  *     This is implemented by calculating the portion of read from each block and  *     issuing requests to each DataNode in parallel.  *   3. pread with decode support: TODO: will be supported after HDFS-7678  *****************************************************************************/
end_comment

begin_class
DECL|class|DFSStripedInputStream
specifier|public
class|class
name|DFSStripedInputStream
extends|extends
name|DFSInputStream
block|{
comment|/**    * This method plans the read portion from each block in the stripe    * @param dataBlkNum The number of data blocks in the striping group    * @param cellSize The size of each striping cell    * @param startInBlk Starting offset in the striped block    * @param len Length of the read request    * @param bufOffset  Initial offset in the result buffer    * @return array of {@link ReadPortion}, each representing the portion of I/O    *         for an individual block in the group    */
annotation|@
name|VisibleForTesting
DECL|method|planReadPortions (final int dataBlkNum, final int cellSize, final long startInBlk, final int len, int bufOffset)
specifier|static
name|ReadPortion
index|[]
name|planReadPortions
parameter_list|(
specifier|final
name|int
name|dataBlkNum
parameter_list|,
specifier|final
name|int
name|cellSize
parameter_list|,
specifier|final
name|long
name|startInBlk
parameter_list|,
specifier|final
name|int
name|len
parameter_list|,
name|int
name|bufOffset
parameter_list|)
block|{
name|ReadPortion
index|[]
name|results
init|=
operator|new
name|ReadPortion
index|[
name|dataBlkNum
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
operator|new
name|ReadPortion
argument_list|()
expr_stmt|;
block|}
comment|// cellIdxInBlk is the index of the cell in the block
comment|// E.g., cell_3 is the 2nd cell in blk_0
name|int
name|cellIdxInBlk
init|=
call|(
name|int
call|)
argument_list|(
name|startInBlk
operator|/
operator|(
name|cellSize
operator|*
name|dataBlkNum
operator|)
argument_list|)
decl_stmt|;
comment|// blkIdxInGroup is the index of the block in the striped block group
comment|// E.g., blk_2 is the 3rd block in the group
specifier|final
name|int
name|blkIdxInGroup
init|=
call|(
name|int
call|)
argument_list|(
name|startInBlk
operator|/
name|cellSize
operator|%
name|dataBlkNum
argument_list|)
decl_stmt|;
name|results
index|[
name|blkIdxInGroup
index|]
operator|.
name|startOffsetInBlock
operator|=
name|cellSize
operator|*
name|cellIdxInBlk
operator|+
name|startInBlk
operator|%
name|cellSize
expr_stmt|;
name|boolean
name|crossStripe
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|blkIdxInGroup
operator|+
name|i
operator|>=
name|dataBlkNum
operator|&&
operator|!
name|crossStripe
condition|)
block|{
name|cellIdxInBlk
operator|++
expr_stmt|;
name|crossStripe
operator|=
literal|true
expr_stmt|;
block|}
name|results
index|[
operator|(
name|blkIdxInGroup
operator|+
name|i
operator|)
operator|%
name|dataBlkNum
index|]
operator|.
name|startOffsetInBlock
operator|=
name|cellSize
operator|*
name|cellIdxInBlk
expr_stmt|;
block|}
name|int
name|firstCellLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|cellSize
operator|-
call|(
name|int
call|)
argument_list|(
name|startInBlk
operator|%
name|cellSize
argument_list|)
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|results
index|[
name|blkIdxInGroup
index|]
operator|.
name|offsetsInBuf
operator|.
name|add
argument_list|(
name|bufOffset
argument_list|)
expr_stmt|;
name|results
index|[
name|blkIdxInGroup
index|]
operator|.
name|lengths
operator|.
name|add
argument_list|(
name|firstCellLen
argument_list|)
expr_stmt|;
name|results
index|[
name|blkIdxInGroup
index|]
operator|.
name|readLength
operator|+=
name|firstCellLen
expr_stmt|;
name|int
name|i
init|=
operator|(
name|blkIdxInGroup
operator|+
literal|1
operator|)
operator|%
name|dataBlkNum
decl_stmt|;
for|for
control|(
name|int
name|done
init|=
name|firstCellLen
init|;
name|done
operator|<
name|len
condition|;
name|done
operator|+=
name|cellSize
control|)
block|{
name|ReadPortion
name|rp
init|=
name|results
index|[
name|i
index|]
decl_stmt|;
name|rp
operator|.
name|offsetsInBuf
operator|.
name|add
argument_list|(
name|done
operator|+
name|bufOffset
argument_list|)
expr_stmt|;
specifier|final
name|int
name|readLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
operator|-
name|done
argument_list|,
name|cellSize
argument_list|)
decl_stmt|;
name|rp
operator|.
name|lengths
operator|.
name|add
argument_list|(
name|readLen
argument_list|)
expr_stmt|;
name|rp
operator|.
name|readLength
operator|+=
name|readLen
expr_stmt|;
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|dataBlkNum
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|field|cellSize
specifier|private
specifier|final
name|int
name|cellSize
decl_stmt|;
DECL|field|dataBlkNum
specifier|private
specifier|final
name|short
name|dataBlkNum
decl_stmt|;
DECL|field|parityBlkNum
specifier|private
specifier|final
name|short
name|parityBlkNum
decl_stmt|;
DECL|field|ecInfo
specifier|private
specifier|final
name|ECInfo
name|ecInfo
decl_stmt|;
DECL|method|DFSStripedInputStream (DFSClient dfsClient, String src, boolean verifyChecksum)
name|DFSStripedInputStream
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|String
name|src
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dfsClient
argument_list|,
name|src
argument_list|,
name|verifyChecksum
argument_list|)
expr_stmt|;
comment|// ECInfo is restored from NN just before reading striped file.
name|ecInfo
operator|=
name|dfsClient
operator|.
name|getErasureCodingInfo
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|cellSize
operator|=
name|ecInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getChunkSize
argument_list|()
expr_stmt|;
name|dataBlkNum
operator|=
operator|(
name|short
operator|)
name|ecInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getNumDataUnits
argument_list|()
expr_stmt|;
name|parityBlkNum
operator|=
operator|(
name|short
operator|)
name|ecInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getNumParityUnits
argument_list|()
expr_stmt|;
name|DFSClient
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating an striped input stream for file "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (final ByteBuffer buf)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
specifier|final
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedActionException
argument_list|(
literal|"Stateful read is not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|read (final byte buf[], int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
specifier|final
name|byte
name|buf
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedActionException
argument_list|(
literal|"Stateful read is not supported"
argument_list|)
throw|;
block|}
comment|/**    * |<--------- LocatedStripedBlock (ID = 0) ---------> |    * LocatedBlock (0) | LocatedBlock (1) | LocatedBlock (2)    *                      ^    *                    offset    * On a striped file, the super method {@link DFSInputStream#getBlockAt}    * treats a striped block group as a single {@link LocatedBlock} object,    * which includes target in its range. This method adds the logic of:    *   1. Analyzing the index of required block based on offset    *   2. Parsing the block group to obtain the block location on that index    */
annotation|@
name|Override
DECL|method|getBlockAt (long blkStartOffset)
specifier|protected
name|LocatedBlock
name|getBlockAt
parameter_list|(
name|long
name|blkStartOffset
parameter_list|)
throws|throws
name|IOException
block|{
name|LocatedBlock
name|lb
init|=
name|super
operator|.
name|getBlockAt
argument_list|(
name|blkStartOffset
argument_list|)
decl_stmt|;
assert|assert
name|lb
operator|instanceof
name|LocatedStripedBlock
operator|:
literal|"NameNode should return a "
operator|+
literal|"LocatedStripedBlock for a striped file"
assert|;
name|int
name|idx
init|=
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|blkStartOffset
operator|-
name|lb
operator|.
name|getStartOffset
argument_list|()
operator|)
operator|/
name|cellSize
operator|)
operator|%
name|dataBlkNum
argument_list|)
decl_stmt|;
comment|// If indexing information is returned, iterate through the index array
comment|// to find the entry for position idx in the group
name|LocatedStripedBlock
name|lsb
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|lb
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|lsb
operator|.
name|getBlockIndices
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|lsb
operator|.
name|getBlockIndices
argument_list|()
index|[
name|i
index|]
operator|==
name|idx
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|DFSClient
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"getBlockAt for striped blocks, offset="
operator|+
name|blkStartOffset
operator|+
literal|". Obtained block "
operator|+
name|lb
operator|+
literal|", idx="
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|StripedBlockUtil
operator|.
name|constructInternalBlock
argument_list|(
name|lsb
argument_list|,
name|i
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|idx
argument_list|)
return|;
block|}
DECL|method|getBlockGroupAt (long offset)
specifier|private
name|LocatedBlock
name|getBlockGroupAt
parameter_list|(
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|getBlockAt
argument_list|(
name|offset
argument_list|)
return|;
block|}
comment|/**    * Real implementation of pread.    */
annotation|@
name|Override
DECL|method|fetchBlockByteRange (long blockStartOffset, long start, long end, byte[] buf, int offset, Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap)
specifier|protected
name|void
name|fetchBlockByteRange
parameter_list|(
name|long
name|blockStartOffset
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|futures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|stripedReadsService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|dfsClient
operator|.
name|getStripedReadsThreadPool
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|len
init|=
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|start
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Refresh the striped block group
name|LocatedBlock
name|block
init|=
name|getBlockGroupAt
argument_list|(
name|blockStartOffset
argument_list|)
decl_stmt|;
assert|assert
name|block
operator|instanceof
name|LocatedStripedBlock
operator|:
literal|"NameNode"
operator|+
literal|" should return a LocatedStripedBlock for a striped file"
assert|;
name|LocatedStripedBlock
name|blockGroup
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|block
decl_stmt|;
comment|// Planning the portion of I/O for each shard
name|ReadPortion
index|[]
name|readPortions
init|=
name|planReadPortions
argument_list|(
name|dataBlkNum
argument_list|,
name|cellSize
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
name|offset
argument_list|)
decl_stmt|;
comment|// Parse group to get chosen DN location
name|LocatedBlock
index|[]
name|blks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
name|blockGroup
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
decl_stmt|;
for|for
control|(
name|short
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
name|ReadPortion
name|rp
init|=
name|readPortions
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|rp
operator|.
name|readLength
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
name|DatanodeInfo
name|loc
init|=
name|blks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|StorageType
name|type
init|=
name|blks
index|[
name|i
index|]
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|DNAddrPair
name|dnAddr
init|=
operator|new
name|DNAddrPair
argument_list|(
name|loc
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|loc
operator|.
name|getXferAddr
argument_list|(
name|dfsClient
operator|.
name|getConf
argument_list|()
operator|.
name|isConnectToDnViaHostname
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|readCallable
init|=
name|getFromOneDataNode
argument_list|(
name|dnAddr
argument_list|,
name|blks
index|[
name|i
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|rp
operator|.
name|startOffsetInBlock
argument_list|,
name|rp
operator|.
name|startOffsetInBlock
operator|+
name|rp
operator|.
name|readLength
operator|-
literal|1
argument_list|,
name|buf
argument_list|,
name|rp
operator|.
name|getOffsets
argument_list|()
argument_list|,
name|rp
operator|.
name|getLengths
argument_list|()
argument_list|,
name|corruptedBlockMap
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|getFromDNRequest
init|=
name|stripedReadsService
operator|.
name|submit
argument_list|(
name|readCallable
argument_list|)
decl_stmt|;
name|DFSClient
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submitting striped read request for "
operator|+
name|blks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|futures
operator|.
name|put
argument_list|(
name|getFromDNRequest
argument_list|,
operator|(
name|int
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|futures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|waitNextCompletion
argument_list|(
name|stripedReadsService
argument_list|,
name|futures
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Ignore and retry
block|}
block|}
block|}
DECL|method|getFromOneDataNode (final DNAddrPair datanode, final long blockStartOffset, final long start, final long end, final byte[] buf, final int[] offsets, final int[] lengths, final Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap, final int hedgedReadId)
specifier|private
name|Callable
argument_list|<
name|Void
argument_list|>
name|getFromOneDataNode
parameter_list|(
specifier|final
name|DNAddrPair
name|datanode
parameter_list|,
specifier|final
name|long
name|blockStartOffset
parameter_list|,
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|end
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|,
specifier|final
name|int
index|[]
name|offsets
parameter_list|,
specifier|final
name|int
index|[]
name|lengths
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
parameter_list|,
specifier|final
name|int
name|hedgedReadId
parameter_list|)
block|{
specifier|final
name|Span
name|parentSpan
init|=
name|Trace
operator|.
name|currentSpan
argument_list|()
decl_stmt|;
return|return
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|TraceScope
name|scope
init|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"Parallel reading "
operator|+
name|hedgedReadId
argument_list|,
name|parentSpan
argument_list|)
decl_stmt|;
try|try
block|{
name|actualGetFromOneDataNode
argument_list|(
name|datanode
argument_list|,
name|blockStartOffset
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|buf
argument_list|,
name|offsets
argument_list|,
name|lengths
argument_list|,
name|corruptedBlockMap
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
DECL|method|waitNextCompletion (CompletionService<Void> stripedReadsService, Map<Future<Void>, Integer> futures)
specifier|private
name|void
name|waitNextCompletion
parameter_list|(
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|stripedReadsService
parameter_list|,
name|Map
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|futures
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|futures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"Futures already empty"
argument_list|)
throw|;
block|}
name|Future
argument_list|<
name|Void
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
try|try
block|{
name|future
operator|=
name|stripedReadsService
operator|.
name|take
argument_list|()
expr_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|futures
operator|.
name|remove
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|CancellationException
name|e
parameter_list|)
block|{
comment|// already logged in the Callable
name|futures
operator|.
name|remove
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"let's retry"
argument_list|)
throw|;
block|}
comment|/**    * This class represents the portion of I/O associated with each block in the    * striped block group.    */
DECL|class|ReadPortion
specifier|static
class|class
name|ReadPortion
block|{
comment|/**      * startOffsetInBlock      *     |      *     v      *     |<-lengths[0]->|<-  lengths[1]  ->|<-lengths[2]->|      * +------------------+------------------+----------------+      * |      cell_0      |      cell_3      |     cell_6     |<- blk_0      * +------------------+------------------+----------------+      *   _/                \_______________________      *  |                                          |      *  v offsetsInBuf[0]                          v offsetsInBuf[1]      * +------------------------------------------------------+      * |  cell_0     |      cell_1 and cell_2      |cell_3 ...|<- buf      * |  (partial)  |    (from blk_1 and blk_2)   |          |      * +------------------------------------------------------+      */
DECL|field|startOffsetInBlock
specifier|private
name|long
name|startOffsetInBlock
init|=
literal|0
decl_stmt|;
DECL|field|readLength
specifier|private
name|long
name|readLength
init|=
literal|0
decl_stmt|;
DECL|field|offsetsInBuf
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|offsetsInBuf
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|lengths
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|lengths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getOffsets ()
name|int
index|[]
name|getOffsets
parameter_list|()
block|{
name|int
index|[]
name|offsets
init|=
operator|new
name|int
index|[
name|offsetsInBuf
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|offsets
index|[
name|i
index|]
operator|=
name|offsetsInBuf
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|offsets
return|;
block|}
DECL|method|getLengths ()
name|int
index|[]
name|getLengths
parameter_list|()
block|{
name|int
index|[]
name|lens
init|=
operator|new
name|int
index|[
name|this
operator|.
name|lengths
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|lens
index|[
name|i
index|]
operator|=
name|this
operator|.
name|lengths
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|lens
return|;
block|}
DECL|method|getReadLength ()
name|long
name|getReadLength
parameter_list|()
block|{
return|return
name|readLength
return|;
block|}
DECL|method|getStartOffsetInBlock ()
name|long
name|getStartOffsetInBlock
parameter_list|()
block|{
return|return
name|startOffsetInBlock
return|;
block|}
block|}
block|}
end_class

end_unit

