begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ReadOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedStripedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|InvalidEncryptionKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockIdManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|convertIndex4Decode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|divideByteRangeIntoStripes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|finalizeDecodeInputs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|decodeAndFillBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|getNextCompletedStripedRead
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|getStartOffsetsForInternalBlocks
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|initDecodeInputs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|AlignedStripe
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|StripingChunk
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
operator|.
name|StripingChunkReadResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|ECSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * DFSStripedInputStream reads from striped block groups  */
end_comment

begin_class
DECL|class|DFSStripedInputStream
specifier|public
class|class
name|DFSStripedInputStream
extends|extends
name|DFSInputStream
block|{
DECL|class|ReaderRetryPolicy
specifier|private
specifier|static
class|class
name|ReaderRetryPolicy
block|{
DECL|field|fetchEncryptionKeyTimes
specifier|private
name|int
name|fetchEncryptionKeyTimes
init|=
literal|1
decl_stmt|;
DECL|field|fetchTokenTimes
specifier|private
name|int
name|fetchTokenTimes
init|=
literal|1
decl_stmt|;
DECL|method|refetchEncryptionKey ()
name|void
name|refetchEncryptionKey
parameter_list|()
block|{
name|fetchEncryptionKeyTimes
operator|--
expr_stmt|;
block|}
DECL|method|refetchToken ()
name|void
name|refetchToken
parameter_list|()
block|{
name|fetchTokenTimes
operator|--
expr_stmt|;
block|}
DECL|method|shouldRefetchEncryptionKey ()
name|boolean
name|shouldRefetchEncryptionKey
parameter_list|()
block|{
return|return
name|fetchEncryptionKeyTimes
operator|>
literal|0
return|;
block|}
DECL|method|shouldRefetchToken ()
name|boolean
name|shouldRefetchToken
parameter_list|()
block|{
return|return
name|fetchTokenTimes
operator|>
literal|0
return|;
block|}
block|}
comment|/** Used to indicate the buffered data's range in the block group */
DECL|class|StripeRange
specifier|private
specifier|static
class|class
name|StripeRange
block|{
comment|/** start offset in the block group (inclusive) */
DECL|field|offsetInBlock
specifier|final
name|long
name|offsetInBlock
decl_stmt|;
comment|/** length of the stripe range */
DECL|field|length
specifier|final
name|long
name|length
decl_stmt|;
DECL|method|StripeRange (long offsetInBlock, long length)
name|StripeRange
parameter_list|(
name|long
name|offsetInBlock
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|offsetInBlock
operator|>=
literal|0
operator|&&
name|length
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|offsetInBlock
operator|=
name|offsetInBlock
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|include (long pos)
name|boolean
name|include
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|>=
name|offsetInBlock
operator|&&
name|pos
operator|<
name|offsetInBlock
operator|+
name|length
return|;
block|}
block|}
DECL|class|BlockReaderInfo
specifier|private
specifier|static
class|class
name|BlockReaderInfo
block|{
DECL|field|reader
specifier|final
name|BlockReader
name|reader
decl_stmt|;
DECL|field|datanode
specifier|final
name|DatanodeInfo
name|datanode
decl_stmt|;
comment|/**      * when initializing block readers, their starting offsets are set to the same      * number: the smallest internal block offsets among all the readers. This is      * because it is possible that for some internal blocks we have to read      * "backwards" for decoding purpose. We thus use this offset array to track      * offsets for all the block readers so that we can skip data if necessary.      */
DECL|field|blockReaderOffset
name|long
name|blockReaderOffset
decl_stmt|;
DECL|field|targetBlock
name|LocatedBlock
name|targetBlock
decl_stmt|;
comment|/**      * We use this field to indicate whether we should use this reader. In case      * we hit any issue with this reader, we set this field to true and avoid      * using it for the next stripe.      */
DECL|field|shouldSkip
name|boolean
name|shouldSkip
init|=
literal|false
decl_stmt|;
DECL|method|BlockReaderInfo (BlockReader reader, LocatedBlock targetBlock, DatanodeInfo dn, long offset)
name|BlockReaderInfo
parameter_list|(
name|BlockReader
name|reader
parameter_list|,
name|LocatedBlock
name|targetBlock
parameter_list|,
name|DatanodeInfo
name|dn
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|targetBlock
operator|=
name|targetBlock
expr_stmt|;
name|this
operator|.
name|datanode
operator|=
name|dn
expr_stmt|;
name|this
operator|.
name|blockReaderOffset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|setOffset (long offset)
name|void
name|setOffset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|blockReaderOffset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|skip ()
name|void
name|skip
parameter_list|()
block|{
name|this
operator|.
name|shouldSkip
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|field|blockReaders
specifier|private
specifier|final
name|BlockReaderInfo
index|[]
name|blockReaders
decl_stmt|;
DECL|field|cellSize
specifier|private
specifier|final
name|int
name|cellSize
decl_stmt|;
DECL|field|dataBlkNum
specifier|private
specifier|final
name|short
name|dataBlkNum
decl_stmt|;
DECL|field|parityBlkNum
specifier|private
specifier|final
name|short
name|parityBlkNum
decl_stmt|;
DECL|field|groupSize
specifier|private
specifier|final
name|int
name|groupSize
decl_stmt|;
comment|/** the buffer for a complete stripe */
DECL|field|curStripeBuf
specifier|private
name|ByteBuffer
name|curStripeBuf
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|ECSchema
name|schema
decl_stmt|;
DECL|field|decoder
specifier|private
specifier|final
name|RawErasureDecoder
name|decoder
decl_stmt|;
comment|/**    * indicate the start/end offset of the current buffered stripe in the    * block group    */
DECL|field|curStripeRange
specifier|private
name|StripeRange
name|curStripeRange
decl_stmt|;
DECL|field|readingService
specifier|private
specifier|final
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|readingService
decl_stmt|;
DECL|field|retry
specifier|private
name|ReaderRetryPolicy
name|retry
decl_stmt|;
DECL|method|DFSStripedInputStream (DFSClient dfsClient, String src, boolean verifyChecksum, ECSchema schema, int cellSize, LocatedBlocks locatedBlocks)
name|DFSStripedInputStream
parameter_list|(
name|DFSClient
name|dfsClient
parameter_list|,
name|String
name|src
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|,
name|ECSchema
name|schema
parameter_list|,
name|int
name|cellSize
parameter_list|,
name|LocatedBlocks
name|locatedBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dfsClient
argument_list|,
name|src
argument_list|,
name|verifyChecksum
argument_list|,
name|locatedBlocks
argument_list|)
expr_stmt|;
assert|assert
name|schema
operator|!=
literal|null
assert|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|cellSize
operator|=
name|cellSize
expr_stmt|;
name|dataBlkNum
operator|=
operator|(
name|short
operator|)
name|schema
operator|.
name|getNumDataUnits
argument_list|()
expr_stmt|;
name|parityBlkNum
operator|=
operator|(
name|short
operator|)
name|schema
operator|.
name|getNumParityUnits
argument_list|()
expr_stmt|;
name|groupSize
operator|=
name|dataBlkNum
operator|+
name|parityBlkNum
expr_stmt|;
name|blockReaders
operator|=
operator|new
name|BlockReaderInfo
index|[
name|groupSize
index|]
expr_stmt|;
name|curStripeRange
operator|=
operator|new
name|StripeRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|readingService
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|dfsClient
operator|.
name|getStripedReadsThreadPool
argument_list|()
argument_list|)
expr_stmt|;
name|decoder
operator|=
name|CodecUtil
operator|.
name|createRSRawDecoder
argument_list|(
name|dfsClient
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
expr_stmt|;
if|if
condition|(
name|DFSClient
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating an striped input stream for file "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resetCurStripeBuffer ()
specifier|private
name|void
name|resetCurStripeBuffer
parameter_list|()
block|{
if|if
condition|(
name|curStripeBuf
operator|==
literal|null
condition|)
block|{
name|curStripeBuf
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|cellSize
operator|*
name|dataBlkNum
argument_list|)
expr_stmt|;
block|}
name|curStripeBuf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|curStripeRange
operator|=
operator|new
name|StripeRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (final ByteBuffer buf)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
specifier|final
name|ByteBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|ReaderStrategy
name|byteBufferReader
init|=
operator|new
name|ByteBufferStrategy
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|TraceScope
name|scope
init|=
name|dfsClient
operator|.
name|getPathTraceScope
argument_list|(
literal|"DFSInputStream#byteBufferRead"
argument_list|,
name|src
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|readWithStrategy
argument_list|(
name|byteBufferReader
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|remaining
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * When seeking into a new block group, create blockReader for each internal    * block in the group.    */
DECL|method|blockSeekTo (long target)
specifier|private
specifier|synchronized
name|void
name|blockSeekTo
parameter_list|(
name|long
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|getFileLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Attempted to read past end of file"
argument_list|)
throw|;
block|}
comment|// Will be getting a new BlockReader.
name|closeCurrentBlockReaders
argument_list|()
expr_stmt|;
comment|// Compute desired striped block group
name|LocatedStripedBlock
name|targetBlockGroup
init|=
name|getBlockGroupAt
argument_list|(
name|target
argument_list|)
decl_stmt|;
comment|// Update current position
name|this
operator|.
name|pos
operator|=
name|target
expr_stmt|;
name|this
operator|.
name|blockEnd
operator|=
name|targetBlockGroup
operator|.
name|getStartOffset
argument_list|()
operator|+
name|targetBlockGroup
operator|.
name|getBlockSize
argument_list|()
operator|-
literal|1
expr_stmt|;
name|currentLocatedBlock
operator|=
name|targetBlockGroup
expr_stmt|;
specifier|final
name|long
name|offsetIntoBlockGroup
init|=
name|getOffsetInBlockGroup
argument_list|()
decl_stmt|;
name|LocatedBlock
index|[]
name|targetBlocks
init|=
name|parseStripedBlockGroup
argument_list|(
name|targetBlockGroup
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
decl_stmt|;
comment|// The purpose is to get start offset into each block.
name|long
index|[]
name|offsetsForInternalBlocks
init|=
name|getStartOffsetsForInternalBlocks
argument_list|(
name|schema
argument_list|,
name|cellSize
argument_list|,
name|targetBlockGroup
argument_list|,
name|offsetIntoBlockGroup
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|offsetsForInternalBlocks
operator|.
name|length
operator|==
name|dataBlkNum
operator|+
name|parityBlkNum
argument_list|)
expr_stmt|;
name|long
name|minOffset
init|=
name|offsetsForInternalBlocks
index|[
name|dataBlkNum
index|]
decl_stmt|;
name|retry
operator|=
operator|new
name|ReaderRetryPolicy
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
name|LocatedBlock
name|targetBlock
init|=
name|targetBlocks
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|targetBlock
operator|!=
literal|null
condition|)
block|{
name|DNAddrPair
name|dnInfo
init|=
name|getBestNodeDNAddrPair
argument_list|(
name|targetBlock
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnInfo
operator|!=
literal|null
condition|)
block|{
name|BlockReader
name|reader
init|=
name|getBlockReaderWithRetry
argument_list|(
name|targetBlock
argument_list|,
name|minOffset
argument_list|,
name|targetBlock
operator|.
name|getBlockSize
argument_list|()
operator|-
name|minOffset
argument_list|,
name|dnInfo
operator|.
name|addr
argument_list|,
name|dnInfo
operator|.
name|storageType
argument_list|,
name|dnInfo
operator|.
name|info
argument_list|,
name|target
argument_list|,
name|retry
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|blockReaders
index|[
name|i
index|]
operator|=
operator|new
name|BlockReaderInfo
argument_list|(
name|reader
argument_list|,
name|targetBlock
argument_list|,
name|dnInfo
operator|.
name|info
argument_list|,
name|minOffset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * @throws IOException only when failing to refetch block token, which happens    * when this client cannot get located block information from NameNode. This    * method returns null instead of throwing exception when failing to connect    * to the DataNode.    */
DECL|method|getBlockReaderWithRetry (LocatedBlock targetBlock, long offsetInBlock, long length, InetSocketAddress targetAddr, StorageType storageType, DatanodeInfo datanode, long offsetInFile, ReaderRetryPolicy retry)
specifier|private
name|BlockReader
name|getBlockReaderWithRetry
parameter_list|(
name|LocatedBlock
name|targetBlock
parameter_list|,
name|long
name|offsetInBlock
parameter_list|,
name|long
name|length
parameter_list|,
name|InetSocketAddress
name|targetAddr
parameter_list|,
name|StorageType
name|storageType
parameter_list|,
name|DatanodeInfo
name|datanode
parameter_list|,
name|long
name|offsetInFile
parameter_list|,
name|ReaderRetryPolicy
name|retry
parameter_list|)
throws|throws
name|IOException
block|{
comment|// only need to get a new access token or a new encryption key once
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|getBlockReader
argument_list|(
name|targetBlock
argument_list|,
name|offsetInBlock
argument_list|,
name|length
argument_list|,
name|targetAddr
argument_list|,
name|storageType
argument_list|,
name|datanode
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InvalidEncryptionKeyException
operator|&&
name|retry
operator|.
name|shouldRefetchEncryptionKey
argument_list|()
condition|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Will fetch a new encryption key and retry, "
operator|+
literal|"encryption key was invalid when connecting to "
operator|+
name|targetAddr
operator|+
literal|" : "
operator|+
name|e
argument_list|)
expr_stmt|;
name|dfsClient
operator|.
name|clearDataEncryptionKey
argument_list|()
expr_stmt|;
name|retry
operator|.
name|refetchEncryptionKey
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|retry
operator|.
name|shouldRefetchToken
argument_list|()
operator|&&
name|tokenRefetchNeeded
argument_list|(
name|e
argument_list|,
name|targetAddr
argument_list|)
condition|)
block|{
name|fetchBlockAt
argument_list|(
name|offsetInFile
argument_list|)
expr_stmt|;
name|retry
operator|.
name|refetchToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to connect to "
operator|+
name|targetAddr
operator|+
literal|" for block"
operator|+
literal|", add to deadNodes and continue."
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Put chosen node into dead list, continue
name|addToDeadNodes
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
comment|/**    * Extend the super method with the logic of switching between cells.    * When reaching the end of a cell, proceed to the next cell and read it    * with the next blockReader.    */
annotation|@
name|Override
DECL|method|closeCurrentBlockReaders ()
specifier|protected
name|void
name|closeCurrentBlockReaders
parameter_list|()
block|{
name|resetCurStripeBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|blockReaders
operator|==
literal|null
operator|||
name|blockReaders
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupSize
condition|;
name|i
operator|++
control|)
block|{
name|closeReader
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|blockReaders
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|blockEnd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|closeReader (int index)
specifier|private
name|void
name|closeReader
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|blockReaders
index|[
name|index
index|]
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|DFSClient
operator|.
name|LOG
argument_list|,
name|blockReaders
index|[
name|index
index|]
operator|.
name|reader
argument_list|)
expr_stmt|;
name|blockReaders
index|[
name|index
index|]
operator|.
name|skip
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getOffsetInBlockGroup ()
specifier|private
name|long
name|getOffsetInBlockGroup
parameter_list|()
block|{
return|return
name|getOffsetInBlockGroup
argument_list|(
name|pos
argument_list|)
return|;
block|}
DECL|method|getOffsetInBlockGroup (long pos)
specifier|private
name|long
name|getOffsetInBlockGroup
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|-
name|currentLocatedBlock
operator|.
name|getStartOffset
argument_list|()
return|;
block|}
comment|/**    * Read a new stripe covering the current position, and store the data in the    * {@link #curStripeBuf}.    */
DECL|method|readOneStripe ( Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap)
specifier|private
name|void
name|readOneStripe
parameter_list|(
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
parameter_list|)
throws|throws
name|IOException
block|{
name|resetCurStripeBuffer
argument_list|()
expr_stmt|;
comment|// compute stripe range based on pos
specifier|final
name|long
name|offsetInBlockGroup
init|=
name|getOffsetInBlockGroup
argument_list|()
decl_stmt|;
specifier|final
name|long
name|stripeLen
init|=
name|cellSize
operator|*
name|dataBlkNum
decl_stmt|;
specifier|final
name|int
name|stripeIndex
init|=
call|(
name|int
call|)
argument_list|(
name|offsetInBlockGroup
operator|/
name|stripeLen
argument_list|)
decl_stmt|;
specifier|final
name|int
name|stripeBufOffset
init|=
call|(
name|int
call|)
argument_list|(
name|offsetInBlockGroup
operator|%
name|stripeLen
argument_list|)
decl_stmt|;
specifier|final
name|int
name|stripeLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|currentLocatedBlock
operator|.
name|getBlockSize
argument_list|()
operator|-
operator|(
name|stripeIndex
operator|*
name|stripeLen
operator|)
argument_list|,
name|stripeLen
argument_list|)
decl_stmt|;
name|curStripeRange
operator|=
operator|new
name|StripeRange
argument_list|(
name|offsetInBlockGroup
argument_list|,
name|stripeLimit
operator|-
name|stripeBufOffset
argument_list|)
expr_stmt|;
name|LocatedStripedBlock
name|blockGroup
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|currentLocatedBlock
decl_stmt|;
name|AlignedStripe
index|[]
name|stripes
init|=
name|StripedBlockUtil
operator|.
name|divideOneStripe
argument_list|(
name|schema
argument_list|,
name|cellSize
argument_list|,
name|blockGroup
argument_list|,
name|offsetInBlockGroup
argument_list|,
name|offsetInBlockGroup
operator|+
name|curStripeRange
operator|.
name|length
operator|-
literal|1
argument_list|,
name|curStripeBuf
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
index|[]
name|blks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
name|blockGroup
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
decl_stmt|;
comment|// read the whole stripe
for|for
control|(
name|AlignedStripe
name|stripe
range|:
name|stripes
control|)
block|{
comment|// Parse group to get chosen DN location
name|StripeReader
name|sreader
init|=
operator|new
name|StatefulStripeReader
argument_list|(
name|readingService
argument_list|,
name|stripe
argument_list|,
name|blks
argument_list|,
name|corruptedBlockMap
argument_list|)
decl_stmt|;
name|sreader
operator|.
name|readStripe
argument_list|()
expr_stmt|;
block|}
name|curStripeBuf
operator|.
name|position
argument_list|(
name|stripeBufOffset
argument_list|)
expr_stmt|;
name|curStripeBuf
operator|.
name|limit
argument_list|(
name|stripeLimit
argument_list|)
expr_stmt|;
block|}
DECL|method|readCell (final BlockReader reader, final DatanodeInfo datanode, final long currentReaderOffset, final long targetReaderOffset, final ByteBufferStrategy strategy, final int targetLength, final ExtendedBlock currentBlock, final Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap)
specifier|private
name|Callable
argument_list|<
name|Void
argument_list|>
name|readCell
parameter_list|(
specifier|final
name|BlockReader
name|reader
parameter_list|,
specifier|final
name|DatanodeInfo
name|datanode
parameter_list|,
specifier|final
name|long
name|currentReaderOffset
parameter_list|,
specifier|final
name|long
name|targetReaderOffset
parameter_list|,
specifier|final
name|ByteBufferStrategy
name|strategy
parameter_list|,
specifier|final
name|int
name|targetLength
parameter_list|,
specifier|final
name|ExtendedBlock
name|currentBlock
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
parameter_list|)
block|{
return|return
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// reader can be null if getBlockReaderWithRetry failed or
comment|// the reader hit exception before
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The BlockReader is null. "
operator|+
literal|"The BlockReader creation failed or the reader hit exception."
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentReaderOffset
operator|<=
name|targetReaderOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentReaderOffset
operator|<
name|targetReaderOffset
condition|)
block|{
name|long
name|skipped
init|=
name|reader
operator|.
name|skip
argument_list|(
name|targetReaderOffset
operator|-
name|currentReaderOffset
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|skipped
operator|==
name|targetReaderOffset
operator|-
name|currentReaderOffset
argument_list|)
expr_stmt|;
block|}
name|int
name|result
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|result
operator|<
name|targetLength
condition|)
block|{
name|int
name|ret
init|=
name|readToBuffer
argument_list|(
name|reader
argument_list|,
name|datanode
argument_list|,
name|strategy
argument_list|,
name|currentBlock
argument_list|,
name|corruptedBlockMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected EOS from the reader"
argument_list|)
throw|;
block|}
name|result
operator|+=
name|ret
expr_stmt|;
block|}
name|updateReadStatistics
argument_list|(
name|readStatistics
argument_list|,
name|targetLength
argument_list|,
name|reader
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
DECL|method|readToBuffer (BlockReader blockReader, DatanodeInfo currentNode, ByteBufferStrategy readerStrategy, ExtendedBlock currentBlock, Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap)
specifier|private
name|int
name|readToBuffer
parameter_list|(
name|BlockReader
name|blockReader
parameter_list|,
name|DatanodeInfo
name|currentNode
parameter_list|,
name|ByteBufferStrategy
name|readerStrategy
parameter_list|,
name|ExtendedBlock
name|currentBlock
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|readerStrategy
operator|.
name|doRead
argument_list|(
name|blockReader
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|ce
parameter_list|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found Checksum error for "
operator|+
name|currentBlock
operator|+
literal|" from "
operator|+
name|currentNode
operator|+
literal|" at "
operator|+
name|ce
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
comment|// we want to remember which block replicas we have tried
name|addIntoCorruptedBlockMap
argument_list|(
name|currentBlock
argument_list|,
name|currentNode
argument_list|,
name|corruptedBlockMap
argument_list|)
expr_stmt|;
throw|throw
name|ce
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while reading from "
operator|+
name|currentBlock
operator|+
literal|" of "
operator|+
name|src
operator|+
literal|" from "
operator|+
name|currentNode
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Seek to a new arbitrary location    */
annotation|@
name|Override
DECL|method|seek (long targetPos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|targetPos
operator|>
name|getFileLength
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Cannot seek after EOF"
argument_list|)
throw|;
block|}
if|if
condition|(
name|targetPos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Cannot seek to negative offset"
argument_list|)
throw|;
block|}
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream is closed!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|targetPos
operator|<=
name|blockEnd
condition|)
block|{
specifier|final
name|long
name|targetOffsetInBlk
init|=
name|getOffsetInBlockGroup
argument_list|(
name|targetPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|curStripeRange
operator|.
name|include
argument_list|(
name|targetOffsetInBlk
argument_list|)
condition|)
block|{
name|int
name|bufOffset
init|=
name|getStripedBufOffset
argument_list|(
name|targetOffsetInBlk
argument_list|)
decl_stmt|;
name|curStripeBuf
operator|.
name|position
argument_list|(
name|bufOffset
argument_list|)
expr_stmt|;
name|pos
operator|=
name|targetPos
expr_stmt|;
return|return;
block|}
block|}
name|pos
operator|=
name|targetPos
expr_stmt|;
name|blockEnd
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|getStripedBufOffset (long offsetInBlockGroup)
specifier|private
name|int
name|getStripedBufOffset
parameter_list|(
name|long
name|offsetInBlockGroup
parameter_list|)
block|{
specifier|final
name|long
name|stripeLen
init|=
name|cellSize
operator|*
name|dataBlkNum
decl_stmt|;
comment|// compute the position in the curStripeBuf based on "pos"
return|return
call|(
name|int
call|)
argument_list|(
name|offsetInBlockGroup
operator|%
name|stripeLen
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
specifier|synchronized
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|readWithStrategy (ReaderStrategy strategy, int off, int len)
specifier|protected
specifier|synchronized
name|int
name|readWithStrategy
parameter_list|(
name|ReaderStrategy
name|strategy
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|dfsClient
operator|.
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|failures
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|pos
operator|<
name|getFileLength
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|pos
operator|>
name|blockEnd
condition|)
block|{
name|blockSeekTo
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
name|int
name|realLen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
operator|(
name|blockEnd
operator|-
name|pos
operator|+
literal|1L
operator|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|infoLock
init|)
block|{
if|if
condition|(
name|locatedBlocks
operator|.
name|isLastBlockComplete
argument_list|()
condition|)
block|{
name|realLen
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|realLen
argument_list|,
name|locatedBlocks
operator|.
name|getFileLength
argument_list|()
operator|-
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Number of bytes already read into buffer */
name|int
name|result
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|result
operator|<
name|realLen
condition|)
block|{
if|if
condition|(
operator|!
name|curStripeRange
operator|.
name|include
argument_list|(
name|getOffsetInBlockGroup
argument_list|()
argument_list|)
condition|)
block|{
name|readOneStripe
argument_list|(
name|corruptedBlockMap
argument_list|)
expr_stmt|;
block|}
name|int
name|ret
init|=
name|copyToTargetBuf
argument_list|(
name|strategy
argument_list|,
name|off
operator|+
name|result
argument_list|,
name|realLen
operator|-
name|result
argument_list|)
decl_stmt|;
name|result
operator|+=
name|ret
expr_stmt|;
name|pos
operator|+=
name|ret
expr_stmt|;
block|}
if|if
condition|(
name|dfsClient
operator|.
name|stats
operator|!=
literal|null
condition|)
block|{
name|dfsClient
operator|.
name|stats
operator|.
name|incrementBytesRead
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
comment|// Check if need to report block replicas corruption either read
comment|// was successful or ChecksumException occured.
name|reportCheckSumFailure
argument_list|(
name|corruptedBlockMap
argument_list|,
name|currentLocatedBlock
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Copy the data from {@link #curStripeBuf} into the given buffer    * @param strategy the ReaderStrategy containing the given buffer    * @param offset the offset of the given buffer. Used only when strategy is    *               a ByteArrayStrategy    * @param length target length    * @return number of bytes copied    */
DECL|method|copyToTargetBuf (ReaderStrategy strategy, int offset, int length)
specifier|private
name|int
name|copyToTargetBuf
parameter_list|(
name|ReaderStrategy
name|strategy
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|final
name|long
name|offsetInBlk
init|=
name|getOffsetInBlockGroup
argument_list|()
decl_stmt|;
name|int
name|bufOffset
init|=
name|getStripedBufOffset
argument_list|(
name|offsetInBlk
argument_list|)
decl_stmt|;
name|curStripeBuf
operator|.
name|position
argument_list|(
name|bufOffset
argument_list|)
expr_stmt|;
return|return
name|strategy
operator|.
name|copyFrom
argument_list|(
name|curStripeBuf
argument_list|,
name|offset
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|curStripeBuf
operator|.
name|remaining
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * The super method {@link DFSInputStream#refreshLocatedBlock} refreshes    * cached LocatedBlock by executing {@link DFSInputStream#getBlockAt} again.    * This method extends the logic by first remembering the index of the    * internal block, and re-parsing the refreshed block group with the same    * index.    */
annotation|@
name|Override
DECL|method|refreshLocatedBlock (LocatedBlock block)
specifier|protected
name|LocatedBlock
name|refreshLocatedBlock
parameter_list|(
name|LocatedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|idx
init|=
name|BlockIdManager
operator|.
name|getBlockIndex
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|LocatedBlock
name|lb
init|=
name|getBlockGroupAt
argument_list|(
name|block
operator|.
name|getStartOffset
argument_list|()
argument_list|)
decl_stmt|;
comment|// If indexing information is returned, iterate through the index array
comment|// to find the entry for position idx in the group
name|LocatedStripedBlock
name|lsb
init|=
operator|(
name|LocatedStripedBlock
operator|)
name|lb
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|lsb
operator|.
name|getBlockIndices
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|lsb
operator|.
name|getBlockIndices
argument_list|()
index|[
name|i
index|]
operator|==
name|idx
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|DFSClient
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"refreshLocatedBlock for striped blocks, offset="
operator|+
name|block
operator|.
name|getStartOffset
argument_list|()
operator|+
literal|". Obtained block "
operator|+
name|lb
operator|+
literal|", idx="
operator|+
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|StripedBlockUtil
operator|.
name|constructInternalBlock
argument_list|(
name|lsb
argument_list|,
name|i
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|idx
argument_list|)
return|;
block|}
DECL|method|getBlockGroupAt (long offset)
specifier|private
name|LocatedStripedBlock
name|getBlockGroupAt
parameter_list|(
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|LocatedBlock
name|lb
init|=
name|super
operator|.
name|getBlockAt
argument_list|(
name|offset
argument_list|)
decl_stmt|;
assert|assert
name|lb
operator|instanceof
name|LocatedStripedBlock
operator|:
literal|"NameNode"
operator|+
literal|" should return a LocatedStripedBlock for a striped file"
assert|;
return|return
operator|(
name|LocatedStripedBlock
operator|)
name|lb
return|;
block|}
comment|/**    * Real implementation of pread.    */
annotation|@
name|Override
DECL|method|fetchBlockByteRange (LocatedBlock block, long start, long end, byte[] buf, int offset, Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap)
specifier|protected
name|void
name|fetchBlockByteRange
parameter_list|(
name|LocatedBlock
name|block
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Refresh the striped block group
name|LocatedStripedBlock
name|blockGroup
init|=
name|getBlockGroupAt
argument_list|(
name|block
operator|.
name|getStartOffset
argument_list|()
argument_list|)
decl_stmt|;
name|AlignedStripe
index|[]
name|stripes
init|=
name|divideByteRangeIntoStripes
argument_list|(
name|schema
argument_list|,
name|cellSize
argument_list|,
name|blockGroup
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|readService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|dfsClient
operator|.
name|getStripedReadsThreadPool
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
index|[]
name|blks
init|=
name|StripedBlockUtil
operator|.
name|parseStripedBlockGroup
argument_list|(
name|blockGroup
argument_list|,
name|cellSize
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
decl_stmt|;
for|for
control|(
name|AlignedStripe
name|stripe
range|:
name|stripes
control|)
block|{
comment|// Parse group to get chosen DN location
name|StripeReader
name|preader
init|=
operator|new
name|PositionStripeReader
argument_list|(
name|readService
argument_list|,
name|stripe
argument_list|,
name|blks
argument_list|,
name|corruptedBlockMap
argument_list|)
decl_stmt|;
name|preader
operator|.
name|readStripe
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getFromOneDataNode (final DNAddrPair datanode, final LocatedBlock block, final long start, final long end, final byte[] buf, final int[] offsets, final int[] lengths, final Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap, final int hedgedReadId)
specifier|private
name|Callable
argument_list|<
name|Void
argument_list|>
name|getFromOneDataNode
parameter_list|(
specifier|final
name|DNAddrPair
name|datanode
parameter_list|,
specifier|final
name|LocatedBlock
name|block
parameter_list|,
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|end
parameter_list|,
specifier|final
name|byte
index|[]
name|buf
parameter_list|,
specifier|final
name|int
index|[]
name|offsets
parameter_list|,
specifier|final
name|int
index|[]
name|lengths
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
parameter_list|,
specifier|final
name|int
name|hedgedReadId
parameter_list|)
block|{
specifier|final
name|Span
name|parentSpan
init|=
name|Trace
operator|.
name|currentSpan
argument_list|()
decl_stmt|;
return|return
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|TraceScope
name|scope
init|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"Parallel reading "
operator|+
name|hedgedReadId
argument_list|,
name|parentSpan
argument_list|)
decl_stmt|;
try|try
block|{
name|actualGetFromOneDataNode
argument_list|(
name|datanode
argument_list|,
name|block
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|buf
argument_list|,
name|offsets
argument_list|,
name|lengths
argument_list|,
name|corruptedBlockMap
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
DECL|class|StripeReader
specifier|private
specifier|abstract
class|class
name|StripeReader
block|{
DECL|field|futures
specifier|final
name|Map
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|futures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|alignedStripe
specifier|final
name|AlignedStripe
name|alignedStripe
decl_stmt|;
DECL|field|service
specifier|final
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|service
decl_stmt|;
DECL|field|targetBlocks
specifier|final
name|LocatedBlock
index|[]
name|targetBlocks
decl_stmt|;
DECL|field|corruptedBlockMap
specifier|final
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
decl_stmt|;
DECL|method|StripeReader (CompletionService<Void> service, AlignedStripe alignedStripe, LocatedBlock[] targetBlocks, Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap)
name|StripeReader
parameter_list|(
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|service
parameter_list|,
name|AlignedStripe
name|alignedStripe
parameter_list|,
name|LocatedBlock
index|[]
name|targetBlocks
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|alignedStripe
operator|=
name|alignedStripe
expr_stmt|;
name|this
operator|.
name|targetBlocks
operator|=
name|targetBlocks
expr_stmt|;
name|this
operator|.
name|corruptedBlockMap
operator|=
name|corruptedBlockMap
expr_stmt|;
block|}
DECL|method|readChunk (final CompletionService<Void> service, final LocatedBlock block, int chunkIndex)
specifier|abstract
name|boolean
name|readChunk
parameter_list|(
specifier|final
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|service
parameter_list|,
specifier|final
name|LocatedBlock
name|block
parameter_list|,
name|int
name|chunkIndex
parameter_list|)
function_decl|;
comment|/** prepare all the data chunks */
DECL|method|prepareDecodeInputs ()
specifier|abstract
name|void
name|prepareDecodeInputs
parameter_list|()
function_decl|;
comment|/** prepare the parity chunk and block reader if necessary */
DECL|method|prepareParityChunk (int index)
specifier|abstract
name|boolean
name|prepareParityChunk
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|decode ()
specifier|abstract
name|void
name|decode
parameter_list|()
function_decl|;
DECL|method|updateState4SuccessRead (StripingChunkReadResult result)
specifier|abstract
name|void
name|updateState4SuccessRead
parameter_list|(
name|StripingChunkReadResult
name|result
parameter_list|)
function_decl|;
DECL|method|checkMissingBlocks ()
specifier|private
name|void
name|checkMissingBlocks
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|alignedStripe
operator|.
name|missingChunksNum
operator|>
name|parityBlkNum
condition|)
block|{
name|clearFutures
argument_list|(
name|futures
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|alignedStripe
operator|.
name|missingChunksNum
operator|+
literal|" missing blocks, the stripe is: "
operator|+
name|alignedStripe
argument_list|)
throw|;
block|}
block|}
comment|/**      * We need decoding. Thus go through all the data chunks and make sure we      * submit read requests for all of them.      */
DECL|method|readDataForDecoding ()
specifier|private
name|void
name|readDataForDecoding
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareDecodeInputs
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|REQUESTED
condition|)
block|{
if|if
condition|(
operator|!
name|readChunk
argument_list|(
name|service
argument_list|,
name|targetBlocks
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|alignedStripe
operator|.
name|missingChunksNum
operator|++
expr_stmt|;
block|}
block|}
block|}
name|checkMissingBlocks
argument_list|()
expr_stmt|;
block|}
DECL|method|readParityChunks (int num)
name|void
name|readParityChunks
parameter_list|(
name|int
name|num
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|dataBlkNum
init|,
name|j
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
operator|+
name|parityBlkNum
operator|&&
name|j
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|prepareParityChunk
argument_list|(
name|i
argument_list|)
operator|&&
name|readChunk
argument_list|(
name|service
argument_list|,
name|targetBlocks
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|j
operator|++
expr_stmt|;
block|}
else|else
block|{
name|alignedStripe
operator|.
name|missingChunksNum
operator|++
expr_stmt|;
block|}
block|}
block|}
name|checkMissingBlocks
argument_list|()
expr_stmt|;
block|}
comment|/** read the whole stripe. do decoding if necessary */
DECL|method|readStripe ()
name|void
name|readStripe
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|.
name|state
operator|!=
name|StripingChunk
operator|.
name|ALLZERO
condition|)
block|{
if|if
condition|(
operator|!
name|readChunk
argument_list|(
name|service
argument_list|,
name|targetBlocks
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|alignedStripe
operator|.
name|missingChunksNum
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// There are missing block locations at this stage. Thus we need to read
comment|// the full stripe and one more parity block.
if|if
condition|(
name|alignedStripe
operator|.
name|missingChunksNum
operator|>
literal|0
condition|)
block|{
name|checkMissingBlocks
argument_list|()
expr_stmt|;
name|readDataForDecoding
argument_list|()
expr_stmt|;
comment|// read parity chunks
name|readParityChunks
argument_list|(
name|alignedStripe
operator|.
name|missingChunksNum
argument_list|)
expr_stmt|;
block|}
comment|// TODO: for a full stripe we can start reading (dataBlkNum + 1) chunks
comment|// Input buffers for potential decode operation, which remains null until
comment|// first read failure
while|while
condition|(
operator|!
name|futures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|StripingChunkReadResult
name|r
init|=
name|getNextCompletedStripedRead
argument_list|(
name|service
argument_list|,
name|futures
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|DFSClient
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Read task returned: "
operator|+
name|r
operator|+
literal|", for stripe "
operator|+
name|alignedStripe
argument_list|)
expr_stmt|;
block|}
name|StripingChunk
name|returnedChunk
init|=
name|alignedStripe
operator|.
name|chunks
index|[
name|r
operator|.
name|index
index|]
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|returnedChunk
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|returnedChunk
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|PENDING
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|state
operator|==
name|StripingChunkReadResult
operator|.
name|SUCCESSFUL
condition|)
block|{
name|returnedChunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|FETCHED
expr_stmt|;
name|alignedStripe
operator|.
name|fetchedChunksNum
operator|++
expr_stmt|;
name|updateState4SuccessRead
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignedStripe
operator|.
name|fetchedChunksNum
operator|==
name|dataBlkNum
condition|)
block|{
name|clearFutures
argument_list|(
name|futures
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|returnedChunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|MISSING
expr_stmt|;
comment|// close the corresponding reader
name|closeReader
argument_list|(
name|r
operator|.
name|index
argument_list|)
expr_stmt|;
specifier|final
name|int
name|missing
init|=
name|alignedStripe
operator|.
name|missingChunksNum
decl_stmt|;
name|alignedStripe
operator|.
name|missingChunksNum
operator|++
expr_stmt|;
name|checkMissingBlocks
argument_list|()
expr_stmt|;
name|readDataForDecoding
argument_list|()
expr_stmt|;
name|readParityChunks
argument_list|(
name|alignedStripe
operator|.
name|missingChunksNum
operator|-
name|missing
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|String
name|err
init|=
literal|"Read request interrupted"
decl_stmt|;
name|DFSClient
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|clearFutures
argument_list|(
name|futures
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't decode if read interrupted
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|alignedStripe
operator|.
name|missingChunksNum
operator|>
literal|0
condition|)
block|{
name|decode
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|PositionStripeReader
class|class
name|PositionStripeReader
extends|extends
name|StripeReader
block|{
DECL|field|decodeInputs
specifier|private
name|byte
index|[]
index|[]
name|decodeInputs
init|=
literal|null
decl_stmt|;
DECL|method|PositionStripeReader (CompletionService<Void> service, AlignedStripe alignedStripe, LocatedBlock[] targetBlocks, Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap)
name|PositionStripeReader
parameter_list|(
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|service
parameter_list|,
name|AlignedStripe
name|alignedStripe
parameter_list|,
name|LocatedBlock
index|[]
name|targetBlocks
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
parameter_list|)
block|{
name|super
argument_list|(
name|service
argument_list|,
name|alignedStripe
argument_list|,
name|targetBlocks
argument_list|,
name|corruptedBlockMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readChunk (final CompletionService<Void> service, final LocatedBlock block, int chunkIndex)
name|boolean
name|readChunk
parameter_list|(
specifier|final
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|service
parameter_list|,
specifier|final
name|LocatedBlock
name|block
parameter_list|,
name|int
name|chunkIndex
parameter_list|)
block|{
specifier|final
name|StripingChunk
name|chunk
init|=
name|alignedStripe
operator|.
name|chunks
index|[
name|chunkIndex
index|]
decl_stmt|;
if|if
condition|(
name|block
operator|==
literal|null
condition|)
block|{
name|chunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|MISSING
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DatanodeInfo
name|loc
init|=
name|block
operator|.
name|getLocations
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|StorageType
name|type
init|=
name|block
operator|.
name|getStorageTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|DNAddrPair
name|dnAddr
init|=
operator|new
name|DNAddrPair
argument_list|(
name|loc
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|loc
operator|.
name|getXferAddr
argument_list|(
name|dfsClient
operator|.
name|getConf
argument_list|()
operator|.
name|isConnectToDnViaHostname
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|chunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|PENDING
expr_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|readCallable
init|=
name|getFromOneDataNode
argument_list|(
name|dnAddr
argument_list|,
name|block
argument_list|,
name|alignedStripe
operator|.
name|getOffsetInBlock
argument_list|()
argument_list|,
name|alignedStripe
operator|.
name|getOffsetInBlock
argument_list|()
operator|+
name|alignedStripe
operator|.
name|getSpanInBlock
argument_list|()
operator|-
literal|1
argument_list|,
name|chunk
operator|.
name|byteArray
operator|.
name|buf
argument_list|()
argument_list|,
name|chunk
operator|.
name|byteArray
operator|.
name|getOffsets
argument_list|()
argument_list|,
name|chunk
operator|.
name|byteArray
operator|.
name|getLengths
argument_list|()
argument_list|,
name|corruptedBlockMap
argument_list|,
name|chunkIndex
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|getFromDNRequest
init|=
name|service
operator|.
name|submit
argument_list|(
name|readCallable
argument_list|)
decl_stmt|;
if|if
condition|(
name|DFSClient
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|DFSClient
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submitting striped read request for "
operator|+
name|chunkIndex
operator|+
literal|". Info of the block: "
operator|+
name|block
operator|+
literal|", offset in block is "
operator|+
name|alignedStripe
operator|.
name|getOffsetInBlock
argument_list|()
operator|+
literal|", end is "
operator|+
operator|(
name|alignedStripe
operator|.
name|getOffsetInBlock
argument_list|()
operator|+
name|alignedStripe
operator|.
name|getSpanInBlock
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|futures
operator|.
name|put
argument_list|(
name|getFromDNRequest
argument_list|,
name|chunkIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|updateState4SuccessRead (StripingChunkReadResult r)
name|void
name|updateState4SuccessRead
parameter_list|(
name|StripingChunkReadResult
name|r
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|prepareDecodeInputs ()
name|void
name|prepareDecodeInputs
parameter_list|()
block|{
if|if
condition|(
name|decodeInputs
operator|==
literal|null
condition|)
block|{
name|decodeInputs
operator|=
name|initDecodeInputs
argument_list|(
name|alignedStripe
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|prepareParityChunk (int index)
name|boolean
name|prepareParityChunk
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|index
operator|>=
name|dataBlkNum
operator|&&
name|alignedStripe
operator|.
name|chunks
index|[
name|index
index|]
operator|==
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|int
name|decodeIndex
init|=
name|convertIndex4Decode
argument_list|(
name|index
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
decl_stmt|;
name|alignedStripe
operator|.
name|chunks
index|[
name|index
index|]
operator|=
operator|new
name|StripingChunk
argument_list|(
name|decodeInputs
index|[
name|decodeIndex
index|]
argument_list|)
expr_stmt|;
name|alignedStripe
operator|.
name|chunks
index|[
name|index
index|]
operator|.
name|addByteArraySlice
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|alignedStripe
operator|.
name|getSpanInBlock
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|decode ()
name|void
name|decode
parameter_list|()
block|{
name|finalizeDecodeInputs
argument_list|(
name|decodeInputs
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|,
name|alignedStripe
argument_list|)
expr_stmt|;
name|decodeAndFillBuffer
argument_list|(
name|decodeInputs
argument_list|,
name|alignedStripe
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StatefulStripeReader
class|class
name|StatefulStripeReader
extends|extends
name|StripeReader
block|{
DECL|field|decodeInputs
name|ByteBuffer
index|[]
name|decodeInputs
decl_stmt|;
DECL|method|StatefulStripeReader (CompletionService<Void> service, AlignedStripe alignedStripe, LocatedBlock[] targetBlocks, Map<ExtendedBlock, Set<DatanodeInfo>> corruptedBlockMap)
name|StatefulStripeReader
parameter_list|(
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|service
parameter_list|,
name|AlignedStripe
name|alignedStripe
parameter_list|,
name|LocatedBlock
index|[]
name|targetBlocks
parameter_list|,
name|Map
argument_list|<
name|ExtendedBlock
argument_list|,
name|Set
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|>
name|corruptedBlockMap
parameter_list|)
block|{
name|super
argument_list|(
name|service
argument_list|,
name|alignedStripe
argument_list|,
name|targetBlocks
argument_list|,
name|corruptedBlockMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readChunk (final CompletionService<Void> service, final LocatedBlock block, int chunkIndex)
name|boolean
name|readChunk
parameter_list|(
specifier|final
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|service
parameter_list|,
specifier|final
name|LocatedBlock
name|block
parameter_list|,
name|int
name|chunkIndex
parameter_list|)
block|{
specifier|final
name|StripingChunk
name|chunk
init|=
name|alignedStripe
operator|.
name|chunks
index|[
name|chunkIndex
index|]
decl_stmt|;
specifier|final
name|BlockReaderInfo
name|readerInfo
init|=
name|blockReaders
index|[
name|chunkIndex
index|]
decl_stmt|;
if|if
condition|(
name|readerInfo
operator|==
literal|null
operator|||
name|block
operator|==
literal|null
operator|||
name|readerInfo
operator|.
name|shouldSkip
condition|)
block|{
name|chunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|MISSING
expr_stmt|;
return|return
literal|false
return|;
block|}
name|chunk
operator|.
name|state
operator|=
name|StripingChunk
operator|.
name|PENDING
expr_stmt|;
name|ByteBufferStrategy
name|strategy
init|=
operator|new
name|ByteBufferStrategy
argument_list|(
name|chunk
operator|.
name|byteBuffer
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Void
argument_list|>
name|readCallable
init|=
name|readCell
argument_list|(
name|readerInfo
operator|.
name|reader
argument_list|,
name|readerInfo
operator|.
name|datanode
argument_list|,
name|readerInfo
operator|.
name|blockReaderOffset
argument_list|,
name|alignedStripe
operator|.
name|getOffsetInBlock
argument_list|()
argument_list|,
name|strategy
argument_list|,
name|chunk
operator|.
name|byteBuffer
operator|.
name|remaining
argument_list|()
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
argument_list|,
name|corruptedBlockMap
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|request
init|=
name|readingService
operator|.
name|submit
argument_list|(
name|readCallable
argument_list|)
decl_stmt|;
name|futures
operator|.
name|put
argument_list|(
name|request
argument_list|,
name|chunkIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|updateState4SuccessRead (StripingChunkReadResult result)
name|void
name|updateState4SuccessRead
parameter_list|(
name|StripingChunkReadResult
name|result
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|result
operator|.
name|state
operator|==
name|StripingChunkReadResult
operator|.
name|SUCCESSFUL
argument_list|)
expr_stmt|;
name|blockReaders
index|[
name|result
operator|.
name|index
index|]
operator|.
name|setOffset
argument_list|(
name|alignedStripe
operator|.
name|getOffsetInBlock
argument_list|()
operator|+
name|alignedStripe
operator|.
name|getSpanInBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepareDecodeInputs ()
name|void
name|prepareDecodeInputs
parameter_list|()
block|{
if|if
condition|(
name|decodeInputs
operator|==
literal|null
condition|)
block|{
name|decodeInputs
operator|=
operator|new
name|ByteBuffer
index|[
name|dataBlkNum
operator|+
name|parityBlkNum
index|]
expr_stmt|;
name|ByteBuffer
name|cur
init|=
name|curStripeBuf
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|StripedBlockUtil
operator|.
name|VerticalRange
name|range
init|=
name|alignedStripe
operator|.
name|range
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataBlkNum
condition|;
name|i
operator|++
control|)
block|{
name|cur
operator|.
name|limit
argument_list|(
name|cur
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
call|(
name|int
call|)
argument_list|(
name|range
operator|.
name|offsetInBlock
operator|%
name|cellSize
operator|+
name|cellSize
operator|*
name|i
argument_list|)
decl_stmt|;
name|cur
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|cur
operator|.
name|limit
argument_list|(
call|(
name|int
call|)
argument_list|(
name|pos
operator|+
name|range
operator|.
name|spanInBlock
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|decodeIndex
init|=
name|convertIndex4Decode
argument_list|(
name|i
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
decl_stmt|;
name|decodeInputs
index|[
name|decodeIndex
index|]
operator|=
name|cur
operator|.
name|slice
argument_list|()
expr_stmt|;
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|=
operator|new
name|StripingChunk
argument_list|(
name|decodeInputs
index|[
name|decodeIndex
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|prepareParityChunk (int index)
name|boolean
name|prepareParityChunk
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|index
operator|>=
name|dataBlkNum
operator|&&
name|alignedStripe
operator|.
name|chunks
index|[
name|index
index|]
operator|==
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockReaders
index|[
name|index
index|]
operator|!=
literal|null
operator|&&
name|blockReaders
index|[
name|index
index|]
operator|.
name|shouldSkip
condition|)
block|{
name|alignedStripe
operator|.
name|chunks
index|[
name|index
index|]
operator|=
operator|new
name|StripingChunk
argument_list|(
name|StripingChunk
operator|.
name|MISSING
argument_list|)
expr_stmt|;
comment|// we have failed the block reader before
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|decodeIndex
init|=
name|convertIndex4Decode
argument_list|(
name|index
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
decl_stmt|;
name|decodeInputs
index|[
name|decodeIndex
index|]
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
operator|(
name|int
operator|)
name|alignedStripe
operator|.
name|range
operator|.
name|spanInBlock
argument_list|)
expr_stmt|;
name|alignedStripe
operator|.
name|chunks
index|[
name|index
index|]
operator|=
operator|new
name|StripingChunk
argument_list|(
name|decodeInputs
index|[
name|decodeIndex
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockReaders
index|[
name|index
index|]
operator|==
literal|null
operator|&&
operator|!
name|prepareParityBlockReader
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|alignedStripe
operator|.
name|chunks
index|[
name|index
index|]
operator|=
operator|new
name|StripingChunk
argument_list|(
name|StripingChunk
operator|.
name|MISSING
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|prepareParityBlockReader (int i)
specifier|private
name|boolean
name|prepareParityBlockReader
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
comment|// prepare the block reader for the parity chunk
name|LocatedBlock
name|targetBlock
init|=
name|targetBlocks
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|targetBlock
operator|!=
literal|null
condition|)
block|{
specifier|final
name|long
name|offsetInBlock
init|=
name|alignedStripe
operator|.
name|getOffsetInBlock
argument_list|()
decl_stmt|;
name|DNAddrPair
name|dnInfo
init|=
name|getBestNodeDNAddrPair
argument_list|(
name|targetBlock
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnInfo
operator|!=
literal|null
condition|)
block|{
name|BlockReader
name|reader
init|=
name|getBlockReaderWithRetry
argument_list|(
name|targetBlock
argument_list|,
name|offsetInBlock
argument_list|,
name|targetBlock
operator|.
name|getBlockSize
argument_list|()
operator|-
name|offsetInBlock
argument_list|,
name|dnInfo
operator|.
name|addr
argument_list|,
name|dnInfo
operator|.
name|storageType
argument_list|,
name|dnInfo
operator|.
name|info
argument_list|,
name|DFSStripedInputStream
operator|.
name|this
operator|.
name|getPos
argument_list|()
argument_list|,
name|retry
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|blockReaders
index|[
name|i
index|]
operator|=
operator|new
name|BlockReaderInfo
argument_list|(
name|reader
argument_list|,
name|targetBlock
argument_list|,
name|dnInfo
operator|.
name|info
argument_list|,
name|offsetInBlock
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|decode ()
name|void
name|decode
parameter_list|()
block|{
comment|// TODO no copy for data chunks. this depends on HADOOP-12047
specifier|final
name|int
name|span
init|=
operator|(
name|int
operator|)
name|alignedStripe
operator|.
name|getSpanInBlock
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alignedStripe
operator|.
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|decodeIndex
init|=
name|convertIndex4Decode
argument_list|(
name|i
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|ALLZERO
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|span
condition|;
name|j
operator|++
control|)
block|{
name|decodeInputs
index|[
name|decodeIndex
index|]
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
name|decodeInputs
index|[
name|decodeIndex
index|]
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|FETCHED
condition|)
block|{
name|decodeInputs
index|[
name|decodeIndex
index|]
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|decodeInputs
index|[
name|decodeIndex
index|]
operator|.
name|limit
argument_list|(
name|span
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
name|decodeIndices
init|=
operator|new
name|int
index|[
name|parityBlkNum
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alignedStripe
operator|.
name|chunks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|alignedStripe
operator|.
name|chunks
index|[
name|i
index|]
operator|.
name|state
operator|==
name|StripingChunk
operator|.
name|MISSING
condition|)
block|{
name|decodeIndices
index|[
name|pos
operator|++
index|]
operator|=
name|convertIndex4Decode
argument_list|(
name|i
argument_list|,
name|dataBlkNum
argument_list|,
name|parityBlkNum
argument_list|)
expr_stmt|;
block|}
block|}
name|decodeIndices
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|decodeIndices
argument_list|,
name|pos
argument_list|)
expr_stmt|;
specifier|final
name|int
name|decodeChunkNum
init|=
name|decodeIndices
operator|.
name|length
decl_stmt|;
name|ByteBuffer
index|[]
name|outputs
init|=
operator|new
name|ByteBuffer
index|[
name|decodeChunkNum
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decodeChunkNum
condition|;
name|i
operator|++
control|)
block|{
name|outputs
index|[
name|i
index|]
operator|=
name|decodeInputs
index|[
name|decodeIndices
index|[
name|i
index|]
index|]
expr_stmt|;
name|outputs
index|[
name|i
index|]
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|outputs
index|[
name|i
index|]
operator|.
name|limit
argument_list|(
operator|(
name|int
operator|)
name|alignedStripe
operator|.
name|range
operator|.
name|spanInBlock
argument_list|)
expr_stmt|;
name|decodeInputs
index|[
name|decodeIndices
index|[
name|i
index|]
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|decoder
operator|.
name|decode
argument_list|(
name|decodeInputs
argument_list|,
name|decodeIndices
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * May need online read recovery, zero-copy read doesn't make    * sense, so don't support it.    */
annotation|@
name|Override
DECL|method|read (ByteBufferPool bufferPool, int maxLength, EnumSet<ReadOption> opts)
specifier|public
specifier|synchronized
name|ByteBuffer
name|read
parameter_list|(
name|ByteBufferPool
name|bufferPool
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|EnumSet
argument_list|<
name|ReadOption
argument_list|>
name|opts
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not support enhanced byte buffer access."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|releaseBuffer (ByteBuffer buffer)
specifier|public
specifier|synchronized
name|void
name|releaseBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not support enhanced byte buffer access."
argument_list|)
throw|;
block|}
comment|/** A variation to {@link DFSInputStream#cancelAll} */
DECL|method|clearFutures (Collection<Future<Void>> futures)
specifier|private
name|void
name|clearFutures
parameter_list|(
name|Collection
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
parameter_list|)
block|{
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|futures
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

