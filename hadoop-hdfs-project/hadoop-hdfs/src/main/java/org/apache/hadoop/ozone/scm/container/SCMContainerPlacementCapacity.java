begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|node
operator|.
name|SCMNodeStat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|abs
import|;
end_import

begin_comment
comment|/**  * Container placement policy that randomly choose datanodes with remaining  * space satisfy the size constraints.  */
end_comment

begin_class
DECL|class|SCMContainerPlacementCapacity
specifier|public
specifier|final
class|class
name|SCMContainerPlacementCapacity
implements|implements
name|ContainerPlacementPolicy
block|{
annotation|@
name|VisibleForTesting
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SCMContainerPlacementCapacity
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|maxRetry
specifier|private
specifier|static
name|int
name|maxRetry
init|=
literal|100
decl_stmt|;
DECL|field|nodeManager
specifier|private
specifier|final
name|NodeManager
name|nodeManager
decl_stmt|;
DECL|field|rand
specifier|private
specifier|final
name|Random
name|rand
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|method|SCMContainerPlacementCapacity (final NodeManager nodeManager, final Configuration conf)
specifier|public
name|SCMContainerPlacementCapacity
parameter_list|(
specifier|final
name|NodeManager
name|nodeManager
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|nodeManager
operator|=
name|nodeManager
expr_stmt|;
name|this
operator|.
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|chooseDatanodes (final int nodesRequired, final long sizeRequired)
specifier|public
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|chooseDatanodes
parameter_list|(
specifier|final
name|int
name|nodesRequired
parameter_list|,
specifier|final
name|long
name|sizeRequired
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|healthyNodes
init|=
name|nodeManager
operator|.
name|getNodes
argument_list|(
name|NodeManager
operator|.
name|NODESTATE
operator|.
name|HEALTHY
argument_list|)
decl_stmt|;
if|if
condition|(
name|healthyNodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No healthy node found to allocate container."
argument_list|)
throw|;
block|}
if|if
condition|(
name|healthyNodes
operator|.
name|size
argument_list|()
operator|<
name|nodesRequired
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not enough nodes to allocate container with "
operator|+
name|nodesRequired
operator|+
literal|" datanodes required."
argument_list|)
throw|;
block|}
if|if
condition|(
name|healthyNodes
operator|.
name|size
argument_list|()
operator|==
name|nodesRequired
condition|)
block|{
return|return
name|healthyNodes
return|;
block|}
comment|// TODO: add allocation time as metrics
name|long
name|beginTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|DatanodeID
argument_list|>
name|results
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesRequired
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeID
name|candidate
init|=
name|chooseNode
argument_list|(
name|results
argument_list|,
name|healthyNodes
argument_list|,
name|sizeRequired
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding datanode {}. Results.size = {} nodesRequired = {}"
argument_list|,
name|candidate
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|nodesRequired
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can't find datanode. Results.size = {} nodesRequired = {}"
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|nodesRequired
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|long
name|endTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"SCMContainerPlacementCapacity takes {} ms to choose nodes."
argument_list|,
name|endTime
operator|-
name|beginTime
argument_list|)
expr_stmt|;
block|}
comment|// TODO: handle under replicated case.
comment|// For now, throw exception only when we can't find any datanode.
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No healthy node found "
operator|+
literal|"with enough remaining capacity to allocate container."
argument_list|)
throw|;
block|}
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|!=
name|nodesRequired
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SCMContainerPlacementCapacity cannot find enough healthy"
operator|+
literal|" datanodes with remaining capacity> {} ."
operator|+
literal|"(nodesRequired = {}, nodesFound = {})"
argument_list|,
name|sizeRequired
argument_list|,
name|nodesRequired
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Choose one random node from 2-Random nodes that satisfy the size required.    * @param results - set of current chosen datanodes.    * @param healthyNodes - all healthy datanodes.    * @param sizeRequired - size required for container.    * @return one with larger remaining capacity from two randomly chosen    *         datanodes that satisfy sizeRequirement but are not in current    *         result set.    */
DECL|method|chooseNode (final Set results, final List<DatanodeID> healthyNodes, final long sizeRequired)
specifier|private
name|DatanodeID
name|chooseNode
parameter_list|(
specifier|final
name|Set
name|results
parameter_list|,
specifier|final
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|healthyNodes
parameter_list|,
specifier|final
name|long
name|sizeRequired
parameter_list|)
block|{
name|NodeAndStat
name|firstNode
init|=
name|chooseOneNode
argument_list|(
name|results
argument_list|,
name|healthyNodes
argument_list|,
name|sizeRequired
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstNode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NodeAndStat
name|secondNode
init|=
name|chooseOneNode
argument_list|(
name|results
argument_list|,
name|healthyNodes
argument_list|,
name|sizeRequired
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondNode
operator|==
literal|null
condition|)
block|{
return|return
name|firstNode
operator|.
name|getDatanodeID
argument_list|()
return|;
block|}
comment|// Pick one with larger remaining space.
return|return
name|firstNode
operator|.
name|getDatanodeStat
argument_list|()
operator|.
name|getRemaining
argument_list|()
operator|>
name|secondNode
operator|.
name|getDatanodeStat
argument_list|()
operator|.
name|getRemaining
argument_list|()
condition|?
name|firstNode
operator|.
name|getDatanodeID
argument_list|()
else|:
name|secondNode
operator|.
name|getDatanodeID
argument_list|()
return|;
block|}
comment|/**    * Choose one random node from healthy nodes that satisfies the size    * requirement and has not been chosen in the existing results.    * Retry up to maxRetry(100) times.    * @param results - set of current chosen datanodes.    * @param healthyNodes - all healthy datanodes.    * @param sizeRequired - size required for container.    * @return one with larger remaining capacity from two randomly chosen    *         datanodes that satisfy sizeRequirement but are not in current    *         result set.    */
DECL|method|chooseOneNode (final Set<DatanodeID> results, final List<DatanodeID> healthyNodes, final long sizeRequired)
specifier|private
name|NodeAndStat
name|chooseOneNode
parameter_list|(
specifier|final
name|Set
argument_list|<
name|DatanodeID
argument_list|>
name|results
parameter_list|,
specifier|final
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|healthyNodes
parameter_list|,
specifier|final
name|long
name|sizeRequired
parameter_list|)
block|{
name|NodeAndStat
name|selectedNode
init|=
literal|null
decl_stmt|;
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|selectedNode
operator|==
literal|null
operator|&&
name|retry
operator|<
name|maxRetry
condition|)
block|{
name|int
name|candidateIdx
init|=
name|abs
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
operator|%
name|healthyNodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|DatanodeID
name|candidate
init|=
name|healthyNodes
operator|.
name|get
argument_list|(
name|candidateIdx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|contains
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|SCMNodeStat
name|stat
init|=
name|nodeManager
operator|.
name|getNodeStat
argument_list|(
name|candidate
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
operator|&&
name|stat
operator|.
name|getRemaining
argument_list|()
operator|>
name|sizeRequired
condition|)
block|{
name|selectedNode
operator|=
operator|new
name|NodeAndStat
argument_list|(
name|candidate
argument_list|,
name|stat
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|retry
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Find {} after {} retries!"
argument_list|,
operator|(
name|selectedNode
operator|!=
literal|null
operator|)
condition|?
name|selectedNode
operator|.
name|getDatanodeID
argument_list|()
else|:
literal|"no datanode"
argument_list|,
name|retry
argument_list|)
expr_stmt|;
block|}
return|return
name|selectedNode
return|;
block|}
comment|/**    * Helper class wraps DatanodeID and SCMNodeStat.    */
DECL|class|NodeAndStat
specifier|static
class|class
name|NodeAndStat
block|{
DECL|field|datanodeID
specifier|private
specifier|final
name|DatanodeID
name|datanodeID
decl_stmt|;
DECL|field|stat
specifier|private
specifier|final
name|SCMNodeStat
name|stat
decl_stmt|;
DECL|method|NodeAndStat (final DatanodeID id, final SCMNodeStat stat)
name|NodeAndStat
parameter_list|(
specifier|final
name|DatanodeID
name|id
parameter_list|,
specifier|final
name|SCMNodeStat
name|stat
parameter_list|)
block|{
name|this
operator|.
name|datanodeID
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|stat
operator|=
name|stat
expr_stmt|;
block|}
DECL|method|getDatanodeID ()
specifier|public
name|DatanodeID
name|getDatanodeID
parameter_list|()
block|{
return|return
name|datanodeID
return|;
block|}
DECL|method|getDatanodeStat ()
specifier|public
name|SCMNodeStat
name|getDatanodeStat
parameter_list|()
block|{
return|return
name|stat
return|;
block|}
block|}
block|}
end_class

end_unit

