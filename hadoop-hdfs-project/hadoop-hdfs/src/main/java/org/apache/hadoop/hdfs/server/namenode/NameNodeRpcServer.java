begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HANDLER_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HANDLER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|MAX_PATH_DEPTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|MAX_PATH_LENGTH
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthCheckFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|HAServiceProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HDFSPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnregisteredNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnresolvedPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|ClientNamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|DatanodeProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|GetUserMappingsProtocolProtos
operator|.
name|GetUserMappingsProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|NamenodeProtocolProtos
operator|.
name|NamenodeProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|RefreshAuthorizationPolicyProtocolProtos
operator|.
name|RefreshAuthorizationPolicyProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|RefreshUserMappingsProtocolProtos
operator|.
name|RefreshUserMappingsProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|GetUserMappingsProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|GetUserMappingsProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|RefreshAuthorizationPolicyProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|RefreshAuthorizationPolicyProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|RefreshUserMappingsProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|RefreshUserMappingsProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|IncorrectVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|NameNodeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|web
operator|.
name|resources
operator|.
name|NamenodeWebHdfsMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|FinalizeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|HeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|WritableRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_comment
comment|/**  * This class is responsible for handling all of the RPC calls to the NameNode.  * It is created, started, and stopped by {@link NameNode}.  */
end_comment

begin_class
DECL|class|NameNodeRpcServer
class|class
name|NameNodeRpcServer
implements|implements
name|NamenodeProtocols
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|NameNode
operator|.
name|LOG
decl_stmt|;
DECL|field|stateChangeLog
specifier|private
specifier|static
specifier|final
name|Log
name|stateChangeLog
init|=
name|NameNode
operator|.
name|stateChangeLog
decl_stmt|;
comment|// Dependencies from other parts of NN.
DECL|field|namesystem
specifier|protected
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|nn
specifier|protected
specifier|final
name|NameNode
name|nn
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NameNodeMetrics
name|metrics
decl_stmt|;
DECL|field|serviceAuthEnabled
specifier|private
specifier|final
name|boolean
name|serviceAuthEnabled
decl_stmt|;
comment|/** The RPC server that listens to requests from DataNodes */
DECL|field|serviceRpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|serviceRpcServer
decl_stmt|;
DECL|field|serviceRPCAddress
specifier|private
specifier|final
name|InetSocketAddress
name|serviceRPCAddress
decl_stmt|;
comment|/** The RPC server that listens to requests from clients */
DECL|field|clientRpcServer
specifier|protected
specifier|final
name|RPC
operator|.
name|Server
name|clientRpcServer
decl_stmt|;
DECL|field|clientRpcAddress
specifier|protected
specifier|final
name|InetSocketAddress
name|clientRpcAddress
decl_stmt|;
DECL|field|minimumDataNodeVersion
specifier|private
specifier|final
name|String
name|minimumDataNodeVersion
decl_stmt|;
DECL|method|NameNodeRpcServer (Configuration conf, NameNode nn)
specifier|public
name|NameNodeRpcServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NameNode
name|nn
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nn
operator|=
name|nn
expr_stmt|;
name|this
operator|.
name|namesystem
operator|=
name|nn
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
expr_stmt|;
name|int
name|handlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_HANDLER_COUNT_KEY
argument_list|,
name|DFS_NAMENODE_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|ClientNamenodeProtocolServerSideTranslatorPB
name|clientProtocolServerTranslator
init|=
operator|new
name|ClientNamenodeProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|clientNNPbService
init|=
name|ClientNamenodeProtocol
operator|.
name|newReflectiveBlockingService
argument_list|(
name|clientProtocolServerTranslator
argument_list|)
decl_stmt|;
name|DatanodeProtocolServerSideTranslatorPB
name|dnProtoPbTranslator
init|=
operator|new
name|DatanodeProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|dnProtoPbService
init|=
name|DatanodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|dnProtoPbTranslator
argument_list|)
decl_stmt|;
name|NamenodeProtocolServerSideTranslatorPB
name|namenodeProtocolXlator
init|=
operator|new
name|NamenodeProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|NNPbService
init|=
name|NamenodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|namenodeProtocolXlator
argument_list|)
decl_stmt|;
name|RefreshAuthorizationPolicyProtocolServerSideTranslatorPB
name|refreshAuthPolicyXlator
init|=
operator|new
name|RefreshAuthorizationPolicyProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|refreshAuthService
init|=
name|RefreshAuthorizationPolicyProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|refreshAuthPolicyXlator
argument_list|)
decl_stmt|;
name|RefreshUserMappingsProtocolServerSideTranslatorPB
name|refreshUserMappingXlator
init|=
operator|new
name|RefreshUserMappingsProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|refreshUserMappingService
init|=
name|RefreshUserMappingsProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|refreshUserMappingXlator
argument_list|)
decl_stmt|;
name|GetUserMappingsProtocolServerSideTranslatorPB
name|getUserMappingXlator
init|=
operator|new
name|GetUserMappingsProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|getUserMappingService
init|=
name|GetUserMappingsProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|getUserMappingXlator
argument_list|)
decl_stmt|;
name|HAServiceProtocolServerSideTranslatorPB
name|haServiceProtocolXlator
init|=
operator|new
name|HAServiceProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|haPbService
init|=
name|HAServiceProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|haServiceProtocolXlator
argument_list|)
decl_stmt|;
name|WritableRpcEngine
operator|.
name|ensureInitialized
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|serviceRpcAddr
init|=
name|nn
operator|.
name|getServiceRpcServerAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceRpcAddr
operator|!=
literal|null
condition|)
block|{
name|int
name|serviceHandlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY
argument_list|,
name|DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
name|serviceRpcServer
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|clientNNPbService
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|serviceRpcAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|serviceRpcAddr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|serviceHandlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|namesystem
operator|.
name|getDelegationTokenSecretManager
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Add all the RPC protocols that the namenode implements
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|haPbService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|NamenodeProtocolPB
operator|.
name|class
argument_list|,
name|NNPbService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|DatanodeProtocolPB
operator|.
name|class
argument_list|,
name|dnProtoPbService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|RefreshAuthorizationPolicyProtocolPB
operator|.
name|class
argument_list|,
name|refreshAuthService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|RefreshUserMappingsProtocolPB
operator|.
name|class
argument_list|,
name|refreshUserMappingService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|GetUserMappingsProtocolPB
operator|.
name|class
argument_list|,
name|getUserMappingService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|serviceRPCAddress
operator|=
name|serviceRpcServer
operator|.
name|getListenerAddress
argument_list|()
expr_stmt|;
name|nn
operator|.
name|setRpcServiceServerAddress
argument_list|(
name|conf
argument_list|,
name|serviceRPCAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceRpcServer
operator|=
literal|null
expr_stmt|;
name|serviceRPCAddress
operator|=
literal|null
expr_stmt|;
block|}
name|InetSocketAddress
name|rpcAddr
init|=
name|nn
operator|.
name|getRpcServerAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|clientRpcServer
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|clientNNPbService
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|rpcAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|rpcAddr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|handlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|namesystem
operator|.
name|getDelegationTokenSecretManager
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Add all the RPC protocols that the namenode implements
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|haPbService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|NamenodeProtocolPB
operator|.
name|class
argument_list|,
name|NNPbService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|DatanodeProtocolPB
operator|.
name|class
argument_list|,
name|dnProtoPbService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|RefreshAuthorizationPolicyProtocolPB
operator|.
name|class
argument_list|,
name|refreshAuthService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|RefreshUserMappingsProtocolPB
operator|.
name|class
argument_list|,
name|refreshUserMappingService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|GetUserMappingsProtocolPB
operator|.
name|class
argument_list|,
name|getUserMappingService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
comment|// set service-level authorization security policy
if|if
condition|(
name|serviceAuthEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|clientRpcServer
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
operator|new
name|HDFSPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|serviceRpcServer
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
operator|new
name|HDFSPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The rpc-server port can be ephemeral... ensure we have the correct info
name|clientRpcAddress
operator|=
name|clientRpcServer
operator|.
name|getListenerAddress
argument_list|()
expr_stmt|;
name|nn
operator|.
name|setRpcServerAddress
argument_list|(
name|conf
argument_list|,
name|clientRpcAddress
argument_list|)
expr_stmt|;
name|minimumDataNodeVersion
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_SUPPORTED_DATANODE_VERSION_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_SUPPORTED_DATANODE_VERSION_DEFAULT
argument_list|)
expr_stmt|;
comment|// Set terse exception whose stack trace won't be logged
name|clientRpcServer
operator|.
name|addTerseExceptions
argument_list|(
name|SafeModeException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start client and service RPC servers.    */
DECL|method|start ()
name|void
name|start
parameter_list|()
block|{
name|clientRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|serviceRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Wait until the RPC servers have shutdown.    */
DECL|method|join ()
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|clientRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|serviceRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Stop client and service RPC servers.    */
DECL|method|stop ()
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|clientRpcServer
operator|!=
literal|null
condition|)
block|{
name|clientRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|serviceRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getServiceRpcAddress ()
name|InetSocketAddress
name|getServiceRpcAddress
parameter_list|()
block|{
return|return
name|serviceRPCAddress
return|;
block|}
DECL|method|getRpcAddress ()
name|InetSocketAddress
name|getRpcAddress
parameter_list|()
block|{
return|return
name|clientRpcAddress
return|;
block|}
comment|/////////////////////////////////////////////////////
comment|// NamenodeProtocol
comment|/////////////////////////////////////////////////////
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|getBlocks (DatanodeInfo datanode, long size)
specifier|public
name|BlocksWithLocations
name|getBlocks
parameter_list|(
name|DatanodeInfo
name|datanode
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected not positive size: "
operator|+
name|size
argument_list|)
throw|;
block|}
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlocks
argument_list|(
name|datanode
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|getBlockKeys ()
specifier|public
name|ExportedBlockKeys
name|getBlockKeys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlockKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|errorReport (NamenodeRegistration registration, int errorCode, String msg)
specifier|public
name|void
name|errorReport
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|verifyRequest
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error report from "
operator|+
name|registration
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|FATAL
condition|)
block|{
name|namesystem
operator|.
name|releaseBackupNode
argument_list|(
name|registration
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|register (NamenodeRegistration registration)
specifier|public
name|NamenodeRegistration
name|register
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyLayoutVersion
argument_list|(
name|registration
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|NamenodeRegistration
name|myRegistration
init|=
name|nn
operator|.
name|setRegistration
argument_list|()
decl_stmt|;
name|namesystem
operator|.
name|registerBackupNode
argument_list|(
name|registration
argument_list|,
name|myRegistration
argument_list|)
expr_stmt|;
return|return
name|myRegistration
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|startCheckpoint (NamenodeRegistration registration)
specifier|public
name|NamenodeCommand
name|startCheckpoint
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyRequest
argument_list|(
name|registration
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nn
operator|.
name|isRole
argument_list|(
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Only an ACTIVE node can invoke startCheckpoint."
argument_list|)
throw|;
return|return
name|namesystem
operator|.
name|startCheckpoint
argument_list|(
name|registration
argument_list|,
name|nn
operator|.
name|setRegistration
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|endCheckpoint (NamenodeRegistration registration, CheckpointSignature sig)
specifier|public
name|void
name|endCheckpoint
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|CheckpointSignature
name|sig
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|endCheckpoint
argument_list|(
name|registration
argument_list|,
name|sig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getDelegationToken (Text renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|namesystem
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|IOException
block|{
return|return
name|namesystem
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getBlockLocations (String src, long offset, long length)
specifier|public
name|LocatedBlocks
name|getBlockLocations
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|metrics
operator|.
name|incrGetBlockLocations
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getBlockLocations
argument_list|(
name|getClientMachine
argument_list|()
argument_list|,
name|src
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|namesystem
operator|.
name|getServerDefaults
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|create (String src, FsPermission masked, String clientName, EnumSetWritable<CreateFlag> flag, boolean createParent, short replication, long blockSize)
specifier|public
name|void
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|masked
parameter_list|,
name|String
name|clientName
parameter_list|,
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|clientMachine
init|=
name|getClientMachine
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.create: file "
operator|+
name|src
operator|+
literal|" for "
operator|+
name|clientName
operator|+
literal|" at "
operator|+
name|clientMachine
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"create: Pathname too long.  Limit "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" characters, "
operator|+
name|MAX_PATH_DEPTH
operator|+
literal|" levels."
argument_list|)
throw|;
block|}
name|namesystem
operator|.
name|startFile
argument_list|(
name|src
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|masked
argument_list|)
argument_list|,
name|clientName
argument_list|,
name|clientMachine
argument_list|,
name|flag
operator|.
name|get
argument_list|()
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrFilesCreated
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrCreateFileOps
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|append (String src, String clientName)
specifier|public
name|LocatedBlock
name|append
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|clientMachine
init|=
name|getClientMachine
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.append: file "
operator|+
name|src
operator|+
literal|" for "
operator|+
name|clientName
operator|+
literal|" at "
operator|+
name|clientMachine
argument_list|)
expr_stmt|;
block|}
name|LocatedBlock
name|info
init|=
name|namesystem
operator|.
name|appendFile
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|,
name|clientMachine
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|incrFilesAppended
argument_list|()
expr_stmt|;
return|return
name|info
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|recoverLease (String src, String clientName)
specifier|public
name|boolean
name|recoverLease
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|clientMachine
init|=
name|getClientMachine
argument_list|()
decl_stmt|;
return|return
name|namesystem
operator|.
name|recoverLease
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|,
name|clientMachine
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setReplication (String src, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|String
name|src
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|namesystem
operator|.
name|setReplication
argument_list|(
name|src
argument_list|,
name|replication
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setPermission (String src, FsPermission permissions)
specifier|public
name|void
name|setPermission
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|setPermission
argument_list|(
name|src
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setOwner (String src, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|setOwner
argument_list|(
name|src
argument_list|,
name|username
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|addBlock (String src, String clientName, ExtendedBlock previous, DatanodeInfo[] excludedNodes)
specifier|public
name|LocatedBlock
name|addBlock
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|previous
parameter_list|,
name|DatanodeInfo
index|[]
name|excludedNodes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*BLOCK* NameNode.addBlock: file "
operator|+
name|src
operator|+
literal|" for "
operator|+
name|clientName
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodesSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|excludedNodes
operator|!=
literal|null
condition|)
block|{
name|excludedNodesSet
operator|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
argument_list|(
name|excludedNodes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|excludedNodes
control|)
block|{
name|excludedNodesSet
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
name|LocatedBlock
name|locatedBlock
init|=
name|namesystem
operator|.
name|getAdditionalBlock
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|,
name|previous
argument_list|,
name|excludedNodesSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|locatedBlock
operator|!=
literal|null
condition|)
name|metrics
operator|.
name|incrAddBlockOps
argument_list|()
expr_stmt|;
return|return
name|locatedBlock
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getAdditionalDatanode (final String src, final ExtendedBlock blk, final DatanodeInfo[] existings, final DatanodeInfo[] excludes, final int numAdditionalNodes, final String clientName )
specifier|public
name|LocatedBlock
name|getAdditionalDatanode
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|ExtendedBlock
name|blk
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|existings
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|excludes
parameter_list|,
specifier|final
name|int
name|numAdditionalNodes
parameter_list|,
specifier|final
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getAdditionalDatanode: src="
operator|+
name|src
operator|+
literal|", blk="
operator|+
name|blk
operator|+
literal|", existings="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|existings
argument_list|)
operator|+
literal|", excludes="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|excludes
argument_list|)
operator|+
literal|", numAdditionalNodes="
operator|+
name|numAdditionalNodes
operator|+
literal|", clientName="
operator|+
name|clientName
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incrGetAdditionalDatanodeOps
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludeSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|excludes
operator|!=
literal|null
condition|)
block|{
name|excludeSet
operator|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
argument_list|(
name|excludes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|excludes
control|)
block|{
name|excludeSet
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|namesystem
operator|.
name|getAdditionalDatanode
argument_list|(
name|src
argument_list|,
name|blk
argument_list|,
name|existings
argument_list|,
name|excludeSet
argument_list|,
name|numAdditionalNodes
argument_list|,
name|clientName
argument_list|)
return|;
block|}
comment|/**    * The client needs to give up on the block.    */
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|abandonBlock (ExtendedBlock b, String src, String holder)
specifier|public
name|void
name|abandonBlock
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|holder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*BLOCK* NameNode.abandonBlock: "
operator|+
name|b
operator|+
literal|" of file "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|namesystem
operator|.
name|abandonBlock
argument_list|(
name|b
argument_list|,
name|src
argument_list|,
name|holder
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot abandon block during write to "
operator|+
name|src
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|complete (String src, String clientName, ExtendedBlock last)
specifier|public
name|boolean
name|complete
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|last
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.complete: "
operator|+
name|src
operator|+
literal|" for "
operator|+
name|clientName
argument_list|)
expr_stmt|;
block|}
return|return
name|namesystem
operator|.
name|completeFile
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|,
name|last
argument_list|)
return|;
block|}
comment|/**    * The client has detected an error on the specified located blocks     * and is reporting them to the server.  For now, the namenode will     * mark the block as corrupt.  In the future we might     * check the blocks are actually corrupt.     */
annotation|@
name|Override
comment|// ClientProtocol, DatanodeProtocol
DECL|method|reportBadBlocks (LocatedBlock[] blocks)
specifier|public
name|void
name|reportBadBlocks
parameter_list|(
name|LocatedBlock
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|reportBadBlocks
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|updateBlockForPipeline (ExtendedBlock block, String clientName)
specifier|public
name|LocatedBlock
name|updateBlockForPipeline
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|namesystem
operator|.
name|updateBlockForPipeline
argument_list|(
name|block
argument_list|,
name|clientName
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|updatePipeline (String clientName, ExtendedBlock oldBlock, ExtendedBlock newBlock, DatanodeID[] newNodes)
specifier|public
name|void
name|updatePipeline
parameter_list|(
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|oldBlock
parameter_list|,
name|ExtendedBlock
name|newBlock
parameter_list|,
name|DatanodeID
index|[]
name|newNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|updatePipeline
argument_list|(
name|clientName
argument_list|,
name|oldBlock
argument_list|,
name|newBlock
argument_list|,
name|newNodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|commitBlockSynchronization (ExtendedBlock block, long newgenerationstamp, long newlength, boolean closeFile, boolean deleteblock, DatanodeID[] newtargets, String[] newtargetstorages)
specifier|public
name|void
name|commitBlockSynchronization
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|long
name|newgenerationstamp
parameter_list|,
name|long
name|newlength
parameter_list|,
name|boolean
name|closeFile
parameter_list|,
name|boolean
name|deleteblock
parameter_list|,
name|DatanodeID
index|[]
name|newtargets
parameter_list|,
name|String
index|[]
name|newtargetstorages
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|commitBlockSynchronization
argument_list|(
name|block
argument_list|,
name|newgenerationstamp
argument_list|,
name|newlength
argument_list|,
name|closeFile
argument_list|,
name|deleteblock
argument_list|,
name|newtargets
argument_list|,
name|newtargetstorages
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getPreferredBlockSize (String filename)
specifier|public
name|long
name|getPreferredBlockSize
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|namesystem
operator|.
name|getPreferredBlockSize
argument_list|(
name|filename
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|rename (String src, String dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.rename: "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"rename: Pathname too long.  Limit "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" characters, "
operator|+
name|MAX_PATH_DEPTH
operator|+
literal|" levels."
argument_list|)
throw|;
block|}
name|boolean
name|ret
init|=
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|metrics
operator|.
name|incrFilesRenamed
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|concat (String trg, String[] src)
specifier|public
name|void
name|concat
parameter_list|(
name|String
name|trg
parameter_list|,
name|String
index|[]
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|concat
argument_list|(
name|trg
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|rename2 (String src, String dst, Options.Rename... options)
specifier|public
name|void
name|rename2
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.rename: "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"rename: Pathname too long.  Limit "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" characters, "
operator|+
name|MAX_PATH_DEPTH
operator|+
literal|" levels."
argument_list|)
throw|;
block|}
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrFilesRenamed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|delete (String src, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* Namenode.delete: src="
operator|+
name|src
operator|+
literal|", recursive="
operator|+
name|recursive
argument_list|)
expr_stmt|;
block|}
name|boolean
name|ret
init|=
name|namesystem
operator|.
name|delete
argument_list|(
name|src
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
condition|)
name|metrics
operator|.
name|incrDeleteFileOps
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Check path length does not exceed maximum.  Returns true if    * length and depth are okay.  Returns false if length is too long     * or depth is too great.    */
DECL|method|checkPathLength (String src)
specifier|private
name|boolean
name|checkPathLength
parameter_list|(
name|String
name|src
parameter_list|)
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
return|return
operator|(
name|src
operator|.
name|length
argument_list|()
operator|<=
name|MAX_PATH_LENGTH
operator|&&
name|srcPath
operator|.
name|depth
argument_list|()
operator|<=
name|MAX_PATH_DEPTH
operator|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|mkdirs (String src, FsPermission masked, boolean createParent)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|masked
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.mkdirs: "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"mkdirs: Pathname too long.  Limit "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" characters, "
operator|+
name|MAX_PATH_DEPTH
operator|+
literal|" levels."
argument_list|)
throw|;
block|}
return|return
name|namesystem
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|masked
argument_list|)
argument_list|,
name|createParent
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|renewLease (String clientName)
specifier|public
name|void
name|renewLease
parameter_list|(
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|renewLease
argument_list|(
name|clientName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getListing (String src, byte[] startAfter, boolean needLocation)
specifier|public
name|DirectoryListing
name|getListing
parameter_list|(
name|String
name|src
parameter_list|,
name|byte
index|[]
name|startAfter
parameter_list|,
name|boolean
name|needLocation
parameter_list|)
throws|throws
name|IOException
block|{
name|DirectoryListing
name|files
init|=
name|namesystem
operator|.
name|getListing
argument_list|(
name|src
argument_list|,
name|startAfter
argument_list|,
name|needLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrGetListingOps
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrFilesInGetListingOps
argument_list|(
name|files
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getFileInfo (String src)
specifier|public
name|HdfsFileStatus
name|getFileInfo
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|metrics
operator|.
name|incrFileInfoOps
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getFileLinkInfo (String src)
specifier|public
name|HdfsFileStatus
name|getFileLinkInfo
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|metrics
operator|.
name|incrFileInfoOps
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getStats ()
specifier|public
name|long
index|[]
name|getStats
parameter_list|()
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|getStats
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getDatanodeReport (DatanodeReportType type)
specifier|public
name|DatanodeInfo
index|[]
name|getDatanodeReport
parameter_list|(
name|DatanodeReportType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|DatanodeInfo
name|results
index|[]
init|=
name|namesystem
operator|.
name|datanodeReport
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find datanode report"
argument_list|)
throw|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setSafeMode (SafeModeAction action)
specifier|public
name|boolean
name|setSafeMode
parameter_list|(
name|SafeModeAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|setSafeMode
argument_list|(
name|action
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|restoreFailedStorage (String arg)
specifier|public
name|boolean
name|restoreFailedStorage
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|restoreFailedStorage
argument_list|(
name|arg
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|saveNamespace ()
specifier|public
name|void
name|saveNamespace
parameter_list|()
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|rollEdits ()
specifier|public
name|long
name|rollEdits
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|JOURNAL
argument_list|)
expr_stmt|;
name|CheckpointSignature
name|sig
init|=
name|namesystem
operator|.
name|rollEditLog
argument_list|()
decl_stmt|;
return|return
name|sig
operator|.
name|getCurSegmentTxId
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|refreshNodes ()
specifier|public
name|void
name|refreshNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|refreshNodes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|getTransactionID ()
specifier|public
name|long
name|getTransactionID
parameter_list|()
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|getFSImage
argument_list|()
operator|.
name|getLastAppliedOrWrittenTxId
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|getMostRecentCheckpointTxId ()
specifier|public
name|long
name|getMostRecentCheckpointTxId
parameter_list|()
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|getFSImage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|rollEditLog ()
specifier|public
name|CheckpointSignature
name|rollEditLog
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|namesystem
operator|.
name|rollEditLog
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|getEditLogManifest (long sinceTxId)
specifier|public
name|RemoteEditLogManifest
name|getEditLogManifest
parameter_list|(
name|long
name|sinceTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|getEditLog
argument_list|()
operator|.
name|getEditLogManifest
argument_list|(
name|sinceTxId
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|finalizeUpgrade ()
specifier|public
name|void
name|finalizeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|finalizeUpgrade
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|metaSave (String filename)
specifier|public
name|void
name|metaSave
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|metaSave
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|listCorruptFileBlocks (String path, String cookie)
specifier|public
name|CorruptFileBlocks
name|listCorruptFileBlocks
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|cookie
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|cookieTab
init|=
operator|new
name|String
index|[]
block|{
name|cookie
block|}
decl_stmt|;
name|Collection
argument_list|<
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
argument_list|>
name|fbs
init|=
name|namesystem
operator|.
name|listCorruptFileBlocks
argument_list|(
name|path
argument_list|,
name|cookieTab
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[
name|fbs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
name|fb
range|:
name|fbs
control|)
block|{
name|files
index|[
name|i
operator|++
index|]
operator|=
name|fb
operator|.
name|path
expr_stmt|;
block|}
return|return
operator|new
name|CorruptFileBlocks
argument_list|(
name|files
argument_list|,
name|cookieTab
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * Tell all datanodes to use a new, non-persistent bandwidth value for    * dfs.datanode.balance.bandwidthPerSec.    * @param bandwidth Balancer bandwidth in bytes per second for all datanodes.    * @throws IOException    */
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setBalancerBandwidth (long bandwidth)
specifier|public
name|void
name|setBalancerBandwidth
parameter_list|(
name|long
name|bandwidth
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|setBalancerBandwidth
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getContentSummary (String path)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|namesystem
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setQuota (String path, long namespaceQuota, long diskspaceQuota)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|namespaceQuota
parameter_list|,
name|long
name|diskspaceQuota
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
name|namespaceQuota
argument_list|,
name|diskspaceQuota
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|fsync (String src, String clientName)
specifier|public
name|void
name|fsync
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|fsync
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setTimes (String src, long mtime, long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|setTimes
argument_list|(
name|src
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|createSymlink (String target, String link, FsPermission dirPerms, boolean createParent)
specifier|public
name|void
name|createSymlink
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|link
parameter_list|,
name|FsPermission
name|dirPerms
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
name|metrics
operator|.
name|incrCreateSymlinkOps
argument_list|()
expr_stmt|;
comment|/* We enforce the MAX_PATH_LENGTH limit even though a symlink target       * URI may refer to a non-HDFS file system.       */
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|link
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Symlink path exceeds "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" character limit"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid symlink target"
argument_list|)
throw|;
block|}
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|namesystem
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
name|link
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|dirPerms
argument_list|)
argument_list|,
name|createParent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getLinkTarget (String path)
specifier|public
name|String
name|getLinkTarget
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|metrics
operator|.
name|incrGetLinkTargetOps
argument_list|()
expr_stmt|;
try|try
block|{
name|HdfsFileStatus
name|stat
init|=
name|namesystem
operator|.
name|getFileInfo
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
comment|// NB: getSymlink throws IOException if !stat.isSymlink()
return|return
name|stat
operator|.
name|getSymlink
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnresolvedPathException
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getResolvedPath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnresolvedLinkException
name|e
parameter_list|)
block|{
comment|// The NameNode should only throw an UnresolvedPathException
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"UnresolvedLinkException thrown"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|registerDatanode (DatanodeRegistration nodeReg)
specifier|public
name|DatanodeRegistration
name|registerDatanode
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyLayoutVersion
argument_list|(
name|nodeReg
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|verifySoftwareVersion
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|registerDatanode
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
return|return
name|nodeReg
return|;
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|sendHeartbeat (DatanodeRegistration nodeReg, StorageReport[] report, int xmitsInProgress, int xceiverCount, int failedVolumes)
specifier|public
name|HeartbeatResponse
name|sendHeartbeat
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|StorageReport
index|[]
name|report
parameter_list|,
name|int
name|xmitsInProgress
parameter_list|,
name|int
name|xceiverCount
parameter_list|,
name|int
name|failedVolumes
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyRequest
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|handleHeartbeat
argument_list|(
name|nodeReg
argument_list|,
name|report
index|[
literal|0
index|]
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|report
index|[
literal|0
index|]
operator|.
name|getDfsUsed
argument_list|()
argument_list|,
name|report
index|[
literal|0
index|]
operator|.
name|getRemaining
argument_list|()
argument_list|,
name|report
index|[
literal|0
index|]
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|,
name|xceiverCount
argument_list|,
name|xmitsInProgress
argument_list|,
name|failedVolumes
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|blockReport (DatanodeRegistration nodeReg, String poolId, StorageBlockReport[] reports)
specifier|public
name|DatanodeCommand
name|blockReport
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|String
name|poolId
parameter_list|,
name|StorageBlockReport
index|[]
name|reports
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyRequest
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
name|BlockListAsLongs
name|blist
init|=
operator|new
name|BlockListAsLongs
argument_list|(
name|reports
index|[
literal|0
index|]
operator|.
name|getBlocks
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*BLOCK* NameNode.blockReport: "
operator|+
literal|"from "
operator|+
name|nodeReg
operator|+
literal|" "
operator|+
name|blist
operator|.
name|getNumberOfBlocks
argument_list|()
operator|+
literal|" blocks"
argument_list|)
expr_stmt|;
block|}
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|processReport
argument_list|(
name|nodeReg
argument_list|,
name|poolId
argument_list|,
name|blist
argument_list|)
expr_stmt|;
if|if
condition|(
name|nn
operator|.
name|getFSImage
argument_list|()
operator|.
name|isUpgradeFinalized
argument_list|()
operator|&&
operator|!
name|nn
operator|.
name|isStandbyState
argument_list|()
condition|)
return|return
operator|new
name|FinalizeCommand
argument_list|(
name|poolId
argument_list|)
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|blockReceivedAndDeleted (DatanodeRegistration nodeReg, String poolId, StorageReceivedDeletedBlocks[] receivedAndDeletedBlocks)
specifier|public
name|void
name|blockReceivedAndDeleted
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|String
name|poolId
parameter_list|,
name|StorageReceivedDeletedBlocks
index|[]
name|receivedAndDeletedBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyRequest
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*BLOCK* NameNode.blockReceivedAndDeleted: "
operator|+
literal|"from "
operator|+
name|nodeReg
operator|+
literal|" "
operator|+
name|receivedAndDeletedBlocks
operator|.
name|length
operator|+
literal|" blocks."
argument_list|)
expr_stmt|;
block|}
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|processIncrementalBlockReport
argument_list|(
name|nodeReg
argument_list|,
name|poolId
argument_list|,
name|receivedAndDeletedBlocks
index|[
literal|0
index|]
operator|.
name|getBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|errorReport (DatanodeRegistration nodeReg, int errorCode, String msg)
specifier|public
name|void
name|errorReport
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dnName
init|=
operator|(
name|nodeReg
operator|==
literal|null
operator|)
condition|?
literal|"Unknown DataNode"
else|:
name|nodeReg
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|DatanodeProtocol
operator|.
name|NOTIFY
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error report from "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
name|verifyRequest
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|DatanodeProtocol
operator|.
name|DISK_ERROR
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Disk error on "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|errorCode
operator|==
name|DatanodeProtocol
operator|.
name|FATAL_DISK_ERROR
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fatal disk error on "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|removeDatanode
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error report from "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// DatanodeProtocol, NamenodeProtocol
DECL|method|versionRequest ()
specifier|public
name|NamespaceInfo
name|versionRequest
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|namesystem
operator|.
name|getNamespaceInfo
argument_list|()
return|;
block|}
comment|/**     * Verifies the given registration.    *     * @param nodeReg node registration    * @throws UnregisteredNodeException if the registration is invalid    */
DECL|method|verifyRequest (NodeRegistration nodeReg)
name|void
name|verifyRequest
parameter_list|(
name|NodeRegistration
name|nodeReg
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyLayoutVersion
argument_list|(
name|nodeReg
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|namesystem
operator|.
name|getRegistrationID
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeReg
operator|.
name|getRegistrationID
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid registrationID - expected: "
operator|+
name|namesystem
operator|.
name|getRegistrationID
argument_list|()
operator|+
literal|" received: "
operator|+
name|nodeReg
operator|.
name|getRegistrationID
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnregisteredNodeException
argument_list|(
name|nodeReg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
comment|// RefreshAuthorizationPolicyProtocol
DECL|method|refreshServiceAcl ()
specifier|public
name|void
name|refreshServiceAcl
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|serviceAuthEnabled
condition|)
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
literal|"Service Level Authorization not enabled!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|clientRpcServer
operator|.
name|refreshServiceAcl
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|HDFSPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|serviceRpcServer
operator|.
name|refreshServiceAcl
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|HDFSPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// RefreshAuthorizationPolicyProtocol
DECL|method|refreshUserToGroupsMappings ()
specifier|public
name|void
name|refreshUserToGroupsMappings
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Refreshing all user-to-groups mappings. Requested by user: "
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|()
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// RefreshAuthorizationPolicyProtocol
DECL|method|refreshSuperUserGroupsConfiguration ()
specifier|public
name|void
name|refreshSuperUserGroupsConfiguration
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Refreshing SuperUser proxy group mapping list "
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// GetUserMappingsProtocol
DECL|method|getGroupsForUser (String user)
specifier|public
name|String
index|[]
name|getGroupsForUser
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting groups for user "
operator|+
name|user
argument_list|)
expr_stmt|;
block|}
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
operator|.
name|getGroupNames
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// HAServiceProtocol
DECL|method|monitorHealth ()
specifier|public
specifier|synchronized
name|void
name|monitorHealth
parameter_list|()
throws|throws
name|HealthCheckFailedException
throws|,
name|AccessControlException
block|{
name|nn
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// HAServiceProtocol
DECL|method|transitionToActive (StateChangeRequestInfo req)
specifier|public
specifier|synchronized
name|void
name|transitionToActive
parameter_list|(
name|StateChangeRequestInfo
name|req
parameter_list|)
throws|throws
name|ServiceFailedException
throws|,
name|AccessControlException
block|{
name|nn
operator|.
name|checkHaStateChange
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|nn
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// HAServiceProtocol
DECL|method|transitionToStandby (StateChangeRequestInfo req)
specifier|public
specifier|synchronized
name|void
name|transitionToStandby
parameter_list|(
name|StateChangeRequestInfo
name|req
parameter_list|)
throws|throws
name|ServiceFailedException
throws|,
name|AccessControlException
block|{
name|nn
operator|.
name|checkHaStateChange
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|nn
operator|.
name|transitionToStandby
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// HAServiceProtocol
DECL|method|getServiceStatus ()
specifier|public
specifier|synchronized
name|HAServiceStatus
name|getServiceStatus
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|ServiceFailedException
block|{
return|return
name|nn
operator|.
name|getServiceStatus
argument_list|()
return|;
block|}
comment|/**    * Verify version.    *     * @param version    * @throws IOException    */
DECL|method|verifyLayoutVersion (int version)
name|void
name|verifyLayoutVersion
parameter_list|(
name|int
name|version
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|version
operator|!=
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
condition|)
throw|throw
operator|new
name|IncorrectVersionException
argument_list|(
name|version
argument_list|,
literal|"data node"
argument_list|)
throw|;
block|}
DECL|method|verifySoftwareVersion (DatanodeRegistration dnReg)
specifier|private
name|void
name|verifySoftwareVersion
parameter_list|(
name|DatanodeRegistration
name|dnReg
parameter_list|)
throws|throws
name|IncorrectVersionException
block|{
name|String
name|dnVersion
init|=
name|dnReg
operator|.
name|getSoftwareVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|compareVersions
argument_list|(
name|dnVersion
argument_list|,
name|minimumDataNodeVersion
argument_list|)
operator|<
literal|0
condition|)
block|{
name|IncorrectVersionException
name|ive
init|=
operator|new
name|IncorrectVersionException
argument_list|(
name|minimumDataNodeVersion
argument_list|,
name|dnVersion
argument_list|,
literal|"DataNode"
argument_list|,
literal|"NameNode"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|ive
operator|.
name|getMessage
argument_list|()
operator|+
literal|" DN: "
operator|+
name|dnReg
argument_list|)
expr_stmt|;
throw|throw
name|ive
throw|;
block|}
name|String
name|nnVersion
init|=
name|VersionInfo
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dnVersion
operator|.
name|equals
argument_list|(
name|nnVersion
argument_list|)
condition|)
block|{
name|String
name|messagePrefix
init|=
literal|"Reported DataNode version '"
operator|+
name|dnVersion
operator|+
literal|"' of DN "
operator|+
name|dnReg
operator|+
literal|" does not match NameNode version '"
operator|+
name|nnVersion
operator|+
literal|"'"
decl_stmt|;
name|long
name|nnCTime
init|=
name|nn
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getCTime
argument_list|()
decl_stmt|;
name|long
name|dnCTime
init|=
name|dnReg
operator|.
name|getStorageInfo
argument_list|()
operator|.
name|getCTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|nnCTime
operator|!=
name|dnCTime
condition|)
block|{
name|IncorrectVersionException
name|ive
init|=
operator|new
name|IncorrectVersionException
argument_list|(
name|messagePrefix
operator|+
literal|" and CTime of DN ('"
operator|+
name|dnCTime
operator|+
literal|"') does not match CTime of NN ('"
operator|+
name|nnCTime
operator|+
literal|"')"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|ive
argument_list|)
expr_stmt|;
throw|throw
name|ive
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|messagePrefix
operator|+
literal|". Note: This is normal during a rolling upgrade."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getClientMachine ()
specifier|private
specifier|static
name|String
name|getClientMachine
parameter_list|()
block|{
name|String
name|clientMachine
init|=
name|NamenodeWebHdfsMethods
operator|.
name|getRemoteAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientMachine
operator|==
literal|null
condition|)
block|{
comment|//not a web client
name|clientMachine
operator|=
name|Server
operator|.
name|getRemoteAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clientMachine
operator|==
literal|null
condition|)
block|{
comment|//not a RPC client
name|clientMachine
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|clientMachine
return|;
block|}
annotation|@
name|Override
DECL|method|getDataEncryptionKey ()
specifier|public
name|DataEncryptionKey
name|getDataEncryptionKey
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|generateDataEncryptionKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createSnapshot (String snapshotName, String snapshotRoot)
specifier|public
name|void
name|createSnapshot
parameter_list|(
name|String
name|snapshotName
parameter_list|,
name|String
name|snapshotRoot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|snapshotRoot
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"createSnapshot: Pathname too long.  Limit "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" characters, "
operator|+
name|MAX_PATH_DEPTH
operator|+
literal|" levels."
argument_list|)
throw|;
block|}
name|metrics
operator|.
name|incrCreateSnapshotOps
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|createSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|snapshotRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// Client Protocol
DECL|method|allowSnapshot (String snapshotRoot)
specifier|public
name|void
name|allowSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|metrics
operator|.
name|incrAllowSnapshotOps
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|allowSnapshot
argument_list|(
name|snapshotRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// Client Protocol
DECL|method|disallowSnapshot (String snapshot)
specifier|public
name|void
name|disallowSnapshot
parameter_list|(
name|String
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|metrics
operator|.
name|incrDisAllowSnapshotOps
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|disallowSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

