begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|IPC_MAXIMUM_DATA_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|IPC_MAXIMUM_DATA_LENGTH_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HANDLER_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HANDLER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIFELINE_HANDLER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIFELINE_HANDLER_RATIO_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIFELINE_HANDLER_RATIO_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|MAX_PATH_DEPTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|MAX_PATH_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|now
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|ReconfigurationTaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
operator|.
name|BatchedEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AddBlockFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|QuotaUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthCheckFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|proto
operator|.
name|HAServiceProtocolProtos
operator|.
name|HAServiceProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|protocolPB
operator|.
name|HAServiceProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HDFSPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|EventBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|inotify
operator|.
name|EventBatchList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AclException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddErasureCodingPolicyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AlreadyBeingCreatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ECBlockGroupStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|EncryptionZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSLimitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsLocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LastBlockWithStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|ReencryptAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|RollingUpgradeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|StoragePolicySatisfierMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|StoragePolicySatisfyPathStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|NSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|OpenFileEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|OpenFilesIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|OpenFilesIterator
operator|.
name|OpenFilesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaByStorageTypeExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RecoveryInProgressException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ReplicatedBlockStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ZoneReencryptionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RollingUpgradeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReportListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnregisteredNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnresolvedPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|ClientNamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeLifelineProtocolProtos
operator|.
name|DatanodeLifelineProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|DatanodeProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|NamenodeProtocolProtos
operator|.
name|NamenodeProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ReconfigurationProtocolProtos
operator|.
name|ReconfigurationProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeLifelineProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeLifelineProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|DatanodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|NamenodeProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ReconfigurationProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ReconfigurationProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|ExportedBlockKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerFaultInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HttpGetFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|IncorrectVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|NameNodeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockReportContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksStorageMoveAttemptFinished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|FinalizeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|HeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|RemoteEditLogManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowDiskReports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowPeerReports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageBlockReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|VolumeFailureSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetryCache
operator|.
name|CacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetryCache
operator|.
name|CacheEntryWithPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RefreshRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RefreshResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|proto
operator|.
name|RefreshAuthorizationPolicyProtocolProtos
operator|.
name|RefreshAuthorizationPolicyProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|proto
operator|.
name|RefreshUserMappingsProtocolProtos
operator|.
name|RefreshUserMappingsProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|protocolPB
operator|.
name|RefreshAuthorizationPolicyProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|protocolPB
operator|.
name|RefreshAuthorizationPolicyProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|protocolPB
operator|.
name|RefreshUserMappingsProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|protocolPB
operator|.
name|RefreshUserMappingsProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protocolPB
operator|.
name|RefreshCallQueueProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protocolPB
operator|.
name|RefreshCallQueueProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|proto
operator|.
name|RefreshCallQueueProtocolProtos
operator|.
name|RefreshCallQueueProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protocolPB
operator|.
name|GenericRefreshProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|protocolPB
operator|.
name|GenericRefreshProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|proto
operator|.
name|GenericRefreshProtocolProtos
operator|.
name|GenericRefreshProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|proto
operator|.
name|GetUserMappingsProtocolProtos
operator|.
name|GetUserMappingsProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|protocolPB
operator|.
name|GetUserMappingsProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|protocolPB
operator|.
name|GetUserMappingsProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|SpanReceiverInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|TraceAdminPB
operator|.
name|TraceAdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|TraceAdminProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tracing
operator|.
name|TraceAdminProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * This class is responsible for handling all of the RPC calls to the NameNode.  * It is created, started, and stopped by {@link NameNode}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|class|NameNodeRpcServer
specifier|public
class|class
name|NameNodeRpcServer
implements|implements
name|NamenodeProtocols
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|NameNode
operator|.
name|LOG
decl_stmt|;
DECL|field|stateChangeLog
specifier|private
specifier|static
specifier|final
name|Logger
name|stateChangeLog
init|=
name|NameNode
operator|.
name|stateChangeLog
decl_stmt|;
DECL|field|blockStateChangeLog
specifier|private
specifier|static
specifier|final
name|Logger
name|blockStateChangeLog
init|=
name|NameNode
operator|.
name|blockStateChangeLog
decl_stmt|;
comment|// Dependencies from other parts of NN.
DECL|field|namesystem
specifier|protected
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|nn
specifier|protected
specifier|final
name|NameNode
name|nn
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|NameNodeMetrics
name|metrics
decl_stmt|;
DECL|field|retryCache
specifier|private
specifier|final
name|RetryCache
name|retryCache
decl_stmt|;
DECL|field|serviceAuthEnabled
specifier|private
specifier|final
name|boolean
name|serviceAuthEnabled
decl_stmt|;
comment|/** The RPC server that listens to requests from DataNodes */
DECL|field|serviceRpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|serviceRpcServer
decl_stmt|;
DECL|field|serviceRPCAddress
specifier|private
specifier|final
name|InetSocketAddress
name|serviceRPCAddress
decl_stmt|;
comment|/** The RPC server that listens to lifeline requests */
DECL|field|lifelineRpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|lifelineRpcServer
decl_stmt|;
DECL|field|lifelineRPCAddress
specifier|private
specifier|final
name|InetSocketAddress
name|lifelineRPCAddress
decl_stmt|;
comment|/** The RPC server that listens to requests from clients */
DECL|field|clientRpcServer
specifier|protected
specifier|final
name|RPC
operator|.
name|Server
name|clientRpcServer
decl_stmt|;
DECL|field|clientRpcAddress
specifier|protected
specifier|final
name|InetSocketAddress
name|clientRpcAddress
decl_stmt|;
DECL|field|minimumDataNodeVersion
specifier|private
specifier|final
name|String
name|minimumDataNodeVersion
decl_stmt|;
DECL|field|defaultECPolicyName
specifier|private
specifier|final
name|String
name|defaultECPolicyName
decl_stmt|;
DECL|method|NameNodeRpcServer (Configuration conf, NameNode nn)
specifier|public
name|NameNodeRpcServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NameNode
name|nn
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nn
operator|=
name|nn
expr_stmt|;
name|this
operator|.
name|namesystem
operator|=
name|nn
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|retryCache
operator|=
name|namesystem
operator|.
name|getRetryCache
argument_list|()
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
expr_stmt|;
name|int
name|handlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_HANDLER_COUNT_KEY
argument_list|,
name|DFS_NAMENODE_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|ClientNamenodeProtocolServerSideTranslatorPB
name|clientProtocolServerTranslator
init|=
operator|new
name|ClientNamenodeProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|clientNNPbService
init|=
name|ClientNamenodeProtocol
operator|.
name|newReflectiveBlockingService
argument_list|(
name|clientProtocolServerTranslator
argument_list|)
decl_stmt|;
name|int
name|maxDataLength
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|IPC_MAXIMUM_DATA_LENGTH
argument_list|,
name|IPC_MAXIMUM_DATA_LENGTH_DEFAULT
argument_list|)
decl_stmt|;
name|DatanodeProtocolServerSideTranslatorPB
name|dnProtoPbTranslator
init|=
operator|new
name|DatanodeProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|,
name|maxDataLength
argument_list|)
decl_stmt|;
name|BlockingService
name|dnProtoPbService
init|=
name|DatanodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|dnProtoPbTranslator
argument_list|)
decl_stmt|;
name|DatanodeLifelineProtocolServerSideTranslatorPB
name|lifelineProtoPbTranslator
init|=
operator|new
name|DatanodeLifelineProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|lifelineProtoPbService
init|=
name|DatanodeLifelineProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|lifelineProtoPbTranslator
argument_list|)
decl_stmt|;
name|NamenodeProtocolServerSideTranslatorPB
name|namenodeProtocolXlator
init|=
operator|new
name|NamenodeProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|NNPbService
init|=
name|NamenodeProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|namenodeProtocolXlator
argument_list|)
decl_stmt|;
name|RefreshAuthorizationPolicyProtocolServerSideTranslatorPB
name|refreshAuthPolicyXlator
init|=
operator|new
name|RefreshAuthorizationPolicyProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|refreshAuthService
init|=
name|RefreshAuthorizationPolicyProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|refreshAuthPolicyXlator
argument_list|)
decl_stmt|;
name|RefreshUserMappingsProtocolServerSideTranslatorPB
name|refreshUserMappingXlator
init|=
operator|new
name|RefreshUserMappingsProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|refreshUserMappingService
init|=
name|RefreshUserMappingsProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|refreshUserMappingXlator
argument_list|)
decl_stmt|;
name|RefreshCallQueueProtocolServerSideTranslatorPB
name|refreshCallQueueXlator
init|=
operator|new
name|RefreshCallQueueProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|refreshCallQueueService
init|=
name|RefreshCallQueueProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|refreshCallQueueXlator
argument_list|)
decl_stmt|;
name|GenericRefreshProtocolServerSideTranslatorPB
name|genericRefreshXlator
init|=
operator|new
name|GenericRefreshProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|genericRefreshService
init|=
name|GenericRefreshProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|genericRefreshXlator
argument_list|)
decl_stmt|;
name|GetUserMappingsProtocolServerSideTranslatorPB
name|getUserMappingXlator
init|=
operator|new
name|GetUserMappingsProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|getUserMappingService
init|=
name|GetUserMappingsProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|getUserMappingXlator
argument_list|)
decl_stmt|;
name|HAServiceProtocolServerSideTranslatorPB
name|haServiceProtocolXlator
init|=
operator|new
name|HAServiceProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|haPbService
init|=
name|HAServiceProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|haServiceProtocolXlator
argument_list|)
decl_stmt|;
name|ReconfigurationProtocolServerSideTranslatorPB
name|reconfigurationProtocolXlator
init|=
operator|new
name|ReconfigurationProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|reconfigurationPbService
init|=
name|ReconfigurationProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|reconfigurationProtocolXlator
argument_list|)
decl_stmt|;
name|TraceAdminProtocolServerSideTranslatorPB
name|traceAdminXlator
init|=
operator|new
name|TraceAdminProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|traceAdminService
init|=
name|TraceAdminService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|traceAdminXlator
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|serviceRpcAddr
init|=
name|nn
operator|.
name|getServiceRpcServerAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceRpcAddr
operator|!=
literal|null
condition|)
block|{
name|String
name|bindHost
init|=
name|nn
operator|.
name|getServiceRpcServerBindHost
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindHost
operator|==
literal|null
condition|)
block|{
name|bindHost
operator|=
name|serviceRpcAddr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Service RPC server is binding to "
operator|+
name|bindHost
operator|+
literal|":"
operator|+
name|serviceRpcAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|serviceHandlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY
argument_list|,
name|DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
name|serviceRpcServer
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|clientNNPbService
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|bindHost
argument_list|)
operator|.
name|setPort
argument_list|(
name|serviceRpcAddr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|serviceHandlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|namesystem
operator|.
name|getDelegationTokenSecretManager
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Add all the RPC protocols that the namenode implements
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|haPbService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|ReconfigurationProtocolPB
operator|.
name|class
argument_list|,
name|reconfigurationPbService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|NamenodeProtocolPB
operator|.
name|class
argument_list|,
name|NNPbService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|DatanodeProtocolPB
operator|.
name|class
argument_list|,
name|dnProtoPbService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|RefreshAuthorizationPolicyProtocolPB
operator|.
name|class
argument_list|,
name|refreshAuthService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|RefreshUserMappingsProtocolPB
operator|.
name|class
argument_list|,
name|refreshUserMappingService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
comment|// We support Refreshing call queue here in case the client RPC queue is full
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|RefreshCallQueueProtocolPB
operator|.
name|class
argument_list|,
name|refreshCallQueueService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|GenericRefreshProtocolPB
operator|.
name|class
argument_list|,
name|genericRefreshService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|GetUserMappingsProtocolPB
operator|.
name|class
argument_list|,
name|getUserMappingService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|TraceAdminProtocolPB
operator|.
name|class
argument_list|,
name|traceAdminService
argument_list|,
name|serviceRpcServer
argument_list|)
expr_stmt|;
comment|// Update the address with the correct port
name|InetSocketAddress
name|listenAddr
init|=
name|serviceRpcServer
operator|.
name|getListenerAddress
argument_list|()
decl_stmt|;
name|serviceRPCAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|serviceRpcAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|listenAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|nn
operator|.
name|setRpcServiceServerAddress
argument_list|(
name|conf
argument_list|,
name|serviceRPCAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceRpcServer
operator|=
literal|null
expr_stmt|;
name|serviceRPCAddress
operator|=
literal|null
expr_stmt|;
block|}
name|InetSocketAddress
name|lifelineRpcAddr
init|=
name|nn
operator|.
name|getLifelineRpcServerAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|lifelineRpcAddr
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|bindHost
init|=
name|nn
operator|.
name|getLifelineRpcServerBindHost
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindHost
operator|==
literal|null
condition|)
block|{
name|bindHost
operator|=
name|lifelineRpcAddr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Lifeline RPC server is binding to {}:{}"
argument_list|,
name|bindHost
argument_list|,
name|lifelineRpcAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|lifelineHandlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_LIFELINE_HANDLER_COUNT_KEY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|lifelineHandlerCount
operator|<=
literal|0
condition|)
block|{
name|float
name|lifelineHandlerRatio
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|DFS_NAMENODE_LIFELINE_HANDLER_RATIO_KEY
argument_list|,
name|DFS_NAMENODE_LIFELINE_HANDLER_RATIO_DEFAULT
argument_list|)
decl_stmt|;
name|lifelineHandlerCount
operator|=
name|Math
operator|.
name|max
argument_list|(
call|(
name|int
call|)
argument_list|(
name|handlerCount
operator|*
name|lifelineHandlerRatio
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|lifelineRpcServer
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|HAServiceProtocolPB
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|haPbService
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|bindHost
argument_list|)
operator|.
name|setPort
argument_list|(
name|lifelineRpcAddr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|lifelineHandlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|namesystem
operator|.
name|getDelegationTokenSecretManager
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|DatanodeLifelineProtocolPB
operator|.
name|class
argument_list|,
name|lifelineProtoPbService
argument_list|,
name|lifelineRpcServer
argument_list|)
expr_stmt|;
comment|// Update the address with the correct port
name|InetSocketAddress
name|listenAddr
init|=
name|lifelineRpcServer
operator|.
name|getListenerAddress
argument_list|()
decl_stmt|;
name|lifelineRPCAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|lifelineRpcAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|listenAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|nn
operator|.
name|setRpcLifelineServerAddress
argument_list|(
name|conf
argument_list|,
name|lifelineRPCAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lifelineRpcServer
operator|=
literal|null
expr_stmt|;
name|lifelineRPCAddress
operator|=
literal|null
expr_stmt|;
block|}
name|InetSocketAddress
name|rpcAddr
init|=
name|nn
operator|.
name|getRpcServerAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|bindHost
init|=
name|nn
operator|.
name|getRpcServerBindHost
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindHost
operator|==
literal|null
condition|)
block|{
name|bindHost
operator|=
name|rpcAddr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"RPC server is binding to "
operator|+
name|bindHost
operator|+
literal|":"
operator|+
name|rpcAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|clientRpcServer
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|ClientNamenodeProtocolPB
operator|.
name|class
argument_list|)
operator|.
name|setInstance
argument_list|(
name|clientNNPbService
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|bindHost
argument_list|)
operator|.
name|setPort
argument_list|(
name|rpcAddr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|handlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|namesystem
operator|.
name|getDelegationTokenSecretManager
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Add all the RPC protocols that the namenode implements
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|HAServiceProtocolPB
operator|.
name|class
argument_list|,
name|haPbService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|ReconfigurationProtocolPB
operator|.
name|class
argument_list|,
name|reconfigurationPbService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|NamenodeProtocolPB
operator|.
name|class
argument_list|,
name|NNPbService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|DatanodeProtocolPB
operator|.
name|class
argument_list|,
name|dnProtoPbService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|RefreshAuthorizationPolicyProtocolPB
operator|.
name|class
argument_list|,
name|refreshAuthService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|RefreshUserMappingsProtocolPB
operator|.
name|class
argument_list|,
name|refreshUserMappingService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|RefreshCallQueueProtocolPB
operator|.
name|class
argument_list|,
name|refreshCallQueueService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|GenericRefreshProtocolPB
operator|.
name|class
argument_list|,
name|genericRefreshService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|GetUserMappingsProtocolPB
operator|.
name|class
argument_list|,
name|getUserMappingService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|TraceAdminProtocolPB
operator|.
name|class
argument_list|,
name|traceAdminService
argument_list|,
name|clientRpcServer
argument_list|)
expr_stmt|;
comment|// set service-level authorization security policy
if|if
condition|(
name|serviceAuthEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|clientRpcServer
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
operator|new
name|HDFSPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|serviceRpcServer
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
operator|new
name|HDFSPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lifelineRpcServer
operator|!=
literal|null
condition|)
block|{
name|lifelineRpcServer
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
operator|new
name|HDFSPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The rpc-server port can be ephemeral... ensure we have the correct info
name|InetSocketAddress
name|listenAddr
init|=
name|clientRpcServer
operator|.
name|getListenerAddress
argument_list|()
decl_stmt|;
name|clientRpcAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|rpcAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|listenAddr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|nn
operator|.
name|setRpcServerAddress
argument_list|(
name|conf
argument_list|,
name|clientRpcAddress
argument_list|)
expr_stmt|;
name|minimumDataNodeVersion
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_SUPPORTED_DATANODE_VERSION_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_SUPPORTED_DATANODE_VERSION_DEFAULT
argument_list|)
expr_stmt|;
name|defaultECPolicyName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT
argument_list|)
expr_stmt|;
comment|// Set terse exception whose stack trace won't be logged
name|clientRpcServer
operator|.
name|addTerseExceptions
argument_list|(
name|SafeModeException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|HadoopIllegalArgumentException
operator|.
name|class
argument_list|,
name|FileAlreadyExistsException
operator|.
name|class
argument_list|,
name|InvalidPathException
operator|.
name|class
argument_list|,
name|ParentNotDirectoryException
operator|.
name|class
argument_list|,
name|UnresolvedLinkException
operator|.
name|class
argument_list|,
name|AlreadyBeingCreatedException
operator|.
name|class
argument_list|,
name|QuotaExceededException
operator|.
name|class
argument_list|,
name|RecoveryInProgressException
operator|.
name|class
argument_list|,
name|AccessControlException
operator|.
name|class
argument_list|,
name|InvalidToken
operator|.
name|class
argument_list|,
name|LeaseExpiredException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|DSQuotaExceededException
operator|.
name|class
argument_list|,
name|QuotaByStorageTypeExceededException
operator|.
name|class
argument_list|,
name|AclException
operator|.
name|class
argument_list|,
name|FSLimitException
operator|.
name|PathComponentTooLongException
operator|.
name|class
argument_list|,
name|FSLimitException
operator|.
name|MaxDirectoryItemsExceededException
operator|.
name|class
argument_list|)
expr_stmt|;
name|clientRpcServer
operator|.
name|addSuppressedLoggingExceptions
argument_list|(
name|StandbyException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
expr_stmt|;
name|clientRpcServer
operator|.
name|setTracer
argument_list|(
name|nn
operator|.
name|tracer
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|serviceRpcServer
operator|.
name|setTracer
argument_list|(
name|nn
operator|.
name|tracer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lifelineRpcServer
operator|!=
literal|null
condition|)
block|{
name|lifelineRpcServer
operator|.
name|setTracer
argument_list|(
name|nn
operator|.
name|tracer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Allow access to the lifeline RPC server for testing */
annotation|@
name|VisibleForTesting
DECL|method|getLifelineRpcServer ()
name|RPC
operator|.
name|Server
name|getLifelineRpcServer
parameter_list|()
block|{
return|return
name|lifelineRpcServer
return|;
block|}
comment|/** Allow access to the client RPC server for testing */
annotation|@
name|VisibleForTesting
DECL|method|getClientRpcServer ()
specifier|public
name|RPC
operator|.
name|Server
name|getClientRpcServer
parameter_list|()
block|{
return|return
name|clientRpcServer
return|;
block|}
comment|/** Allow access to the service RPC server for testing */
annotation|@
name|VisibleForTesting
DECL|method|getServiceRpcServer ()
name|RPC
operator|.
name|Server
name|getServiceRpcServer
parameter_list|()
block|{
return|return
name|serviceRpcServer
return|;
block|}
comment|/**    * Start client and service RPC servers.    */
DECL|method|start ()
name|void
name|start
parameter_list|()
block|{
name|clientRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|serviceRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lifelineRpcServer
operator|!=
literal|null
condition|)
block|{
name|lifelineRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Wait until the RPC servers have shutdown.    */
DECL|method|join ()
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|clientRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|serviceRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lifelineRpcServer
operator|!=
literal|null
condition|)
block|{
name|lifelineRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Stop client and service RPC servers.    */
DECL|method|stop ()
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|clientRpcServer
operator|!=
literal|null
condition|)
block|{
name|clientRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|serviceRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lifelineRpcServer
operator|!=
literal|null
condition|)
block|{
name|lifelineRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getLifelineRpcAddress ()
name|InetSocketAddress
name|getLifelineRpcAddress
parameter_list|()
block|{
return|return
name|lifelineRPCAddress
return|;
block|}
DECL|method|getServiceRpcAddress ()
name|InetSocketAddress
name|getServiceRpcAddress
parameter_list|()
block|{
return|return
name|serviceRPCAddress
return|;
block|}
DECL|method|getRpcAddress ()
name|InetSocketAddress
name|getRpcAddress
parameter_list|()
block|{
return|return
name|clientRpcAddress
return|;
block|}
DECL|method|getRemoteUser ()
specifier|private
specifier|static
name|UserGroupInformation
name|getRemoteUser
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|NameNode
operator|.
name|getRemoteUser
argument_list|()
return|;
block|}
comment|/////////////////////////////////////////////////////
comment|// NamenodeProtocol
comment|/////////////////////////////////////////////////////
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|getBlocks (DatanodeInfo datanode, long size, long minBlockSize)
specifier|public
name|BlocksWithLocations
name|getBlocks
parameter_list|(
name|DatanodeInfo
name|datanode
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|minBlockSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected not positive size: "
operator|+
name|size
argument_list|)
throw|;
block|}
if|if
condition|(
name|minBlockSize
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected not positive size: "
operator|+
name|size
argument_list|)
throw|;
block|}
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getBlocks
argument_list|(
name|datanode
argument_list|,
name|size
argument_list|,
name|minBlockSize
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|getBlockKeys ()
specifier|public
name|ExportedBlockKeys
name|getBlockKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlockKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|errorReport (NamenodeRegistration registration, int errorCode, String msg)
specifier|public
name|void
name|errorReport
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
name|verifyRequest
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error report from "
operator|+
name|registration
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|FATAL
condition|)
block|{
name|namesystem
operator|.
name|releaseBackupNode
argument_list|(
name|registration
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|registerSubordinateNamenode ( NamenodeRegistration registration)
specifier|public
name|NamenodeRegistration
name|registerSubordinateNamenode
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
name|verifyLayoutVersion
argument_list|(
name|registration
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|NamenodeRegistration
name|myRegistration
init|=
name|nn
operator|.
name|setRegistration
argument_list|()
decl_stmt|;
name|namesystem
operator|.
name|registerBackupNode
argument_list|(
name|registration
argument_list|,
name|myRegistration
argument_list|)
expr_stmt|;
return|return
name|myRegistration
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|startCheckpoint (NamenodeRegistration registration)
specifier|public
name|NamenodeCommand
name|startCheckpoint
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
name|verifyRequest
argument_list|(
name|registration
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nn
operator|.
name|isRole
argument_list|(
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Only an ACTIVE node can invoke startCheckpoint."
argument_list|)
throw|;
name|CacheEntryWithPayload
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return
operator|(
name|NamenodeCommand
operator|)
name|cacheEntry
operator|.
name|getPayload
argument_list|()
return|;
block|}
name|NamenodeCommand
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|namesystem
operator|.
name|startCheckpoint
argument_list|(
name|registration
argument_list|,
name|nn
operator|.
name|setRegistration
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|endCheckpoint (NamenodeRegistration registration, CheckpointSignature sig)
specifier|public
name|void
name|endCheckpoint
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|CheckpointSignature
name|sig
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|endCheckpoint
argument_list|(
name|registration
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getDelegationToken (Text renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getBlockLocations (String src, long offset, long length)
specifier|public
name|LocatedBlocks
name|getBlockLocations
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrGetBlockLocations
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getBlockLocations
argument_list|(
name|getClientMachine
argument_list|()
argument_list|,
name|src
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getServerDefaults
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|create (String src, FsPermission masked, String clientName, EnumSetWritable<CreateFlag> flag, boolean createParent, short replication, long blockSize, CryptoProtocolVersion[] supportedVersions, String ecPolicyName)
specifier|public
name|HdfsFileStatus
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|masked
parameter_list|,
name|String
name|clientName
parameter_list|,
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|CryptoProtocolVersion
index|[]
name|supportedVersions
parameter_list|,
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|clientMachine
init|=
name|getClientMachine
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.create: file "
operator|+
name|src
operator|+
literal|" for "
operator|+
name|clientName
operator|+
literal|" at "
operator|+
name|clientMachine
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"create: Pathname too long.  Limit "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" characters, "
operator|+
name|MAX_PATH_DEPTH
operator|+
literal|" levels."
argument_list|)
throw|;
block|}
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntryWithPayload
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return
operator|(
name|HdfsFileStatus
operator|)
name|cacheEntry
operator|.
name|getPayload
argument_list|()
return|;
block|}
name|HdfsFileStatus
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
name|PermissionStatus
name|perm
init|=
operator|new
name|PermissionStatus
argument_list|(
name|getRemoteUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|masked
argument_list|)
decl_stmt|;
name|status
operator|=
name|namesystem
operator|.
name|startFile
argument_list|(
name|src
argument_list|,
name|perm
argument_list|,
name|clientName
argument_list|,
name|clientMachine
argument_list|,
name|flag
operator|.
name|get
argument_list|()
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|supportedVersions
argument_list|,
name|ecPolicyName
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|status
operator|!=
literal|null
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incrFilesCreated
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrCreateFileOps
argument_list|()
expr_stmt|;
return|return
name|status
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|append (String src, String clientName, EnumSetWritable<CreateFlag> flag)
specifier|public
name|LastBlockWithStatus
name|append
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|,
name|EnumSetWritable
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|clientMachine
init|=
name|getClientMachine
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.append: file "
operator|+
name|src
operator|+
literal|" for "
operator|+
name|clientName
operator|+
literal|" at "
operator|+
name|clientMachine
argument_list|)
expr_stmt|;
block|}
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntryWithPayload
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return
operator|(
name|LastBlockWithStatus
operator|)
name|cacheEntry
operator|.
name|getPayload
argument_list|()
return|;
block|}
name|LastBlockWithStatus
name|info
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|info
operator|=
name|namesystem
operator|.
name|appendFile
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|,
name|clientMachine
argument_list|,
name|flag
operator|.
name|get
argument_list|()
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incrFilesAppended
argument_list|()
expr_stmt|;
return|return
name|info
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|recoverLease (String src, String clientName)
specifier|public
name|boolean
name|recoverLease
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|clientMachine
init|=
name|getClientMachine
argument_list|()
decl_stmt|;
return|return
name|namesystem
operator|.
name|recoverLease
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|,
name|clientMachine
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setReplication (String src, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|String
name|src
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|setReplication
argument_list|(
name|src
argument_list|,
name|replication
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|unsetStoragePolicy (String src)
specifier|public
name|void
name|unsetStoragePolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|unsetStoragePolicy
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setStoragePolicy (String src, String policyName)
specifier|public
name|void
name|setStoragePolicy
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|policyName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|setStoragePolicy
argument_list|(
name|src
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStoragePolicy (String path)
specifier|public
name|BlockStoragePolicy
name|getStoragePolicy
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getStoragePolicy
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStoragePolicies ()
specifier|public
name|BlockStoragePolicy
index|[]
name|getStoragePolicies
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getStoragePolicies
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setPermission (String src, FsPermission permissions)
specifier|public
name|void
name|setPermission
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|permissions
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|setPermission
argument_list|(
name|src
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setOwner (String src, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|setOwner
argument_list|(
name|src
argument_list|,
name|username
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addBlock (String src, String clientName, ExtendedBlock previous, DatanodeInfo[] excludedNodes, long fileId, String[] favoredNodes, EnumSet<AddBlockFlag> addBlockFlags)
specifier|public
name|LocatedBlock
name|addBlock
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|previous
parameter_list|,
name|DatanodeInfo
index|[]
name|excludedNodes
parameter_list|,
name|long
name|fileId
parameter_list|,
name|String
index|[]
name|favoredNodes
parameter_list|,
name|EnumSet
argument_list|<
name|AddBlockFlag
argument_list|>
name|addBlockFlags
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|LocatedBlock
name|locatedBlock
init|=
name|namesystem
operator|.
name|getAdditionalBlock
argument_list|(
name|src
argument_list|,
name|fileId
argument_list|,
name|clientName
argument_list|,
name|previous
argument_list|,
name|excludedNodes
argument_list|,
name|favoredNodes
argument_list|,
name|addBlockFlags
argument_list|)
decl_stmt|;
if|if
condition|(
name|locatedBlock
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrAddBlockOps
argument_list|()
expr_stmt|;
block|}
return|return
name|locatedBlock
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getAdditionalDatanode (final String src, final long fileId, final ExtendedBlock blk, final DatanodeInfo[] existings, final String[] existingStorageIDs, final DatanodeInfo[] excludes, final int numAdditionalNodes, final String clientName )
specifier|public
name|LocatedBlock
name|getAdditionalDatanode
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|long
name|fileId
parameter_list|,
specifier|final
name|ExtendedBlock
name|blk
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|existings
parameter_list|,
specifier|final
name|String
index|[]
name|existingStorageIDs
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|excludes
parameter_list|,
specifier|final
name|int
name|numAdditionalNodes
parameter_list|,
specifier|final
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"getAdditionalDatanode: src="
operator|+
name|src
operator|+
literal|", fileId="
operator|+
name|fileId
operator|+
literal|", blk="
operator|+
name|blk
operator|+
literal|", existings="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|existings
argument_list|)
operator|+
literal|", excludes="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|excludes
argument_list|)
operator|+
literal|", numAdditionalNodes="
operator|+
name|numAdditionalNodes
operator|+
literal|", clientName="
operator|+
name|clientName
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incrGetAdditionalDatanodeOps
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Node
argument_list|>
name|excludeSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|excludes
operator|!=
literal|null
condition|)
block|{
name|excludeSet
operator|=
operator|new
name|HashSet
argument_list|<
name|Node
argument_list|>
argument_list|(
name|excludes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|excludes
control|)
block|{
name|excludeSet
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|namesystem
operator|.
name|getAdditionalDatanode
argument_list|(
name|src
argument_list|,
name|fileId
argument_list|,
name|blk
argument_list|,
name|existings
argument_list|,
name|existingStorageIDs
argument_list|,
name|excludeSet
argument_list|,
name|numAdditionalNodes
argument_list|,
name|clientName
argument_list|)
return|;
block|}
comment|/**    * The client needs to give up on the block.    */
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|abandonBlock (ExtendedBlock b, long fileId, String src, String holder)
specifier|public
name|void
name|abandonBlock
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|long
name|fileId
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|holder
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|abandonBlock
argument_list|(
name|b
argument_list|,
name|fileId
argument_list|,
name|src
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|complete (String src, String clientName, ExtendedBlock last, long fileId)
specifier|public
name|boolean
name|complete
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|last
parameter_list|,
name|long
name|fileId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|completeFile
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|,
name|last
argument_list|,
name|fileId
argument_list|)
return|;
block|}
comment|/**    * The client has detected an error on the specified located blocks     * and is reporting them to the server.  For now, the namenode will     * mark the block as corrupt.  In the future we might     * check the blocks are actually corrupt.     */
annotation|@
name|Override
comment|// ClientProtocol, DatanodeProtocol
DECL|method|reportBadBlocks (LocatedBlock[] blocks)
specifier|public
name|void
name|reportBadBlocks
parameter_list|(
name|LocatedBlock
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|reportBadBlocks
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|updateBlockForPipeline (ExtendedBlock block, String clientName)
specifier|public
name|LocatedBlock
name|updateBlockForPipeline
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|bumpBlockGenerationStamp
argument_list|(
name|block
argument_list|,
name|clientName
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|updatePipeline (String clientName, ExtendedBlock oldBlock, ExtendedBlock newBlock, DatanodeID[] newNodes, String[] newStorageIDs)
specifier|public
name|void
name|updatePipeline
parameter_list|(
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|oldBlock
parameter_list|,
name|ExtendedBlock
name|newBlock
parameter_list|,
name|DatanodeID
index|[]
name|newNodes
parameter_list|,
name|String
index|[]
name|newStorageIDs
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|updatePipeline
argument_list|(
name|clientName
argument_list|,
name|oldBlock
argument_list|,
name|newBlock
argument_list|,
name|newNodes
argument_list|,
name|newStorageIDs
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|commitBlockSynchronization (ExtendedBlock block, long newgenerationstamp, long newlength, boolean closeFile, boolean deleteblock, DatanodeID[] newtargets, String[] newtargetstorages)
specifier|public
name|void
name|commitBlockSynchronization
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|long
name|newgenerationstamp
parameter_list|,
name|long
name|newlength
parameter_list|,
name|boolean
name|closeFile
parameter_list|,
name|boolean
name|deleteblock
parameter_list|,
name|DatanodeID
index|[]
name|newtargets
parameter_list|,
name|String
index|[]
name|newtargetstorages
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|commitBlockSynchronization
argument_list|(
name|block
argument_list|,
name|newgenerationstamp
argument_list|,
name|newlength
argument_list|,
name|closeFile
argument_list|,
name|deleteblock
argument_list|,
name|newtargets
argument_list|,
name|newtargetstorages
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getPreferredBlockSize (String filename)
specifier|public
name|long
name|getPreferredBlockSize
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getPreferredBlockSize
argument_list|(
name|filename
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|rename (String src, String dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.rename: "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"rename: Pathname too long.  Limit "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" characters, "
operator|+
name|MAX_PATH_DEPTH
operator|+
literal|" levels."
argument_list|)
throw|;
block|}
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
comment|// Return previous response
block|}
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
condition|)
block|{
name|metrics
operator|.
name|incrFilesRenamed
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|concat (String trg, String[] src)
specifier|public
name|void
name|concat
parameter_list|(
name|String
name|trg
parameter_list|,
name|String
index|[]
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|concat
argument_list|(
name|trg
argument_list|,
name|src
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|rename2 (String src, String dst, Options.Rename... options)
specifier|public
name|void
name|rename2
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.rename: "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"rename: Pathname too long.  Limit "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" characters, "
operator|+
name|MAX_PATH_DEPTH
operator|+
literal|" levels."
argument_list|)
throw|;
block|}
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|renameTo
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incrFilesRenamed
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|truncate (String src, long newLength, String clientName)
specifier|public
name|boolean
name|truncate
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|newLength
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.truncate: "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|newLength
argument_list|)
expr_stmt|;
block|}
name|String
name|clientMachine
init|=
name|getClientMachine
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|namesystem
operator|.
name|truncate
argument_list|(
name|src
argument_list|,
name|newLength
argument_list|,
name|clientName
argument_list|,
name|clientMachine
argument_list|,
name|now
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|metrics
operator|.
name|incrFilesTruncated
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|delete (String src, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* Namenode.delete: src="
operator|+
name|src
operator|+
literal|", recursive="
operator|+
name|recursive
argument_list|)
expr_stmt|;
block|}
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
comment|// Return previous response
block|}
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|namesystem
operator|.
name|delete
argument_list|(
name|src
argument_list|,
name|recursive
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
condition|)
name|metrics
operator|.
name|incrDeleteFileOps
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Check path length does not exceed maximum.  Returns true if    * length and depth are okay.  Returns false if length is too long     * or depth is too great.    */
DECL|method|checkPathLength (String src)
specifier|private
name|boolean
name|checkPathLength
parameter_list|(
name|String
name|src
parameter_list|)
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
return|return
operator|(
name|src
operator|.
name|length
argument_list|()
operator|<=
name|MAX_PATH_LENGTH
operator|&&
name|srcPath
operator|.
name|depth
argument_list|()
operator|<=
name|MAX_PATH_DEPTH
operator|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|mkdirs (String src, FsPermission masked, boolean createParent)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|masked
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"*DIR* NameNode.mkdirs: "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|src
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"mkdirs: Pathname too long.  Limit "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" characters, "
operator|+
name|MAX_PATH_DEPTH
operator|+
literal|" levels."
argument_list|)
throw|;
block|}
return|return
name|namesystem
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|,
operator|new
name|PermissionStatus
argument_list|(
name|getRemoteUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|masked
argument_list|)
argument_list|,
name|createParent
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|renewLease (String clientName)
specifier|public
name|void
name|renewLease
parameter_list|(
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|renewLease
argument_list|(
name|clientName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getListing (String src, byte[] startAfter, boolean needLocation)
specifier|public
name|DirectoryListing
name|getListing
parameter_list|(
name|String
name|src
parameter_list|,
name|byte
index|[]
name|startAfter
parameter_list|,
name|boolean
name|needLocation
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|DirectoryListing
name|files
init|=
name|namesystem
operator|.
name|getListing
argument_list|(
name|src
argument_list|,
name|startAfter
argument_list|,
name|needLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrGetListingOps
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrFilesInGetListingOps
argument_list|(
name|files
operator|.
name|getPartialListing
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getFileInfo (String src)
specifier|public
name|HdfsFileStatus
name|getFileInfo
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrFileInfoOps
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getLocatedFileInfo (String src, boolean needBlockToken)
specifier|public
name|HdfsLocatedFileStatus
name|getLocatedFileInfo
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|needBlockToken
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|needBlockToken
condition|)
block|{
name|metrics
operator|.
name|incrGetBlockLocations
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|metrics
operator|.
name|incrFileInfoOps
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|HdfsLocatedFileStatus
operator|)
name|namesystem
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|needBlockToken
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|isFileClosed (String src)
specifier|public
name|boolean
name|isFileClosed
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|isFileClosed
argument_list|(
name|src
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getFileLinkInfo (String src)
specifier|public
name|HdfsFileStatus
name|getFileLinkInfo
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrFileInfoOps
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getStats ()
specifier|public
name|long
index|[]
name|getStats
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|getStats
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getReplicatedBlockStats ()
specifier|public
name|ReplicatedBlockStats
name|getReplicatedBlockStats
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|getReplicatedBlockStats
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getECBlockGroupStats ()
specifier|public
name|ECBlockGroupStats
name|getECBlockGroupStats
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|getECBlockGroupStats
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getDatanodeReport (DatanodeReportType type)
specifier|public
name|DatanodeInfo
index|[]
name|getDatanodeReport
parameter_list|(
name|DatanodeReportType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|DatanodeInfo
name|results
index|[]
init|=
name|namesystem
operator|.
name|datanodeReport
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|results
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getDatanodeStorageReport ( DatanodeReportType type)
specifier|public
name|DatanodeStorageReport
index|[]
name|getDatanodeStorageReport
parameter_list|(
name|DatanodeReportType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
specifier|final
name|DatanodeStorageReport
index|[]
name|reports
init|=
name|namesystem
operator|.
name|getDatanodeStorageReport
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|reports
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setSafeMode (SafeModeAction action, boolean isChecked)
specifier|public
name|boolean
name|setSafeMode
parameter_list|(
name|SafeModeAction
name|action
parameter_list|,
name|boolean
name|isChecked
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|OperationCategory
name|opCategory
init|=
name|OperationCategory
operator|.
name|UNCHECKED
decl_stmt|;
if|if
condition|(
name|isChecked
condition|)
block|{
if|if
condition|(
name|action
operator|==
name|SafeModeAction
operator|.
name|SAFEMODE_GET
condition|)
block|{
name|opCategory
operator|=
name|OperationCategory
operator|.
name|READ
expr_stmt|;
block|}
else|else
block|{
name|opCategory
operator|=
name|OperationCategory
operator|.
name|WRITE
expr_stmt|;
block|}
block|}
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|opCategory
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|setSafeMode
argument_list|(
name|action
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|restoreFailedStorage (String arg)
specifier|public
name|boolean
name|restoreFailedStorage
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|restoreFailedStorage
argument_list|(
name|arg
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|saveNamespace (long timeWindow, long txGap)
specifier|public
name|boolean
name|saveNamespace
parameter_list|(
name|long
name|timeWindow
parameter_list|,
name|long
name|txGap
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|saveNamespace
argument_list|(
name|timeWindow
argument_list|,
name|txGap
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|rollEdits ()
specifier|public
name|long
name|rollEdits
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|CheckpointSignature
name|sig
init|=
name|namesystem
operator|.
name|rollEditLog
argument_list|()
decl_stmt|;
return|return
name|sig
operator|.
name|getCurSegmentTxId
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|refreshNodes ()
specifier|public
name|void
name|refreshNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|refreshNodes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|getTransactionID ()
specifier|public
name|long
name|getTransactionID
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getFSImage
argument_list|()
operator|.
name|getCorrectLastAppliedOrWrittenTxId
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|getMostRecentCheckpointTxId ()
specifier|public
name|long
name|getMostRecentCheckpointTxId
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getFSImage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|rollEditLog ()
specifier|public
name|CheckpointSignature
name|rollEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|rollEditLog
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|getEditLogManifest (long sinceTxId)
specifier|public
name|RemoteEditLogManifest
name|getEditLogManifest
parameter_list|(
name|long
name|sinceTxId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getEditLog
argument_list|()
operator|.
name|getEditLogManifest
argument_list|(
name|sinceTxId
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|isUpgradeFinalized ()
specifier|public
name|boolean
name|isUpgradeFinalized
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|isUpgradeFinalized
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NamenodeProtocol
DECL|method|isRollingUpgrade ()
specifier|public
name|boolean
name|isRollingUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|isRollingUpgrade
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|finalizeUpgrade ()
specifier|public
name|void
name|finalizeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|finalizeUpgrade
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|upgradeStatus ()
specifier|public
name|boolean
name|upgradeStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|isUpgradeFinalized
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|rollingUpgrade (RollingUpgradeAction action)
specifier|public
name|RollingUpgradeInfo
name|rollingUpgrade
parameter_list|(
name|RollingUpgradeAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"rollingUpgrade "
operator|+
name|action
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|QUERY
case|:
return|return
name|namesystem
operator|.
name|queryRollingUpgrade
argument_list|()
return|;
case|case
name|PREPARE
case|:
return|return
name|namesystem
operator|.
name|startRollingUpgrade
argument_list|()
return|;
case|case
name|FINALIZE
case|:
return|return
name|namesystem
operator|.
name|finalizeRollingUpgrade
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|UnsupportedActionException
argument_list|(
name|action
operator|+
literal|" is not yet supported."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|metaSave (String filename)
specifier|public
name|void
name|metaSave
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|metaSave
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|listOpenFiles (long prevId)
specifier|public
name|BatchedEntries
argument_list|<
name|OpenFileEntry
argument_list|>
name|listOpenFiles
parameter_list|(
name|long
name|prevId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listOpenFiles
argument_list|(
name|prevId
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|OpenFilesType
operator|.
name|ALL_OPEN_FILES
argument_list|)
argument_list|,
name|OpenFilesIterator
operator|.
name|FILTER_PATH_DEFAULT
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|listOpenFiles (long prevId, EnumSet<OpenFilesType> openFilesTypes, String path)
specifier|public
name|BatchedEntries
argument_list|<
name|OpenFileEntry
argument_list|>
name|listOpenFiles
parameter_list|(
name|long
name|prevId
parameter_list|,
name|EnumSet
argument_list|<
name|OpenFilesType
argument_list|>
name|openFilesTypes
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|listOpenFiles
argument_list|(
name|prevId
argument_list|,
name|openFilesTypes
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|listCorruptFileBlocks (String path, String cookie)
specifier|public
name|CorruptFileBlocks
name|listCorruptFileBlocks
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|cookie
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
index|[]
name|cookieTab
init|=
operator|new
name|String
index|[]
block|{
name|cookie
block|}
decl_stmt|;
name|Collection
argument_list|<
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
argument_list|>
name|fbs
init|=
name|namesystem
operator|.
name|listCorruptFileBlocks
argument_list|(
name|path
argument_list|,
name|cookieTab
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[
name|fbs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
name|fb
range|:
name|fbs
control|)
block|{
name|files
index|[
name|i
operator|++
index|]
operator|=
name|fb
operator|.
name|path
expr_stmt|;
block|}
return|return
operator|new
name|CorruptFileBlocks
argument_list|(
name|files
argument_list|,
name|cookieTab
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * Tell all datanodes to use a new, non-persistent bandwidth value for    * dfs.datanode.balance.bandwidthPerSec.    * @param bandwidth Balancer bandwidth in bytes per second for all datanodes.    * @throws IOException    */
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setBalancerBandwidth (long bandwidth)
specifier|public
name|void
name|setBalancerBandwidth
parameter_list|(
name|long
name|bandwidth
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|setBalancerBandwidth
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getContentSummary (String path)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getQuotaUsage (String path)
specifier|public
name|QuotaUsage
name|getQuotaUsage
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getQuotaUsage
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|satisfyStoragePolicy (String src)
specifier|public
name|void
name|satisfyStoragePolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|satisfyStoragePolicy
argument_list|(
name|src
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setQuota (String path, long namespaceQuota, long storagespaceQuota, StorageType type)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|namespaceQuota
parameter_list|,
name|long
name|storagespaceQuota
parameter_list|,
name|StorageType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|setQuota
argument_list|(
name|path
argument_list|,
name|namespaceQuota
argument_list|,
name|storagespaceQuota
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|fsync (String src, long fileId, String clientName, long lastBlockLength)
specifier|public
name|void
name|fsync
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|fileId
parameter_list|,
name|String
name|clientName
parameter_list|,
name|long
name|lastBlockLength
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|fsync
argument_list|(
name|src
argument_list|,
name|fileId
argument_list|,
name|clientName
argument_list|,
name|lastBlockLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setTimes (String src, long mtime, long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|setTimes
argument_list|(
name|src
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|createSymlink (String target, String link, FsPermission dirPerms, boolean createParent)
specifier|public
name|void
name|createSymlink
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|link
parameter_list|,
name|FsPermission
name|dirPerms
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
comment|/* We enforce the MAX_PATH_LENGTH limit even though a symlink target      * URI may refer to a non-HDFS file system.       */
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|link
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Symlink path exceeds "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" character limit"
argument_list|)
throw|;
block|}
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|getRemoteUser
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|PermissionStatus
name|perm
init|=
operator|new
name|PermissionStatus
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|dirPerms
argument_list|)
decl_stmt|;
name|namesystem
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
name|link
argument_list|,
name|perm
argument_list|,
name|createParent
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getLinkTarget (String path)
specifier|public
name|String
name|getLinkTarget
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrGetLinkTargetOps
argument_list|()
expr_stmt|;
name|HdfsFileStatus
name|stat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|namesystem
operator|.
name|getFileInfo
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnresolvedPathException
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getResolvedPath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnresolvedLinkException
name|e
parameter_list|)
block|{
comment|// The NameNode should only throw an UnresolvedPathException
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"UnresolvedLinkException thrown"
argument_list|)
throw|;
block|}
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|path
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|stat
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Path "
operator|+
name|path
operator|+
literal|" is not a symbolic link"
argument_list|)
throw|;
block|}
return|return
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|stat
operator|.
name|getSymlinkInBytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|registerDatanode (DatanodeRegistration nodeReg)
specifier|public
name|DatanodeRegistration
name|registerDatanode
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|verifySoftwareVersion
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|registerDatanode
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
return|return
name|nodeReg
return|;
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|sendHeartbeat (DatanodeRegistration nodeReg, StorageReport[] report, long dnCacheCapacity, long dnCacheUsed, int xmitsInProgress, int xceiverCount, int failedVolumes, VolumeFailureSummary volumeFailureSummary, boolean requestFullBlockReportLease, @Nonnull SlowPeerReports slowPeers, @Nonnull SlowDiskReports slowDisks, BlocksStorageMoveAttemptFinished storageMovementFinishedBlks)
specifier|public
name|HeartbeatResponse
name|sendHeartbeat
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|StorageReport
index|[]
name|report
parameter_list|,
name|long
name|dnCacheCapacity
parameter_list|,
name|long
name|dnCacheUsed
parameter_list|,
name|int
name|xmitsInProgress
parameter_list|,
name|int
name|xceiverCount
parameter_list|,
name|int
name|failedVolumes
parameter_list|,
name|VolumeFailureSummary
name|volumeFailureSummary
parameter_list|,
name|boolean
name|requestFullBlockReportLease
parameter_list|,
annotation|@
name|Nonnull
name|SlowPeerReports
name|slowPeers
parameter_list|,
annotation|@
name|Nonnull
name|SlowDiskReports
name|slowDisks
parameter_list|,
name|BlocksStorageMoveAttemptFinished
name|storageMovementFinishedBlks
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|verifyRequest
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
return|return
name|namesystem
operator|.
name|handleHeartbeat
argument_list|(
name|nodeReg
argument_list|,
name|report
argument_list|,
name|dnCacheCapacity
argument_list|,
name|dnCacheUsed
argument_list|,
name|xceiverCount
argument_list|,
name|xmitsInProgress
argument_list|,
name|failedVolumes
argument_list|,
name|volumeFailureSummary
argument_list|,
name|requestFullBlockReportLease
argument_list|,
name|slowPeers
argument_list|,
name|slowDisks
argument_list|,
name|storageMovementFinishedBlks
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|blockReport (final DatanodeRegistration nodeReg, String poolId, final StorageBlockReport[] reports, final BlockReportContext context)
specifier|public
name|DatanodeCommand
name|blockReport
parameter_list|(
specifier|final
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|String
name|poolId
parameter_list|,
specifier|final
name|StorageBlockReport
index|[]
name|reports
parameter_list|,
specifier|final
name|BlockReportContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|verifyRequest
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockStateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|blockStateChangeLog
operator|.
name|debug
argument_list|(
literal|"*BLOCK* NameNode.blockReport: "
operator|+
literal|"from "
operator|+
name|nodeReg
operator|+
literal|", reports.length="
operator|+
name|reports
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockManager
name|bm
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
name|boolean
name|noStaleStorages
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|reports
operator|.
name|length
condition|;
name|r
operator|++
control|)
block|{
specifier|final
name|BlockListAsLongs
name|blocks
init|=
name|reports
index|[
name|r
index|]
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
comment|//
comment|// BlockManager.processReport accumulates information of prior calls
comment|// for the same node and storage, so the value returned by the last
comment|// call of this loop is the final updated value for noStaleStorage.
comment|//
specifier|final
name|int
name|index
init|=
name|r
decl_stmt|;
name|noStaleStorages
operator|=
name|bm
operator|.
name|runBlockOp
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|bm
operator|.
name|processReport
argument_list|(
name|nodeReg
argument_list|,
name|reports
index|[
name|index
index|]
operator|.
name|getStorage
argument_list|()
argument_list|,
name|blocks
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|bm
operator|.
name|removeBRLeaseIfNeeded
argument_list|(
name|nodeReg
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|BlockManagerFaultInjector
operator|.
name|getInstance
argument_list|()
operator|.
name|incomingBlockReportRpc
argument_list|(
name|nodeReg
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|nn
operator|.
name|getFSImage
argument_list|()
operator|.
name|isUpgradeFinalized
argument_list|()
operator|&&
operator|!
name|namesystem
operator|.
name|isRollingUpgrade
argument_list|()
operator|&&
operator|!
name|nn
operator|.
name|isStandbyState
argument_list|()
operator|&&
name|noStaleStorages
condition|)
block|{
return|return
operator|new
name|FinalizeCommand
argument_list|(
name|poolId
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|cacheReport (DatanodeRegistration nodeReg, String poolId, List<Long> blockIds)
specifier|public
name|DatanodeCommand
name|cacheReport
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|String
name|poolId
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|blockIds
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|verifyRequest
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockStateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|blockStateChangeLog
operator|.
name|debug
argument_list|(
literal|"*BLOCK* NameNode.cacheReport: "
operator|+
literal|"from "
operator|+
name|nodeReg
operator|+
literal|" "
operator|+
name|blockIds
operator|.
name|size
argument_list|()
operator|+
literal|" blocks"
argument_list|)
expr_stmt|;
block|}
name|namesystem
operator|.
name|getCacheManager
argument_list|()
operator|.
name|processCacheReport
argument_list|(
name|nodeReg
argument_list|,
name|blockIds
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|blockReceivedAndDeleted (final DatanodeRegistration nodeReg, String poolId, StorageReceivedDeletedBlocks[] receivedAndDeletedBlocks)
specifier|public
name|void
name|blockReceivedAndDeleted
parameter_list|(
specifier|final
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|String
name|poolId
parameter_list|,
name|StorageReceivedDeletedBlocks
index|[]
name|receivedAndDeletedBlocks
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|verifyRequest
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrBlockReceivedAndDeletedOps
argument_list|()
expr_stmt|;
if|if
condition|(
name|blockStateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|blockStateChangeLog
operator|.
name|debug
argument_list|(
literal|"*BLOCK* NameNode.blockReceivedAndDeleted: "
operator|+
literal|"from "
operator|+
name|nodeReg
operator|+
literal|" "
operator|+
name|receivedAndDeletedBlocks
operator|.
name|length
operator|+
literal|" blocks."
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BlockManager
name|bm
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|StorageReceivedDeletedBlocks
name|r
range|:
name|receivedAndDeletedBlocks
control|)
block|{
name|bm
operator|.
name|enqueueBlockOp
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|namesystem
operator|.
name|processIncrementalBlockReport
argument_list|(
name|nodeReg
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// usually because the node is unregistered/dead.  next heartbeat
comment|// will correct the problem
name|blockStateChangeLog
operator|.
name|error
argument_list|(
literal|"*BLOCK* NameNode.blockReceivedAndDeleted: "
operator|+
literal|"failed from "
operator|+
name|nodeReg
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// DatanodeProtocol
DECL|method|errorReport (DatanodeRegistration nodeReg, int errorCode, String msg)
specifier|public
name|void
name|errorReport
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|int
name|errorCode
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|dnName
init|=
operator|(
name|nodeReg
operator|==
literal|null
operator|)
condition|?
literal|"Unknown DataNode"
else|:
name|nodeReg
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|DatanodeProtocol
operator|.
name|NOTIFY
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error report from "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
name|verifyRequest
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorCode
operator|==
name|DatanodeProtocol
operator|.
name|DISK_ERROR
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Disk error on "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|errorCode
operator|==
name|DatanodeProtocol
operator|.
name|FATAL_DISK_ERROR
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Fatal disk error on "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|removeDatanode
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error report from "
operator|+
name|dnName
operator|+
literal|": "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// DatanodeProtocol, NamenodeProtocol
DECL|method|versionRequest ()
specifier|public
name|NamespaceInfo
name|versionRequest
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getNamespaceInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// DatanodeLifelineProtocol
DECL|method|sendLifeline (DatanodeRegistration nodeReg, StorageReport[] report, long dnCacheCapacity, long dnCacheUsed, int xmitsInProgress, int xceiverCount, int failedVolumes, VolumeFailureSummary volumeFailureSummary)
specifier|public
name|void
name|sendLifeline
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|StorageReport
index|[]
name|report
parameter_list|,
name|long
name|dnCacheCapacity
parameter_list|,
name|long
name|dnCacheUsed
parameter_list|,
name|int
name|xmitsInProgress
parameter_list|,
name|int
name|xceiverCount
parameter_list|,
name|int
name|failedVolumes
parameter_list|,
name|VolumeFailureSummary
name|volumeFailureSummary
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|verifyRequest
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|handleLifeline
argument_list|(
name|nodeReg
argument_list|,
name|report
argument_list|,
name|dnCacheCapacity
argument_list|,
name|dnCacheUsed
argument_list|,
name|xceiverCount
argument_list|,
name|xmitsInProgress
argument_list|,
name|failedVolumes
argument_list|,
name|volumeFailureSummary
argument_list|)
expr_stmt|;
block|}
comment|/**     * Verifies the given registration.    *     * @param nodeReg node registration    * @throws UnregisteredNodeException if the registration is invalid    */
DECL|method|verifyRequest (NodeRegistration nodeReg)
specifier|private
name|void
name|verifyRequest
parameter_list|(
name|NodeRegistration
name|nodeReg
parameter_list|)
throws|throws
name|IOException
block|{
comment|// verify registration ID
specifier|final
name|String
name|id
init|=
name|nodeReg
operator|.
name|getRegistrationID
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expectedID
init|=
name|namesystem
operator|.
name|getRegistrationID
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expectedID
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Registration IDs mismatched: the "
operator|+
name|nodeReg
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ID is "
operator|+
name|id
operator|+
literal|" but the expected ID is "
operator|+
name|expectedID
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnregisteredNodeException
argument_list|(
name|nodeReg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
comment|// RefreshAuthorizationPolicyProtocol
DECL|method|refreshServiceAcl ()
specifier|public
name|void
name|refreshServiceAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|serviceAuthEnabled
condition|)
block|{
throw|throw
operator|new
name|AuthorizationException
argument_list|(
literal|"Service Level Authorization not enabled!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|clientRpcServer
operator|.
name|refreshServiceAcl
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|HDFSPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|serviceRpcServer
operator|.
name|refreshServiceAcl
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
operator|new
name|HDFSPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|namesystem
operator|.
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
literal|"refreshServiceAcl"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// RefreshAuthorizationPolicyProtocol
DECL|method|refreshUserToGroupsMappings ()
specifier|public
name|void
name|refreshUserToGroupsMappings
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Refreshing all user-to-groups mappings. Requested by user: "
operator|+
name|getRemoteUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|()
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
literal|"refreshUserToGroupsMappings"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// RefreshAuthorizationPolicyProtocol
DECL|method|refreshSuperUserGroupsConfiguration ()
specifier|public
name|void
name|refreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Refreshing SuperUser proxy group mapping list "
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
literal|"refreshSuperUserGroupsConfiguration"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// RefreshCallQueueProtocol
DECL|method|refreshCallQueue ()
specifier|public
name|void
name|refreshCallQueue
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Refreshing call queue."
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|clientRpcServer
operator|.
name|refreshCallQueue
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|serviceRpcServer
operator|!=
literal|null
condition|)
block|{
name|serviceRpcServer
operator|.
name|refreshCallQueue
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|namesystem
operator|.
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
literal|"refreshCallQueue"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// GenericRefreshProtocol
DECL|method|refresh (String identifier, String[] args)
specifier|public
name|Collection
argument_list|<
name|RefreshResponse
argument_list|>
name|refresh
parameter_list|(
name|String
name|identifier
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// Let the registry handle as needed
return|return
name|RefreshRegistry
operator|.
name|defaultRegistry
argument_list|()
operator|.
name|dispatch
argument_list|(
name|identifier
argument_list|,
name|args
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// GetUserMappingsProtocol
DECL|method|getGroupsForUser (String user)
specifier|public
name|String
index|[]
name|getGroupsForUser
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting groups for user "
operator|+
name|user
argument_list|)
expr_stmt|;
block|}
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
operator|.
name|getGroupNames
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// HAServiceProtocol
DECL|method|monitorHealth ()
specifier|public
specifier|synchronized
name|void
name|monitorHealth
parameter_list|()
throws|throws
name|HealthCheckFailedException
throws|,
name|AccessControlException
throws|,
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|nn
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// HAServiceProtocol
DECL|method|transitionToActive (StateChangeRequestInfo req)
specifier|public
specifier|synchronized
name|void
name|transitionToActive
parameter_list|(
name|StateChangeRequestInfo
name|req
parameter_list|)
throws|throws
name|ServiceFailedException
throws|,
name|AccessControlException
throws|,
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|nn
operator|.
name|checkHaStateChange
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|nn
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// HAServiceProtocol
DECL|method|transitionToStandby (StateChangeRequestInfo req)
specifier|public
specifier|synchronized
name|void
name|transitionToStandby
parameter_list|(
name|StateChangeRequestInfo
name|req
parameter_list|)
throws|throws
name|ServiceFailedException
throws|,
name|AccessControlException
throws|,
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|nn
operator|.
name|checkHaStateChange
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|nn
operator|.
name|transitionToStandby
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
comment|// HAServiceProtocol
DECL|method|getServiceStatus ()
specifier|public
specifier|synchronized
name|HAServiceStatus
name|getServiceStatus
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|ServiceFailedException
throws|,
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|nn
operator|.
name|getServiceStatus
argument_list|()
return|;
block|}
comment|/**    * Verify version.    * @param version layout version    * @throws IOException on layout version mismatch    */
DECL|method|verifyLayoutVersion (int version)
name|void
name|verifyLayoutVersion
parameter_list|(
name|int
name|version
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|version
operator|!=
name|HdfsServerConstants
operator|.
name|NAMENODE_LAYOUT_VERSION
condition|)
throw|throw
operator|new
name|IncorrectVersionException
argument_list|(
name|HdfsServerConstants
operator|.
name|NAMENODE_LAYOUT_VERSION
argument_list|,
name|version
argument_list|,
literal|"data node"
argument_list|)
throw|;
block|}
DECL|method|verifySoftwareVersion (DatanodeRegistration dnReg)
specifier|private
name|void
name|verifySoftwareVersion
parameter_list|(
name|DatanodeRegistration
name|dnReg
parameter_list|)
throws|throws
name|IncorrectVersionException
block|{
name|String
name|dnVersion
init|=
name|dnReg
operator|.
name|getSoftwareVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|VersionUtil
operator|.
name|compareVersions
argument_list|(
name|dnVersion
argument_list|,
name|minimumDataNodeVersion
argument_list|)
operator|<
literal|0
condition|)
block|{
name|IncorrectVersionException
name|ive
init|=
operator|new
name|IncorrectVersionException
argument_list|(
name|minimumDataNodeVersion
argument_list|,
name|dnVersion
argument_list|,
literal|"DataNode"
argument_list|,
literal|"NameNode"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|ive
operator|.
name|getMessage
argument_list|()
operator|+
literal|" DN: "
operator|+
name|dnReg
argument_list|)
expr_stmt|;
throw|throw
name|ive
throw|;
block|}
name|String
name|nnVersion
init|=
name|VersionInfo
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dnVersion
operator|.
name|equals
argument_list|(
name|nnVersion
argument_list|)
condition|)
block|{
name|String
name|messagePrefix
init|=
literal|"Reported DataNode version '"
operator|+
name|dnVersion
operator|+
literal|"' of DN "
operator|+
name|dnReg
operator|+
literal|" does not match NameNode version '"
operator|+
name|nnVersion
operator|+
literal|"'"
decl_stmt|;
name|long
name|nnCTime
init|=
name|nn
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getCTime
argument_list|()
decl_stmt|;
name|long
name|dnCTime
init|=
name|dnReg
operator|.
name|getStorageInfo
argument_list|()
operator|.
name|getCTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|nnCTime
operator|!=
name|dnCTime
condition|)
block|{
name|IncorrectVersionException
name|ive
init|=
operator|new
name|IncorrectVersionException
argument_list|(
name|messagePrefix
operator|+
literal|" and CTime of DN ('"
operator|+
name|dnCTime
operator|+
literal|"') does not match CTime of NN ('"
operator|+
name|nnCTime
operator|+
literal|"')"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|ive
operator|.
name|toString
argument_list|()
argument_list|,
name|ive
argument_list|)
expr_stmt|;
throw|throw
name|ive
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|messagePrefix
operator|+
literal|". Note: This is normal during a rolling upgrade."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getClientMachine ()
specifier|private
specifier|static
name|String
name|getClientMachine
parameter_list|()
block|{
name|String
name|clientMachine
init|=
name|Server
operator|.
name|getRemoteAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientMachine
operator|==
literal|null
condition|)
block|{
comment|//not a RPC client
name|clientMachine
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|clientMachine
return|;
block|}
annotation|@
name|Override
DECL|method|getDataEncryptionKey ()
specifier|public
name|DataEncryptionKey
name|getDataEncryptionKey
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|generateDataEncryptionKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createSnapshot (String snapshotRoot, String snapshotName)
specifier|public
name|String
name|createSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|checkPathLength
argument_list|(
name|snapshotRoot
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"createSnapshot: Pathname too long.  Limit "
operator|+
name|MAX_PATH_LENGTH
operator|+
literal|" characters, "
operator|+
name|MAX_PATH_DEPTH
operator|+
literal|" levels."
argument_list|)
throw|;
block|}
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntryWithPayload
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|cacheEntry
operator|.
name|getPayload
argument_list|()
return|;
block|}
name|metrics
operator|.
name|incrCreateSnapshotOps
argument_list|()
expr_stmt|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|namesystem
operator|.
name|createSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
name|snapshotName
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|deleteSnapshot (String snapshotRoot, String snapshotName)
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|snapshotName
operator|==
literal|null
operator|||
name|snapshotName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The snapshot name is null or empty."
argument_list|)
throw|;
block|}
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrDeleteSnapshotOps
argument_list|()
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
name|snapshotName
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// Client Protocol
DECL|method|allowSnapshot (String snapshotRoot)
specifier|public
name|void
name|allowSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrAllowSnapshotOps
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|allowSnapshot
argument_list|(
name|snapshotRoot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// Client Protocol
DECL|method|disallowSnapshot (String snapshot)
specifier|public
name|void
name|disallowSnapshot
parameter_list|(
name|String
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrDisAllowSnapshotOps
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|disallowSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|renameSnapshot (String snapshotRoot, String snapshotOldName, String snapshotNewName)
specifier|public
name|void
name|renameSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotOldName
parameter_list|,
name|String
name|snapshotNewName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|snapshotNewName
operator|==
literal|null
operator|||
name|snapshotNewName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The new snapshot name is null or empty."
argument_list|)
throw|;
block|}
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrRenameSnapshotOps
argument_list|()
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|renameSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
name|snapshotOldName
argument_list|,
name|snapshotNewName
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// Client Protocol
DECL|method|getSnapshottableDirListing ()
specifier|public
name|SnapshottableDirectoryStatus
index|[]
name|getSnapshottableDirListing
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|SnapshottableDirectoryStatus
index|[]
name|status
init|=
name|namesystem
operator|.
name|getSnapshottableDirListing
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrListSnapshottableDirOps
argument_list|()
expr_stmt|;
return|return
name|status
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getSnapshotDiffReport (String snapshotRoot, String earlierSnapshotName, String laterSnapshotName)
specifier|public
name|SnapshotDiffReport
name|getSnapshotDiffReport
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|earlierSnapshotName
parameter_list|,
name|String
name|laterSnapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|SnapshotDiffReport
name|report
init|=
name|namesystem
operator|.
name|getSnapshotDiffReport
argument_list|(
name|snapshotRoot
argument_list|,
name|earlierSnapshotName
argument_list|,
name|laterSnapshotName
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|incrSnapshotDiffReportOps
argument_list|()
expr_stmt|;
return|return
name|report
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getSnapshotDiffReportListing ( String snapshotRoot, String earlierSnapshotName, String laterSnapshotName, byte[] startPath, int index)
specifier|public
name|SnapshotDiffReportListing
name|getSnapshotDiffReportListing
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|earlierSnapshotName
parameter_list|,
name|String
name|laterSnapshotName
parameter_list|,
name|byte
index|[]
name|startPath
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|SnapshotDiffReportListing
name|report
init|=
name|namesystem
operator|.
name|getSnapshotDiffReportListing
argument_list|(
name|snapshotRoot
argument_list|,
name|earlierSnapshotName
argument_list|,
name|laterSnapshotName
argument_list|,
name|startPath
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|incrSnapshotDiffReportOps
argument_list|()
expr_stmt|;
return|return
name|report
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|addCacheDirective ( CacheDirectiveInfo path, EnumSet<CacheFlag> flags)
specifier|public
name|long
name|addCacheDirective
parameter_list|(
name|CacheDirectiveInfo
name|path
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntryWithPayload
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return
operator|(
name|Long
operator|)
name|cacheEntry
operator|.
name|getPayload
argument_list|()
return|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|long
name|ret
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|namesystem
operator|.
name|addCacheDirective
argument_list|(
name|path
argument_list|,
name|flags
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|modifyCacheDirective ( CacheDirectiveInfo directive, EnumSet<CacheFlag> flags)
specifier|public
name|void
name|modifyCacheDirective
parameter_list|(
name|CacheDirectiveInfo
name|directive
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|modifyCacheDirective
argument_list|(
name|directive
argument_list|,
name|flags
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|removeCacheDirective (long id)
specifier|public
name|void
name|removeCacheDirective
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|listCacheDirectives (long prevId, CacheDirectiveInfo filter)
specifier|public
name|BatchedEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|listCacheDirectives
parameter_list|(
name|long
name|prevId
parameter_list|,
name|CacheDirectiveInfo
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|filter
operator|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|namesystem
operator|.
name|listCacheDirectives
argument_list|(
name|prevId
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|//ClientProtocol
DECL|method|addCachePool (CachePoolInfo info)
specifier|public
name|void
name|addCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|modifyCachePool (CachePoolInfo info)
specifier|public
name|void
name|modifyCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|modifyCachePool
argument_list|(
name|info
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|removeCachePool (String cachePoolName)
specifier|public
name|void
name|removeCachePool
parameter_list|(
name|String
name|cachePoolName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|removeCachePool
argument_list|(
name|cachePoolName
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|listCachePools (String prevKey)
specifier|public
name|BatchedEntries
argument_list|<
name|CachePoolEntry
argument_list|>
name|listCachePools
parameter_list|(
name|String
name|prevKey
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|listCachePools
argument_list|(
name|prevKey
operator|!=
literal|null
condition|?
name|prevKey
else|:
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|modifyAclEntries (String src, List<AclEntry> aclSpec)
specifier|public
name|void
name|modifyAclEntries
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|modifyAclEntries
argument_list|(
name|src
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClienProtocol
DECL|method|removeAclEntries (String src, List<AclEntry> aclSpec)
specifier|public
name|void
name|removeAclEntries
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|removeAclEntries
argument_list|(
name|src
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|removeDefaultAcl (String src)
specifier|public
name|void
name|removeDefaultAcl
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|removeDefaultAcl
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|removeAcl (String src)
specifier|public
name|void
name|removeAcl
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|removeAcl
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setAcl (String src, List<AclEntry> aclSpec)
specifier|public
name|void
name|setAcl
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|setAcl
argument_list|(
name|src
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getAclStatus (String src)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getAclStatus
argument_list|(
name|src
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|createEncryptionZone (String src, String keyName)
specifier|public
name|void
name|createEncryptionZone
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|createEncryptionZone
argument_list|(
name|src
argument_list|,
name|keyName
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getEZForPath (String src)
specifier|public
name|EncryptionZone
name|getEZForPath
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getEZForPath
argument_list|(
name|src
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|listEncryptionZones ( long prevId)
specifier|public
name|BatchedEntries
argument_list|<
name|EncryptionZone
argument_list|>
name|listEncryptionZones
parameter_list|(
name|long
name|prevId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|listEncryptionZones
argument_list|(
name|prevId
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|reencryptEncryptionZone (final String zone, final ReencryptAction action)
specifier|public
name|void
name|reencryptEncryptionZone
parameter_list|(
specifier|final
name|String
name|zone
parameter_list|,
specifier|final
name|ReencryptAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|reencryptEncryptionZone
argument_list|(
name|zone
argument_list|,
name|action
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|listReencryptionStatus ( final long prevId)
specifier|public
name|BatchedEntries
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|listReencryptionStatus
parameter_list|(
specifier|final
name|long
name|prevId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|listReencryptionStatus
argument_list|(
name|prevId
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setErasureCodingPolicy (String src, String ecPolicyName)
specifier|public
name|void
name|setErasureCodingPolicy
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
specifier|final
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|ecPolicyName
operator|==
literal|null
condition|)
block|{
name|ecPolicyName
operator|=
name|defaultECPolicyName
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"No policy name is specified, "
operator|+
literal|"set the default policy name instead"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Set erasure coding policy "
operator|+
name|ecPolicyName
operator|+
literal|" on "
operator|+
name|src
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|setErasureCodingPolicy
argument_list|(
name|src
argument_list|,
name|ecPolicyName
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|setXAttr (String src, XAttr xAttr, EnumSet<XAttrSetFlag> flag)
specifier|public
name|void
name|setXAttr
parameter_list|(
name|String
name|src
parameter_list|,
name|XAttr
name|xAttr
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|setXAttr
argument_list|(
name|src
argument_list|,
name|xAttr
argument_list|,
name|flag
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getXAttrs (String src, List<XAttr> xAttrs)
specifier|public
name|List
argument_list|<
name|XAttr
argument_list|>
name|getXAttrs
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getXAttrs
argument_list|(
name|src
argument_list|,
name|xAttrs
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|listXAttrs (String src)
specifier|public
name|List
argument_list|<
name|XAttr
argument_list|>
name|listXAttrs
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|listXAttrs
argument_list|(
name|src
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|removeXAttr (String src, XAttr xAttr)
specifier|public
name|void
name|removeXAttr
parameter_list|(
name|String
name|src
parameter_list|,
name|XAttr
name|xAttr
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
comment|// Return previous response
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|removeXAttr
argument_list|(
name|src
argument_list|,
name|xAttr
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkNNStartup ()
specifier|private
name|void
name|checkNNStartup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|nn
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|String
name|message
init|=
name|NameNode
operator|.
name|composeNotStartedMessage
argument_list|(
name|this
operator|.
name|nn
operator|.
name|getRole
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RetriableException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|checkAccess (String path, FsAction mode)
specifier|public
name|void
name|checkAccess
parameter_list|(
name|String
name|path
parameter_list|,
name|FsAction
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkAccess
argument_list|(
name|path
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getCurrentEditLogTxid ()
specifier|public
name|long
name|getCurrentEditLogTxid
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// only active
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
comment|// if it's not yet open for write, we may be in the process of transitioning
comment|// from standby to active and may not yet know what the latest committed
comment|// txid is
return|return
name|namesystem
operator|.
name|getEditLog
argument_list|()
operator|.
name|isOpenForWrite
argument_list|()
condition|?
name|namesystem
operator|.
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
DECL|method|readOp (EditLogInputStream elis)
specifier|private
specifier|static
name|FSEditLogOp
name|readOp
parameter_list|(
name|EditLogInputStream
name|elis
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|elis
operator|.
name|readOp
argument_list|()
return|;
comment|// we can get the below two exceptions if a segment is deleted
comment|// (because we have accumulated too many edits) or (for the local journal/
comment|// no-QJM case only) if a in-progress segment is finalized under us ...
comment|// no need to throw an exception back to the client in this case
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tried to read from deleted or moved edit log segment"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|HttpGetFailedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Tried to read from deleted edit log segment"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getEditsFromTxid (long txid)
specifier|public
name|EventBatchList
name|getEditsFromTxid
parameter_list|(
name|long
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// only active
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
name|int
name|maxEventsPerRPC
init|=
name|nn
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INOTIFY_MAX_EVENTS_PER_RPC_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INOTIFY_MAX_EVENTS_PER_RPC_DEFAULT
argument_list|)
decl_stmt|;
name|FSEditLog
name|log
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
name|long
name|syncTxid
init|=
name|log
operator|.
name|getSyncTxId
argument_list|()
decl_stmt|;
comment|// If we haven't synced anything yet, we can only read finalized
comment|// segments since we can't reliably determine which txns in in-progress
comment|// segments have actually been committed (e.g. written to a quorum of JNs).
comment|// If we have synced txns, we can definitely read up to syncTxid since
comment|// syncTxid is only updated after a transaction is committed to all
comment|// journals. (In-progress segments written by old writers are already
comment|// discarded for us, so if we read any in-progress segments they are
comment|// guaranteed to have been written by this NameNode.)
name|boolean
name|readInProgress
init|=
name|syncTxid
operator|>
literal|0
decl_stmt|;
comment|// doas the NN login user for the actual operations to get edits.
comment|// Notably this is necessary when polling from the remote edits via https.
comment|// We have validated the client is a superuser from the NN RPC, so this
comment|// running as the login user here is safe.
name|EventBatchList
name|ret
init|=
name|SecurityUtil
operator|.
name|doAsLoginUser
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|EventBatchList
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|EventBatchList
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getEventBatchList
argument_list|(
name|syncTxid
argument_list|,
name|txid
argument_list|,
name|log
argument_list|,
name|readInProgress
argument_list|,
name|maxEventsPerRPC
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|getEventBatchList (long syncTxid, long txid, FSEditLog log, boolean readInProgress, int maxEventsPerRPC)
specifier|private
name|EventBatchList
name|getEventBatchList
parameter_list|(
name|long
name|syncTxid
parameter_list|,
name|long
name|txid
parameter_list|,
name|FSEditLog
name|log
parameter_list|,
name|boolean
name|readInProgress
parameter_list|,
name|int
name|maxEventsPerRPC
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|EventBatch
argument_list|>
name|batches
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|totalEvents
init|=
literal|0
decl_stmt|;
name|long
name|maxSeenTxid
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|firstSeenTxid
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|syncTxid
operator|>
literal|0
operator|&&
name|txid
operator|>
name|syncTxid
condition|)
block|{
comment|// we can't read past syncTxid, so there's no point in going any further
return|return
operator|new
name|EventBatchList
argument_list|(
name|batches
argument_list|,
name|firstSeenTxid
argument_list|,
name|maxSeenTxid
argument_list|,
name|syncTxid
argument_list|)
return|;
block|}
name|Collection
argument_list|<
name|EditLogInputStream
argument_list|>
name|streams
init|=
literal|null
decl_stmt|;
try|try
block|{
name|streams
operator|=
name|log
operator|.
name|selectInputStreams
argument_list|(
name|txid
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|readInProgress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// can happen if we have
comment|// transitioned out of active and haven't yet transitioned to standby
comment|// and are using QJM -- the edit log will be closed and this exception
comment|// will result
name|LOG
operator|.
name|info
argument_list|(
literal|"NN is transitioning from active to standby and FSEditLog "
operator|+
literal|"is closed -- could not read edits"
argument_list|)
expr_stmt|;
return|return
operator|new
name|EventBatchList
argument_list|(
name|batches
argument_list|,
name|firstSeenTxid
argument_list|,
name|maxSeenTxid
argument_list|,
name|syncTxid
argument_list|)
return|;
block|}
name|boolean
name|breakOuter
init|=
literal|false
decl_stmt|;
for|for
control|(
name|EditLogInputStream
name|elis
range|:
name|streams
control|)
block|{
comment|// our assumption in this code is the EditLogInputStreams are ordered by
comment|// starting txid
try|try
block|{
name|FSEditLogOp
name|op
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|op
operator|=
name|readOp
argument_list|(
name|elis
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// break out of here in the unlikely event that syncTxid is so
comment|// out of date that its segment has already been deleted, so the first
comment|// txid we get is greater than syncTxid
if|if
condition|(
name|syncTxid
operator|>
literal|0
operator|&&
name|op
operator|.
name|getTransactionId
argument_list|()
operator|>
name|syncTxid
condition|)
block|{
name|breakOuter
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|EventBatch
name|eventBatch
init|=
name|InotifyFSEditLogOpTranslator
operator|.
name|translate
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventBatch
operator|!=
literal|null
condition|)
block|{
name|batches
operator|.
name|add
argument_list|(
name|eventBatch
argument_list|)
expr_stmt|;
name|totalEvents
operator|+=
name|eventBatch
operator|.
name|getEvents
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|getTransactionId
argument_list|()
operator|>
name|maxSeenTxid
condition|)
block|{
name|maxSeenTxid
operator|=
name|op
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|firstSeenTxid
operator|==
operator|-
literal|1
condition|)
block|{
name|firstSeenTxid
operator|=
name|op
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|totalEvents
operator|>=
name|maxEventsPerRPC
operator|||
operator|(
name|syncTxid
operator|>
literal|0
operator|&&
name|op
operator|.
name|getTransactionId
argument_list|()
operator|==
name|syncTxid
operator|)
condition|)
block|{
comment|// we're done
name|breakOuter
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|elis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|breakOuter
condition|)
block|{
break|break;
block|}
block|}
return|return
operator|new
name|EventBatchList
argument_list|(
name|batches
argument_list|,
name|firstSeenTxid
argument_list|,
name|maxSeenTxid
argument_list|,
name|syncTxid
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// TraceAdminProtocol
DECL|method|listSpanReceivers ()
specifier|public
name|SpanReceiverInfo
index|[]
name|listSpanReceivers
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
return|return
name|nn
operator|.
name|tracerConfigurationManager
operator|.
name|listSpanReceivers
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// TraceAdminProtocol
DECL|method|addSpanReceiver (SpanReceiverInfo info)
specifier|public
name|long
name|addSpanReceiver
parameter_list|(
name|SpanReceiverInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
return|return
name|nn
operator|.
name|tracerConfigurationManager
operator|.
name|addSpanReceiver
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// TraceAdminProtocol
DECL|method|removeSpanReceiver (long id)
specifier|public
name|void
name|removeSpanReceiver
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
name|nn
operator|.
name|tracerConfigurationManager
operator|.
name|removeSpanReceiver
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getErasureCodingPolicies ()
specifier|public
name|ErasureCodingPolicyInfo
index|[]
name|getErasureCodingPolicies
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getErasureCodingPolicies
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getErasureCodingCodecs ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getErasureCodingCodecs
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getErasureCodingCodecs
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|getErasureCodingPolicy (String src)
specifier|public
name|ErasureCodingPolicy
name|getErasureCodingPolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
return|return
name|namesystem
operator|.
name|getErasureCodingPolicy
argument_list|(
name|src
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|unsetErasureCodingPolicy (String src)
specifier|public
name|void
name|unsetErasureCodingPolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
specifier|final
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|src
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addErasureCodingPolicies ( ErasureCodingPolicy[] policies)
specifier|public
name|AddErasureCodingPolicyResponse
index|[]
name|addErasureCodingPolicies
parameter_list|(
name|ErasureCodingPolicy
index|[]
name|policies
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
specifier|final
name|CacheEntryWithPayload
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return
operator|(
name|AddErasureCodingPolicyResponse
index|[]
operator|)
name|cacheEntry
operator|.
name|getPayload
argument_list|()
return|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|AddErasureCodingPolicyResponse
index|[]
name|responses
init|=
operator|new
name|AddErasureCodingPolicyResponse
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|responses
operator|=
name|namesystem
operator|.
name|addErasureCodingPolicies
argument_list|(
name|policies
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|,
name|responses
argument_list|)
expr_stmt|;
block|}
return|return
name|responses
return|;
block|}
annotation|@
name|Override
DECL|method|removeErasureCodingPolicy (String ecPolicyName)
specifier|public
name|void
name|removeErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
specifier|final
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|removeErasureCodingPolicy
argument_list|(
name|ecPolicyName
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|enableErasureCodingPolicy (String ecPolicyName)
specifier|public
name|void
name|enableErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
specifier|final
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|ecPolicyName
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ClientProtocol
DECL|method|disableErasureCodingPolicy (String ecPolicyName)
specifier|public
name|void
name|disableErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
specifier|final
name|CacheEntry
name|cacheEntry
init|=
name|RetryCache
operator|.
name|waitForCompletion
argument_list|(
name|retryCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
operator|&&
name|cacheEntry
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|ecPolicyName
argument_list|,
name|cacheEntry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|RetryCache
operator|.
name|setState
argument_list|(
name|cacheEntry
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// ReconfigurationProtocol
DECL|method|startReconfiguration ()
specifier|public
name|void
name|startReconfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|operationName
init|=
literal|"startNamenodeReconfiguration"
decl_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|nn
operator|.
name|startReconfigurationTask
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// ReconfigurationProtocol
DECL|method|getReconfigurationStatus ()
specifier|public
name|ReconfigurationTaskStatus
name|getReconfigurationStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|operationName
init|=
literal|"getNamenodeReconfigurationStatus"
decl_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|ReconfigurationTaskStatus
name|status
init|=
name|nn
operator|.
name|getReconfigurationTaskStatus
argument_list|()
decl_stmt|;
name|namesystem
operator|.
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
annotation|@
name|Override
comment|// ReconfigurationProtocol
DECL|method|listReconfigurableProperties ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listReconfigurableProperties
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|operationName
init|=
literal|"listNamenodeReconfigurableProperties"
decl_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|nn
operator|.
name|getReconfigurableProperties
argument_list|()
argument_list|)
decl_stmt|;
name|namesystem
operator|.
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|isStoragePolicySatisfierRunning ()
specifier|public
name|boolean
name|isStoragePolicySatisfierRunning
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|operationName
init|=
literal|"isStoragePolicySatisfierRunning"
decl_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|nn
operator|.
name|isStandbyState
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StandbyException
argument_list|(
literal|"Not supported by Standby Namenode."
argument_list|)
throw|;
block|}
name|boolean
name|isSPSRunning
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|isStoragePolicySatisfierRunning
argument_list|()
decl_stmt|;
name|namesystem
operator|.
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|isSPSRunning
return|;
block|}
annotation|@
name|Override
DECL|method|checkStoragePolicySatisfyPathStatus ( String path)
specifier|public
name|StoragePolicySatisfyPathStatus
name|checkStoragePolicySatisfyPathStatus
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
if|if
condition|(
name|nn
operator|.
name|isStandbyState
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StandbyException
argument_list|(
literal|"Not supported by Standby Namenode."
argument_list|)
throw|;
block|}
return|return
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|checkStoragePolicySatisfyPathStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFilePath (Long inodeId)
specifier|public
name|String
name|getFilePath
parameter_list|(
name|Long
name|inodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|operationName
init|=
literal|"getFilePath"
decl_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|nn
operator|.
name|isStandbyState
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StandbyException
argument_list|(
literal|"Not supported by Standby Namenode."
argument_list|)
throw|;
block|}
return|return
name|namesystem
operator|.
name|getFilePath
argument_list|(
name|inodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNextSPSPathId ()
specifier|public
name|Long
name|getNextSPSPathId
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|operationName
init|=
literal|"getNextSPSPathId"
decl_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|nn
operator|.
name|isStandbyState
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StandbyException
argument_list|(
literal|"Not supported by Standby Namenode."
argument_list|)
throw|;
block|}
comment|// Check that internal SPS service is running
if|if
condition|(
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getSPSMode
argument_list|()
operator|==
name|StoragePolicySatisfierMode
operator|.
name|INTERNAL
operator|&&
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getSPSService
argument_list|()
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SPS service is internally enabled and running inside "
operator|+
literal|"namenode, so external SPS is not allowed to fetch the path Ids"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"SPS service is internally enabled and running"
operator|+
literal|" inside namenode, so external SPS is not allowed to fetch"
operator|+
literal|" the path Ids"
argument_list|)
throw|;
block|}
return|return
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getNextSPSPathId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|checkDNSpaceForScheduling (DatanodeInfo dn, StorageType type, long estimatedSize)
specifier|public
name|boolean
name|checkDNSpaceForScheduling
parameter_list|(
name|DatanodeInfo
name|dn
parameter_list|,
name|StorageType
name|type
parameter_list|,
name|long
name|estimatedSize
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|operationName
init|=
literal|"checkDNSpaceForScheduling"
decl_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|nn
operator|.
name|isStandbyState
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StandbyException
argument_list|(
literal|"Not supported by Standby Namenode."
argument_list|)
throw|;
block|}
return|return
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|verifyTargetDatanodeHasSpaceForScheduling
argument_list|(
name|dn
argument_list|,
name|type
argument_list|,
name|estimatedSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hasLowRedundancyBlocks (long inodeId)
specifier|public
name|boolean
name|hasLowRedundancyBlocks
parameter_list|(
name|long
name|inodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNNStartup
argument_list|()
expr_stmt|;
name|String
name|operationName
init|=
literal|"hasLowRedundancyBlocks"
decl_stmt|;
name|namesystem
operator|.
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|nn
operator|.
name|isStandbyState
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|StandbyException
argument_list|(
literal|"Not supported by Standby Namenode."
argument_list|)
throw|;
block|}
return|return
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|hasLowRedundancyBlocks
argument_list|(
name|inodeId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

