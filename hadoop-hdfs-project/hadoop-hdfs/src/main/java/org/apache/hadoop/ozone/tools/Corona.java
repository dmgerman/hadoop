begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.tools
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Corona - A tool to populate ozone with data for testing.<br>  * This is not a map-reduce program and this is not for benchmarking  * Ozone write throughput.<br>  * It supports both online and offline modes. Default mode is offline,  *<i>-mode</i> can be used to change the mode.  *<p>  * In online mode, active internet connection is required,  * common crawl data from AWS will be used.<br>  * Default source is:<br>  * https://commoncrawl.s3.amazonaws.com/crawl-data/  * CC-MAIN-2017-17/warc.paths.gz<br>  * (it contains the path to actual data segment)<br>  * User can override this using<i>-source</i>.  * The following values are derived from URL of Common Crawl data  *<ul>  *<li>Domain will be used as Volume</li>  *<li>URL will be used as Bucket</li>  *<li>FileName will be used as Key</li>  *</ul></p>  * In offline mode, the data will be random bytes and  * size of data will be 10 KB.<br>  *<ul>  *<li>Default number of Volumes 10,<i>-numOfVolumes</i>  * can be used to override</li>  *<li>Default number of Buckets per Volume 1000,<i>-numOfBuckets</i>  * can be used to override</li>  *<li>Default number of Keys per Bucket 500000,<i>-numOfKeys</i>  * can be used to override</li>  *</ul>  */
end_comment

begin_class
DECL|class|Corona
specifier|public
specifier|final
class|class
name|Corona
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|HELP
specifier|private
specifier|static
specifier|final
name|String
name|HELP
init|=
literal|"help"
decl_stmt|;
DECL|field|MODE
specifier|private
specifier|static
specifier|final
name|String
name|MODE
init|=
literal|"mode"
decl_stmt|;
DECL|field|SOURCE
specifier|private
specifier|static
specifier|final
name|String
name|SOURCE
init|=
literal|"source"
decl_stmt|;
DECL|field|VALIDATE_WRITE
specifier|private
specifier|static
specifier|final
name|String
name|VALIDATE_WRITE
init|=
literal|"validateWrites"
decl_stmt|;
DECL|field|NUM_OF_THREADS
specifier|private
specifier|static
specifier|final
name|String
name|NUM_OF_THREADS
init|=
literal|"numOfThreads"
decl_stmt|;
DECL|field|NUM_OF_VOLUMES
specifier|private
specifier|static
specifier|final
name|String
name|NUM_OF_VOLUMES
init|=
literal|"numOfVolumes"
decl_stmt|;
DECL|field|NUM_OF_BUCKETS
specifier|private
specifier|static
specifier|final
name|String
name|NUM_OF_BUCKETS
init|=
literal|"numOfBuckets"
decl_stmt|;
DECL|field|NUM_OF_KEYS
specifier|private
specifier|static
specifier|final
name|String
name|NUM_OF_KEYS
init|=
literal|"numOfKeys"
decl_stmt|;
DECL|field|KEY_SIZE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_SIZE
init|=
literal|"keySize"
decl_stmt|;
DECL|field|MODE_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|MODE_DEFAULT
init|=
literal|"offline"
decl_stmt|;
DECL|field|SOURCE_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|SOURCE_DEFAULT
init|=
literal|"https://commoncrawl.s3.amazonaws.com/"
operator|+
literal|"crawl-data/CC-MAIN-2017-17/warc.paths.gz"
decl_stmt|;
DECL|field|NUM_OF_THREADS_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|NUM_OF_THREADS_DEFAULT
init|=
literal|"10"
decl_stmt|;
DECL|field|NUM_OF_VOLUMES_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|NUM_OF_VOLUMES_DEFAULT
init|=
literal|"10"
decl_stmt|;
DECL|field|NUM_OF_BUCKETS_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|NUM_OF_BUCKETS_DEFAULT
init|=
literal|"1000"
decl_stmt|;
DECL|field|NUM_OF_KEYS_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|NUM_OF_KEYS_DEFAULT
init|=
literal|"500000"
decl_stmt|;
DECL|field|KEY_SIZE_DEFAULT
specifier|private
specifier|static
specifier|final
name|int
name|KEY_SIZE_DEFAULT
init|=
literal|10240
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Corona
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|printUsage
specifier|private
name|boolean
name|printUsage
init|=
literal|false
decl_stmt|;
DECL|field|completed
specifier|private
name|boolean
name|completed
init|=
literal|false
decl_stmt|;
DECL|field|exception
specifier|private
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
DECL|field|mode
specifier|private
name|String
name|mode
decl_stmt|;
DECL|field|source
specifier|private
name|String
name|source
decl_stmt|;
DECL|field|numOfThreads
specifier|private
name|String
name|numOfThreads
decl_stmt|;
DECL|field|numOfVolumes
specifier|private
name|String
name|numOfVolumes
decl_stmt|;
DECL|field|numOfBuckets
specifier|private
name|String
name|numOfBuckets
decl_stmt|;
DECL|field|numOfKeys
specifier|private
name|String
name|numOfKeys
decl_stmt|;
DECL|field|keySize
specifier|private
name|int
name|keySize
decl_stmt|;
DECL|field|validateWrites
specifier|private
name|boolean
name|validateWrites
decl_stmt|;
DECL|field|ozoneClient
specifier|private
name|OzoneClient
name|ozoneClient
decl_stmt|;
DECL|field|objectStore
specifier|private
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|processor
specifier|private
name|ExecutorService
name|processor
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|volumeCreationTime
specifier|private
name|AtomicLong
name|volumeCreationTime
decl_stmt|;
DECL|field|bucketCreationTime
specifier|private
name|AtomicLong
name|bucketCreationTime
decl_stmt|;
DECL|field|keyCreationTime
specifier|private
name|AtomicLong
name|keyCreationTime
decl_stmt|;
DECL|field|keyWriteTime
specifier|private
name|AtomicLong
name|keyWriteTime
decl_stmt|;
DECL|field|totalBytesWritten
specifier|private
name|AtomicLong
name|totalBytesWritten
decl_stmt|;
DECL|field|numberOfVolumesCreated
specifier|private
name|AtomicInteger
name|numberOfVolumesCreated
decl_stmt|;
DECL|field|numberOfBucketsCreated
specifier|private
name|AtomicInteger
name|numberOfBucketsCreated
decl_stmt|;
DECL|field|numberOfKeysAdded
specifier|private
name|AtomicLong
name|numberOfKeysAdded
decl_stmt|;
DECL|field|totalWritesValidated
specifier|private
name|Long
name|totalWritesValidated
decl_stmt|;
DECL|field|writeValidationSuccessCount
specifier|private
name|Long
name|writeValidationSuccessCount
decl_stmt|;
DECL|field|writeValidationFailureCount
specifier|private
name|Long
name|writeValidationFailureCount
decl_stmt|;
DECL|field|validationQueue
specifier|private
name|BlockingQueue
argument_list|<
name|KeyValue
argument_list|>
name|validationQueue
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|Corona (Configuration conf)
name|Corona
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|startTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|volumeCreationTime
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|bucketCreationTime
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|keyCreationTime
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|keyWriteTime
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|totalBytesWritten
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|numberOfVolumesCreated
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|numberOfBucketsCreated
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|numberOfKeysAdded
operator|=
operator|new
name|AtomicLong
argument_list|()
expr_stmt|;
name|OzoneClientFactory
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ozoneClient
operator|=
name|OzoneClientFactory
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|objectStore
operator|=
name|ozoneClient
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|GenericOptionsParser
name|parser
init|=
operator|new
name|GenericOptionsParser
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|parseOptions
argument_list|(
name|parser
operator|.
name|getCommandLine
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|printUsage
condition|)
block|{
name|usage
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of Threads: "
operator|+
name|numOfThreads
argument_list|)
expr_stmt|;
name|processor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|numOfThreads
argument_list|)
argument_list|)
expr_stmt|;
name|addShutdownHook
argument_list|()
expr_stmt|;
if|if
condition|(
name|mode
operator|.
name|equals
argument_list|(
literal|"online"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mode: online"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mode: offline"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of Volumes: {}."
argument_list|,
name|numOfVolumes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of Buckets per Volume: {}."
argument_list|,
name|numOfBuckets
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of Keys per Bucket: {}."
argument_list|,
name|numOfKeys
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Key size: {} bytes"
argument_list|,
name|keySize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Integer
operator|.
name|parseInt
argument_list|(
name|numOfVolumes
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|String
name|volume
init|=
literal|"vol-"
operator|+
name|i
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|processor
operator|.
name|submit
argument_list|(
operator|new
name|OfflineProcessor
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
name|validator
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|validateWrites
condition|)
block|{
name|totalWritesValidated
operator|=
literal|0L
expr_stmt|;
name|writeValidationSuccessCount
operator|=
literal|0L
expr_stmt|;
name|writeValidationFailureCount
operator|=
literal|0L
expr_stmt|;
name|validationQueue
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|numOfThreads
argument_list|)
argument_list|)
expr_stmt|;
name|validator
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Validator
argument_list|()
argument_list|)
expr_stmt|;
name|validator
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Data validation is enabled."
argument_list|)
expr_stmt|;
block|}
name|Thread
name|progressbar
init|=
name|getProgressBarThread
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting progress bar Thread."
argument_list|)
expr_stmt|;
name|progressbar
operator|.
name|start
argument_list|()
expr_stmt|;
name|processor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|processor
operator|.
name|awaitTermination
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|completed
operator|=
literal|true
expr_stmt|;
name|progressbar
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|validateWrites
condition|)
block|{
name|validator
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|ozoneClient
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|getOptions ()
specifier|private
name|Options
name|getOptions
parameter_list|()
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"prints usage."
argument_list|)
expr_stmt|;
name|Option
name|optHelp
init|=
name|OptionBuilder
operator|.
name|create
argument_list|(
name|HELP
argument_list|)
decl_stmt|;
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"online | offline"
argument_list|)
expr_stmt|;
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"specifies the mode of "
operator|+
literal|"Corona run."
argument_list|)
expr_stmt|;
name|Option
name|optMode
init|=
name|OptionBuilder
operator|.
name|create
argument_list|(
name|MODE
argument_list|)
decl_stmt|;
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"source url"
argument_list|)
expr_stmt|;
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"specifies the URL of s3 "
operator|+
literal|"commoncrawl warc file to be used when the mode is online."
argument_list|)
expr_stmt|;
name|Option
name|optSource
init|=
name|OptionBuilder
operator|.
name|create
argument_list|(
name|SOURCE
argument_list|)
decl_stmt|;
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"do random validation of "
operator|+
literal|"data written into ozone, only subset of data is validated."
argument_list|)
expr_stmt|;
name|Option
name|optValidateWrite
init|=
name|OptionBuilder
operator|.
name|create
argument_list|(
name|VALIDATE_WRITE
argument_list|)
decl_stmt|;
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"number of threads to be launched "
operator|+
literal|"for the run"
argument_list|)
expr_stmt|;
name|Option
name|optNumOfThreads
init|=
name|OptionBuilder
operator|.
name|create
argument_list|(
name|NUM_OF_THREADS
argument_list|)
decl_stmt|;
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"specifies number of Volumes to be "
operator|+
literal|"created in offline mode"
argument_list|)
expr_stmt|;
name|Option
name|optNumOfVolumes
init|=
name|OptionBuilder
operator|.
name|create
argument_list|(
name|NUM_OF_VOLUMES
argument_list|)
decl_stmt|;
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"specifies number of Buckets to be "
operator|+
literal|"created per Volume in offline mode"
argument_list|)
expr_stmt|;
name|Option
name|optNumOfBuckets
init|=
name|OptionBuilder
operator|.
name|create
argument_list|(
name|NUM_OF_BUCKETS
argument_list|)
decl_stmt|;
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"specifies number of Keys to be "
operator|+
literal|"created per Bucket in offline mode"
argument_list|)
expr_stmt|;
name|Option
name|optNumOfKeys
init|=
name|OptionBuilder
operator|.
name|create
argument_list|(
name|NUM_OF_KEYS
argument_list|)
decl_stmt|;
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
expr_stmt|;
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
literal|"specifies the size of Key in bytes to be "
operator|+
literal|"created in offline mode"
argument_list|)
expr_stmt|;
name|Option
name|optKeySize
init|=
name|OptionBuilder
operator|.
name|create
argument_list|(
name|KEY_SIZE
argument_list|)
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|optHelp
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|optMode
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|optSource
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|optValidateWrite
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|optNumOfThreads
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|optNumOfVolumes
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|optNumOfBuckets
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|optNumOfKeys
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|optKeySize
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
DECL|method|parseOptions (CommandLine cmdLine)
specifier|private
name|void
name|parseOptions
parameter_list|(
name|CommandLine
name|cmdLine
parameter_list|)
block|{
name|printUsage
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|HELP
argument_list|)
expr_stmt|;
name|mode
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|MODE
argument_list|)
condition|?
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|MODE
argument_list|)
else|:
name|MODE_DEFAULT
expr_stmt|;
name|source
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|SOURCE
argument_list|)
condition|?
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|SOURCE
argument_list|)
else|:
name|SOURCE_DEFAULT
expr_stmt|;
name|numOfThreads
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|NUM_OF_THREADS
argument_list|)
condition|?
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|NUM_OF_THREADS
argument_list|)
else|:
name|NUM_OF_THREADS_DEFAULT
expr_stmt|;
name|validateWrites
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|VALIDATE_WRITE
argument_list|)
expr_stmt|;
name|numOfVolumes
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|NUM_OF_VOLUMES
argument_list|)
condition|?
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|NUM_OF_VOLUMES
argument_list|)
else|:
name|NUM_OF_VOLUMES_DEFAULT
expr_stmt|;
name|numOfBuckets
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|NUM_OF_BUCKETS
argument_list|)
condition|?
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|NUM_OF_BUCKETS
argument_list|)
else|:
name|NUM_OF_BUCKETS_DEFAULT
expr_stmt|;
name|numOfKeys
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|NUM_OF_KEYS
argument_list|)
condition|?
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|NUM_OF_KEYS
argument_list|)
else|:
name|NUM_OF_KEYS_DEFAULT
expr_stmt|;
name|keySize
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|KEY_SIZE
argument_list|)
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
name|KEY_SIZE
argument_list|)
argument_list|)
else|:
name|KEY_SIZE_DEFAULT
expr_stmt|;
block|}
DECL|method|usage ()
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Options supported are:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-numOfThreads<value>           "
operator|+
literal|"number of threads to be launched for the run."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-validateWrites                 "
operator|+
literal|"do random validation of data written into ozone, "
operator|+
literal|"only subset of data is validated."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-mode [online | offline]        "
operator|+
literal|"specifies the mode in which Corona should run."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-source<url>                   "
operator|+
literal|"specifies the URL of s3 commoncrawl warc file to "
operator|+
literal|"be used when the mode is online."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-numOfVolumes<value>           "
operator|+
literal|"specifies number of Volumes to be created in offline mode"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-numOfBuckets<value>           "
operator|+
literal|"specifies number of Buckets to be created per Volume "
operator|+
literal|"in offline mode"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-numOfKeys<value>              "
operator|+
literal|"specifies number of Keys to be created per Bucket "
operator|+
literal|"in offline mode"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-keySize<value>                "
operator|+
literal|"specifies the size of Key in bytes to be created in offline mode"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-help                           "
operator|+
literal|"prints usage."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
DECL|class|OfflineProcessor
specifier|private
class|class
name|OfflineProcessor
implements|implements
name|Runnable
block|{
DECL|field|totalBuckets
specifier|private
name|int
name|totalBuckets
decl_stmt|;
DECL|field|totalKeys
specifier|private
name|int
name|totalKeys
decl_stmt|;
DECL|field|volume
specifier|private
name|OzoneVolume
name|volume
decl_stmt|;
DECL|method|OfflineProcessor (String volumeName)
name|OfflineProcessor
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|totalBuckets
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numOfBuckets
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalKeys
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numOfKeys
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating volume: {}"
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|volumeCreationTime
operator|.
name|getAndAdd
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|numberOfVolumesCreated
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|volume
operator|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|totalBuckets
condition|;
name|j
operator|++
control|)
block|{
name|String
name|bucketName
init|=
literal|"bucket-"
operator|+
name|j
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating bucket: {} in volume: {}"
argument_list|,
name|bucketName
argument_list|,
name|volume
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|bucketCreationTime
operator|.
name|getAndAdd
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|numberOfBucketsCreated
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|totalKeys
condition|;
name|k
operator|++
control|)
block|{
name|String
name|key
init|=
literal|"key-"
operator|+
name|k
operator|+
literal|"-"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
name|keySize
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Adding key: {} in bucket: {} of volume: {}"
argument_list|,
name|key
argument_list|,
name|bucket
argument_list|,
name|volume
argument_list|)
expr_stmt|;
name|long
name|keyCreateStart
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|os
init|=
name|bucket
operator|.
name|createKey
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|length
argument_list|)
decl_stmt|;
name|keyCreationTime
operator|.
name|getAndAdd
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|keyCreateStart
argument_list|)
expr_stmt|;
name|long
name|keyWriteStart
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|keyWriteTime
operator|.
name|getAndAdd
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|keyWriteStart
argument_list|)
expr_stmt|;
name|totalBytesWritten
operator|.
name|getAndAdd
argument_list|(
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|numberOfKeysAdded
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
if|if
condition|(
name|validateWrites
condition|)
block|{
name|boolean
name|validate
init|=
name|validationQueue
operator|.
name|offer
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|validate
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Key {}, is queued for validation."
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while adding key: {} in bucket: {}"
operator|+
literal|" of volume: {}."
argument_list|,
name|key
argument_list|,
name|bucket
argument_list|,
name|volume
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while creating bucket: {}"
operator|+
literal|" in volume: {}."
argument_list|,
name|bucketName
argument_list|,
name|volume
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Adds ShutdownHook to print statistics.    */
DECL|method|addShutdownHook ()
specifier|private
name|void
name|addShutdownHook
parameter_list|()
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
name|printStats
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getProgressBarThread ()
specifier|private
name|Thread
name|getProgressBarThread
parameter_list|()
block|{
name|Supplier
argument_list|<
name|Long
argument_list|>
name|currentValue
decl_stmt|;
name|long
name|maxValue
decl_stmt|;
if|if
condition|(
name|mode
operator|.
name|equals
argument_list|(
literal|"online"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented."
argument_list|)
throw|;
block|}
else|else
block|{
name|currentValue
operator|=
parameter_list|()
lambda|->
name|numberOfKeysAdded
operator|.
name|get
argument_list|()
expr_stmt|;
name|maxValue
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|numOfVolumes
argument_list|)
operator|*
name|Long
operator|.
name|parseLong
argument_list|(
name|numOfBuckets
argument_list|)
operator|*
name|Long
operator|.
name|parseLong
argument_list|(
name|numOfKeys
argument_list|)
expr_stmt|;
block|}
name|Thread
name|progressBarThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|ProgressBar
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|currentValue
argument_list|,
name|maxValue
argument_list|)
argument_list|)
decl_stmt|;
name|progressBarThread
operator|.
name|setName
argument_list|(
literal|"ProgressBar"
argument_list|)
expr_stmt|;
return|return
name|progressBarThread
return|;
block|}
DECL|class|ProgressBar
specifier|private
class|class
name|ProgressBar
implements|implements
name|Runnable
block|{
DECL|field|REFRESH_INTERVAL
specifier|private
specifier|static
specifier|final
name|long
name|REFRESH_INTERVAL
init|=
literal|1000L
decl_stmt|;
DECL|field|stream
specifier|private
name|PrintStream
name|stream
decl_stmt|;
DECL|field|currentValue
specifier|private
name|Supplier
argument_list|<
name|Long
argument_list|>
name|currentValue
decl_stmt|;
DECL|field|maxValue
specifier|private
name|long
name|maxValue
decl_stmt|;
DECL|method|ProgressBar (PrintStream stream, Supplier<Long> currentValue, long maxValue)
name|ProgressBar
parameter_list|(
name|PrintStream
name|stream
parameter_list|,
name|Supplier
argument_list|<
name|Long
argument_list|>
name|currentValue
parameter_list|,
name|long
name|maxValue
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|currentValue
operator|=
name|currentValue
expr_stmt|;
name|this
operator|.
name|maxValue
operator|=
name|maxValue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|stream
operator|.
name|println
argument_list|()
expr_stmt|;
name|long
name|value
decl_stmt|;
while|while
condition|(
operator|(
name|value
operator|=
name|currentValue
operator|.
name|get
argument_list|()
operator|)
operator|<
name|maxValue
condition|)
block|{
name|print
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|completed
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|REFRESH_INTERVAL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exception
condition|)
block|{
name|stream
operator|.
name|println
argument_list|()
expr_stmt|;
name|stream
operator|.
name|println
argument_list|(
literal|"Incomplete termination, "
operator|+
literal|"check log for exception."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|print
argument_list|(
name|maxValue
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
comment|/**      * Given current value prints the progress bar.      *      * @param value      */
DECL|method|print (long value)
specifier|private
name|void
name|print
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|stream
operator|.
name|print
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
name|double
name|percent
init|=
literal|100.0
operator|*
name|value
operator|/
name|maxValue
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%.2f"
argument_list|,
name|percent
argument_list|)
operator|+
literal|"% |"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|percent
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'â'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
operator|-
name|percent
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"|  "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|value
operator|+
literal|"/"
operator|+
name|maxValue
argument_list|)
expr_stmt|;
name|long
name|timeInSec
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|String
name|timeToPrint
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d:%02d:%02d"
argument_list|,
name|timeInSec
operator|/
literal|3600
argument_list|,
operator|(
name|timeInSec
operator|%
literal|3600
operator|)
operator|/
literal|60
argument_list|,
name|timeInSec
operator|%
literal|60
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" Time: "
operator|+
name|timeToPrint
argument_list|)
expr_stmt|;
name|stream
operator|.
name|print
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Prints stats of {@link Corona} run to the PrintStream.    *    * @param out PrintStream    */
DECL|method|printStats (PrintStream out)
specifier|private
name|void
name|printStats
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|int
name|threadCount
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numOfThreads
argument_list|)
decl_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|String
name|execTime
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%02d:%02d:%02d"
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toHours
argument_list|(
name|endTime
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|endTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMinutes
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toHours
argument_list|(
name|endTime
argument_list|)
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toSeconds
argument_list|(
name|endTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toSeconds
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|endTime
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|volumeTime
init|=
name|volumeCreationTime
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|String
name|prettyVolumeTime
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%02d:%02d:%02d:%02d"
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toHours
argument_list|(
name|volumeTime
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|volumeTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMinutes
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toHours
argument_list|(
name|volumeTime
argument_list|)
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toSeconds
argument_list|(
name|volumeTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toSeconds
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|volumeTime
argument_list|)
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|volumeTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toSeconds
argument_list|(
name|volumeTime
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|bucketTime
init|=
name|bucketCreationTime
operator|.
name|longValue
argument_list|()
operator|/
name|threadCount
decl_stmt|;
name|String
name|prettyBucketTime
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%02d:%02d:%02d:%02d"
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toHours
argument_list|(
name|bucketTime
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|bucketTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMinutes
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toHours
argument_list|(
name|bucketTime
argument_list|)
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toSeconds
argument_list|(
name|bucketTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toSeconds
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|bucketTime
argument_list|)
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|bucketTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toSeconds
argument_list|(
name|bucketTime
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|totalKeyCreationTime
init|=
name|keyCreationTime
operator|.
name|longValue
argument_list|()
operator|/
name|threadCount
decl_stmt|;
name|String
name|prettyKeyCreationTime
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%02d:%02d:%02d:%02d"
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toHours
argument_list|(
name|totalKeyCreationTime
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|totalKeyCreationTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMinutes
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toHours
argument_list|(
name|totalKeyCreationTime
argument_list|)
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toSeconds
argument_list|(
name|totalKeyCreationTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toSeconds
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|totalKeyCreationTime
argument_list|)
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|totalKeyCreationTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toSeconds
argument_list|(
name|totalKeyCreationTime
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|totalKeyWriteTime
init|=
name|keyWriteTime
operator|.
name|longValue
argument_list|()
operator|/
name|threadCount
decl_stmt|;
name|String
name|prettyKeyWriteTime
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%02d:%02d:%02d:%02d"
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toHours
argument_list|(
name|totalKeyWriteTime
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|totalKeyWriteTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMinutes
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toHours
argument_list|(
name|totalKeyWriteTime
argument_list|)
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toSeconds
argument_list|(
name|totalKeyWriteTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toSeconds
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMinutes
argument_list|(
name|totalKeyWriteTime
argument_list|)
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|totalKeyWriteTime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toSeconds
argument_list|(
name|totalKeyWriteTime
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"***************************************************"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Number of Volumes created: "
operator|+
name|numberOfVolumesCreated
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Number of Buckets created: "
operator|+
name|numberOfBucketsCreated
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Number of Keys added: "
operator|+
name|numberOfKeysAdded
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Time spent in volume creation: "
operator|+
name|prettyVolumeTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Time spent in bucket creation: "
operator|+
name|prettyBucketTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Time spent in key creation: "
operator|+
name|prettyKeyCreationTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Time spent in writing keys: "
operator|+
name|prettyKeyWriteTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Total bytes written: "
operator|+
name|totalBytesWritten
argument_list|)
expr_stmt|;
if|if
condition|(
name|validateWrites
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"Total number of writes validated: "
operator|+
name|totalWritesValidated
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Writes validated: "
operator|+
operator|(
literal|100.0
operator|*
name|totalWritesValidated
operator|/
name|numberOfKeysAdded
operator|.
name|get
argument_list|()
operator|)
operator|+
literal|" %"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Successful validation: "
operator|+
name|writeValidationSuccessCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Unsuccessful validation: "
operator|+
name|writeValidationFailureCount
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"Total Execution time: "
operator|+
name|execTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"***************************************************"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the number of volumes created.    * @return volume count.    */
annotation|@
name|VisibleForTesting
DECL|method|getNumberOfVolumesCreated ()
name|int
name|getNumberOfVolumesCreated
parameter_list|()
block|{
return|return
name|numberOfVolumesCreated
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns the number of buckets created.    * @return bucket count.    */
annotation|@
name|VisibleForTesting
DECL|method|getNumberOfBucketsCreated ()
name|int
name|getNumberOfBucketsCreated
parameter_list|()
block|{
return|return
name|numberOfBucketsCreated
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns the number of keys added.    * @return keys count.    */
annotation|@
name|VisibleForTesting
DECL|method|getNumberOfKeysAdded ()
name|long
name|getNumberOfKeysAdded
parameter_list|()
block|{
return|return
name|numberOfKeysAdded
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Returns true if random validation of write is enabled.    * @return validateWrites    */
annotation|@
name|VisibleForTesting
DECL|method|getValidateWrites ()
name|boolean
name|getValidateWrites
parameter_list|()
block|{
return|return
name|validateWrites
return|;
block|}
comment|/**    * Returns the number of keys validated.    * @return validated key count.    */
annotation|@
name|VisibleForTesting
DECL|method|getTotalKeysValidated ()
name|long
name|getTotalKeysValidated
parameter_list|()
block|{
return|return
name|totalWritesValidated
return|;
block|}
comment|/**    * Returns the number of successful validation.    * @return successful validation count.    */
annotation|@
name|VisibleForTesting
DECL|method|getSuccessfulValidationCount ()
name|long
name|getSuccessfulValidationCount
parameter_list|()
block|{
return|return
name|writeValidationSuccessCount
return|;
block|}
comment|/**    * Returns the number of unsuccessful validation.    * @return unsuccessful validation count.    */
annotation|@
name|VisibleForTesting
DECL|method|getUnsuccessfulValidationCount ()
name|long
name|getUnsuccessfulValidationCount
parameter_list|()
block|{
return|return
name|writeValidationFailureCount
return|;
block|}
comment|/**    * Validates the write done in ozone cluster.    */
DECL|class|Validator
specifier|private
class|class
name|Validator
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|completed
condition|)
block|{
try|try
block|{
name|KeyValue
name|kv
init|=
name|validationQueue
operator|.
name|poll
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|!=
literal|null
condition|)
block|{
name|OzoneInputStream
name|is
init|=
name|kv
operator|.
name|bucket
operator|.
name|readKey
argument_list|(
name|kv
operator|.
name|key
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|kv
operator|.
name|value
operator|.
name|length
index|]
decl_stmt|;
name|int
name|length
init|=
name|is
operator|.
name|read
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|totalWritesValidated
operator|++
expr_stmt|;
if|if
condition|(
name|length
operator|==
name|kv
operator|.
name|value
operator|.
name|length
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|value
argument_list|,
name|kv
operator|.
name|value
argument_list|)
condition|)
block|{
name|writeValidationSuccessCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|writeValidationFailureCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Data validation error for key {}/{}/{}"
argument_list|,
name|kv
operator|.
name|bucket
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|kv
operator|.
name|bucket
argument_list|,
name|kv
operator|.
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Expected: {}, Actual: {}"
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|kv
operator|.
name|value
argument_list|)
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while validating write: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Wrapper to hold ozone key-value pair.    */
DECL|class|KeyValue
specifier|private
specifier|static
class|class
name|KeyValue
block|{
comment|/**      * Bucket name associated with the key-value.      */
DECL|field|bucket
specifier|private
name|OzoneBucket
name|bucket
decl_stmt|;
comment|/**      * Key name associated with the key-value.      */
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
comment|/**      * Value associated with the key-value.      */
DECL|field|value
specifier|private
name|byte
index|[]
name|value
decl_stmt|;
comment|/**      * Constructs a new ozone key-value pair.      *      * @param key   key part      * @param value value part      */
DECL|method|KeyValue (OzoneBucket bucket, String key, byte[] value)
name|KeyValue
parameter_list|(
name|OzoneBucket
name|bucket
parameter_list|,
name|String
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|this
operator|.
name|bucket
operator|=
name|bucket
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
comment|/**    * @param args arguments    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|Corona
argument_list|(
name|conf
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

