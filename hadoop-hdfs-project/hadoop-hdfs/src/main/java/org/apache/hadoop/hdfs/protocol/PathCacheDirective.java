begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ComparisonChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathCacheDirectiveException
operator|.
name|EmptyPathError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathCacheDirectiveException
operator|.
name|InvalidPoolError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathCacheDirectiveException
operator|.
name|InvalidPathNameError
import|;
end_import

begin_comment
comment|/**  * A directive to add a path to a cache pool.  */
end_comment

begin_class
DECL|class|PathCacheDirective
specifier|public
class|class
name|PathCacheDirective
implements|implements
name|Comparable
argument_list|<
name|PathCacheDirective
argument_list|>
block|{
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|poolId
specifier|private
specifier|final
name|long
name|poolId
decl_stmt|;
DECL|method|PathCacheDirective (String path, long poolId)
specifier|public
name|PathCacheDirective
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|poolId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|poolId
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|poolId
operator|=
name|poolId
expr_stmt|;
block|}
comment|/**    * @return The path used in this request.    */
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**    * @return The pool used in this request.    */
DECL|method|getPoolId ()
specifier|public
name|long
name|getPoolId
parameter_list|()
block|{
return|return
name|poolId
return|;
block|}
comment|/**    * Check if this PathCacheDirective is valid.    *     * @throws IOException    *     If this PathCacheDirective is not valid.    */
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EmptyPathError
argument_list|(
name|this
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPathNameError
argument_list|(
name|this
argument_list|)
throw|;
block|}
if|if
condition|(
name|poolId
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidPoolError
argument_list|(
name|this
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareTo (PathCacheDirective rhs)
specifier|public
name|int
name|compareTo
parameter_list|(
name|PathCacheDirective
name|rhs
parameter_list|)
block|{
return|return
name|ComparisonChain
operator|.
name|start
argument_list|()
operator|.
name|compare
argument_list|(
name|poolId
argument_list|,
name|rhs
operator|.
name|getPoolId
argument_list|()
argument_list|)
operator|.
name|compare
argument_list|(
name|path
argument_list|,
name|rhs
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|result
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
name|poolId
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
name|PathCacheDirective
name|other
init|=
operator|(
name|PathCacheDirective
operator|)
name|o
decl_stmt|;
return|return
name|other
operator|.
name|compareTo
argument_list|(
name|this
argument_list|)
operator|==
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"{ path:"
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
operator|.
name|append
argument_list|(
literal|", poolId:"
argument_list|)
operator|.
name|append
argument_list|(
name|poolId
argument_list|)
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

