begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_comment
comment|/** Snapshot of a sub-tree in the namesystem. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Snapshot
specifier|public
class|class
name|Snapshot
implements|implements
name|Comparable
argument_list|<
name|byte
index|[]
argument_list|>
block|{
comment|/**    * Compare snapshot IDs. Null indicates the current status thus is greater    * than non-null snapshots.    */
DECL|field|ID_COMPARATOR
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Snapshot
argument_list|>
name|ID_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|Snapshot
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Snapshot
name|left
parameter_list|,
name|Snapshot
name|right
parameter_list|)
block|{
comment|// null means the current state, thus should be the largest
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
return|return
name|right
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
return|;
block|}
else|else
block|{
return|return
name|right
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|left
operator|.
name|id
operator|-
name|right
operator|.
name|id
return|;
block|}
block|}
block|}
decl_stmt|;
comment|/** @return the latest snapshot taken on the given inode. */
DECL|method|findLatestSnapshot (INode inode)
specifier|public
specifier|static
name|Snapshot
name|findLatestSnapshot
parameter_list|(
name|INode
name|inode
parameter_list|)
block|{
name|Snapshot
name|latest
init|=
literal|null
decl_stmt|;
for|for
control|(
init|;
name|inode
operator|!=
literal|null
condition|;
name|inode
operator|=
name|inode
operator|.
name|getParent
argument_list|()
control|)
block|{
if|if
condition|(
name|inode
operator|instanceof
name|INodeDirectorySnapshottable
condition|)
block|{
specifier|final
name|Snapshot
name|s
init|=
operator|(
operator|(
name|INodeDirectorySnapshottable
operator|)
name|inode
operator|)
operator|.
name|getLastSnapshot
argument_list|()
decl_stmt|;
if|if
condition|(
name|latest
operator|==
literal|null
operator|||
operator|(
name|s
operator|!=
literal|null
operator|&&
name|ID_COMPARATOR
operator|.
name|compare
argument_list|(
name|latest
argument_list|,
name|s
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
name|latest
operator|=
name|s
expr_stmt|;
block|}
block|}
block|}
return|return
name|latest
return|;
block|}
comment|/**     * Get the name of the given snapshot.     * @param s The given snapshot.    * @return The name of the snapshot, or an empty string if {@code s} is null    */
DECL|method|getSnapshotName (Snapshot s)
specifier|public
specifier|static
name|String
name|getSnapshotName
parameter_list|(
name|Snapshot
name|s
parameter_list|)
block|{
return|return
name|s
operator|!=
literal|null
condition|?
name|s
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
else|:
literal|""
return|;
block|}
comment|/** The root directory of the snapshot. */
DECL|class|Root
specifier|public
class|class
name|Root
extends|extends
name|INodeDirectory
block|{
DECL|method|Root (INodeDirectory other)
name|Root
parameter_list|(
name|INodeDirectory
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getChildrenList (Snapshot snapshot)
specifier|public
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|getParent
argument_list|()
operator|.
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChild (byte[] name, Snapshot snapshot)
specifier|public
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|getParent
argument_list|()
operator|.
name|getChild
argument_list|(
name|name
argument_list|,
name|snapshot
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFullPathName ()
specifier|public
name|String
name|getFullPathName
parameter_list|()
block|{
return|return
name|getParent
argument_list|()
operator|.
name|getFullPathName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|HdfsConstants
operator|.
name|DOT_SNAPSHOT_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|this
operator|.
name|getLocalName
argument_list|()
return|;
block|}
block|}
comment|/** Snapshot ID. */
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
comment|/** The root directory of the snapshot. */
DECL|field|root
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
DECL|method|Snapshot (int id, String name, INodeDirectorySnapshottable dir)
name|Snapshot
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|INodeDirectorySnapshottable
name|dir
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|dir
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|.
name|setLocalName
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|Snapshot (int id, INodeDirectory dir, INodeDirectorySnapshottable parent)
name|Snapshot
parameter_list|(
name|int
name|id
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|,
name|INodeDirectorySnapshottable
name|parent
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|root
operator|=
operator|new
name|Root
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/** @return the root directory of the snapshot. */
DECL|method|getRoot ()
specifier|public
name|Root
name|getRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (byte[] bytes)
specifier|public
name|int
name|compareTo
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|root
operator|.
name|compareTo
argument_list|(
name|bytes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object that)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|that
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|that
operator|==
literal|null
operator|||
operator|!
operator|(
name|that
operator|instanceof
name|Snapshot
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|id
operator|==
operator|(
operator|(
name|Snapshot
operator|)
name|that
operator|)
operator|.
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
operator|+
name|root
operator|.
name|getLocalName
argument_list|()
return|;
block|}
comment|/** Serialize the fields to out */
DECL|method|write (DataOutput out)
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// write root
name|FSImageSerialization
operator|.
name|writeINodeDirectory
argument_list|(
name|root
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

