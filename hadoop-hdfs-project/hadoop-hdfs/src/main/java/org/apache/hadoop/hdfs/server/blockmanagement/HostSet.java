begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * The HostSet allows efficient queries on matching wildcard addresses.  *<p>  * For InetSocketAddress A and B with the same host address,  * we define a partial order between A and B, A&lt;= B iff A.getPort() == B  * .getPort() || B.getPort() == 0.  */
end_comment

begin_class
DECL|class|HostSet
specifier|public
class|class
name|HostSet
implements|implements
name|Iterable
argument_list|<
name|InetSocketAddress
argument_list|>
block|{
comment|// Host -> lists of ports
DECL|field|addrs
specifier|private
specifier|final
name|Multimap
argument_list|<
name|InetAddress
argument_list|,
name|Integer
argument_list|>
name|addrs
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
comment|/**    * The function that checks whether there exists an entry foo in the set    * so that foo&lt;= addr.    */
DECL|method|matchedBy (InetSocketAddress addr)
name|boolean
name|matchedBy
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|)
block|{
name|Collection
argument_list|<
name|Integer
argument_list|>
name|ports
init|=
name|addrs
operator|.
name|get
argument_list|(
name|addr
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|addr
operator|.
name|getPort
argument_list|()
operator|==
literal|0
condition|?
operator|!
name|ports
operator|.
name|isEmpty
argument_list|()
else|:
name|ports
operator|.
name|contains
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * The function that checks whether there exists an entry foo in the set    * so that addr&lt;= foo.    */
DECL|method|match (InetSocketAddress addr)
name|boolean
name|match
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|)
block|{
name|int
name|port
init|=
name|addr
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Integer
argument_list|>
name|ports
init|=
name|addrs
operator|.
name|get
argument_list|(
name|addr
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|exactMatch
init|=
name|ports
operator|.
name|contains
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|boolean
name|genericMatch
init|=
name|ports
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|exactMatch
operator|||
name|genericMatch
return|;
block|}
DECL|method|isEmpty ()
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|addrs
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|addrs
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|add (InetSocketAddress addr)
name|void
name|add
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|addr
operator|.
name|isUnresolved
argument_list|()
argument_list|)
expr_stmt|;
name|addrs
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getAddress
argument_list|()
argument_list|,
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|InetSocketAddress
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|UnmodifiableIterator
argument_list|<
name|InetSocketAddress
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|InetAddress
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|it
init|=
name|addrs
operator|.
name|entries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InetSocketAddress
name|next
parameter_list|()
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|InetAddress
argument_list|,
name|Integer
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"HostSet("
argument_list|)
decl_stmt|;
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|appendTo
argument_list|(
name|sb
argument_list|,
name|Iterators
operator|.
name|transform
argument_list|(
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|InetSocketAddress
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
annotation|@
name|Nullable
name|InetSocketAddress
name|addr
parameter_list|)
block|{
assert|assert
name|addr
operator|!=
literal|null
assert|;
return|return
name|addr
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|":"
operator|+
name|addr
operator|.
name|getPort
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

