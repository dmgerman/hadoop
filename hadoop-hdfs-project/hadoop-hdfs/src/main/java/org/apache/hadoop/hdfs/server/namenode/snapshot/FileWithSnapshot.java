begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|BlocksMapUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Quota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotFSImageFormat
operator|.
name|ReferenceMap
import|;
end_import

begin_comment
comment|/**  * {@link INodeFile} with a link to the next element.  * The link of all the snapshot files and the original file form a circular  * linked list so that all elements are accessible by any of the elements.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|interface|FileWithSnapshot
specifier|public
interface|interface
name|FileWithSnapshot
block|{
comment|/**    * The difference of an {@link INodeFile} between two snapshots.    */
DECL|class|FileDiff
specifier|public
specifier|static
class|class
name|FileDiff
extends|extends
name|AbstractINodeDiff
argument_list|<
name|INodeFile
argument_list|,
name|FileDiff
argument_list|>
block|{
comment|/** The file size at snapshot creation time. */
DECL|field|fileSize
specifier|private
specifier|final
name|long
name|fileSize
decl_stmt|;
DECL|method|FileDiff (Snapshot snapshot, INodeFile file)
name|FileDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeFile
name|file
parameter_list|)
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fileSize
operator|=
name|file
operator|.
name|computeFileSize
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor used by FSImage loading */
DECL|method|FileDiff (Snapshot snapshot, INodeFile snapshotINode, FileDiff posteriorDiff, long fileSize)
name|FileDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeFile
name|snapshotINode
parameter_list|,
name|FileDiff
name|posteriorDiff
parameter_list|,
name|long
name|fileSize
parameter_list|)
block|{
name|super
argument_list|(
name|snapshot
argument_list|,
name|snapshotINode
argument_list|,
name|posteriorDiff
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSize
operator|=
name|fileSize
expr_stmt|;
block|}
comment|/** @return the file size in the snapshot. */
DECL|method|getFileSize ()
specifier|public
name|long
name|getFileSize
parameter_list|()
block|{
return|return
name|fileSize
return|;
block|}
DECL|method|updateQuotaAndCollectBlocks ( INodeFile currentINode, FileDiff removed, BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
specifier|private
specifier|static
name|Quota
operator|.
name|Counts
name|updateQuotaAndCollectBlocks
parameter_list|(
name|INodeFile
name|currentINode
parameter_list|,
name|FileDiff
name|removed
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|)
block|{
name|FileWithSnapshot
name|sFile
init|=
operator|(
name|FileWithSnapshot
operator|)
name|currentINode
decl_stmt|;
name|long
name|oldDiskspace
init|=
name|currentINode
operator|.
name|diskspaceConsumed
argument_list|()
decl_stmt|;
if|if
condition|(
name|removed
operator|.
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
name|short
name|replication
init|=
name|removed
operator|.
name|snapshotINode
operator|.
name|getFileReplication
argument_list|()
decl_stmt|;
if|if
condition|(
name|replication
operator|>
name|currentINode
operator|.
name|getBlockReplication
argument_list|()
condition|)
block|{
name|oldDiskspace
operator|=
name|oldDiskspace
operator|/
name|currentINode
operator|.
name|getBlockReplication
argument_list|()
operator|*
name|replication
expr_stmt|;
block|}
block|}
name|Util
operator|.
name|collectBlocksAndClear
argument_list|(
name|sFile
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
expr_stmt|;
name|long
name|dsDelta
init|=
name|oldDiskspace
operator|-
name|currentINode
operator|.
name|diskspaceConsumed
argument_list|()
decl_stmt|;
return|return
name|Quota
operator|.
name|Counts
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|dsDelta
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|combinePosteriorAndCollectBlocks (INodeFile currentINode, FileDiff posterior, BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
name|Quota
operator|.
name|Counts
name|combinePosteriorAndCollectBlocks
parameter_list|(
name|INodeFile
name|currentINode
parameter_list|,
name|FileDiff
name|posterior
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|)
block|{
return|return
name|updateQuotaAndCollectBlocks
argument_list|(
name|currentINode
argument_list|,
name|posterior
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" fileSize="
operator|+
name|fileSize
operator|+
literal|", rep="
operator|+
operator|(
name|snapshotINode
operator|==
literal|null
condition|?
literal|"?"
else|:
name|snapshotINode
operator|.
name|getFileReplication
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out, ReferenceMap referenceMap)
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|ReferenceMap
name|referenceMap
parameter_list|)
throws|throws
name|IOException
block|{
name|writeSnapshot
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|fileSize
argument_list|)
expr_stmt|;
comment|// write snapshotINode
if|if
condition|(
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FSImageSerialization
operator|.
name|writeINodeFile
argument_list|(
name|snapshotINode
argument_list|,
name|out
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|destroyDiffAndCollectBlocks (INodeFile currentINode, BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
name|Quota
operator|.
name|Counts
name|destroyDiffAndCollectBlocks
parameter_list|(
name|INodeFile
name|currentINode
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|)
block|{
return|return
name|updateQuotaAndCollectBlocks
argument_list|(
name|currentINode
argument_list|,
name|this
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
return|;
block|}
block|}
DECL|class|FileDiffFactory
specifier|static
class|class
name|FileDiffFactory
extends|extends
name|AbstractINodeDiff
operator|.
name|Factory
argument_list|<
name|INodeFile
argument_list|,
name|FileDiff
argument_list|>
block|{
DECL|field|INSTANCE
specifier|static
specifier|final
name|FileDiffFactory
name|INSTANCE
init|=
operator|new
name|FileDiffFactory
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|createDiff (Snapshot snapshot, INodeFile file)
name|FileDiff
name|createDiff
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INodeFile
name|file
parameter_list|)
block|{
return|return
operator|new
name|FileDiff
argument_list|(
name|snapshot
argument_list|,
name|file
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createSnapshotCopy (INodeFile currentINode)
name|INodeFile
name|createSnapshotCopy
parameter_list|(
name|INodeFile
name|currentINode
parameter_list|)
block|{
specifier|final
name|INodeFile
name|copy
init|=
operator|new
name|INodeFile
argument_list|(
name|currentINode
argument_list|)
decl_stmt|;
name|copy
operator|.
name|setBlocks
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
block|}
comment|/**    * A list of {@link FileDiff}.    */
DECL|class|FileDiffList
specifier|public
specifier|static
class|class
name|FileDiffList
extends|extends
name|AbstractINodeDiffList
argument_list|<
name|INodeFile
argument_list|,
name|FileDiff
argument_list|>
block|{   }
comment|/** @return the {@link INodeFile} view of this object. */
DECL|method|asINodeFile ()
specifier|public
name|INodeFile
name|asINodeFile
parameter_list|()
function_decl|;
comment|/** @return the file diff list. */
DECL|method|getDiffs ()
specifier|public
name|FileDiffList
name|getDiffs
parameter_list|()
function_decl|;
comment|/** Is the current file deleted? */
DECL|method|isCurrentFileDeleted ()
specifier|public
name|boolean
name|isCurrentFileDeleted
parameter_list|()
function_decl|;
comment|/** Utility methods for the classes which implement the interface. */
DECL|class|Util
specifier|public
specifier|static
class|class
name|Util
block|{
comment|/**       * @return block replication, which is the max file replication among      *         the file and the diff list.      */
DECL|method|getBlockReplication (final FileWithSnapshot file)
specifier|public
specifier|static
name|short
name|getBlockReplication
parameter_list|(
specifier|final
name|FileWithSnapshot
name|file
parameter_list|)
block|{
name|short
name|max
init|=
name|file
operator|.
name|isCurrentFileDeleted
argument_list|()
condition|?
literal|0
else|:
name|file
operator|.
name|asINodeFile
argument_list|()
operator|.
name|getFileReplication
argument_list|()
decl_stmt|;
for|for
control|(
name|FileDiff
name|d
range|:
name|file
operator|.
name|getDiffs
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|snapshotINode
operator|!=
literal|null
condition|)
block|{
specifier|final
name|short
name|replication
init|=
name|d
operator|.
name|snapshotINode
operator|.
name|getFileReplication
argument_list|()
decl_stmt|;
if|if
condition|(
name|replication
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|replication
expr_stmt|;
block|}
block|}
block|}
return|return
name|max
return|;
block|}
comment|/**      * If some blocks at the end of the block list no longer belongs to      * any inode, collect them and update the block list.      */
DECL|method|collectBlocksAndClear (final FileWithSnapshot file, final BlocksMapUpdateInfo info, final List<INode> removedINodes)
specifier|static
name|void
name|collectBlocksAndClear
parameter_list|(
specifier|final
name|FileWithSnapshot
name|file
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|info
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|)
block|{
comment|// check if everything is deleted.
if|if
condition|(
name|file
operator|.
name|isCurrentFileDeleted
argument_list|()
operator|&&
name|file
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|file
operator|.
name|asINodeFile
argument_list|()
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|info
argument_list|,
name|removedINodes
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// find max file size.
specifier|final
name|long
name|max
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isCurrentFileDeleted
argument_list|()
condition|)
block|{
specifier|final
name|FileDiff
name|last
init|=
name|file
operator|.
name|getDiffs
argument_list|()
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|max
operator|=
name|last
operator|==
literal|null
condition|?
literal|0
else|:
name|last
operator|.
name|fileSize
expr_stmt|;
block|}
else|else
block|{
name|max
operator|=
name|file
operator|.
name|asINodeFile
argument_list|()
operator|.
name|computeFileSize
argument_list|()
expr_stmt|;
block|}
name|collectBlocksBeyondMax
argument_list|(
name|file
argument_list|,
name|max
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|collectBlocksBeyondMax (final FileWithSnapshot file, final long max, final BlocksMapUpdateInfo collectedBlocks)
specifier|private
specifier|static
name|void
name|collectBlocksBeyondMax
parameter_list|(
specifier|final
name|FileWithSnapshot
name|file
parameter_list|,
specifier|final
name|long
name|max
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|)
block|{
specifier|final
name|BlockInfo
index|[]
name|oldBlocks
init|=
name|file
operator|.
name|asINodeFile
argument_list|()
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldBlocks
operator|!=
literal|null
condition|)
block|{
comment|//find the minimum n such that the size of the first n blocks> max
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|size
init|=
literal|0
init|;
name|n
argument_list|<
name|oldBlocks
operator|.
name|length
operator|&&
name|max
argument_list|>
name|size
condition|;
name|n
operator|++
control|)
block|{
name|size
operator|+=
name|oldBlocks
index|[
name|n
index|]
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
comment|// starting from block n, the data is beyond max.
if|if
condition|(
name|n
operator|<
name|oldBlocks
operator|.
name|length
condition|)
block|{
comment|// resize the array.
specifier|final
name|BlockInfo
index|[]
name|newBlocks
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
name|newBlocks
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|newBlocks
operator|=
operator|new
name|BlockInfo
index|[
name|n
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oldBlocks
argument_list|,
literal|0
argument_list|,
name|newBlocks
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
comment|// set new blocks
name|file
operator|.
name|asINodeFile
argument_list|()
operator|.
name|setBlocks
argument_list|(
name|newBlocks
argument_list|)
expr_stmt|;
comment|// collect the blocks beyond max.
if|if
condition|(
name|collectedBlocks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
init|;
name|n
operator|<
name|oldBlocks
operator|.
name|length
condition|;
name|n
operator|++
control|)
block|{
name|collectedBlocks
operator|.
name|addDeleteBlock
argument_list|(
name|oldBlocks
index|[
name|n
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_interface

end_unit

