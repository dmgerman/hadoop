begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|terminate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
operator|.
name|CachedBlocksList
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|BlockUCState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CachePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CachedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/**  * Scans the namesystem, scheduling blocks to be cached as appropriate.  *  * The CacheReplicationMonitor does a full scan when the NameNode first  * starts up, and at configurable intervals afterwards.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
DECL|class|CacheReplicationMonitor
specifier|public
class|class
name|CacheReplicationMonitor
extends|extends
name|Thread
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CacheReplicationMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|namesystem
specifier|private
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|cacheManager
specifier|private
specifier|final
name|CacheManager
name|cacheManager
decl_stmt|;
DECL|field|cachedBlocks
specifier|private
specifier|final
name|GSet
argument_list|<
name|CachedBlock
argument_list|,
name|CachedBlock
argument_list|>
name|cachedBlocks
decl_stmt|;
comment|/**    * Pseudorandom number source    */
DECL|field|random
specifier|private
specifier|static
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * The interval at which we scan the namesystem for caching changes.    */
DECL|field|intervalMs
specifier|private
specifier|final
name|long
name|intervalMs
decl_stmt|;
comment|/**    * The CacheReplicationMonitor (CRM) lock. Used to synchronize starting and    * waiting for rescan operations.    */
DECL|field|lock
specifier|private
specifier|final
name|ReentrantLock
name|lock
decl_stmt|;
comment|/**    * Notifies the scan thread that an immediate rescan is needed.    */
DECL|field|doRescan
specifier|private
specifier|final
name|Condition
name|doRescan
decl_stmt|;
comment|/**    * Notifies waiting threads that a rescan has finished.    */
DECL|field|scanFinished
specifier|private
specifier|final
name|Condition
name|scanFinished
decl_stmt|;
comment|/**    * The number of rescans completed. Used to wait for scans to finish.    * Protected by the CacheReplicationMonitor lock.    */
DECL|field|completedScanCount
specifier|private
name|long
name|completedScanCount
init|=
literal|0
decl_stmt|;
comment|/**    * The scan we're currently performing, or -1 if no scan is in progress.    * Protected by the CacheReplicationMonitor lock.    */
DECL|field|curScanCount
specifier|private
name|long
name|curScanCount
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * The number of rescans we need to complete.  Protected by the CRM lock.    */
DECL|field|neededScanCount
specifier|private
name|long
name|neededScanCount
init|=
literal|0
decl_stmt|;
comment|/**    * True if this monitor should terminate. Protected by the CRM lock.    */
DECL|field|shutdown
specifier|private
name|boolean
name|shutdown
init|=
literal|false
decl_stmt|;
comment|/**    * Mark status of the current scan.    */
DECL|field|mark
specifier|private
name|boolean
name|mark
init|=
literal|false
decl_stmt|;
comment|/**    * Cache directives found in the previous scan.    */
DECL|field|scannedDirectives
specifier|private
name|int
name|scannedDirectives
decl_stmt|;
comment|/**    * Blocks found in the previous scan.    */
DECL|field|scannedBlocks
specifier|private
name|long
name|scannedBlocks
decl_stmt|;
DECL|method|CacheReplicationMonitor (FSNamesystem namesystem, CacheManager cacheManager, long intervalMs, ReentrantLock lock)
specifier|public
name|CacheReplicationMonitor
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|long
name|intervalMs
parameter_list|,
name|ReentrantLock
name|lock
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|blockManager
operator|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|cacheManager
operator|=
name|cacheManager
expr_stmt|;
name|this
operator|.
name|cachedBlocks
operator|=
name|cacheManager
operator|.
name|getCachedBlocks
argument_list|()
expr_stmt|;
name|this
operator|.
name|intervalMs
operator|=
name|intervalMs
expr_stmt|;
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
name|this
operator|.
name|doRescan
operator|=
name|this
operator|.
name|lock
operator|.
name|newCondition
argument_list|()
expr_stmt|;
name|this
operator|.
name|scanFinished
operator|=
name|this
operator|.
name|lock
operator|.
name|newCondition
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|startTimeMs
init|=
literal|0
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"CacheReplicationMonitor("
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting CacheReplicationMonitor with interval "
operator|+
name|intervalMs
operator|+
literal|" milliseconds"
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|curTimeMs
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|shutdown
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down CacheReplicationMonitor"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|completedScanCount
operator|<
name|neededScanCount
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rescanning because of pending operations"
argument_list|)
expr_stmt|;
break|break;
block|}
name|long
name|delta
init|=
operator|(
name|startTimeMs
operator|+
name|intervalMs
operator|)
operator|-
name|curTimeMs
decl_stmt|;
if|if
condition|(
name|delta
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rescanning after {} milliseconds"
argument_list|,
operator|(
name|curTimeMs
operator|-
name|startTimeMs
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|doRescan
operator|.
name|await
argument_list|(
name|delta
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|curTimeMs
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|startTimeMs
operator|=
name|curTimeMs
expr_stmt|;
name|mark
operator|=
operator|!
name|mark
expr_stmt|;
name|rescan
argument_list|()
expr_stmt|;
name|curTimeMs
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
comment|// Update synchronization-related variables.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|completedScanCount
operator|=
name|curScanCount
expr_stmt|;
name|curScanCount
operator|=
operator|-
literal|1
expr_stmt|;
name|scanFinished
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scanned {} directive(s) and {} block(s) in {} millisecond(s)."
argument_list|,
name|scannedDirectives
argument_list|,
name|scannedBlocks
argument_list|,
operator|(
name|curTimeMs
operator|-
name|startTimeMs
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down CacheReplicationMonitor."
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Thread exiting"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Waits for a rescan to complete. This doesn't guarantee consistency with    * pending operations, only relative recency, since it will not force a new    * rescan if a rescan is already underway.    *<p>    * Note that this call will release the FSN lock, so operations before and    * after are not atomic.    */
DECL|method|waitForRescanIfNeeded ()
specifier|public
name|void
name|waitForRescanIfNeeded
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
argument_list|,
literal|"Must not hold the FSN write lock when waiting for a rescan."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|,
literal|"Must hold the CRM lock when waiting for a rescan."
argument_list|)
expr_stmt|;
if|if
condition|(
name|neededScanCount
operator|<=
name|completedScanCount
condition|)
block|{
return|return;
block|}
comment|// If no scan is already ongoing, mark the CRM as dirty and kick
if|if
condition|(
name|curScanCount
operator|<
literal|0
condition|)
block|{
name|doRescan
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
comment|// Wait until the scan finishes and the count advances
while|while
condition|(
operator|(
operator|!
name|shutdown
operator|)
operator|&&
operator|(
name|completedScanCount
operator|<
name|neededScanCount
operator|)
condition|)
block|{
try|try
block|{
name|scanFinished
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for CacheReplicationMonitor"
operator|+
literal|" rescan"
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Indicates to the CacheReplicationMonitor that there have been CacheManager    * changes that require a rescan.    */
DECL|method|setNeedsRescan ()
specifier|public
name|void
name|setNeedsRescan
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|lock
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|,
literal|"Must hold the CRM lock when setting the needsRescan bit."
argument_list|)
expr_stmt|;
if|if
condition|(
name|curScanCount
operator|>=
literal|0
condition|)
block|{
comment|// If there is a scan in progress, we need to wait for the scan after
comment|// that.
name|neededScanCount
operator|=
name|curScanCount
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// If there is no scan in progress, we need to wait for the next scan.
name|neededScanCount
operator|=
name|completedScanCount
operator|+
literal|1
expr_stmt|;
block|}
block|}
comment|/**    * Shut down the monitor thread.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|shutdown
condition|)
return|return;
comment|// Since we hold both the FSN write lock and the CRM lock here,
comment|// we know that the CRM thread cannot be currently modifying
comment|// the cache manager state while we're closing it.
comment|// Since the CRM thread checks the value of 'shutdown' after waiting
comment|// for a lock, we know that the thread will not modify the cache
comment|// manager state after this point.
name|shutdown
operator|=
literal|true
expr_stmt|;
name|doRescan
operator|.
name|signalAll
argument_list|()
expr_stmt|;
name|scanFinished
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|rescan ()
specifier|private
name|void
name|rescan
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|scannedDirectives
operator|=
literal|0
expr_stmt|;
name|scannedBlocks
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|shutdown
condition|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"CacheReplicationMonitor was "
operator|+
literal|"shut down."
argument_list|)
throw|;
block|}
name|curScanCount
operator|=
name|completedScanCount
operator|+
literal|1
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|resetStatistics
argument_list|()
expr_stmt|;
name|rescanCacheDirectives
argument_list|()
expr_stmt|;
name|rescanCachedBlockMap
argument_list|()
expr_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|resetLastCachingDirectiveSentTime
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|resetStatistics ()
specifier|private
name|void
name|resetStatistics
parameter_list|()
block|{
for|for
control|(
name|CachePool
name|pool
range|:
name|cacheManager
operator|.
name|getCachePools
argument_list|()
control|)
block|{
name|pool
operator|.
name|resetStatistics
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|CacheDirective
name|directive
range|:
name|cacheManager
operator|.
name|getCacheDirectives
argument_list|()
control|)
block|{
name|directive
operator|.
name|resetStatistics
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Scan all CacheDirectives.  Use the information to figure out    * what cache replication factor each block should have.    */
DECL|method|rescanCacheDirectives ()
specifier|private
name|void
name|rescanCacheDirectives
parameter_list|()
block|{
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
specifier|final
name|long
name|now
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|CacheDirective
name|directive
range|:
name|cacheManager
operator|.
name|getCacheDirectives
argument_list|()
control|)
block|{
name|scannedDirectives
operator|++
expr_stmt|;
comment|// Skip processing this entry if it has expired
if|if
condition|(
name|directive
operator|.
name|getExpiryTime
argument_list|()
operator|>
literal|0
operator|&&
name|directive
operator|.
name|getExpiryTime
argument_list|()
operator|<=
name|now
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Directive {}: the directive expired at {} (now = {})"
argument_list|,
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|directive
operator|.
name|getExpiryTime
argument_list|()
argument_list|,
name|now
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|path
init|=
name|directive
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|INode
name|node
decl_stmt|;
try|try
block|{
name|node
operator|=
name|fsDir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnresolvedLinkException
name|e
parameter_list|)
block|{
comment|// We don't cache through symlinks
name|LOG
operator|.
name|debug
argument_list|(
literal|"Directive {}: got UnresolvedLinkException while resolving "
operator|+
literal|"path {}"
argument_list|,
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Directive {}: No inode found at {}"
argument_list|,
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|INodeDirectory
name|dir
init|=
name|node
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|dir
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|rescanFile
argument_list|(
name|directive
argument_list|,
name|child
operator|.
name|asFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|rescanFile
argument_list|(
name|directive
argument_list|,
name|node
operator|.
name|asFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Directive {}: ignoring non-directive, non-file inode {} "
argument_list|,
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Apply a CacheDirective to a file.    *     * @param directive The CacheDirective to apply.    * @param file The file.    */
DECL|method|rescanFile (CacheDirective directive, INodeFile file)
specifier|private
name|void
name|rescanFile
parameter_list|(
name|CacheDirective
name|directive
parameter_list|,
name|INodeFile
name|file
parameter_list|)
block|{
name|BlockInfo
index|[]
name|blockInfos
init|=
name|file
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
comment|// Increment the "needed" statistics
name|directive
operator|.
name|addFilesNeeded
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// We don't cache UC blocks, don't add them to the total here
name|long
name|neededTotal
init|=
name|file
operator|.
name|computeFileSizeNotIncludingLastUcBlock
argument_list|()
operator|*
name|directive
operator|.
name|getReplication
argument_list|()
decl_stmt|;
name|directive
operator|.
name|addBytesNeeded
argument_list|(
name|neededTotal
argument_list|)
expr_stmt|;
comment|// The pool's bytesNeeded is incremented as we scan. If the demand
comment|// thus far plus the demand of this file would exceed the pool's limit,
comment|// do not cache this file.
name|CachePool
name|pool
init|=
name|directive
operator|.
name|getPool
argument_list|()
decl_stmt|;
if|if
condition|(
name|pool
operator|.
name|getBytesNeeded
argument_list|()
operator|>
name|pool
operator|.
name|getLimit
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Directive {}: not scanning file {} because "
operator|+
literal|"bytesNeeded for pool {} is {}, but the pool's limit is {}"
argument_list|,
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|file
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|pool
operator|.
name|getPoolName
argument_list|()
argument_list|,
name|pool
operator|.
name|getBytesNeeded
argument_list|()
argument_list|,
name|pool
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|cachedTotal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockInfo
name|blockInfo
range|:
name|blockInfos
control|)
block|{
if|if
condition|(
operator|!
name|blockInfo
operator|.
name|getBlockUCState
argument_list|()
operator|.
name|equals
argument_list|(
name|BlockUCState
operator|.
name|COMPLETE
argument_list|)
condition|)
block|{
comment|// We don't try to cache blocks that are under construction.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Directive {}: can't cache block {} because it is in state "
operator|+
literal|"{}, not COMPLETE."
argument_list|,
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|blockInfo
argument_list|,
name|blockInfo
operator|.
name|getBlockUCState
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|blockInfo
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|CachedBlock
name|ncblock
init|=
operator|new
name|CachedBlock
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|directive
operator|.
name|getReplication
argument_list|()
argument_list|,
name|mark
argument_list|)
decl_stmt|;
name|CachedBlock
name|ocblock
init|=
name|cachedBlocks
operator|.
name|get
argument_list|(
name|ncblock
argument_list|)
decl_stmt|;
if|if
condition|(
name|ocblock
operator|==
literal|null
condition|)
block|{
name|cachedBlocks
operator|.
name|put
argument_list|(
name|ncblock
argument_list|)
expr_stmt|;
name|ocblock
operator|=
name|ncblock
expr_stmt|;
block|}
else|else
block|{
comment|// Update bytesUsed using the current replication levels.
comment|// Assumptions: we assume that all the blocks are the same length
comment|// on each datanode.  We can assume this because we're only caching
comment|// blocks in state COMPLETE.
comment|// Note that if two directives are caching the same block(s), they will
comment|// both get them added to their bytesCached.
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|cachedOn
init|=
name|ocblock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|CACHED
argument_list|)
decl_stmt|;
name|long
name|cachedByBlock
init|=
name|Math
operator|.
name|min
argument_list|(
name|cachedOn
operator|.
name|size
argument_list|()
argument_list|,
name|directive
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|*
name|blockInfo
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
name|cachedTotal
operator|+=
name|cachedByBlock
expr_stmt|;
if|if
condition|(
operator|(
name|mark
operator|!=
name|ocblock
operator|.
name|getMark
argument_list|()
operator|)
operator|||
operator|(
name|ocblock
operator|.
name|getReplication
argument_list|()
operator|<
name|directive
operator|.
name|getReplication
argument_list|()
operator|)
condition|)
block|{
comment|//
comment|// Overwrite the block's replication and mark in two cases:
comment|//
comment|// 1. If the mark on the CachedBlock is different from the mark for
comment|// this scan, that means the block hasn't been updated during this
comment|// scan, and we should overwrite whatever is there, since it is no
comment|// longer valid.
comment|//
comment|// 2. If the replication in the CachedBlock is less than what the
comment|// directive asks for, we want to increase the block's replication
comment|// field to what the directive asks for.
comment|//
name|ocblock
operator|.
name|setReplicationAndMark
argument_list|(
name|directive
operator|.
name|getReplication
argument_list|()
argument_list|,
name|mark
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Directive {}: setting replication for block {} to {}"
argument_list|,
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|blockInfo
argument_list|,
name|ocblock
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Increment the "cached" statistics
name|directive
operator|.
name|addBytesCached
argument_list|(
name|cachedTotal
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedTotal
operator|==
name|neededTotal
condition|)
block|{
name|directive
operator|.
name|addFilesCached
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Directive {}: caching {}: {}/{} bytes"
argument_list|,
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|file
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|cachedTotal
argument_list|,
name|neededTotal
argument_list|)
expr_stmt|;
block|}
DECL|method|findReasonForNotCaching (CachedBlock cblock, BlockInfo blockInfo)
specifier|private
name|String
name|findReasonForNotCaching
parameter_list|(
name|CachedBlock
name|cblock
parameter_list|,
name|BlockInfo
name|blockInfo
parameter_list|)
block|{
if|if
condition|(
name|blockInfo
operator|==
literal|null
condition|)
block|{
comment|// Somehow, a cache report with the block arrived, but the block
comment|// reports from the DataNode haven't (yet?) described such a block.
comment|// Alternately, the NameNode might have invalidated the block, but the
comment|// DataNode hasn't caught up.  In any case, we want to tell the DN
comment|// to uncache this.
return|return
literal|"not tracked by the BlockManager"
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|blockInfo
operator|.
name|isComplete
argument_list|()
condition|)
block|{
comment|// When a cached block changes state from complete to some other state
comment|// on the DataNode (perhaps because of append), it will begin the
comment|// uncaching process.  However, the uncaching process is not
comment|// instantaneous, especially if clients have pinned the block.  So
comment|// there may be a period of time when incomplete blocks remain cached
comment|// on the DataNodes.
return|return
literal|"not complete"
return|;
block|}
elseif|else
if|if
condition|(
name|cblock
operator|.
name|getReplication
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Since 0 is not a valid value for a cache directive's replication
comment|// field, seeing a replication of 0 on a CacheBlock means that it
comment|// has never been reached by any sweep.
return|return
literal|"not needed by any directives"
return|;
block|}
elseif|else
if|if
condition|(
name|cblock
operator|.
name|getMark
argument_list|()
operator|!=
name|mark
condition|)
block|{
comment|// Although the block was needed in the past, we didn't reach it during
comment|// the current sweep.  Therefore, it doesn't need to be cached any more.
comment|// Need to set the replication to 0 so it doesn't flip back to cached
comment|// when the mark flips on the next scan
name|cblock
operator|.
name|setReplicationAndMark
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
name|mark
argument_list|)
expr_stmt|;
return|return
literal|"no longer needed by any directives"
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Scan through the cached block map.    * Any blocks which are under-replicated should be assigned new Datanodes.    * Blocks that are over-replicated should be removed from Datanodes.    */
DECL|method|rescanCachedBlockMap ()
specifier|private
name|void
name|rescanCachedBlockMap
parameter_list|()
block|{
comment|// Remove pendingCached blocks that will make DN out-of-capacity.
name|Set
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|datanodes
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|datanodes
control|)
block|{
name|long
name|remaining
init|=
name|dn
operator|.
name|getCacheRemaining
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|it
init|=
name|dn
operator|.
name|getPendingCached
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CachedBlock
name|cblock
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockInfo
name|blockInfo
init|=
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
operator|new
name|Block
argument_list|(
name|cblock
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockInfo
operator|==
literal|null
condition|)
block|{
comment|// Cannot find this block on the NameNode, skip this block from
comment|// capacity calculation. Later logic will handle this block.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block {}: cannot be found in block manager and hence"
operator|+
literal|" skipped from calculation for node {}."
argument_list|,
name|cblock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|blockInfo
operator|.
name|getNumBytes
argument_list|()
operator|>
name|remaining
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block {}: removing from PENDING_CACHED for node {} "
operator|+
literal|"because it cannot fit in remaining cache size {}."
argument_list|,
name|cblock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|remaining
operator|-=
name|blockInfo
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|cbIter
init|=
name|cachedBlocks
operator|.
name|iterator
argument_list|()
init|;
name|cbIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|scannedBlocks
operator|++
expr_stmt|;
name|CachedBlock
name|cblock
init|=
name|cbIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pendingCached
init|=
name|cblock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|PENDING_CACHED
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|cached
init|=
name|cblock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|CACHED
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pendingUncached
init|=
name|cblock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|PENDING_UNCACHED
argument_list|)
decl_stmt|;
comment|// Remove nodes from PENDING_UNCACHED if they were actually uncached.
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|pendingUncached
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatanodeDescriptor
name|datanode
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cblock
operator|.
name|isInList
argument_list|(
name|datanode
operator|.
name|getCached
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Block {}: removing from PENDING_UNCACHED for node {} "
operator|+
literal|"because the DataNode uncached it."
argument_list|,
name|cblock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|datanode
operator|.
name|getPendingUncached
argument_list|()
operator|.
name|remove
argument_list|(
name|cblock
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|BlockInfo
name|blockInfo
init|=
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
operator|new
name|Block
argument_list|(
name|cblock
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|reason
init|=
name|findReasonForNotCaching
argument_list|(
name|cblock
argument_list|,
name|blockInfo
argument_list|)
decl_stmt|;
name|int
name|neededCached
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Block {}: can't cache block because it is {}"
argument_list|,
name|cblock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|neededCached
operator|=
name|cblock
operator|.
name|getReplication
argument_list|()
expr_stmt|;
block|}
name|int
name|numCached
init|=
name|cached
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numCached
operator|>=
name|neededCached
condition|)
block|{
comment|// If we have enough replicas, drop all pending cached.
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|pendingCached
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatanodeDescriptor
name|datanode
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|datanode
operator|.
name|getPendingCached
argument_list|()
operator|.
name|remove
argument_list|(
name|cblock
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Block {}: removing from PENDING_CACHED for node {} "
operator|+
literal|"because we already have {} cached replicas and we only"
operator|+
literal|" need {}"
argument_list|,
name|cblock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|numCached
argument_list|,
name|neededCached
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numCached
operator|<
name|neededCached
condition|)
block|{
comment|// If we don't have enough replicas, drop all pending uncached.
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|pendingUncached
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatanodeDescriptor
name|datanode
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|datanode
operator|.
name|getPendingUncached
argument_list|()
operator|.
name|remove
argument_list|(
name|cblock
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Block {}: removing from PENDING_UNCACHED for node {} "
operator|+
literal|"because we only have {} cached replicas and we need "
operator|+
literal|"{}"
argument_list|,
name|cblock
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|numCached
argument_list|,
name|neededCached
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|neededUncached
init|=
name|numCached
operator|-
operator|(
name|pendingUncached
operator|.
name|size
argument_list|()
operator|+
name|neededCached
operator|)
decl_stmt|;
if|if
condition|(
name|neededUncached
operator|>
literal|0
condition|)
block|{
name|addNewPendingUncached
argument_list|(
name|neededUncached
argument_list|,
name|cblock
argument_list|,
name|cached
argument_list|,
name|pendingUncached
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|additionalCachedNeeded
init|=
name|neededCached
operator|-
operator|(
name|numCached
operator|+
name|pendingCached
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|additionalCachedNeeded
operator|>
literal|0
condition|)
block|{
name|addNewPendingCached
argument_list|(
name|additionalCachedNeeded
argument_list|,
name|cblock
argument_list|,
name|cached
argument_list|,
name|pendingCached
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|neededCached
operator|==
literal|0
operator|)
operator|&&
name|pendingUncached
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pendingCached
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we have nothing more to do with this block.
name|LOG
operator|.
name|trace
argument_list|(
literal|"Block {}: removing from cachedBlocks, since neededCached "
operator|+
literal|"== 0, and pendingUncached and pendingCached are empty."
argument_list|,
name|cblock
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
name|cbIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Add new entries to the PendingUncached list.    *    * @param neededUncached   The number of replicas that need to be uncached.    * @param cachedBlock      The block which needs to be uncached.    * @param cached           A list of DataNodes currently caching the block.    * @param pendingUncached  A list of DataNodes that will soon uncache the    *                         block.    */
DECL|method|addNewPendingUncached (int neededUncached, CachedBlock cachedBlock, List<DatanodeDescriptor> cached, List<DatanodeDescriptor> pendingUncached)
specifier|private
name|void
name|addNewPendingUncached
parameter_list|(
name|int
name|neededUncached
parameter_list|,
name|CachedBlock
name|cachedBlock
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|cached
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pendingUncached
parameter_list|)
block|{
comment|// Figure out which replicas can be uncached.
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|possibilities
init|=
operator|new
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|datanode
range|:
name|cached
control|)
block|{
if|if
condition|(
operator|!
name|pendingUncached
operator|.
name|contains
argument_list|(
name|datanode
argument_list|)
condition|)
block|{
name|possibilities
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|neededUncached
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|possibilities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Logic error: we're trying to uncache more replicas than "
operator|+
literal|"actually exist for "
operator|+
name|cachedBlock
argument_list|)
expr_stmt|;
return|return;
block|}
name|DatanodeDescriptor
name|datanode
init|=
name|possibilities
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|possibilities
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|pendingUncached
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
name|boolean
name|added
init|=
name|datanode
operator|.
name|getPendingUncached
argument_list|()
operator|.
name|add
argument_list|(
name|cachedBlock
argument_list|)
decl_stmt|;
assert|assert
name|added
assert|;
name|neededUncached
operator|--
expr_stmt|;
block|}
block|}
comment|/**    * Add new entries to the PendingCached list.    *    * @param neededCached     The number of replicas that need to be cached.    * @param cachedBlock      The block which needs to be cached.    * @param cached           A list of DataNodes currently caching the block.    * @param pendingCached    A list of DataNodes that will soon cache the    *                         block.    */
DECL|method|addNewPendingCached (final int neededCached, CachedBlock cachedBlock, List<DatanodeDescriptor> cached, List<DatanodeDescriptor> pendingCached)
specifier|private
name|void
name|addNewPendingCached
parameter_list|(
specifier|final
name|int
name|neededCached
parameter_list|,
name|CachedBlock
name|cachedBlock
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|cached
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pendingCached
parameter_list|)
block|{
comment|// To figure out which replicas can be cached, we consult the
comment|// blocksMap.  We don't want to try to cache a corrupt replica, though.
name|BlockInfo
name|blockInfo
init|=
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
operator|new
name|Block
argument_list|(
name|cachedBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block {}: can't add new cached replicas,"
operator|+
literal|" because there is no record of this block "
operator|+
literal|"on the NameNode."
argument_list|,
name|cachedBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|blockInfo
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block {}: can't cache this block, because it is not yet"
operator|+
literal|" complete."
argument_list|,
name|cachedBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Filter the list of replicas to only the valid targets
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|possibilities
init|=
operator|new
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numReplicas
init|=
name|blockInfo
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|corrupt
init|=
name|blockManager
operator|.
name|getCorruptReplicas
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
name|int
name|outOfCapacity
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReplicas
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeDescriptor
name|datanode
init|=
name|blockInfo
operator|.
name|getDatanode
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanode
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|datanode
operator|.
name|isDecommissioned
argument_list|()
operator|||
name|datanode
operator|.
name|isDecommissionInProgress
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|corrupt
operator|!=
literal|null
operator|&&
name|corrupt
operator|.
name|contains
argument_list|(
name|datanode
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pendingCached
operator|.
name|contains
argument_list|(
name|datanode
argument_list|)
operator|||
name|cached
operator|.
name|contains
argument_list|(
name|datanode
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|pendingBytes
init|=
literal|0
decl_stmt|;
comment|// Subtract pending cached blocks from effective capacity
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|it
init|=
name|datanode
operator|.
name|getPendingCached
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|cBlock
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockInfo
name|info
init|=
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
operator|new
name|Block
argument_list|(
name|cBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|pendingBytes
operator|-=
name|info
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
block|}
name|it
operator|=
name|datanode
operator|.
name|getPendingUncached
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
comment|// Add pending uncached blocks from effective capacity
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CachedBlock
name|cBlock
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockInfo
name|info
init|=
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
operator|new
name|Block
argument_list|(
name|cBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|pendingBytes
operator|+=
name|info
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|pendingCapacity
init|=
name|pendingBytes
operator|+
name|datanode
operator|.
name|getCacheRemaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|pendingCapacity
operator|<
name|blockInfo
operator|.
name|getNumBytes
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Block {}: DataNode {} is not a valid possibility "
operator|+
literal|"because the block has size {}, but the DataNode only has {} "
operator|+
literal|"bytes of cache remaining ({} pending bytes, {} already cached.)"
argument_list|,
name|blockInfo
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|blockInfo
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|pendingCapacity
argument_list|,
name|pendingBytes
argument_list|,
name|datanode
operator|.
name|getCacheRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|outOfCapacity
operator|++
expr_stmt|;
continue|continue;
block|}
name|possibilities
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chosen
init|=
name|chooseDatanodesForCaching
argument_list|(
name|possibilities
argument_list|,
name|neededCached
argument_list|,
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getStaleInterval
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|datanode
range|:
name|chosen
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Block {}: added to PENDING_CACHED on DataNode {}"
argument_list|,
name|blockInfo
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|datanode
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
name|pendingCached
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
name|boolean
name|added
init|=
name|datanode
operator|.
name|getPendingCached
argument_list|()
operator|.
name|add
argument_list|(
name|cachedBlock
argument_list|)
decl_stmt|;
assert|assert
name|added
assert|;
block|}
comment|// We were unable to satisfy the requested replication factor
if|if
condition|(
name|neededCached
operator|>
name|chosen
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block {}: we only have {} of {} cached replicas."
operator|+
literal|" {} DataNodes have insufficient cache capacity."
argument_list|,
name|blockInfo
operator|.
name|getBlockId
argument_list|()
argument_list|,
operator|(
name|cachedBlock
operator|.
name|getReplication
argument_list|()
operator|-
name|neededCached
operator|+
name|chosen
operator|.
name|size
argument_list|()
operator|)
argument_list|,
name|cachedBlock
operator|.
name|getReplication
argument_list|()
argument_list|,
name|outOfCapacity
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Chooses datanode locations for caching from a list of valid possibilities.    * Non-stale nodes are chosen before stale nodes.    *     * @param possibilities List of candidate datanodes    * @param neededCached Number of replicas needed    * @param staleInterval Age of a stale datanode    * @return A list of chosen datanodes    */
DECL|method|chooseDatanodesForCaching ( final List<DatanodeDescriptor> possibilities, final int neededCached, final long staleInterval)
specifier|private
specifier|static
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chooseDatanodesForCaching
parameter_list|(
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|possibilities
parameter_list|,
specifier|final
name|int
name|neededCached
parameter_list|,
specifier|final
name|long
name|staleInterval
parameter_list|)
block|{
comment|// Make a copy that we can modify
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|targets
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|(
name|possibilities
argument_list|)
decl_stmt|;
comment|// Selected targets
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chosen
init|=
operator|new
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
comment|// Filter out stale datanodes
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|stale
init|=
operator|new
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|it
init|=
name|targets
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeDescriptor
name|d
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|isStale
argument_list|(
name|staleInterval
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|stale
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Select targets
while|while
condition|(
name|chosen
operator|.
name|size
argument_list|()
operator|<
name|neededCached
condition|)
block|{
comment|// Try to use stale nodes if we're out of non-stale nodes, else we're done
if|if
condition|(
name|targets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|stale
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|targets
operator|=
name|stale
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// Select a random target
name|DatanodeDescriptor
name|target
init|=
name|chooseRandomDatanodeByRemainingCapacity
argument_list|(
name|targets
argument_list|)
decl_stmt|;
name|chosen
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|targets
operator|.
name|remove
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
return|return
name|chosen
return|;
block|}
comment|/**    * Choose a single datanode from the provided list of possible    * targets, weighted by the percentage of free space remaining on the node.    *     * @return The chosen datanode    */
DECL|method|chooseRandomDatanodeByRemainingCapacity ( final List<DatanodeDescriptor> targets)
specifier|private
specifier|static
name|DatanodeDescriptor
name|chooseRandomDatanodeByRemainingCapacity
parameter_list|(
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|targets
parameter_list|)
block|{
comment|// Use a weighted probability to choose the target datanode
name|float
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|d
range|:
name|targets
control|)
block|{
name|total
operator|+=
name|d
operator|.
name|getCacheRemainingPercent
argument_list|()
expr_stmt|;
block|}
comment|// Give each datanode a portion of keyspace equal to its relative weight
comment|// [0, w1) selects d1, [w1, w2) selects d2, etc.
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|DatanodeDescriptor
argument_list|>
name|lottery
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|d
range|:
name|targets
control|)
block|{
comment|// Since we're using floats, be paranoid about negative values
name|int
name|weight
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
name|d
operator|.
name|getCacheRemainingPercent
argument_list|()
operator|/
name|total
operator|)
operator|*
literal|1000000
argument_list|)
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|weight
expr_stmt|;
name|lottery
operator|.
name|put
argument_list|(
name|offset
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
comment|// Choose a number from [0, offset), which is the total amount of weight,
comment|// to select the winner
name|DatanodeDescriptor
name|winner
init|=
name|lottery
operator|.
name|higherEntry
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|offset
argument_list|)
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|winner
return|;
block|}
block|}
end_class

end_unit

