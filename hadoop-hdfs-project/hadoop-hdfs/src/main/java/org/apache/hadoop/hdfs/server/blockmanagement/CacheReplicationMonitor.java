begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|terminate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
operator|.
name|CachedBlocksList
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|BlockUCState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CachePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CachedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Scans the namesystem, scheduling blocks to be cached as appropriate.  *  * The CacheReplicationMonitor does a full scan when the NameNode first  * starts up, and at configurable intervals afterwards.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
DECL|class|CacheReplicationMonitor
specifier|public
class|class
name|CacheReplicationMonitor
extends|extends
name|Thread
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CacheReplicationMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|namesystem
specifier|private
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|cacheManager
specifier|private
specifier|final
name|CacheManager
name|cacheManager
decl_stmt|;
DECL|field|cachedBlocks
specifier|private
specifier|final
name|GSet
argument_list|<
name|CachedBlock
argument_list|,
name|CachedBlock
argument_list|>
name|cachedBlocks
decl_stmt|;
comment|/**    * Pseudorandom number source    */
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * The interval at which we scan the namesystem for caching changes.    */
DECL|field|intervalMs
specifier|private
specifier|final
name|long
name|intervalMs
decl_stmt|;
comment|/**    * The CacheReplicationMonitor (CRM) lock. Used to synchronize starting and    * waiting for rescan operations.    */
DECL|field|lock
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|/**    * Notifies the scan thread that an immediate rescan is needed.    */
DECL|field|doRescan
specifier|private
specifier|final
name|Condition
name|doRescan
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
comment|/**    * Notifies waiting threads that a rescan has finished.    */
DECL|field|scanFinished
specifier|private
specifier|final
name|Condition
name|scanFinished
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
comment|/**    * Whether there are pending CacheManager operations that necessitate a    * CacheReplicationMonitor rescan. Protected by the CRM lock.    */
DECL|field|needsRescan
specifier|private
name|boolean
name|needsRescan
init|=
literal|true
decl_stmt|;
comment|/**    * Whether we are currently doing a rescan. Protected by the CRM lock.    */
DECL|field|isScanning
specifier|private
name|boolean
name|isScanning
init|=
literal|false
decl_stmt|;
comment|/**    * The number of rescans completed. Used to wait for scans to finish.    * Protected by the CacheReplicationMonitor lock.    */
DECL|field|scanCount
specifier|private
name|long
name|scanCount
init|=
literal|0
decl_stmt|;
comment|/**    * True if this monitor should terminate. Protected by the CRM lock.    */
DECL|field|shutdown
specifier|private
name|boolean
name|shutdown
init|=
literal|false
decl_stmt|;
comment|/**    * The monotonic time at which the current scan started.    */
DECL|field|startTimeMs
specifier|private
name|long
name|startTimeMs
decl_stmt|;
comment|/**    * Mark status of the current scan.    */
DECL|field|mark
specifier|private
name|boolean
name|mark
init|=
literal|false
decl_stmt|;
comment|/**    * Cache directives found in the previous scan.    */
DECL|field|scannedDirectives
specifier|private
name|int
name|scannedDirectives
decl_stmt|;
comment|/**    * Blocks found in the previous scan.    */
DECL|field|scannedBlocks
specifier|private
name|long
name|scannedBlocks
decl_stmt|;
DECL|method|CacheReplicationMonitor (FSNamesystem namesystem, CacheManager cacheManager, long intervalMs)
specifier|public
name|CacheReplicationMonitor
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|,
name|long
name|intervalMs
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|blockManager
operator|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|cacheManager
operator|=
name|cacheManager
expr_stmt|;
name|this
operator|.
name|cachedBlocks
operator|=
name|cacheManager
operator|.
name|getCachedBlocks
argument_list|()
expr_stmt|;
name|this
operator|.
name|intervalMs
operator|=
name|intervalMs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|startTimeMs
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting CacheReplicationMonitor with interval "
operator|+
name|intervalMs
operator|+
literal|" milliseconds"
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|curTimeMs
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Not all of the variables accessed here need the CRM lock, but take
comment|// it anyway for simplicity
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|shutdown
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down CacheReplicationMonitor"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|needsRescan
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rescanning because of pending operations"
argument_list|)
expr_stmt|;
break|break;
block|}
name|long
name|delta
init|=
operator|(
name|startTimeMs
operator|+
name|intervalMs
operator|)
operator|-
name|curTimeMs
decl_stmt|;
if|if
condition|(
name|delta
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rescanning after "
operator|+
operator|(
name|curTimeMs
operator|-
name|startTimeMs
operator|)
operator|+
literal|" milliseconds"
argument_list|)
expr_stmt|;
break|break;
block|}
name|doRescan
operator|.
name|await
argument_list|(
name|delta
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|curTimeMs
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Mark scan as started, clear needsRescan
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|isScanning
operator|=
literal|true
expr_stmt|;
name|needsRescan
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|startTimeMs
operator|=
name|curTimeMs
expr_stmt|;
name|mark
operator|=
operator|!
name|mark
expr_stmt|;
name|rescan
argument_list|()
expr_stmt|;
name|curTimeMs
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
comment|// Retake the CRM lock to update synchronization-related variables
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|isScanning
operator|=
literal|false
expr_stmt|;
name|scanCount
operator|++
expr_stmt|;
name|scanFinished
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanned "
operator|+
name|scannedDirectives
operator|+
literal|" directive(s) and "
operator|+
name|scannedBlocks
operator|+
literal|" block(s) in "
operator|+
operator|(
name|curTimeMs
operator|-
name|startTimeMs
operator|)
operator|+
literal|" "
operator|+
literal|"millisecond(s)."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Thread exiting"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Similar to {@link CacheReplicationMonitor#waitForRescan()}, except it only    * waits if there are pending operations that necessitate a rescan as    * indicated by {@link #setNeedsRescan()}.    *<p>    * Note that this call may release the FSN lock, so operations before and    * after are not necessarily atomic.    */
DECL|method|waitForRescanIfNeeded ()
specifier|public
name|void
name|waitForRescanIfNeeded
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|needsRescan
condition|)
block|{
return|return;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|waitForRescan
argument_list|()
expr_stmt|;
block|}
comment|/**    * Waits for a rescan to complete. This doesn't guarantee consistency with    * pending operations, only relative recency, since it will not force a new    * rescan if a rescan is already underway.    *<p>    * Note that this call will release the FSN lock, so operations before and    * after are not atomic.    */
DECL|method|waitForRescan ()
specifier|public
name|void
name|waitForRescan
parameter_list|()
block|{
comment|// Drop the FSN lock temporarily and retake it after we finish waiting
comment|// Need to handle both the read lock and the write lock
name|boolean
name|retakeWriteLock
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
condition|)
block|{
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
name|retakeWriteLock
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namesystem
operator|.
name|hasReadLock
argument_list|()
condition|)
block|{
name|namesystem
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Expected to have at least one of the locks
name|Preconditions
operator|.
name|checkState
argument_list|(
literal|false
argument_list|,
literal|"Need to be holding either the read or write lock"
argument_list|)
expr_stmt|;
block|}
comment|// try/finally for retaking FSN lock
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// try/finally for releasing CRM lock
try|try
block|{
comment|// If no scan is already ongoing, mark the CRM as dirty and kick
if|if
condition|(
operator|!
name|isScanning
condition|)
block|{
name|needsRescan
operator|=
literal|true
expr_stmt|;
name|doRescan
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
comment|// Wait until the scan finishes and the count advances
specifier|final
name|long
name|startCount
init|=
name|scanCount
decl_stmt|;
while|while
condition|(
name|startCount
operator|>=
name|scanCount
condition|)
block|{
try|try
block|{
name|scanFinished
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for CacheReplicationMonitor"
operator|+
literal|" rescan"
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|retakeWriteLock
condition|)
block|{
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|namesystem
operator|.
name|readLock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Indicates to the CacheReplicationMonitor that there have been CacheManager    * changes that require a rescan.    */
DECL|method|setNeedsRescan ()
specifier|public
name|void
name|setNeedsRescan
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|needsRescan
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Shut down and join the monitor thread.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|shutdown
condition|)
return|return;
name|shutdown
operator|=
literal|true
expr_stmt|;
name|doRescan
operator|.
name|signalAll
argument_list|()
expr_stmt|;
name|scanFinished
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|this
operator|.
name|join
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|rescan ()
specifier|private
name|void
name|rescan
parameter_list|()
block|{
name|scannedDirectives
operator|=
literal|0
expr_stmt|;
name|scannedBlocks
operator|=
literal|0
expr_stmt|;
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|resetStatistics
argument_list|()
expr_stmt|;
name|rescanCacheDirectives
argument_list|()
expr_stmt|;
name|rescanCachedBlockMap
argument_list|()
expr_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|resetLastCachingDirectiveSentTime
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|resetStatistics ()
specifier|private
name|void
name|resetStatistics
parameter_list|()
block|{
for|for
control|(
name|CachePool
name|pool
range|:
name|cacheManager
operator|.
name|getCachePools
argument_list|()
control|)
block|{
name|pool
operator|.
name|resetStatistics
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|CacheDirective
name|directive
range|:
name|cacheManager
operator|.
name|getCacheDirectives
argument_list|()
control|)
block|{
name|directive
operator|.
name|resetStatistics
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Scan all CacheDirectives.  Use the information to figure out    * what cache replication factor each block should have.    */
DECL|method|rescanCacheDirectives ()
specifier|private
name|void
name|rescanCacheDirectives
parameter_list|()
block|{
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
specifier|final
name|long
name|now
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|CacheDirective
name|directive
range|:
name|cacheManager
operator|.
name|getCacheDirectives
argument_list|()
control|)
block|{
comment|// Reset the directive's statistics
name|directive
operator|.
name|resetStatistics
argument_list|()
expr_stmt|;
comment|// Skip processing this entry if it has expired
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Directive expiry is at "
operator|+
name|directive
operator|.
name|getExpiryTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directive
operator|.
name|getExpiryTime
argument_list|()
operator|>
literal|0
operator|&&
name|directive
operator|.
name|getExpiryTime
argument_list|()
operator|<=
name|now
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping directive id "
operator|+
name|directive
operator|.
name|getId
argument_list|()
operator|+
literal|" because it has expired ("
operator|+
name|directive
operator|.
name|getExpiryTime
argument_list|()
operator|+
literal|"<="
operator|+
name|now
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|scannedDirectives
operator|++
expr_stmt|;
name|String
name|path
init|=
name|directive
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|INode
name|node
decl_stmt|;
try|try
block|{
name|node
operator|=
name|fsDir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnresolvedLinkException
name|e
parameter_list|)
block|{
comment|// We don't cache through symlinks
continue|continue;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No inode found at "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|INodeDirectory
name|dir
init|=
name|node
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|dir
operator|.
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|rescanFile
argument_list|(
name|directive
argument_list|,
name|child
operator|.
name|asFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|rescanFile
argument_list|(
name|directive
argument_list|,
name|node
operator|.
name|asFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring non-directory, non-file inode "
operator|+
name|node
operator|+
literal|" found at "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Apply a CacheDirective to a file.    *     * @param directive The CacheDirective to apply.    * @param file The file.    */
DECL|method|rescanFile (CacheDirective directive, INodeFile file)
specifier|private
name|void
name|rescanFile
parameter_list|(
name|CacheDirective
name|directive
parameter_list|,
name|INodeFile
name|file
parameter_list|)
block|{
name|BlockInfo
index|[]
name|blockInfos
init|=
name|file
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
comment|// Increment the "needed" statistics
name|directive
operator|.
name|addFilesNeeded
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// We don't cache UC blocks, don't add them to the total here
name|long
name|neededTotal
init|=
name|file
operator|.
name|computeFileSizeNotIncludingLastUcBlock
argument_list|()
operator|*
name|directive
operator|.
name|getReplication
argument_list|()
decl_stmt|;
name|directive
operator|.
name|addBytesNeeded
argument_list|(
name|neededTotal
argument_list|)
expr_stmt|;
comment|// The pool's bytesNeeded is incremented as we scan. If the demand
comment|// thus far plus the demand of this file would exceed the pool's limit,
comment|// do not cache this file.
name|CachePool
name|pool
init|=
name|directive
operator|.
name|getPool
argument_list|()
decl_stmt|;
if|if
condition|(
name|pool
operator|.
name|getBytesNeeded
argument_list|()
operator|>
name|pool
operator|.
name|getLimit
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Skipping directive id %d file %s because "
operator|+
literal|"limit of pool %s would be exceeded (%d> %d)"
argument_list|,
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|file
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|pool
operator|.
name|getPoolName
argument_list|()
argument_list|,
name|pool
operator|.
name|getBytesNeeded
argument_list|()
argument_list|,
name|pool
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|long
name|cachedTotal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockInfo
name|blockInfo
range|:
name|blockInfos
control|)
block|{
if|if
condition|(
operator|!
name|blockInfo
operator|.
name|getBlockUCState
argument_list|()
operator|.
name|equals
argument_list|(
name|BlockUCState
operator|.
name|COMPLETE
argument_list|)
condition|)
block|{
comment|// We don't try to cache blocks that are under construction.
continue|continue;
block|}
name|Block
name|block
init|=
operator|new
name|Block
argument_list|(
name|blockInfo
operator|.
name|getBlockId
argument_list|()
argument_list|)
decl_stmt|;
name|CachedBlock
name|ncblock
init|=
operator|new
name|CachedBlock
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|directive
operator|.
name|getReplication
argument_list|()
argument_list|,
name|mark
argument_list|)
decl_stmt|;
name|CachedBlock
name|ocblock
init|=
name|cachedBlocks
operator|.
name|get
argument_list|(
name|ncblock
argument_list|)
decl_stmt|;
if|if
condition|(
name|ocblock
operator|==
literal|null
condition|)
block|{
name|cachedBlocks
operator|.
name|put
argument_list|(
name|ncblock
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Update bytesUsed using the current replication levels.
comment|// Assumptions: we assume that all the blocks are the same length
comment|// on each datanode.  We can assume this because we're only caching
comment|// blocks in state COMMITTED.
comment|// Note that if two directives are caching the same block(s), they will
comment|// both get them added to their bytesCached.
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|cachedOn
init|=
name|ocblock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|CACHED
argument_list|)
decl_stmt|;
name|long
name|cachedByBlock
init|=
name|Math
operator|.
name|min
argument_list|(
name|cachedOn
operator|.
name|size
argument_list|()
argument_list|,
name|directive
operator|.
name|getReplication
argument_list|()
argument_list|)
operator|*
name|blockInfo
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
name|cachedTotal
operator|+=
name|cachedByBlock
expr_stmt|;
if|if
condition|(
operator|(
name|mark
operator|!=
name|ocblock
operator|.
name|getMark
argument_list|()
operator|)
operator|||
operator|(
name|ocblock
operator|.
name|getReplication
argument_list|()
operator|<
name|directive
operator|.
name|getReplication
argument_list|()
operator|)
condition|)
block|{
comment|//
comment|// Overwrite the block's replication and mark in two cases:
comment|//
comment|// 1. If the mark on the CachedBlock is different from the mark for
comment|// this scan, that means the block hasn't been updated during this
comment|// scan, and we should overwrite whatever is there, since it is no
comment|// longer valid.
comment|//
comment|// 2. If the replication in the CachedBlock is less than what the
comment|// directive asks for, we want to increase the block's replication
comment|// field to what the directive asks for.
comment|//
name|ocblock
operator|.
name|setReplicationAndMark
argument_list|(
name|directive
operator|.
name|getReplication
argument_list|()
argument_list|,
name|mark
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Increment the "cached" statistics
name|directive
operator|.
name|addBytesCached
argument_list|(
name|cachedTotal
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedTotal
operator|==
name|neededTotal
condition|)
block|{
name|directive
operator|.
name|addFilesCached
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Directive "
operator|+
name|directive
operator|.
name|getId
argument_list|()
operator|+
literal|" is caching "
operator|+
name|file
operator|.
name|getFullPathName
argument_list|()
operator|+
literal|": "
operator|+
name|cachedTotal
operator|+
literal|"/"
operator|+
name|neededTotal
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findReasonForNotCaching (CachedBlock cblock, BlockInfo blockInfo)
specifier|private
name|String
name|findReasonForNotCaching
parameter_list|(
name|CachedBlock
name|cblock
parameter_list|,
name|BlockInfo
name|blockInfo
parameter_list|)
block|{
if|if
condition|(
name|blockInfo
operator|==
literal|null
condition|)
block|{
comment|// Somehow, a cache report with the block arrived, but the block
comment|// reports from the DataNode haven't (yet?) described such a block.
comment|// Alternately, the NameNode might have invalidated the block, but the
comment|// DataNode hasn't caught up.  In any case, we want to tell the DN
comment|// to uncache this.
return|return
literal|"not tracked by the BlockManager"
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|blockInfo
operator|.
name|isComplete
argument_list|()
condition|)
block|{
comment|// When a cached block changes state from complete to some other state
comment|// on the DataNode (perhaps because of append), it will begin the
comment|// uncaching process.  However, the uncaching process is not
comment|// instantaneous, especially if clients have pinned the block.  So
comment|// there may be a period of time when incomplete blocks remain cached
comment|// on the DataNodes.
return|return
literal|"not complete"
return|;
block|}
elseif|else
if|if
condition|(
name|cblock
operator|.
name|getReplication
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Since 0 is not a valid value for a cache directive's replication
comment|// field, seeing a replication of 0 on a CacheBlock means that it
comment|// has never been reached by any sweep.
return|return
literal|"not needed by any directives"
return|;
block|}
elseif|else
if|if
condition|(
name|cblock
operator|.
name|getMark
argument_list|()
operator|!=
name|mark
condition|)
block|{
comment|// Although the block was needed in the past, we didn't reach it during
comment|// the current sweep.  Therefore, it doesn't need to be cached any more.
return|return
literal|"no longer needed by any directives"
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Scan through the cached block map.    * Any blocks which are under-replicated should be assigned new Datanodes.    * Blocks that are over-replicated should be removed from Datanodes.    */
DECL|method|rescanCachedBlockMap ()
specifier|private
name|void
name|rescanCachedBlockMap
parameter_list|()
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CachedBlock
argument_list|>
name|cbIter
init|=
name|cachedBlocks
operator|.
name|iterator
argument_list|()
init|;
name|cbIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|scannedBlocks
operator|++
expr_stmt|;
name|CachedBlock
name|cblock
init|=
name|cbIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pendingCached
init|=
name|cblock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|PENDING_CACHED
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|cached
init|=
name|cblock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|CACHED
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pendingUncached
init|=
name|cblock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|PENDING_UNCACHED
argument_list|)
decl_stmt|;
comment|// Remove nodes from PENDING_UNCACHED if they were actually uncached.
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|pendingUncached
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatanodeDescriptor
name|datanode
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cblock
operator|.
name|isInList
argument_list|(
name|datanode
operator|.
name|getCached
argument_list|()
argument_list|)
condition|)
block|{
name|datanode
operator|.
name|getPendingUncached
argument_list|()
operator|.
name|remove
argument_list|(
name|cblock
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|BlockInfo
name|blockInfo
init|=
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
operator|new
name|Block
argument_list|(
name|cblock
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|reason
init|=
name|findReasonForNotCaching
argument_list|(
name|cblock
argument_list|,
name|blockInfo
argument_list|)
decl_stmt|;
name|int
name|neededCached
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"not caching "
operator|+
name|cblock
operator|+
literal|" because it is "
operator|+
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|neededCached
operator|=
name|cblock
operator|.
name|getReplication
argument_list|()
expr_stmt|;
block|}
name|int
name|numCached
init|=
name|cached
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numCached
operator|>=
name|neededCached
condition|)
block|{
comment|// If we have enough replicas, drop all pending cached.
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|pendingCached
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatanodeDescriptor
name|datanode
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|datanode
operator|.
name|getPendingCached
argument_list|()
operator|.
name|remove
argument_list|(
name|cblock
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numCached
operator|<
name|neededCached
condition|)
block|{
comment|// If we don't have enough replicas, drop all pending uncached.
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|pendingUncached
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatanodeDescriptor
name|datanode
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|datanode
operator|.
name|getPendingUncached
argument_list|()
operator|.
name|remove
argument_list|(
name|cblock
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|neededUncached
init|=
name|numCached
operator|-
operator|(
name|pendingUncached
operator|.
name|size
argument_list|()
operator|+
name|neededCached
operator|)
decl_stmt|;
if|if
condition|(
name|neededUncached
operator|>
literal|0
condition|)
block|{
name|addNewPendingUncached
argument_list|(
name|neededUncached
argument_list|,
name|cblock
argument_list|,
name|cached
argument_list|,
name|pendingUncached
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|additionalCachedNeeded
init|=
name|neededCached
operator|-
operator|(
name|numCached
operator|+
name|pendingCached
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|additionalCachedNeeded
operator|>
literal|0
condition|)
block|{
name|addNewPendingCached
argument_list|(
name|additionalCachedNeeded
argument_list|,
name|cblock
argument_list|,
name|cached
argument_list|,
name|pendingCached
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|neededCached
operator|==
literal|0
operator|)
operator|&&
name|pendingUncached
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pendingCached
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we have nothing more to do with this block.
name|cbIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Add new entries to the PendingUncached list.    *    * @param neededUncached   The number of replicas that need to be uncached.    * @param cachedBlock      The block which needs to be uncached.    * @param cached           A list of DataNodes currently caching the block.    * @param pendingUncached  A list of DataNodes that will soon uncache the    *                         block.    */
DECL|method|addNewPendingUncached (int neededUncached, CachedBlock cachedBlock, List<DatanodeDescriptor> cached, List<DatanodeDescriptor> pendingUncached)
specifier|private
name|void
name|addNewPendingUncached
parameter_list|(
name|int
name|neededUncached
parameter_list|,
name|CachedBlock
name|cachedBlock
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|cached
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pendingUncached
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cacheManager
operator|.
name|isActive
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Figure out which replicas can be uncached.
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|possibilities
init|=
operator|new
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|datanode
range|:
name|cached
control|)
block|{
if|if
condition|(
operator|!
name|pendingUncached
operator|.
name|contains
argument_list|(
name|datanode
argument_list|)
condition|)
block|{
name|possibilities
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|neededUncached
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|possibilities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Logic error: we're trying to uncache more replicas than "
operator|+
literal|"actually exist for "
operator|+
name|cachedBlock
argument_list|)
expr_stmt|;
return|return;
block|}
name|DatanodeDescriptor
name|datanode
init|=
name|possibilities
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|possibilities
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|pendingUncached
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
name|boolean
name|added
init|=
name|datanode
operator|.
name|getPendingUncached
argument_list|()
operator|.
name|add
argument_list|(
name|cachedBlock
argument_list|)
decl_stmt|;
assert|assert
name|added
assert|;
name|neededUncached
operator|--
expr_stmt|;
block|}
block|}
comment|/**    * Add new entries to the PendingCached list.    *    * @param neededCached     The number of replicas that need to be cached.    * @param cachedBlock      The block which needs to be cached.    * @param cached           A list of DataNodes currently caching the block.    * @param pendingCached    A list of DataNodes that will soon cache the    *                         block.    */
DECL|method|addNewPendingCached (int neededCached, CachedBlock cachedBlock, List<DatanodeDescriptor> cached, List<DatanodeDescriptor> pendingCached)
specifier|private
name|void
name|addNewPendingCached
parameter_list|(
name|int
name|neededCached
parameter_list|,
name|CachedBlock
name|cachedBlock
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|cached
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pendingCached
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cacheManager
operator|.
name|isActive
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// To figure out which replicas can be cached, we consult the
comment|// blocksMap.  We don't want to try to cache a corrupt replica, though.
name|BlockInfo
name|blockInfo
init|=
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
operator|new
name|Block
argument_list|(
name|cachedBlock
operator|.
name|getBlockId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockInfo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not caching block "
operator|+
name|cachedBlock
operator|+
literal|" because there "
operator|+
literal|"is no record of it on the NameNode."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|blockInfo
operator|.
name|isComplete
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not caching block "
operator|+
name|cachedBlock
operator|+
literal|" because it "
operator|+
literal|"is not yet complete."
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|possibilities
init|=
operator|new
name|LinkedList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numReplicas
init|=
name|blockInfo
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|corrupt
init|=
name|blockManager
operator|.
name|getCorruptReplicas
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReplicas
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeDescriptor
name|datanode
init|=
name|blockInfo
operator|.
name|getDatanode
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|datanode
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
operator|!
name|pendingCached
operator|.
name|contains
argument_list|(
name|datanode
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|corrupt
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|corrupt
operator|.
name|contains
argument_list|(
name|datanode
argument_list|)
operator|)
operator|)
operator|)
condition|)
block|{
name|possibilities
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|neededCached
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|possibilities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"We need "
operator|+
name|neededCached
operator|+
literal|" more replica(s) than "
operator|+
literal|"actually exist to provide a cache replication of "
operator|+
name|cachedBlock
operator|.
name|getReplication
argument_list|()
operator|+
literal|" for "
operator|+
name|cachedBlock
argument_list|)
expr_stmt|;
return|return;
block|}
name|DatanodeDescriptor
name|datanode
init|=
name|possibilities
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|possibilities
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"AddNewPendingCached: datanode "
operator|+
name|datanode
operator|+
literal|" will now cache block "
operator|+
name|cachedBlock
argument_list|)
expr_stmt|;
block|}
name|pendingCached
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
name|boolean
name|added
init|=
name|datanode
operator|.
name|getPendingCached
argument_list|()
operator|.
name|add
argument_list|(
name|cachedBlock
argument_list|)
decl_stmt|;
assert|assert
name|added
assert|;
name|neededCached
operator|--
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

