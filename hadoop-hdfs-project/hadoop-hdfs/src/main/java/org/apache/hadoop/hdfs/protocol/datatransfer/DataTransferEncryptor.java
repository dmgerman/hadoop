begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocol.datatransfer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelper
operator|.
name|vintPrefixed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthorizeCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|RealmChoiceCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslClient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|DataTransferEncryptorMessageProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|DataTransferEncryptorMessageProto
operator|.
name|DataTransferEncryptorStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockPoolTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_comment
comment|/**  * A class which, given connected input/output streams, will perform a  * handshake using those streams based on SASL to produce new Input/Output  * streams which will encrypt/decrypt all data written/read from said streams.  * Much of this is inspired by or borrowed from the TSaslTransport in Apache  * Thrift, but with some HDFS-specific tweaks.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DataTransferEncryptor
specifier|public
class|class
name|DataTransferEncryptor
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DataTransferEncryptor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Sent by clients and validated by servers. We use a number that's unlikely    * to ever be sent as the value of the DATA_TRANSFER_VERSION.    */
DECL|field|ENCRYPTED_TRANSFER_MAGIC_NUMBER
specifier|private
specifier|static
specifier|final
name|int
name|ENCRYPTED_TRANSFER_MAGIC_NUMBER
init|=
literal|0xDEADBEEF
decl_stmt|;
comment|/**    * Delimiter for the three-part SASL username string.    */
DECL|field|NAME_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|NAME_DELIMITER
init|=
literal|" "
decl_stmt|;
comment|// This has to be set as part of the SASL spec, but it don't matter for
comment|// our purposes, but may not be empty. It's sent over the wire, so use
comment|// a short string.
DECL|field|SERVER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SERVER_NAME
init|=
literal|"0"
decl_stmt|;
DECL|field|PROTOCOL
specifier|private
specifier|static
specifier|final
name|String
name|PROTOCOL
init|=
literal|"hdfs"
decl_stmt|;
DECL|field|MECHANISM
specifier|private
specifier|static
specifier|final
name|String
name|MECHANISM
init|=
literal|"DIGEST-MD5"
decl_stmt|;
DECL|field|SASL_PROPS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|SASL_PROPS
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|SASL_PROPS
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|,
literal|"auth-conf"
argument_list|)
expr_stmt|;
name|SASL_PROPS
operator|.
name|put
argument_list|(
name|Sasl
operator|.
name|SERVER_AUTH
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Factory method for DNs, where the nonce, keyId, and encryption key are not    * yet known. The nonce and keyId will be sent by the client, and the DN    * will then use those pieces of info and the secret key shared with the NN    * to determine the encryptionKey used for the SASL handshake/encryption.    *     * Establishes a secure connection assuming that the party on the other end    * has the same shared secret. This does a SASL connection handshake, but not    * a general-purpose one. It's specific to the MD5-DIGEST SASL mechanism with    * auth-conf enabled. In particular, it doesn't support an arbitrary number of    * challenge/response rounds, and we know that the client will never have an    * initial response, so we don't check for one.    *    * @param underlyingOut output stream to write to the other party    * @param underlyingIn input stream to read from the other party    * @param blockPoolTokenSecretManager secret manager capable of constructing    *        encryption key based on keyId, blockPoolId, and nonce    * @return a pair of streams which wrap the given streams and encrypt/decrypt    *         all data read/written    * @throws IOException in the event of error    */
DECL|method|getEncryptedStreams ( OutputStream underlyingOut, InputStream underlyingIn, BlockPoolTokenSecretManager blockPoolTokenSecretManager, String encryptionAlgorithm)
specifier|public
specifier|static
name|IOStreamPair
name|getEncryptedStreams
parameter_list|(
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|BlockPoolTokenSecretManager
name|blockPoolTokenSecretManager
parameter_list|,
name|String
name|encryptionAlgorithm
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|underlyingIn
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|underlyingOut
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|SASL_PROPS
argument_list|)
decl_stmt|;
name|saslProps
operator|.
name|put
argument_list|(
literal|"com.sun.security.sasl.digest.cipher"
argument_list|,
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server using encryption algorithm "
operator|+
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
name|SaslParticipant
name|sasl
init|=
operator|new
name|SaslParticipant
argument_list|(
name|Sasl
operator|.
name|createSaslServer
argument_list|(
name|MECHANISM
argument_list|,
name|PROTOCOL
argument_list|,
name|SERVER_NAME
argument_list|,
name|saslProps
argument_list|,
operator|new
name|SaslServerCallbackHandler
argument_list|(
name|blockPoolTokenSecretManager
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|magicNumber
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|magicNumber
operator|!=
name|ENCRYPTED_TRANSFER_MAGIC_NUMBER
condition|)
block|{
throw|throw
operator|new
name|InvalidMagicNumberException
argument_list|(
name|magicNumber
argument_list|)
throw|;
block|}
try|try
block|{
comment|// step 1
name|performSaslStep1
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|sasl
argument_list|)
expr_stmt|;
comment|// step 2 (server-side only)
name|byte
index|[]
name|remoteResponse
init|=
name|readSaslMessage
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|byte
index|[]
name|localResponse
init|=
name|sasl
operator|.
name|evaluateChallengeOrResponse
argument_list|(
name|remoteResponse
argument_list|)
decl_stmt|;
name|sendSaslMessage
argument_list|(
name|out
argument_list|,
name|localResponse
argument_list|)
expr_stmt|;
comment|// SASL handshake is complete
name|checkSaslComplete
argument_list|(
name|sasl
argument_list|)
expr_stmt|;
return|return
name|sasl
operator|.
name|createEncryptedStreamPair
argument_list|(
name|out
argument_list|,
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|instanceof
name|SaslException
operator|&&
name|ioe
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|ioe
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InvalidEncryptionKeyException
condition|)
block|{
comment|// This could just be because the client is long-lived and hasn't gotten
comment|// a new encryption key from the NN in a while. Upon receiving this
comment|// error, the client will get a new encryption key from the NN and retry
comment|// connecting to this DN.
name|sendInvalidKeySaslErrorMessage
argument_list|(
name|out
argument_list|,
name|ioe
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendGenericSaslErrorMessage
argument_list|(
name|out
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ioe
throw|;
block|}
block|}
comment|/**    * Factory method for clients, where the encryption token is already created.    *     * Establishes a secure connection assuming that the party on the other end    * has the same shared secret. This does a SASL connection handshake, but not    * a general-purpose one. It's specific to the MD5-DIGEST SASL mechanism with    * auth-conf enabled. In particular, it doesn't support an arbitrary number of    * challenge/response rounds, and we know that the client will never have an    * initial response, so we don't check for one.    *    * @param underlyingOut output stream to write to the other party    * @param underlyingIn input stream to read from the other party    * @param encryptionKey all info required to establish an encrypted stream    * @return a pair of streams which wrap the given streams and encrypt/decrypt    *         all data read/written    * @throws IOException in the event of error    */
DECL|method|getEncryptedStreams ( OutputStream underlyingOut, InputStream underlyingIn, DataEncryptionKey encryptionKey)
specifier|public
specifier|static
name|IOStreamPair
name|getEncryptedStreams
parameter_list|(
name|OutputStream
name|underlyingOut
parameter_list|,
name|InputStream
name|underlyingIn
parameter_list|,
name|DataEncryptionKey
name|encryptionKey
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|SASL_PROPS
argument_list|)
decl_stmt|;
name|saslProps
operator|.
name|put
argument_list|(
literal|"com.sun.security.sasl.digest.cipher"
argument_list|,
name|encryptionKey
operator|.
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client using encryption algorithm "
operator|+
name|encryptionKey
operator|.
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|underlyingOut
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|underlyingIn
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|getUserNameFromEncryptionKey
argument_list|(
name|encryptionKey
argument_list|)
decl_stmt|;
name|SaslParticipant
name|sasl
init|=
operator|new
name|SaslParticipant
argument_list|(
name|Sasl
operator|.
name|createSaslClient
argument_list|(
operator|new
name|String
index|[]
block|{
name|MECHANISM
block|}
argument_list|,
name|userName
argument_list|,
name|PROTOCOL
argument_list|,
name|SERVER_NAME
argument_list|,
name|saslProps
argument_list|,
operator|new
name|SaslClientCallbackHandler
argument_list|(
name|encryptionKey
operator|.
name|encryptionKey
argument_list|,
name|userName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|ENCRYPTED_TRANSFER_MAGIC_NUMBER
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Start of handshake - "initial response" in SASL terminology.
name|sendSaslMessage
argument_list|(
name|out
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// step 1
name|performSaslStep1
argument_list|(
name|out
argument_list|,
name|in
argument_list|,
name|sasl
argument_list|)
expr_stmt|;
comment|// step 2 (client-side only)
name|byte
index|[]
name|remoteResponse
init|=
name|readSaslMessage
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|byte
index|[]
name|localResponse
init|=
name|sasl
operator|.
name|evaluateChallengeOrResponse
argument_list|(
name|remoteResponse
argument_list|)
decl_stmt|;
assert|assert
name|localResponse
operator|==
literal|null
assert|;
comment|// SASL handshake is complete
name|checkSaslComplete
argument_list|(
name|sasl
argument_list|)
expr_stmt|;
return|return
name|sasl
operator|.
name|createEncryptedStreamPair
argument_list|(
name|out
argument_list|,
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|sendGenericSaslErrorMessage
argument_list|(
name|out
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
DECL|method|performSaslStep1 (DataOutputStream out, DataInputStream in, SaslParticipant sasl)
specifier|private
specifier|static
name|void
name|performSaslStep1
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|DataInputStream
name|in
parameter_list|,
name|SaslParticipant
name|sasl
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|remoteResponse
init|=
name|readSaslMessage
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|byte
index|[]
name|localResponse
init|=
name|sasl
operator|.
name|evaluateChallengeOrResponse
argument_list|(
name|remoteResponse
argument_list|)
decl_stmt|;
name|sendSaslMessage
argument_list|(
name|out
argument_list|,
name|localResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSaslComplete (SaslParticipant sasl)
specifier|private
specifier|static
name|void
name|checkSaslComplete
parameter_list|(
name|SaslParticipant
name|sasl
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|sasl
operator|.
name|isComplete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to complete SASL handshake"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|sasl
operator|.
name|supportsConfidentiality
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"SASL handshake completed, but channel does not "
operator|+
literal|"support encryption"
argument_list|)
throw|;
block|}
block|}
DECL|method|sendSaslMessage (DataOutputStream out, byte[] payload)
specifier|private
specifier|static
name|void
name|sendSaslMessage
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|)
throws|throws
name|IOException
block|{
name|sendSaslMessage
argument_list|(
name|out
argument_list|,
name|DataTransferEncryptorStatus
operator|.
name|SUCCESS
argument_list|,
name|payload
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|sendInvalidKeySaslErrorMessage (DataOutputStream out, String message)
specifier|private
specifier|static
name|void
name|sendInvalidKeySaslErrorMessage
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|sendSaslMessage
argument_list|(
name|out
argument_list|,
name|DataTransferEncryptorStatus
operator|.
name|ERROR_UNKNOWN_KEY
argument_list|,
literal|null
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|sendGenericSaslErrorMessage (DataOutputStream out, String message)
specifier|private
specifier|static
name|void
name|sendGenericSaslErrorMessage
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|sendSaslMessage
argument_list|(
name|out
argument_list|,
name|DataTransferEncryptorStatus
operator|.
name|ERROR
argument_list|,
literal|null
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|sendSaslMessage (OutputStream out, DataTransferEncryptorStatus status, byte[] payload, String message)
specifier|private
specifier|static
name|void
name|sendSaslMessage
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|DataTransferEncryptorStatus
name|status
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|DataTransferEncryptorMessageProto
operator|.
name|Builder
name|builder
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPayload
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|DataTransferEncryptorMessageProto
name|proto
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|proto
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|readSaslMessage (DataInputStream in)
specifier|private
specifier|static
name|byte
index|[]
name|readSaslMessage
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|DataTransferEncryptorMessageProto
name|proto
init|=
name|DataTransferEncryptorMessageProto
operator|.
name|parseFrom
argument_list|(
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|DataTransferEncryptorStatus
operator|.
name|ERROR_UNKNOWN_KEY
condition|)
block|{
throw|throw
operator|new
name|InvalidEncryptionKeyException
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|getStatus
argument_list|()
operator|==
name|DataTransferEncryptorStatus
operator|.
name|ERROR
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|proto
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|proto
operator|.
name|getPayload
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
comment|/**    * Set the encryption key when asked by the server-side SASL object.    */
DECL|class|SaslServerCallbackHandler
specifier|private
specifier|static
class|class
name|SaslServerCallbackHandler
implements|implements
name|CallbackHandler
block|{
DECL|field|blockPoolTokenSecretManager
specifier|private
name|BlockPoolTokenSecretManager
name|blockPoolTokenSecretManager
decl_stmt|;
DECL|method|SaslServerCallbackHandler (BlockPoolTokenSecretManager blockPoolTokenSecretManager)
specifier|public
name|SaslServerCallbackHandler
parameter_list|(
name|BlockPoolTokenSecretManager
name|blockPoolTokenSecretManager
parameter_list|)
block|{
name|this
operator|.
name|blockPoolTokenSecretManager
operator|=
name|blockPoolTokenSecretManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (Callback[] callbacks)
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
name|NameCallback
name|nc
init|=
literal|null
decl_stmt|;
name|PasswordCallback
name|pc
init|=
literal|null
decl_stmt|;
name|AuthorizeCallback
name|ac
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|AuthorizeCallback
condition|)
block|{
name|ac
operator|=
operator|(
name|AuthorizeCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|pc
operator|=
operator|(
name|PasswordCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|nc
operator|=
operator|(
name|NameCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|RealmCallback
condition|)
block|{
continue|continue;
comment|// realm is ignored
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unrecognized SASL DIGEST-MD5 Callback: "
operator|+
name|callback
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|encryptionKey
init|=
name|getEncryptionKeyFromUserName
argument_list|(
name|blockPoolTokenSecretManager
argument_list|,
name|nc
operator|.
name|getDefaultName
argument_list|()
argument_list|)
decl_stmt|;
name|pc
operator|.
name|setPassword
argument_list|(
name|encryptionKeyToPassword
argument_list|(
name|encryptionKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ac
operator|!=
literal|null
condition|)
block|{
name|ac
operator|.
name|setAuthorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ac
operator|.
name|setAuthorizedID
argument_list|(
name|ac
operator|.
name|getAuthorizationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set the encryption key when asked by the client-side SASL object.    */
DECL|class|SaslClientCallbackHandler
specifier|private
specifier|static
class|class
name|SaslClientCallbackHandler
implements|implements
name|CallbackHandler
block|{
DECL|field|encryptionKey
specifier|private
name|byte
index|[]
name|encryptionKey
decl_stmt|;
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|method|SaslClientCallbackHandler (byte[] encryptionKey, String userName)
specifier|public
name|SaslClientCallbackHandler
parameter_list|(
name|byte
index|[]
name|encryptionKey
parameter_list|,
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|encryptionKey
operator|=
name|encryptionKey
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (Callback[] callbacks)
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
name|NameCallback
name|nc
init|=
literal|null
decl_stmt|;
name|PasswordCallback
name|pc
init|=
literal|null
decl_stmt|;
name|RealmCallback
name|rc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|RealmChoiceCallback
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|nc
operator|=
operator|(
name|NameCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|pc
operator|=
operator|(
name|PasswordCallback
operator|)
name|callback
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|RealmCallback
condition|)
block|{
name|rc
operator|=
operator|(
name|RealmCallback
operator|)
name|callback
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|,
literal|"Unrecognized SASL client callback"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|nc
operator|!=
literal|null
condition|)
block|{
name|nc
operator|.
name|setName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setPassword
argument_list|(
name|encryptionKeyToPassword
argument_list|(
name|encryptionKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setText
argument_list|(
name|rc
operator|.
name|getDefaultText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * The SASL username consists of the keyId, blockPoolId, and nonce with the    * first two encoded as Strings, and the third encoded using Base64. The    * fields are each separated by a single space.    *     * @param encryptionKey the encryption key to encode as a SASL username.    * @return encoded username containing keyId, blockPoolId, and nonce    */
DECL|method|getUserNameFromEncryptionKey ( DataEncryptionKey encryptionKey)
specifier|private
specifier|static
name|String
name|getUserNameFromEncryptionKey
parameter_list|(
name|DataEncryptionKey
name|encryptionKey
parameter_list|)
block|{
return|return
name|encryptionKey
operator|.
name|keyId
operator|+
name|NAME_DELIMITER
operator|+
name|encryptionKey
operator|.
name|blockPoolId
operator|+
name|NAME_DELIMITER
operator|+
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|encryptionKey
operator|.
name|nonce
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
comment|/**    * Given a secret manager and a username encoded as described above, determine    * the encryption key.    *     * @param blockPoolTokenSecretManager to determine the encryption key.    * @param userName containing the keyId, blockPoolId, and nonce.    * @return secret encryption key.    * @throws IOException    */
DECL|method|getEncryptionKeyFromUserName ( BlockPoolTokenSecretManager blockPoolTokenSecretManager, String userName)
specifier|private
specifier|static
name|byte
index|[]
name|getEncryptionKeyFromUserName
parameter_list|(
name|BlockPoolTokenSecretManager
name|blockPoolTokenSecretManager
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|nameComponents
init|=
name|userName
operator|.
name|split
argument_list|(
name|NAME_DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameComponents
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Provided name '"
operator|+
name|userName
operator|+
literal|"' has "
operator|+
name|nameComponents
operator|.
name|length
operator|+
literal|" components instead of the expected 3."
argument_list|)
throw|;
block|}
name|int
name|keyId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|nameComponents
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|blockPoolId
init|=
name|nameComponents
index|[
literal|1
index|]
decl_stmt|;
name|byte
index|[]
name|nonce
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|nameComponents
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
return|return
name|blockPoolTokenSecretManager
operator|.
name|retrieveDataEncryptionKey
argument_list|(
name|keyId
argument_list|,
name|blockPoolId
argument_list|,
name|nonce
argument_list|)
return|;
block|}
DECL|method|encryptionKeyToPassword (byte[] encryptionKey)
specifier|private
specifier|static
name|char
index|[]
name|encryptionKeyToPassword
parameter_list|(
name|byte
index|[]
name|encryptionKey
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|encryptionKey
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
operator|.
name|toCharArray
argument_list|()
return|;
block|}
comment|/**    * Strongly inspired by Thrift's TSaslTransport class.    *     * Used to abstract over the<code>SaslServer</code> and    *<code>SaslClient</code> classes, which share a lot of their interface, but    * unfortunately don't share a common superclass.    */
DECL|class|SaslParticipant
specifier|private
specifier|static
class|class
name|SaslParticipant
block|{
comment|// One of these will always be null.
DECL|field|saslServer
specifier|public
name|SaslServer
name|saslServer
decl_stmt|;
DECL|field|saslClient
specifier|public
name|SaslClient
name|saslClient
decl_stmt|;
DECL|method|SaslParticipant (SaslServer saslServer)
specifier|public
name|SaslParticipant
parameter_list|(
name|SaslServer
name|saslServer
parameter_list|)
block|{
name|this
operator|.
name|saslServer
operator|=
name|saslServer
expr_stmt|;
block|}
DECL|method|SaslParticipant (SaslClient saslClient)
specifier|public
name|SaslParticipant
parameter_list|(
name|SaslClient
name|saslClient
parameter_list|)
block|{
name|this
operator|.
name|saslClient
operator|=
name|saslClient
expr_stmt|;
block|}
DECL|method|evaluateChallengeOrResponse (byte[] challengeOrResponse)
specifier|public
name|byte
index|[]
name|evaluateChallengeOrResponse
parameter_list|(
name|byte
index|[]
name|challengeOrResponse
parameter_list|)
throws|throws
name|SaslException
block|{
if|if
condition|(
name|saslClient
operator|!=
literal|null
condition|)
block|{
return|return
name|saslClient
operator|.
name|evaluateChallenge
argument_list|(
name|challengeOrResponse
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|saslServer
operator|.
name|evaluateResponse
argument_list|(
name|challengeOrResponse
argument_list|)
return|;
block|}
block|}
DECL|method|isComplete ()
specifier|public
name|boolean
name|isComplete
parameter_list|()
block|{
if|if
condition|(
name|saslClient
operator|!=
literal|null
condition|)
return|return
name|saslClient
operator|.
name|isComplete
argument_list|()
return|;
else|else
return|return
name|saslServer
operator|.
name|isComplete
argument_list|()
return|;
block|}
DECL|method|supportsConfidentiality ()
specifier|public
name|boolean
name|supportsConfidentiality
parameter_list|()
block|{
name|String
name|qop
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|saslClient
operator|!=
literal|null
condition|)
block|{
name|qop
operator|=
operator|(
name|String
operator|)
name|saslClient
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qop
operator|=
operator|(
name|String
operator|)
name|saslServer
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
expr_stmt|;
block|}
return|return
name|qop
operator|!=
literal|null
operator|&&
name|qop
operator|.
name|equals
argument_list|(
literal|"auth-conf"
argument_list|)
return|;
block|}
comment|// Return some input/output streams that will henceforth have their
comment|// communication encrypted.
DECL|method|createEncryptedStreamPair ( DataOutputStream out, DataInputStream in)
specifier|private
name|IOStreamPair
name|createEncryptedStreamPair
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|DataInputStream
name|in
parameter_list|)
block|{
if|if
condition|(
name|saslClient
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|IOStreamPair
argument_list|(
operator|new
name|SaslInputStream
argument_list|(
name|in
argument_list|,
name|saslClient
argument_list|)
argument_list|,
operator|new
name|SaslOutputStream
argument_list|(
name|out
argument_list|,
name|saslClient
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|IOStreamPair
argument_list|(
operator|new
name|SaslInputStream
argument_list|(
name|in
argument_list|,
name|saslServer
argument_list|)
argument_list|,
operator|new
name|SaslOutputStream
argument_list|(
name|out
argument_list|,
name|saslServer
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|InvalidMagicNumberException
specifier|public
specifier|static
class|class
name|InvalidMagicNumberException
extends|extends
name|IOException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|InvalidMagicNumberException (int magicNumber)
specifier|public
name|InvalidMagicNumberException
parameter_list|(
name|int
name|magicNumber
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Received %x instead of %x from client."
argument_list|,
name|magicNumber
argument_list|,
name|ENCRYPTED_TRANSFER_MAGIC_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

