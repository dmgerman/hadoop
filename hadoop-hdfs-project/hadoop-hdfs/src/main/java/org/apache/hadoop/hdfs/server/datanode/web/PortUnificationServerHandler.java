begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|web
operator|.
name|dtp
operator|.
name|DtpHttp2Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|http
operator|.
name|RestCsrfPreventionFilter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBufUtil
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|ByteToMessageDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpServerCodec
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http2
operator|.
name|Http2CodecUtil
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|stream
operator|.
name|ChunkedWriteHandler
import|;
end_import

begin_comment
comment|/**  * A port unification handler to support HTTP/1.1 and HTTP/2 on the same port.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|PortUnificationServerHandler
specifier|public
class|class
name|PortUnificationServerHandler
extends|extends
name|ByteToMessageDecoder
block|{
DECL|field|HTTP2_CLIENT_CONNECTION_PREFACE
specifier|private
specifier|static
specifier|final
name|ByteBuf
name|HTTP2_CLIENT_CONNECTION_PREFACE
init|=
name|Http2CodecUtil
operator|.
name|connectionPrefaceBuf
argument_list|()
decl_stmt|;
comment|// we only want to support HTTP/1.1 and HTTP/2, so the first 3 bytes is
comment|// enough. No HTTP/1.1 request could start with "PRI"
DECL|field|MAGIC_HEADER_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAGIC_HEADER_LENGTH
init|=
literal|3
decl_stmt|;
DECL|field|proxyHost
specifier|private
specifier|final
name|InetSocketAddress
name|proxyHost
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|confForCreate
specifier|private
specifier|final
name|Configuration
name|confForCreate
decl_stmt|;
DECL|field|restCsrfPreventionFilter
specifier|private
specifier|final
name|RestCsrfPreventionFilter
name|restCsrfPreventionFilter
decl_stmt|;
DECL|method|PortUnificationServerHandler (InetSocketAddress proxyHost, Configuration conf, Configuration confForCreate, RestCsrfPreventionFilter restCsrfPreventionFilter)
specifier|public
name|PortUnificationServerHandler
parameter_list|(
name|InetSocketAddress
name|proxyHost
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Configuration
name|confForCreate
parameter_list|,
name|RestCsrfPreventionFilter
name|restCsrfPreventionFilter
parameter_list|)
block|{
name|this
operator|.
name|proxyHost
operator|=
name|proxyHost
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|confForCreate
operator|=
name|confForCreate
expr_stmt|;
name|this
operator|.
name|restCsrfPreventionFilter
operator|=
name|restCsrfPreventionFilter
expr_stmt|;
block|}
DECL|method|configureHttp1 (ChannelHandlerContext ctx)
specifier|private
name|void
name|configureHttp1
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
block|{
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|HttpServerCodec
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|restCsrfPreventionFilter
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|RestCsrfPreventionFilterHandler
argument_list|(
name|this
operator|.
name|restCsrfPreventionFilter
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|ChunkedWriteHandler
argument_list|()
argument_list|,
operator|new
name|URLDispatcher
argument_list|(
name|proxyHost
argument_list|,
name|conf
argument_list|,
name|confForCreate
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|configureHttp2 (ChannelHandlerContext ctx)
specifier|private
name|void
name|configureHttp2
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|restCsrfPreventionFilter
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|RestCsrfPreventionFilterHandler
argument_list|(
name|this
operator|.
name|restCsrfPreventionFilter
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|addLast
argument_list|(
operator|new
name|DtpHttp2Handler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|decode (ChannelHandlerContext ctx, ByteBuf in, List<Object> out)
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|in
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|in
operator|.
name|readableBytes
argument_list|()
operator|<
name|MAGIC_HEADER_LENGTH
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|ByteBufUtil
operator|.
name|equals
argument_list|(
name|in
argument_list|,
literal|0
argument_list|,
name|HTTP2_CLIENT_CONNECTION_PREFACE
argument_list|,
literal|0
argument_list|,
name|MAGIC_HEADER_LENGTH
argument_list|)
condition|)
block|{
name|configureHttp2
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|configureHttp1
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

