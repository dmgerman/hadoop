begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|UpgradeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|UpgradeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_comment
comment|/**  * Upgrade manager for data-nodes.  *  * Distributed upgrades for a data-node are performed in a separate thread.  * The upgrade starts when the data-node receives the start upgrade command  * from the namenode. At that point the manager finds a respective upgrade  * object and starts a daemon in order to perform the upgrade defined by the   * object.  */
end_comment

begin_class
DECL|class|UpgradeManagerDatanode
class|class
name|UpgradeManagerDatanode
extends|extends
name|UpgradeManager
block|{
DECL|field|dataNode
name|DataNode
name|dataNode
init|=
literal|null
decl_stmt|;
DECL|field|upgradeDaemon
name|Daemon
name|upgradeDaemon
init|=
literal|null
decl_stmt|;
DECL|field|bpid
name|String
name|bpid
init|=
literal|null
decl_stmt|;
DECL|method|UpgradeManagerDatanode (DataNode dataNode, String bpid)
name|UpgradeManagerDatanode
parameter_list|(
name|DataNode
name|dataNode
parameter_list|,
name|String
name|bpid
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|dataNode
operator|=
name|dataNode
expr_stmt|;
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|HdfsServerConstants
operator|.
name|NodeType
name|getType
parameter_list|()
block|{
return|return
name|HdfsServerConstants
operator|.
name|NodeType
operator|.
name|DATA_NODE
return|;
block|}
DECL|method|initializeUpgrade (NamespaceInfo nsInfo)
specifier|synchronized
name|void
name|initializeUpgrade
parameter_list|(
name|NamespaceInfo
name|nsInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|initializeUpgrade
argument_list|()
condition|)
return|return;
comment|// distr upgrade is not needed
name|DataNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"\n   Distributed upgrade for DataNode "
operator|+
name|dataNode
operator|.
name|getMachineName
argument_list|()
operator|+
literal|" version "
operator|+
name|getUpgradeVersion
argument_list|()
operator|+
literal|" to current LV "
operator|+
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|" is initialized."
argument_list|)
expr_stmt|;
name|UpgradeObjectDatanode
name|curUO
init|=
operator|(
name|UpgradeObjectDatanode
operator|)
name|currentUpgrades
operator|.
name|first
argument_list|()
decl_stmt|;
name|curUO
operator|.
name|setDatanode
argument_list|(
name|dataNode
argument_list|,
name|this
operator|.
name|bpid
argument_list|)
expr_stmt|;
name|upgradeState
operator|=
name|curUO
operator|.
name|preUpgradeAction
argument_list|(
name|nsInfo
argument_list|)
expr_stmt|;
comment|// upgradeState is true if the data-node should start the upgrade itself
block|}
comment|/**    * Start distributed upgrade.    * Instantiates distributed upgrade objects.    *     * @return true if distributed upgrade is required or false otherwise    * @throws IOException    */
DECL|method|startUpgrade ()
specifier|public
specifier|synchronized
name|boolean
name|startUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|upgradeState
condition|)
block|{
comment|// upgrade is already in progress
assert|assert
name|currentUpgrades
operator|!=
literal|null
operator|:
literal|"UpgradeManagerDatanode.currentUpgrades is null."
assert|;
name|UpgradeObjectDatanode
name|curUO
init|=
operator|(
name|UpgradeObjectDatanode
operator|)
name|currentUpgrades
operator|.
name|first
argument_list|()
decl_stmt|;
name|curUO
operator|.
name|startUpgrade
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|broadcastCommand
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|broadcastCommand
operator|.
name|getVersion
argument_list|()
operator|>
name|this
operator|.
name|getUpgradeVersion
argument_list|()
condition|)
block|{
comment|// stop broadcasting, the cluster moved on
comment|// start upgrade for the next version
name|broadcastCommand
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// the upgrade has been finished by this data-node,
comment|// but the cluster is still running it,
comment|// reply with the broadcast command
assert|assert
name|currentUpgrades
operator|==
literal|null
operator|:
literal|"UpgradeManagerDatanode.currentUpgrades is not null."
assert|;
assert|assert
name|upgradeDaemon
operator|==
literal|null
operator|:
literal|"UpgradeManagerDatanode.upgradeDaemon is not null."
assert|;
name|DatanodeProtocol
name|nn
init|=
name|dataNode
operator|.
name|getActiveNamenodeForBP
argument_list|(
name|bpid
argument_list|)
decl_stmt|;
name|nn
operator|.
name|processUpgradeCommand
argument_list|(
name|broadcastCommand
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|currentUpgrades
operator|==
literal|null
condition|)
name|currentUpgrades
operator|=
name|getDistributedUpgrades
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentUpgrades
operator|==
literal|null
condition|)
block|{
name|DataNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"\n   Distributed upgrade for DataNode version "
operator|+
name|getUpgradeVersion
argument_list|()
operator|+
literal|" to current LV "
operator|+
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|" cannot be started. "
operator|+
literal|"The upgrade object is not defined."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|upgradeState
operator|=
literal|true
expr_stmt|;
name|UpgradeObjectDatanode
name|curUO
init|=
operator|(
name|UpgradeObjectDatanode
operator|)
name|currentUpgrades
operator|.
name|first
argument_list|()
decl_stmt|;
name|curUO
operator|.
name|setDatanode
argument_list|(
name|dataNode
argument_list|,
name|this
operator|.
name|bpid
argument_list|)
expr_stmt|;
name|curUO
operator|.
name|startUpgrade
argument_list|()
expr_stmt|;
name|upgradeDaemon
operator|=
operator|new
name|Daemon
argument_list|(
name|curUO
argument_list|)
expr_stmt|;
name|upgradeDaemon
operator|.
name|start
argument_list|()
expr_stmt|;
name|DataNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"\n   Distributed upgrade for DataNode "
operator|+
name|dataNode
operator|.
name|getMachineName
argument_list|()
operator|+
literal|" version "
operator|+
name|getUpgradeVersion
argument_list|()
operator|+
literal|" to current LV "
operator|+
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|" is started."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|processUpgradeCommand (UpgradeCommand command )
specifier|synchronized
name|void
name|processUpgradeCommand
parameter_list|(
name|UpgradeCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|command
operator|.
name|getAction
argument_list|()
operator|==
name|UpgradeCommand
operator|.
name|UC_ACTION_START_UPGRADE
operator|:
literal|"Only start upgrade action can be processed at this time."
assert|;
name|this
operator|.
name|upgradeVersion
operator|=
name|command
operator|.
name|getVersion
argument_list|()
expr_stmt|;
comment|// Start distributed upgrade
if|if
condition|(
name|startUpgrade
argument_list|()
condition|)
comment|// upgrade started
return|return;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Distributed upgrade for DataNode "
operator|+
name|dataNode
operator|.
name|getMachineName
argument_list|()
operator|+
literal|" version "
operator|+
name|getUpgradeVersion
argument_list|()
operator|+
literal|" to current LV "
operator|+
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|" cannot be started. "
operator|+
literal|"The upgrade object is not defined."
argument_list|)
throw|;
block|}
DECL|method|completeUpgrade ()
specifier|public
specifier|synchronized
name|void
name|completeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|currentUpgrades
operator|!=
literal|null
operator|:
literal|"UpgradeManagerDatanode.currentUpgrades is null."
assert|;
name|UpgradeObjectDatanode
name|curUO
init|=
operator|(
name|UpgradeObjectDatanode
operator|)
name|currentUpgrades
operator|.
name|first
argument_list|()
decl_stmt|;
name|broadcastCommand
operator|=
name|curUO
operator|.
name|completeUpgrade
argument_list|()
expr_stmt|;
name|upgradeState
operator|=
literal|false
expr_stmt|;
name|currentUpgrades
operator|=
literal|null
expr_stmt|;
name|upgradeDaemon
operator|=
literal|null
expr_stmt|;
name|DataNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"\n   Distributed upgrade for DataNode "
operator|+
name|dataNode
operator|.
name|getMachineName
argument_list|()
operator|+
literal|" version "
operator|+
name|getUpgradeVersion
argument_list|()
operator|+
literal|" to current LV "
operator|+
name|HdfsConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|" is complete."
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdownUpgrade ()
specifier|synchronized
name|void
name|shutdownUpgrade
parameter_list|()
block|{
if|if
condition|(
name|upgradeDaemon
operator|!=
literal|null
condition|)
name|upgradeDaemon
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

