begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineImageViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineImageViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelStateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelUpstreamHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|DefaultChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequestDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|string
operator|.
name|StringEncoder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * WebImageViewer loads a fsimage and exposes read-only WebHDFS API for its  * namespace.  */
end_comment

begin_class
DECL|class|WebImageViewer
specifier|public
class|class
name|WebImageViewer
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WebImageViewer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|channel
specifier|private
name|Channel
name|channel
decl_stmt|;
DECL|field|address
specifier|private
name|InetSocketAddress
name|address
decl_stmt|;
DECL|field|factory
specifier|private
specifier|final
name|ChannelFactory
name|factory
init|=
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|bootstrap
specifier|private
specifier|final
name|ServerBootstrap
name|bootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|(
name|factory
argument_list|)
decl_stmt|;
DECL|field|allChannels
specifier|static
specifier|final
name|ChannelGroup
name|allChannels
init|=
operator|new
name|DefaultChannelGroup
argument_list|(
literal|"WebImageViewer"
argument_list|)
decl_stmt|;
DECL|method|WebImageViewer (InetSocketAddress address)
specifier|public
name|WebImageViewer
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
comment|/**    * Start WebImageViewer and wait until the thread is interrupted.    * @param fsimage the fsimage to load.    * @throws IOException if failed to load the fsimage.    */
DECL|method|initServerAndWait (String fsimage)
specifier|public
name|void
name|initServerAndWait
parameter_list|(
name|String
name|fsimage
parameter_list|)
throws|throws
name|IOException
block|{
name|initServer
argument_list|(
name|fsimage
argument_list|)
expr_stmt|;
try|try
block|{
name|channel
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted. Stopping the WebImageViewer."
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Start WebImageViewer.    * @param fsimage the fsimage to load.    * @throws IOException if fail to load the fsimage.    */
annotation|@
name|VisibleForTesting
DECL|method|initServer (String fsimage)
specifier|public
name|void
name|initServer
parameter_list|(
name|String
name|fsimage
parameter_list|)
throws|throws
name|IOException
block|{
name|FSImageLoader
name|loader
init|=
name|FSImageLoader
operator|.
name|load
argument_list|(
name|fsimage
argument_list|)
decl_stmt|;
name|ChannelPipeline
name|pipeline
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"channelTracker"
argument_list|,
operator|new
name|SimpleChannelUpstreamHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|channelOpen
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ChannelStateEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|allChannels
operator|.
name|add
argument_list|(
name|e
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"httpDecoder"
argument_list|,
operator|new
name|HttpRequestDecoder
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"requestHandler"
argument_list|,
operator|new
name|FSImageHandler
argument_list|(
name|loader
argument_list|)
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"stringEncoder"
argument_list|,
operator|new
name|StringEncoder
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"httpEncoder"
argument_list|,
operator|new
name|HttpResponseEncoder
argument_list|()
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|channel
operator|=
name|bootstrap
operator|.
name|bind
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|allChannels
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|address
operator|=
operator|(
name|InetSocketAddress
operator|)
name|channel
operator|.
name|getLocalAddress
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"WebImageViewer started. Listening on "
operator|+
name|address
operator|.
name|toString
argument_list|()
operator|+
literal|". Press Ctrl+C to stop the viewer."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stop WebImageViewer.    */
annotation|@
name|VisibleForTesting
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|allChannels
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|factory
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the listening port.    * @return the port WebImageViewer is listening on    */
annotation|@
name|VisibleForTesting
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|address
operator|.
name|getPort
argument_list|()
return|;
block|}
block|}
end_class

end_unit

