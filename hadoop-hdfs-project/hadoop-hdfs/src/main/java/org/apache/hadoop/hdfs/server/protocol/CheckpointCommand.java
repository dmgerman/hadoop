begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|CheckpointSignature
import|;
end_import

begin_comment
comment|/**  * Checkpoint command.  *<p>  * Returned to the backup node by the name-node as a reply to the  * {@link NamenodeProtocol#startCheckpoint(NamenodeRegistration)}  * request.<br>  * Contains:  *<ul>  *<li>{@link CheckpointSignature} identifying the particular checkpoint</li>  *<li>indicator whether the backup image should be discarded before starting   * the checkpoint</li>  *<li>indicator whether the image should be transfered back to the name-node  * upon completion of the checkpoint.</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|CheckpointCommand
specifier|public
class|class
name|CheckpointCommand
extends|extends
name|NamenodeCommand
block|{
DECL|field|cSig
specifier|private
name|CheckpointSignature
name|cSig
decl_stmt|;
DECL|field|needToReturnImage
specifier|private
name|boolean
name|needToReturnImage
decl_stmt|;
DECL|method|CheckpointCommand ()
specifier|public
name|CheckpointCommand
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|CheckpointCommand (CheckpointSignature sig, boolean needToReturnImg)
specifier|public
name|CheckpointCommand
parameter_list|(
name|CheckpointSignature
name|sig
parameter_list|,
name|boolean
name|needToReturnImg
parameter_list|)
block|{
name|super
argument_list|(
name|NamenodeProtocol
operator|.
name|ACT_CHECKPOINT
argument_list|)
expr_stmt|;
name|this
operator|.
name|cSig
operator|=
name|sig
expr_stmt|;
name|this
operator|.
name|needToReturnImage
operator|=
name|needToReturnImg
expr_stmt|;
block|}
comment|/**    * Checkpoint signature is used to ensure     * that nodes are talking about the same checkpoint.    */
DECL|method|getSignature ()
specifier|public
name|CheckpointSignature
name|getSignature
parameter_list|()
block|{
return|return
name|cSig
return|;
block|}
comment|/**    * Indicates whether the new checkpoint image needs to be transfered     * back to the name-node after the checkpoint is done.    *     * @return true if the checkpoint should be returned back.    */
DECL|method|needToReturnImage ()
specifier|public
name|boolean
name|needToReturnImage
parameter_list|()
block|{
return|return
name|needToReturnImage
return|;
block|}
comment|///////////////////////////////////////////
comment|// Writable
comment|///////////////////////////////////////////
static|static
block|{
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|CheckpointCommand
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|CheckpointCommand
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|cSig
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|needToReturnImage
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|cSig
operator|=
operator|new
name|CheckpointSignature
argument_list|()
expr_stmt|;
name|cSig
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|needToReturnImage
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

