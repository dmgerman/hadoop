begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
operator|.
name|DiffReportEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|BlocksMapUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodesInPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Manage snapshottable directories and their snapshots.  *   * This class includes operations that create, access, modify snapshots and/or  * snapshot-related data. In general, the locking structure of snapshot  * operations is:<br>  *   * 1. Lock the {@link FSNamesystem} lock in {@link FSNamesystem} before calling  * into {@link SnapshotManager} methods.<br>  * 2. Lock the {@link FSDirectory} lock for the {@link SnapshotManager} methods  * if necessary.  */
end_comment

begin_class
DECL|class|SnapshotManager
specifier|public
class|class
name|SnapshotManager
implements|implements
name|SnapshotStatsMXBean
block|{
DECL|field|allowNestedSnapshots
specifier|private
name|boolean
name|allowNestedSnapshots
init|=
literal|false
decl_stmt|;
DECL|field|fsdir
specifier|private
specifier|final
name|FSDirectory
name|fsdir
decl_stmt|;
DECL|field|SNAPSHOT_ID_BIT_WIDTH
specifier|private
specifier|static
specifier|final
name|int
name|SNAPSHOT_ID_BIT_WIDTH
init|=
literal|24
decl_stmt|;
DECL|field|numSnapshots
specifier|private
specifier|final
name|AtomicInteger
name|numSnapshots
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|snapshotCounter
specifier|private
name|int
name|snapshotCounter
init|=
literal|0
decl_stmt|;
comment|/** All snapshottable directories in the namesystem. */
DECL|field|snapshottables
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|INodeDirectory
argument_list|>
name|snapshottables
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|INodeDirectory
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|SnapshotManager (final FSDirectory fsdir)
specifier|public
name|SnapshotManager
parameter_list|(
specifier|final
name|FSDirectory
name|fsdir
parameter_list|)
block|{
name|this
operator|.
name|fsdir
operator|=
name|fsdir
expr_stmt|;
block|}
comment|/** Used in tests only */
DECL|method|setAllowNestedSnapshots (boolean allowNestedSnapshots)
name|void
name|setAllowNestedSnapshots
parameter_list|(
name|boolean
name|allowNestedSnapshots
parameter_list|)
block|{
name|this
operator|.
name|allowNestedSnapshots
operator|=
name|allowNestedSnapshots
expr_stmt|;
block|}
DECL|method|checkNestedSnapshottable (INodeDirectory dir, String path)
specifier|private
name|void
name|checkNestedSnapshottable
parameter_list|(
name|INodeDirectory
name|dir
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SnapshotException
block|{
if|if
condition|(
name|allowNestedSnapshots
condition|)
block|{
return|return;
block|}
for|for
control|(
name|INodeDirectory
name|s
range|:
name|snapshottables
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|isAncestorDirectory
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
literal|"Nested snapshottable directories not allowed: path="
operator|+
name|path
operator|+
literal|", the subdirectory "
operator|+
name|s
operator|.
name|getFullPathName
argument_list|()
operator|+
literal|" is already a snapshottable directory."
argument_list|)
throw|;
block|}
if|if
condition|(
name|dir
operator|.
name|isAncestorDirectory
argument_list|(
name|s
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
literal|"Nested snapshottable directories not allowed: path="
operator|+
name|path
operator|+
literal|", the ancestor "
operator|+
name|s
operator|.
name|getFullPathName
argument_list|()
operator|+
literal|" is already a snapshottable directory."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Set the given directory as a snapshottable directory.    * If the path is already a snapshottable directory, update the quota.    */
DECL|method|setSnapshottable (final String path, boolean checkNestedSnapshottable)
specifier|public
name|void
name|setSnapshottable
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|boolean
name|checkNestedSnapshottable
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|INodesInPath
name|iip
init|=
name|fsdir
operator|.
name|getINodesInPath4Write
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|INodeDirectory
name|d
init|=
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkNestedSnapshottable
condition|)
block|{
name|checkNestedSnapshottable
argument_list|(
name|d
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|.
name|isSnapshottable
argument_list|()
condition|)
block|{
comment|//The directory is already a snapshottable directory.
name|d
operator|.
name|setSnapshotQuota
argument_list|(
name|DirectorySnapshottableFeature
operator|.
name|SNAPSHOT_LIMIT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|.
name|addSnapshottableFeature
argument_list|()
expr_stmt|;
block|}
name|addSnapshottable
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|/** Add the given snapshottable directory to {@link #snapshottables}. */
DECL|method|addSnapshottable (INodeDirectory dir)
specifier|public
name|void
name|addSnapshottable
parameter_list|(
name|INodeDirectory
name|dir
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|dir
operator|.
name|isSnapshottable
argument_list|()
argument_list|)
expr_stmt|;
name|snapshottables
operator|.
name|put
argument_list|(
name|dir
operator|.
name|getId
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|/** Remove the given snapshottable directory from {@link #snapshottables}. */
DECL|method|removeSnapshottable (INodeDirectory s)
specifier|private
name|void
name|removeSnapshottable
parameter_list|(
name|INodeDirectory
name|s
parameter_list|)
block|{
name|snapshottables
operator|.
name|remove
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Remove snapshottable directories from {@link #snapshottables} */
DECL|method|removeSnapshottable (List<INodeDirectory> toRemove)
specifier|public
name|void
name|removeSnapshottable
parameter_list|(
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|toRemove
parameter_list|)
block|{
if|if
condition|(
name|toRemove
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INodeDirectory
name|s
range|:
name|toRemove
control|)
block|{
name|removeSnapshottable
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set the given snapshottable directory to non-snapshottable.    *     * @throws SnapshotException if there are snapshots in the directory.    */
DECL|method|resetSnapshottable (final String path)
specifier|public
name|void
name|resetSnapshottable
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|INodesInPath
name|iip
init|=
name|fsdir
operator|.
name|getINodesInPath4Write
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|INodeDirectory
name|d
init|=
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|DirectorySnapshottableFeature
name|sf
init|=
name|d
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
comment|// the directory is already non-snapshottable
return|return;
block|}
if|if
condition|(
name|sf
operator|.
name|getNumSnapshots
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
literal|"The directory "
operator|+
name|path
operator|+
literal|" has snapshot(s). "
operator|+
literal|"Please redo the operation after removing all the snapshots."
argument_list|)
throw|;
block|}
if|if
condition|(
name|d
operator|==
name|fsdir
operator|.
name|getRoot
argument_list|()
condition|)
block|{
name|d
operator|.
name|setSnapshotQuota
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|.
name|removeSnapshottableFeature
argument_list|()
expr_stmt|;
block|}
name|removeSnapshottable
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|/**   * Find the source root directory where the snapshot will be taken   * for a given path.   *   * @return Snapshottable directory.   * @throws IOException   *           Throw IOException when the given path does not lead to an   *           existing snapshottable directory.   */
DECL|method|getSnapshottableRoot (final INodesInPath iip)
specifier|public
name|INodeDirectory
name|getSnapshottableRoot
parameter_list|(
specifier|final
name|INodesInPath
name|iip
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|path
init|=
name|iip
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|INodeDirectory
name|dir
init|=
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isSnapshottable
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|dir
return|;
block|}
comment|/**    * Create a snapshot of the given path.    * It is assumed that the caller will perform synchronization.    *    * @param iip the INodes resolved from the snapshottable directory's path    * @param snapshotName    *          The name of the snapshot.    * @throws IOException    *           Throw IOException when 1) the given path does not lead to an    *           existing snapshottable directory, and/or 2) there exists a    *           snapshot with the given name for the directory, and/or 3)    *           snapshot number exceeds quota    */
DECL|method|createSnapshot (final INodesInPath iip, String snapshotRoot, String snapshotName)
specifier|public
name|String
name|createSnapshot
parameter_list|(
specifier|final
name|INodesInPath
name|iip
parameter_list|,
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeDirectory
name|srcRoot
init|=
name|getSnapshottableRoot
argument_list|(
name|iip
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotCounter
operator|==
name|getMaxSnapshotID
argument_list|()
condition|)
block|{
comment|// We have reached the maximum allowable snapshot ID and since we don't
comment|// handle rollover we will fail all subsequent snapshot creation
comment|// requests.
comment|//
throw|throw
operator|new
name|SnapshotException
argument_list|(
literal|"Failed to create the snapshot. The FileSystem has run out of "
operator|+
literal|"snapshot IDs and ID rollover is not supported."
argument_list|)
throw|;
block|}
name|srcRoot
operator|.
name|addSnapshot
argument_list|(
name|snapshotCounter
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
comment|//create success, update id
name|snapshotCounter
operator|++
expr_stmt|;
name|numSnapshots
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
return|return
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
name|snapshotName
argument_list|)
return|;
block|}
comment|/**    * Delete a snapshot for a snapshottable directory    * @param snapshotName Name of the snapshot to be deleted    * @param collectedBlocks Used to collect information to update blocksMap     * @throws IOException    */
DECL|method|deleteSnapshot (final INodesInPath iip, final String snapshotName, BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
specifier|final
name|INodesInPath
name|iip
parameter_list|,
specifier|final
name|String
name|snapshotName
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeDirectory
name|srcRoot
init|=
name|getSnapshottableRoot
argument_list|(
name|iip
argument_list|)
decl_stmt|;
name|srcRoot
operator|.
name|removeSnapshot
argument_list|(
name|fsdir
operator|.
name|getBlockStoragePolicySuite
argument_list|()
argument_list|,
name|snapshotName
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
expr_stmt|;
name|numSnapshots
operator|.
name|getAndDecrement
argument_list|()
expr_stmt|;
block|}
comment|/**    * Rename the given snapshot    * @param oldSnapshotName    *          Old name of the snapshot    * @param newSnapshotName    *          New name of the snapshot    * @throws IOException    *           Throw IOException when 1) the given path does not lead to an    *           existing snapshottable directory, and/or 2) the snapshot with the    *           old name does not exist for the directory, and/or 3) there exists    *           a snapshot with the new name for the directory    */
DECL|method|renameSnapshot (final INodesInPath iip, final String snapshotRoot, final String oldSnapshotName, final String newSnapshotName)
specifier|public
name|void
name|renameSnapshot
parameter_list|(
specifier|final
name|INodesInPath
name|iip
parameter_list|,
specifier|final
name|String
name|snapshotRoot
parameter_list|,
specifier|final
name|String
name|oldSnapshotName
parameter_list|,
specifier|final
name|String
name|newSnapshotName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|INodeDirectory
name|srcRoot
init|=
name|getSnapshottableRoot
argument_list|(
name|iip
argument_list|)
decl_stmt|;
name|srcRoot
operator|.
name|renameSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
name|oldSnapshotName
argument_list|,
name|newSnapshotName
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumSnapshottableDirs ()
specifier|public
name|int
name|getNumSnapshottableDirs
parameter_list|()
block|{
return|return
name|snapshottables
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getNumSnapshots ()
specifier|public
name|int
name|getNumSnapshots
parameter_list|()
block|{
return|return
name|numSnapshots
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setNumSnapshots (int num)
name|void
name|setNumSnapshots
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|numSnapshots
operator|.
name|set
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
DECL|method|getSnapshotCounter ()
name|int
name|getSnapshotCounter
parameter_list|()
block|{
return|return
name|snapshotCounter
return|;
block|}
DECL|method|setSnapshotCounter (int counter)
name|void
name|setSnapshotCounter
parameter_list|(
name|int
name|counter
parameter_list|)
block|{
name|snapshotCounter
operator|=
name|counter
expr_stmt|;
block|}
DECL|method|getSnapshottableDirs ()
name|INodeDirectory
index|[]
name|getSnapshottableDirs
parameter_list|()
block|{
return|return
name|snapshottables
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|INodeDirectory
index|[
name|snapshottables
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Write {@link #snapshotCounter}, {@link #numSnapshots},    * and all snapshots to the DataOutput.    */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|snapshotCounter
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|numSnapshots
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// write all snapshots.
for|for
control|(
name|INodeDirectory
name|snapshottableDir
range|:
name|snapshottables
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Snapshot
name|s
range|:
name|snapshottableDir
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|getSnapshotList
argument_list|()
control|)
block|{
name|s
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Read values of {@link #snapshotCounter}, {@link #numSnapshots}, and    * all snapshots from the DataInput    */
DECL|method|read (DataInput in, FSImageFormat.Loader loader )
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Snapshot
argument_list|>
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|FSImageFormat
operator|.
name|Loader
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshotCounter
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|numSnapshots
operator|.
name|set
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// read snapshots
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Snapshot
argument_list|>
name|snapshotMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Snapshot
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSnapshots
operator|.
name|get
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Snapshot
name|s
init|=
name|Snapshot
operator|.
name|read
argument_list|(
name|in
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|snapshotMap
operator|.
name|put
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshotMap
return|;
block|}
comment|/**    * List all the snapshottable directories that are owned by the current user.    * @param userName Current user name.    * @return Snapshottable directories that are owned by the current user,    *         represented as an array of {@link SnapshottableDirectoryStatus}. If    *         {@code userName} is null, return all the snapshottable dirs.    */
DECL|method|getSnapshottableDirListing ( String userName)
specifier|public
name|SnapshottableDirectoryStatus
index|[]
name|getSnapshottableDirListing
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
if|if
condition|(
name|snapshottables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|SnapshottableDirectoryStatus
argument_list|>
name|statusList
init|=
operator|new
name|ArrayList
argument_list|<
name|SnapshottableDirectoryStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|INodeDirectory
name|dir
range|:
name|snapshottables
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|userName
operator|==
literal|null
operator|||
name|userName
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
name|SnapshottableDirectoryStatus
name|status
init|=
operator|new
name|SnapshottableDirectoryStatus
argument_list|(
name|dir
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|dir
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|dir
operator|.
name|getFsPermission
argument_list|()
argument_list|,
name|dir
operator|.
name|getUserName
argument_list|()
argument_list|,
name|dir
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|dir
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
name|dir
operator|.
name|getId
argument_list|()
argument_list|,
name|dir
operator|.
name|getChildrenNum
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
argument_list|,
name|dir
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|getNumSnapshots
argument_list|()
argument_list|,
name|dir
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|getSnapshotQuota
argument_list|()
argument_list|,
name|dir
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|?
name|DFSUtil
operator|.
name|EMPTY_BYTES
else|:
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|dir
operator|.
name|getParent
argument_list|()
operator|.
name|getFullPathName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|statusList
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|statusList
argument_list|,
name|SnapshottableDirectoryStatus
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
return|return
name|statusList
operator|.
name|toArray
argument_list|(
operator|new
name|SnapshottableDirectoryStatus
index|[
name|statusList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Compute the difference between two snapshots of a directory, or between a    * snapshot of the directory and its current tree.    */
DECL|method|diff (final INodesInPath iip, final String snapshotRootPath, final String from, final String to)
specifier|public
name|SnapshotDiffReport
name|diff
parameter_list|(
specifier|final
name|INodesInPath
name|iip
parameter_list|,
specifier|final
name|String
name|snapshotRootPath
parameter_list|,
specifier|final
name|String
name|from
parameter_list|,
specifier|final
name|String
name|to
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Find the source root directory path where the snapshots were taken.
comment|// All the check for path has been included in the valueOf method.
specifier|final
name|INodeDirectory
name|snapshotRoot
init|=
name|getSnapshottableRoot
argument_list|(
name|iip
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|from
operator|==
literal|null
operator|||
name|from
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|to
operator|==
literal|null
operator|||
name|to
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// both fromSnapshot and toSnapshot indicate the current tree
return|return
operator|new
name|SnapshotDiffReport
argument_list|(
name|snapshotRootPath
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|Collections
operator|.
expr|<
name|DiffReportEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
specifier|final
name|SnapshotDiffInfo
name|diffs
init|=
name|snapshotRoot
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|computeDiff
argument_list|(
name|snapshotRoot
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
return|return
name|diffs
operator|!=
literal|null
condition|?
name|diffs
operator|.
name|generateReport
argument_list|()
else|:
operator|new
name|SnapshotDiffReport
argument_list|(
name|snapshotRootPath
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|Collections
operator|.
expr|<
name|DiffReportEntry
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|clearSnapshottableDirs ()
specifier|public
name|void
name|clearSnapshottableDirs
parameter_list|()
block|{
name|snapshottables
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the maximum allowable snapshot ID based on the bit width of the    * snapshot ID.    *    * @return maximum allowable snapshot ID.    */
DECL|method|getMaxSnapshotID ()
specifier|public
name|int
name|getMaxSnapshotID
parameter_list|()
block|{
return|return
operator|(
operator|(
literal|1
operator|<<
name|SNAPSHOT_ID_BIT_WIDTH
operator|)
operator|-
literal|1
operator|)
return|;
block|}
DECL|field|mxBeanName
specifier|private
name|ObjectName
name|mxBeanName
decl_stmt|;
DECL|method|registerMXBean ()
specifier|public
name|void
name|registerMXBean
parameter_list|()
block|{
name|mxBeanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"NameNode"
argument_list|,
literal|"SnapshotInfo"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|mxBeanName
argument_list|)
expr_stmt|;
name|mxBeanName
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
comment|// SnapshotStatsMXBean
specifier|public
name|SnapshottableDirectoryStatus
operator|.
name|Bean
index|[]
DECL|method|getSnapshottableDirectories ()
name|getSnapshottableDirectories
parameter_list|()
block|{
name|List
argument_list|<
name|SnapshottableDirectoryStatus
operator|.
name|Bean
argument_list|>
name|beans
init|=
operator|new
name|ArrayList
argument_list|<
name|SnapshottableDirectoryStatus
operator|.
name|Bean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|INodeDirectory
name|d
range|:
name|getSnapshottableDirs
argument_list|()
control|)
block|{
name|beans
operator|.
name|add
argument_list|(
name|toBean
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|beans
operator|.
name|toArray
argument_list|(
operator|new
name|SnapshottableDirectoryStatus
operator|.
name|Bean
index|[
name|beans
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// SnapshotStatsMXBean
DECL|method|getSnapshots ()
specifier|public
name|SnapshotInfo
operator|.
name|Bean
index|[]
name|getSnapshots
parameter_list|()
block|{
name|List
argument_list|<
name|SnapshotInfo
operator|.
name|Bean
argument_list|>
name|beans
init|=
operator|new
name|ArrayList
argument_list|<
name|SnapshotInfo
operator|.
name|Bean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|INodeDirectory
name|d
range|:
name|getSnapshottableDirs
argument_list|()
control|)
block|{
for|for
control|(
name|Snapshot
name|s
range|:
name|d
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|getSnapshotList
argument_list|()
control|)
block|{
name|beans
operator|.
name|add
argument_list|(
name|toBean
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|beans
operator|.
name|toArray
argument_list|(
operator|new
name|SnapshotInfo
operator|.
name|Bean
index|[
name|beans
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|toBean (INodeDirectory d)
specifier|public
specifier|static
name|SnapshottableDirectoryStatus
operator|.
name|Bean
name|toBean
parameter_list|(
name|INodeDirectory
name|d
parameter_list|)
block|{
return|return
operator|new
name|SnapshottableDirectoryStatus
operator|.
name|Bean
argument_list|(
name|d
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|d
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|getNumSnapshots
argument_list|()
argument_list|,
name|d
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|getSnapshotQuota
argument_list|()
argument_list|,
name|d
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|toOctalString
argument_list|(
name|d
operator|.
name|getFsPermissionShort
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|d
operator|.
name|getUserName
argument_list|()
argument_list|,
name|d
operator|.
name|getGroupName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toBean (Snapshot s)
specifier|public
specifier|static
name|SnapshotInfo
operator|.
name|Bean
name|toBean
parameter_list|(
name|Snapshot
name|s
parameter_list|)
block|{
return|return
operator|new
name|SnapshotInfo
operator|.
name|Bean
argument_list|(
name|s
operator|.
name|getRoot
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|s
operator|.
name|getRoot
argument_list|()
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|s
operator|.
name|getRoot
argument_list|()
operator|.
name|getModificationTime
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

