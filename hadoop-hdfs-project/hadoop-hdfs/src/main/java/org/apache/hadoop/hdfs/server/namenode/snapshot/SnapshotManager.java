begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Namesystem
import|;
end_import

begin_comment
comment|/** Manage snapshottable directories and their snapshots. */
end_comment

begin_class
DECL|class|SnapshotManager
specifier|public
class|class
name|SnapshotManager
block|{
DECL|field|namesystem
specifier|private
specifier|final
name|Namesystem
name|namesystem
decl_stmt|;
comment|/** All snapshottable directories in the namesystem. */
DECL|field|snapshottables
specifier|private
specifier|final
name|List
argument_list|<
name|INodeDirectorySnapshottable
argument_list|>
name|snapshottables
init|=
operator|new
name|ArrayList
argument_list|<
name|INodeDirectorySnapshottable
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|SnapshotManager (final Namesystem namesystem)
specifier|public
name|SnapshotManager
parameter_list|(
specifier|final
name|Namesystem
name|namesystem
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
block|}
comment|/**    * Set the given directory as a snapshottable directory.    * If the path is already a snapshottable directory, this is a no-op.    * Otherwise, the {@link INodeDirectory} of the path is replaced by an     * {@link INodeDirectorySnapshottable}.    */
DECL|method|setSnapshottable (final String path, final FSDirectory fsdir)
specifier|public
name|void
name|setSnapshottable
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|FSDirectory
name|fsdir
parameter_list|)
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|INodeDirectory
name|d
init|=
name|INodeDirectory
operator|.
name|valueOf
argument_list|(
name|fsdir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|isSnapshottable
argument_list|()
condition|)
block|{
comment|//The directory is already a snapshottable directory.
return|return;
block|}
specifier|final
name|INodeDirectorySnapshottable
name|s
init|=
name|INodeDirectorySnapshottable
operator|.
name|newInstance
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|fsdir
operator|.
name|replaceINodeDirectory
argument_list|(
name|path
argument_list|,
name|d
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|snapshottables
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Create a snapshot of given path. */
DECL|method|createSnapshot (final String snapshotName, final String path, final FSDirectory fsdir)
specifier|public
name|void
name|createSnapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|FSDirectory
name|fsdir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|INodeDirectorySnapshottable
name|d
init|=
name|INodeDirectorySnapshottable
operator|.
name|valueOf
argument_list|(
name|fsdir
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
comment|//TODO: check ns quota
specifier|final
name|INodeDirectorySnapshotRoot
name|root
init|=
name|d
operator|.
name|addSnapshotRoot
argument_list|(
name|snapshotName
argument_list|)
decl_stmt|;
comment|//TODO: create the remaining subtree
block|}
block|}
end_class

end_unit

