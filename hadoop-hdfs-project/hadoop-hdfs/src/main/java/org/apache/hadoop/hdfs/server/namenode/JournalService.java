begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|NameNodeProxies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LayoutVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnregisteredNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|JournalProtocolProtos
operator|.
name|JournalProtocolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|JournalProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|JournalProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|JournalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_comment
comment|/**  * This class interfaces with the namenode using {@link JournalProtocol} over  * RPC. It has two modes:<br>  *<ul>  *<li>Mode where an RPC.Server is provided from outside, on which it  * {@link JournalProtocol} is registered. The RPC.Server stop and start is  * managed outside by the application.</li>  *<li>Stand alone mode where an RPC.Server is started and managed by the  * JournalListener.</li>  *</ul>  *   * The received journal operations are sent to a listener over callbacks. The  * listener implementation can handle the callbacks based on the application  * requirement.  */
end_comment

begin_class
DECL|class|JournalService
specifier|public
class|class
name|JournalService
implements|implements
name|JournalProtocol
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JournalService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|JournalListener
name|listener
decl_stmt|;
DECL|field|internalRpcServer
specifier|private
specifier|final
name|boolean
name|internalRpcServer
decl_stmt|;
DECL|field|nnAddress
specifier|private
specifier|final
name|InetSocketAddress
name|nnAddress
decl_stmt|;
DECL|field|registration
specifier|private
specifier|final
name|NamenodeRegistration
name|registration
decl_stmt|;
DECL|field|namenode
specifier|private
specifier|final
name|NamenodeProtocol
name|namenode
decl_stmt|;
DECL|field|state
specifier|private
specifier|volatile
name|State
name|state
init|=
name|State
operator|.
name|INIT
decl_stmt|;
DECL|field|rpcServer
specifier|private
name|RPC
operator|.
name|Server
name|rpcServer
decl_stmt|;
DECL|enum|State
enum|enum
name|State
block|{
DECL|enumConstant|INIT
name|INIT
block|,
DECL|enumConstant|STARTING_UP
name|STARTING_UP
block|,
DECL|enumConstant|RUNNING
name|RUNNING
block|,
DECL|enumConstant|STOPPED
name|STOPPED
block|;   }
comment|/**    * JournalListener is a callback interface to handle journal records    * received from the namenode.    */
DECL|interface|JournalListener
specifier|public
interface|interface
name|JournalListener
block|{
comment|/**      * Check the namespace information returned by a namenode      * @param service service that is making the callback      * @param info returned namespace information from the namenode      *       * The application using {@link JournalService} can stop the service if      * {@code info} validation fails.      */
DECL|method|verifyVersion (JournalService service, NamespaceInfo info)
specifier|public
name|void
name|verifyVersion
parameter_list|(
name|JournalService
name|service
parameter_list|,
name|NamespaceInfo
name|info
parameter_list|)
function_decl|;
comment|/**      * Process the received Journal record      * @param service {@link JournalService} making the callback      * @param firstTxnId first transaction Id in the journal      * @param numTxns number of records      * @param records journal records      * @throws IOException on error      *       * Any IOException thrown from the listener is thrown back in       * {@link JournalProtocol#journal}      */
DECL|method|journal (JournalService service, long firstTxnId, int numTxns, byte[] records)
specifier|public
name|void
name|journal
parameter_list|(
name|JournalService
name|service
parameter_list|,
name|long
name|firstTxnId
parameter_list|,
name|int
name|numTxns
parameter_list|,
name|byte
index|[]
name|records
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Roll the editlog      * @param service {@link JournalService} making the callback      * @param txid transaction ID to roll at      *       * Any IOException thrown from the listener is thrown back in       * {@link JournalProtocol#startLogSegment}      */
DECL|method|rollLogs (JournalService service, long txid)
specifier|public
name|void
name|rollLogs
parameter_list|(
name|JournalService
name|service
parameter_list|,
name|long
name|txid
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Constructor to create {@link JournalService} based on an existing RPC server.    * After creating the service, the caller needs to start the RPC server.    *     * @param conf Configuration    * @param nnAddr host:port for the active Namenode's RPC server    * @param listener call-back interface to listen to journal activities    * @param rpcServer RPC server if the application has already one, which can be    *          reused. If this is null, then the RPC server is started by    *          {@link JournalService}    * @param reg namenode registration information if there is one already, say    *          if you are using this service in namenode. If it is null, then the    *          service creates a new registration.    * @throws IOException on error    */
DECL|method|JournalService (Configuration conf, InetSocketAddress nnAddr, JournalListener listener, RPC.Server rpcServer, NamenodeRegistration reg)
name|JournalService
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|nnAddr
parameter_list|,
name|JournalListener
name|listener
parameter_list|,
name|RPC
operator|.
name|Server
name|rpcServer
parameter_list|,
name|NamenodeRegistration
name|reg
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nnAddress
operator|=
name|nnAddr
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|registration
operator|=
name|reg
expr_stmt|;
name|this
operator|.
name|internalRpcServer
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddr
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|initRpcServer
argument_list|(
name|conf
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor to create {@link JournalService} where an RPC server is    * created by this service.    * @param conf Configuration    * @param nnAddr host:port for the active Namenode's RPC server    * @param serverAddress address to start RPC server to receive    *          {@link JournalProtocol} requests. This can be null, if    *          {@code server} is a valid server that is managed out side this    *          service.    * @param listener call-back interface to listen to journal activities    * @throws IOException on error    */
DECL|method|JournalService (Configuration conf, InetSocketAddress nnAddr, InetSocketAddress serverAddress, JournalListener listener)
name|JournalService
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|nnAddr
parameter_list|,
name|InetSocketAddress
name|serverAddress
parameter_list|,
name|JournalListener
name|listener
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|nnAddress
operator|=
name|nnAddr
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|internalRpcServer
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|NameNodeProxies
operator|.
name|createNonHAProxy
argument_list|(
name|conf
argument_list|,
name|nnAddr
argument_list|,
name|NamenodeProtocol
operator|.
name|class
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|initRpcServer
argument_list|(
name|conf
argument_list|,
name|serverAddress
argument_list|)
expr_stmt|;
name|String
name|addr
init|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
decl_stmt|;
name|StorageInfo
name|storage
init|=
operator|new
name|StorageInfo
argument_list|(
name|LayoutVersion
operator|.
name|getCurrentLayoutVersion
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|registration
operator|=
operator|new
name|NamenodeRegistration
argument_list|(
name|addr
argument_list|,
literal|""
argument_list|,
name|storage
argument_list|,
name|NamenodeRole
operator|.
name|BACKUP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start the service.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|state
operator|!=
name|State
operator|.
name|INIT
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Service cannot be started in state - "
operator|+
name|state
argument_list|)
expr_stmt|;
return|return;
block|}
name|state
operator|=
name|State
operator|.
name|STARTING_UP
expr_stmt|;
block|}
comment|// Start the RPC server
if|if
condition|(
name|internalRpcServer
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting rpc server"
argument_list|)
expr_stmt|;
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|boolean
name|registered
init|=
literal|false
decl_stmt|;
name|boolean
name|handshakeComplete
init|=
literal|false
decl_stmt|;
name|boolean
name|rollEdits
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|state
operator|==
name|State
operator|.
name|STARTING_UP
condition|)
block|{
try|try
block|{
comment|// Perform handshake
if|if
condition|(
operator|!
name|handshakeComplete
condition|)
block|{
name|handshake
argument_list|()
expr_stmt|;
name|handshakeComplete
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"handshake completed"
argument_list|)
expr_stmt|;
block|}
comment|// Register with the namenode
if|if
condition|(
operator|!
name|registered
condition|)
block|{
name|registerWithNamenode
argument_list|()
expr_stmt|;
name|registered
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registration completed"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rollEdits
condition|)
block|{
name|namenode
operator|.
name|rollEditLog
argument_list|()
expr_stmt|;
name|rollEdits
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Editlog roll completed"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|state
operator|=
name|State
operator|.
name|RUNNING
expr_stmt|;
block|}
block|}
comment|/**    * Stop the service. For application with RPC Server managed outside, the    * RPC Server must be stopped the application.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|STOPPED
condition|)
block|{
return|return;
block|}
name|state
operator|=
name|State
operator|.
name|STOPPED
expr_stmt|;
block|}
if|if
condition|(
name|internalRpcServer
operator|&&
name|rpcServer
operator|!=
literal|null
condition|)
block|{
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rpcServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|journal (NamenodeRegistration registration, long firstTxnId, int numTxns, byte[] records)
specifier|public
name|void
name|journal
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|long
name|firstTxnId
parameter_list|,
name|int
name|numTxns
parameter_list|,
name|byte
index|[]
name|records
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Received journal "
operator|+
name|firstTxnId
operator|+
literal|" "
operator|+
name|numTxns
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|listener
operator|.
name|journal
argument_list|(
name|this
argument_list|,
name|firstTxnId
argument_list|,
name|numTxns
argument_list|,
name|records
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startLogSegment (NamenodeRegistration registration, long txid)
specifier|public
name|void
name|startLogSegment
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|long
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Received startLogSegment "
operator|+
name|txid
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|listener
operator|.
name|rollLogs
argument_list|(
name|this
argument_list|,
name|txid
argument_list|)
expr_stmt|;
block|}
comment|/**     * Stand alone mode where RPC Server is created and managed by this service     */
DECL|method|initRpcServer (Configuration conf, InetSocketAddress serverAddress)
specifier|private
name|void
name|initRpcServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|serverAddress
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|JournalProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|JournalProtocolServerSideTranslatorPB
name|xlator
init|=
operator|new
name|JournalProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|service
init|=
name|JournalProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|xlator
argument_list|)
decl_stmt|;
name|rpcServer
operator|=
name|RPC
operator|.
name|getServer
argument_list|(
name|JournalProtocolPB
operator|.
name|class
argument_list|,
name|service
argument_list|,
name|serverAddress
operator|.
name|getHostName
argument_list|()
argument_list|,
name|serverAddress
operator|.
name|getPort
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * RPC Server is created and managed by the application - used by this service    */
DECL|method|initRpcServer (Configuration conf, RPC.Server server)
specifier|private
name|void
name|initRpcServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RPC
operator|.
name|Server
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcServer
operator|=
name|server
expr_stmt|;
name|JournalProtocolServerSideTranslatorPB
name|xlator
init|=
operator|new
name|JournalProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|BlockingService
name|service
init|=
name|JournalProtocolService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|xlator
argument_list|)
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|JournalProtocolPB
operator|.
name|class
argument_list|,
name|service
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
block|}
DECL|method|verify (NamenodeRegistration reg)
specifier|private
name|void
name|verify
parameter_list|(
name|NamenodeRegistration
name|reg
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|registration
operator|.
name|getRegistrationID
argument_list|()
operator|.
name|equals
argument_list|(
name|reg
operator|.
name|getRegistrationID
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid registrationID - expected: "
operator|+
name|registration
operator|.
name|getRegistrationID
argument_list|()
operator|+
literal|" received: "
operator|+
name|reg
operator|.
name|getRegistrationID
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnregisteredNodeException
argument_list|(
name|reg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Register this service with the active namenode.    */
DECL|method|registerWithNamenode ()
specifier|private
name|void
name|registerWithNamenode
parameter_list|()
throws|throws
name|IOException
block|{
name|NamenodeRegistration
name|nnReg
init|=
name|namenode
operator|.
name|register
argument_list|(
name|registration
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nnReg
operator|==
literal|null
condition|)
block|{
comment|// consider as a rejection
name|msg
operator|=
literal|"Registration rejected by "
operator|+
name|nnAddress
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|nnReg
operator|.
name|isRole
argument_list|(
name|NamenodeRole
operator|.
name|NAMENODE
argument_list|)
condition|)
block|{
name|msg
operator|=
literal|" Name-node "
operator|+
name|nnAddress
operator|+
literal|" is not active"
expr_stmt|;
block|}
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
comment|// stop the node
block|}
block|}
DECL|method|handshake ()
specifier|private
name|void
name|handshake
parameter_list|()
throws|throws
name|IOException
block|{
name|NamespaceInfo
name|nsInfo
init|=
name|namenode
operator|.
name|versionRequest
argument_list|()
decl_stmt|;
name|listener
operator|.
name|verifyVersion
argument_list|(
name|this
argument_list|,
name|nsInfo
argument_list|)
expr_stmt|;
name|registration
operator|.
name|setStorageInfo
argument_list|(
name|nsInfo
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

