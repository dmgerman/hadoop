begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ImageServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|DataTransferThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|URLConnectionFactory
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Util
specifier|public
specifier|final
class|class
name|Util
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Util
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|FILE_LENGTH
specifier|public
specifier|final
specifier|static
name|String
name|FILE_LENGTH
init|=
literal|"File-Length"
decl_stmt|;
DECL|field|CONTENT_LENGTH
specifier|public
specifier|final
specifier|static
name|String
name|CONTENT_LENGTH
init|=
literal|"Content-Length"
decl_stmt|;
DECL|field|MD5_HEADER
specifier|public
specifier|final
specifier|static
name|String
name|MD5_HEADER
init|=
literal|"X-MD5-Digest"
decl_stmt|;
DECL|field|CONTENT_TYPE
specifier|public
specifier|final
specifier|static
name|String
name|CONTENT_TYPE
init|=
literal|"Content-Type"
decl_stmt|;
DECL|field|CONTENT_TRANSFER_ENCODING
specifier|public
specifier|final
specifier|static
name|String
name|CONTENT_TRANSFER_ENCODING
init|=
literal|"Content-Transfer-Encoding"
decl_stmt|;
DECL|field|IO_FILE_BUFFER_SIZE
specifier|public
specifier|final
specifier|static
name|int
name|IO_FILE_BUFFER_SIZE
decl_stmt|;
DECL|field|isSpnegoEnabled
specifier|private
specifier|static
specifier|final
name|boolean
name|isSpnegoEnabled
decl_stmt|;
DECL|field|connectionFactory
specifier|public
specifier|static
specifier|final
name|URLConnectionFactory
name|connectionFactory
decl_stmt|;
static|static
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|connectionFactory
operator|=
name|URLConnectionFactory
operator|.
name|newDefaultURLConnectionFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|isSpnegoEnabled
operator|=
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
expr_stmt|;
name|IO_FILE_BUFFER_SIZE
operator|=
name|DFSUtilClient
operator|.
name|getIoFileBufferSize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Interprets the passed string as a URI. In case of error it     * assumes the specified string is a file.    *    * @param s the string to interpret    * @return the resulting URI    */
DECL|method|stringAsURI (String s)
specifier|static
name|URI
name|stringAsURI
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|u
init|=
literal|null
decl_stmt|;
comment|// try to make a URI
try|try
block|{
name|u
operator|=
operator|new
name|URI
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Syntax error in URI "
operator|+
name|s
operator|+
literal|". Please check hdfs configuration."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// if URI is null or scheme is undefined, then assume it's file://
if|if
condition|(
name|u
operator|==
literal|null
operator|||
name|u
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Path "
operator|+
name|s
operator|+
literal|" should be specified as a URI "
operator|+
literal|"in configuration files. Please update hdfs configuration."
argument_list|)
expr_stmt|;
name|u
operator|=
name|fileAsURI
argument_list|(
operator|new
name|File
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|u
return|;
block|}
comment|/**    * Converts the passed File to a URI. This method trims the trailing slash if    * one is appended because the underlying file is in fact a directory that    * exists.    *     * @param f the file to convert    * @return the resulting URI    */
DECL|method|fileAsURI (File f)
specifier|public
specifier|static
name|URI
name|fileAsURI
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|u
init|=
name|f
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
comment|// trim the trailing slash, if it's present
if|if
condition|(
name|u
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|String
name|uriAsString
init|=
name|u
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|u
operator|=
operator|new
name|URI
argument_list|(
name|uriAsString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uriAsString
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|u
return|;
block|}
comment|/**    * Converts a collection of strings into a collection of URIs.    * @param names collection of strings to convert to URIs    * @return collection of URIs    */
DECL|method|stringCollectionAsURIs ( Collection<String> names)
specifier|public
specifier|static
name|List
argument_list|<
name|URI
argument_list|>
name|stringCollectionAsURIs
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|uris
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
try|try
block|{
name|uris
operator|.
name|add
argument_list|(
name|stringAsURI
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while processing URI: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|uris
return|;
block|}
comment|/**    * Downloads the files at the specified url location into destination    * storage.    */
DECL|method|doGetUrl (URL url, List<File> localPaths, Storage dstStorage, boolean getChecksum, int timeout, DataTransferThrottler throttler)
specifier|public
specifier|static
name|MD5Hash
name|doGetUrl
parameter_list|(
name|URL
name|url
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|localPaths
parameter_list|,
name|Storage
name|dstStorage
parameter_list|,
name|boolean
name|getChecksum
parameter_list|,
name|int
name|timeout
parameter_list|,
name|DataTransferThrottler
name|throttler
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpURLConnection
name|connection
decl_stmt|;
try|try
block|{
name|connection
operator|=
operator|(
name|HttpURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|isSpnegoEnabled
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|setTimeout
argument_list|(
name|connection
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
name|HttpURLConnection
operator|.
name|HTTP_OK
condition|)
block|{
throw|throw
operator|new
name|HttpGetFailedException
argument_list|(
literal|"Image transfer servlet at "
operator|+
name|url
operator|+
literal|" failed with status code "
operator|+
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|"\nResponse message:\n"
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|,
name|connection
argument_list|)
throw|;
block|}
name|long
name|advertisedSize
decl_stmt|;
name|String
name|contentLength
init|=
name|connection
operator|.
name|getHeaderField
argument_list|(
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentLength
operator|!=
literal|null
condition|)
block|{
name|advertisedSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|contentLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|CONTENT_LENGTH
operator|+
literal|" header is not provided "
operator|+
literal|"by the namenode when trying to fetch "
operator|+
name|url
argument_list|)
throw|;
block|}
name|MD5Hash
name|advertisedDigest
init|=
name|parseMD5Header
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|String
name|fsImageName
init|=
name|connection
operator|.
name|getHeaderField
argument_list|(
name|ImageServlet
operator|.
name|HADOOP_IMAGE_EDITS_HEADER
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
return|return
name|receiveFile
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|localPaths
argument_list|,
name|dstStorage
argument_list|,
name|getChecksum
argument_list|,
name|advertisedSize
argument_list|,
name|advertisedDigest
argument_list|,
name|fsImageName
argument_list|,
name|stream
argument_list|,
name|throttler
argument_list|)
return|;
block|}
comment|/**    * Receives file at the url location from the input stream and puts them in    * the specified destination storage location.    */
DECL|method|receiveFile (String url, List<File> localPaths, Storage dstStorage, boolean getChecksum, long advertisedSize, MD5Hash advertisedDigest, String fsImageName, InputStream stream, DataTransferThrottler throttler)
specifier|public
specifier|static
name|MD5Hash
name|receiveFile
parameter_list|(
name|String
name|url
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|localPaths
parameter_list|,
name|Storage
name|dstStorage
parameter_list|,
name|boolean
name|getChecksum
parameter_list|,
name|long
name|advertisedSize
parameter_list|,
name|MD5Hash
name|advertisedDigest
parameter_list|,
name|String
name|fsImageName
parameter_list|,
name|InputStream
name|stream
parameter_list|,
name|DataTransferThrottler
name|throttler
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FileOutputStream
argument_list|,
name|File
argument_list|>
name|streamPathMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|xferStats
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|double
name|xferCombined
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|localPaths
operator|!=
literal|null
condition|)
block|{
comment|// If the local paths refer to directories, use the server-provided header
comment|// as the filename within that directory
name|List
argument_list|<
name|File
argument_list|>
name|newLocalPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|localPath
range|:
name|localPaths
control|)
block|{
if|if
condition|(
name|localPath
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|fsImageName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No filename header provided by server"
argument_list|)
throw|;
block|}
name|newLocalPaths
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|localPath
argument_list|,
name|fsImageName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newLocalPaths
operator|.
name|add
argument_list|(
name|localPath
argument_list|)
expr_stmt|;
block|}
block|}
name|localPaths
operator|=
name|newLocalPaths
expr_stmt|;
block|}
name|long
name|received
init|=
literal|0
decl_stmt|;
name|MessageDigest
name|digester
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getChecksum
condition|)
block|{
name|digester
operator|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
expr_stmt|;
name|stream
operator|=
operator|new
name|DigestInputStream
argument_list|(
name|stream
argument_list|,
name|digester
argument_list|)
expr_stmt|;
block|}
name|boolean
name|finishedReceiving
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|FileOutputStream
argument_list|>
name|outputStreams
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|localPaths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|f
range|:
name|localPaths
control|)
block|{
try|try
block|{
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Overwriting existing file "
operator|+
name|f
operator|+
literal|" with file downloaded from "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|outputStreams
operator|.
name|add
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|streamPathMap
operator|.
name|put
argument_list|(
name|fos
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to download file "
operator|+
name|f
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
comment|// This will be null if we're downloading the fsimage to a file
comment|// outside of an NNStorage directory.
if|if
condition|(
name|dstStorage
operator|!=
literal|null
operator|&&
operator|(
name|dstStorage
operator|instanceof
name|StorageErrorReporter
operator|)
condition|)
block|{
operator|(
operator|(
name|StorageErrorReporter
operator|)
name|dstStorage
operator|)
operator|.
name|reportErrorOnFile
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|outputStreams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to download to any storage directory"
argument_list|)
throw|;
block|}
block|}
name|int
name|num
init|=
literal|1
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|IO_FILE_BUFFER_SIZE
index|]
decl_stmt|;
while|while
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|num
operator|=
name|stream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|received
operator|+=
name|num
expr_stmt|;
for|for
control|(
name|FileOutputStream
name|fos
range|:
name|outputStreams
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|throttler
operator|!=
literal|null
condition|)
block|{
name|throttler
operator|.
name|throttle
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|finishedReceiving
operator|=
literal|true
expr_stmt|;
name|double
name|xferSec
init|=
name|Math
operator|.
name|max
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|startTime
argument_list|)
operator|)
operator|/
literal|1000.0
argument_list|,
literal|0.001
argument_list|)
decl_stmt|;
name|long
name|xferKb
init|=
name|received
operator|/
literal|1024
decl_stmt|;
name|xferCombined
operator|+=
name|xferSec
expr_stmt|;
name|xferStats
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" The file download took %.2fs at %.2f KB/s."
argument_list|,
name|xferSec
argument_list|,
name|xferKb
operator|/
name|xferSec
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|FileOutputStream
name|fos
range|:
name|outputStreams
control|)
block|{
name|long
name|flushStartTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|fos
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|double
name|writeSec
init|=
name|Math
operator|.
name|max
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|flushStartTime
operator|-
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
operator|)
operator|/
literal|1000.0
argument_list|,
literal|0.001
argument_list|)
decl_stmt|;
name|xferCombined
operator|+=
name|writeSec
expr_stmt|;
name|xferStats
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" Synchronous (fsync) write to disk of "
operator|+
name|streamPathMap
operator|.
name|get
argument_list|(
name|fos
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" took %.2fs."
argument_list|,
name|writeSec
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Something went wrong and did not finish reading.
comment|// Remove the temporary files.
if|if
condition|(
operator|!
name|finishedReceiving
condition|)
block|{
name|deleteTmpFiles
argument_list|(
name|localPaths
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|finishedReceiving
operator|&&
name|received
operator|!=
name|advertisedSize
condition|)
block|{
comment|// only throw this exception if we think we read all of it on our end
comment|// -- otherwise a client-side IOException would be masked by this
comment|// exception that makes it look like a server-side problem!
name|deleteTmpFiles
argument_list|(
name|localPaths
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File "
operator|+
name|url
operator|+
literal|" received length "
operator|+
name|received
operator|+
literal|" is not of the advertised size "
operator|+
name|advertisedSize
argument_list|)
throw|;
block|}
block|}
name|xferStats
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Combined time for file download and"
operator|+
literal|" fsync to all disks took %.2fs."
argument_list|,
name|xferCombined
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|xferStats
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|digester
operator|!=
literal|null
condition|)
block|{
name|MD5Hash
name|computedDigest
init|=
operator|new
name|MD5Hash
argument_list|(
name|digester
operator|.
name|digest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|advertisedDigest
operator|!=
literal|null
operator|&&
operator|!
name|computedDigest
operator|.
name|equals
argument_list|(
name|advertisedDigest
argument_list|)
condition|)
block|{
name|deleteTmpFiles
argument_list|(
name|localPaths
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File "
operator|+
name|url
operator|+
literal|" computed digest "
operator|+
name|computedDigest
operator|+
literal|" does not match advertised digest "
operator|+
name|advertisedDigest
argument_list|)
throw|;
block|}
return|return
name|computedDigest
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|deleteTmpFiles (List<File> files)
specifier|private
specifier|static
name|void
name|deleteTmpFiles
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|)
block|{
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting temporary files: "
operator|+
name|files
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Deleting "
operator|+
name|file
operator|+
literal|" has failed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Sets a timeout value in millisecods for the Http connection.    * @param connection the Http connection for which timeout needs to be set    * @param timeout value to be set as timeout in milliseconds    */
DECL|method|setTimeout (HttpURLConnection connection, int timeout)
specifier|public
specifier|static
name|void
name|setTimeout
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|connection
operator|.
name|setConnectTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setReadTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseMD5Header (HttpURLConnection connection)
specifier|private
specifier|static
name|MD5Hash
name|parseMD5Header
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
name|String
name|header
init|=
name|connection
operator|.
name|getHeaderField
argument_list|(
name|MD5_HEADER
argument_list|)
decl_stmt|;
return|return
operator|(
name|header
operator|!=
literal|null
operator|)
condition|?
operator|new
name|MD5Hash
argument_list|(
name|header
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|getAddressesList (URI uri)
specifier|public
specifier|static
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|getAddressesList
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|authority
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|authority
operator|!=
literal|null
operator|&&
operator|!
name|authority
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"URI has no authority: "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|authority
argument_list|,
literal|';'
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parts
index|[
name|i
index|]
operator|=
name|parts
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|addrs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|addr
range|:
name|parts
control|)
block|{
name|InetSocketAddress
name|isa
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_RPC_PORT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|isa
operator|.
name|isUnresolved
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnknownHostException
argument_list|(
name|addr
argument_list|)
throw|;
block|}
name|addrs
operator|.
name|add
argument_list|(
name|isa
argument_list|)
expr_stmt|;
block|}
return|return
name|addrs
return|;
block|}
DECL|method|getLoggerAddresses (URI uri, Set<InetSocketAddress> addrsToExclude)
specifier|public
specifier|static
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|getLoggerAddresses
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Set
argument_list|<
name|InetSocketAddress
argument_list|>
name|addrsToExclude
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|addrsList
init|=
name|getAddressesList
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|addrsList
operator|.
name|removeAll
argument_list|(
name|addrsToExclude
argument_list|)
expr_stmt|;
return|return
name|addrsList
return|;
block|}
DECL|method|isDiskStatsEnabled (double fileIOSamplingFraction)
specifier|public
specifier|static
name|boolean
name|isDiskStatsEnabled
parameter_list|(
name|double
name|fileIOSamplingFraction
parameter_list|)
block|{
specifier|final
name|boolean
name|isEnabled
decl_stmt|;
if|if
condition|(
name|fileIOSamplingFraction
operator|<
literal|0.000001
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FILEIO_PROFILING_SAMPLING_FRACTION_KEY
operator|+
literal|" set to "
operator|+
name|fileIOSamplingFraction
operator|+
literal|". Disabling file IO profiling"
argument_list|)
expr_stmt|;
name|isEnabled
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_FILEIO_PROFILING_SAMPLING_FRACTION_KEY
operator|+
literal|" set to "
operator|+
name|fileIOSamplingFraction
operator|+
literal|". Enabling file IO profiling"
argument_list|)
expr_stmt|;
name|isEnabled
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|isEnabled
return|;
block|}
block|}
end_class

end_unit

