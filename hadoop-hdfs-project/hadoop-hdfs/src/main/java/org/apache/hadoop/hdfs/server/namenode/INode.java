begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockStoragePolicySuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockUnderConstructionFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
operator|.
name|DstReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
operator|.
name|WithName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ChunkedArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * We keep an in-memory representation of the file/block hierarchy.  * This is a base INode class containing common fields for file and   * directory inodes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|INode
specifier|public
specifier|abstract
class|class
name|INode
implements|implements
name|INodeAttributes
implements|,
name|Diff
operator|.
name|Element
argument_list|<
name|byte
index|[]
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|INode
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** parent is either an {@link INodeDirectory} or an {@link INodeReference}.*/
DECL|field|parent
specifier|private
name|INode
name|parent
init|=
literal|null
decl_stmt|;
DECL|method|INode (INode parent)
name|INode
parameter_list|(
name|INode
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/** Get inode id */
DECL|method|getId ()
specifier|public
specifier|abstract
name|long
name|getId
parameter_list|()
function_decl|;
comment|/**    * Check whether this is the root inode.    */
DECL|method|isRoot ()
specifier|final
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|getLocalNameBytes
argument_list|()
operator|.
name|length
operator|==
literal|0
return|;
block|}
comment|/** Get the {@link PermissionStatus} */
DECL|method|getPermissionStatus (int snapshotId)
specifier|abstract
name|PermissionStatus
name|getPermissionStatus
parameter_list|(
name|int
name|snapshotId
parameter_list|)
function_decl|;
comment|/** The same as getPermissionStatus(null). */
DECL|method|getPermissionStatus ()
specifier|final
name|PermissionStatus
name|getPermissionStatus
parameter_list|()
block|{
return|return
name|getPermissionStatus
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
comment|/**    * @param snapshotId    *          if it is not {@link Snapshot#CURRENT_STATE_ID}, get the result    *          from the given snapshot; otherwise, get the result from the    *          current inode.    * @return user name    */
DECL|method|getUserName (int snapshotId)
specifier|abstract
name|String
name|getUserName
parameter_list|(
name|int
name|snapshotId
parameter_list|)
function_decl|;
comment|/** The same as getUserName(Snapshot.CURRENT_STATE_ID). */
annotation|@
name|Override
DECL|method|getUserName ()
specifier|public
specifier|final
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|getUserName
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
comment|/** Set user */
DECL|method|setUser (String user)
specifier|abstract
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
function_decl|;
comment|/** Set user */
DECL|method|setUser (String user, int latestSnapshotId)
specifier|final
name|INode
name|setUser
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
block|{
name|recordModification
argument_list|(
name|latestSnapshotId
argument_list|)
expr_stmt|;
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @param snapshotId    *          if it is not {@link Snapshot#CURRENT_STATE_ID}, get the result    *          from the given snapshot; otherwise, get the result from the    *          current inode.    * @return group name    */
DECL|method|getGroupName (int snapshotId)
specifier|abstract
name|String
name|getGroupName
parameter_list|(
name|int
name|snapshotId
parameter_list|)
function_decl|;
comment|/** The same as getGroupName(Snapshot.CURRENT_STATE_ID). */
annotation|@
name|Override
DECL|method|getGroupName ()
specifier|public
specifier|final
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|getGroupName
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
comment|/** Set group */
DECL|method|setGroup (String group)
specifier|abstract
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
function_decl|;
comment|/** Set group */
DECL|method|setGroup (String group, int latestSnapshotId)
specifier|final
name|INode
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
block|{
name|recordModification
argument_list|(
name|latestSnapshotId
argument_list|)
expr_stmt|;
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @param snapshotId    *          if it is not {@link Snapshot#CURRENT_STATE_ID}, get the result    *          from the given snapshot; otherwise, get the result from the    *          current inode.    * @return permission.    */
DECL|method|getFsPermission (int snapshotId)
specifier|abstract
name|FsPermission
name|getFsPermission
parameter_list|(
name|int
name|snapshotId
parameter_list|)
function_decl|;
comment|/** The same as getFsPermission(Snapshot.CURRENT_STATE_ID). */
annotation|@
name|Override
DECL|method|getFsPermission ()
specifier|public
specifier|final
name|FsPermission
name|getFsPermission
parameter_list|()
block|{
return|return
name|getFsPermission
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
comment|/** Set the {@link FsPermission} of this {@link INode} */
DECL|method|setPermission (FsPermission permission)
specifier|abstract
name|void
name|setPermission
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
function_decl|;
comment|/** Set the {@link FsPermission} of this {@link INode} */
DECL|method|setPermission (FsPermission permission, int latestSnapshotId)
name|INode
name|setPermission
parameter_list|(
name|FsPermission
name|permission
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
block|{
name|recordModification
argument_list|(
name|latestSnapshotId
argument_list|)
expr_stmt|;
name|setPermission
argument_list|(
name|permission
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getAclFeature (int snapshotId)
specifier|abstract
name|AclFeature
name|getAclFeature
parameter_list|(
name|int
name|snapshotId
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|getAclFeature ()
specifier|public
specifier|final
name|AclFeature
name|getAclFeature
parameter_list|()
block|{
return|return
name|getAclFeature
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
DECL|method|addAclFeature (AclFeature aclFeature)
specifier|abstract
name|void
name|addAclFeature
parameter_list|(
name|AclFeature
name|aclFeature
parameter_list|)
function_decl|;
DECL|method|addAclFeature (AclFeature aclFeature, int latestSnapshotId)
specifier|final
name|INode
name|addAclFeature
parameter_list|(
name|AclFeature
name|aclFeature
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
block|{
name|recordModification
argument_list|(
name|latestSnapshotId
argument_list|)
expr_stmt|;
name|addAclFeature
argument_list|(
name|aclFeature
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|removeAclFeature ()
specifier|abstract
name|void
name|removeAclFeature
parameter_list|()
function_decl|;
DECL|method|removeAclFeature (int latestSnapshotId)
specifier|final
name|INode
name|removeAclFeature
parameter_list|(
name|int
name|latestSnapshotId
parameter_list|)
block|{
name|recordModification
argument_list|(
name|latestSnapshotId
argument_list|)
expr_stmt|;
name|removeAclFeature
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @param snapshotId    *          if it is not {@link Snapshot#CURRENT_STATE_ID}, get the result    *          from the given snapshot; otherwise, get the result from the    *          current inode.    * @return XAttrFeature    */
DECL|method|getXAttrFeature (int snapshotId)
specifier|abstract
name|XAttrFeature
name|getXAttrFeature
parameter_list|(
name|int
name|snapshotId
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|getXAttrFeature ()
specifier|public
specifier|final
name|XAttrFeature
name|getXAttrFeature
parameter_list|()
block|{
return|return
name|getXAttrFeature
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
comment|/**    * Set<code>XAttrFeature</code>     */
DECL|method|addXAttrFeature (XAttrFeature xAttrFeature)
specifier|abstract
name|void
name|addXAttrFeature
parameter_list|(
name|XAttrFeature
name|xAttrFeature
parameter_list|)
function_decl|;
DECL|method|addXAttrFeature (XAttrFeature xAttrFeature, int latestSnapshotId)
specifier|final
name|INode
name|addXAttrFeature
parameter_list|(
name|XAttrFeature
name|xAttrFeature
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
block|{
name|recordModification
argument_list|(
name|latestSnapshotId
argument_list|)
expr_stmt|;
name|addXAttrFeature
argument_list|(
name|xAttrFeature
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Remove<code>XAttrFeature</code>     */
DECL|method|removeXAttrFeature ()
specifier|abstract
name|void
name|removeXAttrFeature
parameter_list|()
function_decl|;
DECL|method|removeXAttrFeature (int lastestSnapshotId)
specifier|final
name|INode
name|removeXAttrFeature
parameter_list|(
name|int
name|lastestSnapshotId
parameter_list|)
block|{
name|recordModification
argument_list|(
name|lastestSnapshotId
argument_list|)
expr_stmt|;
name|removeXAttrFeature
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @return if the given snapshot id is {@link Snapshot#CURRENT_STATE_ID},    *         return this; otherwise return the corresponding snapshot inode.    */
DECL|method|getSnapshotINode (final int snapshotId)
specifier|public
name|INodeAttributes
name|getSnapshotINode
parameter_list|(
specifier|final
name|int
name|snapshotId
parameter_list|)
block|{
return|return
name|this
return|;
block|}
comment|/** Is this inode in the latest snapshot? */
DECL|method|isInLatestSnapshot (final int latestSnapshotId)
specifier|public
specifier|final
name|boolean
name|isInLatestSnapshot
parameter_list|(
specifier|final
name|int
name|latestSnapshotId
parameter_list|)
block|{
if|if
condition|(
name|latestSnapshotId
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|||
name|latestSnapshotId
operator|==
name|Snapshot
operator|.
name|NO_SNAPSHOT_ID
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if parent is a reference node, parent must be a renamed node. We can
comment|// stop the check at the reference node.
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|isReference
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|INodeDirectory
name|parentDir
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentDir
operator|==
literal|null
condition|)
block|{
comment|// root
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|parentDir
operator|.
name|isInLatestSnapshot
argument_list|(
name|latestSnapshotId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|INode
name|child
init|=
name|parentDir
operator|.
name|getChild
argument_list|(
name|getLocalNameBytes
argument_list|()
argument_list|,
name|latestSnapshotId
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|==
name|child
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|child
operator|!=
literal|null
operator|&&
name|child
operator|.
name|isReference
argument_list|()
operator|&&
name|this
operator|==
name|child
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
return|;
block|}
comment|/** @return true if the given inode is an ancestor directory of this inode. */
DECL|method|isAncestorDirectory (final INodeDirectory dir)
specifier|public
specifier|final
name|boolean
name|isAncestorDirectory
parameter_list|(
specifier|final
name|INodeDirectory
name|dir
parameter_list|)
block|{
for|for
control|(
name|INodeDirectory
name|p
init|=
name|getParent
argument_list|()
init|;
name|p
operator|!=
literal|null
condition|;
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|==
name|dir
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * When {@link #recordModification} is called on a referred node,    * this method tells which snapshot the modification should be    * associated with: the snapshot that belongs to the SRC tree of the rename    * operation, or the snapshot belonging to the DST tree.    *     * @param latestInDst    *          id of the latest snapshot in the DST tree above the reference node    * @return True: the modification should be recorded in the snapshot that    *         belongs to the SRC tree. False: the modification should be    *         recorded in the snapshot that belongs to the DST tree.    */
DECL|method|shouldRecordInSrcSnapshot (final int latestInDst)
specifier|public
specifier|final
name|boolean
name|shouldRecordInSrcSnapshot
parameter_list|(
specifier|final
name|int
name|latestInDst
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|isReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|latestInDst
operator|==
name|Snapshot
operator|.
name|CURRENT_STATE_ID
condition|)
block|{
return|return
literal|true
return|;
block|}
name|INodeReference
name|withCount
init|=
name|getParentReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|withCount
operator|!=
literal|null
condition|)
block|{
name|int
name|dstSnapshotId
init|=
name|withCount
operator|.
name|getParentReference
argument_list|()
operator|.
name|getDstSnapshotId
argument_list|()
decl_stmt|;
if|if
condition|(
name|dstSnapshotId
operator|!=
name|Snapshot
operator|.
name|CURRENT_STATE_ID
operator|&&
name|dstSnapshotId
operator|>=
name|latestInDst
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * This inode is being modified.  The previous version of the inode needs to    * be recorded in the latest snapshot.    *    * @param latestSnapshotId The id of the latest snapshot that has been taken.    *                         Note that it is {@link Snapshot#CURRENT_STATE_ID}     *                         if no snapshots have been taken.    */
DECL|method|recordModification (final int latestSnapshotId)
specifier|abstract
name|void
name|recordModification
parameter_list|(
specifier|final
name|int
name|latestSnapshotId
parameter_list|)
function_decl|;
comment|/** Check whether it's a reference. */
DECL|method|isReference ()
specifier|public
name|boolean
name|isReference
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/** Cast this inode to an {@link INodeReference}.  */
DECL|method|asReference ()
specifier|public
name|INodeReference
name|asReference
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Current inode is not a reference: "
operator|+
name|this
operator|.
name|toDetailString
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Check whether it's a file.    */
DECL|method|isFile ()
specifier|public
name|boolean
name|isFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/** Cast this inode to an {@link INodeFile}.  */
DECL|method|asFile ()
specifier|public
name|INodeFile
name|asFile
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Current inode is not a file: "
operator|+
name|this
operator|.
name|toDetailString
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Check whether it's a directory    */
DECL|method|isDirectory ()
specifier|public
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/** Cast this inode to an {@link INodeDirectory}.  */
DECL|method|asDirectory ()
specifier|public
name|INodeDirectory
name|asDirectory
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Current inode is not a directory: "
operator|+
name|this
operator|.
name|toDetailString
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Check whether it's a symlink    */
DECL|method|isSymlink ()
specifier|public
name|boolean
name|isSymlink
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/** Cast this inode to an {@link INodeSymlink}.  */
DECL|method|asSymlink ()
specifier|public
name|INodeSymlink
name|asSymlink
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Current inode is not a symlink: "
operator|+
name|this
operator|.
name|toDetailString
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Clean the subtree under this inode and collect the blocks from the descents    * for further block deletion/update. The current inode can either resides in    * the current tree or be stored as a snapshot copy.    *     *<pre>    * In general, we have the following rules.     * 1. When deleting a file/directory in the current tree, we have different     * actions according to the type of the node to delete.     *     * 1.1 The current inode (this) is an {@link INodeFile}.     * 1.1.1 If {@code prior} is null, there is no snapshot taken on ancestors     * before. Thus we simply destroy (i.e., to delete completely, no need to save     * snapshot copy) the current INode and collect its blocks for further     * cleansing.    * 1.1.2 Else do nothing since the current INode will be stored as a snapshot    * copy.    *     * 1.2 The current inode is an {@link INodeDirectory}.    * 1.2.1 If {@code prior} is null, there is no snapshot taken on ancestors     * before. Similarly, we destroy the whole subtree and collect blocks.    * 1.2.2 Else do nothing with the current INode. Recursively clean its     * children.    *     * 1.3 The current inode is a file with snapshot.    * Call recordModification(..) to capture the current states.    * Mark the INode as deleted.    *     * 1.4 The current inode is an {@link INodeDirectory} with snapshot feature.    * Call recordModification(..) to capture the current states.     * Destroy files/directories created after the latest snapshot     * (i.e., the inodes stored in the created list of the latest snapshot).    * Recursively clean remaining children.     *    * 2. When deleting a snapshot.    * 2.1 To clean {@link INodeFile}: do nothing.    * 2.2 To clean {@link INodeDirectory}: recursively clean its children.    * 2.3 To clean INodeFile with snapshot: delete the corresponding snapshot in    * its diff list.    * 2.4 To clean {@link INodeDirectory} with snapshot: delete the corresponding     * snapshot in its diff list. Recursively clean its children.    *</pre>    *    * @param reclaimContext    *        Record blocks and inodes that need to be reclaimed.    * @param snapshotId    *        The id of the snapshot to delete.    *        {@link Snapshot#CURRENT_STATE_ID} means to delete the current    *        file/directory.    * @param priorSnapshotId    *        The id of the latest snapshot before the to-be-deleted snapshot.    *        When deleting a current inode, this parameter captures the latest    *        snapshot.    */
DECL|method|cleanSubtree (ReclaimContext reclaimContext, final int snapshotId, int priorSnapshotId)
specifier|public
specifier|abstract
name|void
name|cleanSubtree
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|,
specifier|final
name|int
name|snapshotId
parameter_list|,
name|int
name|priorSnapshotId
parameter_list|)
function_decl|;
comment|/**    * Destroy self and clear everything! If the INode is a file, this method    * collects its blocks for further block deletion. If the INode is a    * directory, the method goes down the subtree and collects blocks from the    * descents, and clears its parent/children references as well. The method    * also clears the diff list if the INode contains snapshot diff list.    *    * @param reclaimContext    *        Record blocks and inodes that need to be reclaimed.    */
DECL|method|destroyAndCollectBlocks (ReclaimContext reclaimContext)
specifier|public
specifier|abstract
name|void
name|destroyAndCollectBlocks
parameter_list|(
name|ReclaimContext
name|reclaimContext
parameter_list|)
function_decl|;
comment|/** Compute {@link ContentSummary}. Blocking call */
DECL|method|computeContentSummary ( BlockStoragePolicySuite bsps)
specifier|public
specifier|final
name|ContentSummary
name|computeContentSummary
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|)
throws|throws
name|AccessControlException
block|{
return|return
name|computeAndConvertContentSummary
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|,
operator|new
name|ContentSummaryComputationContext
argument_list|(
name|bsps
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Compute {@link ContentSummary}.     */
DECL|method|computeAndConvertContentSummary (int snapshotId, ContentSummaryComputationContext summary)
specifier|public
specifier|final
name|ContentSummary
name|computeAndConvertContentSummary
parameter_list|(
name|int
name|snapshotId
parameter_list|,
name|ContentSummaryComputationContext
name|summary
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|computeContentSummary
argument_list|(
name|snapshotId
argument_list|,
name|summary
argument_list|)
expr_stmt|;
specifier|final
name|ContentCounts
name|counts
init|=
name|summary
operator|.
name|getCounts
argument_list|()
decl_stmt|;
specifier|final
name|ContentCounts
name|snapshotCounts
init|=
name|summary
operator|.
name|getSnapshotCounts
argument_list|()
decl_stmt|;
specifier|final
name|QuotaCounts
name|q
init|=
name|getQuotaCounts
argument_list|()
decl_stmt|;
return|return
operator|new
name|ContentSummary
operator|.
name|Builder
argument_list|()
operator|.
name|length
argument_list|(
name|counts
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|fileCount
argument_list|(
name|counts
operator|.
name|getFileCount
argument_list|()
operator|+
name|counts
operator|.
name|getSymlinkCount
argument_list|()
argument_list|)
operator|.
name|directoryCount
argument_list|(
name|counts
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
operator|.
name|quota
argument_list|(
name|q
operator|.
name|getNameSpace
argument_list|()
argument_list|)
operator|.
name|spaceConsumed
argument_list|(
name|counts
operator|.
name|getStoragespace
argument_list|()
argument_list|)
operator|.
name|spaceQuota
argument_list|(
name|q
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
operator|.
name|typeConsumed
argument_list|(
name|counts
operator|.
name|getTypeSpaces
argument_list|()
argument_list|)
operator|.
name|typeQuota
argument_list|(
name|q
operator|.
name|getTypeSpaces
argument_list|()
operator|.
name|asArray
argument_list|()
argument_list|)
operator|.
name|snapshotLength
argument_list|(
name|snapshotCounts
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|snapshotFileCount
argument_list|(
name|snapshotCounts
operator|.
name|getFileCount
argument_list|()
argument_list|)
operator|.
name|snapshotDirectoryCount
argument_list|(
name|snapshotCounts
operator|.
name|getDirectoryCount
argument_list|()
argument_list|)
operator|.
name|snapshotSpaceConsumed
argument_list|(
name|snapshotCounts
operator|.
name|getStoragespace
argument_list|()
argument_list|)
operator|.
name|erasureCodingPolicy
argument_list|(
name|summary
operator|.
name|getErasureCodingPolicyName
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Count subtree content summary with a {@link ContentCounts}.    *    * @param snapshotId Specify the time range for the calculation. If this    *                   parameter equals to {@link Snapshot#CURRENT_STATE_ID},    *                   the result covers both the current states and all the    *                   snapshots. Otherwise the result only covers all the    *                   files/directories contained in the specific snapshot.    * @param summary the context object holding counts for the subtree.    * @return The same objects as summary.    */
DECL|method|computeContentSummary ( int snapshotId, ContentSummaryComputationContext summary)
specifier|public
specifier|abstract
name|ContentSummaryComputationContext
name|computeContentSummary
parameter_list|(
name|int
name|snapshotId
parameter_list|,
name|ContentSummaryComputationContext
name|summary
parameter_list|)
throws|throws
name|AccessControlException
function_decl|;
comment|/**    * Check and add namespace/storagespace/storagetype consumed to itself and the ancestors.    */
DECL|method|addSpaceConsumed (QuotaCounts counts)
specifier|public
name|void
name|addSpaceConsumed
parameter_list|(
name|QuotaCounts
name|counts
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|addSpaceConsumed
argument_list|(
name|counts
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the quota set for this inode    * @return the quota counts.  The count is -1 if it is not set.    */
DECL|method|getQuotaCounts ()
specifier|public
name|QuotaCounts
name|getQuotaCounts
parameter_list|()
block|{
return|return
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|nameSpace
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|storageSpace
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|typeSpaces
argument_list|(
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|isQuotaSet ()
specifier|public
specifier|final
name|boolean
name|isQuotaSet
parameter_list|()
block|{
specifier|final
name|QuotaCounts
name|qc
init|=
name|getQuotaCounts
argument_list|()
decl_stmt|;
return|return
name|qc
operator|.
name|anyNsSsCountGreaterOrEqual
argument_list|(
literal|0
argument_list|)
operator|||
name|qc
operator|.
name|anyTypeSpaceCountGreaterOrEqual
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Count subtree {@link Quota#NAMESPACE} and {@link Quota#STORAGESPACE} usages.    * Entry point for FSDirectory where blockStoragePolicyId is given its initial    * value.    */
DECL|method|computeQuotaUsage (BlockStoragePolicySuite bsps)
specifier|public
specifier|final
name|QuotaCounts
name|computeQuotaUsage
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|)
block|{
specifier|final
name|byte
name|storagePolicyId
init|=
name|isSymlink
argument_list|()
condition|?
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
else|:
name|getStoragePolicyID
argument_list|()
decl_stmt|;
return|return
name|computeQuotaUsage
argument_list|(
name|bsps
argument_list|,
name|storagePolicyId
argument_list|,
literal|true
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
comment|/**    * Count subtree {@link Quota#NAMESPACE} and {@link Quota#STORAGESPACE} usages.    *     * With the existence of {@link INodeReference}, the same inode and its    * subtree may be referred by multiple {@link WithName} nodes and a    * {@link DstReference} node. To avoid circles while quota usage computation,    * we have the following rules:    *     *<pre>    * 1. For a {@link DstReference} node, since the node must be in the current    * tree (or has been deleted as the end point of a series of rename     * operations), we compute the quota usage of the referred node (and its     * subtree) in the regular manner, i.e., including every inode in the current    * tree and in snapshot copies, as well as the size of diff list.    *     * 2. For a {@link WithName} node, since the node must be in a snapshot, we     * only count the quota usage for those nodes that still existed at the     * creation time of the snapshot associated with the {@link WithName} node.    * We do not count in the size of the diff list.      *<pre>    *    * @param bsps Block storage policy suite to calculate intended storage type usage    * @param blockStoragePolicyId block storage policy id of the current INode    * @param useCache Whether to use cached quota usage. Note that     *                 {@link WithName} node never uses cache for its subtree.    * @param lastSnapshotId {@link Snapshot#CURRENT_STATE_ID} indicates the     *                       computation is in the current tree. Otherwise the id    *                       indicates the computation range for a     *                       {@link WithName} node.    * @return The subtree quota counts.    */
DECL|method|computeQuotaUsage (BlockStoragePolicySuite bsps, byte blockStoragePolicyId, boolean useCache, int lastSnapshotId)
specifier|public
specifier|abstract
name|QuotaCounts
name|computeQuotaUsage
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|byte
name|blockStoragePolicyId
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|int
name|lastSnapshotId
parameter_list|)
function_decl|;
DECL|method|computeQuotaUsage (BlockStoragePolicySuite bsps, boolean useCache)
specifier|public
specifier|final
name|QuotaCounts
name|computeQuotaUsage
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|boolean
name|useCache
parameter_list|)
block|{
specifier|final
name|byte
name|storagePolicyId
init|=
name|isSymlink
argument_list|()
condition|?
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
else|:
name|getStoragePolicyID
argument_list|()
decl_stmt|;
return|return
name|computeQuotaUsage
argument_list|(
name|bsps
argument_list|,
name|storagePolicyId
argument_list|,
name|useCache
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
comment|/**    * @return null if the local name is null; otherwise, return the local name.    */
DECL|method|getLocalName ()
specifier|public
specifier|final
name|String
name|getLocalName
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|name
init|=
name|getLocalNameBytes
argument_list|()
decl_stmt|;
return|return
name|name
operator|==
literal|null
condition|?
literal|null
else|:
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
specifier|final
name|byte
index|[]
name|getKey
parameter_list|()
block|{
return|return
name|getLocalNameBytes
argument_list|()
return|;
block|}
comment|/**    * Set local file name    */
DECL|method|setLocalName (byte[] name)
specifier|public
specifier|abstract
name|void
name|setLocalName
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
function_decl|;
DECL|method|getFullPathName ()
specifier|public
name|String
name|getFullPathName
parameter_list|()
block|{
comment|// Get the full path name of this inode.
if|if
condition|(
name|isRoot
argument_list|()
condition|)
block|{
return|return
name|Path
operator|.
name|SEPARATOR
return|;
block|}
comment|// compute size of needed bytes for the path
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|INode
name|inode
init|=
name|this
init|;
name|inode
operator|!=
literal|null
condition|;
name|inode
operator|=
name|inode
operator|.
name|getParent
argument_list|()
control|)
block|{
comment|// add component + delimiter (if not tail component)
name|idx
operator|+=
name|inode
operator|.
name|getLocalNameBytes
argument_list|()
operator|.
name|length
operator|+
operator|(
name|inode
operator|!=
name|this
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
block|}
name|byte
index|[]
name|path
init|=
operator|new
name|byte
index|[
name|idx
index|]
decl_stmt|;
for|for
control|(
name|INode
name|inode
init|=
name|this
init|;
name|inode
operator|!=
literal|null
condition|;
name|inode
operator|=
name|inode
operator|.
name|getParent
argument_list|()
control|)
block|{
if|if
condition|(
name|inode
operator|!=
name|this
condition|)
block|{
name|path
index|[
operator|--
name|idx
index|]
operator|=
name|Path
operator|.
name|SEPARATOR_CHAR
expr_stmt|;
block|}
name|byte
index|[]
name|name
init|=
name|inode
operator|.
name|getLocalNameBytes
argument_list|()
decl_stmt|;
name|idx
operator|-=
name|name
operator|.
name|length
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|name
argument_list|,
literal|0
argument_list|,
name|path
argument_list|,
name|idx
argument_list|,
name|name
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|getPathComponents ()
specifier|public
name|byte
index|[]
index|[]
name|getPathComponents
parameter_list|()
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|INode
name|inode
init|=
name|this
init|;
name|inode
operator|!=
literal|null
condition|;
name|inode
operator|=
name|inode
operator|.
name|getParent
argument_list|()
control|)
block|{
name|n
operator|++
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|components
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|INode
name|inode
init|=
name|this
init|;
name|inode
operator|!=
literal|null
condition|;
name|inode
operator|=
name|inode
operator|.
name|getParent
argument_list|()
control|)
block|{
name|components
index|[
operator|--
name|n
index|]
operator|=
name|inode
operator|.
name|getLocalNameBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|components
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getLocalName
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getObjectString ()
specifier|public
specifier|final
name|String
name|getObjectString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"@"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|super
operator|.
name|hashCode
argument_list|()
argument_list|)
return|;
block|}
comment|/** @return a string description of the parent. */
annotation|@
name|VisibleForTesting
DECL|method|getParentString ()
specifier|public
specifier|final
name|String
name|getParentString
parameter_list|()
block|{
specifier|final
name|INodeReference
name|parentRef
init|=
name|getParentReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentRef
operator|!=
literal|null
condition|)
block|{
return|return
literal|"parentRef="
operator|+
name|parentRef
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"->"
return|;
block|}
else|else
block|{
specifier|final
name|INodeDirectory
name|parentDir
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentDir
operator|!=
literal|null
condition|)
block|{
return|return
literal|"parentDir="
operator|+
name|parentDir
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"/"
return|;
block|}
else|else
block|{
return|return
literal|"parent=null"
return|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|toDetailString ()
specifier|public
name|String
name|toDetailString
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|+
literal|"("
operator|+
name|getObjectString
argument_list|()
operator|+
literal|"), "
operator|+
name|getParentString
argument_list|()
return|;
block|}
comment|/** @return the parent directory */
DECL|method|getParent ()
specifier|public
specifier|final
name|INodeDirectory
name|getParent
parameter_list|()
block|{
return|return
name|parent
operator|==
literal|null
condition|?
literal|null
else|:
name|parent
operator|.
name|isReference
argument_list|()
condition|?
name|getParentReference
argument_list|()
operator|.
name|getParent
argument_list|()
else|:
name|parent
operator|.
name|asDirectory
argument_list|()
return|;
block|}
comment|/**    * @return the parent as a reference if this is a referred inode;    *         otherwise, return null.    */
DECL|method|getParentReference ()
specifier|public
name|INodeReference
name|getParentReference
parameter_list|()
block|{
return|return
name|parent
operator|==
literal|null
operator|||
operator|!
name|parent
operator|.
name|isReference
argument_list|()
condition|?
literal|null
else|:
operator|(
name|INodeReference
operator|)
name|parent
return|;
block|}
comment|/** Set parent directory */
DECL|method|setParent (INodeDirectory parent)
specifier|public
specifier|final
name|void
name|setParent
parameter_list|(
name|INodeDirectory
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/** Set container. */
DECL|method|setParentReference (INodeReference parent)
specifier|public
specifier|final
name|void
name|setParentReference
parameter_list|(
name|INodeReference
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/** Clear references to other objects. */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setParent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param snapshotId    *          if it is not {@link Snapshot#CURRENT_STATE_ID}, get the result    *          from the given snapshot; otherwise, get the result from the    *          current inode.    * @return modification time.    */
DECL|method|getModificationTime (int snapshotId)
specifier|abstract
name|long
name|getModificationTime
parameter_list|(
name|int
name|snapshotId
parameter_list|)
function_decl|;
comment|/** The same as getModificationTime(Snapshot.CURRENT_STATE_ID). */
annotation|@
name|Override
DECL|method|getModificationTime ()
specifier|public
specifier|final
name|long
name|getModificationTime
parameter_list|()
block|{
return|return
name|getModificationTime
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
comment|/** Update modification time if it is larger than the current value. */
DECL|method|updateModificationTime (long mtime, int latestSnapshotId)
specifier|public
specifier|abstract
name|INode
name|updateModificationTime
parameter_list|(
name|long
name|mtime
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
function_decl|;
comment|/** Set the last modification time of inode. */
DECL|method|setModificationTime (long modificationTime)
specifier|public
specifier|abstract
name|void
name|setModificationTime
parameter_list|(
name|long
name|modificationTime
parameter_list|)
function_decl|;
comment|/** Set the last modification time of inode. */
DECL|method|setModificationTime (long modificationTime, int latestSnapshotId)
specifier|public
specifier|final
name|INode
name|setModificationTime
parameter_list|(
name|long
name|modificationTime
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|)
block|{
name|recordModification
argument_list|(
name|latestSnapshotId
argument_list|)
expr_stmt|;
name|setModificationTime
argument_list|(
name|modificationTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @param snapshotId    *          if it is not {@link Snapshot#CURRENT_STATE_ID}, get the result    *          from the given snapshot; otherwise, get the result from the    *          current inode.    * @return access time    */
DECL|method|getAccessTime (int snapshotId)
specifier|abstract
name|long
name|getAccessTime
parameter_list|(
name|int
name|snapshotId
parameter_list|)
function_decl|;
comment|/** The same as getAccessTime(Snapshot.CURRENT_STATE_ID). */
annotation|@
name|Override
DECL|method|getAccessTime ()
specifier|public
specifier|final
name|long
name|getAccessTime
parameter_list|()
block|{
return|return
name|getAccessTime
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
return|;
block|}
comment|/**    * Set last access time of inode.    */
DECL|method|setAccessTime (long accessTime)
specifier|public
specifier|abstract
name|void
name|setAccessTime
parameter_list|(
name|long
name|accessTime
parameter_list|)
function_decl|;
comment|/**    * Set last access time of inode.    */
DECL|method|setAccessTime (long accessTime, int latestSnapshotId, boolean skipCaptureAccessTimeOnlyChangeInSnapshot)
specifier|public
specifier|final
name|INode
name|setAccessTime
parameter_list|(
name|long
name|accessTime
parameter_list|,
name|int
name|latestSnapshotId
parameter_list|,
name|boolean
name|skipCaptureAccessTimeOnlyChangeInSnapshot
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipCaptureAccessTimeOnlyChangeInSnapshot
condition|)
block|{
name|recordModification
argument_list|(
name|latestSnapshotId
argument_list|)
expr_stmt|;
block|}
name|setAccessTime
argument_list|(
name|accessTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * @return the latest block storage policy id of the INode. Specifically,    * if a storage policy is directly specified on the INode then return the ID    * of that policy. Otherwise follow the latest parental path and return the    * ID of the first specified storage policy.    */
DECL|method|getStoragePolicyID ()
specifier|public
specifier|abstract
name|byte
name|getStoragePolicyID
parameter_list|()
function_decl|;
comment|/**    * @return the storage policy directly specified on the INode. Return    * {@link HdfsConstants#BLOCK_STORAGE_POLICY_ID_UNSPECIFIED} if no policy has    * been specified.    */
DECL|method|getLocalStoragePolicyID ()
specifier|public
specifier|abstract
name|byte
name|getLocalStoragePolicyID
parameter_list|()
function_decl|;
comment|/**    * Get the storage policy ID while computing quota usage    * @param parentStoragePolicyId the storage policy ID of the parent directory    * @return the storage policy ID of this INode. Note that for an    * {@link INodeSymlink} we return {@link HdfsConstants#BLOCK_STORAGE_POLICY_ID_UNSPECIFIED}    * instead of throwing Exception    */
DECL|method|getStoragePolicyIDForQuota (byte parentStoragePolicyId)
specifier|public
name|byte
name|getStoragePolicyIDForQuota
parameter_list|(
name|byte
name|parentStoragePolicyId
parameter_list|)
block|{
name|byte
name|localId
init|=
name|isSymlink
argument_list|()
condition|?
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
else|:
name|getLocalStoragePolicyID
argument_list|()
decl_stmt|;
return|return
name|localId
operator|!=
name|HdfsConstants
operator|.
name|BLOCK_STORAGE_POLICY_ID_UNSPECIFIED
condition|?
name|localId
else|:
name|parentStoragePolicyId
return|;
block|}
comment|/**    * Breaks {@code path} into components.    * @return array of byte arrays each of which represents    * a single path component.    */
annotation|@
name|VisibleForTesting
DECL|method|getPathComponents (String path)
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|getPathComponents
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|checkAbsolutePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|DFSUtil
operator|.
name|getPathComponents
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**    * Splits an absolute {@code path} into an array of path components.    * @throws AssertionError if the given path is invalid.    * @return array of path components.    */
DECL|method|getPathNames (String path)
specifier|public
specifier|static
name|String
index|[]
name|getPathNames
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|checkAbsolutePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|StringUtils
operator|.
name|split
argument_list|(
name|path
argument_list|,
name|Path
operator|.
name|SEPARATOR_CHAR
argument_list|)
return|;
block|}
comment|/**    * Verifies if the path informed is a valid absolute path.    * @param path the absolute path to validate.    * @return true if the path is valid.    */
DECL|method|isValidAbsolutePath (final String path)
specifier|static
name|boolean
name|isValidAbsolutePath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
return|;
block|}
DECL|method|checkAbsolutePath (final String path)
specifier|private
specifier|static
name|void
name|checkAbsolutePath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isValidAbsolutePath
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Absolute path required, but got '"
operator|+
name|path
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareTo (byte[] bytes)
specifier|public
specifier|final
name|int
name|compareTo
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|DFSUtilClient
operator|.
name|compareBytes
argument_list|(
name|getLocalNameBytes
argument_list|()
argument_list|,
name|bytes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object that)
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|that
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|that
operator|==
literal|null
operator|||
operator|!
operator|(
name|that
operator|instanceof
name|INode
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getId
argument_list|()
operator|==
operator|(
operator|(
name|INode
operator|)
name|that
operator|)
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
name|long
name|id
init|=
name|getId
argument_list|()
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|id
operator|^
operator|(
name|id
operator|>>>
literal|32
operator|)
argument_list|)
return|;
block|}
comment|/**    * Dump the subtree starting from this inode.    * @return a text representation of the tree.    */
annotation|@
name|VisibleForTesting
DECL|method|dumpTreeRecursively ()
specifier|public
specifier|final
name|StringBuffer
name|dumpTreeRecursively
parameter_list|()
block|{
specifier|final
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|dumpTreeRecursively
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|getBuffer
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|dumpTreeRecursively (PrintStream out)
specifier|public
specifier|final
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|dumpTreeRecursively
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Dump tree recursively.    * @param prefix The prefix string that each line should print.    */
annotation|@
name|VisibleForTesting
DECL|method|dumpTreeRecursively (PrintWriter out, StringBuilder prefix, int snapshotId)
specifier|public
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuilder
name|prefix
parameter_list|,
name|int
name|snapshotId
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
specifier|final
name|String
name|name
init|=
name|getLocalName
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"/"
else|:
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"   ("
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|getObjectString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"), "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|getParentString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|", "
operator|+
name|getPermissionStatus
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Information used to record quota usage delta. This data structure is    * usually passed along with an operation like {@link #cleanSubtree}. Note    * that after the operation the delta counts should be decremented from the    * ancestral directories' quota usage.    */
DECL|class|QuotaDelta
specifier|public
specifier|static
class|class
name|QuotaDelta
block|{
DECL|field|counts
specifier|private
specifier|final
name|QuotaCounts
name|counts
decl_stmt|;
comment|/**      * The main usage of this map is to track the quota delta that should be      * applied to another path. This usually happens when we reclaim INodes and      * blocks while deleting snapshots, and hit an INodeReference. Because the      * quota usage for a renamed+snapshotted file/directory is counted in both      * the current and historical parents, any change of its quota usage may      * need to be propagated along its parent paths both before and after the      * rename.      */
DECL|field|updateMap
specifier|private
specifier|final
name|Map
argument_list|<
name|INode
argument_list|,
name|QuotaCounts
argument_list|>
name|updateMap
decl_stmt|;
comment|/**      * When deleting a snapshot we may need to update the quota for directories      * with quota feature. This map is used to capture these directories and      * their quota usage updates.      */
DECL|field|quotaDirMap
specifier|private
specifier|final
name|Map
argument_list|<
name|INodeDirectory
argument_list|,
name|QuotaCounts
argument_list|>
name|quotaDirMap
decl_stmt|;
DECL|method|QuotaDelta ()
specifier|public
name|QuotaDelta
parameter_list|()
block|{
name|counts
operator|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|updateMap
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|quotaDirMap
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
DECL|method|add (QuotaCounts update)
specifier|public
name|void
name|add
parameter_list|(
name|QuotaCounts
name|update
parameter_list|)
block|{
name|counts
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
DECL|method|addUpdatePath (INodeReference inode, QuotaCounts update)
specifier|public
name|void
name|addUpdatePath
parameter_list|(
name|INodeReference
name|inode
parameter_list|,
name|QuotaCounts
name|update
parameter_list|)
block|{
name|QuotaCounts
name|c
init|=
name|updateMap
operator|.
name|get
argument_list|(
name|inode
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|updateMap
operator|.
name|put
argument_list|(
name|inode
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
DECL|method|addQuotaDirUpdate (INodeDirectory dir, QuotaCounts update)
specifier|public
name|void
name|addQuotaDirUpdate
parameter_list|(
name|INodeDirectory
name|dir
parameter_list|,
name|QuotaCounts
name|update
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|dir
operator|.
name|isQuotaSet
argument_list|()
argument_list|)
expr_stmt|;
name|QuotaCounts
name|c
init|=
name|quotaDirMap
operator|.
name|get
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|quotaDirMap
operator|.
name|put
argument_list|(
name|dir
argument_list|,
name|update
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|add
argument_list|(
name|update
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCountsCopy ()
specifier|public
name|QuotaCounts
name|getCountsCopy
parameter_list|()
block|{
specifier|final
name|QuotaCounts
name|copy
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|copy
operator|.
name|add
argument_list|(
name|counts
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
DECL|method|setCounts (QuotaCounts c)
specifier|public
name|void
name|setCounts
parameter_list|(
name|QuotaCounts
name|c
parameter_list|)
block|{
name|this
operator|.
name|counts
operator|.
name|setNameSpace
argument_list|(
name|c
operator|.
name|getNameSpace
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|counts
operator|.
name|setStorageSpace
argument_list|(
name|c
operator|.
name|getStorageSpace
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|counts
operator|.
name|setTypeSpaces
argument_list|(
name|c
operator|.
name|getTypeSpaces
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getNsDelta ()
specifier|public
name|long
name|getNsDelta
parameter_list|()
block|{
name|long
name|nsDelta
init|=
name|counts
operator|.
name|getNameSpace
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|INode
argument_list|,
name|QuotaCounts
argument_list|>
name|entry
range|:
name|updateMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|nsDelta
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getNameSpace
argument_list|()
expr_stmt|;
block|}
return|return
name|nsDelta
return|;
block|}
DECL|method|getUpdateMap ()
specifier|public
name|Map
argument_list|<
name|INode
argument_list|,
name|QuotaCounts
argument_list|>
name|getUpdateMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|updateMap
argument_list|)
return|;
block|}
DECL|method|getQuotaDirMap ()
specifier|public
name|Map
argument_list|<
name|INodeDirectory
argument_list|,
name|QuotaCounts
argument_list|>
name|getQuotaDirMap
parameter_list|()
block|{
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|quotaDirMap
argument_list|)
return|;
block|}
block|}
comment|/**    * Context object to record blocks and inodes that need to be reclaimed    */
DECL|class|ReclaimContext
specifier|public
specifier|static
class|class
name|ReclaimContext
block|{
DECL|field|bsps
specifier|protected
specifier|final
name|BlockStoragePolicySuite
name|bsps
decl_stmt|;
DECL|field|collectedBlocks
specifier|protected
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
decl_stmt|;
DECL|field|removedINodes
specifier|protected
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
decl_stmt|;
DECL|field|removedUCFiles
specifier|protected
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|removedUCFiles
decl_stmt|;
comment|/** Used to collect quota usage delta */
DECL|field|quotaDelta
specifier|private
specifier|final
name|QuotaDelta
name|quotaDelta
decl_stmt|;
comment|/**      * @param bsps  *          block storage policy suite to calculate intended storage type  *          usage      * @param collectedBlocks *          blocks collected from the descents for further block *          deletion/update will be added to the given map.      * @param removedINodes *          INodes collected from the descents for further cleaning up of      * @param removedUCFiles      */
DECL|method|ReclaimContext ( BlockStoragePolicySuite bsps, BlocksMapUpdateInfo collectedBlocks, List<INode> removedINodes, List<Long> removedUCFiles)
specifier|public
name|ReclaimContext
parameter_list|(
name|BlockStoragePolicySuite
name|bsps
parameter_list|,
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|removedUCFiles
parameter_list|)
block|{
name|this
operator|.
name|bsps
operator|=
name|bsps
expr_stmt|;
name|this
operator|.
name|collectedBlocks
operator|=
name|collectedBlocks
expr_stmt|;
name|this
operator|.
name|removedINodes
operator|=
name|removedINodes
expr_stmt|;
name|this
operator|.
name|removedUCFiles
operator|=
name|removedUCFiles
expr_stmt|;
name|this
operator|.
name|quotaDelta
operator|=
operator|new
name|QuotaDelta
argument_list|()
expr_stmt|;
block|}
DECL|method|storagePolicySuite ()
specifier|public
name|BlockStoragePolicySuite
name|storagePolicySuite
parameter_list|()
block|{
return|return
name|bsps
return|;
block|}
DECL|method|collectedBlocks ()
specifier|public
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|()
block|{
return|return
name|collectedBlocks
return|;
block|}
DECL|method|quotaDelta ()
specifier|public
name|QuotaDelta
name|quotaDelta
parameter_list|()
block|{
return|return
name|quotaDelta
return|;
block|}
comment|/**      * make a copy with the same collectedBlocks, removedINodes, and      * removedUCFiles but a new quotaDelta.      */
DECL|method|getCopy ()
specifier|public
name|ReclaimContext
name|getCopy
parameter_list|()
block|{
return|return
operator|new
name|ReclaimContext
argument_list|(
name|bsps
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|,
name|removedUCFiles
argument_list|)
return|;
block|}
block|}
comment|/**    * Information used for updating the blocksMap when deleting files.    */
DECL|class|BlocksMapUpdateInfo
specifier|public
specifier|static
class|class
name|BlocksMapUpdateInfo
block|{
comment|/**      * The blocks whose replication factor need to be updated.      */
DECL|class|UpdatedReplicationInfo
specifier|public
specifier|static
class|class
name|UpdatedReplicationInfo
block|{
comment|/**        * the expected replication after the update.        */
DECL|field|targetReplication
specifier|private
specifier|final
name|short
name|targetReplication
decl_stmt|;
comment|/**        * The block whose replication needs to be updated.        */
DECL|field|block
specifier|private
specifier|final
name|BlockInfo
name|block
decl_stmt|;
DECL|method|UpdatedReplicationInfo (short targetReplication, BlockInfo block)
specifier|public
name|UpdatedReplicationInfo
parameter_list|(
name|short
name|targetReplication
parameter_list|,
name|BlockInfo
name|block
parameter_list|)
block|{
name|this
operator|.
name|targetReplication
operator|=
name|targetReplication
expr_stmt|;
name|this
operator|.
name|block
operator|=
name|block
expr_stmt|;
block|}
DECL|method|block ()
specifier|public
name|BlockInfo
name|block
parameter_list|()
block|{
return|return
name|block
return|;
block|}
DECL|method|targetReplication ()
specifier|public
name|short
name|targetReplication
parameter_list|()
block|{
return|return
name|targetReplication
return|;
block|}
block|}
comment|/**      * The list of blocks that need to be removed from blocksMap      */
DECL|field|toDeleteList
specifier|private
specifier|final
name|List
argument_list|<
name|BlockInfo
argument_list|>
name|toDeleteList
decl_stmt|;
comment|/**      * The list of blocks whose replication factor needs to be adjusted      */
DECL|field|toUpdateReplicationInfo
specifier|private
specifier|final
name|List
argument_list|<
name|UpdatedReplicationInfo
argument_list|>
name|toUpdateReplicationInfo
decl_stmt|;
DECL|method|BlocksMapUpdateInfo ()
specifier|public
name|BlocksMapUpdateInfo
parameter_list|()
block|{
name|toDeleteList
operator|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|toUpdateReplicationInfo
operator|=
operator|new
name|ChunkedArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return The list of blocks that need to be removed from blocksMap      */
DECL|method|getToDeleteList ()
specifier|public
name|List
argument_list|<
name|BlockInfo
argument_list|>
name|getToDeleteList
parameter_list|()
block|{
return|return
name|toDeleteList
return|;
block|}
DECL|method|toUpdateReplicationInfo ()
specifier|public
name|List
argument_list|<
name|UpdatedReplicationInfo
argument_list|>
name|toUpdateReplicationInfo
parameter_list|()
block|{
return|return
name|toUpdateReplicationInfo
return|;
block|}
comment|/**      * Add a to-be-deleted block into the      * {@link BlocksMapUpdateInfo#toDeleteList}      * @param toDelete the to-be-deleted block      */
DECL|method|addDeleteBlock (BlockInfo toDelete)
specifier|public
name|void
name|addDeleteBlock
parameter_list|(
name|BlockInfo
name|toDelete
parameter_list|)
block|{
assert|assert
name|toDelete
operator|!=
literal|null
operator|:
literal|"toDelete is null"
assert|;
name|toDelete
operator|.
name|delete
argument_list|()
expr_stmt|;
name|toDeleteList
operator|.
name|add
argument_list|(
name|toDelete
argument_list|)
expr_stmt|;
comment|// If the file is being truncated
comment|// the copy-on-truncate block should also be collected for deletion
name|BlockUnderConstructionFeature
name|uc
init|=
name|toDelete
operator|.
name|getUnderConstructionFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|uc
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BlockInfo
name|truncateBlock
init|=
name|uc
operator|.
name|getTruncateBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|truncateBlock
operator|==
literal|null
operator|||
name|truncateBlock
operator|.
name|equals
argument_list|(
name|toDelete
argument_list|)
condition|)
block|{
return|return;
block|}
name|addDeleteBlock
argument_list|(
name|truncateBlock
argument_list|)
expr_stmt|;
block|}
DECL|method|addUpdateReplicationFactor (BlockInfo block, short targetRepl)
specifier|public
name|void
name|addUpdateReplicationFactor
parameter_list|(
name|BlockInfo
name|block
parameter_list|,
name|short
name|targetRepl
parameter_list|)
block|{
name|toUpdateReplicationInfo
operator|.
name|add
argument_list|(
operator|new
name|UpdatedReplicationInfo
argument_list|(
name|targetRepl
argument_list|,
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clear {@link BlocksMapUpdateInfo#toDeleteList}      */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|toDeleteList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * INode feature such as {@link FileUnderConstructionFeature}    * and {@link DirectoryWithQuotaFeature}.    */
DECL|interface|Feature
specifier|public
interface|interface
name|Feature
block|{   }
block|}
end_class

end_unit

