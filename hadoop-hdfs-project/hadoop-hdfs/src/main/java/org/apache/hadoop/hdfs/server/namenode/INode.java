begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|SignedBytes
import|;
end_import

begin_comment
comment|/**  * We keep an in-memory representation of the file/block hierarchy.  * This is a base INode class containing common fields for file and   * directory inodes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|INode
specifier|public
specifier|abstract
class|class
name|INode
implements|implements
name|Comparable
argument_list|<
name|byte
index|[]
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|INode
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EMPTY_READ_ONLY_LIST
specifier|static
specifier|final
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|EMPTY_READ_ONLY_LIST
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|emptyList
argument_list|()
decl_stmt|;
comment|/**    * Assert that the snapshot parameter must be null since this class only take    * care current state. Subclasses should override the methods for handling the    * snapshot states.    */
DECL|method|assertNull (Snapshot snapshot)
specifier|static
name|void
name|assertNull
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
if|if
condition|(
name|snapshot
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"snapshot is not null: "
operator|+
name|snapshot
argument_list|)
throw|;
block|}
block|}
comment|/** A pair of objects. */
DECL|class|Pair
specifier|public
specifier|static
class|class
name|Pair
parameter_list|<
name|L
parameter_list|,
name|R
parameter_list|>
block|{
DECL|field|left
specifier|public
specifier|final
name|L
name|left
decl_stmt|;
DECL|field|right
specifier|public
specifier|final
name|R
name|right
decl_stmt|;
DECL|method|Pair (L left, R right)
specifier|public
name|Pair
parameter_list|(
name|L
name|left
parameter_list|,
name|R
name|right
parameter_list|)
block|{
name|this
operator|.
name|left
operator|=
name|left
expr_stmt|;
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
block|}
block|}
comment|/** A triple of objects. */
DECL|class|Triple
specifier|public
specifier|static
class|class
name|Triple
parameter_list|<
name|L
parameter_list|,
name|M
parameter_list|,
name|R
parameter_list|>
extends|extends
name|Pair
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
block|{
DECL|field|middle
specifier|public
specifier|final
name|M
name|middle
decl_stmt|;
DECL|method|Triple (L left, M middle, R right)
specifier|public
name|Triple
parameter_list|(
name|L
name|left
parameter_list|,
name|M
name|middle
parameter_list|,
name|R
name|right
parameter_list|)
block|{
name|super
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|this
operator|.
name|middle
operator|=
name|middle
expr_stmt|;
block|}
block|}
comment|/** Wrapper of two counters for namespace consumed and diskspace consumed. */
DECL|class|DirCounts
specifier|static
class|class
name|DirCounts
block|{
comment|/** namespace count */
DECL|field|nsCount
name|long
name|nsCount
init|=
literal|0
decl_stmt|;
comment|/** diskspace count */
DECL|field|dsCount
name|long
name|dsCount
init|=
literal|0
decl_stmt|;
comment|/** returns namespace count */
DECL|method|getNsCount ()
name|long
name|getNsCount
parameter_list|()
block|{
return|return
name|nsCount
return|;
block|}
comment|/** returns diskspace count */
DECL|method|getDsCount ()
name|long
name|getDsCount
parameter_list|()
block|{
return|return
name|dsCount
return|;
block|}
block|}
DECL|enum|PermissionStatusFormat
specifier|private
specifier|static
enum|enum
name|PermissionStatusFormat
block|{
DECL|enumConstant|MODE
name|MODE
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
block|,
DECL|enumConstant|GROUP
name|GROUP
argument_list|(
name|MODE
operator|.
name|OFFSET
operator|+
name|MODE
operator|.
name|LENGTH
argument_list|,
literal|25
argument_list|)
block|,
DECL|enumConstant|USER
name|USER
argument_list|(
name|GROUP
operator|.
name|OFFSET
operator|+
name|GROUP
operator|.
name|LENGTH
argument_list|,
literal|23
argument_list|)
block|;
DECL|field|OFFSET
specifier|final
name|int
name|OFFSET
decl_stmt|;
DECL|field|LENGTH
specifier|final
name|int
name|LENGTH
decl_stmt|;
comment|//bit length
DECL|field|MASK
specifier|final
name|long
name|MASK
decl_stmt|;
DECL|method|PermissionStatusFormat (int offset, int length)
name|PermissionStatusFormat
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|OFFSET
operator|=
name|offset
expr_stmt|;
name|LENGTH
operator|=
name|length
expr_stmt|;
name|MASK
operator|=
operator|(
operator|(
operator|-
literal|1L
operator|)
operator|>>>
operator|(
literal|64
operator|-
name|LENGTH
operator|)
operator|)
operator|<<
name|OFFSET
expr_stmt|;
block|}
DECL|method|retrieve (long record)
name|long
name|retrieve
parameter_list|(
name|long
name|record
parameter_list|)
block|{
return|return
operator|(
name|record
operator|&
name|MASK
operator|)
operator|>>>
name|OFFSET
return|;
block|}
DECL|method|combine (long bits, long record)
name|long
name|combine
parameter_list|(
name|long
name|bits
parameter_list|,
name|long
name|record
parameter_list|)
block|{
return|return
operator|(
name|record
operator|&
operator|~
name|MASK
operator|)
operator||
operator|(
name|bits
operator|<<
name|OFFSET
operator|)
return|;
block|}
comment|/** Encode the {@link PermissionStatus} to a long. */
DECL|method|toLong (PermissionStatus ps)
specifier|static
name|long
name|toLong
parameter_list|(
name|PermissionStatus
name|ps
parameter_list|)
block|{
name|long
name|permission
init|=
literal|0L
decl_stmt|;
specifier|final
name|int
name|user
init|=
name|SerialNumberManager
operator|.
name|INSTANCE
operator|.
name|getUserSerialNumber
argument_list|(
name|ps
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|permission
operator|=
name|USER
operator|.
name|combine
argument_list|(
name|user
argument_list|,
name|permission
argument_list|)
expr_stmt|;
specifier|final
name|int
name|group
init|=
name|SerialNumberManager
operator|.
name|INSTANCE
operator|.
name|getGroupSerialNumber
argument_list|(
name|ps
operator|.
name|getGroupName
argument_list|()
argument_list|)
decl_stmt|;
name|permission
operator|=
name|GROUP
operator|.
name|combine
argument_list|(
name|group
argument_list|,
name|permission
argument_list|)
expr_stmt|;
specifier|final
name|int
name|mode
init|=
name|ps
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
decl_stmt|;
name|permission
operator|=
name|MODE
operator|.
name|combine
argument_list|(
name|mode
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return
name|permission
return|;
block|}
block|}
comment|/**    * The inode id    */
DECL|field|id
specifier|final
specifier|private
name|long
name|id
decl_stmt|;
comment|/**    *  The inode name is in java UTF8 encoding;     *  The name in HdfsFileStatus should keep the same encoding as this.    *  if this encoding is changed, implicitly getFileInfo and listStatus in    *  clientProtocol are changed; The decoding at the client    *  side should change accordingly.    */
DECL|field|name
specifier|private
name|byte
index|[]
name|name
init|=
literal|null
decl_stmt|;
comment|/**     * Permission encoded using {@link PermissionStatusFormat}.    * Codes other than {@link #clonePermissionStatus(INode)}    * and {@link #updatePermissionStatus(PermissionStatusFormat, long)}    * should not modify it.    */
DECL|field|permission
specifier|private
name|long
name|permission
init|=
literal|0L
decl_stmt|;
DECL|field|parent
name|INodeDirectory
name|parent
init|=
literal|null
decl_stmt|;
DECL|field|modificationTime
specifier|private
name|long
name|modificationTime
init|=
literal|0L
decl_stmt|;
DECL|field|accessTime
specifier|private
name|long
name|accessTime
init|=
literal|0L
decl_stmt|;
DECL|method|INode (long id, byte[] name, long permission, INodeDirectory parent, long modificationTime, long accessTime)
specifier|private
name|INode
parameter_list|(
name|long
name|id
parameter_list|,
name|byte
index|[]
name|name
parameter_list|,
name|long
name|permission
parameter_list|,
name|INodeDirectory
name|parent
parameter_list|,
name|long
name|modificationTime
parameter_list|,
name|long
name|accessTime
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|permission
operator|=
name|permission
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|modificationTime
operator|=
name|modificationTime
expr_stmt|;
name|this
operator|.
name|accessTime
operator|=
name|accessTime
expr_stmt|;
block|}
DECL|method|INode (long id, byte[] name, PermissionStatus permissions, INodeDirectory parent, long modificationTime, long accessTime)
name|INode
parameter_list|(
name|long
name|id
parameter_list|,
name|byte
index|[]
name|name
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|INodeDirectory
name|parent
parameter_list|,
name|long
name|modificationTime
parameter_list|,
name|long
name|accessTime
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|PermissionStatusFormat
operator|.
name|toLong
argument_list|(
name|permissions
argument_list|)
argument_list|,
name|parent
argument_list|,
name|modificationTime
argument_list|,
name|accessTime
argument_list|)
expr_stmt|;
block|}
DECL|method|INode (long id, PermissionStatus permissions, long mtime, long atime)
name|INode
parameter_list|(
name|long
name|id
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|PermissionStatusFormat
operator|.
name|toLong
argument_list|(
name|permissions
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
DECL|method|INode (long id, String name, PermissionStatus permissions)
specifier|protected
name|INode
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|name
argument_list|)
argument_list|,
name|permissions
argument_list|,
literal|null
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/** @param other Other node to be copied */
DECL|method|INode (INode other)
name|INode
parameter_list|(
name|INode
name|other
parameter_list|)
block|{
name|this
argument_list|(
name|other
operator|.
name|id
argument_list|,
name|other
operator|.
name|name
argument_list|,
name|other
operator|.
name|permission
argument_list|,
name|other
operator|.
name|parent
argument_list|,
name|other
operator|.
name|modificationTime
argument_list|,
name|other
operator|.
name|accessTime
argument_list|)
expr_stmt|;
block|}
comment|/** Get inode id */
DECL|method|getId ()
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|/**    * Create a copy of this inode for snapshot.    *     * @return a pair of inodes, where the left inode is the current inode and    *         the right inode is the snapshot copy. The current inode usually is    *         the same object of this inode. However, in some cases, the inode    *         may be replaced with a new inode for maintaining snapshot data.    *         Then, the current inode is the new inode.    */
DECL|method|createSnapshotCopy ()
specifier|public
name|Pair
argument_list|<
name|?
extends|extends
name|INode
argument_list|,
name|?
extends|extends
name|INode
argument_list|>
name|createSnapshotCopy
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not support createSnapshotCopy()."
argument_list|)
throw|;
block|}
comment|/**    * Check whether this is the root inode.    */
DECL|method|isRoot ()
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|name
operator|.
name|length
operator|==
literal|0
return|;
block|}
comment|/** Clone the {@link PermissionStatus}. */
DECL|method|clonePermissionStatus (INode that)
name|void
name|clonePermissionStatus
parameter_list|(
name|INode
name|that
parameter_list|)
block|{
name|this
operator|.
name|permission
operator|=
name|that
operator|.
name|permission
expr_stmt|;
block|}
comment|/** Get the {@link PermissionStatus} */
DECL|method|getPermissionStatus (Snapshot snapshot)
specifier|public
name|PermissionStatus
name|getPermissionStatus
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
operator|new
name|PermissionStatus
argument_list|(
name|getUserName
argument_list|(
name|snapshot
argument_list|)
argument_list|,
name|getGroupName
argument_list|(
name|snapshot
argument_list|)
argument_list|,
name|getFsPermission
argument_list|(
name|snapshot
argument_list|)
argument_list|)
return|;
block|}
comment|/** The same as getPermissionStatus(null). */
DECL|method|getPermissionStatus ()
specifier|public
name|PermissionStatus
name|getPermissionStatus
parameter_list|()
block|{
return|return
name|getPermissionStatus
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|updatePermissionStatus (PermissionStatusFormat f, long n, Snapshot latest)
specifier|private
name|INode
name|updatePermissionStatus
parameter_list|(
name|PermissionStatusFormat
name|f
parameter_list|,
name|long
name|n
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
name|Pair
argument_list|<
name|?
extends|extends
name|INode
argument_list|,
name|?
extends|extends
name|INode
argument_list|>
name|pair
init|=
name|recordModification
argument_list|(
name|latest
argument_list|)
decl_stmt|;
name|INode
name|nodeToUpdate
init|=
name|pair
operator|!=
literal|null
condition|?
name|pair
operator|.
name|left
else|:
name|this
decl_stmt|;
name|nodeToUpdate
operator|.
name|permission
operator|=
name|f
operator|.
name|combine
argument_list|(
name|n
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return
name|nodeToUpdate
return|;
block|}
comment|/**    * @param snapshot    *          if it is not null, get the result from the given snapshot;    *          otherwise, get the result from the current inode.    * @return user name    */
DECL|method|getUserName (Snapshot snapshot)
specifier|public
name|String
name|getUserName
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|int
name|n
init|=
operator|(
name|int
operator|)
name|PermissionStatusFormat
operator|.
name|USER
operator|.
name|retrieve
argument_list|(
name|permission
argument_list|)
decl_stmt|;
return|return
name|SerialNumberManager
operator|.
name|INSTANCE
operator|.
name|getUser
argument_list|(
name|n
argument_list|)
return|;
block|}
comment|/** The same as getUserName(null). */
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|getUserName
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/** Set user */
DECL|method|setUser (String user, Snapshot latest)
specifier|protected
name|INode
name|setUser
parameter_list|(
name|String
name|user
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
name|int
name|n
init|=
name|SerialNumberManager
operator|.
name|INSTANCE
operator|.
name|getUserSerialNumber
argument_list|(
name|user
argument_list|)
decl_stmt|;
return|return
name|updatePermissionStatus
argument_list|(
name|PermissionStatusFormat
operator|.
name|USER
argument_list|,
name|n
argument_list|,
name|latest
argument_list|)
return|;
block|}
comment|/**    * @param snapshot    *          if it is not null, get the result from the given snapshot;    *          otherwise, get the result from the current inode.    * @return group name    */
DECL|method|getGroupName (Snapshot snapshot)
specifier|public
name|String
name|getGroupName
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|int
name|n
init|=
operator|(
name|int
operator|)
name|PermissionStatusFormat
operator|.
name|GROUP
operator|.
name|retrieve
argument_list|(
name|permission
argument_list|)
decl_stmt|;
return|return
name|SerialNumberManager
operator|.
name|INSTANCE
operator|.
name|getGroup
argument_list|(
name|n
argument_list|)
return|;
block|}
comment|/** The same as getGroupName(null). */
DECL|method|getGroupName ()
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|getGroupName
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/** Set group */
DECL|method|setGroup (String group, Snapshot latest)
specifier|protected
name|INode
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
name|int
name|n
init|=
name|SerialNumberManager
operator|.
name|INSTANCE
operator|.
name|getGroupSerialNumber
argument_list|(
name|group
argument_list|)
decl_stmt|;
return|return
name|updatePermissionStatus
argument_list|(
name|PermissionStatusFormat
operator|.
name|GROUP
argument_list|,
name|n
argument_list|,
name|latest
argument_list|)
return|;
block|}
comment|/**    * @param snapshot    *          if it is not null, get the result from the given snapshot;    *          otherwise, get the result from the current inode.    * @return permission.    */
DECL|method|getFsPermission (Snapshot snapshot)
specifier|public
name|FsPermission
name|getFsPermission
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|PermissionStatusFormat
operator|.
name|MODE
operator|.
name|retrieve
argument_list|(
name|permission
argument_list|)
argument_list|)
return|;
block|}
comment|/** The same as getFsPermission(null). */
DECL|method|getFsPermission ()
specifier|public
name|FsPermission
name|getFsPermission
parameter_list|()
block|{
return|return
name|getFsPermission
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|getFsPermissionShort ()
specifier|protected
name|short
name|getFsPermissionShort
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|PermissionStatusFormat
operator|.
name|MODE
operator|.
name|retrieve
argument_list|(
name|permission
argument_list|)
return|;
block|}
comment|/** Set the {@link FsPermission} of this {@link INode} */
DECL|method|setPermission (FsPermission permission, Snapshot latest)
name|INode
name|setPermission
parameter_list|(
name|FsPermission
name|permission
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
specifier|final
name|short
name|mode
init|=
name|permission
operator|.
name|toShort
argument_list|()
decl_stmt|;
return|return
name|updatePermissionStatus
argument_list|(
name|PermissionStatusFormat
operator|.
name|MODE
argument_list|,
name|mode
argument_list|,
name|latest
argument_list|)
return|;
block|}
comment|/**    * This inode is being modified.  The previous version of the inode needs to    * be recorded in the latest snapshot.    *    * @param latest the latest snapshot that has been taken.    *        Note that it is null if no snapshots have been taken.    * @return see {@link #createSnapshotCopy()}.     */
DECL|method|recordModification (Snapshot latest)
name|Pair
argument_list|<
name|?
extends|extends
name|INode
argument_list|,
name|?
extends|extends
name|INode
argument_list|>
name|recordModification
parameter_list|(
name|Snapshot
name|latest
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|isDirectory
argument_list|()
argument_list|,
literal|"this is an INodeDirectory, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|latest
operator|==
literal|null
condition|?
literal|null
else|:
name|parent
operator|.
name|saveChild2Snapshot
argument_list|(
name|this
argument_list|,
name|latest
argument_list|)
return|;
block|}
comment|/**    * Check whether it's a file.    */
DECL|method|isFile ()
specifier|public
name|boolean
name|isFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Check whether it's a directory    */
DECL|method|isDirectory ()
specifier|public
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Collect all the blocks in all children of this INode. Count and return the    * number of files in the sub tree. Also clears references since this INode is    * deleted.    *     * @param info    *          Containing all the blocks collected from the children of this    *          INode. These blocks later should be removed/updated in the    *          blocksMap.    */
DECL|method|collectSubtreeBlocksAndClear (BlocksMapUpdateInfo info)
specifier|abstract
name|int
name|collectSubtreeBlocksAndClear
parameter_list|(
name|BlocksMapUpdateInfo
name|info
parameter_list|)
function_decl|;
comment|/** Compute {@link ContentSummary}. */
DECL|method|computeContentSummary ()
specifier|public
specifier|final
name|ContentSummary
name|computeContentSummary
parameter_list|()
block|{
name|long
index|[]
name|a
init|=
name|computeContentSummary
argument_list|(
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|ContentSummary
argument_list|(
name|a
index|[
literal|0
index|]
argument_list|,
name|a
index|[
literal|1
index|]
argument_list|,
name|a
index|[
literal|2
index|]
argument_list|,
name|getNsQuota
argument_list|()
argument_list|,
name|a
index|[
literal|3
index|]
argument_list|,
name|getDsQuota
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return an array of three longs.     * 0: length, 1: file count, 2: directory count 3: disk space    */
DECL|method|computeContentSummary (long[] summary)
specifier|abstract
name|long
index|[]
name|computeContentSummary
parameter_list|(
name|long
index|[]
name|summary
parameter_list|)
function_decl|;
comment|/**    * Get the quota set for this inode    * @return the quota if it is set; -1 otherwise    */
DECL|method|getNsQuota ()
specifier|public
name|long
name|getNsQuota
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
DECL|method|getDsQuota ()
specifier|public
name|long
name|getDsQuota
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
DECL|method|isQuotaSet ()
name|boolean
name|isQuotaSet
parameter_list|()
block|{
return|return
name|getNsQuota
argument_list|()
operator|>=
literal|0
operator|||
name|getDsQuota
argument_list|()
operator|>=
literal|0
return|;
block|}
comment|/**    * Adds total number of names and total disk space taken under     * this tree to counts.    * Returns updated counts object.    */
DECL|method|spaceConsumedInTree (DirCounts counts)
specifier|abstract
name|DirCounts
name|spaceConsumedInTree
parameter_list|(
name|DirCounts
name|counts
parameter_list|)
function_decl|;
comment|/**    * @return null if the local name is null; otherwise, return the local name.    */
DECL|method|getLocalName ()
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|name
operator|==
literal|null
condition|?
literal|null
else|:
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getLocalParentDir ()
name|String
name|getLocalParentDir
parameter_list|()
block|{
name|INode
name|inode
init|=
name|isRoot
argument_list|()
condition|?
name|this
else|:
name|getParent
argument_list|()
decl_stmt|;
return|return
operator|(
name|inode
operator|!=
literal|null
operator|)
condition|?
name|inode
operator|.
name|getFullPathName
argument_list|()
else|:
literal|""
return|;
block|}
comment|/**    * @return null if the local name is null;    *         otherwise, return the local name byte array.    */
DECL|method|getLocalNameBytes ()
specifier|public
name|byte
index|[]
name|getLocalNameBytes
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Set local file name    */
DECL|method|setLocalName (String name)
specifier|public
name|void
name|setLocalName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setLocalName
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set local file name    */
DECL|method|setLocalName (byte[] name)
specifier|public
name|void
name|setLocalName
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getFullPathName ()
specifier|public
name|String
name|getFullPathName
parameter_list|()
block|{
comment|// Get the full path name of this inode.
return|return
name|FSDirectory
operator|.
name|getFullPathName
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|==
literal|null
condition|?
literal|"<name==null>"
else|:
name|getFullPathName
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getObjectString ()
specifier|public
name|String
name|getObjectString
parameter_list|()
block|{
specifier|final
name|String
name|s
init|=
name|super
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|lastIndexOf
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|toStringWithObjectType ()
specifier|public
name|String
name|toStringWithObjectType
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|+
literal|"("
operator|+
name|getObjectString
argument_list|()
operator|+
literal|")"
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|toDetailString ()
specifier|public
name|String
name|toDetailString
parameter_list|()
block|{
return|return
name|toStringWithObjectType
argument_list|()
operator|+
literal|", parent="
operator|+
operator|(
name|parent
operator|==
literal|null
condition|?
literal|null
else|:
name|parent
operator|.
name|toStringWithObjectType
argument_list|()
operator|)
return|;
block|}
comment|/**    * Get parent directory     * @return parent INode    */
DECL|method|getParent ()
specifier|public
name|INodeDirectory
name|getParent
parameter_list|()
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
comment|/** Set parent directory */
DECL|method|setParent (INodeDirectory parent)
specifier|public
name|void
name|setParent
parameter_list|(
name|INodeDirectory
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/**    * @param snapshot    *          if it is not null, get the result from the given snapshot;    *          otherwise, get the result from the current inode.    * @return modification time.    */
DECL|method|getModificationTime (Snapshot snapshot)
specifier|public
name|long
name|getModificationTime
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|this
operator|.
name|modificationTime
return|;
block|}
comment|/** The same as getModificationTime(null). */
DECL|method|getModificationTime ()
specifier|public
name|long
name|getModificationTime
parameter_list|()
block|{
return|return
name|getModificationTime
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/** Update modification time if it is larger than the current value. */
DECL|method|updateModificationTime (long mtime, Snapshot latest)
specifier|public
name|void
name|updateModificationTime
parameter_list|(
name|long
name|mtime
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
assert|assert
name|isDirectory
argument_list|()
assert|;
if|if
condition|(
name|mtime
operator|>
name|modificationTime
condition|)
block|{
name|setModificationTime
argument_list|(
name|mtime
argument_list|,
name|latest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cloneModificationTime (INode that)
name|void
name|cloneModificationTime
parameter_list|(
name|INode
name|that
parameter_list|)
block|{
name|this
operator|.
name|modificationTime
operator|=
name|that
operator|.
name|modificationTime
expr_stmt|;
block|}
comment|/**    * Always set the last modification time of inode.    */
DECL|method|setModificationTime (long modtime, Snapshot latest)
specifier|public
name|INode
name|setModificationTime
parameter_list|(
name|long
name|modtime
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
name|Pair
argument_list|<
name|?
extends|extends
name|INode
argument_list|,
name|?
extends|extends
name|INode
argument_list|>
name|pair
init|=
name|recordModification
argument_list|(
name|latest
argument_list|)
decl_stmt|;
name|INode
name|nodeToUpdate
init|=
name|pair
operator|!=
literal|null
condition|?
name|pair
operator|.
name|left
else|:
name|this
decl_stmt|;
name|nodeToUpdate
operator|.
name|modificationTime
operator|=
name|modtime
expr_stmt|;
return|return
name|nodeToUpdate
return|;
block|}
comment|/**    * @param snapshot    *          if it is not null, get the result from the given snapshot;    *          otherwise, get the result from the current inode.    * @return access time    */
DECL|method|getAccessTime (Snapshot snapshot)
specifier|public
name|long
name|getAccessTime
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|accessTime
return|;
block|}
comment|/** The same as getAccessTime(null). */
DECL|method|getAccessTime ()
specifier|public
name|long
name|getAccessTime
parameter_list|()
block|{
return|return
name|getAccessTime
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Set last access time of inode.    */
DECL|method|setAccessTime (long atime, Snapshot latest)
name|INode
name|setAccessTime
parameter_list|(
name|long
name|atime
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
name|Pair
argument_list|<
name|?
extends|extends
name|INode
argument_list|,
name|?
extends|extends
name|INode
argument_list|>
name|pair
init|=
name|recordModification
argument_list|(
name|latest
argument_list|)
decl_stmt|;
name|INode
name|nodeToUpdate
init|=
name|pair
operator|!=
literal|null
condition|?
name|pair
operator|.
name|left
else|:
name|this
decl_stmt|;
name|nodeToUpdate
operator|.
name|accessTime
operator|=
name|atime
expr_stmt|;
return|return
name|nodeToUpdate
return|;
block|}
comment|/**    * Is this inode being constructed?    */
DECL|method|isUnderConstruction ()
specifier|public
name|boolean
name|isUnderConstruction
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Check whether it's a symlink    */
DECL|method|isSymlink ()
specifier|public
name|boolean
name|isSymlink
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Breaks file path into components.    * @param path    * @return array of byte arrays each of which represents     * a single path component.    */
DECL|method|getPathComponents (String path)
specifier|static
name|byte
index|[]
index|[]
name|getPathComponents
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|getPathComponents
argument_list|(
name|getPathNames
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
comment|/** Convert strings to byte arrays for path components. */
DECL|method|getPathComponents (String[] strings)
specifier|static
name|byte
index|[]
index|[]
name|getPathComponents
parameter_list|(
name|String
index|[]
name|strings
parameter_list|)
block|{
if|if
condition|(
name|strings
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|byte
index|[]
index|[]
block|{
literal|null
block|}
return|;
block|}
name|byte
index|[]
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|strings
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strings
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|bytes
index|[
name|i
index|]
operator|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|strings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
comment|/**    * Splits an absolute path into an array of path components.    * @param path    * @throws AssertionError if the given path is invalid.    * @return array of path components.    */
DECL|method|getPathNames (String path)
specifier|static
name|String
index|[]
name|getPathNames
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Absolute path required"
argument_list|)
throw|;
block|}
return|return
name|StringUtils
operator|.
name|split
argument_list|(
name|path
argument_list|,
name|Path
operator|.
name|SEPARATOR_CHAR
argument_list|)
return|;
block|}
comment|/**    * Given some components, create a path name.    * @param components The path components    * @param start index    * @param end index    * @return concatenated path    */
DECL|method|constructPath (byte[][] components, int start, int end)
specifier|static
name|String
name|constructPath
parameter_list|(
name|byte
index|[]
index|[]
name|components
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|end
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|EMPTY_BYTES
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTES
init|=
block|{}
decl_stmt|;
annotation|@
name|Override
DECL|method|compareTo (byte[] bytes)
specifier|public
specifier|final
name|int
name|compareTo
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|left
init|=
name|name
operator|==
literal|null
condition|?
name|EMPTY_BYTES
else|:
name|name
decl_stmt|;
specifier|final
name|byte
index|[]
name|right
init|=
name|bytes
operator|==
literal|null
condition|?
name|EMPTY_BYTES
else|:
name|bytes
decl_stmt|;
return|return
name|SignedBytes
operator|.
name|lexicographicalComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object that)
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|that
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|that
operator|==
literal|null
operator|||
operator|!
operator|(
name|that
operator|instanceof
name|INode
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|name
argument_list|,
operator|(
operator|(
name|INode
operator|)
name|that
operator|)
operator|.
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|name
argument_list|)
return|;
block|}
comment|/**    * Create an INode; the inode's name is not set yet    *     * @param id preassigned inode id    * @param permissions permissions    * @param blocks blocks if a file    * @param symlink symblic link if a symbolic link    * @param replication replication factor    * @param modificationTime modification time    * @param atime access time    * @param nsQuota namespace quota    * @param dsQuota disk quota    * @param preferredBlockSize block size    * @return an inode    */
DECL|method|newINode (long id, PermissionStatus permissions, BlockInfo[] blocks, String symlink, short replication, long modificationTime, long atime, long nsQuota, long dsQuota, long preferredBlockSize)
specifier|static
name|INode
name|newINode
parameter_list|(
name|long
name|id
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|BlockInfo
index|[]
name|blocks
parameter_list|,
name|String
name|symlink
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|modificationTime
parameter_list|,
name|long
name|atime
parameter_list|,
name|long
name|nsQuota
parameter_list|,
name|long
name|dsQuota
parameter_list|,
name|long
name|preferredBlockSize
parameter_list|)
block|{
if|if
condition|(
name|symlink
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// check if symbolic link
return|return
operator|new
name|INodeSymlink
argument_list|(
name|id
argument_list|,
name|symlink
argument_list|,
name|modificationTime
argument_list|,
name|atime
argument_list|,
name|permissions
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|blocks
operator|==
literal|null
condition|)
block|{
comment|//not sym link and blocks null? directory!
if|if
condition|(
name|nsQuota
operator|>=
literal|0
operator|||
name|dsQuota
operator|>=
literal|0
condition|)
block|{
return|return
operator|new
name|INodeDirectoryWithQuota
argument_list|(
name|id
argument_list|,
name|permissions
argument_list|,
name|modificationTime
argument_list|,
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
return|;
block|}
comment|// regular directory
return|return
operator|new
name|INodeDirectory
argument_list|(
name|id
argument_list|,
name|permissions
argument_list|,
name|modificationTime
argument_list|)
return|;
block|}
comment|// file
return|return
operator|new
name|INodeFile
argument_list|(
name|id
argument_list|,
name|permissions
argument_list|,
name|blocks
argument_list|,
name|replication
argument_list|,
name|modificationTime
argument_list|,
name|atime
argument_list|,
name|preferredBlockSize
argument_list|)
return|;
block|}
comment|/**    * Dump the subtree starting from this inode.    * @return a text representation of the tree.    */
annotation|@
name|VisibleForTesting
DECL|method|dumpTreeRecursively ()
specifier|public
specifier|final
name|StringBuffer
name|dumpTreeRecursively
parameter_list|()
block|{
specifier|final
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|dumpTreeRecursively
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|getBuffer
argument_list|()
return|;
block|}
comment|/**    * Dump tree recursively.    * @param prefix The prefix string that each line should print.    */
annotation|@
name|VisibleForTesting
DECL|method|dumpTreeRecursively (PrintWriter out, StringBuilder prefix, Snapshot snapshot)
specifier|public
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuilder
name|prefix
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"   ("
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|getObjectString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"), parent="
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|parent
operator|==
literal|null
condition|?
literal|null
else|:
name|parent
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|INodeDirectory
name|dir
init|=
operator|(
name|INodeDirectory
operator|)
name|this
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|", size="
operator|+
name|dir
operator|.
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Information used for updating the blocksMap when deleting files.    */
DECL|class|BlocksMapUpdateInfo
specifier|public
specifier|static
class|class
name|BlocksMapUpdateInfo
implements|implements
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Block
argument_list|,
name|BlocksMapINodeUpdateEntry
argument_list|>
argument_list|>
block|{
DECL|field|updateMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Block
argument_list|,
name|BlocksMapINodeUpdateEntry
argument_list|>
name|updateMap
decl_stmt|;
DECL|method|BlocksMapUpdateInfo ()
specifier|public
name|BlocksMapUpdateInfo
parameter_list|()
block|{
name|updateMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Block
argument_list|,
name|BlocksMapINodeUpdateEntry
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Add a to-be-deleted block. This block should belongs to a file without      * snapshots. We thus only need to put a block-null pair into the updateMap.      *       * @param toDelete the to-be-deleted block      */
DECL|method|addDeleteBlock (Block toDelete)
specifier|public
name|void
name|addDeleteBlock
parameter_list|(
name|Block
name|toDelete
parameter_list|)
block|{
if|if
condition|(
name|toDelete
operator|!=
literal|null
condition|)
block|{
name|updateMap
operator|.
name|put
argument_list|(
name|toDelete
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a given block, as well as its old and new BlockCollection      * information, into the updateMap.      *       * @param toUpdateBlock      *          The given block      * @param entry      *          The BlocksMapINodeUpdateEntry instance containing both the      *          original BlockCollection of the given block and the new      *          BlockCollection of the given block for updating the blocksMap.      *          The new BlockCollection should be the INode of one of the      *          corresponding file's snapshot.      */
DECL|method|addUpdateBlock (Block toUpdateBlock, BlocksMapINodeUpdateEntry entry)
specifier|public
name|void
name|addUpdateBlock
parameter_list|(
name|Block
name|toUpdateBlock
parameter_list|,
name|BlocksMapINodeUpdateEntry
name|entry
parameter_list|)
block|{
name|updateMap
operator|.
name|put
argument_list|(
name|toUpdateBlock
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clear {@link BlocksMapUpdateInfo#updateMap}      */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|updateMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Block
argument_list|,
name|BlocksMapINodeUpdateEntry
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|updateMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
comment|/**    * When deleting a file with snapshot, we cannot directly remove its record    * from blocksMap. Instead, we should consider replacing the original record    * in blocksMap with INode of snapshot.    */
DECL|class|BlocksMapINodeUpdateEntry
specifier|public
specifier|static
class|class
name|BlocksMapINodeUpdateEntry
block|{
comment|/**      * The BlockCollection of the file to be deleted      */
DECL|field|toDelete
specifier|private
specifier|final
name|BlockCollection
name|toDelete
decl_stmt|;
comment|/**      * The BlockCollection of the to-be-deleted file's snapshot      */
DECL|field|toReplace
specifier|private
specifier|final
name|BlockCollection
name|toReplace
decl_stmt|;
DECL|method|BlocksMapINodeUpdateEntry (BlockCollection toDelete, BlockCollection toReplace)
specifier|public
name|BlocksMapINodeUpdateEntry
parameter_list|(
name|BlockCollection
name|toDelete
parameter_list|,
name|BlockCollection
name|toReplace
parameter_list|)
block|{
name|this
operator|.
name|toDelete
operator|=
name|toDelete
expr_stmt|;
name|this
operator|.
name|toReplace
operator|=
name|toReplace
expr_stmt|;
block|}
DECL|method|getToDelete ()
specifier|public
name|BlockCollection
name|getToDelete
parameter_list|()
block|{
return|return
name|toDelete
return|;
block|}
DECL|method|getToReplace ()
specifier|public
name|BlockCollection
name|getToReplace
parameter_list|()
block|{
return|return
name|toReplace
return|;
block|}
block|}
block|}
end_class

end_unit

