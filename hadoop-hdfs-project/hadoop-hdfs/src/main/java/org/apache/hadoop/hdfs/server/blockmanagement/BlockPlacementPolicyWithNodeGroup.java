begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSClusterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopologyWithNodeGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_comment
comment|/** The class is responsible for choosing the desired number of targets  * for placing block replicas on environment with node-group layer.  * The replica placement strategy is adjusted to:  * If the writer is on a datanode, the 1st replica is placed on the local   *     node (or local node-group), otherwise a random datanode.   * The 2nd replica is placed on a datanode that is on a different rack with 1st  *     replica node.   * The 3rd replica is placed on a datanode which is on a different node-group  *     but the same rack as the second replica node.  */
end_comment

begin_class
DECL|class|BlockPlacementPolicyWithNodeGroup
specifier|public
class|class
name|BlockPlacementPolicyWithNodeGroup
extends|extends
name|BlockPlacementPolicyDefault
block|{
DECL|method|BlockPlacementPolicyWithNodeGroup (Configuration conf, FSClusterStats stats, NetworkTopology clusterMap)
name|BlockPlacementPolicyWithNodeGroup
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSClusterStats
name|stats
parameter_list|,
name|NetworkTopology
name|clusterMap
parameter_list|)
block|{
name|initialize
argument_list|(
name|conf
argument_list|,
name|stats
argument_list|,
name|clusterMap
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockPlacementPolicyWithNodeGroup ()
name|BlockPlacementPolicyWithNodeGroup
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|initialize (Configuration conf, FSClusterStats stats, NetworkTopology clusterMap)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSClusterStats
name|stats
parameter_list|,
name|NetworkTopology
name|clusterMap
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|stats
argument_list|,
name|clusterMap
argument_list|)
expr_stmt|;
block|}
comment|/** choose local node of localMachine as the target.    * if localMachine is not available, choose a node on the same nodegroup or     * rack instead.    * @return the chosen node    */
annotation|@
name|Override
DECL|method|chooseLocalNode (DatanodeDescriptor localMachine, HashMap<Node, Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeDescriptor> results, boolean avoidStaleNodes)
specifier|protected
name|DatanodeDescriptor
name|chooseLocalNode
parameter_list|(
name|DatanodeDescriptor
name|localMachine
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|int
name|maxNodesPerRack
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|,
name|boolean
name|avoidStaleNodes
parameter_list|)
throws|throws
name|NotEnoughReplicasException
block|{
comment|// if no local machine, randomly choose one node
if|if
condition|(
name|localMachine
operator|==
literal|null
condition|)
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
comment|// otherwise try local machine first
name|Node
name|oldNode
init|=
name|excludedNodes
operator|.
name|put
argument_list|(
name|localMachine
argument_list|,
name|localMachine
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldNode
operator|==
literal|null
condition|)
block|{
comment|// was not in the excluded list
if|if
condition|(
name|isGoodTarget
argument_list|(
name|localMachine
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
literal|false
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|localMachine
argument_list|)
expr_stmt|;
comment|// Nodes under same nodegroup should be excluded.
name|addNodeGroupToExcludedNodes
argument_list|(
name|excludedNodes
argument_list|,
name|localMachine
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|localMachine
return|;
block|}
block|}
comment|// try a node on local node group
name|DatanodeDescriptor
name|chosenNode
init|=
name|chooseLocalNodeGroup
argument_list|(
operator|(
name|NetworkTopologyWithNodeGroup
operator|)
name|clusterMap
argument_list|,
name|localMachine
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenNode
operator|!=
literal|null
condition|)
block|{
return|return
name|chosenNode
return|;
block|}
comment|// try a node on local rack
return|return
name|chooseLocalRack
argument_list|(
name|localMachine
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|adjustExcludedNodes (HashMap<Node, Node> excludedNodes, Node chosenNode)
specifier|protected
name|void
name|adjustExcludedNodes
parameter_list|(
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|Node
name|chosenNode
parameter_list|)
block|{
comment|// as node-group aware implementation, it should make sure no two replica
comment|// are placing on the same node group.
name|addNodeGroupToExcludedNodes
argument_list|(
name|excludedNodes
argument_list|,
name|chosenNode
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add all nodes under specific nodegroup to excludedNodes.
DECL|method|addNodeGroupToExcludedNodes (HashMap<Node, Node> excludedNodes, String nodeGroup)
specifier|private
name|void
name|addNodeGroupToExcludedNodes
parameter_list|(
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|String
name|nodeGroup
parameter_list|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|leafNodes
init|=
name|clusterMap
operator|.
name|getLeaves
argument_list|(
name|nodeGroup
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|leafNodes
control|)
block|{
name|excludedNodes
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|chooseLocalRack (DatanodeDescriptor localMachine, HashMap<Node, Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeDescriptor> results, boolean avoidStaleNodes)
specifier|protected
name|DatanodeDescriptor
name|chooseLocalRack
parameter_list|(
name|DatanodeDescriptor
name|localMachine
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|int
name|maxNodesPerRack
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|,
name|boolean
name|avoidStaleNodes
parameter_list|)
throws|throws
name|NotEnoughReplicasException
block|{
comment|// no local machine, so choose a random machine
if|if
condition|(
name|localMachine
operator|==
literal|null
condition|)
block|{
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
comment|// choose one from the local rack, but off-nodegroup
try|try
block|{
return|return
name|chooseRandom
argument_list|(
name|NetworkTopology
operator|.
name|getFirstHalf
argument_list|(
name|localMachine
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NotEnoughReplicasException
name|e1
parameter_list|)
block|{
comment|// find the second replica
name|DatanodeDescriptor
name|newLocal
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|results
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatanodeDescriptor
name|nextNode
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextNode
operator|!=
name|localMachine
condition|)
block|{
name|newLocal
operator|=
name|nextNode
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|newLocal
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|chooseRandom
argument_list|(
name|clusterMap
operator|.
name|getRack
argument_list|(
name|newLocal
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NotEnoughReplicasException
name|e2
parameter_list|)
block|{
comment|//otherwise randomly choose one from the network
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|//otherwise randomly choose one from the network
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|chooseRemoteRack (int numOfReplicas, DatanodeDescriptor localMachine, HashMap<Node, Node> excludedNodes, long blocksize, int maxReplicasPerRack, List<DatanodeDescriptor> results, boolean avoidStaleNodes)
specifier|protected
name|void
name|chooseRemoteRack
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|localMachine
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|int
name|maxReplicasPerRack
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|,
name|boolean
name|avoidStaleNodes
parameter_list|)
throws|throws
name|NotEnoughReplicasException
block|{
name|int
name|oldNumOfReplicas
init|=
name|results
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// randomly choose one node from remote racks
try|try
block|{
name|chooseRandom
argument_list|(
name|numOfReplicas
argument_list|,
literal|"~"
operator|+
name|NetworkTopology
operator|.
name|getFirstHalf
argument_list|(
name|localMachine
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxReplicasPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotEnoughReplicasException
name|e
parameter_list|)
block|{
name|chooseRandom
argument_list|(
name|numOfReplicas
operator|-
operator|(
name|results
operator|.
name|size
argument_list|()
operator|-
name|oldNumOfReplicas
operator|)
argument_list|,
name|localMachine
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxReplicasPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* choose one node from the nodegroup that<i>localMachine</i> is on.    * if no such node is available, choose one node from the nodegroup where    * a second replica is on.    * if still no such node is available, choose a random node in the cluster.    * @return the chosen node    */
DECL|method|chooseLocalNodeGroup ( NetworkTopologyWithNodeGroup clusterMap, DatanodeDescriptor localMachine, HashMap<Node, Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeDescriptor> results, boolean avoidStaleNodes)
specifier|private
name|DatanodeDescriptor
name|chooseLocalNodeGroup
parameter_list|(
name|NetworkTopologyWithNodeGroup
name|clusterMap
parameter_list|,
name|DatanodeDescriptor
name|localMachine
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|int
name|maxNodesPerRack
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|,
name|boolean
name|avoidStaleNodes
parameter_list|)
throws|throws
name|NotEnoughReplicasException
block|{
comment|// no local machine, so choose a random machine
if|if
condition|(
name|localMachine
operator|==
literal|null
condition|)
block|{
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
comment|// choose one from the local node group
try|try
block|{
return|return
name|chooseRandom
argument_list|(
name|clusterMap
operator|.
name|getNodeGroup
argument_list|(
name|localMachine
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NotEnoughReplicasException
name|e1
parameter_list|)
block|{
comment|// find the second replica
name|DatanodeDescriptor
name|newLocal
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|results
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatanodeDescriptor
name|nextNode
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextNode
operator|!=
name|localMachine
condition|)
block|{
name|newLocal
operator|=
name|nextNode
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|newLocal
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|chooseRandom
argument_list|(
name|clusterMap
operator|.
name|getNodeGroup
argument_list|(
name|newLocal
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NotEnoughReplicasException
name|e2
parameter_list|)
block|{
comment|//otherwise randomly choose one from the network
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|//otherwise randomly choose one from the network
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|,
name|avoidStaleNodes
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getRack (final DatanodeInfo cur)
specifier|protected
name|String
name|getRack
parameter_list|(
specifier|final
name|DatanodeInfo
name|cur
parameter_list|)
block|{
name|String
name|nodeGroupString
init|=
name|cur
operator|.
name|getNetworkLocation
argument_list|()
decl_stmt|;
return|return
name|NetworkTopology
operator|.
name|getFirstHalf
argument_list|(
name|nodeGroupString
argument_list|)
return|;
block|}
comment|/**    * Find other nodes in the same nodegroup of<i>localMachine</i> and add them    * into<i>excludeNodes</i> as replica should not be duplicated for nodes     * within the same nodegroup    * @return number of new excluded nodes    */
DECL|method|addToExcludedNodes (DatanodeDescriptor localMachine, HashMap<Node, Node> excludedNodes)
specifier|protected
name|int
name|addToExcludedNodes
parameter_list|(
name|DatanodeDescriptor
name|localMachine
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|)
block|{
name|int
name|countOfExcludedNodes
init|=
literal|0
decl_stmt|;
name|String
name|nodeGroupScope
init|=
name|localMachine
operator|.
name|getNetworkLocation
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|leafNodes
init|=
name|clusterMap
operator|.
name|getLeaves
argument_list|(
name|nodeGroupScope
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|leafNode
range|:
name|leafNodes
control|)
block|{
name|Node
name|node
init|=
name|excludedNodes
operator|.
name|put
argument_list|(
name|leafNode
argument_list|,
name|leafNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
comment|// not a existing node in excludedNodes
name|countOfExcludedNodes
operator|++
expr_stmt|;
block|}
block|}
return|return
name|countOfExcludedNodes
return|;
block|}
comment|/**    * Pick up replica node set for deleting replica as over-replicated.     * First set contains replica nodes on rack with more than one    * replica while second set contains remaining replica nodes.    * If first is not empty, divide first set into two subsets:    *   moreThanOne contains nodes on nodegroup with more than one replica    *   exactlyOne contains the remaining nodes in first set    * then pickup priSet if not empty.    * If first is empty, then pick second.    */
annotation|@
name|Override
DECL|method|pickupReplicaSet ( Collection<DatanodeDescriptor> first, Collection<DatanodeDescriptor> second)
specifier|public
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|pickupReplicaSet
parameter_list|(
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|first
parameter_list|,
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|second
parameter_list|)
block|{
comment|// If no replica within same rack, return directly.
if|if
condition|(
name|first
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|second
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|// Split data nodes in the first set into two sets,
comment|// moreThanOne contains nodes on nodegroup with more than one replica
comment|// exactlyOne contains the remaining nodes
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|>
name|nodeGroupMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|first
control|)
block|{
specifier|final
name|String
name|nodeGroupName
init|=
name|NetworkTopology
operator|.
name|getLastHalf
argument_list|(
name|node
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|datanodeList
init|=
name|nodeGroupMap
operator|.
name|get
argument_list|(
name|nodeGroupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanodeList
operator|==
literal|null
condition|)
block|{
name|datanodeList
operator|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
expr_stmt|;
name|nodeGroupMap
operator|.
name|put
argument_list|(
name|nodeGroupName
argument_list|,
name|datanodeList
argument_list|)
expr_stmt|;
block|}
name|datanodeList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|moreThanOne
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|exactlyOne
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
comment|// split nodes into two sets
for|for
control|(
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|datanodeList
range|:
name|nodeGroupMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|datanodeList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// exactlyOne contains nodes on nodegroup with exactly one replica
name|exactlyOne
operator|.
name|add
argument_list|(
name|datanodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// moreThanOne contains nodes on nodegroup with more than one replica
name|moreThanOne
operator|.
name|addAll
argument_list|(
name|datanodeList
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|moreThanOne
operator|.
name|isEmpty
argument_list|()
condition|?
name|exactlyOne
operator|.
name|iterator
argument_list|()
else|:
name|moreThanOne
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|iter
return|;
block|}
block|}
end_class

end_unit

