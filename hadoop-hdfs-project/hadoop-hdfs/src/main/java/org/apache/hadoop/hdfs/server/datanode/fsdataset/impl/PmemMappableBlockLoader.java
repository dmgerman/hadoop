begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ExtendedBlockId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DNConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_comment
comment|/**  * Maps block to persistent memory by using mapped byte buffer.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|PmemMappableBlockLoader
specifier|public
class|class
name|PmemMappableBlockLoader
extends|extends
name|MappableBlockLoader
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PmemMappableBlockLoader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pmemVolumeManager
specifier|private
name|PmemVolumeManager
name|pmemVolumeManager
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (FsDatasetCache cacheManager)
name|void
name|initialize
parameter_list|(
name|FsDatasetCache
name|cacheManager
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing cache loader: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DNConf
name|dnConf
init|=
name|cacheManager
operator|.
name|getDnConf
argument_list|()
decl_stmt|;
name|PmemVolumeManager
operator|.
name|init
argument_list|(
name|dnConf
operator|.
name|getPmemVolumes
argument_list|()
argument_list|)
expr_stmt|;
name|pmemVolumeManager
operator|=
name|PmemVolumeManager
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
comment|/**    * Load the block.    *    * Map the block and verify its checksum.    *    * The block will be mapped to PmemDir/BlockPoolId-BlockId, in which PmemDir    * is a persistent memory volume chosen by PmemVolumeManager.    *    * @param length         The current length of the block.    * @param blockIn        The block input stream. Should be positioned at the    *                       start. The caller must close this.    * @param metaIn         The meta file input stream. Should be positioned at    *                       the start. The caller must close this.    * @param blockFileName  The block file name, for logging purposes.    * @param key            The extended block ID.    *    * @throws IOException   If mapping block fails or checksum fails.    *    * @return               The Mappable block.    */
annotation|@
name|Override
DECL|method|load (long length, FileInputStream blockIn, FileInputStream metaIn, String blockFileName, ExtendedBlockId key)
name|MappableBlock
name|load
parameter_list|(
name|long
name|length
parameter_list|,
name|FileInputStream
name|blockIn
parameter_list|,
name|FileInputStream
name|metaIn
parameter_list|,
name|String
name|blockFileName
parameter_list|,
name|ExtendedBlockId
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|PmemMappedBlock
name|mappableBlock
init|=
literal|null
decl_stmt|;
name|String
name|cachePath
init|=
literal|null
decl_stmt|;
name|FileChannel
name|blockChannel
init|=
literal|null
decl_stmt|;
name|RandomAccessFile
name|cacheFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|blockChannel
operator|=
name|blockIn
operator|.
name|getChannel
argument_list|()
expr_stmt|;
if|if
condition|(
name|blockChannel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Block InputStream has no FileChannel."
argument_list|)
throw|;
block|}
name|cachePath
operator|=
name|pmemVolumeManager
operator|.
name|getCachePath
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|cacheFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|cachePath
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|blockChannel
operator|.
name|transferTo
argument_list|(
literal|0
argument_list|,
name|length
argument_list|,
name|cacheFile
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify checksum for the cached data instead of block file.
comment|// The file channel should be repositioned.
name|cacheFile
operator|.
name|getChannel
argument_list|()
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verifyChecksum
argument_list|(
name|length
argument_list|,
name|metaIn
argument_list|,
name|cacheFile
operator|.
name|getChannel
argument_list|()
argument_list|,
name|blockFileName
argument_list|)
expr_stmt|;
name|mappableBlock
operator|=
operator|new
name|PmemMappedBlock
argument_list|(
name|length
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully cached one replica:{} into persistent memory"
operator|+
literal|", [cached path={}, length={}]"
argument_list|,
name|key
argument_list|,
name|cachePath
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|blockChannel
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|cacheFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappableBlock
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete {} due to unsuccessful mapping."
argument_list|,
name|cachePath
argument_list|)
expr_stmt|;
name|FsDatasetUtil
operator|.
name|deleteMappedFile
argument_list|(
name|cachePath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mappableBlock
return|;
block|}
annotation|@
name|Override
DECL|method|getCacheUsed ()
specifier|public
name|long
name|getCacheUsed
parameter_list|()
block|{
return|return
name|pmemVolumeManager
operator|.
name|getCacheUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCacheCapacity ()
specifier|public
name|long
name|getCacheCapacity
parameter_list|()
block|{
return|return
name|pmemVolumeManager
operator|.
name|getCacheCapacity
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|reserve (ExtendedBlockId key, long bytesCount)
name|long
name|reserve
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|,
name|long
name|bytesCount
parameter_list|)
block|{
return|return
name|pmemVolumeManager
operator|.
name|reserve
argument_list|(
name|key
argument_list|,
name|bytesCount
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|release (ExtendedBlockId key, long bytesCount)
name|long
name|release
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|,
name|long
name|bytesCount
parameter_list|)
block|{
return|return
name|pmemVolumeManager
operator|.
name|release
argument_list|(
name|key
argument_list|,
name|bytesCount
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isTransientCache ()
specifier|public
name|boolean
name|isTransientCache
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isNativeLoader ()
specifier|public
name|boolean
name|isNativeLoader
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Clean up cache on persistent memory during shutdown."
argument_list|)
expr_stmt|;
name|PmemVolumeManager
operator|.
name|getInstance
argument_list|()
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

