begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|router
operator|.
name|PeriodicService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Service to periodically monitor the connection of the StateStore  * {@link StateStoreService} data store and to re-open the connection  * to the data store if required.  */
end_comment

begin_class
DECL|class|StateStoreConnectionMonitorService
specifier|public
class|class
name|StateStoreConnectionMonitorService
extends|extends
name|PeriodicService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StateStoreConnectionMonitorService
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Service that maintains the State Store connection. */
DECL|field|stateStore
specifier|private
specifier|final
name|StateStoreService
name|stateStore
decl_stmt|;
comment|/**    * Create a new service to monitor the connectivity of the state store driver.    *    * @param store Instance of the state store to be monitored.    */
DECL|method|StateStoreConnectionMonitorService (StateStoreService store)
specifier|public
name|StateStoreConnectionMonitorService
parameter_list|(
name|StateStoreService
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|StateStoreConnectionMonitorService
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateStore
operator|=
name|store
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|setIntervalMs
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|FEDERATION_STORE_CONNECTION_TEST_MS
argument_list|,
name|DFSConfigKeys
operator|.
name|FEDERATION_STORE_CONNECTION_TEST_MS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|periodicInvoke ()
specifier|public
name|void
name|periodicInvoke
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking state store connection"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stateStore
operator|.
name|isDriverReady
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to open state store driver."
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|loadDriver
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

