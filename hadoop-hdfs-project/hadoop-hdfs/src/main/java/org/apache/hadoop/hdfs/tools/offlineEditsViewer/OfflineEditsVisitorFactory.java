begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineEditsViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * EditsVisitorFactory for different implementations of EditsVisitor  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|OfflineEditsVisitorFactory
specifier|public
class|class
name|OfflineEditsVisitorFactory
block|{
comment|/**    * Factory function that creates an EditsVisitor object    *    * @param filename              output filename    * @param processor             type of visitor to create     * @param printToScreen         parameter passed to visitor constructor    *    * @return EditsVisitor for appropriate output format (binary, xml, etc.)    */
DECL|method|getEditsVisitor (String filename, String processor, boolean printToScreen)
specifier|static
specifier|public
name|OfflineEditsVisitor
name|getEditsVisitor
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|processor
parameter_list|,
name|boolean
name|printToScreen
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|processor
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
return|return
operator|new
name|BinaryEditsVisitor
argument_list|(
name|filename
argument_list|)
return|;
block|}
name|OfflineEditsVisitor
name|vis
decl_stmt|;
name|OutputStream
name|fout
init|=
operator|new
name|FileOutputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|printToScreen
condition|)
block|{
name|out
operator|=
name|fout
expr_stmt|;
block|}
else|else
block|{
name|OutputStream
name|outs
index|[]
init|=
operator|new
name|OutputStream
index|[
literal|2
index|]
decl_stmt|;
name|outs
index|[
literal|0
index|]
operator|=
name|fout
expr_stmt|;
name|outs
index|[
literal|1
index|]
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|out
operator|=
operator|new
name|TeeOutputStream
argument_list|(
name|outs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processor
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"xml"
argument_list|)
condition|)
block|{
name|vis
operator|=
operator|new
name|XmlEditsVisitor
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|processor
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"stats"
argument_list|)
condition|)
block|{
name|vis
operator|=
operator|new
name|StatisticsEditsVisitor
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown proccesor "
operator|+
name|processor
operator|+
literal|" (valid processors: xml, binary, stats)"
argument_list|)
throw|;
block|}
name|out
operator|=
name|fout
operator|=
literal|null
expr_stmt|;
return|return
name|vis
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fout
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

