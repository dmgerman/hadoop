begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|meta
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|proto
operator|.
name|CBlockServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocol
operator|.
name|proto
operator|.
name|CBlockServiceProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocolPB
operator|.
name|CBlockServiceProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * The client side implement of CBlockServiceProtocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CBlockServiceProtocolClientSideTranslatorPB
specifier|public
specifier|final
class|class
name|CBlockServiceProtocolClientSideTranslatorPB
implements|implements
name|CBlockServiceProtocol
implements|,
name|ProtocolTranslator
implements|,
name|Closeable
block|{
DECL|field|rpcProxy
specifier|private
specifier|final
name|CBlockServiceProtocolPB
name|rpcProxy
decl_stmt|;
DECL|method|CBlockServiceProtocolClientSideTranslatorPB ( CBlockServiceProtocolPB rpcProxy)
specifier|public
name|CBlockServiceProtocolClientSideTranslatorPB
parameter_list|(
name|CBlockServiceProtocolPB
name|rpcProxy
parameter_list|)
block|{
name|this
operator|.
name|rpcProxy
operator|=
name|rpcProxy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|rpcProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createVolume (String userName, String volumeName, long volumeSize, int blockSize)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|volumeName
parameter_list|,
name|long
name|volumeSize
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|CBlockServiceProtocolProtos
operator|.
name|CreateVolumeRequestProto
operator|.
name|Builder
name|req
init|=
name|CBlockServiceProtocolProtos
operator|.
name|CreateVolumeRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|req
operator|.
name|setVolumeSize
argument_list|(
name|volumeSize
argument_list|)
expr_stmt|;
name|req
operator|.
name|setBlockSize
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
try|try
block|{
name|rpcProxy
operator|.
name|createVolume
argument_list|(
literal|null
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteVolume (String userName, String volumeName, boolean force)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|volumeName
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|CBlockServiceProtocolProtos
operator|.
name|DeleteVolumeRequestProto
operator|.
name|Builder
name|req
init|=
name|CBlockServiceProtocolProtos
operator|.
name|DeleteVolumeRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|req
operator|.
name|setForce
argument_list|(
name|force
argument_list|)
expr_stmt|;
try|try
block|{
name|rpcProxy
operator|.
name|deleteVolume
argument_list|(
literal|null
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUnderlyingProxyObject ()
specifier|public
name|Object
name|getUnderlyingProxyObject
parameter_list|()
block|{
return|return
name|rpcProxy
return|;
block|}
annotation|@
name|Override
DECL|method|infoVolume (String userName, String volumeName)
specifier|public
name|VolumeInfo
name|infoVolume
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|CBlockServiceProtocolProtos
operator|.
name|InfoVolumeRequestProto
operator|.
name|Builder
name|req
init|=
name|CBlockServiceProtocolProtos
operator|.
name|InfoVolumeRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
try|try
block|{
name|CBlockServiceProtocolProtos
operator|.
name|InfoVolumeResponseProto
name|resp
init|=
name|rpcProxy
operator|.
name|infoVolume
argument_list|(
literal|null
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|VolumeInfo
argument_list|(
name|resp
operator|.
name|getVolumeInfo
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|resp
operator|.
name|getVolumeInfo
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|resp
operator|.
name|getVolumeInfo
argument_list|()
operator|.
name|getVolumeSize
argument_list|()
argument_list|,
name|resp
operator|.
name|getVolumeInfo
argument_list|()
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|resp
operator|.
name|getVolumeInfo
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|listVolume (String userName)
specifier|public
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|listVolume
parameter_list|(
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
name|CBlockServiceProtocolProtos
operator|.
name|ListVolumeRequestProto
operator|.
name|Builder
name|req
init|=
name|CBlockServiceProtocolProtos
operator|.
name|ListVolumeRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|CBlockServiceProtocolProtos
operator|.
name|ListVolumeResponseProto
name|resp
init|=
name|rpcProxy
operator|.
name|listVolume
argument_list|(
literal|null
argument_list|,
name|req
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|respList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CBlockServiceProtocolProtos
operator|.
name|VolumeInfoProto
name|entry
range|:
name|resp
operator|.
name|getVolumeEntryList
argument_list|()
control|)
block|{
name|VolumeInfo
name|volumeInfo
init|=
operator|new
name|VolumeInfo
argument_list|(
name|entry
operator|.
name|getUserName
argument_list|()
argument_list|,
name|entry
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|entry
operator|.
name|getVolumeSize
argument_list|()
argument_list|,
name|entry
operator|.
name|getBlockSize
argument_list|()
argument_list|)
decl_stmt|;
name|respList
operator|.
name|add
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|respList
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"got"
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

