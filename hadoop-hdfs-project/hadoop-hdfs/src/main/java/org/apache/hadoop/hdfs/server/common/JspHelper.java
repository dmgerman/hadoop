begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeHttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DelegationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DoAsParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|UserParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|DEFAULT_HADOOP_HTTP_STATIC_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|HADOOP_HTTP_STATIC_USER
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|JspHelper
specifier|public
class|class
name|JspHelper
block|{
DECL|field|CURRENT_CONF
specifier|public
specifier|static
specifier|final
name|String
name|CURRENT_CONF
init|=
literal|"current.conf"
decl_stmt|;
DECL|field|DELEGATION_PARAMETER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_PARAMETER_NAME
init|=
name|DelegationParam
operator|.
name|NAME
decl_stmt|;
DECL|field|NAMENODE_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_ADDRESS
init|=
literal|"nnaddr"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JspHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Private constructor for preventing creating JspHelper object. */
DECL|method|JspHelper ()
specifier|private
name|JspHelper
parameter_list|()
block|{}
DECL|method|getDefaultWebUserName (Configuration conf )
specifier|private
specifier|static
name|String
name|getDefaultWebUserName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|user
init|=
name|conf
operator|.
name|get
argument_list|(
name|HADOOP_HTTP_STATIC_USER
argument_list|,
name|DEFAULT_HADOOP_HTTP_STATIC_USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot determine UGI from request or conf"
argument_list|)
throw|;
block|}
return|return
name|user
return|;
block|}
DECL|method|getNNServiceAddress (ServletContext context, HttpServletRequest request)
specifier|private
specifier|static
name|InetSocketAddress
name|getNNServiceAddress
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|namenodeAddressInUrl
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|NAMENODE_ADDRESS
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|namenodeAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|namenodeAddressInUrl
operator|!=
literal|null
condition|)
block|{
name|namenodeAddress
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|namenodeAddressInUrl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|namenodeAddress
operator|=
name|NameNodeHttpServer
operator|.
name|getNameNodeAddressFromContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namenodeAddress
operator|!=
literal|null
condition|)
block|{
return|return
name|namenodeAddress
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Same as getUGI(null, request, conf). */
DECL|method|getUGI (HttpServletRequest request, Configuration conf)
specifier|public
specifier|static
name|UserGroupInformation
name|getUGI
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getUGI
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Same as getUGI(context, request, conf, KERBEROS_SSL, true). */
DECL|method|getUGI (ServletContext context, HttpServletRequest request, Configuration conf)
specifier|public
specifier|static
name|UserGroupInformation
name|getUGI
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|,
name|AuthenticationMethod
operator|.
name|KERBEROS_SSL
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Get {@link UserGroupInformation} and possibly the delegation token out of    * the request.    * @param context the ServletContext that is serving this request.    * @param request the http request    * @param conf configuration    * @param secureAuthMethod the AuthenticationMethod used in secure mode.    * @param tryUgiParameter Should it try the ugi parameter?    * @return a new user from the request    * @throws AccessControlException if the request has no token    */
DECL|method|getUGI (ServletContext context, HttpServletRequest request, Configuration conf, final AuthenticationMethod secureAuthMethod, final boolean tryUgiParameter)
specifier|public
specifier|static
name|UserGroupInformation
name|getUGI
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|,
specifier|final
name|AuthenticationMethod
name|secureAuthMethod
parameter_list|,
specifier|final
name|boolean
name|tryUgiParameter
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|usernameFromQuery
init|=
name|getUsernameFromQuery
argument_list|(
name|request
argument_list|,
name|tryUgiParameter
argument_list|)
decl_stmt|;
specifier|final
name|String
name|doAsUserFromQuery
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
decl_stmt|;
specifier|final
name|String
name|remoteUser
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|remoteUser
operator|=
name|request
operator|.
name|getRemoteUser
argument_list|()
expr_stmt|;
specifier|final
name|String
name|tokenString
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|DELEGATION_PARAMETER_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenString
operator|!=
literal|null
condition|)
block|{
comment|// Token-based connections need only verify the effective user, and
comment|// disallow proxying to different user.  Proxy authorization checks
comment|// are not required since the checks apply to issuing a token.
name|ugi
operator|=
name|getTokenUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|tokenString
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkUsername
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|usernameFromQuery
argument_list|)
expr_stmt|;
name|checkUsername
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|doAsUserFromQuery
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remoteUser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Security enabled but user not authenticated by filter"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Security's not on, pull from url or use default web user
name|remoteUser
operator|=
operator|(
name|usernameFromQuery
operator|==
literal|null
operator|)
condition|?
name|getDefaultWebUserName
argument_list|(
name|conf
argument_list|)
comment|// not specified in request
else|:
name|usernameFromQuery
expr_stmt|;
block|}
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
comment|// security is off, or there's no token
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
name|checkUsername
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|usernameFromQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// This is not necessarily true, could have been auth'ed by user-facing
comment|// filter
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|secureAuthMethod
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doAsUserFromQuery
operator|!=
literal|null
condition|)
block|{
comment|// create and attempt to authorize a proxy user
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|doAsUserFromQuery
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi
argument_list|,
name|getRemoteAddr
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"getUGI is returning: "
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
DECL|method|getTokenUGI (ServletContext context, HttpServletRequest request, String tokenString, Configuration conf)
specifier|private
specifier|static
name|UserGroupInformation
name|getTokenUGI
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|tokenString
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|serviceAddress
init|=
name|getNNServiceAddress
argument_list|(
name|context
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceAddress
operator|!=
literal|null
condition|)
block|{
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|serviceAddress
argument_list|)
expr_stmt|;
name|token
operator|.
name|setKind
argument_list|(
name|DelegationTokenIdentifier
operator|.
name|HDFS_DELEGATION_KIND
argument_list|)
expr_stmt|;
block|}
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
specifier|final
name|NameNode
name|nn
init|=
name|NameNodeHttpServer
operator|.
name|getNameNodeFromContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|nn
operator|!=
literal|null
condition|)
block|{
comment|// Verify the token.
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|verifyToken
argument_list|(
name|id
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|UserGroupInformation
name|ugi
init|=
name|id
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
comment|// honor the X-Forwarded-For header set by a configured set of trusted
comment|// proxy servers.  allows audit logging and proxy user checks to work
comment|// via an http proxy
DECL|method|getRemoteAddr (HttpServletRequest request)
specifier|public
specifier|static
name|String
name|getRemoteAddr
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|remoteAddr
init|=
name|request
operator|.
name|getRemoteAddr
argument_list|()
decl_stmt|;
name|String
name|proxyHeader
init|=
name|request
operator|.
name|getHeader
argument_list|(
literal|"X-Forwarded-For"
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyHeader
operator|!=
literal|null
operator|&&
name|ProxyUsers
operator|.
name|isProxyServer
argument_list|(
name|remoteAddr
argument_list|)
condition|)
block|{
specifier|final
name|String
name|clientAddr
init|=
name|proxyHeader
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clientAddr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remoteAddr
operator|=
name|clientAddr
expr_stmt|;
block|}
block|}
return|return
name|remoteAddr
return|;
block|}
comment|/**    * Expected user name should be a short name.    */
DECL|method|checkUsername (final String expected, final String name )
specifier|private
specifier|static
name|void
name|checkUsername
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|expected
operator|==
literal|null
operator|&&
name|name
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Usernames not matched: expecting null but name="
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|//name is optional, null is okay
return|return;
block|}
name|KerberosName
name|u
init|=
operator|new
name|KerberosName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|shortName
init|=
name|u
operator|.
name|getShortName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shortName
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Usernames not matched: name="
operator|+
name|shortName
operator|+
literal|" != expected="
operator|+
name|expected
argument_list|)
throw|;
block|}
block|}
DECL|method|getUsernameFromQuery (final HttpServletRequest request, final boolean tryUgiParameter)
specifier|private
specifier|static
name|String
name|getUsernameFromQuery
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|boolean
name|tryUgiParameter
parameter_list|)
block|{
name|String
name|username
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|username
operator|==
literal|null
operator|&&
name|tryUgiParameter
condition|)
block|{
comment|//try ugi parameter
specifier|final
name|String
name|ugiStr
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"ugi"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ugiStr
operator|!=
literal|null
condition|)
block|{
name|username
operator|=
name|ugiStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
return|return
name|username
return|;
block|}
block|}
end_class

end_unit

