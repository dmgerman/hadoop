begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeHttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DelegationParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|DoAsParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|resources
operator|.
name|UserParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HtmlQuoting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|HADOOP_HTTP_STATIC_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|DEFAULT_HADOOP_HTTP_STATIC_USER
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|JspHelper
specifier|public
class|class
name|JspHelper
block|{
DECL|field|CURRENT_CONF
specifier|public
specifier|static
specifier|final
name|String
name|CURRENT_CONF
init|=
literal|"current.conf"
decl_stmt|;
DECL|field|DELEGATION_PARAMETER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_PARAMETER_NAME
init|=
name|DelegationParam
operator|.
name|NAME
decl_stmt|;
DECL|field|NAMENODE_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|NAMENODE_ADDRESS
init|=
literal|"nnaddr"
decl_stmt|;
DECL|field|SET_DELEGATION
specifier|static
specifier|final
name|String
name|SET_DELEGATION
init|=
literal|"&"
operator|+
name|DELEGATION_PARAMETER_NAME
operator|+
literal|"="
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JspHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Private constructor for preventing creating JspHelper object. */
DECL|method|JspHelper ()
specifier|private
name|JspHelper
parameter_list|()
block|{}
comment|// data structure to count number of blocks on datanodes.
DECL|class|NodeRecord
specifier|private
specifier|static
class|class
name|NodeRecord
extends|extends
name|DatanodeInfo
block|{
DECL|field|frequency
name|int
name|frequency
decl_stmt|;
DECL|method|NodeRecord (DatanodeInfo info, int count)
specifier|public
name|NodeRecord
parameter_list|(
name|DatanodeInfo
name|info
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|frequency
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
comment|// Sufficient to use super equality as datanodes are uniquely identified
comment|// by DatanodeID
return|return
operator|(
name|this
operator|==
name|obj
operator|)
operator|||
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// Super implementation is sufficient
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|// compare two records based on their frequency
DECL|class|NodeRecordComparator
specifier|private
specifier|static
class|class
name|NodeRecordComparator
implements|implements
name|Comparator
argument_list|<
name|NodeRecord
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (NodeRecord o1, NodeRecord o2)
specifier|public
name|int
name|compare
parameter_list|(
name|NodeRecord
name|o1
parameter_list|,
name|NodeRecord
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|frequency
operator|<
name|o2
operator|.
name|frequency
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|frequency
operator|>
name|o2
operator|.
name|frequency
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
DECL|method|bestNode (LocatedBlocks blks, Configuration conf)
specifier|public
specifier|static
name|DatanodeInfo
name|bestNode
parameter_list|(
name|LocatedBlocks
name|blks
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|NodeRecord
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|NodeRecord
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|block
range|:
name|blks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|DatanodeInfo
index|[]
name|nodes
init|=
name|block
operator|.
name|getLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|node
range|:
name|nodes
control|)
block|{
name|NodeRecord
name|record
init|=
name|map
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|==
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|node
argument_list|,
operator|new
name|NodeRecord
argument_list|(
name|node
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|record
operator|.
name|frequency
operator|++
expr_stmt|;
block|}
block|}
block|}
name|NodeRecord
index|[]
name|nodes
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|NodeRecord
index|[
name|map
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
operator|new
name|NodeRecordComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bestNode
argument_list|(
name|nodes
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|bestNode (LocatedBlock blk, Configuration conf)
specifier|public
specifier|static
name|DatanodeInfo
name|bestNode
parameter_list|(
name|LocatedBlock
name|blk
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeInfo
index|[]
name|nodes
init|=
name|blk
operator|.
name|getLocations
argument_list|()
decl_stmt|;
return|return
name|bestNode
argument_list|(
name|nodes
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|bestNode (DatanodeInfo[] nodes, boolean doRandom, Configuration conf)
specifier|public
specifier|static
name|DatanodeInfo
name|bestNode
parameter_list|(
name|DatanodeInfo
index|[]
name|nodes
parameter_list|,
name|boolean
name|doRandom
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|TreeSet
argument_list|<
name|DatanodeInfo
argument_list|>
name|deadNodes
init|=
operator|new
name|TreeSet
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|DatanodeInfo
name|chosenNode
init|=
literal|null
decl_stmt|;
name|int
name|failures
init|=
literal|0
decl_stmt|;
name|Socket
name|s
init|=
literal|null
decl_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|nodes
operator|==
literal|null
operator|||
name|nodes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No nodes contain this block"
argument_list|)
throw|;
block|}
while|while
condition|(
name|s
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|chosenNode
operator|==
literal|null
condition|)
block|{
do|do
block|{
if|if
condition|(
name|doRandom
condition|)
block|{
name|index
operator|=
name|DFSUtil
operator|.
name|getRandom
argument_list|()
operator|.
name|nextInt
argument_list|(
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|index
operator|++
expr_stmt|;
block|}
name|chosenNode
operator|=
name|nodes
index|[
name|index
index|]
expr_stmt|;
block|}
do|while
condition|(
name|deadNodes
operator|.
name|contains
argument_list|(
name|chosenNode
argument_list|)
condition|)
do|;
block|}
name|chosenNode
operator|=
name|nodes
index|[
name|index
index|]
expr_stmt|;
comment|//just ping to check whether the node is alive
name|InetSocketAddress
name|targetAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|chosenNode
operator|.
name|getInfoAddr
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|s
operator|=
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
operator|.
name|createSocket
argument_list|()
expr_stmt|;
name|s
operator|.
name|connect
argument_list|(
name|targetAddr
argument_list|,
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSoTimeout
argument_list|(
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|deadNodes
operator|.
name|add
argument_list|(
name|chosenNode
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeSocket
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
literal|null
expr_stmt|;
name|failures
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|failures
operator|==
name|nodes
operator|.
name|length
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not reach the block containing the data. Please try again"
argument_list|)
throw|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|chosenNode
return|;
block|}
DECL|method|streamBlockInAscii (InetSocketAddress addr, String poolId, long blockId, Token<BlockTokenIdentifier> blockToken, long genStamp, long blockSize, long offsetIntoBlock, long chunkSizeToView, JspWriter out, Configuration conf, DataEncryptionKey encryptionKey)
specifier|public
specifier|static
name|void
name|streamBlockInAscii
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|String
name|poolId
parameter_list|,
name|long
name|blockId
parameter_list|,
name|Token
argument_list|<
name|BlockTokenIdentifier
argument_list|>
name|blockToken
parameter_list|,
name|long
name|genStamp
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|long
name|offsetIntoBlock
parameter_list|,
name|long
name|chunkSizeToView
parameter_list|,
name|JspWriter
name|out
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|DataEncryptionKey
name|encryptionKey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|chunkSizeToView
operator|==
literal|0
condition|)
return|return;
name|Socket
name|s
init|=
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
operator|.
name|createSocket
argument_list|()
decl_stmt|;
name|s
operator|.
name|connect
argument_list|(
name|addr
argument_list|,
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|s
operator|.
name|setSoTimeout
argument_list|(
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
name|int
name|amtToRead
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|chunkSizeToView
argument_list|,
name|blockSize
operator|-
name|offsetIntoBlock
argument_list|)
decl_stmt|;
comment|// Use the block name for file name.
name|String
name|file
init|=
name|BlockReaderFactory
operator|.
name|getFileName
argument_list|(
name|addr
argument_list|,
name|poolId
argument_list|,
name|blockId
argument_list|)
decl_stmt|;
name|BlockReader
name|blockReader
init|=
name|BlockReaderFactory
operator|.
name|newBlockReader
argument_list|(
name|conf
argument_list|,
name|s
argument_list|,
name|file
argument_list|,
operator|new
name|ExtendedBlock
argument_list|(
name|poolId
argument_list|,
name|blockId
argument_list|,
literal|0
argument_list|,
name|genStamp
argument_list|)
argument_list|,
name|blockToken
argument_list|,
name|offsetIntoBlock
argument_list|,
name|amtToRead
argument_list|,
name|encryptionKey
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|amtToRead
index|]
decl_stmt|;
name|int
name|readOffset
init|=
literal|0
decl_stmt|;
name|int
name|retries
init|=
literal|2
decl_stmt|;
while|while
condition|(
name|amtToRead
operator|>
literal|0
condition|)
block|{
name|int
name|numRead
init|=
name|amtToRead
decl_stmt|;
try|try
block|{
name|blockReader
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
name|readOffset
argument_list|,
name|amtToRead
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|retries
operator|--
expr_stmt|;
if|if
condition|(
name|retries
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not read data from datanode"
argument_list|)
throw|;
continue|continue;
block|}
name|amtToRead
operator|-=
name|numRead
expr_stmt|;
name|readOffset
operator|+=
name|numRead
expr_stmt|;
block|}
name|blockReader
operator|=
literal|null
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addTableHeader (JspWriter out)
specifier|public
specifier|static
name|void
name|addTableHeader
parameter_list|(
name|JspWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<table border=\"1\""
operator|+
literal|" cellpadding=\"2\" cellspacing=\"2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<tbody>"
argument_list|)
expr_stmt|;
block|}
DECL|method|addTableRow (JspWriter out, String[] columns)
specifier|public
specifier|static
name|void
name|addTableRow
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|String
index|[]
name|columns
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<td style=\"vertical-align: top;\"><B>"
operator|+
name|columns
index|[
name|i
index|]
operator|+
literal|"</B><br></td>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
DECL|method|addTableRow (JspWriter out, String[] columns, int row)
specifier|public
specifier|static
name|void
name|addTableRow
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|String
index|[]
name|columns
parameter_list|,
name|int
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|row
operator|/
literal|2
operator|*
literal|2
operator|==
name|row
condition|)
block|{
comment|//even
name|out
operator|.
name|print
argument_list|(
literal|"<td style=\"vertical-align: top;background-color:LightGrey;\"><B>"
operator|+
name|columns
index|[
name|i
index|]
operator|+
literal|"</B><br></td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<td style=\"vertical-align: top;background-color:LightBlue;\"><B>"
operator|+
name|columns
index|[
name|i
index|]
operator|+
literal|"</B><br></td>"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|print
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
DECL|method|addTableFooter (JspWriter out)
specifier|public
specifier|static
name|void
name|addTableFooter
parameter_list|(
name|JspWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"</tbody></table>"
argument_list|)
expr_stmt|;
block|}
DECL|method|sortNodeList (final List<DatanodeDescriptor> nodes, String field, String order)
specifier|public
specifier|static
name|void
name|sortNodeList
parameter_list|(
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|order
parameter_list|)
block|{
class|class
name|NodeComapare
implements|implements
name|Comparator
argument_list|<
name|DatanodeDescriptor
argument_list|>
block|{
specifier|static
specifier|final
name|int
name|FIELD_NAME
init|=
literal|1
decl_stmt|,
name|FIELD_LAST_CONTACT
init|=
literal|2
decl_stmt|,
name|FIELD_BLOCKS
init|=
literal|3
decl_stmt|,
name|FIELD_CAPACITY
init|=
literal|4
decl_stmt|,
name|FIELD_USED
init|=
literal|5
decl_stmt|,
name|FIELD_PERCENT_USED
init|=
literal|6
decl_stmt|,
name|FIELD_NONDFS_USED
init|=
literal|7
decl_stmt|,
name|FIELD_REMAINING
init|=
literal|8
decl_stmt|,
name|FIELD_PERCENT_REMAINING
init|=
literal|9
decl_stmt|,
name|FIELD_ADMIN_STATE
init|=
literal|10
decl_stmt|,
name|FIELD_DECOMMISSIONED
init|=
literal|11
decl_stmt|,
name|FIELD_BLOCKPOOL_USED
init|=
literal|12
decl_stmt|,
name|FIELD_PERBLOCKPOOL_USED
init|=
literal|13
decl_stmt|,
name|FIELD_FAILED_VOLUMES
init|=
literal|14
decl_stmt|,
name|SORT_ORDER_ASC
init|=
literal|1
decl_stmt|,
name|SORT_ORDER_DSC
init|=
literal|2
decl_stmt|;
name|int
name|sortField
init|=
name|FIELD_NAME
decl_stmt|;
name|int
name|sortOrder
init|=
name|SORT_ORDER_ASC
decl_stmt|;
specifier|public
name|NodeComapare
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|order
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"lastcontact"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_LAST_CONTACT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"capacity"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_CAPACITY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"used"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_USED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"nondfsused"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_NONDFS_USED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"remaining"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_REMAINING
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"pcused"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_PERCENT_USED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"pcremaining"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_PERCENT_REMAINING
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"blocks"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_BLOCKS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"adminstate"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_ADMIN_STATE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"decommissioned"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_DECOMMISSIONED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"bpused"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_BLOCKPOOL_USED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"pcbpused"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_PERBLOCKPOOL_USED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"volfails"
argument_list|)
condition|)
block|{
name|sortField
operator|=
name|FIELD_FAILED_VOLUMES
expr_stmt|;
block|}
else|else
block|{
name|sortField
operator|=
name|FIELD_NAME
expr_stmt|;
block|}
if|if
condition|(
name|order
operator|.
name|equals
argument_list|(
literal|"DSC"
argument_list|)
condition|)
block|{
name|sortOrder
operator|=
name|SORT_ORDER_DSC
expr_stmt|;
block|}
else|else
block|{
name|sortOrder
operator|=
name|SORT_ORDER_ASC
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DatanodeDescriptor
name|d1
parameter_list|,
name|DatanodeDescriptor
name|d2
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|sortField
condition|)
block|{
case|case
name|FIELD_LAST_CONTACT
case|:
name|ret
operator|=
call|(
name|int
call|)
argument_list|(
name|d2
operator|.
name|getLastUpdate
argument_list|()
operator|-
name|d1
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIELD_CAPACITY
case|:
name|long
name|dlong
init|=
name|d1
operator|.
name|getCapacity
argument_list|()
operator|-
name|d2
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|ret
operator|=
operator|(
name|dlong
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|dlong
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|FIELD_USED
case|:
name|dlong
operator|=
name|d1
operator|.
name|getDfsUsed
argument_list|()
operator|-
name|d2
operator|.
name|getDfsUsed
argument_list|()
expr_stmt|;
name|ret
operator|=
operator|(
name|dlong
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|dlong
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|FIELD_NONDFS_USED
case|:
name|dlong
operator|=
name|d1
operator|.
name|getNonDfsUsed
argument_list|()
operator|-
name|d2
operator|.
name|getNonDfsUsed
argument_list|()
expr_stmt|;
name|ret
operator|=
operator|(
name|dlong
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|dlong
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|FIELD_REMAINING
case|:
name|dlong
operator|=
name|d1
operator|.
name|getRemaining
argument_list|()
operator|-
name|d2
operator|.
name|getRemaining
argument_list|()
expr_stmt|;
name|ret
operator|=
operator|(
name|dlong
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|dlong
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|FIELD_PERCENT_USED
case|:
name|double
name|ddbl
init|=
operator|(
operator|(
name|d1
operator|.
name|getDfsUsedPercent
argument_list|()
operator|)
operator|-
operator|(
name|d2
operator|.
name|getDfsUsedPercent
argument_list|()
operator|)
operator|)
decl_stmt|;
name|ret
operator|=
operator|(
name|ddbl
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|ddbl
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|FIELD_PERCENT_REMAINING
case|:
name|ddbl
operator|=
operator|(
operator|(
name|d1
operator|.
name|getRemainingPercent
argument_list|()
operator|)
operator|-
operator|(
name|d2
operator|.
name|getRemainingPercent
argument_list|()
operator|)
operator|)
expr_stmt|;
name|ret
operator|=
operator|(
name|ddbl
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|ddbl
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|FIELD_BLOCKS
case|:
name|ret
operator|=
name|d1
operator|.
name|numBlocks
argument_list|()
operator|-
name|d2
operator|.
name|numBlocks
argument_list|()
expr_stmt|;
break|break;
case|case
name|FIELD_ADMIN_STATE
case|:
name|ret
operator|=
name|d1
operator|.
name|getAdminState
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getAdminState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIELD_DECOMMISSIONED
case|:
name|ret
operator|=
name|DFSUtil
operator|.
name|DECOM_COMPARATOR
operator|.
name|compare
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIELD_NAME
case|:
name|ret
operator|=
name|d1
operator|.
name|getHostName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIELD_BLOCKPOOL_USED
case|:
name|dlong
operator|=
name|d1
operator|.
name|getBlockPoolUsed
argument_list|()
operator|-
name|d2
operator|.
name|getBlockPoolUsed
argument_list|()
expr_stmt|;
name|ret
operator|=
operator|(
name|dlong
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|dlong
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|FIELD_PERBLOCKPOOL_USED
case|:
name|ddbl
operator|=
name|d1
operator|.
name|getBlockPoolUsedPercent
argument_list|()
operator|-
name|d2
operator|.
name|getBlockPoolUsedPercent
argument_list|()
expr_stmt|;
name|ret
operator|=
operator|(
name|ddbl
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|ddbl
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|FIELD_FAILED_VOLUMES
case|:
name|int
name|dint
init|=
name|d1
operator|.
name|getVolumeFailures
argument_list|()
operator|-
name|d2
operator|.
name|getVolumeFailures
argument_list|()
decl_stmt|;
name|ret
operator|=
operator|(
name|dint
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|dint
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid sortField"
argument_list|)
throw|;
block|}
return|return
operator|(
name|sortOrder
operator|==
name|SORT_ORDER_DSC
operator|)
condition|?
operator|-
name|ret
else|:
name|ret
return|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
operator|new
name|NodeComapare
argument_list|(
name|field
argument_list|,
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|printPathWithLinks (String dir, JspWriter out, int namenodeInfoPort, String tokenString, String nnAddress )
specifier|public
specifier|static
name|void
name|printPathWithLinks
parameter_list|(
name|String
name|dir
parameter_list|,
name|JspWriter
name|out
parameter_list|,
name|int
name|namenodeInfoPort
parameter_list|,
name|String
name|tokenString
parameter_list|,
name|String
name|nnAddress
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|parts
init|=
name|dir
operator|.
name|split
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
name|StringBuilder
name|tempPath
init|=
operator|new
name|StringBuilder
argument_list|(
name|dir
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<a href=\"browseDirectory.jsp"
operator|+
literal|"?dir="
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"&namenodeInfoPort="
operator|+
name|namenodeInfoPort
operator|+
name|getDelegationTokenUrlParam
argument_list|(
name|tokenString
argument_list|)
operator|+
name|getUrlParam
argument_list|(
name|NAMENODE_ADDRESS
argument_list|,
name|nnAddress
argument_list|)
operator|+
literal|"\">"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"</a>"
argument_list|)
expr_stmt|;
name|tempPath
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|parts
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|tempPath
operator|.
name|append
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<a href=\"browseDirectory.jsp"
operator|+
literal|"?dir="
operator|+
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|tempPath
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"&namenodeInfoPort="
operator|+
name|namenodeInfoPort
operator|+
name|getDelegationTokenUrlParam
argument_list|(
name|tokenString
argument_list|)
operator|+
name|getUrlParam
argument_list|(
name|NAMENODE_ADDRESS
argument_list|,
name|nnAddress
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\">"
operator|+
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
operator|+
literal|"</a>"
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
name|tempPath
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|printGotoForm (JspWriter out, int namenodeInfoPort, String tokenString, String file, String nnAddress)
specifier|public
specifier|static
name|void
name|printGotoForm
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|int
name|namenodeInfoPort
parameter_list|,
name|String
name|tokenString
parameter_list|,
name|String
name|file
parameter_list|,
name|String
name|nnAddress
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<form action=\"browseDirectory.jsp\" method=\"get\" name=\"goto\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"Goto : "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<input name=\"dir\" type=\"text\" width=\"50\" id=\"dir\" value=\""
operator|+
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|file
argument_list|)
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<input name=\"go\" type=\"submit\" value=\"go\"/>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<input name=\"namenodeInfoPort\" type=\"hidden\" "
operator|+
literal|"value=\""
operator|+
name|namenodeInfoPort
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<input name=\""
operator|+
name|DELEGATION_PARAMETER_NAME
operator|+
literal|"\" type=\"hidden\" value=\""
operator|+
name|tokenString
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"<input name=\""
operator|+
name|NAMENODE_ADDRESS
operator|+
literal|"\" type=\"hidden\" "
operator|+
literal|"value=\""
operator|+
name|nnAddress
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</form>"
argument_list|)
expr_stmt|;
block|}
DECL|method|createTitle (JspWriter out, HttpServletRequest req, String file)
specifier|public
specifier|static
name|void
name|createTitle
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
name|file
operator|=
literal|""
expr_stmt|;
name|int
name|start
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|length
argument_list|()
operator|-
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|0
condition|)
name|file
operator|=
literal|"..."
operator|+
name|file
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<title>HDFS:"
operator|+
name|file
operator|+
literal|"</title>"
argument_list|)
expr_stmt|;
block|}
comment|/** Convert a String to chunk-size-to-view. */
DECL|method|string2ChunkSizeToView (String s, int defaultValue)
specifier|public
specifier|static
name|int
name|string2ChunkSizeToView
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|int
name|n
init|=
name|s
operator|==
literal|null
condition|?
literal|0
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|n
operator|>
literal|0
condition|?
name|n
else|:
name|defaultValue
return|;
block|}
comment|/** Return a table containing version information. */
DECL|method|getVersionTable ()
specifier|public
specifier|static
name|String
name|getVersionTable
parameter_list|()
block|{
return|return
literal|"<div class='dfstable'><table>"
operator|+
literal|"\n<tr><td class='col1'>Version:</td><td>"
operator|+
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|+
literal|", "
operator|+
name|VersionInfo
operator|.
name|getRevision
argument_list|()
operator|+
literal|"</td></tr>"
operator|+
literal|"\n<tr><td class='col1'>Compiled:</td><td>"
operator|+
name|VersionInfo
operator|.
name|getDate
argument_list|()
operator|+
literal|" by "
operator|+
name|VersionInfo
operator|.
name|getUser
argument_list|()
operator|+
literal|" from "
operator|+
name|VersionInfo
operator|.
name|getBranch
argument_list|()
operator|+
literal|"</td></tr>"
operator|+
literal|"\n</table></div>"
return|;
block|}
comment|/**    * Validate filename.     * @return null if the filename is invalid.    *         Otherwise, return the validated filename.    */
DECL|method|validatePath (String p)
specifier|public
specifier|static
name|String
name|validatePath
parameter_list|(
name|String
name|p
parameter_list|)
block|{
return|return
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
operator|new
name|Path
argument_list|(
name|p
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|/**    * Validate a long value.     * @return null if the value is invalid.    *         Otherwise, return the validated Long object.    */
DECL|method|validateLong (String value)
specifier|public
specifier|static
name|Long
name|validateLong
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Validate a URL.    * @return null if the value is invalid.    *         Otherwise, return the validated URL String.    */
DECL|method|validateURL (String value)
specifier|public
specifier|static
name|String
name|validateURL
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|URLEncoder
operator|.
name|encode
argument_list|(
operator|new
name|URL
argument_list|(
name|value
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * If security is turned off, what is the default web user?    * @param conf the configuration to look in    * @return the remote user that was configuration    */
DECL|method|getDefaultWebUser (Configuration conf )
specifier|public
specifier|static
name|UserGroupInformation
name|getDefaultWebUser
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|getDefaultWebUserName
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDefaultWebUserName (Configuration conf )
specifier|private
specifier|static
name|String
name|getDefaultWebUserName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|user
init|=
name|conf
operator|.
name|get
argument_list|(
name|HADOOP_HTTP_STATIC_USER
argument_list|,
name|DEFAULT_HADOOP_HTTP_STATIC_USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot determine UGI from request or conf"
argument_list|)
throw|;
block|}
return|return
name|user
return|;
block|}
DECL|method|getNNServiceAddress (ServletContext context, HttpServletRequest request)
specifier|private
specifier|static
name|InetSocketAddress
name|getNNServiceAddress
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|namenodeAddressInUrl
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|NAMENODE_ADDRESS
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|namenodeAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|namenodeAddressInUrl
operator|!=
literal|null
condition|)
block|{
name|namenodeAddress
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|namenodeAddressInUrl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|namenodeAddress
operator|=
name|NameNodeHttpServer
operator|.
name|getNameNodeAddressFromContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namenodeAddress
operator|!=
literal|null
condition|)
block|{
return|return
name|namenodeAddress
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Same as getUGI(null, request, conf). */
DECL|method|getUGI (HttpServletRequest request, Configuration conf)
specifier|public
specifier|static
name|UserGroupInformation
name|getUGI
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getUGI
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Same as getUGI(context, request, conf, KERBEROS_SSL, true). */
DECL|method|getUGI (ServletContext context, HttpServletRequest request, Configuration conf)
specifier|public
specifier|static
name|UserGroupInformation
name|getUGI
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|conf
argument_list|,
name|AuthenticationMethod
operator|.
name|KERBEROS_SSL
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Get {@link UserGroupInformation} and possibly the delegation token out of    * the request.    * @param context the ServletContext that is serving this request.    * @param request the http request    * @param conf configuration    * @param secureAuthMethod the AuthenticationMethod used in secure mode.    * @param tryUgiParameter Should it try the ugi parameter?    * @return a new user from the request    * @throws AccessControlException if the request has no token    */
DECL|method|getUGI (ServletContext context, HttpServletRequest request, Configuration conf, final AuthenticationMethod secureAuthMethod, final boolean tryUgiParameter)
specifier|public
specifier|static
name|UserGroupInformation
name|getUGI
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|,
specifier|final
name|AuthenticationMethod
name|secureAuthMethod
parameter_list|,
specifier|final
name|boolean
name|tryUgiParameter
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|usernameFromQuery
init|=
name|getUsernameFromQuery
argument_list|(
name|request
argument_list|,
name|tryUgiParameter
argument_list|)
decl_stmt|;
specifier|final
name|String
name|doAsUserFromQuery
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|DoAsParam
operator|.
name|NAME
argument_list|)
decl_stmt|;
specifier|final
name|String
name|remoteUser
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|remoteUser
operator|=
name|request
operator|.
name|getRemoteUser
argument_list|()
expr_stmt|;
specifier|final
name|String
name|tokenString
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|DELEGATION_PARAMETER_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenString
operator|!=
literal|null
condition|)
block|{
comment|// Token-based connections need only verify the effective user, and
comment|// disallow proxying to different user.  Proxy authorization checks
comment|// are not required since the checks apply to issuing a token.
name|ugi
operator|=
name|getTokenUGI
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|tokenString
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|checkUsername
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|usernameFromQuery
argument_list|)
expr_stmt|;
name|checkUsername
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|doAsUserFromQuery
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remoteUser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Security enabled but user not authenticated by filter"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Security's not on, pull from url or use default web user
name|remoteUser
operator|=
operator|(
name|usernameFromQuery
operator|==
literal|null
operator|)
condition|?
name|getDefaultWebUserName
argument_list|(
name|conf
argument_list|)
comment|// not specified in request
else|:
name|usernameFromQuery
expr_stmt|;
block|}
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
comment|// security is off, or there's no token
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
name|checkUsername
argument_list|(
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|usernameFromQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// This is not necessarily true, could have been auth'ed by user-facing
comment|// filter
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|secureAuthMethod
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doAsUserFromQuery
operator|!=
literal|null
condition|)
block|{
comment|// create and attempt to authorize a proxy user
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|doAsUserFromQuery
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|ugi
argument_list|,
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"getUGI is returning: "
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
DECL|method|getTokenUGI (ServletContext context, HttpServletRequest request, String tokenString, Configuration conf)
specifier|private
specifier|static
name|UserGroupInformation
name|getTokenUGI
parameter_list|(
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|tokenString
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|serviceAddress
init|=
name|getNNServiceAddress
argument_list|(
name|context
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceAddress
operator|!=
literal|null
condition|)
block|{
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|serviceAddress
argument_list|)
expr_stmt|;
name|token
operator|.
name|setKind
argument_list|(
name|DelegationTokenIdentifier
operator|.
name|HDFS_DELEGATION_KIND
argument_list|)
expr_stmt|;
block|}
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
specifier|final
name|NameNode
name|nn
init|=
name|NameNodeHttpServer
operator|.
name|getNameNodeFromContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|nn
operator|!=
literal|null
condition|)
block|{
comment|// Verify the token.
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|verifyToken
argument_list|(
name|id
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|UserGroupInformation
name|ugi
init|=
name|id
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
comment|/**    * Expected user name should be a short name.    */
DECL|method|checkUsername (final String expected, final String name )
specifier|private
specifier|static
name|void
name|checkUsername
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|expected
operator|==
literal|null
operator|&&
name|name
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Usernames not matched: expecting null but name="
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|//name is optional, null is okay
return|return;
block|}
name|KerberosName
name|u
init|=
operator|new
name|KerberosName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|shortName
init|=
name|u
operator|.
name|getShortName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shortName
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Usernames not matched: name="
operator|+
name|shortName
operator|+
literal|" != expected="
operator|+
name|expected
argument_list|)
throw|;
block|}
block|}
DECL|method|getUsernameFromQuery (final HttpServletRequest request, final boolean tryUgiParameter)
specifier|private
specifier|static
name|String
name|getUsernameFromQuery
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|boolean
name|tryUgiParameter
parameter_list|)
block|{
name|String
name|username
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|UserParam
operator|.
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|username
operator|==
literal|null
operator|&&
name|tryUgiParameter
condition|)
block|{
comment|//try ugi parameter
specifier|final
name|String
name|ugiStr
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"ugi"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ugiStr
operator|!=
literal|null
condition|)
block|{
name|username
operator|=
name|ugiStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
return|return
name|username
return|;
block|}
comment|/**    * Returns the url parameter for the given token string.    * @param tokenString    * @return url parameter    */
DECL|method|getDelegationTokenUrlParam (String tokenString)
specifier|public
specifier|static
name|String
name|getDelegationTokenUrlParam
parameter_list|(
name|String
name|tokenString
parameter_list|)
block|{
if|if
condition|(
name|tokenString
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
return|return
name|SET_DELEGATION
operator|+
name|tokenString
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
comment|/**    * Returns the url parameter for the given string, prefixed with    * paramSeparator.    *     * @param name parameter name    * @param val parameter value    * @param paramSeparator URL parameter prefix, i.e. either '?' or '&'    * @return url parameter    */
DECL|method|getUrlParam (String name, String val, String paramSeparator)
specifier|public
specifier|static
name|String
name|getUrlParam
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|String
name|paramSeparator
parameter_list|)
block|{
return|return
name|val
operator|==
literal|null
condition|?
literal|""
else|:
name|paramSeparator
operator|+
name|name
operator|+
literal|"="
operator|+
name|val
return|;
block|}
comment|/**    * Returns the url parameter for the given string, prefixed with '?' if    * firstParam is true, prefixed with '&' if firstParam is false.    *     * @param name parameter name    * @param val parameter value    * @param firstParam true if this is the first parameter in the list, false otherwise    * @return url parameter    */
DECL|method|getUrlParam (String name, String val, boolean firstParam)
specifier|public
specifier|static
name|String
name|getUrlParam
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|firstParam
parameter_list|)
block|{
return|return
name|getUrlParam
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
name|firstParam
condition|?
literal|"?"
else|:
literal|"&"
argument_list|)
return|;
block|}
comment|/**    * Returns the url parameter for the given string, prefixed with '&'.    *     * @param name parameter name    * @param val parameter value    * @return url parameter    */
DECL|method|getUrlParam (String name, String val)
specifier|public
specifier|static
name|String
name|getUrlParam
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
block|{
return|return
name|getUrlParam
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

