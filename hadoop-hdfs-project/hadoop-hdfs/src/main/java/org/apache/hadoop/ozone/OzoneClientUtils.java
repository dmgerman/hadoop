begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utility methods for Ozone and Container Clients.  *  * The methods to retrieve SCM service endpoints assume there is a single  * SCM service instance. This will change when we switch to replicated service  * instances for redundancy.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|OzoneClientUtils
specifier|public
specifier|final
class|class
name|OzoneClientUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneClientUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The service ID of the solitary Ozone SCM service.    */
DECL|field|OZONE_SCM_SERVICE_ID
specifier|public
specifier|static
specifier|final
name|String
name|OZONE_SCM_SERVICE_ID
init|=
literal|"OzoneScmService"
decl_stmt|;
DECL|field|OZONE_SCM_SERVICE_INSTANCE_ID
specifier|public
specifier|static
specifier|final
name|String
name|OZONE_SCM_SERVICE_INSTANCE_ID
init|=
literal|"OzoneScmServiceInstance"
decl_stmt|;
DECL|method|OzoneClientUtils ()
specifier|private
name|OzoneClientUtils
parameter_list|()
block|{
comment|// Never constructed
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM client endpoint.    */
DECL|method|getScmAddressForClients (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmAddressForClients
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|OZONE_SCM_CLIENT_ADDRESS_KEY
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration for details"
operator|+
literal|" on configuring Ozone."
argument_list|)
throw|;
block|}
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|OZONE_SCM_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by DataNodes to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getScmAddressForDataNodes ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmAddressForDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// We try the following settings in decreasing priority to retrieve the
comment|// target host.
comment|// - OZONE_SCM_DATANODE_ADDRESS_KEY
comment|// - OZONE_SCM_CLIENT_ADDRESS_KEY
comment|//
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|,
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|OZONE_SCM_CLIENT_ADDRESS_KEY
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration for details"
operator|+
literal|" on configuring Ozone."
argument_list|)
throw|;
block|}
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|addr
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM client endpoint.    */
DECL|method|getScmClientBindAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmClientBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_CLIENT_BIND_HOST_KEY
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|OZONE_SCM_CLIENT_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|OZONE_SCM_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by DataNodes to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getScmDataNodeBindAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmDataNodeBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_DATANODE_BIND_HOST_KEY
argument_list|)
decl_stmt|;
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|OZONE_SCM_DATANODE_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the hostname, trying the supplied config keys in order.    * Each config value may be absent, or if present in the format    * host:port (the :port part is optional).    *    * @param conf    * @param keys a list of configuration key names.    *    * @return first hostname component found from the given keys, or absent.    * @throws IllegalArgumentException if any values are not in the 'host'    *             or host:port format.    */
DECL|method|getHostNameFromConfigKeys ( Configuration conf, String ... keys)
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|getHostNameFromConfigKeys
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|keys
control|)
block|{
specifier|final
name|String
name|value
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|splits
init|=
name|value
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splits
operator|.
name|length
argument_list|<
literal|1
operator|||
name|splits
operator|.
name|length
argument_list|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid value "
operator|+
name|value
operator|+
literal|" for config key "
operator|+
name|key
operator|+
literal|". It should be in 'host' or 'host:port' format"
argument_list|)
throw|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
comment|/**    * Retrieve the port number, trying the supplied config keys in order.    * Each config value may be absent, or if present in the format    * host:port (the :port part is optional).    *    * @param conf    * @param keys a list of configuration key names.    *    * @return first port number component found from the given keys, or absent.    * @throws IllegalArgumentException if any values are not in the 'host'    *             or host:port format.    */
DECL|method|getPortNumberFromConfigKeys ( Configuration conf, String ... keys)
specifier|static
name|Optional
argument_list|<
name|Integer
argument_list|>
name|getPortNumberFromConfigKeys
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|keys
control|)
block|{
specifier|final
name|String
name|value
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|splits
init|=
name|value
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splits
operator|.
name|length
argument_list|<
literal|1
operator|||
name|splits
operator|.
name|length
argument_list|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid value "
operator|+
name|value
operator|+
literal|" for config key "
operator|+
name|key
operator|+
literal|". It should be in 'host' or 'host:port' format"
argument_list|)
throw|;
block|}
if|if
condition|(
name|splits
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|splits
index|[
literal|1
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
comment|/**    * Return the list of service addresses for the Ozone SCM. This method is used    * by the DataNodes to determine the service instances to connect to.    *    * @param conf    * @return list of SCM service addresses.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
DECL|method|getScmServiceRpcAddresses (Configuration conf)
name|getScmServiceRpcAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|serviceInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceInstances
operator|.
name|put
argument_list|(
name|OZONE_SCM_SERVICE_INSTANCE_ID
argument_list|,
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|services
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|services
operator|.
name|put
argument_list|(
name|OZONE_SCM_SERVICE_ID
argument_list|,
name|serviceInstances
argument_list|)
expr_stmt|;
return|return
name|services
return|;
block|}
block|}
end_class

end_unit

