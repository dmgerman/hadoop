begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HostAndPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_BIND_HOST_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DEADNODE_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DEADNODE_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_LOG_WARN_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_LOG_WARN_INTERVAL_COUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_RPC_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_RPC_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL_MS
import|;
end_import

begin_comment
comment|/**  * Utility methods for Ozone and Container Clients.  *  * The methods to retrieve SCM service endpoints assume there is a single  * SCM service instance. This will change when we switch to replicated service  * instances for redundancy.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|OzoneClientUtils
specifier|public
specifier|final
class|class
name|OzoneClientUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneClientUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NO_PORT
specifier|private
specifier|static
specifier|final
name|int
name|NO_PORT
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * The service ID of the solitary Ozone SCM service.    */
DECL|field|OZONE_SCM_SERVICE_ID
specifier|public
specifier|static
specifier|final
name|String
name|OZONE_SCM_SERVICE_ID
init|=
literal|"OzoneScmService"
decl_stmt|;
DECL|field|OZONE_SCM_SERVICE_INSTANCE_ID
specifier|public
specifier|static
specifier|final
name|String
name|OZONE_SCM_SERVICE_INSTANCE_ID
init|=
literal|"OzoneScmServiceInstance"
decl_stmt|;
DECL|method|OzoneClientUtils ()
specifier|private
name|OzoneClientUtils
parameter_list|()
block|{
comment|// Never constructed
block|}
comment|/**    * Retrieve the socket addresses of all storage container managers.    *    * @param conf    * @return A collection of SCM addresses    * @throws IllegalArgumentException If the configuration is invalid    */
DECL|method|getSCMAddresses ( Configuration conf)
specifier|public
specifier|static
name|Collection
argument_list|<
name|InetSocketAddress
argument_list|>
name|getSCMAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|Collection
argument_list|<
name|InetSocketAddress
argument_list|>
name|addresses
init|=
operator|new
name|HashSet
argument_list|<
name|InetSocketAddress
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NAMES
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
operator|||
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NAMES
operator|+
literal|" need to be a set of valid DNS names or IP addresses."
operator|+
literal|" Null or empty address list found."
argument_list|)
throw|;
block|}
specifier|final
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
argument_list|<
name|Integer
argument_list|>
name|defaultPort
init|=
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
operator|.
name|of
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DEFAULT_PORT
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|address
range|:
name|names
control|)
block|{
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
argument_list|<
name|String
argument_list|>
name|hostname
init|=
name|OzoneClientUtils
operator|.
name|getHostName
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hostname
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid hostname for SCM: "
operator|+
name|hostname
argument_list|)
throw|;
block|}
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|OzoneClientUtils
operator|.
name|getHostPort
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|hostname
operator|.
name|get
argument_list|()
argument_list|,
name|port
operator|.
name|or
argument_list|(
name|defaultPort
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|addresses
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
return|return
name|addresses
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM client endpoint.    */
DECL|method|getScmAddressForClients (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmAddressForClients
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration for details"
operator|+
literal|" on configuring Ozone."
argument_list|)
throw|;
block|}
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by DataNodes to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getScmAddressForDataNodes ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmAddressForDataNodes
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// We try the following settings in decreasing priority to retrieve the
comment|// target host.
comment|// - OZONE_SCM_DATANODE_ADDRESS_KEY
comment|// - OZONE_SCM_CLIENT_ADDRESS_KEY
comment|//
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration for details"
operator|+
literal|" on configuring Ozone."
argument_list|)
throw|;
block|}
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|addr
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM client endpoint.    */
DECL|method|getScmClientBindAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmClientBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_BIND_HOST_KEY
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by DataNodes to connect    * to the SCM.    *    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getScmDataNodeBindAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getScmDataNodeBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_BIND_HOST_KEY
argument_list|)
decl_stmt|;
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DATANODE_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that is used by KSM.    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getKsmAddress ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getKsmAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_KSM_ADDRESS_KEY
argument_list|)
decl_stmt|;
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_KSM_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|OZONE_KSM_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|OZONE_KSM_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the hostname, trying the supplied config keys in order.    * Each config value may be absent, or if present in the format    * host:port (the :port part is optional).    *    * @param conf  - Conf    * @param keys a list of configuration key names.    *    * @return first hostname component found from the given keys, or absent.    * @throws IllegalArgumentException if any values are not in the 'host'    *             or host:port format.    */
DECL|method|getHostNameFromConfigKeys ( Configuration conf, String... keys)
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|getHostNameFromConfigKeys
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|keys
control|)
block|{
specifier|final
name|String
name|value
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|hostName
init|=
name|getHostName
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostName
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|hostName
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
comment|/**    * Gets the hostname or Indicates that it is absent.    * @param value host or host:port    * @return hostname    */
DECL|method|getHostName (String value)
specifier|public
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|getHostName
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|HostAndPort
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
operator|.
name|getHostText
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Gets the port if there is one, throws otherwise.    * @param value  String in host:port format.    * @return Port    */
DECL|method|getHostPort (String value)
specifier|public
specifier|static
name|Optional
argument_list|<
name|Integer
argument_list|>
name|getHostPort
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
name|int
name|port
init|=
name|HostAndPort
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
operator|.
name|getPortOrDefault
argument_list|(
name|NO_PORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|==
name|NO_PORT
condition|)
block|{
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|port
argument_list|)
return|;
block|}
block|}
comment|/**    * Retrieve the port number, trying the supplied config keys in order.    * Each config value may be absent, or if present in the format    * host:port (the :port part is optional).    *    * @param conf Conf    * @param keys a list of configuration key names.    *    * @return first port number component found from the given keys, or absent.    * @throws IllegalArgumentException if any values are not in the 'host'    *             or host:port format.    */
DECL|method|getPortNumberFromConfigKeys ( Configuration conf, String... keys)
specifier|public
specifier|static
name|Optional
argument_list|<
name|Integer
argument_list|>
name|getPortNumberFromConfigKeys
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
for|for
control|(
specifier|final
name|String
name|key
range|:
name|keys
control|)
block|{
specifier|final
name|String
name|value
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|hostPort
init|=
name|getHostPort
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostPort
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|hostPort
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|absent
argument_list|()
return|;
block|}
comment|/**    * Return the list of service addresses for the Ozone SCM. This method is used    * by the DataNodes to determine the service instances to connect to.    *    * @param conf    * @return list of SCM service addresses.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
DECL|method|getScmServiceRpcAddresses (Configuration conf)
name|getScmServiceRpcAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|serviceInstances
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceInstances
operator|.
name|put
argument_list|(
name|OZONE_SCM_SERVICE_INSTANCE_ID
argument_list|,
name|getScmAddressForDataNodes
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|services
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|services
operator|.
name|put
argument_list|(
name|OZONE_SCM_SERVICE_ID
argument_list|,
name|serviceInstances
argument_list|)
expr_stmt|;
return|return
name|services
return|;
block|}
comment|/**    * Checks that a given value is with a range.    *    * For example, sanitizeUserArgs(17, 3, 5, 10)    * ensures that 17 is greater/equal than 3 * 5 and less/equal to 3 * 10.    *    * @param valueTocheck  - value to check    * @param baseValue     - the base value that is being used.    * @param minFactor     - range min - a 2 here makes us ensure that value    *                        valueTocheck is at least twice the baseValue.    * @param maxFactor     - range max    * @return long    */
DECL|method|sanitizeUserArgs (long valueTocheck, long baseValue, long minFactor, long maxFactor)
specifier|private
specifier|static
name|long
name|sanitizeUserArgs
parameter_list|(
name|long
name|valueTocheck
parameter_list|,
name|long
name|baseValue
parameter_list|,
name|long
name|minFactor
parameter_list|,
name|long
name|maxFactor
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|valueTocheck
operator|>=
operator|(
name|baseValue
operator|*
name|minFactor
operator|)
operator|)
operator|&&
operator|(
name|valueTocheck
operator|<=
operator|(
name|baseValue
operator|*
name|maxFactor
operator|)
operator|)
condition|)
block|{
return|return
name|valueTocheck
return|;
block|}
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d is not within min = %d or max = "
operator|+
literal|"%d"
argument_list|,
name|valueTocheck
argument_list|,
name|baseValue
operator|*
name|minFactor
argument_list|,
name|baseValue
operator|*
name|maxFactor
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errMsg
argument_list|)
throw|;
block|}
comment|/**    * Returns the interval in which the heartbeat processor thread runs.    *    * @param conf - Configuration    * @return long in Milliseconds.    */
DECL|method|getScmheartbeatCheckerInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getScmheartbeatCheckerInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Heartbeat Interval - Defines the heartbeat frequency from a datanode to    * SCM.    *    * @param conf - Ozone Config    * @return - HB interval in seconds.    */
DECL|method|getScmHeartbeatInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getScmHeartbeatInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_HEARBEAT_INTERVAL_SECONDS_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**    * Get the Stale Node interval, which is used by SCM to flag a datanode as    * stale, if the heartbeat from that node has been missing for this duration.    *    * @param conf - Configuration.    * @return - Long, Milliseconds to wait before flagging a node as stale.    */
DECL|method|getStaleNodeInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getStaleNodeInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|staleNodeIntevalMs
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL_MS
argument_list|,
name|OZONE_SCM_STALENODE_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|heartbeatThreadFrequencyMs
init|=
name|getScmheartbeatCheckerInterval
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|heartbeatIntervalMs
init|=
name|getScmHeartbeatInterval
argument_list|(
name|conf
argument_list|)
operator|*
literal|1000
decl_stmt|;
comment|// Make sure that StaleNodeInterval is configured way above the frequency
comment|// at which we run the heartbeat thread.
comment|//
comment|// Here we check that staleNodeInterval is at least five times more than the
comment|// frequency at which the accounting thread is going to run.
try|try
block|{
name|sanitizeUserArgs
argument_list|(
name|staleNodeIntevalMs
argument_list|,
name|heartbeatThreadFrequencyMs
argument_list|,
literal|5
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stale Node Interval MS is cannot be honored due to "
operator|+
literal|"mis-configured {}. ex:  {}"
argument_list|,
name|OZONE_SCM_HEARTBEAT_PROCESS_INTERVAL_MS
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
comment|// Make sure that stale node value is greater than configured value that
comment|// datanodes are going to send HBs.
try|try
block|{
name|sanitizeUserArgs
argument_list|(
name|staleNodeIntevalMs
argument_list|,
name|heartbeatIntervalMs
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Stale Node Interval MS is cannot be honored due to "
operator|+
literal|"mis-configured {}. ex:  {}"
argument_list|,
name|OZONE_SCM_HEARTBEAT_INTERVAL_SECONDS
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|staleNodeIntevalMs
return|;
block|}
comment|/**    * Gets the interval for dead node flagging. This has to be a value that is    * greater than stale node value,  and by transitive relation we also know    * that this value is greater than heartbeat interval and heartbeatProcess    * Interval.    *    * @param conf - Configuration.    * @return - the interval for dead node flagging.    */
DECL|method|getDeadNodeInterval (Configuration conf)
specifier|public
specifier|static
name|long
name|getDeadNodeInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|staleNodeIntervalMs
init|=
name|getStaleNodeInterval
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|deadNodeIntervalMs
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|OZONE_SCM_DEADNODE_INTERVAL_MS
argument_list|,
name|OZONE_SCM_DEADNODE_INTERVAL_DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Make sure that dead nodes Ms is at least twice the time for staleNodes
comment|// with a max of 1000 times the staleNodes.
name|sanitizeUserArgs
argument_list|(
name|deadNodeIntervalMs
argument_list|,
name|staleNodeIntervalMs
argument_list|,
literal|2
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Dead Node Interval MS is cannot be honored due to "
operator|+
literal|"mis-configured {}. ex:  {}"
argument_list|,
name|OZONE_SCM_STALENODE_INTERVAL_MS
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|deadNodeIntervalMs
return|;
block|}
comment|/**    * Returns the maximum number of heartbeat to process per loop of the process    * thread.    * @param conf Configuration    * @return - int -- Number of HBs to process    */
DECL|method|getMaxHBToProcessPerLoop (Configuration conf)
specifier|public
specifier|static
name|int
name|getMaxHBToProcessPerLoop
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_MAX_HB_COUNT_TO_PROCESS
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_MAX_HB_COUNT_TO_PROCESS_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Timeout value for the RPC from Datanode to SCM, primarily used for    * Heartbeats and container reports.    *    * @param conf - Ozone Config    * @return - Rpc timeout in Milliseconds.    */
DECL|method|getScmRpcTimeOutInMilliseconds (Configuration conf)
specifier|public
specifier|static
name|long
name|getScmRpcTimeOutInMilliseconds
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_SCM_HEARTBEAT_RPC_TIMEOUT
argument_list|,
name|OZONE_SCM_HEARTBEAT_RPC_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|/**    * Log Warn interval.    *    * @param conf - Ozone Config    * @return - Log warn interval.    */
DECL|method|getLogWarnInterval (Configuration conf)
specifier|public
specifier|static
name|int
name|getLogWarnInterval
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_SCM_HEARTBEAT_LOG_WARN_INTERVAL_COUNT
argument_list|,
name|OZONE_SCM_HEARTBEAT_LOG_WARN_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * returns the Container port.    * @param conf - Conf    * @return port number.    */
DECL|method|getContainerPort (Configuration conf)
specifier|public
specifier|static
name|int
name|getContainerPort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|ScmConfigKeys
operator|.
name|DFS_CONTAINER_IPC_PORT
argument_list|,
name|ScmConfigKeys
operator|.
name|DFS_CONTAINER_IPC_PORT_DEFAULT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

