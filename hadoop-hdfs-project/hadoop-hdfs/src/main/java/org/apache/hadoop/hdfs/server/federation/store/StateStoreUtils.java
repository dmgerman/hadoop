begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|BaseRecord
import|;
end_import

begin_comment
comment|/**  * Set of utility functions used to query, create, update and delete data  * records in the state store.  */
end_comment

begin_class
DECL|class|StateStoreUtils
specifier|public
specifier|final
class|class
name|StateStoreUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StateStoreUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|StateStoreUtils ()
specifier|private
name|StateStoreUtils
parameter_list|()
block|{
comment|// Utility class
block|}
comment|/**    * Get the base class for a record class. If we get an implementation of a    * record we will return the real parent record class.    *    * @param clazz Class of the data record to check.    * @return Base class for the record.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
DECL|method|getRecordClass (final Class<T> clazz)
name|Class
argument_list|<
name|?
extends|extends
name|BaseRecord
argument_list|>
name|getRecordClass
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
comment|// We ignore the Impl classes and go to the super class
name|Class
argument_list|<
name|?
extends|extends
name|BaseRecord
argument_list|>
name|actualClazz
init|=
name|clazz
decl_stmt|;
while|while
condition|(
name|actualClazz
operator|.
name|getSimpleName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Impl"
argument_list|)
condition|)
block|{
name|actualClazz
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|BaseRecord
argument_list|>
operator|)
name|actualClazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
comment|// Check if we went too far
if|if
condition|(
name|actualClazz
operator|.
name|equals
argument_list|(
name|BaseRecord
operator|.
name|class
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"We went too far ("
operator|+
name|actualClazz
operator|+
literal|") with "
operator|+
name|clazz
argument_list|)
expr_stmt|;
name|actualClazz
operator|=
name|clazz
expr_stmt|;
block|}
return|return
name|actualClazz
return|;
block|}
comment|/**    * Get the base class for a record. If we get an implementation of a record we    * will return the real parent record class.    *    * @param record Record to check its main class.    * @return Base class for the record.    */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|BaseRecord
parameter_list|>
DECL|method|getRecordClass (final T record)
name|Class
argument_list|<
name|?
extends|extends
name|BaseRecord
argument_list|>
name|getRecordClass
parameter_list|(
specifier|final
name|T
name|record
parameter_list|)
block|{
return|return
name|getRecordClass
argument_list|(
name|record
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

