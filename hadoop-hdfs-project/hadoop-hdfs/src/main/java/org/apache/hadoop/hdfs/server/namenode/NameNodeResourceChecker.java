begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|DF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  *   * NameNodeResourceChecker provides a method -  *<code>hasAvailableDiskSpace</code> - which will return true if and only if  * the NameNode has disk space available on all volumes which are configured to  * be checked. Volumes containing file system name/edits dirs are added by  * default, and arbitrary extra volumes may be configured as well.  */
end_comment

begin_class
DECL|class|NameNodeResourceChecker
specifier|public
class|class
name|NameNodeResourceChecker
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NameNodeResourceChecker
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Space (in bytes) reserved per volume.
DECL|field|duReserved
specifier|private
name|long
name|duReserved
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|volumes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DF
argument_list|>
name|volumes
decl_stmt|;
comment|/**    * Create a NameNodeResourceChecker, which will check the name dirs and edits    * dirs set in<code>conf</code>.    *     * @param conf    * @throws IOException    */
DECL|method|NameNodeResourceChecker (Configuration conf)
specifier|public
name|NameNodeResourceChecker
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|volumes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DF
argument_list|>
argument_list|()
expr_stmt|;
name|duReserved
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DU_RESERVED_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DU_RESERVED_DEFAULT
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|extraCheckedVolumes
init|=
name|Util
operator|.
name|stringCollectionAsURIs
argument_list|(
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKED_VOLUMES_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|addDirsToCheck
argument_list|(
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URI
argument_list|>
name|localEditDirs
init|=
name|Collections2
operator|.
name|filter
argument_list|(
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|URI
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|URI
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|NNStorage
operator|.
name|LOCAL_URI_SCHEME
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|addDirsToCheck
argument_list|(
name|localEditDirs
argument_list|)
expr_stmt|;
name|addDirsToCheck
argument_list|(
name|extraCheckedVolumes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add the passed-in directories to the list of volumes to check.    *     * @param directoriesToCheck    *          The directories whose volumes will be checked for available space.    * @throws IOException    */
DECL|method|addDirsToCheck (Collection<URI> directoriesToCheck)
specifier|private
name|void
name|addDirsToCheck
parameter_list|(
name|Collection
argument_list|<
name|URI
argument_list|>
name|directoriesToCheck
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|URI
name|directoryUri
range|:
name|directoriesToCheck
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|directoryUri
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing directory "
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|DF
name|df
init|=
operator|new
name|DF
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|volumes
operator|.
name|put
argument_list|(
name|df
operator|.
name|getFilesystem
argument_list|()
argument_list|,
name|df
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return true if disk space is available on at least one of the configured    * volumes.    *     * @return True if the configured amount of disk space is available on at    *         least one volume, false otherwise.    * @throws IOException    */
DECL|method|hasAvailableDiskSpace ()
name|boolean
name|hasAvailableDiskSpace
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getVolumesLowOnSpace
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|volumes
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Return the set of directories which are low on space.    * @return the set of directories whose free space is below the threshold.    * @throws IOException     */
DECL|method|getVolumesLowOnSpace ()
name|Collection
argument_list|<
name|String
argument_list|>
name|getVolumesLowOnSpace
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Going to check the following volumes disk space: "
operator|+
name|volumes
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|lowVolumes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DF
name|volume
range|:
name|volumes
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|availableSpace
init|=
name|volume
operator|.
name|getAvailable
argument_list|()
decl_stmt|;
name|String
name|fileSystem
init|=
name|volume
operator|.
name|getFilesystem
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Space available on volume '"
operator|+
name|fileSystem
operator|+
literal|"' is "
operator|+
name|availableSpace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|availableSpace
operator|<
name|duReserved
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Space available on volume '"
operator|+
name|fileSystem
operator|+
literal|"' is "
operator|+
name|availableSpace
operator|+
literal|", which is below the configured reserved amount "
operator|+
name|duReserved
argument_list|)
expr_stmt|;
name|lowVolumes
operator|.
name|add
argument_list|(
name|volume
operator|.
name|getFilesystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lowVolumes
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setVolumes (Map<String, DF> volumes)
name|void
name|setVolumes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DF
argument_list|>
name|volumes
parameter_list|)
block|{
name|this
operator|.
name|volumes
operator|=
name|volumes
expr_stmt|;
block|}
block|}
end_class

end_unit

