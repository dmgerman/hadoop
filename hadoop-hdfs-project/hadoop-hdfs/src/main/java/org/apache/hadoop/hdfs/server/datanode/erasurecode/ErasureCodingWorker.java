begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.erasurecode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|erasurecode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockECRecoveryCommand
operator|.
name|BlockECRecoveryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|coder
operator|.
name|AbstractErasureCoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RSRawDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RSRawEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|erasurecode
operator|.
name|rawcoder
operator|.
name|RawErasureCoder
import|;
end_import

begin_comment
comment|/**  * ErasureCodingWorker handles the erasure coding recovery work commands. These  * commands would be issued from Namenode as part of Datanode's heart beat  * response. BPOfferService delegates the work to this class for handling EC  * commands.  */
end_comment

begin_class
DECL|class|ErasureCodingWorker
specifier|public
specifier|final
class|class
name|ErasureCodingWorker
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|rawEncoder
name|RawErasureCoder
name|rawEncoder
init|=
literal|null
decl_stmt|;
DECL|field|rawDecoder
name|RawErasureCoder
name|rawDecoder
init|=
literal|null
decl_stmt|;
DECL|method|ErasureCodingWorker (Configuration conf)
specifier|public
name|ErasureCodingWorker
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initializes the required resources for handling the erasure coding recovery    * work.    */
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
block|{
comment|// Right now directly used RS coder. Once other coders integration ready, we
comment|// can load preferred codec here.
name|initializeErasureEncoder
argument_list|()
expr_stmt|;
name|initializeErasureDecoder
argument_list|()
expr_stmt|;
block|}
DECL|method|initializeErasureDecoder ()
specifier|private
name|void
name|initializeErasureDecoder
parameter_list|()
block|{
name|rawDecoder
operator|=
name|AbstractErasureCoder
operator|.
name|createRawCoder
argument_list|(
name|conf
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IO_ERASURECODE_CODEC_RS_RAWCODER_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|rawDecoder
operator|==
literal|null
condition|)
block|{
name|rawDecoder
operator|=
operator|new
name|RSRawDecoder
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|initializeErasureEncoder ()
specifier|private
name|void
name|initializeErasureEncoder
parameter_list|()
block|{
name|rawEncoder
operator|=
name|AbstractErasureCoder
operator|.
name|createRawCoder
argument_list|(
name|conf
argument_list|,
name|CommonConfigurationKeys
operator|.
name|IO_ERASURECODE_CODEC_RS_RAWCODER_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|rawEncoder
operator|==
literal|null
condition|)
block|{
name|rawEncoder
operator|=
operator|new
name|RSRawEncoder
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Handles the Erasure Coding recovery work commands.    *     * @param ecTasks    *          BlockECRecoveryInfo    */
DECL|method|processErasureCodingTasks (Collection<BlockECRecoveryInfo> ecTasks)
specifier|public
name|void
name|processErasureCodingTasks
parameter_list|(
name|Collection
argument_list|<
name|BlockECRecoveryInfo
argument_list|>
name|ecTasks
parameter_list|)
block|{
comment|// HDFS-7348 : Implement the actual recovery process
block|}
block|}
end_class

end_unit

