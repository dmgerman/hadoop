begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_BLOCK_WRITE_RETRIES_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_BLOCK_WRITE_RETRIES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CACHED_CONN_RETRY_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CACHED_CONN_RETRY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CACHE_DROP_BEHIND_READS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CACHE_DROP_BEHIND_WRITES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CACHE_READAHEAD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_DATANODE_RESTART_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_DATANODE_RESTART_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_MAX_ATTEMPTS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_MAX_ATTEMPTS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_SLEEPTIME_BASE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_SLEEPTIME_BASE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_SLEEPTIME_MAX_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FAILOVER_SLEEPTIME_MAX_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_RETRY_MAX_ATTEMPTS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_RETRY_MAX_ATTEMPTS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_PREFETCH_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_RETRY_WINDOW_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_CACHE_CAPACITY_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_CACHE_CAPACITY_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_USE_DN_HOSTNAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_USE_DN_HOSTNAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_EXCLUDE_NODES_CACHE_EXPIRY_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_EXCLUDE_NODES_CACHE_EXPIRY_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT_DEFAULT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockStorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|HdfsBlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32CastagnoliFileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32FileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|MD5MD5CRC32GzipFileChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|ChecksumOpt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|VolumeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AclException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|Peer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|net
operator|.
name|TcpPeerServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|EncryptionZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsBlocksMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|RollingUpgradeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|NSQuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RollingUpgradeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|UnresolvedPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|DataTransferEncryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|IOStreamPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|ReplaceDatanodeOnFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|TrustedChannelResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|BlockOpResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|OpBlockChecksumResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DataTransferProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|DataEncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|InvalidBlockTokenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|CachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|SafeModeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|EnumSetWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|LossyRetryInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|InetAddresses
import|;
end_import

begin_comment
comment|/********************************************************  * DFSClient can connect to a Hadoop Filesystem and   * perform basic file tasks.  It uses the ClientProtocol  * to communicate with a NameNode daemon, and connects   * directly to DataNodes to read/write block data.  *  * Hadoop DFS users should obtain an instance of   * DistributedFileSystem, which uses DFSClient to handle  * filesystem tasks.  *  ********************************************************/
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DFSClient
specifier|public
class|class
name|DFSClient
implements|implements
name|java
operator|.
name|io
operator|.
name|Closeable
implements|,
name|RemotePeerFactory
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DFSClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SERVER_DEFAULTS_VALIDITY_PERIOD
specifier|public
specifier|static
specifier|final
name|long
name|SERVER_DEFAULTS_VALIDITY_PERIOD
init|=
literal|60
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
comment|// 1 hour
DECL|field|TCP_WINDOW_SIZE
specifier|static
specifier|final
name|int
name|TCP_WINDOW_SIZE
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
comment|// 128 KB
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|dfsClientConf
specifier|private
specifier|final
name|Conf
name|dfsClientConf
decl_stmt|;
DECL|field|namenode
specifier|final
name|ClientProtocol
name|namenode
decl_stmt|;
comment|/* The service used for delegation tokens */
DECL|field|dtService
specifier|private
name|Text
name|dtService
decl_stmt|;
DECL|field|ugi
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|clientRunning
specifier|volatile
name|boolean
name|clientRunning
init|=
literal|true
decl_stmt|;
DECL|field|lastLeaseRenewal
specifier|volatile
name|long
name|lastLeaseRenewal
decl_stmt|;
DECL|field|serverDefaults
specifier|private
specifier|volatile
name|FsServerDefaults
name|serverDefaults
decl_stmt|;
DECL|field|serverDefaultsLastUpdate
specifier|private
specifier|volatile
name|long
name|serverDefaultsLastUpdate
decl_stmt|;
DECL|field|clientName
specifier|final
name|String
name|clientName
decl_stmt|;
DECL|field|socketFactory
specifier|final
name|SocketFactory
name|socketFactory
decl_stmt|;
DECL|field|dtpReplaceDatanodeOnFailure
specifier|final
name|ReplaceDatanodeOnFailure
name|dtpReplaceDatanodeOnFailure
decl_stmt|;
DECL|field|stats
specifier|final
name|FileSystem
operator|.
name|Statistics
name|stats
decl_stmt|;
DECL|field|authority
specifier|private
specifier|final
name|String
name|authority
decl_stmt|;
DECL|field|r
specifier|private
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|localInterfaceAddrs
specifier|private
name|SocketAddress
index|[]
name|localInterfaceAddrs
decl_stmt|;
DECL|field|encryptionKey
specifier|private
name|DataEncryptionKey
name|encryptionKey
decl_stmt|;
DECL|field|trustedChannelResolver
specifier|final
name|TrustedChannelResolver
name|trustedChannelResolver
decl_stmt|;
DECL|field|defaultReadCachingStrategy
specifier|private
specifier|final
name|CachingStrategy
name|defaultReadCachingStrategy
decl_stmt|;
DECL|field|defaultWriteCachingStrategy
specifier|private
specifier|final
name|CachingStrategy
name|defaultWriteCachingStrategy
decl_stmt|;
DECL|field|clientContext
specifier|private
specifier|final
name|ClientContext
name|clientContext
decl_stmt|;
DECL|field|hedgedReadThresholdMillis
specifier|private
specifier|volatile
name|long
name|hedgedReadThresholdMillis
decl_stmt|;
DECL|field|HEDGED_READ_METRIC
specifier|private
specifier|static
specifier|final
name|DFSHedgedReadMetrics
name|HEDGED_READ_METRIC
init|=
operator|new
name|DFSHedgedReadMetrics
argument_list|()
decl_stmt|;
DECL|field|HEDGED_READ_THREAD_POOL
specifier|private
specifier|static
name|ThreadPoolExecutor
name|HEDGED_READ_THREAD_POOL
decl_stmt|;
DECL|field|codec
specifier|private
specifier|final
name|CryptoCodec
name|codec
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|cipherSuites
name|List
argument_list|<
name|CipherSuite
argument_list|>
name|cipherSuites
decl_stmt|;
comment|/**    * DFSClient configuration     */
DECL|class|Conf
specifier|public
specifier|static
class|class
name|Conf
block|{
DECL|field|hdfsTimeout
specifier|final
name|int
name|hdfsTimeout
decl_stmt|;
comment|// timeout value for a DFS operation.
DECL|field|maxFailoverAttempts
specifier|final
name|int
name|maxFailoverAttempts
decl_stmt|;
DECL|field|maxRetryAttempts
specifier|final
name|int
name|maxRetryAttempts
decl_stmt|;
DECL|field|failoverSleepBaseMillis
specifier|final
name|int
name|failoverSleepBaseMillis
decl_stmt|;
DECL|field|failoverSleepMaxMillis
specifier|final
name|int
name|failoverSleepMaxMillis
decl_stmt|;
DECL|field|maxBlockAcquireFailures
specifier|final
name|int
name|maxBlockAcquireFailures
decl_stmt|;
DECL|field|confTime
specifier|final
name|int
name|confTime
decl_stmt|;
DECL|field|ioBufferSize
specifier|final
name|int
name|ioBufferSize
decl_stmt|;
DECL|field|defaultChecksumOpt
specifier|final
name|ChecksumOpt
name|defaultChecksumOpt
decl_stmt|;
DECL|field|writePacketSize
specifier|final
name|int
name|writePacketSize
decl_stmt|;
DECL|field|socketTimeout
specifier|final
name|int
name|socketTimeout
decl_stmt|;
DECL|field|socketCacheCapacity
specifier|final
name|int
name|socketCacheCapacity
decl_stmt|;
DECL|field|socketCacheExpiry
specifier|final
name|long
name|socketCacheExpiry
decl_stmt|;
DECL|field|excludedNodesCacheExpiry
specifier|final
name|long
name|excludedNodesCacheExpiry
decl_stmt|;
comment|/** Wait time window (in msec) if BlockMissingException is caught */
DECL|field|timeWindow
specifier|final
name|int
name|timeWindow
decl_stmt|;
DECL|field|nCachedConnRetry
specifier|final
name|int
name|nCachedConnRetry
decl_stmt|;
DECL|field|nBlockWriteRetry
specifier|final
name|int
name|nBlockWriteRetry
decl_stmt|;
DECL|field|nBlockWriteLocateFollowingRetry
specifier|final
name|int
name|nBlockWriteLocateFollowingRetry
decl_stmt|;
DECL|field|defaultBlockSize
specifier|final
name|long
name|defaultBlockSize
decl_stmt|;
DECL|field|prefetchSize
specifier|final
name|long
name|prefetchSize
decl_stmt|;
DECL|field|defaultReplication
specifier|final
name|short
name|defaultReplication
decl_stmt|;
DECL|field|taskId
specifier|final
name|String
name|taskId
decl_stmt|;
DECL|field|uMask
specifier|final
name|FsPermission
name|uMask
decl_stmt|;
DECL|field|connectToDnViaHostname
specifier|final
name|boolean
name|connectToDnViaHostname
decl_stmt|;
DECL|field|getHdfsBlocksMetadataEnabled
specifier|final
name|boolean
name|getHdfsBlocksMetadataEnabled
decl_stmt|;
DECL|field|getFileBlockStorageLocationsNumThreads
specifier|final
name|int
name|getFileBlockStorageLocationsNumThreads
decl_stmt|;
DECL|field|getFileBlockStorageLocationsTimeoutMs
specifier|final
name|int
name|getFileBlockStorageLocationsTimeoutMs
decl_stmt|;
DECL|field|retryTimesForGetLastBlockLength
specifier|final
name|int
name|retryTimesForGetLastBlockLength
decl_stmt|;
DECL|field|retryIntervalForGetLastBlockLength
specifier|final
name|int
name|retryIntervalForGetLastBlockLength
decl_stmt|;
DECL|field|datanodeRestartTimeout
specifier|final
name|long
name|datanodeRestartTimeout
decl_stmt|;
DECL|field|dfsclientSlowIoWarningThresholdMs
specifier|final
name|long
name|dfsclientSlowIoWarningThresholdMs
decl_stmt|;
DECL|field|useLegacyBlockReader
specifier|final
name|boolean
name|useLegacyBlockReader
decl_stmt|;
DECL|field|useLegacyBlockReaderLocal
specifier|final
name|boolean
name|useLegacyBlockReaderLocal
decl_stmt|;
DECL|field|domainSocketPath
specifier|final
name|String
name|domainSocketPath
decl_stmt|;
DECL|field|skipShortCircuitChecksums
specifier|final
name|boolean
name|skipShortCircuitChecksums
decl_stmt|;
DECL|field|shortCircuitBufferSize
specifier|final
name|int
name|shortCircuitBufferSize
decl_stmt|;
DECL|field|shortCircuitLocalReads
specifier|final
name|boolean
name|shortCircuitLocalReads
decl_stmt|;
DECL|field|domainSocketDataTraffic
specifier|final
name|boolean
name|domainSocketDataTraffic
decl_stmt|;
DECL|field|shortCircuitStreamsCacheSize
specifier|final
name|int
name|shortCircuitStreamsCacheSize
decl_stmt|;
DECL|field|shortCircuitStreamsCacheExpiryMs
specifier|final
name|long
name|shortCircuitStreamsCacheExpiryMs
decl_stmt|;
DECL|field|shortCircuitSharedMemoryWatcherInterruptCheckMs
specifier|final
name|int
name|shortCircuitSharedMemoryWatcherInterruptCheckMs
decl_stmt|;
DECL|field|shortCircuitMmapEnabled
specifier|final
name|boolean
name|shortCircuitMmapEnabled
decl_stmt|;
DECL|field|shortCircuitMmapCacheSize
specifier|final
name|int
name|shortCircuitMmapCacheSize
decl_stmt|;
DECL|field|shortCircuitMmapCacheExpiryMs
specifier|final
name|long
name|shortCircuitMmapCacheExpiryMs
decl_stmt|;
DECL|field|shortCircuitMmapCacheRetryTimeout
specifier|final
name|long
name|shortCircuitMmapCacheRetryTimeout
decl_stmt|;
DECL|field|shortCircuitCacheStaleThresholdMs
specifier|final
name|long
name|shortCircuitCacheStaleThresholdMs
decl_stmt|;
DECL|method|Conf (Configuration conf)
specifier|public
name|Conf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// The hdfsTimeout is currently the same as the ipc timeout
name|hdfsTimeout
operator|=
name|Client
operator|.
name|getTimeout
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|maxFailoverAttempts
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_FAILOVER_MAX_ATTEMPTS_KEY
argument_list|,
name|DFS_CLIENT_FAILOVER_MAX_ATTEMPTS_DEFAULT
argument_list|)
expr_stmt|;
name|maxRetryAttempts
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_RETRY_MAX_ATTEMPTS_KEY
argument_list|,
name|DFS_CLIENT_RETRY_MAX_ATTEMPTS_DEFAULT
argument_list|)
expr_stmt|;
name|failoverSleepBaseMillis
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_FAILOVER_SLEEPTIME_BASE_KEY
argument_list|,
name|DFS_CLIENT_FAILOVER_SLEEPTIME_BASE_DEFAULT
argument_list|)
expr_stmt|;
name|failoverSleepMaxMillis
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_FAILOVER_SLEEPTIME_MAX_KEY
argument_list|,
name|DFS_CLIENT_FAILOVER_SLEEPTIME_MAX_DEFAULT
argument_list|)
expr_stmt|;
name|maxBlockAcquireFailures
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_KEY
argument_list|,
name|DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_DEFAULT
argument_list|)
expr_stmt|;
name|confTime
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY
argument_list|,
name|HdfsServerConstants
operator|.
name|WRITE_TIMEOUT
argument_list|)
expr_stmt|;
name|ioBufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|defaultChecksumOpt
operator|=
name|getChecksumOptFromConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|socketTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_SOCKET_TIMEOUT_KEY
argument_list|,
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT
argument_list|)
expr_stmt|;
comment|/** dfs.write.packet.size is an internal config variable */
name|writePacketSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
argument_list|,
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|defaultBlockSize
operator|=
name|conf
operator|.
name|getLongBytes
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|defaultReplication
operator|=
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_REPLICATION_KEY
argument_list|,
name|DFS_REPLICATION_DEFAULT
argument_list|)
expr_stmt|;
name|taskId
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapreduce.task.attempt.id"
argument_list|,
literal|"NONMAPREDUCE"
argument_list|)
expr_stmt|;
name|socketCacheCapacity
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_SOCKET_CACHE_CAPACITY_KEY
argument_list|,
name|DFS_CLIENT_SOCKET_CACHE_CAPACITY_DEFAULT
argument_list|)
expr_stmt|;
name|socketCacheExpiry
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY
argument_list|,
name|DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_DEFAULT
argument_list|)
expr_stmt|;
name|excludedNodesCacheExpiry
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_WRITE_EXCLUDE_NODES_CACHE_EXPIRY_INTERVAL
argument_list|,
name|DFS_CLIENT_WRITE_EXCLUDE_NODES_CACHE_EXPIRY_INTERVAL_DEFAULT
argument_list|)
expr_stmt|;
name|prefetchSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_READ_PREFETCH_SIZE_KEY
argument_list|,
literal|10
operator|*
name|defaultBlockSize
argument_list|)
expr_stmt|;
name|timeWindow
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_RETRY_WINDOW_BASE
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|nCachedConnRetry
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_CACHED_CONN_RETRY_KEY
argument_list|,
name|DFS_CLIENT_CACHED_CONN_RETRY_DEFAULT
argument_list|)
expr_stmt|;
name|nBlockWriteRetry
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_BLOCK_WRITE_RETRIES_KEY
argument_list|,
name|DFS_CLIENT_BLOCK_WRITE_RETRIES_DEFAULT
argument_list|)
expr_stmt|;
name|nBlockWriteLocateFollowingRetry
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_KEY
argument_list|,
name|DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_DEFAULT
argument_list|)
expr_stmt|;
name|uMask
operator|=
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|connectToDnViaHostname
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CLIENT_USE_DN_HOSTNAME
argument_list|,
name|DFS_CLIENT_USE_DN_HOSTNAME_DEFAULT
argument_list|)
expr_stmt|;
name|getHdfsBlocksMetadataEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HDFS_BLOCKS_METADATA_ENABLED
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HDFS_BLOCKS_METADATA_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|getFileBlockStorageLocationsNumThreads
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FILE_BLOCK_STORAGE_LOCATIONS_NUM_THREADS
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FILE_BLOCK_STORAGE_LOCATIONS_NUM_THREADS_DEFAULT
argument_list|)
expr_stmt|;
name|getFileBlockStorageLocationsTimeoutMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FILE_BLOCK_STORAGE_LOCATIONS_TIMEOUT_MS
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_FILE_BLOCK_STORAGE_LOCATIONS_TIMEOUT_MS_DEFAULT
argument_list|)
expr_stmt|;
name|retryTimesForGetLastBlockLength
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_RETRY_TIMES_GET_LAST_BLOCK_LENGTH
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_RETRY_TIMES_GET_LAST_BLOCK_LENGTH_DEFAULT
argument_list|)
expr_stmt|;
name|retryIntervalForGetLastBlockLength
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_RETRY_INTERVAL_GET_LAST_BLOCK_LENGTH
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_RETRY_INTERVAL_GET_LAST_BLOCK_LENGTH_DEFAULT
argument_list|)
expr_stmt|;
name|useLegacyBlockReader
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADER
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADER_DEFAULT
argument_list|)
expr_stmt|;
name|useLegacyBlockReaderLocal
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitLocalReads
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_DEFAULT
argument_list|)
expr_stmt|;
name|domainSocketDataTraffic
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC_DEFAULT
argument_list|)
expr_stmt|;
name|domainSocketPath
operator|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|BlockReaderLocal
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|BlockReaderLocal
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL
operator|+
literal|" = "
operator|+
name|useLegacyBlockReaderLocal
argument_list|)
expr_stmt|;
name|BlockReaderLocal
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_KEY
operator|+
literal|" = "
operator|+
name|shortCircuitLocalReads
argument_list|)
expr_stmt|;
name|BlockReaderLocal
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC
operator|+
literal|" = "
operator|+
name|domainSocketDataTraffic
argument_list|)
expr_stmt|;
name|BlockReaderLocal
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DOMAIN_SOCKET_PATH_KEY
operator|+
literal|" = "
operator|+
name|domainSocketPath
argument_list|)
expr_stmt|;
block|}
name|skipShortCircuitChecksums
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitBufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_BUFFER_SIZE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_BUFFER_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitStreamsCacheSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_SIZE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitStreamsCacheExpiryMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_EXPIRY_MS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_EXPIRY_MS_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitMmapEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_ENABLED
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitMmapCacheSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_SIZE
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitMmapCacheExpiryMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_TIMEOUT_MS
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_CACHE_TIMEOUT_MS_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitMmapCacheRetryTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_RETRY_TIMEOUT_MS
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_MMAP_RETRY_TIMEOUT_MS_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitCacheStaleThresholdMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SHORT_CIRCUIT_REPLICA_STALE_THRESHOLD_MS
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SHORT_CIRCUIT_REPLICA_STALE_THRESHOLD_MS_DEFAULT
argument_list|)
expr_stmt|;
name|shortCircuitSharedMemoryWatcherInterruptCheckMs
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS_DEFAULT
argument_list|)
expr_stmt|;
name|datanodeRestartTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_DATANODE_RESTART_TIMEOUT_KEY
argument_list|,
name|DFS_CLIENT_DATANODE_RESTART_TIMEOUT_DEFAULT
argument_list|)
operator|*
literal|1000
expr_stmt|;
name|dfsclientSlowIoWarningThresholdMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|isUseLegacyBlockReaderLocal ()
specifier|public
name|boolean
name|isUseLegacyBlockReaderLocal
parameter_list|()
block|{
return|return
name|useLegacyBlockReaderLocal
return|;
block|}
DECL|method|getDomainSocketPath ()
specifier|public
name|String
name|getDomainSocketPath
parameter_list|()
block|{
return|return
name|domainSocketPath
return|;
block|}
DECL|method|isShortCircuitLocalReads ()
specifier|public
name|boolean
name|isShortCircuitLocalReads
parameter_list|()
block|{
return|return
name|shortCircuitLocalReads
return|;
block|}
DECL|method|isDomainSocketDataTraffic ()
specifier|public
name|boolean
name|isDomainSocketDataTraffic
parameter_list|()
block|{
return|return
name|domainSocketDataTraffic
return|;
block|}
DECL|method|getChecksumType (Configuration conf)
specifier|private
name|DataChecksum
operator|.
name|Type
name|getChecksumType
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|String
name|checksum
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|DataChecksum
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|checksum
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bad checksum type: "
operator|+
name|checksum
operator|+
literal|". Using default "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_DEFAULT
argument_list|)
expr_stmt|;
return|return
name|DataChecksum
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_DEFAULT
argument_list|)
return|;
block|}
block|}
comment|// Construct a checksum option from conf
DECL|method|getChecksumOptFromConf (Configuration conf)
specifier|private
name|ChecksumOpt
name|getChecksumOptFromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|DataChecksum
operator|.
name|Type
name|type
init|=
name|getChecksumType
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|bytesPerChecksum
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|ChecksumOpt
argument_list|(
name|type
argument_list|,
name|bytesPerChecksum
argument_list|)
return|;
block|}
comment|// create a DataChecksum with the default option.
DECL|method|createChecksum ()
specifier|private
name|DataChecksum
name|createChecksum
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createChecksum
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|createChecksum (ChecksumOpt userOpt)
specifier|private
name|DataChecksum
name|createChecksum
parameter_list|(
name|ChecksumOpt
name|userOpt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Fill in any missing field with the default.
name|ChecksumOpt
name|myOpt
init|=
name|ChecksumOpt
operator|.
name|processChecksumOpt
argument_list|(
name|defaultChecksumOpt
argument_list|,
name|userOpt
argument_list|)
decl_stmt|;
name|DataChecksum
name|dataChecksum
init|=
name|DataChecksum
operator|.
name|newDataChecksum
argument_list|(
name|myOpt
operator|.
name|getChecksumType
argument_list|()
argument_list|,
name|myOpt
operator|.
name|getBytesPerChecksum
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataChecksum
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid checksum type specified: "
operator|+
name|myOpt
operator|.
name|getChecksumType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|dataChecksum
return|;
block|}
block|}
DECL|method|getConf ()
specifier|public
name|Conf
name|getConf
parameter_list|()
block|{
return|return
name|dfsClientConf
return|;
block|}
DECL|method|getConfiguration ()
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * A map from file names to {@link DFSOutputStream} objects    * that are currently being written by this client.    * Note that a file can only be written by a single client.    */
DECL|field|filesBeingWritten
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|DFSOutputStream
argument_list|>
name|filesBeingWritten
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|DFSOutputStream
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Same as this(NameNode.getAddress(conf), conf);    * @see #DFSClient(InetSocketAddress, Configuration)    * @deprecated Deprecated at 0.21    */
annotation|@
name|Deprecated
DECL|method|DFSClient (Configuration conf)
specifier|public
name|DFSClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|NameNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|DFSClient (InetSocketAddress address, Configuration conf)
specifier|public
name|DFSClient
parameter_list|(
name|InetSocketAddress
name|address
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|NameNode
operator|.
name|getUri
argument_list|(
name|address
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Same as this(nameNodeUri, conf, null);    * @see #DFSClient(URI, Configuration, FileSystem.Statistics)    */
DECL|method|DFSClient (URI nameNodeUri, Configuration conf )
specifier|public
name|DFSClient
parameter_list|(
name|URI
name|nameNodeUri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|nameNodeUri
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Same as this(nameNodeUri, null, conf, stats);    * @see #DFSClient(URI, ClientProtocol, Configuration, FileSystem.Statistics)     */
DECL|method|DFSClient (URI nameNodeUri, Configuration conf, FileSystem.Statistics stats)
specifier|public
name|DFSClient
parameter_list|(
name|URI
name|nameNodeUri
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|stats
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|nameNodeUri
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
comment|/**     * Create a new DFSClient connected to the given nameNodeUri or rpcNamenode.    * If HA is enabled and a positive value is set for     * {@link DFSConfigKeys#DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY} in the    * configuration, the DFSClient will use {@link LossyRetryInvocationHandler}    * as its RetryInvocationHandler. Otherwise one of nameNodeUri or rpcNamenode     * must be null.    */
annotation|@
name|VisibleForTesting
DECL|method|DFSClient (URI nameNodeUri, ClientProtocol rpcNamenode, Configuration conf, FileSystem.Statistics stats)
specifier|public
name|DFSClient
parameter_list|(
name|URI
name|nameNodeUri
parameter_list|,
name|ClientProtocol
name|rpcNamenode
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|stats
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Copy only the required DFSClient configuration
name|this
operator|.
name|dfsClientConf
operator|=
operator|new
name|Conf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dfsClientConf
operator|.
name|useLegacyBlockReaderLocal
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using legacy short-circuit local reads."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|socketFactory
operator|=
name|NetUtils
operator|.
name|getSocketFactory
argument_list|(
name|conf
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|dtpReplaceDatanodeOnFailure
operator|=
name|ReplaceDatanodeOnFailure
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|authority
operator|=
name|nameNodeUri
operator|==
literal|null
condition|?
literal|"null"
else|:
name|nameNodeUri
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
name|this
operator|.
name|clientName
operator|=
literal|"DFSClient_"
operator|+
name|dfsClientConf
operator|.
name|taskId
operator|+
literal|"_"
operator|+
name|DFSUtil
operator|.
name|getRandom
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|+
literal|"_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|this
operator|.
name|codec
operator|=
name|CryptoCodec
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cipherSuites
operator|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cipherSuites
operator|.
name|add
argument_list|(
name|codec
operator|.
name|getCipherSuite
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numResponseToDrop
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_DEFAULT
argument_list|)
decl_stmt|;
name|NameNodeProxies
operator|.
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
name|proxyInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|numResponseToDrop
operator|>
literal|0
condition|)
block|{
comment|// This case is used for testing.
name|LOG
operator|.
name|warn
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY
operator|+
literal|" is set to "
operator|+
name|numResponseToDrop
operator|+
literal|", this hacked client will proactively drop responses"
argument_list|)
expr_stmt|;
name|proxyInfo
operator|=
name|NameNodeProxies
operator|.
name|createProxyWithLossyRetryHandler
argument_list|(
name|conf
argument_list|,
name|nameNodeUri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|,
name|numResponseToDrop
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxyInfo
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|dtService
operator|=
name|proxyInfo
operator|.
name|getDelegationTokenService
argument_list|()
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|proxyInfo
operator|.
name|getProxy
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rpcNamenode
operator|!=
literal|null
condition|)
block|{
comment|// This case is used for testing.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nameNodeUri
operator|==
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|rpcNamenode
expr_stmt|;
name|dtService
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nameNodeUri
operator|!=
literal|null
argument_list|,
literal|"null URI"
argument_list|)
expr_stmt|;
name|proxyInfo
operator|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|nameNodeUri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|dtService
operator|=
name|proxyInfo
operator|.
name|getDelegationTokenService
argument_list|()
expr_stmt|;
name|this
operator|.
name|namenode
operator|=
name|proxyInfo
operator|.
name|getProxy
argument_list|()
expr_stmt|;
block|}
name|String
name|localInterfaces
index|[]
init|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_LOCAL_INTERFACES
argument_list|)
decl_stmt|;
name|localInterfaceAddrs
operator|=
name|getLocalInterfaceAddrs
argument_list|(
name|localInterfaces
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
literal|0
operator|!=
name|localInterfaces
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using local interfaces ["
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|localInterfaces
argument_list|)
operator|+
literal|"] with addresses ["
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|localInterfaceAddrs
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|readDropBehind
init|=
operator|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_CLIENT_CACHE_DROP_BEHIND_READS
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CLIENT_CACHE_DROP_BEHIND_READS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Long
name|readahead
init|=
operator|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_CLIENT_CACHE_READAHEAD
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_CLIENT_CACHE_READAHEAD
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Boolean
name|writeDropBehind
init|=
operator|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_CLIENT_CACHE_DROP_BEHIND_WRITES
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CLIENT_CACHE_DROP_BEHIND_WRITES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|defaultReadCachingStrategy
operator|=
operator|new
name|CachingStrategy
argument_list|(
name|readDropBehind
argument_list|,
name|readahead
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultWriteCachingStrategy
operator|=
operator|new
name|CachingStrategy
argument_list|(
name|writeDropBehind
argument_list|,
name|readahead
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientContext
operator|=
name|ClientContext
operator|.
name|get
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_CLIENT_CONTEXT
argument_list|,
name|DFS_CLIENT_CONTEXT_DEFAULT
argument_list|)
argument_list|,
name|dfsClientConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|hedgedReadThresholdMillis
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DFSCLIENT_HEDGED_READ_THRESHOLD_MILLIS
argument_list|,
name|DFSConfigKeys
operator|.
name|DEFAULT_DFSCLIENT_HEDGED_READ_THRESHOLD_MILLIS
argument_list|)
expr_stmt|;
name|int
name|numThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DFSCLIENT_HEDGED_READ_THREADPOOL_SIZE
argument_list|,
name|DFSConfigKeys
operator|.
name|DEFAULT_DFSCLIENT_HEDGED_READ_THREADPOOL_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|numThreads
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|initThreadsNumForHedgedReads
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|trustedChannelResolver
operator|=
name|TrustedChannelResolver
operator|.
name|getInstance
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the socket addresses to use with each configured    * local interface. Local interfaces may be specified by IP    * address, IP address range using CIDR notation, interface    * name (e.g. eth0) or sub-interface name (e.g. eth0:0).    * The socket addresses consist of the IPs for the interfaces    * and the ephemeral port (port 0). If an IP, IP range, or    * interface name matches an interface with sub-interfaces    * only the IP of the interface is used. Sub-interfaces can    * be used by specifying them explicitly (by IP or name).    *     * @return SocketAddresses for the configured local interfaces,    *    or an empty array if none are configured    * @throws UnknownHostException if a given interface name is invalid    */
DECL|method|getLocalInterfaceAddrs ( String interfaceNames[])
specifier|private
specifier|static
name|SocketAddress
index|[]
name|getLocalInterfaceAddrs
parameter_list|(
name|String
name|interfaceNames
index|[]
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|List
argument_list|<
name|SocketAddress
argument_list|>
name|localAddrs
init|=
operator|new
name|ArrayList
argument_list|<
name|SocketAddress
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|interfaceName
range|:
name|interfaceNames
control|)
block|{
if|if
condition|(
name|InetAddresses
operator|.
name|isInetAddress
argument_list|(
name|interfaceName
argument_list|)
condition|)
block|{
name|localAddrs
operator|.
name|add
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|interfaceName
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NetUtils
operator|.
name|isValidSubnet
argument_list|(
name|interfaceName
argument_list|)
condition|)
block|{
for|for
control|(
name|InetAddress
name|addr
range|:
name|NetUtils
operator|.
name|getIPs
argument_list|(
name|interfaceName
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|localAddrs
operator|.
name|add
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|addr
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|ip
range|:
name|DNS
operator|.
name|getIPs
argument_list|(
name|interfaceName
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|localAddrs
operator|.
name|add
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|ip
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|localAddrs
operator|.
name|toArray
argument_list|(
operator|new
name|SocketAddress
index|[
name|localAddrs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Select one of the configured local interfaces at random. We use a random    * interface because other policies like round-robin are less effective    * given that we cache connections to datanodes.    *    * @return one of the local interface addresses at random, or null if no    *    local interfaces are configured    */
DECL|method|getRandomLocalInterfaceAddr ()
name|SocketAddress
name|getRandomLocalInterfaceAddr
parameter_list|()
block|{
if|if
condition|(
name|localInterfaceAddrs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|idx
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|localInterfaceAddrs
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|SocketAddress
name|addr
init|=
name|localInterfaceAddrs
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using local interface "
operator|+
name|addr
argument_list|)
expr_stmt|;
block|}
return|return
name|addr
return|;
block|}
comment|/**    * Return the number of times the client should go back to the namenode    * to retrieve block locations when reading.    */
DECL|method|getMaxBlockAcquireFailures ()
name|int
name|getMaxBlockAcquireFailures
parameter_list|()
block|{
return|return
name|dfsClientConf
operator|.
name|maxBlockAcquireFailures
return|;
block|}
comment|/**    * Return the timeout that clients should use when writing to datanodes.    * @param numNodes the number of nodes in the pipeline.    */
DECL|method|getDatanodeWriteTimeout (int numNodes)
name|int
name|getDatanodeWriteTimeout
parameter_list|(
name|int
name|numNodes
parameter_list|)
block|{
return|return
operator|(
name|dfsClientConf
operator|.
name|confTime
operator|>
literal|0
operator|)
condition|?
operator|(
name|dfsClientConf
operator|.
name|confTime
operator|+
name|HdfsServerConstants
operator|.
name|WRITE_TIMEOUT_EXTENSION
operator|*
name|numNodes
operator|)
else|:
literal|0
return|;
block|}
DECL|method|getDatanodeReadTimeout (int numNodes)
name|int
name|getDatanodeReadTimeout
parameter_list|(
name|int
name|numNodes
parameter_list|)
block|{
return|return
name|dfsClientConf
operator|.
name|socketTimeout
operator|>
literal|0
condition|?
operator|(
name|HdfsServerConstants
operator|.
name|READ_TIMEOUT_EXTENSION
operator|*
name|numNodes
operator|+
name|dfsClientConf
operator|.
name|socketTimeout
operator|)
else|:
literal|0
return|;
block|}
DECL|method|getHdfsTimeout ()
name|int
name|getHdfsTimeout
parameter_list|()
block|{
return|return
name|dfsClientConf
operator|.
name|hdfsTimeout
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getClientName ()
specifier|public
name|String
name|getClientName
parameter_list|()
block|{
return|return
name|clientName
return|;
block|}
DECL|method|checkOpen ()
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|clientRunning
condition|)
block|{
name|IOException
name|result
init|=
operator|new
name|IOException
argument_list|(
literal|"Filesystem closed"
argument_list|)
decl_stmt|;
throw|throw
name|result
throw|;
block|}
block|}
comment|/** Return the lease renewer instance. The renewer thread won't start    *  until the first output stream is created. The same instance will    *  be returned until all output streams are closed.    */
DECL|method|getLeaseRenewer ()
specifier|public
name|LeaseRenewer
name|getLeaseRenewer
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|LeaseRenewer
operator|.
name|getInstance
argument_list|(
name|authority
argument_list|,
name|ugi
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/** Get a lease and start automatic renewal */
DECL|method|beginFileLease (final long inodeId, final DFSOutputStream out)
specifier|private
name|void
name|beginFileLease
parameter_list|(
specifier|final
name|long
name|inodeId
parameter_list|,
specifier|final
name|DFSOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|getLeaseRenewer
argument_list|()
operator|.
name|put
argument_list|(
name|inodeId
argument_list|,
name|out
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/** Stop renewal of lease for the file. */
DECL|method|endFileLease (final long inodeId)
name|void
name|endFileLease
parameter_list|(
specifier|final
name|long
name|inodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|getLeaseRenewer
argument_list|()
operator|.
name|closeFile
argument_list|(
name|inodeId
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/** Put a file. Only called from LeaseRenewer, where proper locking is    *  enforced to consistently update its local dfsclients array and     *  client's filesBeingWritten map.    */
DECL|method|putFileBeingWritten (final long inodeId, final DFSOutputStream out)
name|void
name|putFileBeingWritten
parameter_list|(
specifier|final
name|long
name|inodeId
parameter_list|,
specifier|final
name|DFSOutputStream
name|out
parameter_list|)
block|{
synchronized|synchronized
init|(
name|filesBeingWritten
init|)
block|{
name|filesBeingWritten
operator|.
name|put
argument_list|(
name|inodeId
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// update the last lease renewal time only when there was no
comment|// writes. once there is one write stream open, the lease renewer
comment|// thread keeps it updated well with in anyone's expiration time.
if|if
condition|(
name|lastLeaseRenewal
operator|==
literal|0
condition|)
block|{
name|updateLastLeaseRenewal
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Remove a file. Only called from LeaseRenewer. */
DECL|method|removeFileBeingWritten (final long inodeId)
name|void
name|removeFileBeingWritten
parameter_list|(
specifier|final
name|long
name|inodeId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|filesBeingWritten
init|)
block|{
name|filesBeingWritten
operator|.
name|remove
argument_list|(
name|inodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|filesBeingWritten
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lastLeaseRenewal
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
comment|/** Is file-being-written map empty? */
DECL|method|isFilesBeingWrittenEmpty ()
name|boolean
name|isFilesBeingWrittenEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|filesBeingWritten
init|)
block|{
return|return
name|filesBeingWritten
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
comment|/** @return true if the client is running */
DECL|method|isClientRunning ()
name|boolean
name|isClientRunning
parameter_list|()
block|{
return|return
name|clientRunning
return|;
block|}
DECL|method|getLastLeaseRenewal ()
name|long
name|getLastLeaseRenewal
parameter_list|()
block|{
return|return
name|lastLeaseRenewal
return|;
block|}
DECL|method|updateLastLeaseRenewal ()
name|void
name|updateLastLeaseRenewal
parameter_list|()
block|{
synchronized|synchronized
init|(
name|filesBeingWritten
init|)
block|{
if|if
condition|(
name|filesBeingWritten
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|lastLeaseRenewal
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Renew leases.    * @return true if lease was renewed. May return false if this    * client has been closed or has no files open.    **/
DECL|method|renewLease ()
name|boolean
name|renewLease
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|clientRunning
operator|&&
operator|!
name|isFilesBeingWrittenEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|namenode
operator|.
name|renewLease
argument_list|(
name|clientName
argument_list|)
expr_stmt|;
name|updateLastLeaseRenewal
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Abort if the lease has already expired.
specifier|final
name|long
name|elapsed
init|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|getLastLeaseRenewal
argument_list|()
decl_stmt|;
if|if
condition|(
name|elapsed
operator|>
name|HdfsConstants
operator|.
name|LEASE_HARDLIMIT_PERIOD
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to renew lease for "
operator|+
name|clientName
operator|+
literal|" for "
operator|+
operator|(
name|elapsed
operator|/
literal|1000
operator|)
operator|+
literal|" seconds (>= hard-limit ="
operator|+
operator|(
name|HdfsConstants
operator|.
name|LEASE_HARDLIMIT_PERIOD
operator|/
literal|1000
operator|)
operator|+
literal|" seconds.) "
operator|+
literal|"Closing all files being written ..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|closeAllFilesBeingWritten
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Let the lease renewer handle it and retry.
throw|throw
name|e
throw|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Close connections the Namenode.    */
DECL|method|closeConnectionToNamenode ()
name|void
name|closeConnectionToNamenode
parameter_list|()
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|namenode
argument_list|)
expr_stmt|;
block|}
comment|/** Abort and release resources held.  Ignore all errors. */
DECL|method|abort ()
name|void
name|abort
parameter_list|()
block|{
name|clientRunning
operator|=
literal|false
expr_stmt|;
name|closeAllFilesBeingWritten
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// remove reference to this client and stop the renewer,
comment|// if there is no more clients under the renewer.
name|getLeaseRenewer
argument_list|()
operator|.
name|closeClient
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception occurred while aborting the client "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
name|closeConnectionToNamenode
argument_list|()
expr_stmt|;
block|}
comment|/** Close/abort all files being written. */
DECL|method|closeAllFilesBeingWritten (final boolean abort)
specifier|private
name|void
name|closeAllFilesBeingWritten
parameter_list|(
specifier|final
name|boolean
name|abort
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|long
name|inodeId
decl_stmt|;
specifier|final
name|DFSOutputStream
name|out
decl_stmt|;
synchronized|synchronized
init|(
name|filesBeingWritten
init|)
block|{
if|if
condition|(
name|filesBeingWritten
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|inodeId
operator|=
name|filesBeingWritten
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|out
operator|=
name|filesBeingWritten
operator|.
name|remove
argument_list|(
name|inodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|abort
condition|)
block|{
name|out
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to "
operator|+
operator|(
name|abort
condition|?
literal|"abort"
else|:
literal|"close"
operator|)
operator|+
literal|" inode "
operator|+
name|inodeId
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Close the file system, abandoning all of the leases and files being    * created and close connections to the namenode.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|clientRunning
condition|)
block|{
name|closeAllFilesBeingWritten
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|clientRunning
operator|=
literal|false
expr_stmt|;
name|getLeaseRenewer
argument_list|()
operator|.
name|closeClient
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// close connections to the namenode
name|closeConnectionToNamenode
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Close all open streams, abandoning all of the leases and files being    * created.    * @param abort whether streams should be gracefully closed    */
DECL|method|closeOutputStreams (boolean abort)
specifier|public
name|void
name|closeOutputStreams
parameter_list|(
name|boolean
name|abort
parameter_list|)
block|{
if|if
condition|(
name|clientRunning
condition|)
block|{
name|closeAllFilesBeingWritten
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the default block size for this cluster    * @return the default block size in bytes    */
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|dfsClientConf
operator|.
name|defaultBlockSize
return|;
block|}
comment|/**    * @see ClientProtocol#getPreferredBlockSize(String)    */
DECL|method|getBlockSize (String f)
specifier|public
name|long
name|getBlockSize
parameter_list|(
name|String
name|f
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|namenode
operator|.
name|getPreferredBlockSize
argument_list|(
name|f
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem getting block size"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|ie
throw|;
block|}
block|}
comment|/**    * Get server default values for a number of configuration params.    * @see ClientProtocol#getServerDefaults()    */
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|serverDefaultsLastUpdate
operator|>
name|SERVER_DEFAULTS_VALIDITY_PERIOD
condition|)
block|{
name|serverDefaults
operator|=
name|namenode
operator|.
name|getServerDefaults
argument_list|()
expr_stmt|;
name|serverDefaultsLastUpdate
operator|=
name|now
expr_stmt|;
block|}
return|return
name|serverDefaults
return|;
block|}
comment|/**    * Get a canonical token service name for this client's tokens.  Null should    * be returned if the client is not using tokens.    * @return the token service for the client    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
return|return
operator|(
name|dtService
operator|!=
literal|null
operator|)
condition|?
name|dtService
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**    * @see ClientProtocol#getDelegationToken(Text)    */
DECL|method|getDelegationToken (Text renewer)
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|dtService
operator|!=
literal|null
assert|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
init|=
name|namenode
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setService
argument_list|(
name|this
operator|.
name|dtService
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created "
operator|+
name|DelegationTokenIdentifier
operator|.
name|stringifyToken
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot get delegation token from "
operator|+
name|renewer
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
comment|/**    * Renew a delegation token    * @param token the token to renew    * @return the new expiration time    * @throws InvalidToken    * @throws IOException    * @deprecated Use Token.renew instead.    */
annotation|@
name|Deprecated
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Renewing "
operator|+
name|DelegationTokenIdentifier
operator|.
name|stringifyToken
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|token
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"caught interrupted"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|InvalidToken
operator|.
name|class
argument_list|,
name|AccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|field|localAddrMap
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|localAddrMap
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|isLocalAddress (InetSocketAddress targetAddr)
specifier|public
specifier|static
name|boolean
name|isLocalAddress
parameter_list|(
name|InetSocketAddress
name|targetAddr
parameter_list|)
block|{
name|InetAddress
name|addr
init|=
name|targetAddr
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|Boolean
name|cached
init|=
name|localAddrMap
operator|.
name|get
argument_list|(
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Address "
operator|+
name|targetAddr
operator|+
operator|(
name|cached
condition|?
literal|" is local"
else|:
literal|" is not local"
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cached
return|;
block|}
name|boolean
name|local
init|=
name|NetUtils
operator|.
name|isLocalAddress
argument_list|(
name|addr
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Address "
operator|+
name|targetAddr
operator|+
operator|(
name|local
condition|?
literal|" is local"
else|:
literal|" is not local"
operator|)
argument_list|)
expr_stmt|;
block|}
name|localAddrMap
operator|.
name|put
argument_list|(
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|local
argument_list|)
expr_stmt|;
return|return
name|local
return|;
block|}
comment|/**    * Cancel a delegation token    * @param token the token to cancel    * @throws InvalidToken    * @throws IOException    * @deprecated Use Token.cancel instead.    */
annotation|@
name|Deprecated
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancelling "
operator|+
name|DelegationTokenIdentifier
operator|.
name|stringifyToken
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|token
operator|.
name|cancel
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"caught interrupted"
argument_list|,
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|InvalidToken
operator|.
name|class
argument_list|,
name|AccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Renewer
specifier|public
specifier|static
class|class
name|Renewer
extends|extends
name|TokenRenewer
block|{
static|static
block|{
comment|//Ensure that HDFS Configuration files are loaded before trying to use
comment|// the renewer.
name|HdfsConfiguration
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleKind (Text kind)
specifier|public
name|boolean
name|handleKind
parameter_list|(
name|Text
name|kind
parameter_list|)
block|{
return|return
name|DelegationTokenIdentifier
operator|.
name|HDFS_DELEGATION_KIND
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|renew (Token<?> token, Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|delToken
init|=
operator|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
operator|)
name|token
decl_stmt|;
name|ClientProtocol
name|nn
init|=
name|getNNProxy
argument_list|(
name|delToken
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|nn
operator|.
name|renewDelegationToken
argument_list|(
name|delToken
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|InvalidToken
operator|.
name|class
argument_list|,
name|AccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|cancel (Token<?> token, Configuration conf)
specifier|public
name|void
name|cancel
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|delToken
init|=
operator|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
operator|)
name|token
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancelling "
operator|+
name|DelegationTokenIdentifier
operator|.
name|stringifyToken
argument_list|(
name|delToken
argument_list|)
argument_list|)
expr_stmt|;
name|ClientProtocol
name|nn
init|=
name|getNNProxy
argument_list|(
name|delToken
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|nn
operator|.
name|cancelDelegationToken
argument_list|(
name|delToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|InvalidToken
operator|.
name|class
argument_list|,
name|AccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|getNNProxy ( Token<DelegationTokenIdentifier> token, Configuration conf)
specifier|private
specifier|static
name|ClientProtocol
name|getNNProxy
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|uri
init|=
name|HAUtil
operator|.
name|getServiceUriFromToken
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
argument_list|,
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isTokenForLogicalUri
argument_list|(
name|token
argument_list|)
operator|&&
operator|!
name|HAUtil
operator|.
name|isLogicalUri
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|)
condition|)
block|{
comment|// If the token is for a logical nameservice, but the configuration
comment|// we have disagrees about that, we can't actually renew it.
comment|// This can be the case in MR, for example, if the RM doesn't
comment|// have all of the HA clusters configured in its configuration.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to map logical nameservice URI '"
operator|+
name|uri
operator|+
literal|"' to a NameNode. Local configuration does not have "
operator|+
literal|"a failover proxy provider configured."
argument_list|)
throw|;
block|}
name|NameNodeProxies
operator|.
name|ProxyAndInfo
argument_list|<
name|ClientProtocol
argument_list|>
name|info
init|=
name|NameNodeProxies
operator|.
name|createProxy
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|info
operator|.
name|getDelegationTokenService
argument_list|()
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|)
operator|:
literal|"Returned service '"
operator|+
name|info
operator|.
name|getDelegationTokenService
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"' doesn't match expected service '"
operator|+
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
assert|;
return|return
name|info
operator|.
name|getProxy
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isManaged (Token<?> token)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Report corrupt blocks that were discovered by the client.    * @see ClientProtocol#reportBadBlocks(LocatedBlock[])    */
DECL|method|reportBadBlocks (LocatedBlock[] blocks)
specifier|public
name|void
name|reportBadBlocks
parameter_list|(
name|LocatedBlock
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|namenode
operator|.
name|reportBadBlocks
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultReplication ()
specifier|public
name|short
name|getDefaultReplication
parameter_list|()
block|{
return|return
name|dfsClientConf
operator|.
name|defaultReplication
return|;
block|}
DECL|method|getLocatedBlocks (String src, long start)
specifier|public
name|LocatedBlocks
name|getLocatedBlocks
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|start
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getLocatedBlocks
argument_list|(
name|src
argument_list|,
name|start
argument_list|,
name|dfsClientConf
operator|.
name|prefetchSize
argument_list|)
return|;
block|}
comment|/*    * This is just a wrapper around callGetBlockLocations, but non-static so that    * we can stub it out for tests.    */
annotation|@
name|VisibleForTesting
DECL|method|getLocatedBlocks (String src, long start, long length)
specifier|public
name|LocatedBlocks
name|getLocatedBlocks
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|callGetBlockLocations
argument_list|(
name|namenode
argument_list|,
name|src
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**    * @see ClientProtocol#getBlockLocations(String, long, long)    */
DECL|method|callGetBlockLocations (ClientProtocol namenode, String src, long start, long length)
specifier|static
name|LocatedBlocks
name|callGetBlockLocations
parameter_list|(
name|ClientProtocol
name|namenode
parameter_list|,
name|String
name|src
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|namenode
operator|.
name|getBlockLocations
argument_list|(
name|src
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Recover a file's lease    * @param src a file's path    * @return true if the file is already closed    * @throws IOException    */
DECL|method|recoverLease (String src)
name|boolean
name|recoverLease
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|recoverLease
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|AccessControlException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get block location info about file    *     * getBlockLocations() returns a list of hostnames that store     * data for a specific file region.  It returns a set of hostnames    * for every block within the indicated region.    *    * This function is very useful when writing code that considers    * data-placement when performing operations.  For example, the    * MapReduce system tries to schedule tasks on the same machines    * as the data-block the task processes.     */
DECL|method|getBlockLocations (String src, long start, long length)
specifier|public
name|BlockLocation
index|[]
name|getBlockLocations
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
name|LocatedBlocks
name|blocks
init|=
name|getLocatedBlocks
argument_list|(
name|src
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|DFSUtil
operator|.
name|locatedBlocks2Locations
argument_list|(
name|blocks
argument_list|)
decl_stmt|;
name|HdfsBlockLocation
index|[]
name|hdfsLocations
init|=
operator|new
name|HdfsBlockLocation
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hdfsLocations
index|[
name|i
index|]
operator|=
operator|new
name|HdfsBlockLocation
argument_list|(
name|locations
index|[
name|i
index|]
argument_list|,
name|blocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hdfsLocations
return|;
block|}
comment|/**    * Get block location information about a list of {@link HdfsBlockLocation}.    * Used by {@link DistributedFileSystem#getFileBlockStorageLocations(List)} to    * get {@link BlockStorageLocation}s for blocks returned by    * {@link DistributedFileSystem#getFileBlockLocations(org.apache.hadoop.fs.FileStatus, long, long)}    * .    *     * This is done by making a round of RPCs to the associated datanodes, asking    * the volume of each block replica. The returned array of    * {@link BlockStorageLocation} expose this information as a    * {@link VolumeId}.    *     * @param blockLocations    *          target blocks on which to query volume location information    * @return volumeBlockLocations original block array augmented with additional    *         volume location information for each replica.    */
DECL|method|getBlockStorageLocations ( List<BlockLocation> blockLocations)
specifier|public
name|BlockStorageLocation
index|[]
name|getBlockStorageLocations
parameter_list|(
name|List
argument_list|<
name|BlockLocation
argument_list|>
name|blockLocations
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
throws|,
name|InvalidBlockTokenException
block|{
if|if
condition|(
operator|!
name|getConf
argument_list|()
operator|.
name|getHdfsBlocksMetadataEnabled
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Datanode-side support for "
operator|+
literal|"getVolumeBlockLocations() must also be enabled in the client "
operator|+
literal|"configuration."
argument_list|)
throw|;
block|}
comment|// Downcast blockLocations and fetch out required LocatedBlock(s)
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockLocation
name|loc
range|:
name|blockLocations
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|loc
operator|instanceof
name|HdfsBlockLocation
operator|)
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"DFSClient#getVolumeBlockLocations "
operator|+
literal|"expected to be passed HdfsBlockLocations"
argument_list|)
throw|;
block|}
name|HdfsBlockLocation
name|hdfsLoc
init|=
operator|(
name|HdfsBlockLocation
operator|)
name|loc
decl_stmt|;
name|blocks
operator|.
name|add
argument_list|(
name|hdfsLoc
operator|.
name|getLocatedBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Re-group the LocatedBlocks to be grouped by datanodes, with the values
comment|// a list of the LocatedBlocks on the datanode.
name|Map
argument_list|<
name|DatanodeInfo
argument_list|,
name|List
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|>
name|datanodeBlocks
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|DatanodeInfo
argument_list|,
name|List
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|b
range|:
name|blocks
control|)
block|{
for|for
control|(
name|DatanodeInfo
name|info
range|:
name|b
operator|.
name|getLocations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|datanodeBlocks
operator|.
name|containsKey
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|datanodeBlocks
operator|.
name|put
argument_list|(
name|info
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|LocatedBlock
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|l
init|=
name|datanodeBlocks
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Make RPCs to the datanodes to get volume locations for its replicas
name|Map
argument_list|<
name|DatanodeInfo
argument_list|,
name|HdfsBlocksMetadata
argument_list|>
name|metadatas
init|=
name|BlockStorageLocationUtil
operator|.
name|queryDatanodesForHdfsBlocksMetadata
argument_list|(
name|conf
argument_list|,
name|datanodeBlocks
argument_list|,
name|getConf
argument_list|()
operator|.
name|getFileBlockStorageLocationsNumThreads
argument_list|,
name|getConf
argument_list|()
operator|.
name|getFileBlockStorageLocationsTimeoutMs
argument_list|,
name|getConf
argument_list|()
operator|.
name|connectToDnViaHostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"metadata returned: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|"="
argument_list|)
operator|.
name|join
argument_list|(
name|metadatas
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Regroup the returned VolumeId metadata to again be grouped by
comment|// LocatedBlock rather than by datanode
name|Map
argument_list|<
name|LocatedBlock
argument_list|,
name|List
argument_list|<
name|VolumeId
argument_list|>
argument_list|>
name|blockVolumeIds
init|=
name|BlockStorageLocationUtil
operator|.
name|associateVolumeIdsWithBlocks
argument_list|(
name|blocks
argument_list|,
name|metadatas
argument_list|)
decl_stmt|;
comment|// Combine original BlockLocations with new VolumeId information
name|BlockStorageLocation
index|[]
name|volumeBlockLocations
init|=
name|BlockStorageLocationUtil
operator|.
name|convertToVolumeBlockLocations
argument_list|(
name|blocks
argument_list|,
name|blockVolumeIds
argument_list|)
decl_stmt|;
return|return
name|volumeBlockLocations
return|;
block|}
comment|/**    * Wraps the stream in a CryptoInputStream if the underlying file is    * encrypted.    */
DECL|method|createWrappedInputStream (DFSInputStream dfsis)
specifier|public
name|HdfsDataInputStream
name|createWrappedInputStream
parameter_list|(
name|DFSInputStream
name|dfsis
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileEncryptionInfo
name|feInfo
init|=
name|dfsis
operator|.
name|getFileEncryptionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|feInfo
operator|!=
literal|null
condition|)
block|{
comment|// File is encrypted, wrap the stream in a crypto stream.
specifier|final
name|CryptoInputStream
name|cryptoIn
init|=
operator|new
name|CryptoInputStream
argument_list|(
name|dfsis
argument_list|,
name|codec
argument_list|,
name|feInfo
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|,
name|feInfo
operator|.
name|getIV
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HdfsDataInputStream
argument_list|(
name|cryptoIn
argument_list|)
return|;
block|}
else|else
block|{
comment|// No key/IV pair so no encryption.
return|return
operator|new
name|HdfsDataInputStream
argument_list|(
name|dfsis
argument_list|)
return|;
block|}
block|}
comment|/**    * Wraps the stream in a CryptoOutputStream if the underlying file is    * encrypted.    */
DECL|method|createWrappedOutputStream (DFSOutputStream dfsos, FileSystem.Statistics statistics)
specifier|public
name|HdfsDataOutputStream
name|createWrappedOutputStream
parameter_list|(
name|DFSOutputStream
name|dfsos
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|statistics
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createWrappedOutputStream
argument_list|(
name|dfsos
argument_list|,
name|statistics
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Wraps the stream in a CryptoOutputStream if the underlying file is    * encrypted.    */
DECL|method|createWrappedOutputStream (DFSOutputStream dfsos, FileSystem.Statistics statistics, long startPos)
specifier|public
name|HdfsDataOutputStream
name|createWrappedOutputStream
parameter_list|(
name|DFSOutputStream
name|dfsos
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|statistics
parameter_list|,
name|long
name|startPos
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileEncryptionInfo
name|feInfo
init|=
name|dfsos
operator|.
name|getFileEncryptionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|feInfo
operator|!=
literal|null
condition|)
block|{
comment|// File is encrypted, wrap the stream in a crypto stream.
specifier|final
name|CryptoOutputStream
name|cryptoOut
init|=
operator|new
name|CryptoOutputStream
argument_list|(
name|dfsos
argument_list|,
name|codec
argument_list|,
name|feInfo
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|,
name|feInfo
operator|.
name|getIV
argument_list|()
argument_list|,
name|startPos
argument_list|)
decl_stmt|;
return|return
operator|new
name|HdfsDataOutputStream
argument_list|(
name|cryptoOut
argument_list|,
name|statistics
argument_list|,
name|startPos
argument_list|)
return|;
block|}
else|else
block|{
comment|// No key/IV present so no encryption.
return|return
operator|new
name|HdfsDataOutputStream
argument_list|(
name|dfsos
argument_list|,
name|statistics
argument_list|,
name|startPos
argument_list|)
return|;
block|}
block|}
DECL|method|open (String src)
specifier|public
name|DFSInputStream
name|open
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|open
argument_list|(
name|src
argument_list|,
name|dfsClientConf
operator|.
name|ioBufferSize
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Create an input stream that obtains a nodelist from the    * namenode, and then reads from all the right places.  Creates    * inner subclass of InputStream that does the right out-of-band    * work.    * @deprecated Use {@link #open(String, int, boolean)} instead.    */
annotation|@
name|Deprecated
DECL|method|open (String src, int buffersize, boolean verifyChecksum, FileSystem.Statistics stats)
specifier|public
name|DFSInputStream
name|open
parameter_list|(
name|String
name|src
parameter_list|,
name|int
name|buffersize
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|stats
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
return|return
name|open
argument_list|(
name|src
argument_list|,
name|buffersize
argument_list|,
name|verifyChecksum
argument_list|)
return|;
block|}
comment|/**    * Create an input stream that obtains a nodelist from the    * namenode, and then reads from all the right places.  Creates    * inner subclass of InputStream that does the right out-of-band    * work.    */
DECL|method|open (String src, int buffersize, boolean verifyChecksum)
specifier|public
name|DFSInputStream
name|open
parameter_list|(
name|String
name|src
parameter_list|,
name|int
name|buffersize
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
comment|//    Get block info from namenode
return|return
operator|new
name|DFSInputStream
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|buffersize
argument_list|,
name|verifyChecksum
argument_list|)
return|;
block|}
comment|/**    * Get the namenode associated with this DFSClient object    * @return the namenode associated with this DFSClient object    */
DECL|method|getNamenode ()
specifier|public
name|ClientProtocol
name|getNamenode
parameter_list|()
block|{
return|return
name|namenode
return|;
block|}
comment|/**    * Call {@link #create(String, boolean, short, long, Progressable)} with    * default<code>replication</code> and<code>blockSize<code> and null<code>    * progress</code>.    */
DECL|method|create (String src, boolean overwrite)
specifier|public
name|OutputStream
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|src
argument_list|,
name|overwrite
argument_list|,
name|dfsClientConf
operator|.
name|defaultReplication
argument_list|,
name|dfsClientConf
operator|.
name|defaultBlockSize
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Call {@link #create(String, boolean, short, long, Progressable)} with    * default<code>replication</code> and<code>blockSize<code>.    */
DECL|method|create (String src, boolean overwrite, Progressable progress)
specifier|public
name|OutputStream
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|src
argument_list|,
name|overwrite
argument_list|,
name|dfsClientConf
operator|.
name|defaultReplication
argument_list|,
name|dfsClientConf
operator|.
name|defaultBlockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
comment|/**    * Call {@link #create(String, boolean, short, long, Progressable)} with    * null<code>progress</code>.    */
DECL|method|create (String src, boolean overwrite, short replication, long blockSize)
specifier|public
name|OutputStream
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|src
argument_list|,
name|overwrite
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Call {@link #create(String, boolean, short, long, Progressable, int)}    * with default bufferSize.    */
DECL|method|create (String src, boolean overwrite, short replication, long blockSize, Progressable progress)
specifier|public
name|OutputStream
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|src
argument_list|,
name|overwrite
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|dfsClientConf
operator|.
name|ioBufferSize
argument_list|)
return|;
block|}
comment|/**    * Call {@link #create(String, FsPermission, EnumSet, short, long,     * Progressable, int, ChecksumOpt)} with default<code>permission</code>    * {@link FsPermission#getFileDefault()}.    *     * @param src File name    * @param overwrite overwrite an existing file if true    * @param replication replication factor for the file    * @param blockSize maximum block size    * @param progress interface for reporting client progress    * @param buffersize underlying buffersize    *     * @return output stream    */
DECL|method|create (String src, boolean overwrite, short replication, long blockSize, Progressable progress, int buffersize)
specifier|public
name|OutputStream
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|int
name|buffersize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|src
argument_list|,
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|,
name|overwrite
condition|?
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
else|:
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|buffersize
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Call {@link #create(String, FsPermission, EnumSet, boolean, short,     * long, Progressable, int, ChecksumOpt)} with<code>createParent</code>    *  set to true.    */
DECL|method|create (String src, FsPermission permission, EnumSet<CreateFlag> flag, short replication, long blockSize, Progressable progress, int buffersize, ChecksumOpt checksumOpt)
specifier|public
name|DFSOutputStream
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|int
name|buffersize
parameter_list|,
name|ChecksumOpt
name|checksumOpt
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|src
argument_list|,
name|permission
argument_list|,
name|flag
argument_list|,
literal|true
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|buffersize
argument_list|,
name|checksumOpt
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Create a new dfs file with the specified block replication     * with write-progress reporting and return an output stream for writing    * into the file.      *     * @param src File name    * @param permission The permission of the directory being created.    *          If null, use default permission {@link FsPermission#getFileDefault()}    * @param flag indicates create a new file or create/overwrite an    *          existing file or append to an existing file    * @param createParent create missing parent directory if true    * @param replication block replication    * @param blockSize maximum block size    * @param progress interface for reporting client progress    * @param buffersize underlying buffer size     * @param checksumOpt checksum options    *     * @return output stream    *     * @see ClientProtocol#create(String, FsPermission, String, EnumSetWritable,    * boolean, short, long) for detailed description of exceptions thrown    */
DECL|method|create (String src, FsPermission permission, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, Progressable progress, int buffersize, ChecksumOpt checksumOpt)
specifier|public
name|DFSOutputStream
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|int
name|buffersize
parameter_list|,
name|ChecksumOpt
name|checksumOpt
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|src
argument_list|,
name|permission
argument_list|,
name|flag
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|buffersize
argument_list|,
name|checksumOpt
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Same as {@link #create(String, FsPermission, EnumSet, boolean, short, long,    * Progressable, int, ChecksumOpt)} with the addition of favoredNodes that is    * a hint to where the namenode should place the file blocks.    * The favored nodes hint is not persisted in HDFS. Hence it may be honored    * at the creation time only. HDFS could move the blocks during balancing or    * replication, to move the blocks from favored nodes. A value of null means    * no favored nodes for this create    */
DECL|method|create (String src, FsPermission permission, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, Progressable progress, int buffersize, ChecksumOpt checksumOpt, InetSocketAddress[] favoredNodes)
specifier|public
name|DFSOutputStream
name|create
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|int
name|buffersize
parameter_list|,
name|ChecksumOpt
name|checksumOpt
parameter_list|,
name|InetSocketAddress
index|[]
name|favoredNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|permission
operator|==
literal|null
condition|)
block|{
name|permission
operator|=
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
expr_stmt|;
block|}
name|FsPermission
name|masked
init|=
name|permission
operator|.
name|applyUMask
argument_list|(
name|dfsClientConf
operator|.
name|uMask
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|src
operator|+
literal|": masked="
operator|+
name|masked
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|favoredNodeStrs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|favoredNodes
operator|!=
literal|null
condition|)
block|{
name|favoredNodeStrs
operator|=
operator|new
name|String
index|[
name|favoredNodes
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|favoredNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|favoredNodeStrs
index|[
name|i
index|]
operator|=
name|favoredNodes
index|[
name|i
index|]
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|favoredNodes
index|[
name|i
index|]
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|DFSOutputStream
name|result
init|=
name|DFSOutputStream
operator|.
name|newStreamForCreate
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|masked
argument_list|,
name|flag
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|buffersize
argument_list|,
name|dfsClientConf
operator|.
name|createChecksum
argument_list|(
name|checksumOpt
argument_list|)
argument_list|,
name|favoredNodeStrs
argument_list|,
name|cipherSuites
argument_list|)
decl_stmt|;
name|beginFileLease
argument_list|(
name|result
operator|.
name|getFileId
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Append to an existing file if {@link CreateFlag#APPEND} is present    */
DECL|method|primitiveAppend (String src, EnumSet<CreateFlag> flag, int buffersize, Progressable progress)
specifier|private
name|DFSOutputStream
name|primitiveAppend
parameter_list|(
name|String
name|src
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|int
name|buffersize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|APPEND
argument_list|)
condition|)
block|{
name|HdfsFileStatus
name|stat
init|=
name|getFileInfo
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
comment|// No file to append to
comment|// New file needs to be created if create option is present
if|if
condition|(
operator|!
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"failed to append to non-existent file "
operator|+
name|src
operator|+
literal|" on client "
operator|+
name|clientName
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
return|return
name|callAppend
argument_list|(
name|stat
argument_list|,
name|src
argument_list|,
name|buffersize
argument_list|,
name|progress
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Same as {{@link #create(String, FsPermission, EnumSet, short, long,    *  Progressable, int, ChecksumOpt)} except that the permission    *  is absolute (ie has already been masked with umask.    */
DECL|method|primitiveCreate (String src, FsPermission absPermission, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, Progressable progress, int buffersize, ChecksumOpt checksumOpt)
specifier|public
name|DFSOutputStream
name|primitiveCreate
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|absPermission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|int
name|buffersize
parameter_list|,
name|ChecksumOpt
name|checksumOpt
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|CreateFlag
operator|.
name|validate
argument_list|(
name|flag
argument_list|)
expr_stmt|;
name|DFSOutputStream
name|result
init|=
name|primitiveAppend
argument_list|(
name|src
argument_list|,
name|flag
argument_list|,
name|buffersize
argument_list|,
name|progress
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|DataChecksum
name|checksum
init|=
name|dfsClientConf
operator|.
name|createChecksum
argument_list|(
name|checksumOpt
argument_list|)
decl_stmt|;
name|result
operator|=
name|DFSOutputStream
operator|.
name|newStreamForCreate
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|absPermission
argument_list|,
name|flag
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|,
name|buffersize
argument_list|,
name|checksum
argument_list|,
literal|null
argument_list|,
name|cipherSuites
argument_list|)
expr_stmt|;
block|}
name|beginFileLease
argument_list|(
name|result
operator|.
name|getFileId
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Creates a symbolic link.    *     * @see ClientProtocol#createSymlink(String, String,FsPermission, boolean)     */
DECL|method|createSymlink (String target, String link, boolean createParent)
specifier|public
name|void
name|createSymlink
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|link
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FsPermission
name|dirPerm
init|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|dfsClientConf
operator|.
name|uMask
argument_list|)
decl_stmt|;
name|namenode
operator|.
name|createSymlink
argument_list|(
name|target
argument_list|,
name|link
argument_list|,
name|dirPerm
argument_list|,
name|createParent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileAlreadyExistsException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|ParentNotDirectoryException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|DSQuotaExceededException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Resolve the *first* symlink, if any, in the path.    *     * @see ClientProtocol#getLinkTarget(String)    */
DECL|method|getLinkTarget (String path)
specifier|public
name|String
name|getLinkTarget
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|getLinkTarget
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/** Method to get stream returned by append call */
DECL|method|callAppend (HdfsFileStatus stat, String src, int buffersize, Progressable progress)
specifier|private
name|DFSOutputStream
name|callAppend
parameter_list|(
name|HdfsFileStatus
name|stat
parameter_list|,
name|String
name|src
parameter_list|,
name|int
name|buffersize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|LocatedBlock
name|lastBlock
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lastBlock
operator|=
name|namenode
operator|.
name|append
argument_list|(
name|src
argument_list|,
name|clientName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|DSQuotaExceededException
operator|.
name|class
argument_list|,
name|UnsupportedOperationException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
return|return
name|DFSOutputStream
operator|.
name|newStreamForAppend
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|buffersize
argument_list|,
name|progress
argument_list|,
name|lastBlock
argument_list|,
name|stat
argument_list|,
name|dfsClientConf
operator|.
name|createChecksum
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Append to an existing HDFS file.      *     * @param src file name    * @param buffersize buffer size    * @param progress for reporting write-progress; null is acceptable.    * @param statistics file system statistics; null is acceptable.    * @return an output stream for writing into the file    *     * @see ClientProtocol#append(String, String)     */
DECL|method|append (final String src, final int buffersize, final Progressable progress, final FileSystem.Statistics statistics )
specifier|public
name|HdfsDataOutputStream
name|append
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|int
name|buffersize
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|,
specifier|final
name|FileSystem
operator|.
name|Statistics
name|statistics
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DFSOutputStream
name|out
init|=
name|append
argument_list|(
name|src
argument_list|,
name|buffersize
argument_list|,
name|progress
argument_list|)
decl_stmt|;
return|return
name|createWrappedOutputStream
argument_list|(
name|out
argument_list|,
name|statistics
argument_list|,
name|out
operator|.
name|getInitialLen
argument_list|()
argument_list|)
return|;
block|}
DECL|method|append (String src, int buffersize, Progressable progress)
specifier|private
name|DFSOutputStream
name|append
parameter_list|(
name|String
name|src
parameter_list|,
name|int
name|buffersize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|HdfsFileStatus
name|stat
init|=
name|getFileInfo
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
comment|// No file found
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"failed to append to non-existent file "
operator|+
name|src
operator|+
literal|" on client "
operator|+
name|clientName
argument_list|)
throw|;
block|}
specifier|final
name|DFSOutputStream
name|result
init|=
name|callAppend
argument_list|(
name|stat
argument_list|,
name|src
argument_list|,
name|buffersize
argument_list|,
name|progress
argument_list|)
decl_stmt|;
name|beginFileLease
argument_list|(
name|result
operator|.
name|getFileId
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Set replication for an existing file.    * @param src file name    * @param replication replication to set the file to    *     * @see ClientProtocol#setReplication(String, short)    */
DECL|method|setReplication (String src, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|String
name|src
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|namenode
operator|.
name|setReplication
argument_list|(
name|src
argument_list|,
name|replication
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|DSQuotaExceededException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Rename file or directory.    * @see ClientProtocol#rename(String, String)    * @deprecated Use {@link #rename(String, String, Options.Rename...)} instead.    */
annotation|@
name|Deprecated
DECL|method|rename (String src, String dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|DSQuotaExceededException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Move blocks from src to trg and delete src    * See {@link ClientProtocol#concat(String, String [])}.     */
DECL|method|concat (String trg, String [] srcs)
specifier|public
name|void
name|concat
parameter_list|(
name|String
name|trg
parameter_list|,
name|String
index|[]
name|srcs
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|concat
argument_list|(
name|trg
argument_list|,
name|srcs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Rename file or directory.    * @see ClientProtocol#rename2(String, String, Options.Rename...)    */
DECL|method|rename (String src, String dst, Options.Rename... options)
specifier|public
name|void
name|rename
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|rename2
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|DSQuotaExceededException
operator|.
name|class
argument_list|,
name|FileAlreadyExistsException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|ParentNotDirectoryException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Delete file or directory.    * See {@link ClientProtocol#delete(String, boolean)}.     */
annotation|@
name|Deprecated
DECL|method|delete (String src)
specifier|public
name|boolean
name|delete
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
return|return
name|namenode
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * delete file or directory.    * delete contents of the directory if non empty and recursive     * set to true    *    * @see ClientProtocol#delete(String, boolean)    */
DECL|method|delete (String src, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|delete
argument_list|(
name|src
argument_list|,
name|recursive
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/** Implemented using getFileInfo(src)    */
DECL|method|exists (String src)
specifier|public
name|boolean
name|exists
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
return|return
name|getFileInfo
argument_list|(
name|src
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Get a partial listing of the indicated directory    * No block locations need to be fetched    */
DECL|method|listPaths (String src, byte[] startAfter)
specifier|public
name|DirectoryListing
name|listPaths
parameter_list|(
name|String
name|src
parameter_list|,
name|byte
index|[]
name|startAfter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listPaths
argument_list|(
name|src
argument_list|,
name|startAfter
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Get a partial listing of the indicated directory    *    * Recommend to use HdfsFileStatus.EMPTY_NAME as startAfter    * if the application wants to fetch a listing starting from    * the first entry in the directory    *    * @see ClientProtocol#getListing(String, byte[], boolean)    */
DECL|method|listPaths (String src, byte[] startAfter, boolean needLocation)
specifier|public
name|DirectoryListing
name|listPaths
parameter_list|(
name|String
name|src
parameter_list|,
name|byte
index|[]
name|startAfter
parameter_list|,
name|boolean
name|needLocation
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|getListing
argument_list|(
name|src
argument_list|,
name|startAfter
argument_list|,
name|needLocation
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the file info for a specific file or directory.    * @param src The string representation of the path to the file    * @return object containing information regarding the file    *         or null if file not found    *             * @see ClientProtocol#getFileInfo(String) for description of exceptions    */
DECL|method|getFileInfo (String src)
specifier|public
name|HdfsFileStatus
name|getFileInfo
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|getFileInfo
argument_list|(
name|src
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Close status of a file    * @return true if file is already closed    */
DECL|method|isFileClosed (String src)
specifier|public
name|boolean
name|isFileClosed
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|isFileClosed
argument_list|(
name|src
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the file info for a specific file or directory. If src    * refers to a symlink then the FileStatus of the link is returned.    * @param src path to a file or directory.    *     * For description of exceptions thrown     * @see ClientProtocol#getFileLinkInfo(String)    */
DECL|method|getFileLinkInfo (String src)
specifier|public
name|HdfsFileStatus
name|getFileLinkInfo
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|getFileLinkInfo
argument_list|(
name|src
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the checksum of the whole file of a range of the file. Note that the    * range always starts from the beginning of the file.    * @param src The file path    * @param length The length of the range    * @return The checksum     * @see DistributedFileSystem#getFileChecksum(Path)    */
DECL|method|getFileChecksum (String src, long length)
specifier|public
name|MD5MD5CRC32FileChecksum
name|getFileChecksum
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|length
operator|>=
literal|0
argument_list|)
expr_stmt|;
return|return
name|getFileChecksum
argument_list|(
name|src
argument_list|,
name|length
argument_list|,
name|clientName
argument_list|,
name|namenode
argument_list|,
name|socketFactory
argument_list|,
name|dfsClientConf
operator|.
name|socketTimeout
argument_list|,
name|getDataEncryptionKey
argument_list|()
argument_list|,
name|dfsClientConf
operator|.
name|connectToDnViaHostname
argument_list|)
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|clearDataEncryptionKey ()
specifier|public
name|void
name|clearDataEncryptionKey
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Clearing encryption key"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|encryptionKey
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * @return true if data sent between this client and DNs should be encrypted,    *         false otherwise.    * @throws IOException in the event of error communicating with the NN    */
DECL|method|shouldEncryptData ()
name|boolean
name|shouldEncryptData
parameter_list|()
throws|throws
name|IOException
block|{
name|FsServerDefaults
name|d
init|=
name|getServerDefaults
argument_list|()
decl_stmt|;
return|return
name|d
operator|==
literal|null
condition|?
literal|false
else|:
name|d
operator|.
name|getEncryptDataTransfer
argument_list|()
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|getDataEncryptionKey ()
specifier|public
name|DataEncryptionKey
name|getDataEncryptionKey
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|shouldEncryptData
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|trustedChannelResolver
operator|.
name|isTrusted
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|encryptionKey
operator|==
literal|null
operator|||
name|encryptionKey
operator|.
name|expiryDate
operator|<
name|Time
operator|.
name|now
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting new encryption token from NN"
argument_list|)
expr_stmt|;
name|encryptionKey
operator|=
name|namenode
operator|.
name|getDataEncryptionKey
argument_list|()
expr_stmt|;
block|}
return|return
name|encryptionKey
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Get the checksum of the whole file or a range of the file.    * @param src The file path    * @param length the length of the range, i.e., the range is [0, length]    * @param clientName the name of the client requesting the checksum.    * @param namenode the RPC proxy for the namenode    * @param socketFactory to create sockets to connect to DNs    * @param socketTimeout timeout to use when connecting and waiting for a response    * @param encryptionKey the key needed to communicate with DNs in this cluster    * @param connectToDnViaHostname whether the client should use hostnames instead of IPs    * @return The checksum     */
DECL|method|getFileChecksum (String src, long length, String clientName, ClientProtocol namenode, SocketFactory socketFactory, int socketTimeout, DataEncryptionKey encryptionKey, boolean connectToDnViaHostname)
specifier|private
specifier|static
name|MD5MD5CRC32FileChecksum
name|getFileChecksum
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|length
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ClientProtocol
name|namenode
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|,
name|int
name|socketTimeout
parameter_list|,
name|DataEncryptionKey
name|encryptionKey
parameter_list|,
name|boolean
name|connectToDnViaHostname
parameter_list|)
throws|throws
name|IOException
block|{
comment|//get block locations for the file range
name|LocatedBlocks
name|blockLocations
init|=
name|callGetBlockLocations
argument_list|(
name|namenode
argument_list|,
name|src
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|blockLocations
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|src
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|locatedblocks
init|=
name|blockLocations
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|md5out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|int
name|bytesPerCRC
init|=
operator|-
literal|1
decl_stmt|;
name|DataChecksum
operator|.
name|Type
name|crcType
init|=
name|DataChecksum
operator|.
name|Type
operator|.
name|DEFAULT
decl_stmt|;
name|long
name|crcPerBlock
init|=
literal|0
decl_stmt|;
name|boolean
name|refetchBlocks
init|=
literal|false
decl_stmt|;
name|int
name|lastRetriedIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|// get block checksum for each block
name|long
name|remaining
init|=
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
argument_list|<
name|locatedblocks
operator|.
name|size
operator|(
operator|)
operator|&&
name|remaining
argument_list|>
literal|0
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|refetchBlocks
condition|)
block|{
comment|// refetch to get fresh tokens
name|blockLocations
operator|=
name|callGetBlockLocations
argument_list|(
name|namenode
argument_list|,
name|src
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|blockLocations
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|src
argument_list|)
throw|;
block|}
name|locatedblocks
operator|=
name|blockLocations
operator|.
name|getLocatedBlocks
argument_list|()
expr_stmt|;
name|refetchBlocks
operator|=
literal|false
expr_stmt|;
block|}
name|LocatedBlock
name|lb
init|=
name|locatedblocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|ExtendedBlock
name|block
init|=
name|lb
operator|.
name|getBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|<
name|block
operator|.
name|getNumBytes
argument_list|()
condition|)
block|{
name|block
operator|.
name|setNumBytes
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
name|remaining
operator|-=
name|block
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
specifier|final
name|DatanodeInfo
index|[]
name|datanodes
init|=
name|lb
operator|.
name|getLocations
argument_list|()
decl_stmt|;
comment|//try each datanode location of the block
specifier|final
name|int
name|timeout
init|=
literal|3000
operator|*
name|datanodes
operator|.
name|length
operator|+
name|socketTimeout
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
operator|!
name|done
operator|&&
name|j
operator|<
name|datanodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|DataOutputStream
name|out
init|=
literal|null
decl_stmt|;
name|DataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//connect to a datanode
name|IOStreamPair
name|pair
init|=
name|connectToDN
argument_list|(
name|socketFactory
argument_list|,
name|connectToDnViaHostname
argument_list|,
name|encryptionKey
argument_list|,
name|datanodes
index|[
name|j
index|]
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|pair
operator|.
name|out
argument_list|,
name|HdfsConstants
operator|.
name|SMALL_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|DataInputStream
argument_list|(
name|pair
operator|.
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"write to "
operator|+
name|datanodes
index|[
name|j
index|]
operator|+
literal|": "
operator|+
name|Op
operator|.
name|BLOCK_CHECKSUM
operator|+
literal|", block="
operator|+
name|block
argument_list|)
expr_stmt|;
block|}
comment|// get block MD5
operator|new
name|Sender
argument_list|(
name|out
argument_list|)
operator|.
name|blockChecksum
argument_list|(
name|block
argument_list|,
name|lb
operator|.
name|getBlockToken
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|BlockOpResponseProto
name|reply
init|=
name|BlockOpResponseProto
operator|.
name|parseFrom
argument_list|(
name|PBHelper
operator|.
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|SUCCESS
condition|)
block|{
if|if
condition|(
name|reply
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|ERROR_ACCESS_TOKEN
condition|)
block|{
throw|throw
operator|new
name|InvalidBlockTokenException
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad response "
operator|+
name|reply
operator|+
literal|" for block "
operator|+
name|block
operator|+
literal|" from datanode "
operator|+
name|datanodes
index|[
name|j
index|]
argument_list|)
throw|;
block|}
block|}
name|OpBlockChecksumResponseProto
name|checksumData
init|=
name|reply
operator|.
name|getChecksumResponse
argument_list|()
decl_stmt|;
comment|//read byte-per-checksum
specifier|final
name|int
name|bpc
init|=
name|checksumData
operator|.
name|getBytesPerCrc
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|//first block
name|bytesPerCRC
operator|=
name|bpc
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bpc
operator|!=
name|bytesPerCRC
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Byte-per-checksum not matched: bpc="
operator|+
name|bpc
operator|+
literal|" but bytesPerCRC="
operator|+
name|bytesPerCRC
argument_list|)
throw|;
block|}
comment|//read crc-per-block
specifier|final
name|long
name|cpb
init|=
name|checksumData
operator|.
name|getCrcPerBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|locatedblocks
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|i
operator|==
literal|0
condition|)
block|{
name|crcPerBlock
operator|=
name|cpb
expr_stmt|;
block|}
comment|//read md5
specifier|final
name|MD5Hash
name|md5
init|=
operator|new
name|MD5Hash
argument_list|(
name|checksumData
operator|.
name|getMd5
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|md5
operator|.
name|write
argument_list|(
name|md5out
argument_list|)
expr_stmt|;
comment|// read crc-type
specifier|final
name|DataChecksum
operator|.
name|Type
name|ct
decl_stmt|;
if|if
condition|(
name|checksumData
operator|.
name|hasCrcType
argument_list|()
condition|)
block|{
name|ct
operator|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|checksumData
operator|.
name|getCrcType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieving checksum from an earlier-version DataNode: "
operator|+
literal|"inferring checksum by reading first byte"
argument_list|)
expr_stmt|;
name|ct
operator|=
name|inferChecksumTypeByReading
argument_list|(
name|clientName
argument_list|,
name|socketFactory
argument_list|,
name|socketTimeout
argument_list|,
name|lb
argument_list|,
name|datanodes
index|[
name|j
index|]
argument_list|,
name|encryptionKey
argument_list|,
name|connectToDnViaHostname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// first block
name|crcType
operator|=
name|ct
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|crcType
operator|!=
name|DataChecksum
operator|.
name|Type
operator|.
name|MIXED
operator|&&
name|crcType
operator|!=
name|ct
condition|)
block|{
comment|// if crc types are mixed in a file
name|crcType
operator|=
name|DataChecksum
operator|.
name|Type
operator|.
name|MIXED
expr_stmt|;
block|}
name|done
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"set bytesPerCRC="
operator|+
name|bytesPerCRC
operator|+
literal|", crcPerBlock="
operator|+
name|crcPerBlock
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"got reply from "
operator|+
name|datanodes
index|[
name|j
index|]
operator|+
literal|": md5="
operator|+
name|md5
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidBlockTokenException
name|ibte
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>
name|lastRetriedIndex
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got access token error in response to OP_BLOCK_CHECKSUM "
operator|+
literal|"for file "
operator|+
name|src
operator|+
literal|" for block "
operator|+
name|block
operator|+
literal|" from datanode "
operator|+
name|datanodes
index|[
name|j
index|]
operator|+
literal|". Will retry the block once."
argument_list|)
expr_stmt|;
block|}
name|lastRetriedIndex
operator|=
name|i
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
comment|// actually it's not done; but we'll retry
name|i
operator|--
expr_stmt|;
comment|// repeat at i-th block
name|refetchBlocks
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"src="
operator|+
name|src
operator|+
literal|", datanodes["
operator|+
name|j
operator|+
literal|"]="
operator|+
name|datanodes
index|[
name|j
index|]
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Fail to get block MD5 for "
operator|+
name|block
argument_list|)
throw|;
block|}
block|}
comment|//compute file MD5
specifier|final
name|MD5Hash
name|fileMD5
init|=
name|MD5Hash
operator|.
name|digest
argument_list|(
name|md5out
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|crcType
condition|)
block|{
case|case
name|CRC32
case|:
return|return
operator|new
name|MD5MD5CRC32GzipFileChecksum
argument_list|(
name|bytesPerCRC
argument_list|,
name|crcPerBlock
argument_list|,
name|fileMD5
argument_list|)
return|;
case|case
name|CRC32C
case|:
return|return
operator|new
name|MD5MD5CRC32CastagnoliFileChecksum
argument_list|(
name|bytesPerCRC
argument_list|,
name|crcPerBlock
argument_list|,
name|fileMD5
argument_list|)
return|;
default|default:
comment|// If there is no block allocated for the file,
comment|// return one with the magic entry that matches what previous
comment|// hdfs versions return.
if|if
condition|(
name|locatedblocks
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|MD5MD5CRC32GzipFileChecksum
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|fileMD5
argument_list|)
return|;
block|}
comment|// we should never get here since the validity was checked
comment|// when getCrcType() was called above.
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Connect to the given datanode's datantrasfer port, and return    * the resulting IOStreamPair. This includes encryption wrapping, etc.    */
DECL|method|connectToDN ( SocketFactory socketFactory, boolean connectToDnViaHostname, DataEncryptionKey encryptionKey, DatanodeInfo dn, int timeout)
specifier|private
specifier|static
name|IOStreamPair
name|connectToDN
parameter_list|(
name|SocketFactory
name|socketFactory
parameter_list|,
name|boolean
name|connectToDnViaHostname
parameter_list|,
name|DataEncryptionKey
name|encryptionKey
parameter_list|,
name|DatanodeInfo
name|dn
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Socket
name|sock
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sock
operator|=
name|socketFactory
operator|.
name|createSocket
argument_list|()
expr_stmt|;
name|String
name|dnAddr
init|=
name|dn
operator|.
name|getXferAddr
argument_list|(
name|connectToDnViaHostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connecting to datanode "
operator|+
name|dnAddr
argument_list|)
expr_stmt|;
block|}
name|NetUtils
operator|.
name|connect
argument_list|(
name|sock
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|dnAddr
argument_list|)
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|sock
operator|.
name|setSoTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|OutputStream
name|unbufOut
init|=
name|NetUtils
operator|.
name|getOutputStream
argument_list|(
name|sock
argument_list|)
decl_stmt|;
name|InputStream
name|unbufIn
init|=
name|NetUtils
operator|.
name|getInputStream
argument_list|(
name|sock
argument_list|)
decl_stmt|;
name|IOStreamPair
name|ret
decl_stmt|;
if|if
condition|(
name|encryptionKey
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|DataTransferEncryptor
operator|.
name|getEncryptedStreams
argument_list|(
name|unbufOut
argument_list|,
name|unbufIn
argument_list|,
name|encryptionKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
operator|new
name|IOStreamPair
argument_list|(
name|unbufIn
argument_list|,
name|unbufOut
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeSocket
argument_list|(
name|sock
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Infer the checksum type for a replica by sending an OP_READ_BLOCK    * for the first byte of that replica. This is used for compatibility    * with older HDFS versions which did not include the checksum type in    * OpBlockChecksumResponseProto.    *    * @param in input stream from datanode    * @param out output stream to datanode    * @param lb the located block    * @param clientName the name of the DFSClient requesting the checksum    * @param dn the connected datanode    * @return the inferred checksum type    * @throws IOException if an error occurs    */
DECL|method|inferChecksumTypeByReading ( String clientName, SocketFactory socketFactory, int socketTimeout, LocatedBlock lb, DatanodeInfo dn, DataEncryptionKey encryptionKey, boolean connectToDnViaHostname)
specifier|private
specifier|static
name|Type
name|inferChecksumTypeByReading
parameter_list|(
name|String
name|clientName
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|,
name|int
name|socketTimeout
parameter_list|,
name|LocatedBlock
name|lb
parameter_list|,
name|DatanodeInfo
name|dn
parameter_list|,
name|DataEncryptionKey
name|encryptionKey
parameter_list|,
name|boolean
name|connectToDnViaHostname
parameter_list|)
throws|throws
name|IOException
block|{
name|IOStreamPair
name|pair
init|=
name|connectToDN
argument_list|(
name|socketFactory
argument_list|,
name|connectToDnViaHostname
argument_list|,
name|encryptionKey
argument_list|,
name|dn
argument_list|,
name|socketTimeout
argument_list|)
decl_stmt|;
try|try
block|{
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|pair
operator|.
name|out
argument_list|,
name|HdfsConstants
operator|.
name|SMALL_BUFFER_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|pair
operator|.
name|in
argument_list|)
decl_stmt|;
operator|new
name|Sender
argument_list|(
name|out
argument_list|)
operator|.
name|readBlock
argument_list|(
name|lb
operator|.
name|getBlock
argument_list|()
argument_list|,
name|lb
operator|.
name|getBlockToken
argument_list|()
argument_list|,
name|clientName
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|CachingStrategy
operator|.
name|newDefaultStrategy
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|BlockOpResponseProto
name|reply
init|=
name|BlockOpResponseProto
operator|.
name|parseFrom
argument_list|(
name|PBHelper
operator|.
name|vintPrefixed
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|.
name|getStatus
argument_list|()
operator|!=
name|Status
operator|.
name|SUCCESS
condition|)
block|{
if|if
condition|(
name|reply
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|ERROR_ACCESS_TOKEN
condition|)
block|{
throw|throw
operator|new
name|InvalidBlockTokenException
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Bad response "
operator|+
name|reply
operator|+
literal|" trying to read "
operator|+
name|lb
operator|.
name|getBlock
argument_list|()
operator|+
literal|" from datanode "
operator|+
name|dn
argument_list|)
throw|;
block|}
block|}
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|reply
operator|.
name|getReadOpChecksumInfo
argument_list|()
operator|.
name|getChecksum
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|pair
operator|.
name|in
argument_list|,
name|pair
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set permissions to a file or directory.    * @param src path name.    * @param permission permission to set to    *     * @see ClientProtocol#setPermission(String, FsPermission)    */
DECL|method|setPermission (String src, FsPermission permission)
specifier|public
name|void
name|setPermission
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|setPermission
argument_list|(
name|src
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Set file or directory owner.    * @param src path name.    * @param username user id.    * @param groupname user group.    *     * @see ClientProtocol#setOwner(String, String, String)    */
DECL|method|setOwner (String src, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|setOwner
argument_list|(
name|src
argument_list|,
name|username
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * @see ClientProtocol#getStats()    */
DECL|method|getDiskStatus ()
specifier|public
name|FsStatus
name|getDiskStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|rawNums
index|[]
init|=
name|namenode
operator|.
name|getStats
argument_list|()
decl_stmt|;
return|return
operator|new
name|FsStatus
argument_list|(
name|rawNums
index|[
literal|0
index|]
argument_list|,
name|rawNums
index|[
literal|1
index|]
argument_list|,
name|rawNums
index|[
literal|2
index|]
argument_list|)
return|;
block|}
comment|/**    * Returns count of blocks with no good replicas left. Normally should be     * zero.    * @throws IOException    */
DECL|method|getMissingBlocksCount ()
specifier|public
name|long
name|getMissingBlocksCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|namenode
operator|.
name|getStats
argument_list|()
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_BLOCKS_IDX
index|]
return|;
block|}
comment|/**    * Returns count of blocks with one of more replica missing.    * @throws IOException    */
DECL|method|getUnderReplicatedBlocksCount ()
specifier|public
name|long
name|getUnderReplicatedBlocksCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|namenode
operator|.
name|getStats
argument_list|()
index|[
name|ClientProtocol
operator|.
name|GET_STATS_UNDER_REPLICATED_IDX
index|]
return|;
block|}
comment|/**    * Returns count of blocks with at least one replica marked corrupt.     * @throws IOException    */
DECL|method|getCorruptBlocksCount ()
specifier|public
name|long
name|getCorruptBlocksCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|namenode
operator|.
name|getStats
argument_list|()
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CORRUPT_BLOCKS_IDX
index|]
return|;
block|}
comment|/**    * @return a list in which each entry describes a corrupt file/block    * @throws IOException    */
DECL|method|listCorruptFileBlocks (String path, String cookie)
specifier|public
name|CorruptFileBlocks
name|listCorruptFileBlocks
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|cookie
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|namenode
operator|.
name|listCorruptFileBlocks
argument_list|(
name|path
argument_list|,
name|cookie
argument_list|)
return|;
block|}
DECL|method|datanodeReport (DatanodeReportType type)
specifier|public
name|DatanodeInfo
index|[]
name|datanodeReport
parameter_list|(
name|DatanodeReportType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|namenode
operator|.
name|getDatanodeReport
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Enter, leave or get safe mode.    *     * @see ClientProtocol#setSafeMode(HdfsConstants.SafeModeAction,boolean)    */
DECL|method|setSafeMode (SafeModeAction action)
specifier|public
name|boolean
name|setSafeMode
parameter_list|(
name|SafeModeAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|setSafeMode
argument_list|(
name|action
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Enter, leave or get safe mode.    *     * @param action    *          One of SafeModeAction.GET, SafeModeAction.ENTER and    *          SafeModeActiob.LEAVE    * @param isChecked    *          If true, then check only active namenode's safemode status, else    *          check first namenode's status.    * @see ClientProtocol#setSafeMode(HdfsConstants.SafeModeAction, boolean)    */
DECL|method|setSafeMode (SafeModeAction action, boolean isChecked)
specifier|public
name|boolean
name|setSafeMode
parameter_list|(
name|SafeModeAction
name|action
parameter_list|,
name|boolean
name|isChecked
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|namenode
operator|.
name|setSafeMode
argument_list|(
name|action
argument_list|,
name|isChecked
argument_list|)
return|;
block|}
comment|/**    * Create one snapshot.    *     * @param snapshotRoot The directory where the snapshot is to be taken    * @param snapshotName Name of the snapshot    * @return the snapshot path.    * @see ClientProtocol#createSnapshot(String, String)    */
DECL|method|createSnapshot (String snapshotRoot, String snapshotName)
specifier|public
name|String
name|createSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|createSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
name|snapshotName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Delete a snapshot of a snapshottable directory.    *     * @param snapshotRoot The snapshottable directory that the     *                    to-be-deleted snapshot belongs to    * @param snapshotName The name of the to-be-deleted snapshot    * @throws IOException    * @see ClientProtocol#deleteSnapshot(String, String)    */
DECL|method|deleteSnapshot (String snapshotRoot, String snapshotName)
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|namenode
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotRoot
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Rename a snapshot.    * @param snapshotDir The directory path where the snapshot was taken    * @param snapshotOldName Old name of the snapshot    * @param snapshotNewName New name of the snapshot    * @throws IOException    * @see ClientProtocol#renameSnapshot(String, String, String)    */
DECL|method|renameSnapshot (String snapshotDir, String snapshotOldName, String snapshotNewName)
specifier|public
name|void
name|renameSnapshot
parameter_list|(
name|String
name|snapshotDir
parameter_list|,
name|String
name|snapshotOldName
parameter_list|,
name|String
name|snapshotNewName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|renameSnapshot
argument_list|(
name|snapshotDir
argument_list|,
name|snapshotOldName
argument_list|,
name|snapshotNewName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Get all the current snapshottable directories.    * @return All the current snapshottable directories    * @throws IOException    * @see ClientProtocol#getSnapshottableDirListing()    */
DECL|method|getSnapshottableDirListing ()
specifier|public
name|SnapshottableDirectoryStatus
index|[]
name|getSnapshottableDirListing
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|getSnapshottableDirListing
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Allow snapshot on a directory.    *     * @see ClientProtocol#allowSnapshot(String snapshotRoot)    */
DECL|method|allowSnapshot (String snapshotRoot)
specifier|public
name|void
name|allowSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|allowSnapshot
argument_list|(
name|snapshotRoot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Disallow snapshot on a directory.    *     * @see ClientProtocol#disallowSnapshot(String snapshotRoot)    */
DECL|method|disallowSnapshot (String snapshotRoot)
specifier|public
name|void
name|disallowSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|disallowSnapshot
argument_list|(
name|snapshotRoot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Get the difference between two snapshots, or between a snapshot and the    * current tree of a directory.    * @see ClientProtocol#getSnapshotDiffReport(String, String, String)    */
DECL|method|getSnapshotDiffReport (String snapshotDir, String fromSnapshot, String toSnapshot)
specifier|public
name|SnapshotDiffReport
name|getSnapshotDiffReport
parameter_list|(
name|String
name|snapshotDir
parameter_list|,
name|String
name|fromSnapshot
parameter_list|,
name|String
name|toSnapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|getSnapshotDiffReport
argument_list|(
name|snapshotDir
argument_list|,
name|fromSnapshot
argument_list|,
name|toSnapshot
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
DECL|method|addCacheDirective ( CacheDirectiveInfo info, EnumSet<CacheFlag> flags)
specifier|public
name|long
name|addCacheDirective
parameter_list|(
name|CacheDirectiveInfo
name|info
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|addCacheDirective
argument_list|(
name|info
argument_list|,
name|flags
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
DECL|method|modifyCacheDirective ( CacheDirectiveInfo info, EnumSet<CacheFlag> flags)
specifier|public
name|void
name|modifyCacheDirective
parameter_list|(
name|CacheDirectiveInfo
name|info
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|modifyCacheDirective
argument_list|(
name|info
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
DECL|method|removeCacheDirective (long id)
specifier|public
name|void
name|removeCacheDirective
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|removeCacheDirective
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
DECL|method|listCacheDirectives ( CacheDirectiveInfo filter)
specifier|public
name|RemoteIterator
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|listCacheDirectives
parameter_list|(
name|CacheDirectiveInfo
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CacheDirectiveIterator
argument_list|(
name|namenode
argument_list|,
name|filter
argument_list|)
return|;
block|}
DECL|method|addCachePool (CachePoolInfo info)
specifier|public
name|void
name|addCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
DECL|method|modifyCachePool (CachePoolInfo info)
specifier|public
name|void
name|modifyCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|modifyCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
DECL|method|removeCachePool (String poolName)
specifier|public
name|void
name|removeCachePool
parameter_list|(
name|String
name|poolName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|removeCachePool
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|()
throw|;
block|}
block|}
DECL|method|listCachePools ()
specifier|public
name|RemoteIterator
argument_list|<
name|CachePoolEntry
argument_list|>
name|listCachePools
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|CachePoolIterator
argument_list|(
name|namenode
argument_list|)
return|;
block|}
comment|/**    * Save namespace image.    *     * @see ClientProtocol#saveNamespace()    */
DECL|method|saveNamespace ()
name|void
name|saveNamespace
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
try|try
block|{
name|namenode
operator|.
name|saveNamespace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Rolls the edit log on the active NameNode.    * @return the txid of the new log segment     *    * @see ClientProtocol#rollEdits()    */
DECL|method|rollEdits ()
name|long
name|rollEdits
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
try|try
block|{
return|return
name|namenode
operator|.
name|rollEdits
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getPreviousBlock (long fileId)
name|ExtendedBlock
name|getPreviousBlock
parameter_list|(
name|long
name|fileId
parameter_list|)
block|{
return|return
name|filesBeingWritten
operator|.
name|get
argument_list|(
name|fileId
argument_list|)
operator|.
name|getBlock
argument_list|()
return|;
block|}
comment|/**    * enable/disable restore failed storage.    *     * @see ClientProtocol#restoreFailedStorage(String arg)    */
DECL|method|restoreFailedStorage (String arg)
name|boolean
name|restoreFailedStorage
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|IOException
block|{
return|return
name|namenode
operator|.
name|restoreFailedStorage
argument_list|(
name|arg
argument_list|)
return|;
block|}
comment|/**    * Refresh the hosts and exclude files.  (Rereads them.)    * See {@link ClientProtocol#refreshNodes()}     * for more details.    *     * @see ClientProtocol#refreshNodes()    */
DECL|method|refreshNodes ()
specifier|public
name|void
name|refreshNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|namenode
operator|.
name|refreshNodes
argument_list|()
expr_stmt|;
block|}
comment|/**    * Dumps DFS data structures into specified file.    *     * @see ClientProtocol#metaSave(String)    */
DECL|method|metaSave (String pathname)
specifier|public
name|void
name|metaSave
parameter_list|(
name|String
name|pathname
parameter_list|)
throws|throws
name|IOException
block|{
name|namenode
operator|.
name|metaSave
argument_list|(
name|pathname
argument_list|)
expr_stmt|;
block|}
comment|/**    * Requests the namenode to tell all datanodes to use a new, non-persistent    * bandwidth value for dfs.balance.bandwidthPerSec.    * See {@link ClientProtocol#setBalancerBandwidth(long)}     * for more details.    *     * @see ClientProtocol#setBalancerBandwidth(long)    */
DECL|method|setBalancerBandwidth (long bandwidth)
specifier|public
name|void
name|setBalancerBandwidth
parameter_list|(
name|long
name|bandwidth
parameter_list|)
throws|throws
name|IOException
block|{
name|namenode
operator|.
name|setBalancerBandwidth
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see ClientProtocol#finalizeUpgrade()    */
DECL|method|finalizeUpgrade ()
specifier|public
name|void
name|finalizeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|namenode
operator|.
name|finalizeUpgrade
argument_list|()
expr_stmt|;
block|}
DECL|method|rollingUpgrade (RollingUpgradeAction action)
name|RollingUpgradeInfo
name|rollingUpgrade
parameter_list|(
name|RollingUpgradeAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|namenode
operator|.
name|rollingUpgrade
argument_list|(
name|action
argument_list|)
return|;
block|}
comment|/**    */
annotation|@
name|Deprecated
DECL|method|mkdirs (String src)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mkdirs
argument_list|(
name|src
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Create a directory (or hierarchy of directories) with the given    * name and permission.    *    * @param src The path of the directory being created    * @param permission The permission of the directory being created.    * If permission == null, use {@link FsPermission#getDefault()}.    * @param createParent create missing parent directory if true    *     * @return True if the operation success.    *     * @see ClientProtocol#mkdirs(String, FsPermission, boolean)    */
DECL|method|mkdirs (String src, FsPermission permission, boolean createParent)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|permission
operator|==
literal|null
condition|)
block|{
name|permission
operator|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
name|FsPermission
name|masked
init|=
name|permission
operator|.
name|applyUMask
argument_list|(
name|dfsClientConf
operator|.
name|uMask
argument_list|)
decl_stmt|;
return|return
name|primitiveMkdir
argument_list|(
name|src
argument_list|,
name|masked
argument_list|,
name|createParent
argument_list|)
return|;
block|}
comment|/**    * Same {{@link #mkdirs(String, FsPermission, boolean)} except    * that the permissions has already been masked against umask.    */
DECL|method|primitiveMkdir (String src, FsPermission absPermission)
specifier|public
name|boolean
name|primitiveMkdir
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|absPermission
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|primitiveMkdir
argument_list|(
name|src
argument_list|,
name|absPermission
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Same {{@link #mkdirs(String, FsPermission, boolean)} except    * that the permissions has already been masked against umask.    */
DECL|method|primitiveMkdir (String src, FsPermission absPermission, boolean createParent)
specifier|public
name|boolean
name|primitiveMkdir
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|absPermission
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|absPermission
operator|==
literal|null
condition|)
block|{
name|absPermission
operator|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|dfsClientConf
operator|.
name|uMask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|src
operator|+
literal|": masked="
operator|+
name|absPermission
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|namenode
operator|.
name|mkdirs
argument_list|(
name|src
argument_list|,
name|absPermission
argument_list|,
name|createParent
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|InvalidPathException
operator|.
name|class
argument_list|,
name|FileAlreadyExistsException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|ParentNotDirectoryException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|DSQuotaExceededException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get {@link ContentSummary} rooted at the specified directory.    * @param path The string representation of the path    *     * @see ClientProtocol#getContentSummary(String)    */
DECL|method|getContentSummary (String src)
name|ContentSummary
name|getContentSummary
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|namenode
operator|.
name|getContentSummary
argument_list|(
name|src
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sets or resets quotas for a directory.    * @see ClientProtocol#setQuota(String, long, long)    */
DECL|method|setQuota (String src, long namespaceQuota, long diskspaceQuota)
name|void
name|setQuota
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|namespaceQuota
parameter_list|,
name|long
name|diskspaceQuota
parameter_list|)
throws|throws
name|IOException
block|{
comment|// sanity check
if|if
condition|(
operator|(
name|namespaceQuota
operator|<=
literal|0
operator|&&
name|namespaceQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
operator|&&
name|namespaceQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_RESET
operator|)
operator|||
operator|(
name|diskspaceQuota
operator|<=
literal|0
operator|&&
name|diskspaceQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
operator|&&
name|diskspaceQuota
operator|!=
name|HdfsConstants
operator|.
name|QUOTA_RESET
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid values for quota : "
operator|+
name|namespaceQuota
operator|+
literal|" and "
operator|+
name|diskspaceQuota
argument_list|)
throw|;
block|}
try|try
block|{
name|namenode
operator|.
name|setQuota
argument_list|(
name|src
argument_list|,
name|namespaceQuota
argument_list|,
name|diskspaceQuota
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|DSQuotaExceededException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * set the modification and access time of a file    *     * @see ClientProtocol#setTimes(String, long, long)    */
DECL|method|setTimes (String src, long mtime, long atime)
specifier|public
name|void
name|setTimes
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|setTimes
argument_list|(
name|src
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
comment|/**    * @deprecated use {@link HdfsDataInputStream} instead.    */
annotation|@
name|Deprecated
DECL|class|DFSDataInputStream
specifier|public
specifier|static
class|class
name|DFSDataInputStream
extends|extends
name|HdfsDataInputStream
block|{
DECL|method|DFSDataInputStream (DFSInputStream in)
specifier|public
name|DFSDataInputStream
parameter_list|(
name|DFSInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reportChecksumFailure (String file, ExtendedBlock blk, DatanodeInfo dn)
name|void
name|reportChecksumFailure
parameter_list|(
name|String
name|file
parameter_list|,
name|ExtendedBlock
name|blk
parameter_list|,
name|DatanodeInfo
name|dn
parameter_list|)
block|{
name|DatanodeInfo
index|[]
name|dnArr
init|=
block|{
name|dn
block|}
decl_stmt|;
name|LocatedBlock
index|[]
name|lblocks
init|=
block|{
operator|new
name|LocatedBlock
argument_list|(
name|blk
argument_list|,
name|dnArr
argument_list|)
block|}
decl_stmt|;
name|reportChecksumFailure
argument_list|(
name|file
argument_list|,
name|lblocks
argument_list|)
expr_stmt|;
block|}
comment|// just reports checksum failure and ignores any exception during the report.
DECL|method|reportChecksumFailure (String file, LocatedBlock lblocks[])
name|void
name|reportChecksumFailure
parameter_list|(
name|String
name|file
parameter_list|,
name|LocatedBlock
name|lblocks
index|[]
parameter_list|)
block|{
try|try
block|{
name|reportBadBlocks
argument_list|(
name|lblocks
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found corruption while reading "
operator|+
name|file
operator|+
literal|". Error repairing corrupt blocks. Bad blocks remain."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"[clientName="
operator|+
name|clientName
operator|+
literal|", ugi="
operator|+
name|ugi
operator|+
literal|"]"
return|;
block|}
DECL|method|getDefaultReadCachingStrategy ()
specifier|public
name|CachingStrategy
name|getDefaultReadCachingStrategy
parameter_list|()
block|{
return|return
name|defaultReadCachingStrategy
return|;
block|}
DECL|method|getDefaultWriteCachingStrategy ()
specifier|public
name|CachingStrategy
name|getDefaultWriteCachingStrategy
parameter_list|()
block|{
return|return
name|defaultWriteCachingStrategy
return|;
block|}
DECL|method|getClientContext ()
specifier|public
name|ClientContext
name|getClientContext
parameter_list|()
block|{
return|return
name|clientContext
return|;
block|}
DECL|method|modifyAclEntries (String src, List<AclEntry> aclSpec)
specifier|public
name|void
name|modifyAclEntries
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|modifyAclEntries
argument_list|(
name|src
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|AclException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|removeAclEntries (String src, List<AclEntry> aclSpec)
specifier|public
name|void
name|removeAclEntries
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|removeAclEntries
argument_list|(
name|src
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|AclException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|removeDefaultAcl (String src)
specifier|public
name|void
name|removeDefaultAcl
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|removeDefaultAcl
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|AclException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|removeAcl (String src)
specifier|public
name|void
name|removeAcl
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|removeAcl
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|AclException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|setAcl (String src, List<AclEntry> aclSpec)
specifier|public
name|void
name|setAcl
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|setAcl
argument_list|(
name|src
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|AclException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|getAclStatus (String src)
specifier|public
name|AclStatus
name|getAclStatus
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|getAclStatus
argument_list|(
name|src
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|AclException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|createEncryptionZone (String src, String keyId)
specifier|public
name|void
name|createEncryptionZone
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|keyId
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|createEncryptionZone
argument_list|(
name|src
argument_list|,
name|keyId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|listEncryptionZones ()
specifier|public
name|List
argument_list|<
name|EncryptionZone
argument_list|>
name|listEncryptionZones
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|namenode
operator|.
name|listEncryptionZones
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|setXAttr (String src, String name, byte[] value, EnumSet<XAttrSetFlag> flag)
specifier|public
name|void
name|setXAttr
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|setXAttr
argument_list|(
name|src
argument_list|,
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|getXAttr (String src, String name)
specifier|public
name|byte
index|[]
name|getXAttr
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
init|=
name|XAttrHelper
operator|.
name|buildXAttrAsList
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|XAttr
argument_list|>
name|result
init|=
name|namenode
operator|.
name|getXAttrs
argument_list|(
name|src
argument_list|,
name|xAttrs
argument_list|)
decl_stmt|;
return|return
name|XAttrHelper
operator|.
name|getFirstXAttrValue
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|getXAttrs (String src)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|XAttrHelper
operator|.
name|buildXAttrMap
argument_list|(
name|namenode
operator|.
name|getXAttrs
argument_list|(
name|src
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|getXAttrs (String src, List<String> names)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getXAttrs
parameter_list|(
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|XAttrHelper
operator|.
name|buildXAttrMap
argument_list|(
name|namenode
operator|.
name|getXAttrs
argument_list|(
name|src
argument_list|,
name|XAttrHelper
operator|.
name|buildXAttrs
argument_list|(
name|names
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|listXAttrs (String src)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listXAttrs
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|xattrs
init|=
name|XAttrHelper
operator|.
name|buildXAttrMap
argument_list|(
name|namenode
operator|.
name|listXAttrs
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|xattrs
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
DECL|method|removeXAttr (String src, String name)
specifier|public
name|void
name|removeXAttr
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|namenode
operator|.
name|removeXAttr
argument_list|(
name|src
argument_list|,
name|XAttrHelper
operator|.
name|buildXAttr
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
throw|throw
name|re
operator|.
name|unwrapRemoteException
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|FileNotFoundException
operator|.
name|class
argument_list|,
name|NSQuotaExceededException
operator|.
name|class
argument_list|,
name|SafeModeException
operator|.
name|class
argument_list|,
name|SnapshotAccessControlException
operator|.
name|class
argument_list|,
name|UnresolvedPathException
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
comment|// RemotePeerFactory
DECL|method|newConnectedPeer (InetSocketAddress addr)
specifier|public
name|Peer
name|newConnectedPeer
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|)
throws|throws
name|IOException
block|{
name|Peer
name|peer
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Socket
name|sock
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sock
operator|=
name|socketFactory
operator|.
name|createSocket
argument_list|()
expr_stmt|;
name|NetUtils
operator|.
name|connect
argument_list|(
name|sock
argument_list|,
name|addr
argument_list|,
name|getRandomLocalInterfaceAddr
argument_list|()
argument_list|,
name|dfsClientConf
operator|.
name|socketTimeout
argument_list|)
expr_stmt|;
name|peer
operator|=
name|TcpPeerServer
operator|.
name|peerFromSocketAndKey
argument_list|(
name|sock
argument_list|,
name|getDataEncryptionKey
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|peer
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|peer
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeSocket
argument_list|(
name|sock
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create hedged reads thread pool, HEDGED_READ_THREAD_POOL, if    * it does not already exist.    * @param num Number of threads for hedged reads thread pool.    * If zero, skip hedged reads thread pool creation.    */
DECL|method|initThreadsNumForHedgedReads (int num)
specifier|private
specifier|synchronized
name|void
name|initThreadsNumForHedgedReads
parameter_list|(
name|int
name|num
parameter_list|)
block|{
if|if
condition|(
name|num
operator|<=
literal|0
operator|||
name|HEDGED_READ_THREAD_POOL
operator|!=
literal|null
condition|)
return|return;
name|HEDGED_READ_THREAD_POOL
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|num
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|Daemon
operator|.
name|DaemonFactory
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicInteger
name|threadIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
name|super
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"hedgedRead-"
operator|+
name|threadIndex
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|,
operator|new
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|rejectedExecution
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|ThreadPoolExecutor
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Execution rejected, Executing in current thread"
argument_list|)
expr_stmt|;
name|HEDGED_READ_METRIC
operator|.
name|incHedgedReadOpsInCurThread
argument_list|()
expr_stmt|;
comment|// will run in the current thread
name|super
operator|.
name|rejectedExecution
argument_list|(
name|runnable
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HEDGED_READ_THREAD_POOL
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using hedged reads; pool threads="
operator|+
name|num
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHedgedReadTimeout ()
name|long
name|getHedgedReadTimeout
parameter_list|()
block|{
return|return
name|this
operator|.
name|hedgedReadThresholdMillis
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setHedgedReadTimeout (long timeoutMillis)
name|void
name|setHedgedReadTimeout
parameter_list|(
name|long
name|timeoutMillis
parameter_list|)
block|{
name|this
operator|.
name|hedgedReadThresholdMillis
operator|=
name|timeoutMillis
expr_stmt|;
block|}
DECL|method|getHedgedReadsThreadPool ()
name|ThreadPoolExecutor
name|getHedgedReadsThreadPool
parameter_list|()
block|{
return|return
name|HEDGED_READ_THREAD_POOL
return|;
block|}
DECL|method|isHedgedReadsEnabled ()
name|boolean
name|isHedgedReadsEnabled
parameter_list|()
block|{
return|return
operator|(
name|HEDGED_READ_THREAD_POOL
operator|!=
literal|null
operator|)
operator|&&
name|HEDGED_READ_THREAD_POOL
operator|.
name|getMaximumPoolSize
argument_list|()
operator|>
literal|0
return|;
block|}
DECL|method|getHedgedReadMetrics ()
name|DFSHedgedReadMetrics
name|getHedgedReadMetrics
parameter_list|()
block|{
return|return
name|HEDGED_READ_METRIC
return|;
block|}
block|}
end_class

end_unit

