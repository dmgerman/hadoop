begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|LocatedBlockBuilder
class|class
name|LocatedBlockBuilder
block|{
DECL|field|flen
specifier|protected
name|long
name|flen
decl_stmt|;
DECL|field|blocks
specifier|protected
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blocks
init|=
name|Collections
operator|.
expr|<
name|LocatedBlock
operator|>
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|isUC
specifier|protected
name|boolean
name|isUC
decl_stmt|;
DECL|field|last
specifier|protected
name|LocatedBlock
name|last
decl_stmt|;
DECL|field|lastComplete
specifier|protected
name|boolean
name|lastComplete
decl_stmt|;
DECL|field|feInfo
specifier|protected
name|FileEncryptionInfo
name|feInfo
decl_stmt|;
DECL|field|maxBlocks
specifier|private
specifier|final
name|int
name|maxBlocks
decl_stmt|;
DECL|field|ecPolicy
specifier|protected
name|ErasureCodingPolicy
name|ecPolicy
decl_stmt|;
DECL|method|LocatedBlockBuilder (int maxBlocks)
name|LocatedBlockBuilder
parameter_list|(
name|int
name|maxBlocks
parameter_list|)
block|{
name|this
operator|.
name|maxBlocks
operator|=
name|maxBlocks
expr_stmt|;
block|}
DECL|method|isBlockMax ()
name|boolean
name|isBlockMax
parameter_list|()
block|{
return|return
name|blocks
operator|.
name|size
argument_list|()
operator|>=
name|maxBlocks
return|;
block|}
DECL|method|fileLength (long fileLength)
name|LocatedBlockBuilder
name|fileLength
parameter_list|(
name|long
name|fileLength
parameter_list|)
block|{
name|flen
operator|=
name|fileLength
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addBlock (LocatedBlock block)
name|LocatedBlockBuilder
name|addBlock
parameter_list|(
name|LocatedBlock
name|block
parameter_list|)
block|{
if|if
condition|(
name|blocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|blocks
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|blocks
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// return new block so tokens can be set
DECL|method|newLocatedBlock (ExtendedBlock eb, DatanodeStorageInfo[] storage, long pos, boolean isCorrupt)
name|LocatedBlock
name|newLocatedBlock
parameter_list|(
name|ExtendedBlock
name|eb
parameter_list|,
name|DatanodeStorageInfo
index|[]
name|storage
parameter_list|,
name|long
name|pos
parameter_list|,
name|boolean
name|isCorrupt
parameter_list|)
block|{
name|LocatedBlock
name|blk
init|=
name|BlockManager
operator|.
name|newLocatedBlock
argument_list|(
name|eb
argument_list|,
name|storage
argument_list|,
name|pos
argument_list|,
name|isCorrupt
argument_list|)
decl_stmt|;
return|return
name|blk
return|;
block|}
DECL|method|lastUC (boolean underConstruction)
name|LocatedBlockBuilder
name|lastUC
parameter_list|(
name|boolean
name|underConstruction
parameter_list|)
block|{
name|isUC
operator|=
name|underConstruction
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|lastBlock (LocatedBlock block)
name|LocatedBlockBuilder
name|lastBlock
parameter_list|(
name|LocatedBlock
name|block
parameter_list|)
block|{
name|last
operator|=
name|block
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|lastComplete (boolean complete)
name|LocatedBlockBuilder
name|lastComplete
parameter_list|(
name|boolean
name|complete
parameter_list|)
block|{
name|lastComplete
operator|=
name|complete
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|encryption (FileEncryptionInfo fileEncryptionInfo)
name|LocatedBlockBuilder
name|encryption
parameter_list|(
name|FileEncryptionInfo
name|fileEncryptionInfo
parameter_list|)
block|{
name|feInfo
operator|=
name|fileEncryptionInfo
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|erasureCoding (ErasureCodingPolicy codingPolicy)
name|LocatedBlockBuilder
name|erasureCoding
parameter_list|(
name|ErasureCodingPolicy
name|codingPolicy
parameter_list|)
block|{
name|ecPolicy
operator|=
name|codingPolicy
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build (DatanodeDescriptor client)
name|LocatedBlocks
name|build
parameter_list|(
name|DatanodeDescriptor
name|client
parameter_list|)
block|{
return|return
name|build
argument_list|()
return|;
block|}
DECL|method|build ()
name|LocatedBlocks
name|build
parameter_list|()
block|{
return|return
operator|new
name|LocatedBlocks
argument_list|(
name|flen
argument_list|,
name|isUC
argument_list|,
name|blocks
argument_list|,
name|last
argument_list|,
name|lastComplete
argument_list|,
name|feInfo
argument_list|,
name|ecPolicy
argument_list|)
return|;
block|}
block|}
end_class

end_unit

