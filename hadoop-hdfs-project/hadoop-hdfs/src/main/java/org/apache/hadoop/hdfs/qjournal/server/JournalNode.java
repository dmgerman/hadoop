begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.qjournal.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|qjournal
operator|.
name|client
operator|.
name|QuorumJournalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|StorageErrorReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|source
operator|.
name|JvmMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * The JournalNode is a daemon which allows namenodes using  * the QuorumJournalManager to log and retrieve edits stored  * remotely. It is a thin wrapper around a local edit log  * directory with the addition of facilities to participate  * in the quorum protocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|JournalNode
specifier|public
class|class
name|JournalNode
implements|implements
name|Tool
implements|,
name|Configurable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JournalNode
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|rpcServer
specifier|private
name|JournalNodeRpcServer
name|rpcServer
decl_stmt|;
DECL|field|httpServer
specifier|private
name|JournalNodeHttpServer
name|httpServer
decl_stmt|;
DECL|field|journalsById
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Journal
argument_list|>
name|journalsById
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|field|localDir
specifier|private
name|File
name|localDir
decl_stmt|;
static|static
block|{
name|HdfsConfiguration
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**    * When stopped, the daemon will exit with this code.     */
DECL|field|resultCode
specifier|private
name|int
name|resultCode
init|=
literal|0
decl_stmt|;
DECL|method|getOrCreateJournal (String jid)
specifier|synchronized
name|Journal
name|getOrCreateJournal
parameter_list|(
name|String
name|jid
parameter_list|)
throws|throws
name|IOException
block|{
name|QuorumJournalManager
operator|.
name|checkJournalId
argument_list|(
name|jid
argument_list|)
expr_stmt|;
name|Journal
name|journal
init|=
name|journalsById
operator|.
name|get
argument_list|(
name|jid
argument_list|)
decl_stmt|;
if|if
condition|(
name|journal
operator|==
literal|null
condition|)
block|{
name|File
name|logDir
init|=
name|getLogDir
argument_list|(
name|jid
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing journal in directory "
operator|+
name|logDir
argument_list|)
expr_stmt|;
name|journal
operator|=
operator|new
name|Journal
argument_list|(
name|logDir
argument_list|,
name|jid
argument_list|,
operator|new
name|ErrorReporter
argument_list|()
argument_list|)
expr_stmt|;
name|journalsById
operator|.
name|put
argument_list|(
name|jid
argument_list|,
name|journal
argument_list|)
expr_stmt|;
block|}
return|return
name|journal
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|localDir
operator|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_EDITS_DIR_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_EDITS_DIR_DEFAULT
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateAndCreateJournalDir (File dir)
specifier|private
specifier|static
name|void
name|validateAndCreateJournalDir
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Journal dir '"
operator|+
name|dir
operator|+
literal|"' should be an absolute path"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create journal dir '"
operator|+
name|dir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Journal directory '"
operator|+
name|dir
operator|+
literal|"' is not "
operator|+
literal|"a directory"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dir
operator|.
name|canWrite
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to write to journal dir '"
operator|+
name|dir
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|start
argument_list|()
expr_stmt|;
return|return
name|join
argument_list|()
return|;
block|}
comment|/**    * Start listening for edits via RPC.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|isStarted
argument_list|()
argument_list|,
literal|"JN already running"
argument_list|)
expr_stmt|;
name|validateAndCreateJournalDir
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"JournalNode"
argument_list|)
expr_stmt|;
name|JvmMetrics
operator|.
name|create
argument_list|(
literal|"JournalNode"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_METRICS_SESSION_ID_KEY
argument_list|)
argument_list|,
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|socAddr
init|=
name|JournalNodeRpcServer
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|login
argument_list|(
name|conf
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_KEYTAB_FILE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_USER_NAME_KEY
argument_list|,
name|socAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|httpServer
operator|=
operator|new
name|JournalNodeHttpServer
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|rpcServer
operator|=
operator|new
name|JournalNodeRpcServer
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|isStarted ()
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|rpcServer
operator|!=
literal|null
return|;
block|}
comment|/**    * @return the address the IPC server is bound to    */
DECL|method|getBoundIpcAddress ()
specifier|public
name|InetSocketAddress
name|getBoundIpcAddress
parameter_list|()
block|{
return|return
name|rpcServer
operator|.
name|getAddress
argument_list|()
return|;
block|}
DECL|method|getBoundHttpAddress ()
specifier|public
name|InetSocketAddress
name|getBoundHttpAddress
parameter_list|()
block|{
return|return
name|httpServer
operator|.
name|getAddress
argument_list|()
return|;
block|}
comment|/**    * Stop the daemon with the given status code    * @param rc the status code with which to exit (non-zero    * should indicate an error)    */
DECL|method|stop (int rc)
specifier|public
name|void
name|stop
parameter_list|(
name|int
name|rc
parameter_list|)
block|{
name|this
operator|.
name|resultCode
operator|=
name|rc
expr_stmt|;
if|if
condition|(
name|rpcServer
operator|!=
literal|null
condition|)
block|{
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to stop HTTP server for "
operator|+
name|this
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Journal
name|j
range|:
name|journalsById
operator|.
name|values
argument_list|()
control|)
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait for the daemon to exit.    * @return the result code (non-zero if error)    */
DECL|method|join ()
name|int
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|rpcServer
operator|!=
literal|null
condition|)
block|{
name|rpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
return|return
name|resultCode
return|;
block|}
DECL|method|stopAndJoin (int rc)
specifier|public
name|void
name|stopAndJoin
parameter_list|(
name|int
name|rc
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|stop
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return the directory inside our configured storage    * dir which corresponds to a given journal.     * @param jid the journal identifier    * @return the file, which may or may not exist yet    */
DECL|method|getLogDir (String jid)
specifier|private
name|File
name|getLogDir
parameter_list|(
name|String
name|jid
parameter_list|)
block|{
name|String
name|dir
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_EDITS_DIR_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_JOURNALNODE_EDITS_DIR_DEFAULT
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|jid
operator|!=
literal|null
operator|&&
operator|!
name|jid
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"bad journal identifier: %s"
argument_list|,
name|jid
argument_list|)
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|)
argument_list|,
name|jid
argument_list|)
return|;
block|}
DECL|class|ErrorReporter
specifier|private
class|class
name|ErrorReporter
implements|implements
name|StorageErrorReporter
block|{
annotation|@
name|Override
DECL|method|reportErrorOnFile (File f)
specifier|public
name|void
name|reportErrorOnFile
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Error reported on file "
operator|+
name|f
operator|+
literal|"... exiting"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
name|stop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|JournalNode
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

