begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES_DEFAULT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
operator|.
name|BatchedListEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|InvalidPoolNameError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|PoolWritePermissionDeniedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|InvalidIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|NoSuchIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|RemovePermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|UnexpectedRemovePathBasedCacheDescriptorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StepType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * The Cache Manager handles caching on DataNodes.  */
end_comment

begin_class
DECL|class|CacheManager
specifier|public
specifier|final
class|class
name|CacheManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CacheManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Cache entries, sorted by ID.    *    * listPathBasedCacheDescriptors relies on the ordering of elements in this map     * to track what has already been listed by the client.    */
DECL|field|entriesById
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
name|entriesById
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Cache entries, sorted by path    */
DECL|field|entriesByPath
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PathBasedCacheEntry
argument_list|>
argument_list|>
name|entriesByPath
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PathBasedCacheEntry
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Cache pools, sorted by name.    */
DECL|field|cachePools
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
name|cachePools
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The entry ID to use for a new entry.    */
DECL|field|nextEntryId
specifier|private
name|long
name|nextEntryId
decl_stmt|;
comment|/**    * Maximum number of cache pools to list in one operation.    */
DECL|field|maxListCachePoolsResponses
specifier|private
specifier|final
name|int
name|maxListCachePoolsResponses
decl_stmt|;
comment|/**    * Maximum number of cache pool directives to list in one operation.    */
DECL|field|maxListCacheDescriptorsResponses
specifier|private
specifier|final
name|int
name|maxListCacheDescriptorsResponses
decl_stmt|;
DECL|field|namesystem
specifier|final
specifier|private
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|field|dir
specifier|final
specifier|private
name|FSDirectory
name|dir
decl_stmt|;
DECL|method|CacheManager (FSNamesystem namesystem, FSDirectory dir, Configuration conf)
name|CacheManager
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|FSDirectory
name|dir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|maxListCachePoolsResponses
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES
argument_list|,
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES_DEFAULT
argument_list|)
expr_stmt|;
name|maxListCacheDescriptorsResponses
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES
argument_list|,
name|DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES_DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|clear ()
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|entriesById
operator|.
name|clear
argument_list|()
expr_stmt|;
name|entriesByPath
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cachePools
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nextEntryId
operator|=
literal|1
expr_stmt|;
block|}
comment|/**    * Returns the next entry ID to be used for a PathBasedCacheEntry    */
DECL|method|getNextEntryId ()
specifier|synchronized
name|long
name|getNextEntryId
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nextEntryId
operator|!=
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|nextEntryId
operator|++
return|;
block|}
comment|/**    * Returns the PathBasedCacheEntry corresponding to a PathBasedCacheEntry.    *     * @param directive Lookup directive    * @return Corresponding PathBasedCacheEntry, or null if not present.    */
specifier|private
specifier|synchronized
name|PathBasedCacheEntry
DECL|method|findEntry (PathBasedCacheDirective directive)
name|findEntry
parameter_list|(
name|PathBasedCacheDirective
name|directive
parameter_list|)
block|{
name|List
argument_list|<
name|PathBasedCacheEntry
argument_list|>
name|existing
init|=
name|entriesByPath
operator|.
name|get
argument_list|(
name|directive
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|PathBasedCacheEntry
name|entry
range|:
name|existing
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getPool
argument_list|()
operator|.
name|getPoolName
argument_list|()
operator|.
name|equals
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Add a new PathBasedCacheEntry, skipping any validation checks. Called    * directly when reloading CacheManager state from FSImage.    *     * @throws IOException if unable to cache the entry    */
DECL|method|unprotectedAddEntry (PathBasedCacheEntry entry)
specifier|private
name|void
name|unprotectedAddEntry
parameter_list|(
name|PathBasedCacheEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
comment|// Add it to the various maps
name|entriesById
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|entry
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PathBasedCacheEntry
argument_list|>
name|entryList
init|=
name|entriesByPath
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryList
operator|==
literal|null
condition|)
block|{
name|entryList
operator|=
operator|new
name|ArrayList
argument_list|<
name|PathBasedCacheEntry
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|entriesByPath
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|entryList
argument_list|)
expr_stmt|;
block|}
name|entryList
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// Set the path as cached in the namesystem
try|try
block|{
name|INode
name|node
init|=
name|dir
operator|.
name|getINode
argument_list|(
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|INodeFile
name|file
init|=
name|node
operator|.
name|asFile
argument_list|()
decl_stmt|;
comment|// TODO: adjustable cache replication factor
name|namesystem
operator|.
name|setCacheReplicationInt
argument_list|(
name|entry
operator|.
name|getPath
argument_list|()
argument_list|,
name|file
operator|.
name|getBlockReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Path "
operator|+
name|entry
operator|.
name|getPath
argument_list|()
operator|+
literal|" is not a file"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"unprotectedAddEntry "
operator|+
name|entry
operator|+
literal|": failed to cache file: "
operator|+
name|ioe
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|/**    * Add a new PathBasedCacheDirective if valid, returning a corresponding    * PathBasedCacheDescriptor to the user.    *     * @param directive Directive describing the cache entry being added    * @param pc Permission checker used to validate that the calling user has    *          access to the destination cache pool    * @return Corresponding PathBasedCacheDescriptor for the new cache entry    * @throws IOException if the directive is invalid or was otherwise    *           unsuccessful    */
DECL|method|addDirective ( PathBasedCacheDirective directive, FSPermissionChecker pc)
specifier|public
specifier|synchronized
name|PathBasedCacheDescriptor
name|addDirective
parameter_list|(
name|PathBasedCacheDirective
name|directive
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|IOException
block|{
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": pool not found."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidPoolNameError
argument_list|(
name|directive
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|pc
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|pc
operator|.
name|checkPermission
argument_list|(
name|pool
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": write permission denied."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PoolWritePermissionDeniedError
argument_list|(
name|directive
argument_list|)
throw|;
block|}
try|try
block|{
name|directive
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": validation failed: "
operator|+
name|ioe
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
comment|// Check if we already have this entry.
name|PathBasedCacheEntry
name|existing
init|=
name|findEntry
argument_list|(
name|directive
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": there is an "
operator|+
literal|"existing directive "
operator|+
name|existing
operator|+
literal|" in this pool."
argument_list|)
expr_stmt|;
return|return
name|existing
operator|.
name|getDescriptor
argument_list|()
return|;
block|}
comment|// Success!
name|PathBasedCacheDescriptor
name|d
init|=
name|unprotectedAddDirective
argument_list|(
name|directive
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": added cache directive "
operator|+
name|directive
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
comment|/**    * Assigns a new entry ID to a validated PathBasedCacheDirective and adds    * it to the CacheManager. Called directly when replaying the edit log.    *     * @param directive Directive being added    * @return PathBasedCacheDescriptor for the directive    * @throws IOException    */
DECL|method|unprotectedAddDirective ( PathBasedCacheDirective directive)
name|PathBasedCacheDescriptor
name|unprotectedAddDirective
parameter_list|(
name|PathBasedCacheDirective
name|directive
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add a new entry with the next available ID.
name|PathBasedCacheEntry
name|entry
decl_stmt|;
name|entry
operator|=
operator|new
name|PathBasedCacheEntry
argument_list|(
name|getNextEntryId
argument_list|()
argument_list|,
name|directive
operator|.
name|getPath
argument_list|()
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|unprotectedAddEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|getDescriptor
argument_list|()
return|;
block|}
comment|/**    * Remove the PathBasedCacheEntry corresponding to a descriptor ID from    * the CacheManager.    *     * @param id of the PathBasedCacheDescriptor    * @param pc Permissions checker used to validated the request    * @throws IOException    */
DECL|method|removeDescriptor (long id, FSPermissionChecker pc)
specifier|public
specifier|synchronized
name|void
name|removeDescriptor
parameter_list|(
name|long
name|id
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check for invalid IDs.
if|if
condition|(
name|id
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDescriptor "
operator|+
name|id
operator|+
literal|": invalid non-positive "
operator|+
literal|"descriptor ID."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidIdException
argument_list|(
name|id
argument_list|)
throw|;
block|}
comment|// Find the entry.
name|PathBasedCacheEntry
name|existing
init|=
name|entriesById
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDescriptor "
operator|+
name|id
operator|+
literal|": entry not found."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchIdException
argument_list|(
name|id
argument_list|)
throw|;
block|}
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|existing
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getPool
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDescriptor "
operator|+
name|id
operator|+
literal|": pool not found for directive "
operator|+
name|existing
operator|.
name|getDescriptor
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnexpectedRemovePathBasedCacheDescriptorException
argument_list|(
name|id
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|pc
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|pc
operator|.
name|checkPermission
argument_list|(
name|pool
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDescriptor "
operator|+
name|id
operator|+
literal|": write permission denied to "
operator|+
literal|"pool "
operator|+
name|pool
operator|+
literal|" for entry "
operator|+
name|existing
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemovePermissionDeniedException
argument_list|(
name|id
argument_list|)
throw|;
block|}
name|unprotectedRemoveDescriptor
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Unchecked internal method used to remove a PathBasedCacheEntry from the    * CacheManager. Called directly when replaying the edit log.    *     * @param id of the PathBasedCacheDescriptor corresponding to the entry that    *          is being removed    * @throws IOException    */
DECL|method|unprotectedRemoveDescriptor (long id)
name|void
name|unprotectedRemoveDescriptor
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|PathBasedCacheEntry
name|existing
init|=
name|entriesById
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// Remove the corresponding entry in entriesByPath.
name|String
name|path
init|=
name|existing
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PathBasedCacheEntry
argument_list|>
name|entries
init|=
name|entriesByPath
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
operator|||
operator|!
name|entries
operator|.
name|remove
argument_list|(
name|existing
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnexpectedRemovePathBasedCacheDescriptorException
argument_list|(
name|id
argument_list|)
throw|;
block|}
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|entriesByPath
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|entriesById
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// Set the path as uncached in the namesystem
try|try
block|{
name|INode
name|node
init|=
name|dir
operator|.
name|getINode
argument_list|(
name|existing
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|namesystem
operator|.
name|setCacheReplicationInt
argument_list|(
name|existing
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"removeDescriptor "
operator|+
name|id
operator|+
literal|": failure while setting cache"
operator|+
literal|" replication factor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDescriptor successful for PathCacheEntry id "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|BatchedListEntries
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
DECL|method|listPathBasedCacheDescriptors (long prevId, String filterPool, String filterPath, FSPermissionChecker pc)
name|listPathBasedCacheDescriptors
parameter_list|(
name|long
name|prevId
parameter_list|,
name|String
name|filterPool
parameter_list|,
name|String
name|filterPath
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|NUM_PRE_ALLOCATED_ENTRIES
init|=
literal|16
decl_stmt|;
if|if
condition|(
name|filterPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|filterPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid path name '"
operator|+
name|filterPath
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
name|ArrayList
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
name|replies
init|=
operator|new
name|ArrayList
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
argument_list|(
name|NUM_PRE_ALLOCATED_ENTRIES
argument_list|)
decl_stmt|;
name|int
name|numReplies
init|=
literal|0
decl_stmt|;
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
name|tailMap
init|=
name|entriesById
operator|.
name|tailMap
argument_list|(
name|prevId
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
name|cur
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|numReplies
operator|>=
name|maxListCacheDescriptorsResponses
condition|)
block|{
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
argument_list|(
name|replies
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|PathBasedCacheEntry
name|curEntry
init|=
name|cur
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|PathBasedCacheDirective
name|directive
init|=
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterPool
operator|!=
literal|null
operator|&&
operator|!
name|directive
operator|.
name|getPool
argument_list|()
operator|.
name|equals
argument_list|(
name|filterPool
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|filterPath
operator|!=
literal|null
operator|&&
operator|!
name|directive
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|filterPath
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pc
operator|.
name|checkPermission
argument_list|(
name|curEntry
operator|.
name|getPool
argument_list|()
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
condition|)
block|{
name|replies
operator|.
name|add
argument_list|(
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|getDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|numReplies
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
argument_list|(
name|replies
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create a cache pool.    *     * Only the superuser should be able to call this function.    *     * @param info The info for the cache pool to create.    * @return the created CachePool    */
DECL|method|addCachePool (CachePoolInfo info)
specifier|public
specifier|synchronized
name|CachePool
name|addCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|CachePoolInfo
operator|.
name|validate
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|String
name|poolName
init|=
name|info
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cache pool "
operator|+
name|poolName
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
name|CachePool
name|cachePool
init|=
operator|new
name|CachePool
argument_list|(
name|poolName
argument_list|,
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|,
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
decl_stmt|;
name|unprotectedAddCachePool
argument_list|(
name|cachePool
argument_list|)
expr_stmt|;
return|return
name|cachePool
return|;
block|}
comment|/**    * Internal unchecked method used to add a CachePool. Called directly when    * reloading CacheManager state from the FSImage or edit log.    *     * @param pool to be added    */
DECL|method|unprotectedAddCachePool (CachePool pool)
name|void
name|unprotectedAddCachePool
parameter_list|(
name|CachePool
name|pool
parameter_list|)
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|cachePools
operator|.
name|put
argument_list|(
name|pool
operator|.
name|getPoolName
argument_list|()
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"created new cache pool "
operator|+
name|pool
argument_list|)
expr_stmt|;
block|}
comment|/**    * Modify a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param info    *          The info for the cache pool to modify.    */
DECL|method|modifyCachePool (CachePoolInfo info)
specifier|public
specifier|synchronized
name|void
name|modifyCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|CachePoolInfo
operator|.
name|validate
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|String
name|poolName
init|=
name|info
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cache pool "
operator|+
name|poolName
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getOwnerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setOwnerName
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set owner to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getGroupName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setGroupName
argument_list|(
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set group to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setMode
argument_list|(
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set mode to "
operator|+
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getWeight
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setWeight
argument_list|(
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set weight to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"no changes."
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"modified "
operator|+
name|poolName
operator|+
literal|"; "
operator|+
name|bld
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param poolName    *          The name for the cache pool to remove.    */
DECL|method|removeCachePool (String poolName)
specifier|public
specifier|synchronized
name|void
name|removeCachePool
parameter_list|(
name|String
name|poolName
parameter_list|)
throws|throws
name|IOException
block|{
name|CachePoolInfo
operator|.
name|validateName
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|remove
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"can't remove non-existent cache pool "
operator|+
name|poolName
argument_list|)
throw|;
block|}
comment|// Remove entries using this pool
comment|// TODO: could optimize this somewhat to avoid the need to iterate
comment|// over all entries in entriesById
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
argument_list|>
name|iter
init|=
name|entriesById
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPool
argument_list|()
operator|==
name|pool
condition|)
block|{
name|entriesByPath
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|BatchedListEntries
argument_list|<
name|CachePoolInfo
argument_list|>
DECL|method|listCachePools (FSPermissionChecker pc, String prevKey)
name|listCachePools
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|,
name|String
name|prevKey
parameter_list|)
block|{
specifier|final
name|int
name|NUM_PRE_ALLOCATED_ENTRIES
init|=
literal|16
decl_stmt|;
name|ArrayList
argument_list|<
name|CachePoolInfo
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|CachePoolInfo
argument_list|>
argument_list|(
name|NUM_PRE_ALLOCATED_ENTRIES
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
name|tailMap
init|=
name|cachePools
operator|.
name|tailMap
argument_list|(
name|prevKey
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|numListed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
name|cur
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|numListed
operator|++
operator|>=
name|maxListCachePoolsResponses
condition|)
block|{
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|CachePoolInfo
argument_list|>
argument_list|(
name|results
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|pc
operator|==
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|getInfo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|getInfo
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|CachePoolInfo
argument_list|>
argument_list|(
name|results
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/*    * FSImage related serialization and deserialization code    */
comment|/**    * Saves the current state of the CacheManager to the DataOutput. Used    * to persist CacheManager state in the FSImage.    * @param out DataOutput to persist state    * @param sdPath path of the storage directory    * @throws IOException    */
DECL|method|saveState (DataOutput out, String sdPath)
specifier|public
specifier|synchronized
name|void
name|saveState
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|nextEntryId
argument_list|)
expr_stmt|;
name|savePools
argument_list|(
name|out
argument_list|,
name|sdPath
argument_list|)
expr_stmt|;
name|saveEntries
argument_list|(
name|out
argument_list|,
name|sdPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reloads CacheManager state from the passed DataInput. Used during namenode    * startup to restore CacheManager state from an FSImage.    * @param in DataInput from which to restore state    * @throws IOException    */
DECL|method|loadState (DataInput in)
specifier|public
specifier|synchronized
name|void
name|loadState
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|nextEntryId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
comment|// pools need to be loaded first since entries point to their parent pool
name|loadPools
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|loadEntries
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**    * Save cache pools to fsimage    */
DECL|method|savePools (DataOutput out, String sdPath)
specifier|private
specifier|synchronized
name|void
name|savePools
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_POOLS
argument_list|,
name|sdPath
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|,
name|cachePools
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|cachePools
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CachePool
name|pool
range|:
name|cachePools
operator|.
name|values
argument_list|()
control|)
block|{
name|pool
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
comment|/*    * Save cache entries to fsimage    */
DECL|method|saveEntries (DataOutput out, String sdPath)
specifier|private
specifier|synchronized
name|void
name|saveEntries
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_ENTRIES
argument_list|,
name|sdPath
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|,
name|entriesById
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|entriesById
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PathBasedCacheEntry
name|entry
range|:
name|entriesById
operator|.
name|values
argument_list|()
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|entry
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getPool
argument_list|()
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load cache pools from fsimage    */
DECL|method|loadPools (DataInput in)
specifier|private
specifier|synchronized
name|void
name|loadPools
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_POOLS
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|int
name|numberOfPools
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
name|numberOfPools
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfPools
condition|;
name|i
operator|++
control|)
block|{
name|CachePool
name|pool
init|=
name|CachePool
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|unprotectedAddCachePool
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load cache entries from the fsimage    */
DECL|method|loadEntries (DataInput in)
specifier|private
specifier|synchronized
name|void
name|loadEntries
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_ENTRIES
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|int
name|numberOfEntries
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
name|numberOfEntries
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|long
name|entryId
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|String
name|poolName
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// Get pool reference by looking it up in the map
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
name|PathBasedCacheEntry
name|entry
init|=
operator|new
name|PathBasedCacheEntry
argument_list|(
name|entryId
argument_list|,
name|path
argument_list|,
name|pool
argument_list|)
decl_stmt|;
name|unprotectedAddEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

