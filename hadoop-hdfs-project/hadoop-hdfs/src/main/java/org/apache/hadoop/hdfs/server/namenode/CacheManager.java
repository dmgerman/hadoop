begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PATH_BASED_CACHE_BLOCK_MAP_ALLOCATION_PERCENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PATH_BASED_CACHE_BLOCK_MAP_ALLOCATION_PERCENT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CACHING_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CACHING_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
operator|.
name|BatchedListEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
operator|.
name|Expiration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CacheDirectiveInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ClientNamenodeProtocolProtos
operator|.
name|CachePoolInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|CacheReplicationMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
operator|.
name|CachedBlocksList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
operator|.
name|CachedBlocksList
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
operator|.
name|DirOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|CacheManagerSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|NameNodeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StepType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LightWeightGSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * The Cache Manager handles caching on DataNodes.  *  * This class is instantiated by the FSNamesystem.  * It maintains the mapping of cached blocks to datanodes via processing  * datanode cache reports. Based on these reports and addition and removal of  * caching directives, we will schedule caching and uncaching work.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
DECL|class|CacheManager
specifier|public
class|class
name|CacheManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CacheManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MIN_CACHED_BLOCKS_PERCENT
specifier|private
specifier|static
specifier|final
name|float
name|MIN_CACHED_BLOCKS_PERCENT
init|=
literal|0.001f
decl_stmt|;
comment|// TODO: add pending / underCached / schedule cached blocks stats.
comment|/**    * The FSNamesystem that contains this CacheManager.    */
DECL|field|namesystem
specifier|private
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
comment|/**    * The BlockManager associated with the FSN that owns this CacheManager.    */
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
comment|/**    * Cache directives, sorted by ID.    *    * listCacheDirectives relies on the ordering of elements in this map    * to track what has already been listed by the client.    */
DECL|field|directivesById
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|CacheDirective
argument_list|>
name|directivesById
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|CacheDirective
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The directive ID to use for a new directive.  IDs always increase, and are    * never reused.    */
DECL|field|nextDirectiveId
specifier|private
name|long
name|nextDirectiveId
decl_stmt|;
comment|/**    * Cache directives, sorted by path    */
DECL|field|directivesByPath
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CacheDirective
argument_list|>
argument_list|>
name|directivesByPath
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CacheDirective
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Cache pools, sorted by name.    */
DECL|field|cachePools
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
name|cachePools
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Maximum number of cache pools to list in one operation.    */
DECL|field|maxListCachePoolsResponses
specifier|private
specifier|final
name|int
name|maxListCachePoolsResponses
decl_stmt|;
comment|/**    * Maximum number of cache pool directives to list in one operation.    */
DECL|field|maxListCacheDirectivesNumResponses
specifier|private
specifier|final
name|int
name|maxListCacheDirectivesNumResponses
decl_stmt|;
comment|/**    * Interval between scans in milliseconds.    */
DECL|field|scanIntervalMs
specifier|private
specifier|final
name|long
name|scanIntervalMs
decl_stmt|;
comment|/**    * All cached blocks.    */
DECL|field|cachedBlocks
specifier|private
specifier|final
name|GSet
argument_list|<
name|CachedBlock
argument_list|,
name|CachedBlock
argument_list|>
name|cachedBlocks
decl_stmt|;
comment|/**    * Lock which protects the CacheReplicationMonitor.    */
DECL|field|crmLock
specifier|private
specifier|final
name|ReentrantLock
name|crmLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|serializerCompat
specifier|private
specifier|final
name|SerializerCompat
name|serializerCompat
init|=
operator|new
name|SerializerCompat
argument_list|()
decl_stmt|;
comment|/**    * Whether caching is enabled.    *    * If caching is disabled, we will not process cache reports or store    * information about what is cached where.  We also do not start the    * CacheReplicationMonitor thread.  This will save resources, but provide    * less functionality.    *    * Even when caching is disabled, we still store path-based cache    * information.  This information is stored in the edit log and fsimage.  We    * don't want to lose it just because a configuration setting was turned off.    * However, we will not act on this information if caching is disabled.    */
DECL|field|enabled
specifier|private
specifier|final
name|boolean
name|enabled
decl_stmt|;
comment|/**    * The CacheReplicationMonitor.    */
DECL|field|monitor
specifier|private
name|CacheReplicationMonitor
name|monitor
decl_stmt|;
DECL|class|PersistState
specifier|public
specifier|static
specifier|final
class|class
name|PersistState
block|{
DECL|field|section
specifier|public
specifier|final
name|CacheManagerSection
name|section
decl_stmt|;
DECL|field|pools
specifier|public
specifier|final
name|List
argument_list|<
name|CachePoolInfoProto
argument_list|>
name|pools
decl_stmt|;
DECL|field|directives
specifier|public
specifier|final
name|List
argument_list|<
name|CacheDirectiveInfoProto
argument_list|>
name|directives
decl_stmt|;
DECL|method|PersistState (CacheManagerSection section, List<CachePoolInfoProto> pools, List<CacheDirectiveInfoProto> directives)
specifier|public
name|PersistState
parameter_list|(
name|CacheManagerSection
name|section
parameter_list|,
name|List
argument_list|<
name|CachePoolInfoProto
argument_list|>
name|pools
parameter_list|,
name|List
argument_list|<
name|CacheDirectiveInfoProto
argument_list|>
name|directives
parameter_list|)
block|{
name|this
operator|.
name|section
operator|=
name|section
expr_stmt|;
name|this
operator|.
name|pools
operator|=
name|pools
expr_stmt|;
name|this
operator|.
name|directives
operator|=
name|directives
expr_stmt|;
block|}
block|}
DECL|method|CacheManager (FSNamesystem namesystem, Configuration conf, BlockManager blockManager)
name|CacheManager
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|BlockManager
name|blockManager
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|blockManager
operator|=
name|blockManager
expr_stmt|;
name|this
operator|.
name|nextDirectiveId
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|enabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_NAMENODE_CACHING_ENABLED_KEY
argument_list|,
name|DFS_NAMENODE_CACHING_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxListCachePoolsResponses
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES
argument_list|,
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxListCacheDirectivesNumResponses
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES
argument_list|,
name|DFS_NAMENODE_LIST_CACHE_DIRECTIVES_NUM_RESPONSES_DEFAULT
argument_list|)
expr_stmt|;
name|scanIntervalMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS
argument_list|,
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS_DEFAULT
argument_list|)
expr_stmt|;
name|float
name|cachedBlocksPercent
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|DFS_NAMENODE_PATH_BASED_CACHE_BLOCK_MAP_ALLOCATION_PERCENT
argument_list|,
name|DFS_NAMENODE_PATH_BASED_CACHE_BLOCK_MAP_ALLOCATION_PERCENT_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedBlocksPercent
operator|<
name|MIN_CACHED_BLOCKS_PERCENT
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using minimum value {} for {}"
argument_list|,
name|MIN_CACHED_BLOCKS_PERCENT
argument_list|,
name|DFS_NAMENODE_PATH_BASED_CACHE_BLOCK_MAP_ALLOCATION_PERCENT
argument_list|)
expr_stmt|;
name|cachedBlocksPercent
operator|=
name|MIN_CACHED_BLOCKS_PERCENT
expr_stmt|;
block|}
name|this
operator|.
name|cachedBlocks
operator|=
name|enabled
condition|?
operator|new
name|LightWeightGSet
argument_list|<
name|CachedBlock
argument_list|,
name|CachedBlock
argument_list|>
argument_list|(
name|LightWeightGSet
operator|.
name|computeCapacity
argument_list|(
name|cachedBlocksPercent
argument_list|,
literal|"cachedBlocks"
argument_list|)
argument_list|)
else|:
operator|new
name|LightWeightGSet
argument_list|<>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
comment|/**    * Resets all tracked directives and pools. Called during 2NN checkpointing to    * reset FSNamesystem state. See {@link FSNamesystem#clear()}.    */
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|directivesById
operator|.
name|clear
argument_list|()
expr_stmt|;
name|directivesByPath
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cachePools
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nextDirectiveId
operator|=
literal|1
expr_stmt|;
block|}
DECL|method|startMonitorThread ()
specifier|public
name|void
name|startMonitorThread
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not starting CacheReplicationMonitor as name-node caching"
operator|+
literal|" is disabled."
argument_list|)
expr_stmt|;
return|return;
block|}
name|crmLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|monitor
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|monitor
operator|=
operator|new
name|CacheReplicationMonitor
argument_list|(
name|namesystem
argument_list|,
name|this
argument_list|,
name|scanIntervalMs
argument_list|,
name|crmLock
argument_list|)
expr_stmt|;
name|this
operator|.
name|monitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|crmLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopMonitorThread ()
specifier|public
name|void
name|stopMonitorThread
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|crmLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|monitor
operator|!=
literal|null
condition|)
block|{
name|CacheReplicationMonitor
name|prevMonitor
init|=
name|this
operator|.
name|monitor
decl_stmt|;
name|this
operator|.
name|monitor
operator|=
literal|null
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|prevMonitor
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|crmLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clearDirectiveStats ()
specifier|public
name|void
name|clearDirectiveStats
parameter_list|()
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
for|for
control|(
name|CacheDirective
name|directive
range|:
name|directivesById
operator|.
name|values
argument_list|()
control|)
block|{
name|directive
operator|.
name|resetStatistics
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return Unmodifiable view of the collection of CachePools.    */
DECL|method|getCachePools ()
specifier|public
name|Collection
argument_list|<
name|CachePool
argument_list|>
name|getCachePools
parameter_list|()
block|{
assert|assert
name|namesystem
operator|.
name|hasReadLock
argument_list|()
assert|;
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|cachePools
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return Unmodifiable view of the collection of CacheDirectives.    */
DECL|method|getCacheDirectives ()
specifier|public
name|Collection
argument_list|<
name|CacheDirective
argument_list|>
name|getCacheDirectives
parameter_list|()
block|{
assert|assert
name|namesystem
operator|.
name|hasReadLock
argument_list|()
assert|;
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|directivesById
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCachedBlocks ()
specifier|public
name|GSet
argument_list|<
name|CachedBlock
argument_list|,
name|CachedBlock
argument_list|>
name|getCachedBlocks
parameter_list|()
block|{
assert|assert
name|namesystem
operator|.
name|hasReadLock
argument_list|()
assert|;
return|return
name|cachedBlocks
return|;
block|}
DECL|method|getNextDirectiveId ()
specifier|private
name|long
name|getNextDirectiveId
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
if|if
condition|(
name|nextDirectiveId
operator|>=
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No more available IDs."
argument_list|)
throw|;
block|}
return|return
name|nextDirectiveId
operator|++
return|;
block|}
comment|// Helper getter / validation methods
DECL|method|checkWritePermission (FSPermissionChecker pc, CachePool pool)
specifier|private
specifier|static
name|void
name|checkWritePermission
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|,
name|CachePool
name|pool
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
operator|(
name|pc
operator|!=
literal|null
operator|)
condition|)
block|{
name|pc
operator|.
name|checkPermission
argument_list|(
name|pool
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validatePoolName (CacheDirectiveInfo directive)
specifier|private
specifier|static
name|String
name|validatePoolName
parameter_list|(
name|CacheDirectiveInfo
name|directive
parameter_list|)
throws|throws
name|InvalidRequestException
block|{
name|String
name|pool
init|=
name|directive
operator|.
name|getPool
argument_list|()
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"No pool specified."
argument_list|)
throw|;
block|}
if|if
condition|(
name|pool
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Invalid empty pool name."
argument_list|)
throw|;
block|}
return|return
name|pool
return|;
block|}
DECL|method|validatePath (CacheDirectiveInfo directive)
specifier|private
specifier|static
name|String
name|validatePath
parameter_list|(
name|CacheDirectiveInfo
name|directive
parameter_list|)
throws|throws
name|InvalidRequestException
block|{
if|if
condition|(
name|directive
operator|.
name|getPath
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"No path specified."
argument_list|)
throw|;
block|}
name|String
name|path
init|=
name|directive
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Invalid path '"
operator|+
name|path
operator|+
literal|"'."
argument_list|)
throw|;
block|}
return|return
name|path
return|;
block|}
DECL|method|validateReplication (CacheDirectiveInfo directive, short defaultValue)
specifier|private
specifier|static
name|short
name|validateReplication
parameter_list|(
name|CacheDirectiveInfo
name|directive
parameter_list|,
name|short
name|defaultValue
parameter_list|)
throws|throws
name|InvalidRequestException
block|{
name|short
name|repl
init|=
operator|(
name|directive
operator|.
name|getReplication
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|directive
operator|.
name|getReplication
argument_list|()
else|:
name|defaultValue
decl_stmt|;
if|if
condition|(
name|repl
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Invalid replication factor "
operator|+
name|repl
operator|+
literal|"<= 0"
argument_list|)
throw|;
block|}
return|return
name|repl
return|;
block|}
comment|/**    * Calculates the absolute expiry time of the directive from the    * {@link CacheDirectiveInfo.Expiration}. This converts a relative Expiration    * into an absolute time based on the local clock.    *     * @param info to validate.    * @param maxRelativeExpiryTime of the info's pool.    * @return the expiration time, or the pool's max absolute expiration if the    *         info's expiration was not set.    * @throws InvalidRequestException if the info's Expiration is invalid.    */
DECL|method|validateExpiryTime (CacheDirectiveInfo info, long maxRelativeExpiryTime)
specifier|private
specifier|static
name|long
name|validateExpiryTime
parameter_list|(
name|CacheDirectiveInfo
name|info
parameter_list|,
name|long
name|maxRelativeExpiryTime
parameter_list|)
throws|throws
name|InvalidRequestException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Validating directive {} pool maxRelativeExpiryTime {}"
argument_list|,
name|info
argument_list|,
name|maxRelativeExpiryTime
argument_list|)
expr_stmt|;
specifier|final
name|long
name|now
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
specifier|final
name|long
name|maxAbsoluteExpiryTime
init|=
name|now
operator|+
name|maxRelativeExpiryTime
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|getExpiration
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|maxAbsoluteExpiryTime
return|;
block|}
name|Expiration
name|expiry
init|=
name|info
operator|.
name|getExpiration
argument_list|()
decl_stmt|;
if|if
condition|(
name|expiry
operator|.
name|getMillis
argument_list|()
operator|<
literal|0l
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Cannot set a negative expiration: "
operator|+
name|expiry
operator|.
name|getMillis
argument_list|()
argument_list|)
throw|;
block|}
name|long
name|relExpiryTime
decl_stmt|,
name|absExpiryTime
decl_stmt|;
if|if
condition|(
name|expiry
operator|.
name|isRelative
argument_list|()
condition|)
block|{
name|relExpiryTime
operator|=
name|expiry
operator|.
name|getMillis
argument_list|()
expr_stmt|;
name|absExpiryTime
operator|=
name|now
operator|+
name|relExpiryTime
expr_stmt|;
block|}
else|else
block|{
name|absExpiryTime
operator|=
name|expiry
operator|.
name|getMillis
argument_list|()
expr_stmt|;
name|relExpiryTime
operator|=
name|absExpiryTime
operator|-
name|now
expr_stmt|;
block|}
comment|// Need to cap the expiry so we don't overflow a long when doing math
if|if
condition|(
name|relExpiryTime
operator|>
name|Expiration
operator|.
name|MAX_RELATIVE_EXPIRY_MS
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Expiration "
operator|+
name|expiry
operator|.
name|toString
argument_list|()
operator|+
literal|" is too far in the future!"
argument_list|)
throw|;
block|}
comment|// Fail if the requested expiry is greater than the max
if|if
condition|(
name|relExpiryTime
operator|>
name|maxRelativeExpiryTime
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Expiration "
operator|+
name|expiry
operator|.
name|toString
argument_list|()
operator|+
literal|" exceeds the max relative expiration time of "
operator|+
name|maxRelativeExpiryTime
operator|+
literal|" ms."
argument_list|)
throw|;
block|}
return|return
name|absExpiryTime
return|;
block|}
comment|/**    * Throws an exception if the CachePool does not have enough capacity to    * cache the given path at the replication factor.    *    * @param pool CachePool where the path is being cached    * @param path Path that is being cached    * @param replication Replication factor of the path    * @throws InvalidRequestException if the pool does not have enough capacity    */
DECL|method|checkLimit (CachePool pool, String path, short replication)
specifier|private
name|void
name|checkLimit
parameter_list|(
name|CachePool
name|pool
parameter_list|,
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|InvalidRequestException
block|{
name|CacheDirectiveStats
name|stats
init|=
name|computeNeeded
argument_list|(
name|path
argument_list|,
name|replication
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|.
name|getLimit
argument_list|()
operator|==
name|CachePoolInfo
operator|.
name|LIMIT_UNLIMITED
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pool
operator|.
name|getBytesNeeded
argument_list|()
operator|+
name|stats
operator|.
name|getBytesNeeded
argument_list|()
operator|>
name|pool
operator|.
name|getLimit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Caching path "
operator|+
name|path
operator|+
literal|" of size "
operator|+
name|stats
operator|.
name|getBytesNeeded
argument_list|()
operator|/
name|replication
operator|+
literal|" bytes at replication "
operator|+
name|replication
operator|+
literal|" would exceed pool "
operator|+
name|pool
operator|.
name|getPoolName
argument_list|()
operator|+
literal|"'s remaining capacity of "
operator|+
operator|(
name|pool
operator|.
name|getLimit
argument_list|()
operator|-
name|pool
operator|.
name|getBytesNeeded
argument_list|()
operator|)
operator|+
literal|" bytes."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Computes the needed number of bytes and files for a path.    * @return CacheDirectiveStats describing the needed stats for this path    */
DECL|method|computeNeeded (String path, short replication)
specifier|private
name|CacheDirectiveStats
name|computeNeeded
parameter_list|(
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|)
block|{
name|FSDirectory
name|fsDir
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
decl_stmt|;
name|INode
name|node
decl_stmt|;
name|long
name|requestedBytes
init|=
literal|0
decl_stmt|;
name|long
name|requestedFiles
init|=
literal|0
decl_stmt|;
name|CacheDirectiveStats
operator|.
name|Builder
name|builder
init|=
operator|new
name|CacheDirectiveStats
operator|.
name|Builder
argument_list|()
decl_stmt|;
try|try
block|{
name|node
operator|=
name|fsDir
operator|.
name|getINode
argument_list|(
name|path
argument_list|,
name|DirOp
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We don't cache through invalid paths
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|node
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|requestedFiles
operator|=
literal|1
expr_stmt|;
name|INodeFile
name|file
init|=
name|node
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|requestedBytes
operator|=
name|file
operator|.
name|computeFileSize
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|INodeDirectory
name|dir
init|=
name|node
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
init|=
name|dir
operator|.
name|getChildrenList
argument_list|(
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
name|requestedFiles
operator|=
name|children
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|requestedBytes
operator|+=
name|child
operator|.
name|asFile
argument_list|()
operator|.
name|computeFileSize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|CacheDirectiveStats
operator|.
name|Builder
argument_list|()
operator|.
name|setBytesNeeded
argument_list|(
name|requestedBytes
operator|*
name|replication
argument_list|)
operator|.
name|setFilesCached
argument_list|(
name|requestedFiles
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get a CacheDirective by ID, validating the ID and that the directive    * exists.    */
DECL|method|getById (long id)
specifier|private
name|CacheDirective
name|getById
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|InvalidRequestException
block|{
comment|// Check for invalid IDs.
if|if
condition|(
name|id
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Invalid negative ID."
argument_list|)
throw|;
block|}
comment|// Find the directive.
name|CacheDirective
name|directive
init|=
name|directivesById
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|directive
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"No directive with ID "
operator|+
name|id
operator|+
literal|" found."
argument_list|)
throw|;
block|}
return|return
name|directive
return|;
block|}
comment|/**    * Get a CachePool by name, validating that it exists.    */
DECL|method|getCachePool (String poolName)
specifier|private
name|CachePool
name|getCachePool
parameter_list|(
name|String
name|poolName
parameter_list|)
throws|throws
name|InvalidRequestException
block|{
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Unknown pool "
operator|+
name|poolName
argument_list|)
throw|;
block|}
return|return
name|pool
return|;
block|}
comment|// RPC handlers
DECL|method|addInternal (CacheDirective directive, CachePool pool)
specifier|private
name|void
name|addInternal
parameter_list|(
name|CacheDirective
name|directive
parameter_list|,
name|CachePool
name|pool
parameter_list|)
block|{
name|boolean
name|addedDirective
init|=
name|pool
operator|.
name|getDirectiveList
argument_list|()
operator|.
name|add
argument_list|(
name|directive
argument_list|)
decl_stmt|;
assert|assert
name|addedDirective
assert|;
name|directivesById
operator|.
name|put
argument_list|(
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|directive
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|directive
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CacheDirective
argument_list|>
name|directives
init|=
name|directivesByPath
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|directives
operator|==
literal|null
condition|)
block|{
name|directives
operator|=
operator|new
name|ArrayList
argument_list|<
name|CacheDirective
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|directivesByPath
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|directives
argument_list|)
expr_stmt|;
block|}
name|directives
operator|.
name|add
argument_list|(
name|directive
argument_list|)
expr_stmt|;
comment|// Fix up pool stats
name|CacheDirectiveStats
name|stats
init|=
name|computeNeeded
argument_list|(
name|directive
operator|.
name|getPath
argument_list|()
argument_list|,
name|directive
operator|.
name|getReplication
argument_list|()
argument_list|)
decl_stmt|;
name|directive
operator|.
name|addBytesNeeded
argument_list|(
name|stats
operator|.
name|getBytesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|directive
operator|.
name|addFilesNeeded
argument_list|(
name|directive
operator|.
name|getFilesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setNeedsRescan
argument_list|()
expr_stmt|;
block|}
comment|/**    * Adds a directive, skipping most error checking. This should only be called    * internally in special scenarios like edit log replay.    */
DECL|method|addDirectiveFromEditLog (CacheDirectiveInfo directive)
name|CacheDirectiveInfo
name|addDirectiveFromEditLog
parameter_list|(
name|CacheDirectiveInfo
name|directive
parameter_list|)
throws|throws
name|InvalidRequestException
block|{
name|long
name|id
init|=
name|directive
operator|.
name|getId
argument_list|()
decl_stmt|;
name|CacheDirective
name|entry
init|=
operator|new
name|CacheDirective
argument_list|(
name|directive
argument_list|)
decl_stmt|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
decl_stmt|;
name|addInternal
argument_list|(
name|entry
argument_list|,
name|pool
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextDirectiveId
operator|<=
name|id
condition|)
block|{
name|nextDirectiveId
operator|=
name|id
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|entry
operator|.
name|toInfo
argument_list|()
return|;
block|}
DECL|method|addDirective ( CacheDirectiveInfo info, FSPermissionChecker pc, EnumSet<CacheFlag> flags)
specifier|public
name|CacheDirectiveInfo
name|addDirective
parameter_list|(
name|CacheDirectiveInfo
name|info
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|CacheDirective
name|directive
decl_stmt|;
try|try
block|{
name|CachePool
name|pool
init|=
name|getCachePool
argument_list|(
name|validatePoolName
argument_list|(
name|info
argument_list|)
argument_list|)
decl_stmt|;
name|checkWritePermission
argument_list|(
name|pc
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|validatePath
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|short
name|replication
init|=
name|validateReplication
argument_list|(
name|info
argument_list|,
name|pool
operator|.
name|getDefaultReplication
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|expiryTime
init|=
name|validateExpiryTime
argument_list|(
name|info
argument_list|,
name|pool
operator|.
name|getMaxRelativeExpiryMs
argument_list|()
argument_list|)
decl_stmt|;
comment|// Do quota validation if required
if|if
condition|(
operator|!
name|flags
operator|.
name|contains
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
condition|)
block|{
name|checkLimit
argument_list|(
name|pool
argument_list|,
name|path
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
comment|// All validation passed
comment|// Add a new entry with the next available ID.
name|long
name|id
init|=
name|getNextDirectiveId
argument_list|()
decl_stmt|;
name|directive
operator|=
operator|new
name|CacheDirective
argument_list|(
name|id
argument_list|,
name|path
argument_list|,
name|replication
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
name|addInternal
argument_list|(
name|directive
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"addDirective of "
operator|+
name|info
operator|+
literal|" failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective of {} successful."
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
name|directive
operator|.
name|toInfo
argument_list|()
return|;
block|}
comment|/**    * Factory method that makes a new CacheDirectiveInfo by applying fields in a    * CacheDirectiveInfo to an existing CacheDirective.    *     * @param info with some or all fields set.    * @param defaults directive providing default values for unset fields in    *          info.    *     * @return new CacheDirectiveInfo of the info applied to the defaults.    */
DECL|method|createFromInfoAndDefaults ( CacheDirectiveInfo info, CacheDirective defaults)
specifier|private
specifier|static
name|CacheDirectiveInfo
name|createFromInfoAndDefaults
parameter_list|(
name|CacheDirectiveInfo
name|info
parameter_list|,
name|CacheDirective
name|defaults
parameter_list|)
block|{
comment|// Initialize the builder with the default values
name|CacheDirectiveInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|defaults
operator|.
name|toInfo
argument_list|()
argument_list|)
decl_stmt|;
comment|// Replace default with new value if present
if|if
condition|(
name|info
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPath
argument_list|(
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getReplication
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setReplication
argument_list|(
name|info
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPool
argument_list|(
name|info
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getExpiration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setExpiration
argument_list|(
name|info
operator|.
name|getExpiration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Modifies a directive, skipping most error checking. This is for careful    * internal use only. modifyDirective can be non-deterministic since its error    * checking depends on current system time, which poses a problem for edit log    * replay.    */
DECL|method|modifyDirectiveFromEditLog (CacheDirectiveInfo info)
name|void
name|modifyDirectiveFromEditLog
parameter_list|(
name|CacheDirectiveInfo
name|info
parameter_list|)
throws|throws
name|InvalidRequestException
block|{
comment|// Check for invalid IDs.
name|Long
name|id
init|=
name|info
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Must supply an ID."
argument_list|)
throw|;
block|}
name|CacheDirective
name|prevEntry
init|=
name|getById
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|CacheDirectiveInfo
name|newInfo
init|=
name|createFromInfoAndDefaults
argument_list|(
name|info
argument_list|,
name|prevEntry
argument_list|)
decl_stmt|;
name|removeInternal
argument_list|(
name|prevEntry
argument_list|)
expr_stmt|;
name|addInternal
argument_list|(
operator|new
name|CacheDirective
argument_list|(
name|newInfo
argument_list|)
argument_list|,
name|getCachePool
argument_list|(
name|newInfo
operator|.
name|getPool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|modifyDirective (CacheDirectiveInfo info, FSPermissionChecker pc, EnumSet<CacheFlag> flags)
specifier|public
name|void
name|modifyDirective
parameter_list|(
name|CacheDirectiveInfo
name|info
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|String
name|idString
init|=
operator|(
name|info
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|"(null)"
else|:
name|info
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Check for invalid IDs.
name|Long
name|id
init|=
name|info
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Must supply an ID."
argument_list|)
throw|;
block|}
name|CacheDirective
name|prevEntry
init|=
name|getById
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|checkWritePermission
argument_list|(
name|pc
argument_list|,
name|prevEntry
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fill in defaults
name|CacheDirectiveInfo
name|infoWithDefaults
init|=
name|createFromInfoAndDefaults
argument_list|(
name|info
argument_list|,
name|prevEntry
argument_list|)
decl_stmt|;
name|CacheDirectiveInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|CacheDirectiveInfo
operator|.
name|Builder
argument_list|(
name|infoWithDefaults
argument_list|)
decl_stmt|;
comment|// Do validation
name|validatePath
argument_list|(
name|infoWithDefaults
argument_list|)
expr_stmt|;
name|validateReplication
argument_list|(
name|infoWithDefaults
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Need to test the pool being set here to avoid rejecting a modify for a
comment|// directive that's already been forced into a pool
name|CachePool
name|srcPool
init|=
name|prevEntry
operator|.
name|getPool
argument_list|()
decl_stmt|;
name|CachePool
name|destPool
init|=
name|getCachePool
argument_list|(
name|validatePoolName
argument_list|(
name|infoWithDefaults
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|srcPool
operator|.
name|getPoolName
argument_list|()
operator|.
name|equals
argument_list|(
name|destPool
operator|.
name|getPoolName
argument_list|()
argument_list|)
condition|)
block|{
name|checkWritePermission
argument_list|(
name|pc
argument_list|,
name|destPool
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|flags
operator|.
name|contains
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
condition|)
block|{
name|checkLimit
argument_list|(
name|destPool
argument_list|,
name|infoWithDefaults
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|infoWithDefaults
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verify the expiration against the destination pool
name|validateExpiryTime
argument_list|(
name|infoWithDefaults
argument_list|,
name|destPool
operator|.
name|getMaxRelativeExpiryMs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Indicate changes to the CRM
name|setNeedsRescan
argument_list|()
expr_stmt|;
comment|// Validation passed
name|removeInternal
argument_list|(
name|prevEntry
argument_list|)
expr_stmt|;
name|addInternal
argument_list|(
operator|new
name|CacheDirective
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|destPool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"modifyDirective of "
operator|+
name|idString
operator|+
literal|" failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"modifyDirective of {} successfully applied {}."
argument_list|,
name|idString
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|removeInternal (CacheDirective directive)
specifier|private
name|void
name|removeInternal
parameter_list|(
name|CacheDirective
name|directive
parameter_list|)
throws|throws
name|InvalidRequestException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
comment|// Remove the corresponding entry in directivesByPath.
name|String
name|path
init|=
name|directive
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CacheDirective
argument_list|>
name|directives
init|=
name|directivesByPath
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|directives
operator|==
literal|null
operator|||
operator|!
name|directives
operator|.
name|remove
argument_list|(
name|directive
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Failed to locate entry "
operator|+
name|directive
operator|.
name|getId
argument_list|()
operator|+
literal|" by path "
operator|+
name|directive
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|directives
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|directivesByPath
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// Fix up the stats from removing the pool
specifier|final
name|CachePool
name|pool
init|=
name|directive
operator|.
name|getPool
argument_list|()
decl_stmt|;
name|directive
operator|.
name|addBytesNeeded
argument_list|(
operator|-
name|directive
operator|.
name|getBytesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|directive
operator|.
name|addFilesNeeded
argument_list|(
operator|-
name|directive
operator|.
name|getFilesNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|directivesById
operator|.
name|remove
argument_list|(
name|directive
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|getDirectiveList
argument_list|()
operator|.
name|remove
argument_list|(
name|directive
argument_list|)
expr_stmt|;
assert|assert
name|directive
operator|.
name|getPool
argument_list|()
operator|==
literal|null
assert|;
name|setNeedsRescan
argument_list|()
expr_stmt|;
block|}
DECL|method|removeDirective (long id, FSPermissionChecker pc)
specifier|public
name|void
name|removeDirective
parameter_list|(
name|long
name|id
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
try|try
block|{
name|CacheDirective
name|directive
init|=
name|getById
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|checkWritePermission
argument_list|(
name|pc
argument_list|,
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|removeInternal
argument_list|(
name|directive
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"removeDirective of "
operator|+
name|id
operator|+
literal|" failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDirective of "
operator|+
name|id
operator|+
literal|" successful."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BatchedListEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
DECL|method|listCacheDirectives (long prevId, CacheDirectiveInfo filter, FSPermissionChecker pc)
name|listCacheDirectives
parameter_list|(
name|long
name|prevId
parameter_list|,
name|CacheDirectiveInfo
name|filter
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasReadLock
argument_list|()
assert|;
specifier|final
name|int
name|NUM_PRE_ALLOCATED_ENTRIES
init|=
literal|16
decl_stmt|;
name|String
name|filterPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filterPath
operator|=
name|validatePath
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|.
name|getReplication
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Filtering by replication is unsupported."
argument_list|)
throw|;
block|}
comment|// Querying for a single ID
specifier|final
name|Long
name|id
init|=
name|filter
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|directivesById
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Did not find requested id "
operator|+
name|id
argument_list|)
throw|;
block|}
comment|// Since we use a tailMap on directivesById, setting prev to id-1 gets
comment|// us the directive with the id (if present)
name|prevId
operator|=
name|id
operator|-
literal|1
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|replies
init|=
operator|new
name|ArrayList
argument_list|<
name|CacheDirectiveEntry
argument_list|>
argument_list|(
name|NUM_PRE_ALLOCATED_ENTRIES
argument_list|)
decl_stmt|;
name|int
name|numReplies
init|=
literal|0
decl_stmt|;
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|CacheDirective
argument_list|>
name|tailMap
init|=
name|directivesById
operator|.
name|tailMap
argument_list|(
name|prevId
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|CacheDirective
argument_list|>
name|cur
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|numReplies
operator|>=
name|maxListCacheDirectivesNumResponses
condition|)
block|{
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
argument_list|(
name|replies
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|CacheDirective
name|curDirective
init|=
name|cur
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|CacheDirectiveInfo
name|info
init|=
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|toInfo
argument_list|()
decl_stmt|;
comment|// If the requested ID is present, it should be the first item.
comment|// Hitting this case means the ID is not present, or we're on the second
comment|// item and should break out.
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|info
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|filter
operator|.
name|getPool
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|info
operator|.
name|getPool
argument_list|()
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getPool
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|filterPath
operator|!=
literal|null
operator|&&
operator|!
name|info
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|filterPath
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|boolean
name|hasPermission
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|pc
operator|.
name|checkPermission
argument_list|(
name|curDirective
operator|.
name|getPool
argument_list|()
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|hasPermission
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasPermission
condition|)
block|{
name|replies
operator|.
name|add
argument_list|(
operator|new
name|CacheDirectiveEntry
argument_list|(
name|info
argument_list|,
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|toStats
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|numReplies
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
argument_list|(
name|replies
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param info    The info for the cache pool to create.    * @return        Information about the cache pool we created.    */
DECL|method|addCachePool (CachePoolInfo info)
specifier|public
name|CachePoolInfo
name|addCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|CachePool
name|pool
decl_stmt|;
try|try
block|{
name|CachePoolInfo
operator|.
name|validate
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|String
name|poolName
init|=
name|info
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
name|pool
operator|=
name|cachePools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Cache pool "
operator|+
name|poolName
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
name|pool
operator|=
name|CachePool
operator|.
name|createFromInfoAndDefaults
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|cachePools
operator|.
name|put
argument_list|(
name|pool
operator|.
name|getPoolName
argument_list|()
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addCachePool of "
operator|+
name|info
operator|+
literal|" failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"addCachePool of {} successful."
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
name|pool
operator|.
name|getInfo
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**    * Modify a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param info    *          The info for the cache pool to modify.    */
DECL|method|modifyCachePool (CachePoolInfo info)
specifier|public
name|void
name|modifyCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|CachePoolInfo
operator|.
name|validate
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|String
name|poolName
init|=
name|info
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Cache pool "
operator|+
name|poolName
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getOwnerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setOwnerName
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set owner to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getGroupName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setGroupName
argument_list|(
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set group to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setMode
argument_list|(
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set mode to "
operator|+
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setLimit
argument_list|(
name|info
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set limit to "
operator|+
name|info
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
comment|// New limit changes stats, need to set needs refresh
name|setNeedsRescan
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getDefaultReplication
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|short
name|defaultReplication
init|=
name|info
operator|.
name|getDefaultReplication
argument_list|()
decl_stmt|;
name|pool
operator|.
name|setDefaultReplication
argument_list|(
name|defaultReplication
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set default replication to "
operator|+
name|defaultReplication
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getMaxRelativeExpiryMs
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Long
name|maxRelativeExpiry
init|=
name|info
operator|.
name|getMaxRelativeExpiryMs
argument_list|()
decl_stmt|;
name|pool
operator|.
name|setMaxRelativeExpiryMs
argument_list|(
name|maxRelativeExpiry
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set maxRelativeExpiry to "
operator|+
name|maxRelativeExpiry
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"no changes."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"modifyCachePool of "
operator|+
name|info
operator|+
literal|" failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"modifyCachePool of {} successful; {}"
argument_list|,
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|,
name|bld
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param poolName    *          The name for the cache pool to remove.    */
DECL|method|removeCachePool (String poolName)
specifier|public
name|void
name|removeCachePool
parameter_list|(
name|String
name|poolName
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
try|try
block|{
name|CachePoolInfo
operator|.
name|validateName
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|remove
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRequestException
argument_list|(
literal|"Cannot remove non-existent cache pool "
operator|+
name|poolName
argument_list|)
throw|;
block|}
comment|// Remove all directives in this pool.
name|Iterator
argument_list|<
name|CacheDirective
argument_list|>
name|iter
init|=
name|pool
operator|.
name|getDirectiveList
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CacheDirective
name|directive
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|directivesByPath
operator|.
name|remove
argument_list|(
name|directive
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|directivesById
operator|.
name|remove
argument_list|(
name|directive
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|setNeedsRescan
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeCachePool of "
operator|+
name|poolName
operator|+
literal|" failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"removeCachePool of "
operator|+
name|poolName
operator|+
literal|" successful."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BatchedListEntries
argument_list|<
name|CachePoolEntry
argument_list|>
DECL|method|listCachePools (FSPermissionChecker pc, String prevKey)
name|listCachePools
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|,
name|String
name|prevKey
parameter_list|)
block|{
assert|assert
name|namesystem
operator|.
name|hasReadLock
argument_list|()
assert|;
specifier|final
name|int
name|NUM_PRE_ALLOCATED_ENTRIES
init|=
literal|16
decl_stmt|;
name|ArrayList
argument_list|<
name|CachePoolEntry
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|CachePoolEntry
argument_list|>
argument_list|(
name|NUM_PRE_ALLOCATED_ENTRIES
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
name|tailMap
init|=
name|cachePools
operator|.
name|tailMap
argument_list|(
name|prevKey
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|numListed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
name|cur
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|numListed
operator|++
operator|>=
name|maxListCachePoolsResponses
condition|)
block|{
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|CachePoolEntry
argument_list|>
argument_list|(
name|results
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|results
operator|.
name|add
argument_list|(
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|getEntry
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|CachePoolEntry
argument_list|>
argument_list|(
name|results
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setCachedLocations (LocatedBlocks locations)
specifier|public
name|void
name|setCachedLocations
parameter_list|(
name|LocatedBlocks
name|locations
parameter_list|)
block|{
comment|// don't attempt lookups if there are no cached blocks
if|if
condition|(
name|cachedBlocks
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|LocatedBlock
name|lb
range|:
name|locations
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|setCachedLocations
argument_list|(
name|lb
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setCachedLocations (LocatedBlock block)
specifier|private
name|void
name|setCachedLocations
parameter_list|(
name|LocatedBlock
name|block
parameter_list|)
block|{
name|CachedBlock
name|cachedBlock
init|=
operator|new
name|CachedBlock
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cachedBlock
operator|=
name|cachedBlocks
operator|.
name|get
argument_list|(
name|cachedBlock
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedBlock
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|cachedDNs
init|=
name|cachedBlock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|CACHED
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|datanode
range|:
name|cachedDNs
control|)
block|{
comment|// Filter out cached blocks that do not have a backing replica.
comment|//
comment|// This should not happen since it means the CacheManager thinks
comment|// something is cached that does not exist, but it's a safety
comment|// measure.
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|loc
range|:
name|block
operator|.
name|getLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|loc
operator|.
name|equals
argument_list|(
name|datanode
argument_list|)
condition|)
block|{
name|block
operator|.
name|addCachedLoc
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Datanode {} is not a valid cache location for block {} "
operator|+
literal|"because that node does not have a backing replica!"
argument_list|,
name|datanode
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processCacheReport (final DatanodeID datanodeID, final List<Long> blockIds)
specifier|public
specifier|final
name|void
name|processCacheReport
parameter_list|(
specifier|final
name|DatanodeID
name|datanodeID
parameter_list|,
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|blockIds
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring cache report from {} because {} = false. "
operator|+
literal|"number of blocks: {}"
argument_list|,
name|datanodeID
argument_list|,
name|DFS_NAMENODE_CACHING_ENABLED_KEY
argument_list|,
name|blockIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
specifier|final
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
specifier|final
name|long
name|endTime
decl_stmt|;
try|try
block|{
specifier|final
name|DatanodeDescriptor
name|datanode
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|datanodeID
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanode
operator|==
literal|null
operator|||
operator|!
name|datanode
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"processCacheReport from dead or unregistered datanode: "
operator|+
name|datanode
argument_list|)
throw|;
block|}
name|processCacheReportImpl
argument_list|(
name|datanode
argument_list|,
name|blockIds
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|writeUnlock
argument_list|(
literal|"processCacheReport"
argument_list|)
expr_stmt|;
block|}
comment|// Log the block report processing stats from Namenode perspective
specifier|final
name|NameNodeMetrics
name|metrics
init|=
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|addCacheBlockReport
argument_list|(
call|(
name|int
call|)
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processed cache report from {}, blocks: {}, "
operator|+
literal|"processing time: {} msecs"
argument_list|,
name|datanodeID
argument_list|,
name|blockIds
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|endTime
operator|-
name|startTime
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|processCacheReportImpl (final DatanodeDescriptor datanode, final List<Long> blockIds)
specifier|private
name|void
name|processCacheReportImpl
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|datanode
parameter_list|,
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|blockIds
parameter_list|)
block|{
name|CachedBlocksList
name|cached
init|=
name|datanode
operator|.
name|getCached
argument_list|()
decl_stmt|;
name|cached
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CachedBlocksList
name|cachedList
init|=
name|datanode
operator|.
name|getCached
argument_list|()
decl_stmt|;
name|CachedBlocksList
name|pendingCachedList
init|=
name|datanode
operator|.
name|getPendingCached
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Long
argument_list|>
name|iter
init|=
name|blockIds
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|long
name|blockId
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cache report from datanode {} has block {}"
argument_list|,
name|datanode
argument_list|,
name|blockId
argument_list|)
expr_stmt|;
name|CachedBlock
name|cachedBlock
init|=
operator|new
name|CachedBlock
argument_list|(
name|blockId
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CachedBlock
name|prevCachedBlock
init|=
name|cachedBlocks
operator|.
name|get
argument_list|(
name|cachedBlock
argument_list|)
decl_stmt|;
comment|// Add the block ID from the cache report to the cachedBlocks map
comment|// if it's not already there.
if|if
condition|(
name|prevCachedBlock
operator|!=
literal|null
condition|)
block|{
name|cachedBlock
operator|=
name|prevCachedBlock
expr_stmt|;
block|}
else|else
block|{
name|cachedBlocks
operator|.
name|put
argument_list|(
name|cachedBlock
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Added block {}  to cachedBlocks"
argument_list|,
name|cachedBlock
argument_list|)
expr_stmt|;
block|}
comment|// Add the block to the datanode's implicit cached block list
comment|// if it's not already there.  Similarly, remove it from the pending
comment|// cached block list if it exists there.
if|if
condition|(
operator|!
name|cachedBlock
operator|.
name|isPresent
argument_list|(
name|cachedList
argument_list|)
condition|)
block|{
name|cachedList
operator|.
name|add
argument_list|(
name|cachedBlock
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Added block {} to CACHED list."
argument_list|,
name|cachedBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cachedBlock
operator|.
name|isPresent
argument_list|(
name|pendingCachedList
argument_list|)
condition|)
block|{
name|pendingCachedList
operator|.
name|remove
argument_list|(
name|cachedBlock
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removed block {} from PENDING_CACHED list."
argument_list|,
name|cachedBlock
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Saves the current state of the CacheManager to the DataOutput. Used    * to persist CacheManager state in the FSImage.    * @param out DataOutput to persist state    * @param sdPath path of the storage directory    * @throws IOException    */
DECL|method|saveStateCompat (DataOutputStream out, String sdPath)
specifier|public
name|void
name|saveStateCompat
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|serializerCompat
operator|.
name|save
argument_list|(
name|out
argument_list|,
name|sdPath
argument_list|)
expr_stmt|;
block|}
DECL|method|saveState ()
specifier|public
name|PersistState
name|saveState
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|CachePoolInfoProto
argument_list|>
name|pools
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|cachePools
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|CacheDirectiveInfoProto
argument_list|>
name|directives
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|directivesById
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CachePool
name|pool
range|:
name|cachePools
operator|.
name|values
argument_list|()
control|)
block|{
name|CachePoolInfo
name|p
init|=
name|pool
operator|.
name|getInfo
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|CachePoolInfoProto
operator|.
name|Builder
name|b
init|=
name|CachePoolInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPoolName
argument_list|(
name|p
operator|.
name|getPoolName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getOwnerName
argument_list|()
operator|!=
literal|null
condition|)
name|b
operator|.
name|setOwnerName
argument_list|(
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getGroupName
argument_list|()
operator|!=
literal|null
condition|)
name|b
operator|.
name|setGroupName
argument_list|(
name|p
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getMode
argument_list|()
operator|!=
literal|null
condition|)
name|b
operator|.
name|setMode
argument_list|(
name|p
operator|.
name|getMode
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
name|b
operator|.
name|setLimit
argument_list|(
name|p
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|pools
operator|.
name|add
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CacheDirective
name|directive
range|:
name|directivesById
operator|.
name|values
argument_list|()
control|)
block|{
name|CacheDirectiveInfo
name|info
init|=
name|directive
operator|.
name|toInfo
argument_list|()
decl_stmt|;
name|CacheDirectiveInfoProto
operator|.
name|Builder
name|b
init|=
name|CacheDirectiveInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|info
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setPath
argument_list|(
name|info
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getReplication
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setReplication
argument_list|(
name|info
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getPool
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|setPool
argument_list|(
name|info
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Expiration
name|expiry
init|=
name|info
operator|.
name|getExpiration
argument_list|()
decl_stmt|;
if|if
condition|(
name|expiry
operator|!=
literal|null
condition|)
block|{
assert|assert
operator|(
operator|!
name|expiry
operator|.
name|isRelative
argument_list|()
operator|)
assert|;
name|b
operator|.
name|setExpiration
argument_list|(
name|PBHelperClient
operator|.
name|convert
argument_list|(
name|expiry
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|directives
operator|.
name|add
argument_list|(
name|b
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CacheManagerSection
name|s
init|=
name|CacheManagerSection
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNextDirectiveId
argument_list|(
name|nextDirectiveId
argument_list|)
operator|.
name|setNumPools
argument_list|(
name|pools
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|setNumDirectives
argument_list|(
name|directives
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|PersistState
argument_list|(
name|s
argument_list|,
name|pools
argument_list|,
name|directives
argument_list|)
return|;
block|}
comment|/**    * Reloads CacheManager state from the passed DataInput. Used during namenode    * startup to restore CacheManager state from an FSImage.    * @param in DataInput from which to restore state    * @throws IOException    */
DECL|method|loadStateCompat (DataInput in)
specifier|public
name|void
name|loadStateCompat
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|serializerCompat
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|loadState (PersistState s)
specifier|public
name|void
name|loadState
parameter_list|(
name|PersistState
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|nextDirectiveId
operator|=
name|s
operator|.
name|section
operator|.
name|getNextDirectiveId
argument_list|()
expr_stmt|;
for|for
control|(
name|CachePoolInfoProto
name|p
range|:
name|s
operator|.
name|pools
control|)
block|{
name|CachePoolInfo
name|info
init|=
operator|new
name|CachePoolInfo
argument_list|(
name|p
operator|.
name|getPoolName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|hasOwnerName
argument_list|()
condition|)
name|info
operator|.
name|setOwnerName
argument_list|(
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|hasGroupName
argument_list|()
condition|)
name|info
operator|.
name|setGroupName
argument_list|(
name|p
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|hasMode
argument_list|()
condition|)
name|info
operator|.
name|setMode
argument_list|(
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|p
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|hasDefaultReplication
argument_list|()
condition|)
block|{
name|info
operator|.
name|setDefaultReplication
argument_list|(
operator|(
name|short
operator|)
name|p
operator|.
name|getDefaultReplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|hasLimit
argument_list|()
condition|)
name|info
operator|.
name|setLimit
argument_list|(
name|p
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|addCachePool
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CacheDirectiveInfoProto
name|p
range|:
name|s
operator|.
name|directives
control|)
block|{
comment|// Get pool reference by looking it up in the map
specifier|final
name|String
name|poolName
init|=
name|p
operator|.
name|getPool
argument_list|()
decl_stmt|;
name|CacheDirective
name|directive
init|=
operator|new
name|CacheDirective
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|p
operator|.
name|getReplication
argument_list|()
argument_list|,
name|p
operator|.
name|getExpiration
argument_list|()
operator|.
name|getMillis
argument_list|()
argument_list|)
decl_stmt|;
name|addCacheDirective
argument_list|(
name|poolName
argument_list|,
name|directive
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addCacheDirective (final String poolName, final CacheDirective directive)
specifier|private
name|void
name|addCacheDirective
parameter_list|(
specifier|final
name|String
name|poolName
parameter_list|,
specifier|final
name|CacheDirective
name|directive
parameter_list|)
throws|throws
name|IOException
block|{
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Directive refers to pool "
operator|+
name|poolName
operator|+
literal|", which does not exist."
argument_list|)
throw|;
block|}
name|boolean
name|addedDirective
init|=
name|pool
operator|.
name|getDirectiveList
argument_list|()
operator|.
name|add
argument_list|(
name|directive
argument_list|)
decl_stmt|;
assert|assert
name|addedDirective
assert|;
if|if
condition|(
name|directivesById
operator|.
name|put
argument_list|(
name|directive
operator|.
name|getId
argument_list|()
argument_list|,
name|directive
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"A directive with ID "
operator|+
name|directive
operator|.
name|getId
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|CacheDirective
argument_list|>
name|directives
init|=
name|directivesByPath
operator|.
name|get
argument_list|(
name|directive
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|directives
operator|==
literal|null
condition|)
block|{
name|directives
operator|=
operator|new
name|LinkedList
argument_list|<
name|CacheDirective
argument_list|>
argument_list|()
expr_stmt|;
name|directivesByPath
operator|.
name|put
argument_list|(
name|directive
operator|.
name|getPath
argument_list|()
argument_list|,
name|directives
argument_list|)
expr_stmt|;
block|}
name|directives
operator|.
name|add
argument_list|(
name|directive
argument_list|)
expr_stmt|;
block|}
DECL|class|SerializerCompat
specifier|private
specifier|final
class|class
name|SerializerCompat
block|{
DECL|method|save (DataOutputStream out, String sdPath)
specifier|private
name|void
name|save
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|nextDirectiveId
argument_list|)
expr_stmt|;
name|savePools
argument_list|(
name|out
argument_list|,
name|sdPath
argument_list|)
expr_stmt|;
name|saveDirectives
argument_list|(
name|out
argument_list|,
name|sdPath
argument_list|)
expr_stmt|;
block|}
DECL|method|load (DataInput in)
specifier|private
name|void
name|load
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|nextDirectiveId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
comment|// pools need to be loaded first since directives point to their parent pool
name|loadPools
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|loadDirectives
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**      * Save cache pools to fsimage      */
DECL|method|savePools (DataOutputStream out, String sdPath)
specifier|private
name|void
name|savePools
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_POOLS
argument_list|,
name|sdPath
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|,
name|cachePools
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|cachePools
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CachePool
name|pool
range|:
name|cachePools
operator|.
name|values
argument_list|()
control|)
block|{
name|FSImageSerialization
operator|.
name|writeCachePoolInfo
argument_list|(
name|out
argument_list|,
name|pool
operator|.
name|getInfo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
comment|/*      * Save cache entries to fsimage      */
DECL|method|saveDirectives (DataOutputStream out, String sdPath)
specifier|private
name|void
name|saveDirectives
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_ENTRIES
argument_list|,
name|sdPath
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|,
name|directivesById
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|directivesById
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CacheDirective
name|directive
range|:
name|directivesById
operator|.
name|values
argument_list|()
control|)
block|{
name|FSImageSerialization
operator|.
name|writeCacheDirectiveInfo
argument_list|(
name|out
argument_list|,
name|directive
operator|.
name|toInfo
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
comment|/**      * Load cache pools from fsimage      */
DECL|method|loadPools (DataInput in)
specifier|private
name|void
name|loadPools
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_POOLS
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|int
name|numberOfPools
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
name|numberOfPools
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfPools
condition|;
name|i
operator|++
control|)
block|{
name|addCachePool
argument_list|(
name|FSImageSerialization
operator|.
name|readCachePoolInfo
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
comment|/**      * Load cache directives from the fsimage      */
DECL|method|loadDirectives (DataInput in)
specifier|private
name|void
name|loadDirectives
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_ENTRIES
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|int
name|numDirectives
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
name|numDirectives
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirectives
condition|;
name|i
operator|++
control|)
block|{
name|CacheDirectiveInfo
name|info
init|=
name|FSImageSerialization
operator|.
name|readCacheDirectiveInfo
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// Get pool reference by looking it up in the map
specifier|final
name|String
name|poolName
init|=
name|info
operator|.
name|getPool
argument_list|()
decl_stmt|;
name|CacheDirective
name|directive
init|=
operator|new
name|CacheDirective
argument_list|(
name|info
operator|.
name|getId
argument_list|()
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|info
operator|.
name|getReplication
argument_list|()
argument_list|,
name|info
operator|.
name|getExpiration
argument_list|()
operator|.
name|getAbsoluteMillis
argument_list|()
argument_list|)
decl_stmt|;
name|addCacheDirective
argument_list|(
name|poolName
argument_list|,
name|directive
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForRescanIfNeeded ()
specifier|public
name|void
name|waitForRescanIfNeeded
parameter_list|()
block|{
name|crmLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|waitForRescanIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|crmLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setNeedsRescan ()
specifier|private
name|void
name|setNeedsRescan
parameter_list|()
block|{
name|crmLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|setNeedsRescan
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|crmLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCacheReplicationMonitor ()
specifier|public
name|Thread
name|getCacheReplicationMonitor
parameter_list|()
block|{
name|crmLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|monitor
return|;
block|}
finally|finally
block|{
name|crmLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

