begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CACHING_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CACHING_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS_DEFAULT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
operator|.
name|BatchedListEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockListAsLongs
operator|.
name|BlockReportIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|InvalidPoolNameError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|UnexpectedAddPathBasedCacheDirectiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathBasedCacheDirectiveException
operator|.
name|PoolWritePermissionDeniedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathBasedCacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|InvalidIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|NoSuchIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|UnexpectedRemovePathBasedCacheDescriptorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathBasedCacheDescriptorException
operator|.
name|RemovePermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|CacheReplicationMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
operator|.
name|CachedBlocksList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
operator|.
name|CachedBlocksList
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|ReplicaState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|NameNodeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StepType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LightWeightGSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * The Cache Manager handles caching on DataNodes.  *  * This class is instantiated by the FSNamesystem when caching is enabled.  * It maintains the mapping of cached blocks to datanodes via processing  * datanode cache reports. Based on these reports and addition and removal of  * caching directives, we will schedule caching and uncaching work.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
DECL|class|CacheManager
specifier|public
specifier|final
class|class
name|CacheManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CacheManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: add pending / underCached / schedule cached blocks stats.
comment|/**    * The FSNamesystem that contains this CacheManager.    */
DECL|field|namesystem
specifier|private
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
comment|/**    * The BlockManager associated with the FSN that owns this CacheManager.    */
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
comment|/**    * Cache entries, sorted by ID.    *    * listPathBasedCacheDescriptors relies on the ordering of elements in this map     * to track what has already been listed by the client.    */
DECL|field|entriesById
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
name|entriesById
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The entry ID to use for a new entry.  Entry IDs always increase, and are    * never reused.    */
DECL|field|nextEntryId
specifier|private
name|long
name|nextEntryId
decl_stmt|;
comment|/**    * Cache entries, sorted by path    */
DECL|field|entriesByPath
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PathBasedCacheEntry
argument_list|>
argument_list|>
name|entriesByPath
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PathBasedCacheEntry
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Cache pools, sorted by name.    */
DECL|field|cachePools
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
name|cachePools
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Maximum number of cache pools to list in one operation.    */
DECL|field|maxListCachePoolsResponses
specifier|private
specifier|final
name|int
name|maxListCachePoolsResponses
decl_stmt|;
comment|/**    * Maximum number of cache pool directives to list in one operation.    */
DECL|field|maxListCacheDescriptorsResponses
specifier|private
specifier|final
name|int
name|maxListCacheDescriptorsResponses
decl_stmt|;
comment|/**    * Interval between scans in milliseconds.    */
DECL|field|scanIntervalMs
specifier|private
specifier|final
name|long
name|scanIntervalMs
decl_stmt|;
comment|/**    * Whether caching is enabled.    *    * If caching is disabled, we will not process cache reports or store    * information about what is cached where.  We also do not start the    * CacheReplicationMonitor thread.  This will save resources, but provide    * less functionality.    *         * Even when caching is disabled, we still store path-based cache    * information.  This information is stored in the edit log and fsimage.  We    * don't want to lose it just because a configuration setting was turned off.    * However, we will not act on this information if caching is disabled.    */
DECL|field|enabled
specifier|private
specifier|final
name|boolean
name|enabled
decl_stmt|;
comment|/**    * Whether the CacheManager is active.    *     * When the CacheManager is active, it tells the DataNodes what to cache    * and uncache.  The CacheManager cannot become active if enabled = false.    */
DECL|field|active
specifier|private
name|boolean
name|active
init|=
literal|false
decl_stmt|;
comment|/**    * All cached blocks.    */
DECL|field|cachedBlocks
specifier|private
specifier|final
name|GSet
argument_list|<
name|CachedBlock
argument_list|,
name|CachedBlock
argument_list|>
name|cachedBlocks
decl_stmt|;
comment|/**    * The CacheReplicationMonitor.    */
DECL|field|monitor
specifier|private
name|CacheReplicationMonitor
name|monitor
decl_stmt|;
DECL|method|CacheManager (FSNamesystem namesystem, Configuration conf, BlockManager blockManager)
name|CacheManager
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|BlockManager
name|blockManager
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|blockManager
operator|=
name|blockManager
expr_stmt|;
name|this
operator|.
name|nextEntryId
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|maxListCachePoolsResponses
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES
argument_list|,
name|DFS_NAMENODE_LIST_CACHE_POOLS_NUM_RESPONSES_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxListCacheDescriptorsResponses
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES
argument_list|,
name|DFS_NAMENODE_LIST_CACHE_DESCRIPTORS_NUM_RESPONSES_DEFAULT
argument_list|)
expr_stmt|;
name|scanIntervalMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS
argument_list|,
name|DFS_NAMENODE_PATH_BASED_CACHE_REFRESH_INTERVAL_MS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|enabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_NAMENODE_CACHING_ENABLED_KEY
argument_list|,
name|DFS_NAMENODE_CACHING_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|cachedBlocks
operator|=
operator|!
name|enabled
condition|?
literal|null
else|:
operator|new
name|LightWeightGSet
argument_list|<
name|CachedBlock
argument_list|,
name|CachedBlock
argument_list|>
argument_list|(
name|LightWeightGSet
operator|.
name|computeCapacity
argument_list|(
literal|0.25
argument_list|,
literal|"cachedBlocks"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Activate the cache manager.    *     * When the cache manager is active, tell the datanodes where to cache files.    */
DECL|method|activate ()
specifier|public
name|void
name|activate
parameter_list|()
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
if|if
condition|(
name|enabled
operator|&&
operator|(
operator|!
name|active
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Activating CacheManager.  "
operator|+
literal|"Starting replication monitor thread..."
argument_list|)
expr_stmt|;
name|active
operator|=
literal|true
expr_stmt|;
name|monitor
operator|=
operator|new
name|CacheReplicationMonitor
argument_list|(
name|namesystem
argument_list|,
name|this
argument_list|,
name|scanIntervalMs
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Deactivate the cache manager.    *     * When the cache manager is inactive, it does not tell the datanodes where to    * cache files.    */
DECL|method|deactivate ()
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
if|if
condition|(
name|active
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deactivating CacheManager.  "
operator|+
literal|"stopping CacheReplicationMonitor thread..."
argument_list|)
expr_stmt|;
name|active
operator|=
literal|false
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
name|monitor
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CacheReplicationMonitor thread stopped and deactivated."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return true only if the cache manager is active.    * Must be called under the FSN read or write lock.    */
DECL|method|isActive ()
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|active
return|;
block|}
DECL|method|getEntriesById ()
specifier|public
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
name|getEntriesById
parameter_list|()
block|{
assert|assert
name|namesystem
operator|.
name|hasReadOrWriteLock
argument_list|()
assert|;
return|return
name|entriesById
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCachedBlocks ()
specifier|public
name|GSet
argument_list|<
name|CachedBlock
argument_list|,
name|CachedBlock
argument_list|>
name|getCachedBlocks
parameter_list|()
block|{
assert|assert
name|namesystem
operator|.
name|hasReadOrWriteLock
argument_list|()
assert|;
return|return
name|cachedBlocks
return|;
block|}
DECL|method|getNextEntryId ()
specifier|private
name|long
name|getNextEntryId
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
if|if
condition|(
name|nextEntryId
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No more available IDs"
argument_list|)
throw|;
block|}
return|return
name|nextEntryId
operator|++
return|;
block|}
DECL|method|addDirective ( PathBasedCacheDirective directive, FSPermissionChecker pc)
specifier|public
name|PathBasedCacheDescriptor
name|addDirective
parameter_list|(
name|PathBasedCacheDirective
name|directive
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|directive
operator|.
name|getPool
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": pool not found."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidPoolNameError
argument_list|(
name|directive
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|pc
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|pc
operator|.
name|checkPermission
argument_list|(
name|pool
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": write permission denied."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PoolWritePermissionDeniedError
argument_list|(
name|directive
argument_list|)
throw|;
block|}
try|try
block|{
name|directive
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": validation failed: "
operator|+
name|ioe
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
comment|// Add a new entry with the next available ID.
name|PathBasedCacheEntry
name|entry
decl_stmt|;
try|try
block|{
name|entry
operator|=
operator|new
name|PathBasedCacheEntry
argument_list|(
name|getNextEntryId
argument_list|()
argument_list|,
name|directive
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|directive
operator|.
name|getReplication
argument_list|()
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|UnexpectedAddPathBasedCacheDirectiveException
argument_list|(
name|directive
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": added cache directive "
operator|+
name|directive
argument_list|)
expr_stmt|;
comment|// Success!
comment|// First, add it to the various maps
name|entriesById
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|directive
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PathBasedCacheEntry
argument_list|>
name|entryList
init|=
name|entriesByPath
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryList
operator|==
literal|null
condition|)
block|{
name|entryList
operator|=
operator|new
name|ArrayList
argument_list|<
name|PathBasedCacheEntry
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|entriesByPath
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|entryList
argument_list|)
expr_stmt|;
block|}
name|entryList
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|kick
argument_list|()
expr_stmt|;
block|}
return|return
name|entry
operator|.
name|getDescriptor
argument_list|()
return|;
block|}
DECL|method|removeDescriptor (long id, FSPermissionChecker pc)
specifier|public
name|void
name|removeDescriptor
parameter_list|(
name|long
name|id
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
comment|// Check for invalid IDs.
if|if
condition|(
name|id
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDescriptor "
operator|+
name|id
operator|+
literal|": invalid non-positive "
operator|+
literal|"descriptor ID."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidIdException
argument_list|(
name|id
argument_list|)
throw|;
block|}
comment|// Find the entry.
name|PathBasedCacheEntry
name|existing
init|=
name|entriesById
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDescriptor "
operator|+
name|id
operator|+
literal|": entry not found."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchIdException
argument_list|(
name|id
argument_list|)
throw|;
block|}
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|existing
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getPool
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDescriptor "
operator|+
name|id
operator|+
literal|": pool not found for directive "
operator|+
name|existing
operator|.
name|getDescriptor
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnexpectedRemovePathBasedCacheDescriptorException
argument_list|(
name|id
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|pc
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|pc
operator|.
name|checkPermission
argument_list|(
name|pool
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDescriptor "
operator|+
name|id
operator|+
literal|": write permission denied to "
operator|+
literal|"pool "
operator|+
name|pool
operator|+
literal|" for entry "
operator|+
name|existing
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemovePermissionDeniedException
argument_list|(
name|id
argument_list|)
throw|;
block|}
comment|// Remove the corresponding entry in entriesByPath.
name|String
name|path
init|=
name|existing
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PathBasedCacheEntry
argument_list|>
name|entries
init|=
name|entriesByPath
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
operator|||
operator|!
name|entries
operator|.
name|remove
argument_list|(
name|existing
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnexpectedRemovePathBasedCacheDescriptorException
argument_list|(
name|id
argument_list|)
throw|;
block|}
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|entriesByPath
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|entriesById
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|kick
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"removeDescriptor successful for PathCacheEntry id "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BatchedListEntries
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
DECL|method|listPathBasedCacheDescriptors (long prevId, String filterPool, String filterPath, FSPermissionChecker pc)
name|listPathBasedCacheDescriptors
parameter_list|(
name|long
name|prevId
parameter_list|,
name|String
name|filterPool
parameter_list|,
name|String
name|filterPath
parameter_list|,
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasReadOrWriteLock
argument_list|()
assert|;
specifier|final
name|int
name|NUM_PRE_ALLOCATED_ENTRIES
init|=
literal|16
decl_stmt|;
if|if
condition|(
name|filterPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|filterPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid path name '"
operator|+
name|filterPath
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
name|ArrayList
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
name|replies
init|=
operator|new
name|ArrayList
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
argument_list|(
name|NUM_PRE_ALLOCATED_ENTRIES
argument_list|)
decl_stmt|;
name|int
name|numReplies
init|=
literal|0
decl_stmt|;
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
name|tailMap
init|=
name|entriesById
operator|.
name|tailMap
argument_list|(
name|prevId
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
name|cur
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|numReplies
operator|>=
name|maxListCacheDescriptorsResponses
condition|)
block|{
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
argument_list|(
name|replies
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|PathBasedCacheEntry
name|curEntry
init|=
name|cur
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|PathBasedCacheDirective
name|directive
init|=
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterPool
operator|!=
literal|null
operator|&&
operator|!
name|directive
operator|.
name|getPool
argument_list|()
operator|.
name|equals
argument_list|(
name|filterPool
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|filterPath
operator|!=
literal|null
operator|&&
operator|!
name|directive
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|filterPath
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pc
operator|.
name|checkPermission
argument_list|(
name|curEntry
operator|.
name|getPool
argument_list|()
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
condition|)
block|{
name|replies
operator|.
name|add
argument_list|(
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|getDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|numReplies
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|PathBasedCacheDescriptor
argument_list|>
argument_list|(
name|replies
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Create a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param info    The info for the cache pool to create.    * @return        Information about the cache pool we created.    */
DECL|method|addCachePool (CachePoolInfo info)
specifier|public
name|CachePoolInfo
name|addCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|CachePoolInfo
operator|.
name|validate
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|String
name|poolName
init|=
name|info
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cache pool "
operator|+
name|poolName
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
name|pool
operator|=
name|CachePool
operator|.
name|createFromInfoAndDefaults
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|cachePools
operator|.
name|put
argument_list|(
name|pool
operator|.
name|getPoolName
argument_list|()
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"created new cache pool "
operator|+
name|pool
argument_list|)
expr_stmt|;
return|return
name|pool
operator|.
name|getInfo
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**    * Modify a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param info    *          The info for the cache pool to modify.    */
DECL|method|modifyCachePool (CachePoolInfo info)
specifier|public
name|void
name|modifyCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|CachePoolInfo
operator|.
name|validate
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|String
name|poolName
init|=
name|info
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cache pool "
operator|+
name|poolName
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getOwnerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setOwnerName
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set owner to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getGroupName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setGroupName
argument_list|(
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set group to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setMode
argument_list|(
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set mode to "
operator|+
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getWeight
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|setWeight
argument_list|(
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set weight to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"no changes."
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"modified "
operator|+
name|poolName
operator|+
literal|"; "
operator|+
name|bld
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param poolName    *          The name for the cache pool to remove.    */
DECL|method|removeCachePool (String poolName)
specifier|public
name|void
name|removeCachePool
parameter_list|(
name|String
name|poolName
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|namesystem
operator|.
name|hasWriteLock
argument_list|()
assert|;
name|CachePoolInfo
operator|.
name|validateName
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|remove
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"can't remove non-existent cache pool "
operator|+
name|poolName
argument_list|)
throw|;
block|}
comment|// Remove entries using this pool
comment|// TODO: could optimize this somewhat to avoid the need to iterate
comment|// over all entries in entriesById
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
argument_list|>
name|iter
init|=
name|entriesById
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|PathBasedCacheEntry
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPool
argument_list|()
operator|==
name|pool
condition|)
block|{
name|entriesByPath
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|kick
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|BatchedListEntries
argument_list|<
name|CachePoolInfo
argument_list|>
DECL|method|listCachePools (FSPermissionChecker pc, String prevKey)
name|listCachePools
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|,
name|String
name|prevKey
parameter_list|)
block|{
assert|assert
name|namesystem
operator|.
name|hasReadOrWriteLock
argument_list|()
assert|;
specifier|final
name|int
name|NUM_PRE_ALLOCATED_ENTRIES
init|=
literal|16
decl_stmt|;
name|ArrayList
argument_list|<
name|CachePoolInfo
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|CachePoolInfo
argument_list|>
argument_list|(
name|NUM_PRE_ALLOCATED_ENTRIES
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
name|tailMap
init|=
name|cachePools
operator|.
name|tailMap
argument_list|(
name|prevKey
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|numListed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
name|cur
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|numListed
operator|++
operator|>=
name|maxListCachePoolsResponses
condition|)
block|{
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|CachePoolInfo
argument_list|>
argument_list|(
name|results
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|pc
operator|==
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|getInfo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
name|cur
operator|.
name|getValue
argument_list|()
operator|.
name|getInfo
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BatchedListEntries
argument_list|<
name|CachePoolInfo
argument_list|>
argument_list|(
name|results
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setCachedLocations (LocatedBlock block)
specifier|public
name|void
name|setCachedLocations
parameter_list|(
name|LocatedBlock
name|block
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|CachedBlock
name|cachedBlock
init|=
operator|new
name|CachedBlock
argument_list|(
name|block
operator|.
name|getBlock
argument_list|()
operator|.
name|getBlockId
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cachedBlock
operator|=
name|cachedBlocks
operator|.
name|get
argument_list|(
name|cachedBlock
argument_list|)
expr_stmt|;
if|if
condition|(
name|cachedBlock
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|datanodes
init|=
name|cachedBlock
operator|.
name|getDatanodes
argument_list|(
name|Type
operator|.
name|CACHED
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|datanode
range|:
name|datanodes
control|)
block|{
name|block
operator|.
name|addCachedLoc
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processCacheReport (final DatanodeID datanodeID, final BlockListAsLongs report)
specifier|public
specifier|final
name|void
name|processCacheReport
parameter_list|(
specifier|final
name|DatanodeID
name|datanodeID
parameter_list|,
specifier|final
name|BlockListAsLongs
name|report
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring cache report from "
operator|+
name|datanodeID
operator|+
literal|" because "
operator|+
name|DFS_NAMENODE_CACHING_ENABLED_KEY
operator|+
literal|" = false. "
operator|+
literal|"number of blocks: "
operator|+
name|report
operator|.
name|getNumberOfBlocks
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
specifier|final
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
specifier|final
name|long
name|endTime
decl_stmt|;
try|try
block|{
specifier|final
name|DatanodeDescriptor
name|datanode
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|datanodeID
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanode
operator|==
literal|null
operator|||
operator|!
name|datanode
operator|.
name|isAlive
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"processCacheReport from dead or unregistered datanode: "
operator|+
name|datanode
argument_list|)
throw|;
block|}
name|processCacheReportImpl
argument_list|(
name|datanode
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
comment|// Log the block report processing stats from Namenode perspective
specifier|final
name|NameNodeMetrics
name|metrics
init|=
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|addCacheBlockReport
argument_list|(
call|(
name|int
call|)
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed cache report from "
operator|+
name|datanodeID
operator|+
literal|", blocks: "
operator|+
name|report
operator|.
name|getNumberOfBlocks
argument_list|()
operator|+
literal|", processing time: "
operator|+
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|+
literal|" msecs"
argument_list|)
expr_stmt|;
block|}
DECL|method|processCacheReportImpl (final DatanodeDescriptor datanode, final BlockListAsLongs report)
specifier|private
name|void
name|processCacheReportImpl
parameter_list|(
specifier|final
name|DatanodeDescriptor
name|datanode
parameter_list|,
specifier|final
name|BlockListAsLongs
name|report
parameter_list|)
block|{
name|CachedBlocksList
name|cached
init|=
name|datanode
operator|.
name|getCached
argument_list|()
decl_stmt|;
name|cached
operator|.
name|clear
argument_list|()
expr_stmt|;
name|BlockReportIterator
name|itBR
init|=
name|report
operator|.
name|getBlockReportIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itBR
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Block
name|block
init|=
name|itBR
operator|.
name|next
argument_list|()
decl_stmt|;
name|ReplicaState
name|iState
init|=
name|itBR
operator|.
name|getCurrentReplicaState
argument_list|()
decl_stmt|;
if|if
condition|(
name|iState
operator|!=
name|ReplicaState
operator|.
name|FINALIZED
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cached block report contained unfinalized block "
operator|+
name|block
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|BlockInfo
name|blockInfo
init|=
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockInfo
operator|.
name|getGenerationStamp
argument_list|()
operator|<
name|block
operator|.
name|getGenerationStamp
argument_list|()
condition|)
block|{
comment|// The NameNode will eventually remove or update the out-of-date block.
comment|// Until then, we pretend that it isn't cached.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Genstamp in cache report disagrees with our genstamp for "
operator|+
name|block
operator|+
literal|": expected genstamp "
operator|+
name|blockInfo
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|corruptReplicas
init|=
name|blockManager
operator|.
name|getCorruptReplicas
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|corruptReplicas
operator|!=
literal|null
operator|)
operator|&&
name|corruptReplicas
operator|.
name|contains
argument_list|(
name|datanode
argument_list|)
condition|)
block|{
comment|// The NameNode will eventually remove or update the corrupt block.
comment|// Until then, we pretend that it isn't cached.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring cached replica on "
operator|+
name|datanode
operator|+
literal|" of "
operator|+
name|block
operator|+
literal|" because it is corrupt."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|CachedBlock
name|cachedBlock
init|=
operator|new
name|CachedBlock
argument_list|(
name|block
operator|.
name|getBlockId
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CachedBlock
name|prevCachedBlock
init|=
name|cachedBlocks
operator|.
name|get
argument_list|(
name|cachedBlock
argument_list|)
decl_stmt|;
comment|// Use the existing CachedBlock if it's present; otherwise,
comment|// insert a new one.
if|if
condition|(
name|prevCachedBlock
operator|!=
literal|null
condition|)
block|{
name|cachedBlock
operator|=
name|prevCachedBlock
expr_stmt|;
block|}
else|else
block|{
name|cachedBlocks
operator|.
name|put
argument_list|(
name|cachedBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cachedBlock
operator|.
name|isPresent
argument_list|(
name|datanode
operator|.
name|getCached
argument_list|()
argument_list|)
condition|)
block|{
name|datanode
operator|.
name|getCached
argument_list|()
operator|.
name|add
argument_list|(
name|cachedBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cachedBlock
operator|.
name|isPresent
argument_list|(
name|datanode
operator|.
name|getPendingCached
argument_list|()
argument_list|)
condition|)
block|{
name|datanode
operator|.
name|getPendingCached
argument_list|()
operator|.
name|remove
argument_list|(
name|cachedBlock
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Saves the current state of the CacheManager to the DataOutput. Used    * to persist CacheManager state in the FSImage.    * @param out DataOutput to persist state    * @param sdPath path of the storage directory    * @throws IOException    */
DECL|method|saveState (DataOutput out, String sdPath)
specifier|public
name|void
name|saveState
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|nextEntryId
argument_list|)
expr_stmt|;
name|savePools
argument_list|(
name|out
argument_list|,
name|sdPath
argument_list|)
expr_stmt|;
name|saveEntries
argument_list|(
name|out
argument_list|,
name|sdPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reloads CacheManager state from the passed DataInput. Used during namenode    * startup to restore CacheManager state from an FSImage.    * @param in DataInput from which to restore state    * @throws IOException    */
DECL|method|loadState (DataInput in)
specifier|public
name|void
name|loadState
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|nextEntryId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
comment|// pools need to be loaded first since entries point to their parent pool
name|loadPools
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|loadEntries
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**    * Save cache pools to fsimage    */
DECL|method|savePools (DataOutput out, String sdPath)
specifier|private
name|void
name|savePools
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_POOLS
argument_list|,
name|sdPath
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|,
name|cachePools
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|cachePools
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CachePool
name|pool
range|:
name|cachePools
operator|.
name|values
argument_list|()
control|)
block|{
name|pool
operator|.
name|getInfo
argument_list|(
literal|true
argument_list|)
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
comment|/*    * Save cache entries to fsimage    */
DECL|method|saveEntries (DataOutput out, String sdPath)
specifier|private
name|void
name|saveEntries
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_ENTRIES
argument_list|,
name|sdPath
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|,
name|entriesById
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|entriesById
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PathBasedCacheEntry
name|entry
range|:
name|entriesById
operator|.
name|values
argument_list|()
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|entry
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|entry
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|entry
operator|.
name|getPool
argument_list|()
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load cache pools from fsimage    */
DECL|method|loadPools (DataInput in)
specifier|private
name|void
name|loadPools
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_POOLS
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|int
name|numberOfPools
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
name|numberOfPools
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfPools
condition|;
name|i
operator|++
control|)
block|{
name|addCachePool
argument_list|(
name|CachePoolInfo
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
comment|/**    * Load cache entries from the fsimage    */
DECL|method|loadEntries (DataInput in)
specifier|private
name|void
name|loadEntries
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|Step
name|step
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|CACHE_ENTRIES
argument_list|)
decl_stmt|;
name|prog
operator|.
name|beginStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|int
name|numberOfEntries
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|,
name|numberOfEntries
argument_list|)
expr_stmt|;
name|Counter
name|counter
init|=
name|prog
operator|.
name|getCounter
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEntries
condition|;
name|i
operator|++
control|)
block|{
name|long
name|entryId
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|short
name|replication
init|=
name|in
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|String
name|poolName
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// Get pool reference by looking it up in the map
name|CachePool
name|pool
init|=
name|cachePools
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Entry refers to pool "
operator|+
name|poolName
operator|+
literal|", which does not exist."
argument_list|)
throw|;
block|}
name|PathBasedCacheEntry
name|entry
init|=
operator|new
name|PathBasedCacheEntry
argument_list|(
name|entryId
argument_list|,
name|path
argument_list|,
name|replication
argument_list|,
name|pool
argument_list|)
decl_stmt|;
if|if
condition|(
name|entriesById
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|entry
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"An entry with ID "
operator|+
name|entry
operator|.
name|getEntryId
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|PathBasedCacheEntry
argument_list|>
name|entries
init|=
name|entriesByPath
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
name|entries
operator|=
operator|new
name|LinkedList
argument_list|<
name|PathBasedCacheEntry
argument_list|>
argument_list|()
expr_stmt|;
name|entriesByPath
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getPath
argument_list|()
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|prog
operator|.
name|endStep
argument_list|(
name|Phase
operator|.
name|LOADING_FSIMAGE
argument_list|,
name|step
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

