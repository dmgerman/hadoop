begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathCacheDirectiveException
operator|.
name|InvalidPoolError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathCacheDirectiveException
operator|.
name|PoolWritePermissionDeniedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddPathCacheDirectiveException
operator|.
name|UnexpectedAddPathCacheDirectiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathCacheDirective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|PathCacheEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathCacheEntryException
operator|.
name|InvalidIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathCacheEntryException
operator|.
name|NoSuchIdException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathCacheEntryException
operator|.
name|RemovePermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RemovePathCacheEntryException
operator|.
name|UnexpectedRemovePathCacheEntryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Fallible
import|;
end_import

begin_comment
comment|/**  * The Cache Manager handles caching on DataNodes.  */
end_comment

begin_class
DECL|class|CacheManager
specifier|final
class|class
name|CacheManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CacheManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Cache entries, sorted by ID.    *    * listPathCacheEntries relies on the ordering of elements in this map     * to track what has already been listed by the client.    */
DECL|field|entriesById
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|PathCacheEntry
argument_list|>
name|entriesById
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|PathCacheEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Cache entries, sorted by directive.    */
DECL|field|entriesByDirective
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|PathCacheDirective
argument_list|,
name|PathCacheEntry
argument_list|>
name|entriesByDirective
init|=
operator|new
name|TreeMap
argument_list|<
name|PathCacheDirective
argument_list|,
name|PathCacheEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Cache pools, sorted by name.    */
DECL|field|cachePoolsByName
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
name|cachePoolsByName
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CachePool
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Cache pools, sorted by ID    */
DECL|field|cachePoolsById
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|CachePool
argument_list|>
name|cachePoolsById
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|CachePool
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The entry ID to use for a new entry.    */
DECL|field|nextEntryId
specifier|private
name|long
name|nextEntryId
decl_stmt|;
comment|/**    * The pool ID to use for a new pool.    */
DECL|field|nextPoolId
specifier|private
name|long
name|nextPoolId
decl_stmt|;
DECL|method|CacheManager (FSDirectory dir, Configuration conf)
name|CacheManager
parameter_list|(
name|FSDirectory
name|dir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// TODO: support loading and storing of the CacheManager state
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|clear ()
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|entriesById
operator|.
name|clear
argument_list|()
expr_stmt|;
name|entriesByDirective
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cachePoolsByName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cachePoolsById
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nextEntryId
operator|=
literal|1
expr_stmt|;
name|nextPoolId
operator|=
literal|1
expr_stmt|;
block|}
DECL|method|getNextEntryId ()
specifier|synchronized
name|long
name|getNextEntryId
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nextEntryId
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"no more available entry IDs"
argument_list|)
throw|;
block|}
return|return
name|nextEntryId
operator|++
return|;
block|}
DECL|method|getNextPoolId ()
specifier|synchronized
name|long
name|getNextPoolId
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nextPoolId
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"no more available pool IDs"
argument_list|)
throw|;
block|}
return|return
name|nextPoolId
operator|++
return|;
block|}
DECL|method|addDirective ( FSPermissionChecker pc, PathCacheDirective directive)
specifier|private
specifier|synchronized
name|Fallible
argument_list|<
name|PathCacheEntry
argument_list|>
name|addDirective
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|,
name|PathCacheDirective
name|directive
parameter_list|)
block|{
name|CachePool
name|pool
init|=
name|cachePoolsById
operator|.
name|get
argument_list|(
name|directive
operator|.
name|getPoolId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": pool not found."
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|PathCacheEntry
argument_list|>
argument_list|(
operator|new
name|InvalidPoolError
argument_list|(
name|directive
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|pc
operator|.
name|checkPermission
argument_list|(
name|pool
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": write permission denied."
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|PathCacheEntry
argument_list|>
argument_list|(
operator|new
name|PoolWritePermissionDeniedError
argument_list|(
name|directive
argument_list|)
argument_list|)
return|;
block|}
try|try
block|{
name|directive
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": validation failed."
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|PathCacheEntry
argument_list|>
argument_list|(
name|ioe
argument_list|)
return|;
block|}
comment|// Check if we already have this entry.
name|PathCacheEntry
name|existing
init|=
name|entriesByDirective
operator|.
name|get
argument_list|(
name|directive
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
comment|// Entry already exists: return existing entry.
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": there is an "
operator|+
literal|"existing directive "
operator|+
name|existing
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|PathCacheEntry
argument_list|>
argument_list|(
name|existing
argument_list|)
return|;
block|}
comment|// Add a new entry with the next available ID.
name|PathCacheEntry
name|entry
decl_stmt|;
try|try
block|{
name|entry
operator|=
operator|new
name|PathCacheEntry
argument_list|(
name|getNextEntryId
argument_list|()
argument_list|,
name|directive
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
operator|new
name|Fallible
argument_list|<
name|PathCacheEntry
argument_list|>
argument_list|(
operator|new
name|UnexpectedAddPathCacheDirectiveException
argument_list|(
name|directive
argument_list|)
argument_list|)
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"addDirective "
operator|+
name|directive
operator|+
literal|": added cache directive "
operator|+
name|directive
argument_list|)
expr_stmt|;
name|entriesByDirective
operator|.
name|put
argument_list|(
name|directive
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|entriesById
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|PathCacheEntry
argument_list|>
argument_list|(
name|entry
argument_list|)
return|;
block|}
DECL|method|addDirectives ( FSPermissionChecker pc, List<PathCacheDirective> directives)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|Fallible
argument_list|<
name|PathCacheEntry
argument_list|>
argument_list|>
name|addDirectives
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|,
name|List
argument_list|<
name|PathCacheDirective
argument_list|>
name|directives
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Fallible
argument_list|<
name|PathCacheEntry
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Fallible
argument_list|<
name|PathCacheEntry
argument_list|>
argument_list|>
argument_list|(
name|directives
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PathCacheDirective
name|directive
range|:
name|directives
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|addDirective
argument_list|(
name|pc
argument_list|,
name|directive
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|method|removeEntry (FSPermissionChecker pc, long entryId)
specifier|private
specifier|synchronized
name|Fallible
argument_list|<
name|Long
argument_list|>
name|removeEntry
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|,
name|long
name|entryId
parameter_list|)
block|{
comment|// Check for invalid IDs.
if|if
condition|(
name|entryId
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeEntry "
operator|+
name|entryId
operator|+
literal|": invalid non-positive entry ID."
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|new
name|InvalidIdException
argument_list|(
name|entryId
argument_list|)
argument_list|)
return|;
block|}
comment|// Find the entry.
name|PathCacheEntry
name|existing
init|=
name|entriesById
operator|.
name|get
argument_list|(
name|entryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeEntry "
operator|+
name|entryId
operator|+
literal|": entry not found."
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|new
name|NoSuchIdException
argument_list|(
name|entryId
argument_list|)
argument_list|)
return|;
block|}
name|CachePool
name|pool
init|=
name|cachePoolsById
operator|.
name|get
argument_list|(
name|existing
operator|.
name|getDirective
argument_list|()
operator|.
name|getPoolId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeEntry "
operator|+
name|entryId
operator|+
literal|": pool not found for directive "
operator|+
name|existing
operator|.
name|getDirective
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|new
name|UnexpectedRemovePathCacheEntryException
argument_list|(
name|entryId
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|pc
operator|.
name|checkPermission
argument_list|(
name|pool
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"removeEntry "
operator|+
name|entryId
operator|+
literal|": write permission denied to "
operator|+
literal|"pool "
operator|+
name|pool
operator|+
literal|" for entry "
operator|+
name|existing
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|new
name|RemovePermissionDeniedException
argument_list|(
name|entryId
argument_list|)
argument_list|)
return|;
block|}
comment|// Remove the corresponding entry in entriesByDirective.
if|if
condition|(
name|entriesByDirective
operator|.
name|remove
argument_list|(
name|existing
operator|.
name|getDirective
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"removeEntry "
operator|+
name|entryId
operator|+
literal|": failed to find existing entry "
operator|+
name|existing
operator|+
literal|" in entriesByDirective"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|Long
argument_list|>
argument_list|(
operator|new
name|UnexpectedRemovePathCacheEntryException
argument_list|(
name|entryId
argument_list|)
argument_list|)
return|;
block|}
name|entriesById
operator|.
name|remove
argument_list|(
name|entryId
argument_list|)
expr_stmt|;
return|return
operator|new
name|Fallible
argument_list|<
name|Long
argument_list|>
argument_list|(
name|entryId
argument_list|)
return|;
block|}
DECL|method|removeEntries (FSPermissionChecker pc, List<Long> entryIds)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|Fallible
argument_list|<
name|Long
argument_list|>
argument_list|>
name|removeEntries
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|entryIds
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Fallible
argument_list|<
name|Long
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Fallible
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|(
name|entryIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|entryId
range|:
name|entryIds
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|removeEntry
argument_list|(
name|pc
argument_list|,
name|entryId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|method|listPathCacheEntries ( FSPermissionChecker pc, long prevId, Long poolId, int maxReplies)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|PathCacheEntry
argument_list|>
name|listPathCacheEntries
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|,
name|long
name|prevId
parameter_list|,
name|Long
name|poolId
parameter_list|,
name|int
name|maxReplies
parameter_list|)
block|{
specifier|final
name|int
name|MAX_PRE_ALLOCATED_ENTRIES
init|=
literal|16
decl_stmt|;
name|ArrayList
argument_list|<
name|PathCacheEntry
argument_list|>
name|replies
init|=
operator|new
name|ArrayList
argument_list|<
name|PathCacheEntry
argument_list|>
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|MAX_PRE_ALLOCATED_ENTRIES
argument_list|,
name|maxReplies
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numReplies
init|=
literal|0
decl_stmt|;
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|PathCacheEntry
argument_list|>
name|tailMap
init|=
name|entriesById
operator|.
name|tailMap
argument_list|(
name|prevId
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|PathCacheEntry
name|entry
range|:
name|tailMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|numReplies
operator|>=
name|maxReplies
condition|)
block|{
return|return
name|replies
return|;
block|}
name|long
name|entryPoolId
init|=
name|entry
operator|.
name|getDirective
argument_list|()
operator|.
name|getPoolId
argument_list|()
decl_stmt|;
if|if
condition|(
name|poolId
operator|==
literal|null
operator|||
name|poolId
operator|<=
literal|0
operator|||
name|entryPoolId
operator|==
name|poolId
condition|)
block|{
if|if
condition|(
name|pc
operator|.
name|checkPermission
argument_list|(
name|cachePoolsById
operator|.
name|get
argument_list|(
name|entryPoolId
argument_list|)
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
condition|)
block|{
name|replies
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|numReplies
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|replies
return|;
block|}
DECL|method|getCachePool (long id)
specifier|synchronized
name|CachePool
name|getCachePool
parameter_list|(
name|long
name|id
parameter_list|)
block|{
return|return
name|cachePoolsById
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**    * Create a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param info    *          The info for the cache pool to create.    * @return created CachePool    */
DECL|method|addCachePool (CachePoolInfo info)
specifier|public
specifier|synchronized
name|CachePool
name|addCachePool
parameter_list|(
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|poolName
init|=
name|info
operator|.
name|getPoolName
argument_list|()
decl_stmt|;
if|if
condition|(
name|poolName
operator|==
literal|null
operator|||
name|poolName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid empty cache pool name"
argument_list|)
throw|;
block|}
if|if
condition|(
name|cachePoolsByName
operator|.
name|containsKey
argument_list|(
name|poolName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cache pool "
operator|+
name|poolName
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
name|CachePool
name|cachePool
init|=
operator|new
name|CachePool
argument_list|(
name|getNextPoolId
argument_list|()
argument_list|,
name|poolName
argument_list|,
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|,
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
decl_stmt|;
name|cachePoolsById
operator|.
name|put
argument_list|(
name|cachePool
operator|.
name|getId
argument_list|()
argument_list|,
name|cachePool
argument_list|)
expr_stmt|;
name|cachePoolsByName
operator|.
name|put
argument_list|(
name|poolName
argument_list|,
name|cachePool
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"created new cache pool "
operator|+
name|cachePool
argument_list|)
expr_stmt|;
return|return
name|cachePool
return|;
block|}
comment|/**    * Modify a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param info    *          The info for the cache pool to modify.    */
DECL|method|modifyCachePool (long poolId, CachePoolInfo info)
specifier|public
specifier|synchronized
name|void
name|modifyCachePool
parameter_list|(
name|long
name|poolId
parameter_list|,
name|CachePoolInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|poolId
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid pool id "
operator|+
name|poolId
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|cachePoolsById
operator|.
name|containsKey
argument_list|(
name|poolId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cache pool id "
operator|+
name|poolId
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
name|CachePool
name|pool
init|=
name|cachePoolsById
operator|.
name|get
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
comment|// Remove the old CachePoolInfo
name|removeCachePool
argument_list|(
name|poolId
argument_list|)
expr_stmt|;
comment|// Build up the new CachePoolInfo
name|CachePoolInfo
operator|.
name|Builder
name|newInfo
init|=
name|CachePoolInfo
operator|.
name|newBuilder
argument_list|(
name|pool
operator|.
name|getInfo
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getPoolName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newInfo
operator|.
name|setPoolName
argument_list|(
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set name to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getOwnerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newInfo
operator|.
name|setOwnerName
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set owner to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getGroupName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newInfo
operator|.
name|setGroupName
argument_list|(
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set group to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newInfo
operator|.
name|setMode
argument_list|(
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"set mode to "
argument_list|,
name|info
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getWeight
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newInfo
operator|.
name|setWeight
argument_list|(
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"set weight to "
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"; "
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"no changes."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pool
operator|.
name|setInfo
argument_list|(
name|newInfo
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Put the newly modified info back in
name|cachePoolsById
operator|.
name|put
argument_list|(
name|poolId
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|cachePoolsByName
operator|.
name|put
argument_list|(
name|info
operator|.
name|getPoolName
argument_list|()
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"modified pool id "
operator|+
name|pool
operator|.
name|getId
argument_list|()
operator|+
literal|" ("
operator|+
name|pool
operator|.
name|getInfo
argument_list|()
operator|.
name|getPoolName
argument_list|()
operator|+
literal|"); "
operator|+
name|bld
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a cache pool.    *     * Only the superuser should be able to call this function.    *    * @param poolId    *          The id of the cache pool to remove.    */
DECL|method|removeCachePool (long poolId)
specifier|public
specifier|synchronized
name|void
name|removeCachePool
parameter_list|(
name|long
name|poolId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|cachePoolsById
operator|.
name|containsKey
argument_list|(
name|poolId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"can't remove nonexistent cache pool id "
operator|+
name|poolId
argument_list|)
throw|;
block|}
comment|// Remove all the entries associated with the pool
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|PathCacheEntry
argument_list|>
argument_list|>
name|it
init|=
name|entriesById
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|PathCacheEntry
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getDirective
argument_list|()
operator|.
name|getPoolId
argument_list|()
operator|==
name|poolId
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|entriesByDirective
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getDirective
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove the pool
name|CachePool
name|pool
init|=
name|cachePoolsById
operator|.
name|remove
argument_list|(
name|poolId
argument_list|)
decl_stmt|;
name|cachePoolsByName
operator|.
name|remove
argument_list|(
name|pool
operator|.
name|getInfo
argument_list|()
operator|.
name|getPoolName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|listCachePools (Long prevKey, int maxRepliesPerRequest)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|CachePool
argument_list|>
name|listCachePools
parameter_list|(
name|Long
name|prevKey
parameter_list|,
name|int
name|maxRepliesPerRequest
parameter_list|)
block|{
specifier|final
name|int
name|MAX_PREALLOCATED_REPLIES
init|=
literal|16
decl_stmt|;
name|ArrayList
argument_list|<
name|CachePool
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|CachePool
argument_list|>
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|MAX_PREALLOCATED_REPLIES
argument_list|,
name|maxRepliesPerRequest
argument_list|)
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|CachePool
argument_list|>
name|tailMap
init|=
name|cachePoolsById
operator|.
name|tailMap
argument_list|(
name|prevKey
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|CachePool
name|pool
range|:
name|tailMap
operator|.
name|values
argument_list|()
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

