begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
import|;
end_import

begin_comment
comment|/**  * Generate volumes based on the storageType.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FsVolumeImplAllocator
class|class
name|FsVolumeImplAllocator
block|{
DECL|method|createVolume (FsDatasetImpl fsDataset, String storageUuid, File dir, Configuration conf, StorageType storageType)
specifier|static
name|FsVolumeImpl
name|createVolume
parameter_list|(
name|FsDatasetImpl
name|fsDataset
parameter_list|,
name|String
name|storageUuid
parameter_list|,
name|File
name|dir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|StorageType
name|storageType
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|storageType
condition|)
block|{
case|case
name|RAM_DISK
case|:
return|return
operator|new
name|FsTransientVolumeImpl
argument_list|(
name|fsDataset
argument_list|,
name|storageUuid
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|,
name|storageType
argument_list|)
return|;
default|default:
return|return
operator|new
name|FsVolumeImpl
argument_list|(
name|fsDataset
argument_list|,
name|storageUuid
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|,
name|storageType
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

