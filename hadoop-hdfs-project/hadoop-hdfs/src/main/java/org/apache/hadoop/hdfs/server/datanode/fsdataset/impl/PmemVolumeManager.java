begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|ExtendedBlockId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|MappedByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * Manage the persistent memory volumes.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|PmemVolumeManager
specifier|public
class|class
name|PmemVolumeManager
block|{
comment|/**    * Counts used bytes for persistent memory.    */
DECL|class|UsedBytesCount
specifier|private
class|class
name|UsedBytesCount
block|{
DECL|field|usedBytes
specifier|private
specifier|final
name|AtomicLong
name|usedBytes
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Try to reserve more bytes.      *      * @param bytesCount    The number of bytes to add.      *      * @return              The new number of usedBytes if we succeeded;      *                      -1 if we failed.      */
DECL|method|reserve (long bytesCount)
name|long
name|reserve
parameter_list|(
name|long
name|bytesCount
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|cur
init|=
name|usedBytes
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|next
init|=
name|cur
operator|+
name|bytesCount
decl_stmt|;
if|if
condition|(
name|next
operator|>
name|cacheCapacity
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|usedBytes
operator|.
name|compareAndSet
argument_list|(
name|cur
argument_list|,
name|next
argument_list|)
condition|)
block|{
return|return
name|next
return|;
block|}
block|}
block|}
comment|/**      * Release some bytes that we're using.      *      * @param bytesCount    The number of bytes to release.      *      * @return              The new number of usedBytes.      */
DECL|method|release (long bytesCount)
name|long
name|release
parameter_list|(
name|long
name|bytesCount
parameter_list|)
block|{
return|return
name|usedBytes
operator|.
name|addAndGet
argument_list|(
operator|-
name|bytesCount
argument_list|)
return|;
block|}
DECL|method|get ()
name|long
name|get
parameter_list|()
block|{
return|return
name|usedBytes
operator|.
name|get
argument_list|()
return|;
block|}
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PmemVolumeManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|pmemVolumes
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|pmemVolumes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Maintain which pmem volume a block is cached to.
DECL|field|blockKeyToVolume
specifier|private
specifier|final
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|Byte
argument_list|>
name|blockKeyToVolume
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|usedBytesCount
specifier|private
specifier|final
name|UsedBytesCount
name|usedBytesCount
decl_stmt|;
comment|/**    * The total cache capacity in bytes of persistent memory.    * It is 0L if the specific mappableBlockLoader couldn't cache data to pmem.    */
DECL|field|cacheCapacity
specifier|private
specifier|final
name|long
name|cacheCapacity
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// Strict atomic operation is not guaranteed for the performance sake.
DECL|field|i
specifier|private
name|int
name|i
init|=
literal|0
decl_stmt|;
DECL|method|PmemVolumeManager (long maxBytes, String[] pmemVolumesConfigured)
name|PmemVolumeManager
parameter_list|(
name|long
name|maxBytes
parameter_list|,
name|String
index|[]
name|pmemVolumesConfigured
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pmemVolumesConfigured
operator|==
literal|null
operator|||
name|pmemVolumesConfigured
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The persistent memory volume, "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_CACHE_PMEM_DIRS_KEY
operator|+
literal|" is not configured!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|loadVolumes
argument_list|(
name|pmemVolumesConfigured
argument_list|)
expr_stmt|;
name|this
operator|.
name|usedBytesCount
operator|=
operator|new
name|UsedBytesCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|cacheCapacity
operator|=
name|maxBytes
expr_stmt|;
block|}
DECL|method|getCacheUsed ()
specifier|public
name|long
name|getCacheUsed
parameter_list|()
block|{
return|return
name|usedBytesCount
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getCacheCapacity ()
specifier|public
name|long
name|getCacheCapacity
parameter_list|()
block|{
return|return
name|cacheCapacity
return|;
block|}
comment|/**    * Try to reserve more bytes on persistent memory.    *    * @param bytesCount    The number of bytes to add.    *    * @return              The new number of usedBytes if we succeeded;    *                      -1 if we failed.    */
DECL|method|reserve (long bytesCount)
name|long
name|reserve
parameter_list|(
name|long
name|bytesCount
parameter_list|)
block|{
return|return
name|usedBytesCount
operator|.
name|reserve
argument_list|(
name|bytesCount
argument_list|)
return|;
block|}
comment|/**    * Release some bytes that we're using on persistent memory.    *    * @param bytesCount    The number of bytes to release.    *    * @return              The new number of usedBytes.    */
DECL|method|release (long bytesCount)
name|long
name|release
parameter_list|(
name|long
name|bytesCount
parameter_list|)
block|{
return|return
name|usedBytesCount
operator|.
name|release
argument_list|(
name|bytesCount
argument_list|)
return|;
block|}
comment|/**    * Load and verify the configured pmem volumes.    *    * @throws IOException   If there is no available pmem volume.    */
DECL|method|loadVolumes (String[] volumes)
specifier|private
name|void
name|loadVolumes
parameter_list|(
name|String
index|[]
name|volumes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check whether the volume exists
for|for
control|(
name|String
name|volume
range|:
name|volumes
control|)
block|{
try|try
block|{
name|File
name|pmemDir
init|=
operator|new
name|File
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|verifyIfValidPmemVolume
argument_list|(
name|pmemDir
argument_list|)
expr_stmt|;
comment|// Remove all files under the volume.
name|FileUtils
operator|.
name|cleanDirectory
argument_list|(
name|pmemDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to parse persistent memory volume "
operator|+
name|volume
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Bad persistent memory volume: "
operator|+
name|volume
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|pmemVolumes
operator|.
name|add
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added persistent memory - "
operator|+
name|volume
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|pmemVolumes
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"At least one valid persistent memory volume is required!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|verifyIfValidPmemVolume (File pmemDir)
specifier|static
name|void
name|verifyIfValidPmemVolume
parameter_list|(
name|File
name|pmemDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|pmemDir
operator|.
name|exists
argument_list|()
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|pmemDir
operator|+
literal|" does not exist"
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|pmemDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
specifier|final
name|String
name|message
init|=
name|pmemDir
operator|+
literal|" is not a directory"
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|String
name|uuidStr
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|testFilePath
init|=
name|pmemDir
operator|.
name|getPath
argument_list|()
operator|+
literal|"/.verify.pmem."
operator|+
name|uuidStr
decl_stmt|;
name|byte
index|[]
name|contents
init|=
name|uuidStr
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|RandomAccessFile
name|testFile
init|=
literal|null
decl_stmt|;
name|MappedByteBuffer
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|testFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|testFilePath
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|out
operator|=
name|testFile
operator|.
name|getChannel
argument_list|()
operator|.
name|map
argument_list|(
name|FileChannel
operator|.
name|MapMode
operator|.
name|READ_WRITE
argument_list|,
literal|0
argument_list|,
name|contents
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to map the test file under "
operator|+
name|pmemDir
argument_list|)
throw|;
block|}
name|out
operator|.
name|put
argument_list|(
name|contents
argument_list|)
expr_stmt|;
comment|// Forces to write data to storage device containing the mapped file
name|out
operator|.
name|force
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while writing data to persistent storage dir: "
operator|+
name|pmemDir
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testFile
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|NativeIO
operator|.
name|POSIX
operator|.
name|munmap
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
block|{
name|FsDatasetUtil
operator|.
name|deleteMappedFile
argument_list|(
name|testFilePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete test file "
operator|+
name|testFilePath
operator|+
literal|" from persistent memory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Choose a persistent memory volume based on a specific algorithm.    * Currently it is a round-robin policy.    *    * TODO: Refine volume selection policy by considering storage utilization.    */
DECL|method|getOneVolumeIndex ()
name|Byte
name|getOneVolumeIndex
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|i
operator|++
operator|%
name|count
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No usable persistent memory is found"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getVolumeByIndex (Byte index)
name|String
name|getVolumeByIndex
parameter_list|(
name|Byte
name|index
parameter_list|)
block|{
return|return
name|pmemVolumes
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**    * The cache file is named as BlockPoolId-BlockId.    * So its name can be inferred by BlockPoolId and BlockId.    */
DECL|method|getCacheFileName (ExtendedBlockId key)
specifier|public
name|String
name|getCacheFileName
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|getBlockPoolId
argument_list|()
operator|+
literal|"-"
operator|+
name|key
operator|.
name|getBlockId
argument_list|()
return|;
block|}
comment|/**    * Considering the pmem volume size is below TB level currently,    * it is tolerable to keep cache files under one directory.    * The strategy will be optimized, especially if one pmem volume    * has huge cache capacity.    *    * @param volumeIndex   The index of pmem volume where a replica will be    *                      cached to or has been cached to.    *    * @param key           The replica's ExtendedBlockId.    *    * @return              A path to which the block replica is mapped.    */
DECL|method|inferCacheFilePath (Byte volumeIndex, ExtendedBlockId key)
specifier|public
name|String
name|inferCacheFilePath
parameter_list|(
name|Byte
name|volumeIndex
parameter_list|,
name|ExtendedBlockId
name|key
parameter_list|)
block|{
return|return
name|pmemVolumes
operator|.
name|get
argument_list|(
name|volumeIndex
argument_list|)
operator|+
literal|"/"
operator|+
name|getCacheFileName
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * The cache file path is pmemVolume/BlockPoolId-BlockId.    */
DECL|method|getCacheFilePath (ExtendedBlockId key)
specifier|public
name|String
name|getCacheFilePath
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|)
block|{
name|Byte
name|volumeIndex
init|=
name|blockKeyToVolume
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeIndex
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|inferCacheFilePath
argument_list|(
name|volumeIndex
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getBlockKeyToVolume ()
name|Map
argument_list|<
name|ExtendedBlockId
argument_list|,
name|Byte
argument_list|>
name|getBlockKeyToVolume
parameter_list|()
block|{
return|return
name|blockKeyToVolume
return|;
block|}
comment|/**    * Add cached block's ExtendedBlockId and its cache volume index to a map    * after cache.    */
DECL|method|afterCache (ExtendedBlockId key, Byte volumeIndex)
specifier|public
name|void
name|afterCache
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|,
name|Byte
name|volumeIndex
parameter_list|)
block|{
name|blockKeyToVolume
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|volumeIndex
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove the record in blockKeyToVolume for uncached block after uncache.    */
DECL|method|afterUncache (ExtendedBlockId key)
specifier|public
name|void
name|afterUncache
parameter_list|(
name|ExtendedBlockId
name|key
parameter_list|)
block|{
name|blockKeyToVolume
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

