begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|StripedBlockUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ErasureCodingWork
class|class
name|ErasureCodingWork
extends|extends
name|BlockReconstructionWork
block|{
DECL|field|liveBlockIndicies
specifier|private
specifier|final
name|byte
index|[]
name|liveBlockIndicies
decl_stmt|;
DECL|field|blockPoolId
specifier|private
specifier|final
name|String
name|blockPoolId
decl_stmt|;
DECL|method|ErasureCodingWork (String blockPoolId, BlockInfo block, BlockCollection bc, DatanodeDescriptor[] srcNodes, List<DatanodeDescriptor> containingNodes, List<DatanodeStorageInfo> liveReplicaStorages, int additionalReplRequired, int priority, byte[] liveBlockIndicies)
specifier|public
name|ErasureCodingWork
parameter_list|(
name|String
name|blockPoolId
parameter_list|,
name|BlockInfo
name|block
parameter_list|,
name|BlockCollection
name|bc
parameter_list|,
name|DatanodeDescriptor
index|[]
name|srcNodes
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|containingNodes
parameter_list|,
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|liveReplicaStorages
parameter_list|,
name|int
name|additionalReplRequired
parameter_list|,
name|int
name|priority
parameter_list|,
name|byte
index|[]
name|liveBlockIndicies
parameter_list|)
block|{
name|super
argument_list|(
name|block
argument_list|,
name|bc
argument_list|,
name|srcNodes
argument_list|,
name|containingNodes
argument_list|,
name|liveReplicaStorages
argument_list|,
name|additionalReplRequired
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockPoolId
operator|=
name|blockPoolId
expr_stmt|;
name|this
operator|.
name|liveBlockIndicies
operator|=
name|liveBlockIndicies
expr_stmt|;
name|BlockManager
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating an ErasureCodingWork to {} reconstruct "
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
DECL|method|getLiveBlockIndicies ()
name|byte
index|[]
name|getLiveBlockIndicies
parameter_list|()
block|{
return|return
name|liveBlockIndicies
return|;
block|}
annotation|@
name|Override
DECL|method|chooseTargets (BlockPlacementPolicy blockplacement, BlockStoragePolicySuite storagePolicySuite, Set<Node> excludedNodes)
name|void
name|chooseTargets
parameter_list|(
name|BlockPlacementPolicy
name|blockplacement
parameter_list|,
name|BlockStoragePolicySuite
name|storagePolicySuite
parameter_list|,
name|Set
argument_list|<
name|Node
argument_list|>
name|excludedNodes
parameter_list|)
block|{
comment|// TODO: new placement policy for EC considering multiple writers
name|DatanodeStorageInfo
index|[]
name|chosenTargets
init|=
name|blockplacement
operator|.
name|chooseTarget
argument_list|(
name|getBc
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|getAdditionalReplRequired
argument_list|()
argument_list|,
name|getSrcNodes
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|getLiveReplicaStorages
argument_list|()
argument_list|,
literal|false
argument_list|,
name|excludedNodes
argument_list|,
name|getBlock
argument_list|()
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|storagePolicySuite
operator|.
name|getPolicy
argument_list|(
name|getBc
argument_list|()
operator|.
name|getStoragePolicyID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|setTargets
argument_list|(
name|chosenTargets
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return true if the current source nodes cover all the internal blocks.    * I.e., we only need to have more racks.    */
DECL|method|hasAllInternalBlocks ()
specifier|private
name|boolean
name|hasAllInternalBlocks
parameter_list|()
block|{
specifier|final
name|BlockInfoStriped
name|block
init|=
operator|(
name|BlockInfoStriped
operator|)
name|getBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|getSrcNodes
argument_list|()
operator|.
name|length
operator|<
name|block
operator|.
name|getRealTotalBlockNum
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|(
name|block
operator|.
name|getTotalBlockNum
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
name|index
range|:
name|liveBlockIndicies
control|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|block
operator|.
name|getRealDataBlockNum
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|bitSet
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|block
operator|.
name|getDataBlockNum
argument_list|()
init|;
name|i
operator|<
name|block
operator|.
name|getTotalBlockNum
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|bitSet
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * We have all the internal blocks but not enough racks. Thus we do not need    * to do decoding but only simply make an extra copy of an internal block. In    * this scenario, use this method to choose the source datanode for simple    * replication.    * @return The index of the source datanode.    */
DECL|method|chooseSource4SimpleReplication ()
specifier|private
name|int
name|chooseSource4SimpleReplication
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getSrcNodes
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|rack
init|=
name|getSrcNodes
argument_list|()
index|[
name|i
index|]
operator|.
name|getNetworkLocation
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|dnList
init|=
name|map
operator|.
name|get
argument_list|(
name|rack
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnList
operator|==
literal|null
condition|)
block|{
name|dnList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|rack
argument_list|,
name|dnList
argument_list|)
expr_stmt|;
block|}
name|dnList
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|max
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|max
operator|==
literal|null
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|max
operator|.
name|size
argument_list|()
condition|)
block|{
name|max
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
assert|assert
name|max
operator|!=
literal|null
assert|;
return|return
name|max
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addTaskToDatanode ()
name|void
name|addTaskToDatanode
parameter_list|()
block|{
assert|assert
name|getTargets
argument_list|()
operator|.
name|length
operator|>
literal|0
assert|;
name|BlockInfoStriped
name|stripedBlk
init|=
operator|(
name|BlockInfoStriped
operator|)
name|getBlock
argument_list|()
decl_stmt|;
comment|// if we already have all the internal blocks, but not enough racks,
comment|// we only need to replicate one internal block to a new rack
if|if
condition|(
name|hasAllInternalBlocks
argument_list|()
condition|)
block|{
name|int
name|sourceIndex
init|=
name|chooseSource4SimpleReplication
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|blockIndex
init|=
name|liveBlockIndicies
index|[
name|sourceIndex
index|]
decl_stmt|;
specifier|final
name|DatanodeDescriptor
name|source
init|=
name|getSrcNodes
argument_list|()
index|[
name|sourceIndex
index|]
decl_stmt|;
specifier|final
name|long
name|internBlkLen
init|=
name|StripedBlockUtil
operator|.
name|getInternalBlockLength
argument_list|(
name|stripedBlk
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|stripedBlk
operator|.
name|getCellSize
argument_list|()
argument_list|,
name|stripedBlk
operator|.
name|getDataBlockNum
argument_list|()
argument_list|,
name|blockIndex
argument_list|)
decl_stmt|;
specifier|final
name|Block
name|targetBlk
init|=
operator|new
name|Block
argument_list|(
name|stripedBlk
operator|.
name|getBlockId
argument_list|()
operator|+
name|blockIndex
argument_list|,
name|internBlkLen
argument_list|,
name|stripedBlk
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
decl_stmt|;
name|source
operator|.
name|addBlockToBeReplicated
argument_list|(
name|targetBlk
argument_list|,
name|getTargets
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getTargets
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDatanodeDescriptor
argument_list|()
operator|.
name|addBlockToBeErasureCoded
argument_list|(
operator|new
name|ExtendedBlock
argument_list|(
name|blockPoolId
argument_list|,
name|stripedBlk
argument_list|)
argument_list|,
name|getSrcNodes
argument_list|()
argument_list|,
name|getTargets
argument_list|()
argument_list|,
name|getLiveBlockIndicies
argument_list|()
argument_list|,
name|stripedBlk
operator|.
name|getErasureCodingPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

