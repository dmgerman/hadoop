begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ExtendedBlockWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ProtocolSignatureWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlockRecoveryCommand
operator|.
name|RecoveringBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|InterDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReplicaRecoveryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * This class forwards InterDatanodeProtocol calls as RPC to the DN server while  * translating from the parameter types used in InterDatanodeProtocol to those  * used in protocolR23Compatile.*.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|InterDatanodeProtocolTranslatorR23
specifier|public
class|class
name|InterDatanodeProtocolTranslatorR23
implements|implements
name|InterDatanodeProtocol
block|{
DECL|field|rpcProxy
specifier|final
specifier|private
name|InterDatanodeWireProtocol
name|rpcProxy
decl_stmt|;
comment|/** used for testing */
DECL|method|InterDatanodeProtocolTranslatorR23 (InetSocketAddress addr, UserGroupInformation ugi, Configuration conf, SocketFactory factory, int socketTimeout)
specifier|public
name|InterDatanodeProtocolTranslatorR23
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|,
name|int
name|socketTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|rpcProxy
operator|=
name|createInterDatanodeProtocolProxy
argument_list|(
name|addr
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|createInterDatanodeProtocolProxy ( InetSocketAddress addr, UserGroupInformation ugi, Configuration conf, SocketFactory factory, int socketTimeout)
specifier|static
name|InterDatanodeWireProtocol
name|createInterDatanodeProtocolProxy
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|,
name|int
name|socketTimeout
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|RPC
operator|.
name|getProxy
argument_list|(
name|InterDatanodeWireProtocol
operator|.
name|class
argument_list|,
name|InterDatanodeWireProtocol
operator|.
name|versionID
argument_list|,
name|addr
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|,
name|socketTimeout
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocolName, long clientVersion, int clientMethodHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocolName
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtocolSignatureWritable
operator|.
name|convert
argument_list|(
name|rpcProxy
operator|.
name|getProtocolSignature2
argument_list|(
name|protocolName
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodHash
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocolName, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocolName
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rpcProxy
operator|.
name|getProtocolVersion
argument_list|(
name|protocolName
argument_list|,
name|clientVersion
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|initReplicaRecovery (RecoveringBlock rBlock)
specifier|public
name|ReplicaRecoveryInfo
name|initReplicaRecovery
parameter_list|(
name|RecoveringBlock
name|rBlock
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rpcProxy
operator|.
name|initReplicaRecovery
argument_list|(
name|RecoveringBlockWritable
operator|.
name|convert
argument_list|(
name|rBlock
argument_list|)
argument_list|)
operator|.
name|convert
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|updateReplicaUnderRecovery (ExtendedBlock oldBlock, long recoveryId, long newLength)
specifier|public
name|ExtendedBlock
name|updateReplicaUnderRecovery
parameter_list|(
name|ExtendedBlock
name|oldBlock
parameter_list|,
name|long
name|recoveryId
parameter_list|,
name|long
name|newLength
parameter_list|)
throws|throws
name|IOException
block|{
name|ExtendedBlockWritable
name|eb
init|=
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|oldBlock
argument_list|)
decl_stmt|;
name|ExtendedBlockWritable
name|b
init|=
name|rpcProxy
operator|.
name|updateReplicaUnderRecovery
argument_list|(
name|eb
argument_list|,
name|recoveryId
argument_list|,
name|newLength
argument_list|)
decl_stmt|;
return|return
name|ExtendedBlockWritable
operator|.
name|convertExtendedBlock
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
end_class

end_unit

