begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksStorageMovementResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A monitor class for checking whether block storage movements finished or not.  * If block storage movement results from datanode indicates about the movement  * success, then it will just remove the entries from tracking. If it reports  * failure, then it will add back to needed block storage movements list. If no  * DN reports about movement for longer time, then such items will be retries  * automatically after timeout. The default timeout would be 30mins.  */
end_comment

begin_class
DECL|class|BlockStorageMovementAttemptedItems
specifier|public
class|class
name|BlockStorageMovementAttemptedItems
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockStorageMovementAttemptedItems
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// A map holds the items which are already taken for blocks movements
comment|// processing and sent to DNs.
DECL|field|storageMovementAttemptedItems
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|storageMovementAttemptedItems
decl_stmt|;
DECL|field|storageMovementAttemptedResults
specifier|private
specifier|final
name|List
argument_list|<
name|BlocksStorageMovementResult
argument_list|>
name|storageMovementAttemptedResults
decl_stmt|;
DECL|field|monitorRunning
specifier|private
specifier|volatile
name|boolean
name|monitorRunning
init|=
literal|true
decl_stmt|;
DECL|field|timerThread
specifier|private
name|Daemon
name|timerThread
init|=
literal|null
decl_stmt|;
comment|//
comment|// It might take anywhere between 30 to 60 minutes before
comment|// a request is timed out.
comment|//
DECL|field|selfRetryTimeout
specifier|private
name|long
name|selfRetryTimeout
init|=
literal|30
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|//
comment|// It might take anywhere between 5 to 10 minutes before
comment|// a request is timed out.
comment|//
DECL|field|checkTimeout
specifier|private
name|long
name|checkTimeout
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// minimum value
DECL|field|blockStorageMovementNeeded
specifier|private
name|BlockStorageMovementNeeded
name|blockStorageMovementNeeded
decl_stmt|;
DECL|method|BlockStorageMovementAttemptedItems (long timeoutPeriod, long selfRetryTimeout, BlockStorageMovementNeeded unsatisfiedStorageMovementFiles)
specifier|public
name|BlockStorageMovementAttemptedItems
parameter_list|(
name|long
name|timeoutPeriod
parameter_list|,
name|long
name|selfRetryTimeout
parameter_list|,
name|BlockStorageMovementNeeded
name|unsatisfiedStorageMovementFiles
parameter_list|)
block|{
if|if
condition|(
name|timeoutPeriod
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|checkTimeout
operator|=
name|Math
operator|.
name|min
argument_list|(
name|checkTimeout
argument_list|,
name|timeoutPeriod
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|selfRetryTimeout
operator|=
name|selfRetryTimeout
expr_stmt|;
name|this
operator|.
name|blockStorageMovementNeeded
operator|=
name|unsatisfiedStorageMovementFiles
expr_stmt|;
name|storageMovementAttemptedItems
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|storageMovementAttemptedResults
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add item to block storage movement attempted items map which holds the    * tracking/blockCollection id versus time stamp.    *    * @param blockCollectionID    *          - tracking id / block collection id    */
DECL|method|add (Long blockCollectionID)
specifier|public
name|void
name|add
parameter_list|(
name|Long
name|blockCollectionID
parameter_list|)
block|{
synchronized|synchronized
init|(
name|storageMovementAttemptedItems
init|)
block|{
name|storageMovementAttemptedItems
operator|.
name|put
argument_list|(
name|blockCollectionID
argument_list|,
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add the trackIDBlocksStorageMovementResults to    * storageMovementAttemptedResults.    *    * @param blksMovementResults    */
DECL|method|addResults (BlocksStorageMovementResult[] blksMovementResults)
specifier|public
name|void
name|addResults
parameter_list|(
name|BlocksStorageMovementResult
index|[]
name|blksMovementResults
parameter_list|)
block|{
if|if
condition|(
name|blksMovementResults
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|storageMovementAttemptedResults
init|)
block|{
name|storageMovementAttemptedResults
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|blksMovementResults
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Starts the monitor thread.    */
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
name|monitorRunning
operator|=
literal|true
expr_stmt|;
name|timerThread
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|BlocksStorageMovementAttemptResultMonitor
argument_list|()
argument_list|)
expr_stmt|;
name|timerThread
operator|.
name|setName
argument_list|(
literal|"BlocksStorageMovementAttemptResultMonitor"
argument_list|)
expr_stmt|;
name|timerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stops the monitor thread.    */
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|monitorRunning
operator|=
literal|false
expr_stmt|;
name|timerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|timerThread
operator|.
name|join
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{     }
name|this
operator|.
name|clearQueues
argument_list|()
expr_stmt|;
block|}
comment|/**    * A monitor class for checking block storage movement result and long waiting    * items periodically.    */
DECL|class|BlocksStorageMovementAttemptResultMonitor
specifier|private
class|class
name|BlocksStorageMovementAttemptResultMonitor
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|monitorRunning
condition|)
block|{
try|try
block|{
name|blockStorageMovementResultCheck
argument_list|()
expr_stmt|;
name|blocksStorageMovementUnReportedItemsCheck
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|checkTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"BlocksStorageMovementAttemptResultMonitor thread "
operator|+
literal|"is interrupted."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|blocksStorageMovementUnReportedItemsCheck ()
specifier|private
name|void
name|blocksStorageMovementUnReportedItemsCheck
parameter_list|()
block|{
synchronized|synchronized
init|(
name|storageMovementAttemptedItems
init|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iter
init|=
name|storageMovementAttemptedItems
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|entry
operator|.
name|getValue
argument_list|()
operator|+
name|selfRetryTimeout
condition|)
block|{
name|Long
name|blockCollectionID
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|storageMovementAttemptedResults
init|)
block|{
name|boolean
name|exist
init|=
name|isExistInResult
argument_list|(
name|blockCollectionID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exist
condition|)
block|{
name|blockStorageMovementNeeded
operator|.
name|add
argument_list|(
name|blockCollectionID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Blocks storage movement results for the"
operator|+
literal|" tracking id : "
operator|+
name|blockCollectionID
operator|+
literal|" is reported from one of the co-ordinating datanode."
operator|+
literal|" So, the result will be processed soon."
argument_list|)
expr_stmt|;
block|}
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|isExistInResult (Long blockCollectionID)
specifier|private
name|boolean
name|isExistInResult
parameter_list|(
name|Long
name|blockCollectionID
parameter_list|)
block|{
name|Iterator
argument_list|<
name|BlocksStorageMovementResult
argument_list|>
name|iter
init|=
name|storageMovementAttemptedResults
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BlocksStorageMovementResult
name|storageMovementAttemptedResult
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageMovementAttemptedResult
operator|.
name|getTrackId
argument_list|()
operator|==
name|blockCollectionID
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|blockStorageMovementResultCheck ()
specifier|private
name|void
name|blockStorageMovementResultCheck
parameter_list|()
block|{
synchronized|synchronized
init|(
name|storageMovementAttemptedResults
init|)
block|{
name|Iterator
argument_list|<
name|BlocksStorageMovementResult
argument_list|>
name|iter
init|=
name|storageMovementAttemptedResults
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BlocksStorageMovementResult
name|storageMovementAttemptedResult
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|storageMovementAttemptedResult
operator|.
name|getStatus
argument_list|()
operator|==
name|BlocksStorageMovementResult
operator|.
name|Status
operator|.
name|FAILURE
condition|)
block|{
name|blockStorageMovementNeeded
operator|.
name|add
argument_list|(
name|storageMovementAttemptedResult
operator|.
name|getTrackId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Blocks storage movement results for the tracking id : "
operator|+
name|storageMovementAttemptedResult
operator|.
name|getTrackId
argument_list|()
operator|+
literal|" is reported from co-ordinating datanode, but result"
operator|+
literal|" status is FAILURE. So, added for retry"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|storageMovementAttemptedItems
init|)
block|{
name|storageMovementAttemptedItems
operator|.
name|remove
argument_list|(
name|storageMovementAttemptedResult
operator|.
name|getTrackId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Blocks storage movement results for the tracking id : "
operator|+
name|storageMovementAttemptedResult
operator|.
name|getTrackId
argument_list|()
operator|+
literal|" is reported from co-ordinating datanode. "
operator|+
literal|"The result status is SUCCESS."
argument_list|)
expr_stmt|;
block|}
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// remove from results as processed above
block|}
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|resultsCount ()
specifier|public
name|int
name|resultsCount
parameter_list|()
block|{
return|return
name|storageMovementAttemptedResults
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAttemptedItemsCount ()
specifier|public
name|int
name|getAttemptedItemsCount
parameter_list|()
block|{
return|return
name|storageMovementAttemptedItems
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|clearQueues ()
specifier|public
name|void
name|clearQueues
parameter_list|()
block|{
name|storageMovementAttemptedResults
operator|.
name|clear
argument_list|()
expr_stmt|;
name|storageMovementAttemptedItems
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

