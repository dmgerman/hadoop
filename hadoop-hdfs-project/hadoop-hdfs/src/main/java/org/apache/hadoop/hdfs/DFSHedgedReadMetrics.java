begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * The client-side metrics for hedged read feature.  * This class has a number of metrics variables that are publicly accessible,  * we can grab them from client side, like HBase.  */
end_comment

begin_class
DECL|class|DFSHedgedReadMetrics
specifier|public
class|class
name|DFSHedgedReadMetrics
block|{
DECL|field|hedgedReadOps
specifier|public
specifier|final
name|AtomicLong
name|hedgedReadOps
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|hedgedReadOpsWin
specifier|public
specifier|final
name|AtomicLong
name|hedgedReadOpsWin
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|hedgedReadOpsInCurThread
specifier|public
specifier|final
name|AtomicLong
name|hedgedReadOpsInCurThread
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|incHedgedReadOps ()
specifier|public
name|void
name|incHedgedReadOps
parameter_list|()
block|{
name|hedgedReadOps
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|incHedgedReadOpsInCurThread ()
specifier|public
name|void
name|incHedgedReadOpsInCurThread
parameter_list|()
block|{
name|hedgedReadOpsInCurThread
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|incHedgedReadWins ()
specifier|public
name|void
name|incHedgedReadWins
parameter_list|()
block|{
name|hedgedReadOpsWin
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|getHedgedReadOps ()
specifier|public
name|long
name|getHedgedReadOps
parameter_list|()
block|{
return|return
name|hedgedReadOps
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|getHedgedReadOpsInCurThread ()
specifier|public
name|long
name|getHedgedReadOpsInCurThread
parameter_list|()
block|{
return|return
name|hedgedReadOpsInCurThread
operator|.
name|longValue
argument_list|()
return|;
block|}
DECL|method|getHedgedReadWins ()
specifier|public
name|long
name|getHedgedReadWins
parameter_list|()
block|{
return|return
name|hedgedReadOpsWin
operator|.
name|longValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

