begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|HostsFileReader
import|;
end_import

begin_comment
comment|/**  * This class manages the include and exclude files for HDFS.  *   * These files control which DataNodes the NameNode expects to see in the  * cluster.  Loosely speaking, the include file, if it exists and is not  * empty, is a list of everything we expect to see.  The exclude file is   * a list of everything we want to ignore if we do see it.  *  * Entries may or may not specify a port.  If they don't, we consider  * them to apply to every DataNode on that host.  For example, putting   * 192.168.0.100 in the excludes file blacklists both 192.168.0.100:5000 and  * 192.168.0.100:6000.  This case comes up in unit tests.  *  * When reading the hosts files, we try to find the IP address for each  * entry.  This is important because it allows us to de-duplicate entries.  * If the user specifies a node as foo.bar.com in the include file, but  * 192.168.0.100 in the exclude file, we need to realize that these are   * the same node.  Resolving the IP address also allows us to give more  * information back to getDatanodeListForReport, which makes the web UI   * look nicer (among other things.)  See HDFS-3934 for more details.  *  * DNS resolution can be slow.  For this reason, we ONLY do it when (re)reading  * the hosts files.  In all other cases, we rely on the cached values either  * in the DatanodeID objects, or in HostFileManager#Entry.  * We also don't want to be holding locks when doing this.  * See HDFS-3990 for more discussion of DNS overheads.  *   * Not all entries in the hosts files will have an associated IP address.   * Some entries may be "registration names."  The "registration name" of   * a DataNode is either the actual hostname, or an arbitrary string configured  * by dfs.datanode.hostname.  It's possible to add registration names to the  * include or exclude files.  If we can't find an IP address associated with  * a host file entry, we assume it's a registered hostname and act accordingly.  * The "registration name" feature is a little odd and it may be removed in the  * future (I hope?)  */
end_comment

begin_class
DECL|class|HostFileManager
specifier|public
class|class
name|HostFileManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HostFileManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|Entry
specifier|public
specifier|static
class|class
name|Entry
block|{
comment|/**      * This what the user put on the line before the colon, or the whole line      * if there is no colon.      */
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
comment|/**      * This is the port which was specified after the colon.  It is 0 if no      * port was given.      */
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
comment|/**      * If we can resolve the IP address, this is it.  Otherwise, it is the       * empty string.      */
DECL|field|ipAddress
specifier|private
specifier|final
name|String
name|ipAddress
decl_stmt|;
comment|/**      * Parse a hosts file Entry.      */
DECL|method|parse (String fileName, String entry)
specifier|static
name|Entry
name|parse
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|prefix
decl_stmt|;
specifier|final
name|int
name|port
decl_stmt|;
name|String
name|ipAddress
init|=
literal|""
decl_stmt|;
name|int
name|idx
init|=
name|entry
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|idx
condition|)
block|{
name|prefix
operator|=
name|entry
expr_stmt|;
name|port
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|entry
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|String
name|portStr
init|=
name|entry
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|portStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unable to parse port number for "
operator|+
literal|"'"
operator|+
name|entry
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
comment|// Let's see if we can resolve this prefix to an IP address.
comment|// This may fail; one example is with a registered hostname
comment|// which is not actually a real DNS name.
name|InetAddress
name|addr
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|ipAddress
operator|=
name|addr
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"When reading "
operator|+
name|fileName
operator|+
literal|", could not look up "
operator|+
literal|"IP address for "
operator|+
name|prefix
operator|+
literal|".  We will assume this is a "
operator|+
literal|"registration name."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Entry
argument_list|(
name|prefix
argument_list|,
name|port
argument_list|,
name|ipAddress
argument_list|)
return|;
block|}
DECL|method|getIdentifier ()
specifier|public
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|ipAddress
operator|.
name|isEmpty
argument_list|()
condition|?
name|prefix
else|:
name|ipAddress
return|;
block|}
DECL|method|Entry (String prefix, int port, String ipAddress)
specifier|public
name|Entry
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|ipAddress
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|ipAddress
operator|=
name|ipAddress
expr_stmt|;
block|}
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|getIpAddress ()
specifier|public
name|String
name|getIpAddress
parameter_list|()
block|{
return|return
name|ipAddress
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|bld
operator|.
name|append
argument_list|(
literal|"Entry{"
argument_list|)
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|", port="
argument_list|)
operator|.
name|append
argument_list|(
name|port
argument_list|)
operator|.
name|append
argument_list|(
literal|", ipAddress="
argument_list|)
operator|.
name|append
argument_list|(
name|ipAddress
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|bld
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|EntrySet
specifier|public
specifier|static
class|class
name|EntrySet
implements|implements
name|Iterable
argument_list|<
name|Entry
argument_list|>
block|{
comment|/**      * The index.  Each Entry appears in here exactly once.      *      * It may be indexed by one of:      *     ipAddress:port      *     ipAddress      *     registeredHostname:port      *     registeredHostname      *           * The different indexing strategies reflect the fact that we may or may      * not have a port or IP address for each entry.      */
DECL|field|index
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|>
name|index
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|index
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|find (DatanodeID datanodeID)
specifier|public
name|Entry
name|find
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|)
block|{
name|Entry
name|entry
decl_stmt|;
name|int
name|xferPort
init|=
name|datanodeID
operator|.
name|getXferPort
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|xferPort
operator|>
literal|0
operator|)
assert|;
name|String
name|datanodeIpAddr
init|=
name|datanodeID
operator|.
name|getIpAddr
argument_list|()
decl_stmt|;
if|if
condition|(
name|datanodeIpAddr
operator|!=
literal|null
condition|)
block|{
name|entry
operator|=
name|index
operator|.
name|get
argument_list|(
name|datanodeIpAddr
operator|+
literal|":"
operator|+
name|xferPort
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|entry
return|;
block|}
name|entry
operator|=
name|index
operator|.
name|get
argument_list|(
name|datanodeIpAddr
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
name|String
name|registeredHostName
init|=
name|datanodeID
operator|.
name|getHostName
argument_list|()
decl_stmt|;
if|if
condition|(
name|registeredHostName
operator|!=
literal|null
condition|)
block|{
name|entry
operator|=
name|index
operator|.
name|get
argument_list|(
name|registeredHostName
operator|+
literal|":"
operator|+
name|xferPort
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|entry
return|;
block|}
name|entry
operator|=
name|index
operator|.
name|get
argument_list|(
name|registeredHostName
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|find (Entry toFind)
specifier|public
name|Entry
name|find
parameter_list|(
name|Entry
name|toFind
parameter_list|)
block|{
name|int
name|port
init|=
name|toFind
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|!=
literal|0
condition|)
block|{
return|return
name|index
operator|.
name|get
argument_list|(
name|toFind
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|":"
operator|+
name|port
argument_list|)
return|;
block|}
else|else
block|{
comment|// An Entry with no port matches any entry with the same identifer.
comment|// In other words, we treat 0 as "any port."
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|>
name|ceil
init|=
name|index
operator|.
name|ceilingEntry
argument_list|(
name|toFind
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ceil
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|ceil
operator|.
name|getValue
argument_list|()
operator|.
name|getIdentifier
argument_list|()
operator|.
name|equals
argument_list|(
name|toFind
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
name|ceil
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|bld
operator|.
name|append
argument_list|(
literal|"HostSet("
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Entry
argument_list|>
name|entry
range|:
name|index
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|bld
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"->"
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bld
operator|.
name|append
argument_list|(
literal|"\n)"
argument_list|)
expr_stmt|;
return|return
name|bld
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|index
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
DECL|class|MutableEntrySet
specifier|public
specifier|static
class|class
name|MutableEntrySet
extends|extends
name|EntrySet
block|{
DECL|method|add (DatanodeID datanodeID)
specifier|public
name|void
name|add
parameter_list|(
name|DatanodeID
name|datanodeID
parameter_list|)
block|{
name|Entry
name|entry
init|=
operator|new
name|Entry
argument_list|(
name|datanodeID
operator|.
name|getHostName
argument_list|()
argument_list|,
name|datanodeID
operator|.
name|getXferPort
argument_list|()
argument_list|,
name|datanodeID
operator|.
name|getIpAddr
argument_list|()
argument_list|)
decl_stmt|;
name|index
operator|.
name|put
argument_list|(
name|datanodeID
operator|.
name|getIpAddr
argument_list|()
operator|+
literal|":"
operator|+
name|datanodeID
operator|.
name|getXferPort
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
DECL|method|add (Entry entry)
specifier|public
name|void
name|add
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|int
name|port
init|=
name|entry
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|!=
literal|0
condition|)
block|{
name|index
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getIdentifier
argument_list|()
operator|+
literal|":"
operator|+
name|port
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|index
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFile (String type, String filename)
name|void
name|readFile
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|filename
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|HashSet
argument_list|<
name|String
argument_list|>
name|entrySet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HostsFileReader
operator|.
name|readFileToSet
argument_list|(
name|type
argument_list|,
name|filename
argument_list|,
name|entrySet
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|str
range|:
name|entrySet
control|)
block|{
name|Entry
name|entry
init|=
name|Entry
operator|.
name|parse
argument_list|(
name|filename
argument_list|,
name|str
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|includes
specifier|private
name|EntrySet
name|includes
init|=
operator|new
name|EntrySet
argument_list|()
decl_stmt|;
DECL|field|excludes
specifier|private
name|EntrySet
name|excludes
init|=
operator|new
name|EntrySet
argument_list|()
decl_stmt|;
DECL|method|HostFileManager ()
specifier|public
name|HostFileManager
parameter_list|()
block|{   }
DECL|method|refresh (String includeFile, String excludeFile)
specifier|public
name|void
name|refresh
parameter_list|(
name|String
name|includeFile
parameter_list|,
name|String
name|excludeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|MutableEntrySet
name|newIncludes
init|=
operator|new
name|MutableEntrySet
argument_list|()
decl_stmt|;
name|IOException
name|includeException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newIncludes
operator|.
name|readFile
argument_list|(
literal|"included"
argument_list|,
name|includeFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|includeException
operator|=
name|e
expr_stmt|;
block|}
name|MutableEntrySet
name|newExcludes
init|=
operator|new
name|MutableEntrySet
argument_list|()
decl_stmt|;
name|IOException
name|excludeException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newExcludes
operator|.
name|readFile
argument_list|(
literal|"excluded"
argument_list|,
name|excludeFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|excludeException
operator|=
name|e
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|includeException
operator|==
literal|null
condition|)
block|{
name|includes
operator|=
name|newIncludes
expr_stmt|;
block|}
if|if
condition|(
name|excludeException
operator|==
literal|null
condition|)
block|{
name|excludes
operator|=
name|newExcludes
expr_stmt|;
block|}
block|}
if|if
condition|(
name|includeException
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"read includes:\n"
operator|+
name|newIncludes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to read include file '"
operator|+
name|includeFile
operator|+
literal|"'. "
operator|+
literal|"Continuing to use previous include list."
argument_list|,
name|includeException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeException
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"read excludes:\n"
operator|+
name|newExcludes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to read exclude file '"
operator|+
name|excludeFile
operator|+
literal|"'."
operator|+
literal|"Continuing to use previous exclude list."
argument_list|,
name|excludeException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeException
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"error reading hosts file "
operator|+
name|includeFile
argument_list|,
name|includeException
argument_list|)
throw|;
block|}
if|if
condition|(
name|excludeException
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"error reading exclude file "
operator|+
name|excludeFile
argument_list|,
name|excludeException
argument_list|)
throw|;
block|}
block|}
DECL|method|isIncluded (DatanodeID dn)
specifier|public
specifier|synchronized
name|boolean
name|isIncluded
parameter_list|(
name|DatanodeID
name|dn
parameter_list|)
block|{
if|if
condition|(
name|includes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If the includes list is empty, act as if everything is in the
comment|// includes list.
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|includes
operator|.
name|find
argument_list|(
name|dn
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
DECL|method|isExcluded (DatanodeID dn)
specifier|public
specifier|synchronized
name|boolean
name|isExcluded
parameter_list|(
name|DatanodeID
name|dn
parameter_list|)
block|{
return|return
name|excludes
operator|.
name|find
argument_list|(
name|dn
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|hasIncludes ()
specifier|public
specifier|synchronized
name|boolean
name|hasIncludes
parameter_list|()
block|{
return|return
operator|!
name|includes
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**    * @return          the includes as an immutable set.    */
DECL|method|getIncludes ()
specifier|public
specifier|synchronized
name|EntrySet
name|getIncludes
parameter_list|()
block|{
return|return
name|includes
return|;
block|}
comment|/**    * @return          the excludes as an immutable set.    */
DECL|method|getExcludes ()
specifier|public
specifier|synchronized
name|EntrySet
name|getExcludes
parameter_list|()
block|{
return|return
name|excludes
return|;
block|}
block|}
end_class

end_unit

