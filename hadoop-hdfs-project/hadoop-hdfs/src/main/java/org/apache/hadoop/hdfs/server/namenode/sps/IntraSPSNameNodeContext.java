begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.sps
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|sps
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|XATTR_SATISFY_STORAGE_POLICY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ParentNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|Namesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class is the Namenode implementation for analyzing the file blocks which  * are expecting to change its storages and assigning the block storage  * movements to satisfy the storage policy.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|IntraSPSNameNodeContext
specifier|public
class|class
name|IntraSPSNameNodeContext
implements|implements
name|Context
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IntraSPSNameNodeContext
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|namesystem
specifier|private
specifier|final
name|Namesystem
name|namesystem
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|service
specifier|private
name|SPSService
name|service
decl_stmt|;
DECL|method|IntraSPSNameNodeContext (Namesystem namesystem, BlockManager blockManager, SPSService service)
specifier|public
name|IntraSPSNameNodeContext
parameter_list|(
name|Namesystem
name|namesystem
parameter_list|,
name|BlockManager
name|blockManager
parameter_list|,
name|SPSService
name|service
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
name|this
operator|.
name|blockManager
operator|=
name|blockManager
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNumLiveDataNodes ()
specifier|public
name|int
name|getNumLiveDataNodes
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumLiveDataNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getFileInfo (long inodeID)
specifier|public
name|HdfsFileStatus
name|getFileInfo
parameter_list|(
name|long
name|inodeID
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|filePath
init|=
name|namesystem
operator|.
name|getFilePath
argument_list|(
name|inodeID
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"File with inodeID:{} doesn't exists!"
argument_list|,
name|inodeID
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|HdfsFileStatus
name|fileInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileInfo
operator|=
name|namesystem
operator|.
name|getFileInfo
argument_list|(
name|filePath
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"File path:{} doesn't exists!"
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
block|}
return|return
name|fileInfo
return|;
block|}
annotation|@
name|Override
DECL|method|getLiveDatanodeStorageReport ()
specifier|public
name|DatanodeStorageReport
index|[]
name|getLiveDatanodeStorageReport
parameter_list|()
throws|throws
name|IOException
block|{
name|namesystem
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeStorageReport
argument_list|(
name|DatanodeReportType
operator|.
name|LIVE
argument_list|)
return|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasLowRedundancyBlocks (long inodeId)
specifier|public
name|boolean
name|hasLowRedundancyBlocks
parameter_list|(
name|long
name|inodeId
parameter_list|)
block|{
return|return
name|blockManager
operator|.
name|hasLowRedundancyBlocks
argument_list|(
name|inodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isFileExist (long inodeId)
specifier|public
name|boolean
name|isFileExist
parameter_list|(
name|long
name|inodeId
parameter_list|)
block|{
return|return
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getInode
argument_list|(
name|inodeId
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|removeSPSHint (long inodeId)
specifier|public
name|void
name|removeSPSHint
parameter_list|(
name|long
name|inodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|namesystem
operator|.
name|removeXattr
argument_list|(
name|inodeId
argument_list|,
name|XATTR_SATISFY_STORAGE_POLICY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|namesystem
operator|.
name|isRunning
argument_list|()
operator|&&
name|service
operator|.
name|isRunning
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isInSafeMode ()
specifier|public
name|boolean
name|isInSafeMode
parameter_list|()
block|{
return|return
name|namesystem
operator|.
name|isInSafeMode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isMoverRunning ()
specifier|public
name|boolean
name|isMoverRunning
parameter_list|()
block|{
name|String
name|moverId
init|=
name|HdfsServerConstants
operator|.
name|MOVER_ID_PATH
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|namesystem
operator|.
name|isFileOpenedForWrite
argument_list|(
name|moverId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addDropPreviousSPSWorkAtDNs ()
specifier|public
name|void
name|addDropPreviousSPSWorkAtDNs
parameter_list|()
block|{
name|namesystem
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|addDropSPSWorkCommandsToAllDNs
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStoragePolicy (byte policyID)
specifier|public
name|BlockStoragePolicy
name|getStoragePolicy
parameter_list|(
name|byte
name|policyID
parameter_list|)
block|{
return|return
name|blockManager
operator|.
name|getStoragePolicy
argument_list|(
name|policyID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNetworkTopology ()
specifier|public
name|NetworkTopology
name|getNetworkTopology
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNetworkTopology
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getFileID (String path)
specifier|public
name|long
name|getFileID
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|AccessControlException
throws|,
name|ParentNotDirectoryException
block|{
name|namesystem
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|INode
name|inode
init|=
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|inode
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|inode
operator|.
name|getId
argument_list|()
return|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|checkDNSpaceForScheduling (DatanodeInfo dn, StorageType type, long blockSize)
specifier|public
name|boolean
name|checkDNSpaceForScheduling
parameter_list|(
name|DatanodeInfo
name|dn
parameter_list|,
name|StorageType
name|type
parameter_list|,
name|long
name|blockSize
parameter_list|)
block|{
name|namesystem
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|DatanodeDescriptor
name|datanode
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|datanode
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Target datanode: "
operator|+
name|dn
operator|+
literal|" doesn't exists"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|null
operator|!=
name|datanode
operator|.
name|chooseStorage4Block
argument_list|(
name|type
argument_list|,
name|blockSize
argument_list|)
return|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNextSPSPathId ()
specifier|public
name|Long
name|getNextSPSPathId
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getNextSPSPathId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|removeSPSPathId (long trackId)
specifier|public
name|void
name|removeSPSPathId
parameter_list|(
name|long
name|trackId
parameter_list|)
block|{
name|blockManager
operator|.
name|removeSPSPathId
argument_list|(
name|trackId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeAllSPSPathIds ()
specifier|public
name|void
name|removeAllSPSPathIds
parameter_list|()
block|{
name|blockManager
operator|.
name|removeAllSPSPathIds
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilePath (Long inodeId)
specifier|public
name|String
name|getFilePath
parameter_list|(
name|Long
name|inodeId
parameter_list|)
block|{
return|return
name|namesystem
operator|.
name|getFilePath
argument_list|(
name|inodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Nothing to clean.
block|}
block|}
end_class

end_unit

