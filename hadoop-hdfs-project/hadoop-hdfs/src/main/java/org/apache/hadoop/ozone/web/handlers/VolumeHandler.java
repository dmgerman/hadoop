begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.handlers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|ErrorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|exceptions
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|interfaces
operator|.
name|StorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|interfaces
operator|.
name|UserAuth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|interfaces
operator|.
name|Volume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_CREATED
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_FUNCTION
import|;
end_import

begin_comment
comment|/**  * VolumeHandler handles volume specific HTTP calls.  *  * Most functions in this file follow a simple pattern.  * All calls are handled by VolumeProcessTemplate.handleCall, which  * calls back into doProcess function.  *  * Everything common to volume handling is abstracted out in handleCall function  * For Example : Checking that volume name is sane, we have a supported  * ozone version number and a valid date. That is everything common is in  * handleCall and actions specific to a call is inside doProcess callback.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|VolumeHandler
specifier|public
class|class
name|VolumeHandler
implements|implements
name|Volume
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VolumeHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Creates a volume.    *    * @param volume Volume Name, this has to be unique at Ozone cluster level    * @param quota Quota for this Storage Volume -<int>(<BYTES|MB|GB|TB>)    * @param req Request Object    * @param uriInfo URI info    * @param headers Http Headers    *    * @return Standard JAX-RS Response    *    * @throws OzoneException    */
annotation|@
name|Override
DECL|method|createVolume (String volume, final String quota, Request req, UriInfo uriInfo, HttpHeaders headers)
specifier|public
name|Response
name|createVolume
parameter_list|(
name|String
name|volume
parameter_list|,
specifier|final
name|String
name|quota
parameter_list|,
name|Request
name|req
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|OzoneException
block|{
name|MDC
operator|.
name|put
argument_list|(
name|OZONE_FUNCTION
argument_list|,
literal|"createVolume"
argument_list|)
expr_stmt|;
return|return
operator|new
name|VolumeProcessTemplate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|doProcess
parameter_list|(
name|VolumeArgs
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|UserAuth
name|auth
init|=
name|UserHandlerBuilder
operator|.
name|getAuthHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|auth
operator|.
name|isAdmin
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|args
operator|.
name|setAdminName
argument_list|(
name|args
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|volumeOwner
init|=
name|auth
operator|.
name|getOzoneUser
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeOwner
operator|==
literal|null
condition|)
block|{
throw|throw
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|USER_NOT_FOUND
argument_list|,
name|args
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|auth
operator|.
name|isUser
argument_list|(
name|volumeOwner
argument_list|,
name|args
argument_list|)
condition|)
block|{
throw|throw
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|USER_NOT_FOUND
argument_list|,
name|args
argument_list|)
throw|;
block|}
name|args
operator|.
name|setUserName
argument_list|(
name|volumeOwner
argument_list|)
expr_stmt|;
name|args
operator|.
name|setGroups
argument_list|(
name|auth
operator|.
name|getGroups
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|quota
operator|.
name|equals
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_UNDEFINED
argument_list|)
condition|)
block|{
name|setQuotaArgs
argument_list|(
name|args
argument_list|,
name|quota
argument_list|)
expr_stmt|;
block|}
name|StorageHandler
name|fs
init|=
name|StorageHandlerBuilder
operator|.
name|getStorageHandler
argument_list|()
decl_stmt|;
name|fs
operator|.
name|createVolume
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|OzoneUtils
operator|.
name|getResponse
argument_list|(
name|args
argument_list|,
name|HTTP_CREATED
argument_list|,
literal|""
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|ACCESS_DENIED
argument_list|,
name|args
argument_list|)
throw|;
block|}
block|}
block|}
operator|.
name|handleCall
argument_list|(
name|volume
argument_list|,
name|req
argument_list|,
name|uriInfo
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**    * Updates  volume metadata.    *    * There are only two actions possible currently with updateVolume.    * Change the volume ownership or update quota. if you make a call    * with neither of these actions, update just returns 200 OK.    *    * @param volume Volume Name, this has to be unique at Ozone Level    * @param quota Quota for this volume -<int>(<BYTES|MB|GB|TB>)|remove    * @param req - Request Object    * @param uriInfo - URI info    * @param headers Http Headers    *    * @return Standard JAX-RS Response    *    * @throws OzoneException    */
annotation|@
name|Override
DECL|method|updateVolume (String volume, final String quota, Request req, UriInfo uriInfo, HttpHeaders headers)
specifier|public
name|Response
name|updateVolume
parameter_list|(
name|String
name|volume
parameter_list|,
specifier|final
name|String
name|quota
parameter_list|,
name|Request
name|req
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|OzoneException
block|{
name|MDC
operator|.
name|put
argument_list|(
name|OZONE_FUNCTION
argument_list|,
literal|"updateVolume"
argument_list|)
expr_stmt|;
return|return
operator|new
name|VolumeProcessTemplate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|doProcess
parameter_list|(
name|VolumeArgs
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|UserAuth
name|auth
init|=
name|UserHandlerBuilder
operator|.
name|getAuthHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|auth
operator|.
name|isAdmin
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|StorageHandler
name|fs
init|=
name|StorageHandlerBuilder
operator|.
name|getStorageHandler
argument_list|()
decl_stmt|;
name|args
operator|.
name|setAdminName
argument_list|(
name|args
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|newVolumeOwner
init|=
name|auth
operator|.
name|getOzoneUser
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|newVolumeOwner
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|auth
operator|.
name|isUser
argument_list|(
name|newVolumeOwner
argument_list|,
name|args
argument_list|)
condition|)
block|{
throw|throw
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|USER_NOT_FOUND
argument_list|,
name|args
argument_list|)
throw|;
block|}
name|args
operator|.
name|setUserName
argument_list|(
name|newVolumeOwner
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setVolumeOwner
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|quota
operator|.
name|equals
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_UNDEFINED
argument_list|)
condition|)
block|{
if|if
condition|(
name|quota
operator|.
name|equals
argument_list|(
name|Header
operator|.
name|OZONE_QUOTA_REMOVE
argument_list|)
condition|)
block|{
comment|// if it is remove, just tell the file system to remove quota
name|fs
operator|.
name|setVolumeQuota
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setQuotaArgs
argument_list|(
name|args
argument_list|,
name|quota
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setVolumeQuota
argument_list|(
name|args
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|OzoneUtils
operator|.
name|getResponse
argument_list|(
name|args
argument_list|,
name|HTTP_OK
argument_list|,
literal|""
argument_list|)
return|;
block|}
else|else
block|{
comment|// Only Admins are allowed to update volumes
throw|throw
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|ACCESS_DENIED
argument_list|,
name|args
argument_list|)
throw|;
block|}
block|}
block|}
operator|.
name|handleCall
argument_list|(
name|volume
argument_list|,
name|req
argument_list|,
name|uriInfo
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**    * Deletes a volume if it is empty.    *    * @param volume Volume Name    * @param req - Http Request    * @param uriInfo - http URI    * @param headers - http headers    *    * @return Standard JAX-RS Response    *    * @throws OzoneException    */
annotation|@
name|Override
DECL|method|deleteVolume (String volume, Request req, UriInfo uriInfo, HttpHeaders headers)
specifier|public
name|Response
name|deleteVolume
parameter_list|(
name|String
name|volume
parameter_list|,
name|Request
name|req
parameter_list|,
name|UriInfo
name|uriInfo
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|OzoneException
block|{
name|MDC
operator|.
name|put
argument_list|(
name|OZONE_FUNCTION
argument_list|,
literal|"deleteVolume"
argument_list|)
expr_stmt|;
return|return
operator|new
name|VolumeProcessTemplate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|doProcess
parameter_list|(
name|VolumeArgs
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|UserAuth
name|auth
init|=
name|UserHandlerBuilder
operator|.
name|getAuthHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|auth
operator|.
name|isAdmin
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|StorageHandler
name|fs
init|=
name|StorageHandlerBuilder
operator|.
name|getStorageHandler
argument_list|()
decl_stmt|;
name|fs
operator|.
name|deleteVolume
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|OzoneUtils
operator|.
name|getResponse
argument_list|(
name|args
argument_list|,
name|HTTP_OK
argument_list|,
literal|""
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|ACCESS_DENIED
argument_list|,
name|args
argument_list|)
throw|;
block|}
block|}
block|}
operator|.
name|handleCall
argument_list|(
name|volume
argument_list|,
name|req
argument_list|,
name|uriInfo
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**    * Returns Volume info. This API can be invoked either by admin or the owner    *    * @param volume  - Storage Volume Name    * @param info    - Info attribute    * @param prefix  - Prefix key    * @param maxKeys - Max results    * @param prevKey - PrevKey    * @param req     - Http Req    * @param uriInfo - UriInfo.    * @param headers - Http headers    * @return    * @throws OzoneException    */
annotation|@
name|Override
DECL|method|getVolumeInfo (String volume, final String info, final String prefix, final int maxKeys, final String prevKey, final boolean rootScan, Request req, final UriInfo uriInfo, HttpHeaders headers)
specifier|public
name|Response
name|getVolumeInfo
parameter_list|(
name|String
name|volume
parameter_list|,
specifier|final
name|String
name|info
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|int
name|maxKeys
parameter_list|,
specifier|final
name|String
name|prevKey
parameter_list|,
specifier|final
name|boolean
name|rootScan
parameter_list|,
name|Request
name|req
parameter_list|,
specifier|final
name|UriInfo
name|uriInfo
parameter_list|,
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|OzoneException
block|{
return|return
operator|new
name|VolumeProcessTemplate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|doProcess
parameter_list|(
name|VolumeArgs
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
switch|switch
condition|(
name|info
condition|)
block|{
case|case
name|Header
operator|.
name|OZONE_LIST_QUERY_BUCKET
case|:
name|MDC
operator|.
name|put
argument_list|(
name|OZONE_FUNCTION
argument_list|,
literal|"ListBucket"
argument_list|)
expr_stmt|;
return|return
name|getBucketsInVolume
argument_list|(
name|args
argument_list|,
name|prefix
argument_list|,
name|maxKeys
argument_list|,
name|prevKey
argument_list|)
return|;
case|case
name|Header
operator|.
name|OZONE_LIST_QUERY_VOLUME
case|:
name|MDC
operator|.
name|put
argument_list|(
name|OZONE_FUNCTION
argument_list|,
literal|"InfoVolume"
argument_list|)
expr_stmt|;
name|assertNoListParamPresent
argument_list|(
name|uriInfo
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|getVolumeInfoResponse
argument_list|(
name|args
argument_list|)
return|;
comment|// Return volume info
case|case
name|Header
operator|.
name|OZONE_LIST_QUERY_SERVICE
case|:
name|MDC
operator|.
name|put
argument_list|(
name|OZONE_FUNCTION
argument_list|,
literal|"ListVolume"
argument_list|)
expr_stmt|;
return|return
name|getVolumesByUser
argument_list|(
name|args
argument_list|,
name|prefix
argument_list|,
name|maxKeys
argument_list|,
name|prevKey
argument_list|,
name|rootScan
argument_list|)
return|;
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unrecognized query param : {} "
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|OzoneException
name|ozoneException
init|=
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|INVALID_QUERY_PARAM
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|ozoneException
operator|.
name|setMessage
argument_list|(
literal|"Unrecognized query param : "
operator|+
name|info
argument_list|)
expr_stmt|;
throw|throw
name|ozoneException
throw|;
block|}
block|}
block|}
operator|.
name|handleCall
argument_list|(
name|volume
argument_list|,
name|req
argument_list|,
name|uriInfo
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**    * Asserts no list query param is present during this call.    *    * @param uriInfo - UriInfo.   - UriInfo    * @param args    - Volume Args - VolumeArgs.    * @throws OzoneException    */
DECL|method|assertNoListParamPresent (final UriInfo uriInfo, VolumeArgs args)
specifier|private
name|void
name|assertNoListParamPresent
parameter_list|(
specifier|final
name|UriInfo
name|uriInfo
parameter_list|,
name|VolumeArgs
name|args
parameter_list|)
throws|throws
name|OzoneException
block|{
name|String
name|prefix
init|=
name|uriInfo
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"prefix"
argument_list|)
decl_stmt|;
name|String
name|maxKeys
init|=
name|uriInfo
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"max_keys"
argument_list|)
decl_stmt|;
name|String
name|prevKey
init|=
name|uriInfo
operator|.
name|getQueryParameters
argument_list|()
operator|.
name|getFirst
argument_list|(
literal|"prev_key"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|prefix
operator|.
name|equals
argument_list|(
name|Header
operator|.
name|OZONE_EMPTY_STRING
argument_list|)
operator|)
operator|||
operator|(
name|maxKeys
operator|!=
literal|null
operator|&&
operator|!
name|maxKeys
operator|.
name|equals
argument_list|(
name|Header
operator|.
name|OZONE_DEFAULT_LIST_SIZE
argument_list|)
operator|)
operator|||
operator|(
name|prevKey
operator|!=
literal|null
operator|&&
operator|!
name|prevKey
operator|.
name|equals
argument_list|(
name|Header
operator|.
name|OZONE_EMPTY_STRING
argument_list|)
operator|)
condition|)
block|{
throw|throw
name|ErrorTable
operator|.
name|newError
argument_list|(
name|ErrorTable
operator|.
name|INVALID_QUERY_PARAM
argument_list|,
name|args
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

