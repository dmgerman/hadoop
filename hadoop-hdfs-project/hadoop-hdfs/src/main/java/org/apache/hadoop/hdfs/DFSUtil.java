begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ADMIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_HTTPS_NEED_AUTH_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_HTTPS_NEED_AUTH_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_NAMENODE_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYPASSWORD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYSTORE_PASSWORD_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_TRUSTSTORE_PASSWORD_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DFSUtil
specifier|public
class|class
name|DFSUtil
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DFSUtil
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|DFSUtil ()
specifier|private
name|DFSUtil
parameter_list|()
block|{
comment|/* Hidden constructor */
block|}
DECL|field|SECURE_RANDOM
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SecureRandom
argument_list|>
name|SECURE_RANDOM
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SecureRandom
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SecureRandom
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|SecureRandom
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** @return a pseudo secure random number generator. */
DECL|method|getSecureRandom ()
specifier|public
specifier|static
name|SecureRandom
name|getSecureRandom
parameter_list|()
block|{
return|return
name|SECURE_RANDOM
operator|.
name|get
argument_list|()
return|;
block|}
comment|/** Shuffle the elements in the given array. */
DECL|method|shuffle (final T[] array)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|shuffle
parameter_list|(
specifier|final
name|T
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|!=
literal|null
operator|&&
name|array
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|n
init|=
name|array
operator|.
name|length
init|;
name|n
operator|>
literal|1
condition|;
control|)
block|{
specifier|final
name|int
name|randomIndex
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|n
operator|--
expr_stmt|;
if|if
condition|(
name|n
operator|!=
name|randomIndex
condition|)
block|{
specifier|final
name|T
name|tmp
init|=
name|array
index|[
name|randomIndex
index|]
decl_stmt|;
name|array
index|[
name|randomIndex
index|]
operator|=
name|array
index|[
name|n
index|]
expr_stmt|;
name|array
index|[
name|n
index|]
operator|=
name|tmp
expr_stmt|;
block|}
block|}
block|}
return|return
name|array
return|;
block|}
comment|/**    * Compartor for sorting DataNodeInfo[] based on decommissioned states.    * Decommissioned nodes are moved to the end of the array on sorting with    * this compartor.    */
DECL|field|DECOM_COMPARATOR
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|DatanodeInfo
argument_list|>
name|DECOM_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DatanodeInfo
name|a
parameter_list|,
name|DatanodeInfo
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|isDecommissioned
argument_list|()
operator|==
name|b
operator|.
name|isDecommissioned
argument_list|()
condition|?
literal|0
else|:
name|a
operator|.
name|isDecommissioned
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Comparator for sorting DataNodeInfo[] based on decommissioned/stale states.    * Decommissioned/stale nodes are moved to the end of the array on sorting    * with this comparator.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DecomStaleComparator
specifier|public
specifier|static
class|class
name|DecomStaleComparator
implements|implements
name|Comparator
argument_list|<
name|DatanodeInfo
argument_list|>
block|{
DECL|field|staleInterval
specifier|private
specifier|final
name|long
name|staleInterval
decl_stmt|;
comment|/**      * Constructor of DecomStaleComparator      *       * @param interval      *          The time interval for marking datanodes as stale is passed from      *          outside, since the interval may be changed dynamically      */
DECL|method|DecomStaleComparator (long interval)
specifier|public
name|DecomStaleComparator
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|staleInterval
operator|=
name|interval
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (DatanodeInfo a, DatanodeInfo b)
specifier|public
name|int
name|compare
parameter_list|(
name|DatanodeInfo
name|a
parameter_list|,
name|DatanodeInfo
name|b
parameter_list|)
block|{
comment|// Decommissioned nodes will still be moved to the end of the list
if|if
condition|(
name|a
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
return|return
name|b
operator|.
name|isDecommissioned
argument_list|()
condition|?
literal|0
else|:
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|b
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// Stale nodes will be moved behind the normal nodes
name|boolean
name|aStale
init|=
name|a
operator|.
name|isStale
argument_list|(
name|staleInterval
argument_list|)
decl_stmt|;
name|boolean
name|bStale
init|=
name|b
operator|.
name|isStale
argument_list|(
name|staleInterval
argument_list|)
decl_stmt|;
return|return
name|aStale
operator|==
name|bStale
condition|?
literal|0
else|:
operator|(
name|aStale
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
return|;
block|}
block|}
comment|/**    * Address matcher for matching an address to local address    */
DECL|field|LOCAL_ADDRESS_MATCHER
specifier|static
specifier|final
name|AddressMatcher
name|LOCAL_ADDRESS_MATCHER
init|=
operator|new
name|AddressMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|InetSocketAddress
name|s
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|isLocalAddress
argument_list|(
name|s
operator|.
name|getAddress
argument_list|()
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
comment|/**    * Whether the pathname is valid.  Currently prohibits relative paths,     * names which contain a ":" or "//", or other non-canonical paths.    */
DECL|method|isValidName (String src)
specifier|public
specifier|static
name|boolean
name|isValidName
parameter_list|(
name|String
name|src
parameter_list|)
block|{
return|return
name|DFSUtilClient
operator|.
name|isValidName
argument_list|(
name|src
argument_list|)
return|;
block|}
comment|/**    * Checks if a string is a valid path component. For instance, components    * cannot contain a ":" or "/", and cannot be equal to a reserved component    * like ".snapshot".    *<p>    * The primary use of this method is for validating paths when loading the    * FSImage. During normal NN operation, paths are sometimes allowed to    * contain reserved components.    *     * @return If component is valid    */
DECL|method|isValidNameForComponent (String component)
specifier|public
specifier|static
name|boolean
name|isValidNameForComponent
parameter_list|(
name|String
name|component
parameter_list|)
block|{
if|if
condition|(
name|component
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|component
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
operator|||
name|component
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|>=
literal|0
operator|||
name|component
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|isReservedPathComponent
argument_list|(
name|component
argument_list|)
return|;
block|}
comment|/**    * Returns if the component is reserved.    *     *<p>    * Note that some components are only reserved under certain directories, e.g.    * "/.reserved" is reserved, while "/hadoop/.reserved" is not.    * @return true, if the component is reserved    */
DECL|method|isReservedPathComponent (String component)
specifier|public
specifier|static
name|boolean
name|isReservedPathComponent
parameter_list|(
name|String
name|component
parameter_list|)
block|{
for|for
control|(
name|String
name|reserved
range|:
name|HdfsServerConstants
operator|.
name|RESERVED_PATH_COMPONENTS
control|)
block|{
if|if
condition|(
name|component
operator|.
name|equals
argument_list|(
name|reserved
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Converts a byte array to a string using UTF8 encoding.    */
DECL|method|bytes2String (byte[] bytes)
specifier|public
specifier|static
name|String
name|bytes2String
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|bytes2String
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Decode a specific range of bytes of the given byte array to a string    * using UTF8.    *     * @param bytes The bytes to be decoded into characters    * @param offset The index of the first byte to decode    * @param length The number of bytes to decode    * @return The decoded string    */
DECL|method|bytes2String (byte[] bytes, int offset, int length)
specifier|public
specifier|static
name|String
name|bytes2String
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|"UTF8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
assert|assert
literal|false
operator|:
literal|"UTF8 encoding is not supported "
assert|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Converts a string to a byte array using UTF8 encoding.    */
DECL|method|string2Bytes (String str)
specifier|public
specifier|static
name|byte
index|[]
name|string2Bytes
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|DFSUtilClient
operator|.
name|string2Bytes
argument_list|(
name|str
argument_list|)
return|;
block|}
comment|/**    * Given a list of path components returns a path as a UTF8 String    */
DECL|method|byteArray2PathString (byte[][] pathComponents, int offset, int length)
specifier|public
specifier|static
name|String
name|byteArray2PathString
parameter_list|(
name|byte
index|[]
index|[]
name|pathComponents
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|pathComponents
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|offset
operator|>=
literal|0
operator|&&
name|offset
operator|<
name|pathComponents
operator|.
name|length
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|length
operator|>=
literal|0
operator|&&
name|offset
operator|+
name|length
operator|<=
name|pathComponents
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathComponents
operator|.
name|length
operator|==
literal|1
operator|&&
operator|(
name|pathComponents
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|pathComponents
index|[
literal|0
index|]
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
return|return
name|Path
operator|.
name|SEPARATOR
return|;
block|}
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|offset
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|pathComponents
index|[
name|i
index|]
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|pathComponents
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR_CHAR
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|byteArray2PathString (byte[][] pathComponents)
specifier|public
specifier|static
name|String
name|byteArray2PathString
parameter_list|(
name|byte
index|[]
index|[]
name|pathComponents
parameter_list|)
block|{
return|return
name|byteArray2PathString
argument_list|(
name|pathComponents
argument_list|,
literal|0
argument_list|,
name|pathComponents
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Converts a list of path components into a path using Path.SEPARATOR.    *     * @param components Path components    * @return Combined path as a UTF-8 string    */
DECL|method|strings2PathString (String[] components)
specifier|public
specifier|static
name|String
name|strings2PathString
parameter_list|(
name|String
index|[]
name|components
parameter_list|)
block|{
if|if
condition|(
name|components
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|components
operator|.
name|length
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|components
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|components
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Path
operator|.
name|SEPARATOR
return|;
block|}
block|}
return|return
name|Joiner
operator|.
name|on
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|join
argument_list|(
name|components
argument_list|)
return|;
block|}
comment|/** Convert an object representing a path to a string. */
DECL|method|path2String (final Object path)
specifier|public
specifier|static
name|String
name|path2String
parameter_list|(
specifier|final
name|Object
name|path
parameter_list|)
block|{
return|return
name|path
operator|==
literal|null
condition|?
literal|null
else|:
name|path
operator|instanceof
name|String
condition|?
operator|(
name|String
operator|)
name|path
else|:
name|path
operator|instanceof
name|byte
index|[]
index|[]
condition|?
name|byteArray2PathString
argument_list|(
operator|(
name|byte
index|[]
index|[]
operator|)
name|path
argument_list|)
else|:
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Splits the array of bytes into array of arrays of bytes    * on byte separator    * @param bytes the array of bytes to split    * @param separator the delimiting byte    */
DECL|method|bytes2byteArray (byte[] bytes, byte separator)
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|bytes2byteArray
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
name|separator
parameter_list|)
block|{
return|return
name|bytes2byteArray
argument_list|(
name|bytes
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|separator
argument_list|)
return|;
block|}
comment|/**    * Splits first len bytes in bytes to array of arrays of bytes    * on byte separator    * @param bytes the byte array to split    * @param len the number of bytes to split    * @param separator the delimiting byte    */
DECL|method|bytes2byteArray (byte[] bytes, int len, byte separator)
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|bytes2byteArray
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
name|separator
parameter_list|)
block|{
assert|assert
name|len
operator|<=
name|bytes
operator|.
name|length
assert|;
name|int
name|splits
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|byte
index|[]
index|[]
block|{
literal|null
block|}
return|;
block|}
comment|// Count the splits. Omit multiple separators and the last one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bytes
index|[
name|i
index|]
operator|==
name|separator
condition|)
block|{
name|splits
operator|++
expr_stmt|;
block|}
block|}
name|int
name|last
init|=
name|len
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|last
operator|>
operator|-
literal|1
operator|&&
name|bytes
index|[
name|last
operator|--
index|]
operator|==
name|separator
condition|)
block|{
name|splits
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|splits
operator|==
literal|0
operator|&&
name|bytes
index|[
literal|0
index|]
operator|==
name|separator
condition|)
block|{
return|return
operator|new
name|byte
index|[]
index|[]
block|{
literal|null
block|}
return|;
block|}
name|splits
operator|++
expr_stmt|;
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|splits
index|]
index|[]
decl_stmt|;
name|int
name|startIndex
init|=
literal|0
decl_stmt|;
name|int
name|nextIndex
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
comment|// Build the splits
while|while
condition|(
name|index
operator|<
name|splits
condition|)
block|{
while|while
condition|(
name|nextIndex
operator|<
name|len
operator|&&
name|bytes
index|[
name|nextIndex
index|]
operator|!=
name|separator
condition|)
block|{
name|nextIndex
operator|++
expr_stmt|;
block|}
name|result
index|[
name|index
index|]
operator|=
operator|new
name|byte
index|[
name|nextIndex
operator|-
name|startIndex
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|startIndex
argument_list|,
name|result
index|[
name|index
index|]
argument_list|,
literal|0
argument_list|,
name|nextIndex
operator|-
name|startIndex
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
name|startIndex
operator|=
name|nextIndex
operator|+
literal|1
expr_stmt|;
name|nextIndex
operator|=
name|startIndex
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Return configuration key of format key.suffix1.suffix2...suffixN    */
DECL|method|addKeySuffixes (String key, String... suffixes)
specifier|public
specifier|static
name|String
name|addKeySuffixes
parameter_list|(
name|String
name|key
parameter_list|,
name|String
modifier|...
name|suffixes
parameter_list|)
block|{
name|String
name|keySuffix
init|=
name|DFSUtilClient
operator|.
name|concatSuffixes
argument_list|(
name|suffixes
argument_list|)
decl_stmt|;
return|return
name|DFSUtilClient
operator|.
name|addSuffix
argument_list|(
name|key
argument_list|,
name|keySuffix
argument_list|)
return|;
block|}
comment|/**    * Get all of the RPC addresses of the individual NNs in a given nameservice.    *     * @param conf Configuration    * @param nsId the nameservice whose NNs addresses we want.    * @param defaultValue default address to return in case key is not found.    * @return A map from nnId -> RPC address of each NN in the nameservice.    */
DECL|method|getRpcAddressesForNameserviceId ( Configuration conf, String nsId, String defaultValue)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|getRpcAddressesForNameserviceId
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nsId
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|DFSUtilClient
operator|.
name|getAddressesForNameserviceId
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|,
name|defaultValue
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * @return a collection of all configured NN Kerberos principals.    */
DECL|method|getAllNnPrincipals (Configuration conf)
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getAllNnPrincipals
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nsId
range|:
name|DFSUtilClient
operator|.
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
control|)
block|{
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|nnId
range|:
name|DFSUtilClient
operator|.
name|getNameNodeIds
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|)
control|)
block|{
name|Configuration
name|confForNn
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|confForNn
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
expr_stmt|;
name|String
name|principal
init|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|confForNn
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|)
argument_list|,
name|DFSUtilClient
operator|.
name|getNNAddress
argument_list|(
name|confForNn
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|principal
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Configuration
name|confForNn
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|NameNode
operator|.
name|initializeGenericKeys
argument_list|(
name|confForNn
argument_list|,
name|nsId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|principal
init|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|confForNn
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY
argument_list|)
argument_list|,
name|DFSUtilClient
operator|.
name|getNNAddress
argument_list|(
name|confForNn
argument_list|)
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|principal
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|principals
return|;
block|}
comment|/**    * Returns list of InetSocketAddress corresponding to HA NN RPC addresses from    * the configuration.    *     * @param conf configuration    * @return list of InetSocketAddresses    */
DECL|method|getHaNnRpcAddresses ( Configuration conf)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|getHaNnRpcAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|DFSUtilClient
operator|.
name|getAddresses
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * Returns list of InetSocketAddress corresponding to  backup node rpc     * addresses from the configuration.    *     * @param conf configuration    * @return list of InetSocketAddresses    * @throws IOException on error    */
DECL|method|getBackupNodeAddresses ( Configuration conf)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|getBackupNodeAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|addressList
init|=
name|DFSUtilClient
operator|.
name|getAddresses
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect configuration: backup node address "
operator|+
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
operator|+
literal|" is not configured."
argument_list|)
throw|;
block|}
return|return
name|addressList
return|;
block|}
comment|/**    * Returns list of InetSocketAddresses of corresponding to secondary namenode    * http addresses from the configuration.    *     * @param conf configuration    * @return list of InetSocketAddresses    * @throws IOException on error    */
DECL|method|getSecondaryNameNodeAddresses ( Configuration conf)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|getSecondaryNameNodeAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|addressList
init|=
name|DFSUtilClient
operator|.
name|getAddresses
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect configuration: secondary namenode address "
operator|+
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
operator|+
literal|" is not configured."
argument_list|)
throw|;
block|}
return|return
name|addressList
return|;
block|}
comment|/**    * Returns list of InetSocketAddresses corresponding to namenodes from the    * configuration.    *     * Returns namenode address specifically configured for datanodes (using    * service ports), if found. If not, regular RPC address configured for other    * clients is returned.    *     * @param conf configuration    * @return list of InetSocketAddress    * @throws IOException on error    */
DECL|method|getNNServiceRpcAddresses ( Configuration conf)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|getNNServiceRpcAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Use default address as fall back
name|String
name|defaultAddress
decl_stmt|;
try|try
block|{
name|defaultAddress
operator|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|DFSUtilClient
operator|.
name|getNNAddress
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|defaultAddress
operator|=
literal|null
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|addressList
init|=
name|DFSUtilClient
operator|.
name|getAddresses
argument_list|(
name|conf
argument_list|,
name|defaultAddress
argument_list|,
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect configuration: namenode address "
operator|+
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
operator|+
literal|" or "
operator|+
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|" is not configured."
argument_list|)
throw|;
block|}
return|return
name|addressList
return|;
block|}
comment|/**    * Returns list of InetSocketAddresses corresponding to the namenode    * that manages this cluster. Note this is to be used by datanodes to get    * the list of namenode addresses to talk to.    *    * Returns namenode address specifically configured for datanodes (using    * service ports), if found. If not, regular RPC address configured for other    * clients is returned.    *    * @param conf configuration    * @return list of InetSocketAddress    * @throws IOException on error    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
DECL|method|getNNServiceRpcAddressesForCluster (Configuration conf)
name|getNNServiceRpcAddressesForCluster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Use default address as fall back
name|String
name|defaultAddress
decl_stmt|;
try|try
block|{
name|defaultAddress
operator|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|DFSUtilClient
operator|.
name|getNNAddress
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|defaultAddress
operator|=
literal|null
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|parentNameServices
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_INTERNAL_NAMESERVICES_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentNameServices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parentNameServices
operator|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Ensure that the internal service is ineed in the list of all available
comment|// nameservices.
name|Set
argument_list|<
name|String
argument_list|>
name|availableNameServices
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMESERVICES
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nsId
range|:
name|parentNameServices
control|)
block|{
if|if
condition|(
operator|!
name|availableNameServices
operator|.
name|contains
argument_list|(
name|nsId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown nameservice: "
operator|+
name|nsId
argument_list|)
throw|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|addressList
init|=
name|DFSUtilClient
operator|.
name|getAddressesForNsIds
argument_list|(
name|conf
argument_list|,
name|parentNameServices
argument_list|,
name|defaultAddress
argument_list|,
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect configuration: namenode address "
operator|+
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
operator|+
literal|" or "
operator|+
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|" is not configured."
argument_list|)
throw|;
block|}
return|return
name|addressList
return|;
block|}
comment|/**    * Flatten the given map, as returned by other functions in this class,    * into a flat list of {@link ConfiguredNNAddress} instances.    */
DECL|method|flattenAddressMap ( Map<String, Map<String, InetSocketAddress>> map)
specifier|public
specifier|static
name|List
argument_list|<
name|ConfiguredNNAddress
argument_list|>
name|flattenAddressMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|List
argument_list|<
name|ConfiguredNNAddress
argument_list|>
name|ret
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|nsId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|nnMap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|e2
range|:
name|nnMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|nnId
init|=
name|e2
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|e2
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ConfiguredNNAddress
argument_list|(
name|nsId
argument_list|,
name|nnId
argument_list|,
name|addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Format the given map, as returned by other functions in this class,    * into a string suitable for debugging display. The format of this string    * should not be considered an interface, and is liable to change.    */
DECL|method|addressMapToString ( Map<String, Map<String, InetSocketAddress>> map)
specifier|public
specifier|static
name|String
name|addressMapToString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|nsId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|nnMap
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Nameservice<"
argument_list|)
operator|.
name|append
argument_list|(
name|nsId
argument_list|)
operator|.
name|append
argument_list|(
literal|">:"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
name|e2
range|:
name|nnMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"  NN ID "
argument_list|)
operator|.
name|append
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
operator|.
name|append
argument_list|(
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|nnAddressesAsString (Configuration conf)
specifier|public
specifier|static
name|String
name|nnAddressesAsString
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InetSocketAddress
argument_list|>
argument_list|>
name|addresses
init|=
name|getHaNnRpcAddresses
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|addressMapToString
argument_list|(
name|addresses
argument_list|)
return|;
block|}
comment|/**    * Represent one of the NameNodes configured in the cluster.    */
DECL|class|ConfiguredNNAddress
specifier|public
specifier|static
class|class
name|ConfiguredNNAddress
block|{
DECL|field|nameserviceId
specifier|private
specifier|final
name|String
name|nameserviceId
decl_stmt|;
DECL|field|namenodeId
specifier|private
specifier|final
name|String
name|namenodeId
decl_stmt|;
DECL|field|addr
specifier|private
specifier|final
name|InetSocketAddress
name|addr
decl_stmt|;
DECL|method|ConfiguredNNAddress (String nameserviceId, String namenodeId, InetSocketAddress addr)
specifier|private
name|ConfiguredNNAddress
parameter_list|(
name|String
name|nameserviceId
parameter_list|,
name|String
name|namenodeId
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
name|this
operator|.
name|nameserviceId
operator|=
name|nameserviceId
expr_stmt|;
name|this
operator|.
name|namenodeId
operator|=
name|namenodeId
expr_stmt|;
name|this
operator|.
name|addr
operator|=
name|addr
expr_stmt|;
block|}
DECL|method|getNameserviceId ()
specifier|public
name|String
name|getNameserviceId
parameter_list|()
block|{
return|return
name|nameserviceId
return|;
block|}
DECL|method|getNamenodeId ()
specifier|public
name|String
name|getNamenodeId
parameter_list|()
block|{
return|return
name|namenodeId
return|;
block|}
DECL|method|getAddress ()
specifier|public
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
return|return
name|addr
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ConfiguredNNAddress[nsId="
operator|+
name|nameserviceId
operator|+
literal|";"
operator|+
literal|"nnId="
operator|+
name|namenodeId
operator|+
literal|";addr="
operator|+
name|addr
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**    * Get a URI for each configured nameservice. If a nameservice is    * HA-enabled, then the logical URI of the nameservice is returned. If the    * nameservice is not HA-enabled, then a URI corresponding to an RPC address    * of the single NN for that nameservice is returned, preferring the service    * RPC address over the client RPC address.    *     * @param conf configuration    * @return a collection of all configured NN URIs, preferring service    *         addresses    */
DECL|method|getNsServiceRpcUris (Configuration conf)
specifier|public
specifier|static
name|Collection
argument_list|<
name|URI
argument_list|>
name|getNsServiceRpcUris
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getNameServiceUris
argument_list|(
name|conf
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * Get a URI for each configured nameservice. If a nameservice is    * HA-enabled, then the logical URI of the nameservice is returned. If the    * nameservice is not HA-enabled, then a URI corresponding to the address of    * the single NN for that nameservice is returned.    *     * @param conf configuration    * @param keys configuration keys to try in order to get the URI for non-HA    *        nameservices    * @return a collection of all configured NN URIs    */
DECL|method|getNameServiceUris (Configuration conf, String... keys)
specifier|public
specifier|static
name|Collection
argument_list|<
name|URI
argument_list|>
name|getNameServiceUris
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
name|Set
argument_list|<
name|URI
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
comment|// We're passed multiple possible configuration keys for any given NN or HA
comment|// nameservice, and search the config in order of these keys. In order to
comment|// make sure that a later config lookup (e.g. fs.defaultFS) doesn't add a
comment|// URI for a config key for which we've already found a preferred entry, we
comment|// keep track of non-preferred keys here.
name|Set
argument_list|<
name|URI
argument_list|>
name|nonPreferredUris
init|=
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nsId
range|:
name|DFSUtilClient
operator|.
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
control|)
block|{
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|)
condition|)
block|{
comment|// Add the logical URI of the nameservice.
try|try
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|URI
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
operator|+
literal|"://"
operator|+
name|nsId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ue
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ue
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Add the URI corresponding to the address of the NN.
name|boolean
name|uriFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSUtilClient
operator|.
name|concatSuffixes
argument_list|(
name|key
argument_list|,
name|nsId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
condition|)
block|{
name|URI
name|uri
init|=
name|createUri
argument_list|(
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uriFound
condition|)
block|{
name|uriFound
operator|=
literal|true
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonPreferredUris
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Add the generic configuration keys.
name|boolean
name|uriFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
condition|)
block|{
name|URI
name|uri
init|=
name|createUri
argument_list|(
literal|"hdfs"
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uriFound
condition|)
block|{
name|uriFound
operator|=
literal|true
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonPreferredUris
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Add the default URI if it is an HDFS URI and we haven't come up with a
comment|// valid non-nameservice NN address yet.  Consider the servicerpc-address
comment|// and rpc-address to be the "unnamed" nameservice.  defaultFS is our
comment|// fallback when rpc-address isn't given.  We therefore only want to add
comment|// the defaultFS when neither the servicerpc-address (which is preferred)
comment|// nor the rpc-address (which overrides defaultFS) is given.
if|if
condition|(
operator|!
name|uriFound
condition|)
block|{
name|URI
name|defaultUri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// checks if defaultUri is ip:port format
comment|// and convert it to hostname:port format
if|if
condition|(
name|defaultUri
operator|!=
literal|null
operator|&&
operator|(
name|defaultUri
operator|.
name|getPort
argument_list|()
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
name|defaultUri
operator|=
name|createUri
argument_list|(
name|defaultUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|defaultUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|defaultUri
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultUri
operator|!=
literal|null
operator|&&
name|HdfsConstants
operator|.
name|HDFS_URI_SCHEME
operator|.
name|equals
argument_list|(
name|defaultUri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|&&
operator|!
name|nonPreferredUris
operator|.
name|contains
argument_list|(
name|defaultUri
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|defaultUri
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Given the InetSocketAddress this method returns the nameservice Id    * corresponding to the key with matching address, by doing a reverse     * lookup on the list of nameservices until it finds a match.    *     * Since the process of resolving URIs to Addresses is slightly expensive,    * this utility method should not be used in performance-critical routines.    *     * @param conf - configuration    * @param address - InetSocketAddress for configured communication with NN.    *     Configured addresses are typically given as URIs, but we may have to    *     compare against a URI typed in by a human, or the server name may be    *     aliased, so we compare unambiguous InetSocketAddresses instead of just    *     comparing URI substrings.    * @param keys - list of configured communication parameters that should    *     be checked for matches.  For example, to compare against RPC addresses,    *     provide the list DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,    *     DFS_NAMENODE_RPC_ADDRESS_KEY.  Use the generic parameter keys,    *     not the NameServiceId-suffixed keys.    * @return nameserviceId, or null if no match found    */
DECL|method|getNameServiceIdFromAddress (final Configuration conf, final InetSocketAddress address, String... keys)
specifier|public
specifier|static
name|String
name|getNameServiceIdFromAddress
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|InetSocketAddress
name|address
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
comment|// Configuration with a single namenode and no nameserviceId
name|String
index|[]
name|ids
init|=
name|getSuffixIDs
argument_list|(
name|conf
argument_list|,
name|address
argument_list|,
name|keys
argument_list|)
decl_stmt|;
return|return
operator|(
name|ids
operator|!=
literal|null
operator|)
condition|?
name|ids
index|[
literal|0
index|]
else|:
literal|null
return|;
block|}
comment|/**    * return server http or https address from the configuration for a    * given namenode rpc address.    * @param namenodeAddr - namenode RPC address    * @param conf configuration    * @param scheme - the scheme (http / https)    * @return server http or https address    * @throws IOException     */
DECL|method|getInfoServer (InetSocketAddress namenodeAddr, Configuration conf, String scheme)
specifier|public
specifier|static
name|URI
name|getInfoServer
parameter_list|(
name|InetSocketAddress
name|namenodeAddr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|scheme
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|suffixes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|namenodeAddr
operator|!=
literal|null
condition|)
block|{
comment|// if non-default namenode, try reverse look up
comment|// the nameServiceID if it is available
name|suffixes
operator|=
name|getSuffixIDs
argument_list|(
name|conf
argument_list|,
name|namenodeAddr
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
expr_stmt|;
block|}
name|String
name|authority
decl_stmt|;
if|if
condition|(
literal|"http"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|authority
operator|=
name|getSuffixedConf
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_HTTP_ADDRESS_DEFAULT
argument_list|,
name|suffixes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"https"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|authority
operator|=
name|getSuffixedConf
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_HTTPS_ADDRESS_DEFAULT
argument_list|,
name|suffixes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid scheme:"
operator|+
name|scheme
argument_list|)
throw|;
block|}
if|if
condition|(
name|namenodeAddr
operator|!=
literal|null
condition|)
block|{
name|authority
operator|=
name|substituteForWildcardAddress
argument_list|(
name|authority
argument_list|,
name|namenodeAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|URI
operator|.
name|create
argument_list|(
name|scheme
operator|+
literal|"://"
operator|+
name|authority
argument_list|)
return|;
block|}
comment|/**    * Lookup the HTTP / HTTPS address of the namenode, and replace its hostname    * with defaultHost when it found out that the address is a wildcard / local    * address.    *    * @param defaultHost    *          The default host name of the namenode.    * @param conf    *          The configuration    * @param scheme    *          HTTP or HTTPS    * @throws IOException    */
DECL|method|getInfoServerWithDefaultHost (String defaultHost, Configuration conf, final String scheme)
specifier|public
specifier|static
name|URI
name|getInfoServerWithDefaultHost
parameter_list|(
name|String
name|defaultHost
parameter_list|,
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|scheme
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|configuredAddr
init|=
name|getInfoServer
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
name|String
name|authority
init|=
name|substituteForWildcardAddress
argument_list|(
name|configuredAddr
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|defaultHost
argument_list|)
decl_stmt|;
return|return
name|URI
operator|.
name|create
argument_list|(
name|scheme
operator|+
literal|"://"
operator|+
name|authority
argument_list|)
return|;
block|}
comment|/**    * Determine whether HTTP or HTTPS should be used to connect to the remote    * server. Currently the client only connects to the server via HTTPS if the    * policy is set to HTTPS_ONLY.    *    * @return the scheme (HTTP / HTTPS)    */
DECL|method|getHttpClientScheme (Configuration conf)
specifier|public
specifier|static
name|String
name|getHttpClientScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|HttpConfig
operator|.
name|Policy
name|policy
init|=
name|DFSUtil
operator|.
name|getHttpPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|policy
operator|==
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTPS_ONLY
condition|?
literal|"https"
else|:
literal|"http"
return|;
block|}
comment|/**    * Substitute a default host in the case that an address has been configured    * with a wildcard. This is used, for example, when determining the HTTP    * address of the NN -- if it's configured to bind to 0.0.0.0, we want to    * substitute the hostname from the filesystem URI rather than trying to    * connect to 0.0.0.0.    * @param configuredAddress the address found in the configuration    * @param defaultHost the host to substitute with, if configuredAddress    * is a local/wildcard address.    * @return the substituted address    * @throws IOException if it is a wildcard address and security is enabled    */
annotation|@
name|VisibleForTesting
DECL|method|substituteForWildcardAddress (String configuredAddress, String defaultHost)
specifier|static
name|String
name|substituteForWildcardAddress
parameter_list|(
name|String
name|configuredAddress
parameter_list|,
name|String
name|defaultHost
parameter_list|)
block|{
name|InetSocketAddress
name|sockAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|configuredAddress
argument_list|)
decl_stmt|;
specifier|final
name|InetAddress
name|addr
init|=
name|sockAddr
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
operator|&&
name|addr
operator|.
name|isAnyLocalAddress
argument_list|()
condition|)
block|{
return|return
name|defaultHost
operator|+
literal|":"
operator|+
name|sockAddr
operator|.
name|getPort
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|configuredAddress
return|;
block|}
block|}
DECL|method|getSuffixedConf (Configuration conf, String key, String defaultVal, String[] suffixes)
specifier|private
specifier|static
name|String
name|getSuffixedConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|defaultVal
parameter_list|,
name|String
index|[]
name|suffixes
parameter_list|)
block|{
name|String
name|ret
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|key
argument_list|,
name|suffixes
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
return|return
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|defaultVal
argument_list|)
return|;
block|}
comment|/**    * Sets the node specific setting into generic configuration key. Looks up    * value of "key.nameserviceId.namenodeId" and if found sets that value into     * generic key in the conf. If this is not found, falls back to    * "key.nameserviceId" and then the unmodified key.    *    * Note that this only modifies the runtime conf.    *     * @param conf    *          Configuration object to lookup specific key and to set the value    *          to the key passed. Note the conf object is modified.    * @param nameserviceId    *          nameservice Id to construct the node specific key. Pass null if    *          federation is not configuration.    * @param nnId    *          namenode Id to construct the node specific key. Pass null if    *          HA is not configured.    * @param keys    *          The key for which node specific value is looked up    */
DECL|method|setGenericConf (Configuration conf, String nameserviceId, String nnId, String... keys)
specifier|public
specifier|static
name|void
name|setGenericConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nameserviceId
parameter_list|,
name|String
name|nnId
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|addKeySuffixes
argument_list|(
name|key
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|value
operator|=
name|conf
operator|.
name|get
argument_list|(
name|addKeySuffixes
argument_list|(
name|key
argument_list|,
name|nameserviceId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Round bytes to GiB (gibibyte)    * @param bytes number of bytes    * @return number of GiB    */
DECL|method|roundBytesToGB (long bytes)
specifier|public
specifier|static
name|int
name|roundBytesToGB
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
operator|(
name|float
operator|)
name|bytes
operator|/
literal|1024
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
return|;
block|}
comment|/**    * Get nameservice Id for the {@link NameNode} based on namenode RPC address    * matching the local node address.    */
DECL|method|getNamenodeNameServiceId (Configuration conf)
specifier|public
specifier|static
name|String
name|getNamenodeNameServiceId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getNameServiceId
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * Get nameservice Id for the BackupNode based on backup node RPC address    * matching the local node address.    */
DECL|method|getBackupNameServiceId (Configuration conf)
specifier|public
specifier|static
name|String
name|getBackupNameServiceId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getNameServiceId
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * Get nameservice Id for the secondary node based on secondary http address    * matching the local node address.    */
DECL|method|getSecondaryNameServiceId (Configuration conf)
specifier|public
specifier|static
name|String
name|getSecondaryNameServiceId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getNameServiceId
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * Get the nameservice Id by matching the {@code addressKey} with the    * the address of the local node.     *     * If {@link DFSConfigKeys#DFS_NAMESERVICE_ID} is not specifically    * configured, and more than one nameservice Id is configured, this method     * determines the nameservice Id by matching the local node's address with the    * configured addresses. When a match is found, it returns the nameservice Id    * from the corresponding configuration key.    *     * @param conf Configuration    * @param addressKey configuration key to get the address.    * @return nameservice Id on success, null if federation is not configured.    * @throws HadoopIllegalArgumentException on error    */
DECL|method|getNameServiceId (Configuration conf, String addressKey)
specifier|private
specifier|static
name|String
name|getNameServiceId
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|addressKey
parameter_list|)
block|{
name|String
name|nameserviceId
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_NAMESERVICE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameserviceId
operator|!=
literal|null
condition|)
block|{
return|return
name|nameserviceId
return|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|nsIds
init|=
name|DFSUtilClient
operator|.
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|==
name|nsIds
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|nsIds
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|)
index|[
literal|0
index|]
return|;
block|}
name|String
name|nnId
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_HA_NAMENODE_ID_KEY
argument_list|)
decl_stmt|;
return|return
name|getSuffixIDs
argument_list|(
name|conf
argument_list|,
name|addressKey
argument_list|,
literal|null
argument_list|,
name|nnId
argument_list|,
name|LOCAL_ADDRESS_MATCHER
argument_list|)
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Returns nameservice Id and namenode Id when the local host matches the    * configuration parameter {@code addressKey}.<nameservice Id>.<namenode Id>    *     * @param conf Configuration    * @param addressKey configuration key corresponding to the address.    * @param knownNsId only look at configs for the given nameservice, if not-null    * @param knownNNId only look at configs for the given namenode, if not null    * @param matcher matching criteria for matching the address    * @return Array with nameservice Id and namenode Id on success. First element    *         in the array is nameservice Id and second element is namenode Id.    *         Null value indicates that the configuration does not have the the    *         Id.    * @throws HadoopIllegalArgumentException on error    */
DECL|method|getSuffixIDs (final Configuration conf, final String addressKey, String knownNsId, String knownNNId, final AddressMatcher matcher)
specifier|static
name|String
index|[]
name|getSuffixIDs
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|addressKey
parameter_list|,
name|String
name|knownNsId
parameter_list|,
name|String
name|knownNNId
parameter_list|,
specifier|final
name|AddressMatcher
name|matcher
parameter_list|)
block|{
name|String
name|nameserviceId
init|=
literal|null
decl_stmt|;
name|String
name|namenodeId
init|=
literal|null
decl_stmt|;
name|int
name|found
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|nsIds
init|=
name|DFSUtilClient
operator|.
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nsId
range|:
name|DFSUtilClient
operator|.
name|emptyAsSingletonNull
argument_list|(
name|nsIds
argument_list|)
control|)
block|{
if|if
condition|(
name|knownNsId
operator|!=
literal|null
operator|&&
operator|!
name|knownNsId
operator|.
name|equals
argument_list|(
name|nsId
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|nnIds
init|=
name|DFSUtilClient
operator|.
name|getNameNodeIds
argument_list|(
name|conf
argument_list|,
name|nsId
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nnId
range|:
name|DFSUtilClient
operator|.
name|emptyAsSingletonNull
argument_list|(
name|nnIds
argument_list|)
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"addressKey: %s nsId: %s nnId: %s"
argument_list|,
name|addressKey
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|knownNNId
operator|!=
literal|null
operator|&&
operator|!
name|knownNNId
operator|.
name|equals
argument_list|(
name|nnId
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|key
init|=
name|addKeySuffixes
argument_list|(
name|addressKey
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
decl_stmt|;
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|InetSocketAddress
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in creating socket address "
operator|+
name|addr
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|s
operator|.
name|isUnresolved
argument_list|()
operator|&&
name|matcher
operator|.
name|match
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|nameserviceId
operator|=
name|nsId
expr_stmt|;
name|namenodeId
operator|=
name|nnId
expr_stmt|;
name|found
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|found
operator|>
literal|1
condition|)
block|{
comment|// Only one address must match the local address
name|String
name|msg
init|=
literal|"Configuration has multiple addresses that match "
operator|+
literal|"local node's address. Please configure the system with "
operator|+
name|DFS_NAMESERVICE_ID
operator|+
literal|" and "
operator|+
name|DFS_HA_NAMENODE_ID_KEY
decl_stmt|;
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
operator|new
name|String
index|[]
block|{
name|nameserviceId
block|,
name|namenodeId
block|}
return|;
block|}
comment|/**    * For given set of {@code keys} adds nameservice Id and or namenode Id    * and returns {nameserviceId, namenodeId} when address match is found.    * @see #getSuffixIDs(Configuration, String, String, String, AddressMatcher)    */
DECL|method|getSuffixIDs (final Configuration conf, final InetSocketAddress address, final String... keys)
specifier|static
name|String
index|[]
name|getSuffixIDs
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|InetSocketAddress
name|address
parameter_list|,
specifier|final
name|String
modifier|...
name|keys
parameter_list|)
block|{
name|AddressMatcher
name|matcher
init|=
operator|new
name|AddressMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|InetSocketAddress
name|s
parameter_list|)
block|{
return|return
name|address
operator|.
name|equals
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
index|[]
name|ids
init|=
name|getSuffixIDs
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
operator|(
name|ids
index|[
literal|0
index|]
operator|!=
literal|null
operator|||
name|ids
index|[
literal|1
index|]
operator|!=
literal|null
operator|)
condition|)
block|{
return|return
name|ids
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|interface|AddressMatcher
specifier|private
interface|interface
name|AddressMatcher
block|{
DECL|method|match (InetSocketAddress s)
specifier|public
name|boolean
name|match
parameter_list|(
name|InetSocketAddress
name|s
parameter_list|)
function_decl|;
block|}
comment|/** Create a URI from the scheme and address */
DECL|method|createUri (String scheme, InetSocketAddress address)
specifier|public
specifier|static
name|URI
name|createUri
parameter_list|(
name|String
name|scheme
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
literal|null
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ue
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ue
argument_list|)
throw|;
block|}
block|}
comment|/**    * Add protobuf based protocol to the {@link org.apache.hadoop.ipc.RPC.Server}    * @param conf configuration    * @param protocol Protocol interface    * @param service service that implements the protocol    * @param server RPC server to which the protocol& implementation is added to    * @throws IOException    */
DECL|method|addPBProtocol (Configuration conf, Class<?> protocol, BlockingService service, RPC.Server server)
specifier|public
specifier|static
name|void
name|addPBProtocol
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|BlockingService
name|service
parameter_list|,
name|RPC
operator|.
name|Server
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|server
operator|.
name|addProtocol
argument_list|(
name|RPC
operator|.
name|RpcKind
operator|.
name|RPC_PROTOCOL_BUFFER
argument_list|,
name|protocol
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
comment|/**    * Map a logical namenode ID to its service address. Use the given    * nameservice if specified, or the configured one if none is given.    *    * @param conf Configuration    * @param nsId which nameservice nnId is a part of, optional    * @param nnId the namenode ID to get the service addr for    * @return the service addr, null if it could not be determined    */
DECL|method|getNamenodeServiceAddr (final Configuration conf, String nsId, String nnId)
specifier|public
specifier|static
name|String
name|getNamenodeServiceAddr
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|String
name|nsId
parameter_list|,
name|String
name|nnId
parameter_list|)
block|{
if|if
condition|(
name|nsId
operator|==
literal|null
condition|)
block|{
name|nsId
operator|=
name|getOnlyNameServiceIdOrNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|String
name|serviceAddrKey
init|=
name|DFSUtilClient
operator|.
name|concatSuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
decl_stmt|;
name|String
name|addrKey
init|=
name|DFSUtilClient
operator|.
name|concatSuffixes
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
decl_stmt|;
name|String
name|serviceRpcAddr
init|=
name|conf
operator|.
name|get
argument_list|(
name|serviceAddrKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceRpcAddr
operator|==
literal|null
condition|)
block|{
name|serviceRpcAddr
operator|=
name|conf
operator|.
name|get
argument_list|(
name|addrKey
argument_list|)
expr_stmt|;
block|}
return|return
name|serviceRpcAddr
return|;
block|}
comment|/**    * If the configuration refers to only a single nameservice, return the    * name of that nameservice. If it refers to 0 or more than 1, return null.    */
DECL|method|getOnlyNameServiceIdOrNull (Configuration conf)
specifier|public
specifier|static
name|String
name|getOnlyNameServiceIdOrNull
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|nsIds
init|=
name|DFSUtilClient
operator|.
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|==
name|nsIds
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|nsIds
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|)
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
comment|// No nameservice ID was given and more than one is configured
return|return
literal|null
return|;
block|}
block|}
DECL|field|helpOptions
specifier|public
specifier|static
specifier|final
name|Options
name|helpOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
DECL|field|helpOpt
specifier|public
specifier|static
specifier|final
name|Option
name|helpOpt
init|=
operator|new
name|Option
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"get help information"
argument_list|)
decl_stmt|;
static|static
block|{
name|helpOptions
operator|.
name|addOption
argument_list|(
name|helpOpt
argument_list|)
expr_stmt|;
block|}
comment|/**    * Parse the arguments for commands    *     * @param args the argument to be parsed    * @param helpDescription help information to be printed out    * @param out Printer    * @param printGenericCommandUsage whether to print the     *              generic command usage defined in ToolRunner    * @return true when the argument matches help option, false if not    */
DECL|method|parseHelpArgument (String[] args, String helpDescription, PrintStream out, boolean printGenericCommandUsage)
specifier|public
specifier|static
name|boolean
name|parseHelpArgument
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|helpDescription
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|boolean
name|printGenericCommandUsage
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
block|{
try|try
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cmdLine
init|=
name|parser
operator|.
name|parse
argument_list|(
name|helpOptions
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|helpOpt
operator|.
name|getOpt
argument_list|()
argument_list|)
operator|||
name|cmdLine
operator|.
name|hasOption
argument_list|(
name|helpOpt
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
comment|// should print out the help information
name|out
operator|.
name|println
argument_list|(
name|helpDescription
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|printGenericCommandUsage
condition|)
block|{
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get DFS_NAMENODE_INVALIDATE_WORK_PCT_PER_ITERATION from configuration.    *     * @param conf Configuration    * @return Value of DFS_NAMENODE_INVALIDATE_WORK_PCT_PER_ITERATION    */
DECL|method|getInvalidateWorkPctPerIteration (Configuration conf)
specifier|public
specifier|static
name|float
name|getInvalidateWorkPctPerIteration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|float
name|blocksInvalidateWorkPct
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INVALIDATE_WORK_PCT_PER_ITERATION
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INVALIDATE_WORK_PCT_PER_ITERATION_DEFAULT
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
name|blocksInvalidateWorkPct
operator|>
literal|0
operator|&&
name|blocksInvalidateWorkPct
operator|<=
literal|1.0f
operator|)
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INVALIDATE_WORK_PCT_PER_ITERATION
operator|+
literal|" = '"
operator|+
name|blocksInvalidateWorkPct
operator|+
literal|"' is invalid. "
operator|+
literal|"It should be a positive, non-zero float value, not greater than 1.0f, "
operator|+
literal|"to indicate a percentage."
argument_list|)
expr_stmt|;
return|return
name|blocksInvalidateWorkPct
return|;
block|}
comment|/**    * Get DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION from    * configuration.    *     * @param conf Configuration    * @return Value of DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION    */
DECL|method|getReplWorkMultiplier (Configuration conf)
specifier|public
specifier|static
name|int
name|getReplWorkMultiplier
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|blocksReplWorkMultiplier
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION_DEFAULT
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
name|blocksReplWorkMultiplier
operator|>
literal|0
operator|)
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_WORK_MULTIPLIER_PER_ITERATION
operator|+
literal|" = '"
operator|+
name|blocksReplWorkMultiplier
operator|+
literal|"' is invalid. "
operator|+
literal|"It should be a positive, non-zero integer value."
argument_list|)
expr_stmt|;
return|return
name|blocksReplWorkMultiplier
return|;
block|}
comment|/**    * Get SPNEGO keytab Key from configuration    *     * @param conf Configuration    * @param defaultKey default key to be used for config lookup    * @return DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY if the key is not empty    *         else return defaultKey    */
DECL|method|getSpnegoKeytabKey (Configuration conf, String defaultKey)
specifier|public
specifier|static
name|String
name|getSpnegoKeytabKey
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|defaultKey
parameter_list|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|defaultKey
else|:
name|DFSConfigKeys
operator|.
name|DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY
return|;
block|}
comment|/**    * Get http policy.    */
DECL|method|getHttpPolicy (Configuration conf)
specifier|public
specifier|static
name|HttpConfig
operator|.
name|Policy
name|getHttpPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|policyStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_DEFAULT
argument_list|)
decl_stmt|;
name|HttpConfig
operator|.
name|Policy
name|policy
init|=
name|HttpConfig
operator|.
name|Policy
operator|.
name|fromString
argument_list|(
name|policyStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Unregonized value '"
operator|+
name|policyStr
operator|+
literal|"' for "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_KEY
argument_list|)
throw|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_HTTP_POLICY_KEY
argument_list|,
name|policy
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
DECL|method|loadSslConfToHttpServerBuilder (HttpServer2.Builder builder, Configuration sslConf)
specifier|public
specifier|static
name|HttpServer2
operator|.
name|Builder
name|loadSslConfToHttpServerBuilder
parameter_list|(
name|HttpServer2
operator|.
name|Builder
name|builder
parameter_list|,
name|Configuration
name|sslConf
parameter_list|)
block|{
return|return
name|builder
operator|.
name|needsClientAuth
argument_list|(
name|sslConf
operator|.
name|getBoolean
argument_list|(
name|DFS_CLIENT_HTTPS_NEED_AUTH_KEY
argument_list|,
name|DFS_CLIENT_HTTPS_NEED_AUTH_DEFAULT
argument_list|)
argument_list|)
operator|.
name|keyPassword
argument_list|(
name|getPassword
argument_list|(
name|sslConf
argument_list|,
name|DFS_SERVER_HTTPS_KEYPASSWORD_KEY
argument_list|)
argument_list|)
operator|.
name|keyStore
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.location"
argument_list|)
argument_list|,
name|getPassword
argument_list|(
name|sslConf
argument_list|,
name|DFS_SERVER_HTTPS_KEYSTORE_PASSWORD_KEY
argument_list|)
argument_list|,
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.type"
argument_list|,
literal|"jks"
argument_list|)
argument_list|)
operator|.
name|trustStore
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.location"
argument_list|)
argument_list|,
name|getPassword
argument_list|(
name|sslConf
argument_list|,
name|DFS_SERVER_HTTPS_TRUSTSTORE_PASSWORD_KEY
argument_list|)
argument_list|,
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.type"
argument_list|,
literal|"jks"
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Leverages the Configuration.getPassword method to attempt to get    * passwords from the CredentialProvider API before falling back to    * clear text in config - if falling back is allowed.    * @param conf Configuration instance    * @param alias name of the credential to retreive    * @return String credential value or null    */
DECL|method|getPassword (Configuration conf, String alias)
specifier|static
name|String
name|getPassword
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
name|String
name|password
init|=
literal|null
decl_stmt|;
try|try
block|{
name|char
index|[]
name|passchars
init|=
name|conf
operator|.
name|getPassword
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|passchars
operator|!=
literal|null
condition|)
block|{
name|password
operator|=
operator|new
name|String
argument_list|(
name|passchars
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Setting password to null since IOException is caught"
operator|+
literal|" when getting password"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|password
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|password
return|;
block|}
comment|/**    * Converts a Date into an ISO-8601 formatted datetime string.    */
DECL|method|dateToIso8601String (Date date)
specifier|public
specifier|static
name|String
name|dateToIso8601String
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|DFSUtilClient
operator|.
name|dateToIso8601String
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/**    * Converts a time duration in milliseconds into DDD:HH:MM:SS format.    */
DECL|method|durationToString (long durationMs)
specifier|public
specifier|static
name|String
name|durationToString
parameter_list|(
name|long
name|durationMs
parameter_list|)
block|{
return|return
name|DFSUtilClient
operator|.
name|durationToString
argument_list|(
name|durationMs
argument_list|)
return|;
block|}
comment|/**    * Converts a relative time string into a duration in milliseconds.    */
DECL|method|parseRelativeTime (String relTime)
specifier|public
specifier|static
name|long
name|parseRelativeTime
parameter_list|(
name|String
name|relTime
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|relTime
operator|.
name|length
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to parse relative time value of "
operator|+
name|relTime
operator|+
literal|": too short"
argument_list|)
throw|;
block|}
name|String
name|ttlString
init|=
name|relTime
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|relTime
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|ttl
decl_stmt|;
try|try
block|{
name|ttl
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|ttlString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to parse relative time value of "
operator|+
name|relTime
operator|+
literal|": "
operator|+
name|ttlString
operator|+
literal|" is not a number"
argument_list|)
throw|;
block|}
if|if
condition|(
name|relTime
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
comment|// pass
block|}
elseif|else
if|if
condition|(
name|relTime
operator|.
name|endsWith
argument_list|(
literal|"m"
argument_list|)
condition|)
block|{
name|ttl
operator|*=
literal|60
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|relTime
operator|.
name|endsWith
argument_list|(
literal|"h"
argument_list|)
condition|)
block|{
name|ttl
operator|*=
literal|60
operator|*
literal|60
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|relTime
operator|.
name|endsWith
argument_list|(
literal|"d"
argument_list|)
condition|)
block|{
name|ttl
operator|*=
literal|60
operator|*
literal|60
operator|*
literal|24
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to parse relative time value of "
operator|+
name|relTime
operator|+
literal|": unknown time unit "
operator|+
name|relTime
operator|.
name|charAt
argument_list|(
name|relTime
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|ttl
operator|*
literal|1000
return|;
block|}
comment|/**    * Load HTTPS-related configuration.    */
DECL|method|loadSslConfiguration (Configuration conf)
specifier|public
specifier|static
name|Configuration
name|loadSslConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Configuration
name|sslConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|sslConf
operator|.
name|addResource
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|reqSslProps
init|=
block|{
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_TRUSTSTORE_LOCATION_KEY
block|,
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYSTORE_LOCATION_KEY
block|,
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYSTORE_PASSWORD_KEY
block|,
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYPASSWORD_KEY
block|}
decl_stmt|;
comment|// Check if the required properties are included
for|for
control|(
name|String
name|sslProp
range|:
name|reqSslProps
control|)
block|{
if|if
condition|(
name|sslConf
operator|.
name|get
argument_list|(
name|sslProp
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"SSL config "
operator|+
name|sslProp
operator|+
literal|" is missing. If "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY
operator|+
literal|" is specified, make sure it is a relative path"
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|requireClientAuth
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CLIENT_HTTPS_NEED_AUTH_KEY
argument_list|,
name|DFS_CLIENT_HTTPS_NEED_AUTH_DEFAULT
argument_list|)
decl_stmt|;
name|sslConf
operator|.
name|setBoolean
argument_list|(
name|DFS_CLIENT_HTTPS_NEED_AUTH_KEY
argument_list|,
name|requireClientAuth
argument_list|)
expr_stmt|;
return|return
name|sslConf
return|;
block|}
comment|/**    * Return a HttpServer.Builder that the journalnode / namenode / secondary    * namenode can use to initialize their HTTP / HTTPS server.    *    */
DECL|method|httpServerTemplateForNNAndJN ( Configuration conf, final InetSocketAddress httpAddr, final InetSocketAddress httpsAddr, String name, String spnegoUserNameKey, String spnegoKeytabFileKey)
specifier|public
specifier|static
name|HttpServer2
operator|.
name|Builder
name|httpServerTemplateForNNAndJN
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|InetSocketAddress
name|httpAddr
parameter_list|,
specifier|final
name|InetSocketAddress
name|httpsAddr
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|spnegoUserNameKey
parameter_list|,
name|String
name|spnegoKeytabFileKey
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpConfig
operator|.
name|Policy
name|policy
init|=
name|getHttpPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HttpServer2
operator|.
name|Builder
name|builder
init|=
operator|new
name|HttpServer2
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setACL
argument_list|(
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFS_ADMIN
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSecurityEnabled
argument_list|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
argument_list|)
operator|.
name|setUsernameConfKey
argument_list|(
name|spnegoUserNameKey
argument_list|)
operator|.
name|setKeytabConfKey
argument_list|(
name|getSpnegoKeytabKey
argument_list|(
name|conf
argument_list|,
name|spnegoKeytabFileKey
argument_list|)
argument_list|)
decl_stmt|;
comment|// initialize the webserver for uploading/downloading files.
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting web server as: "
operator|+
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|spnegoUserNameKey
argument_list|)
argument_list|,
name|httpAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isHttpEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|httpAddr
operator|.
name|getPort
argument_list|()
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|setFindPort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"http://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|httpAddr
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Web-server for "
operator|+
name|name
operator|+
literal|" at: "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isHttpsEnabled
argument_list|()
operator|&&
name|httpsAddr
operator|!=
literal|null
condition|)
block|{
name|Configuration
name|sslConf
init|=
name|loadSslConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|loadSslConfToHttpServerBuilder
argument_list|(
name|builder
argument_list|,
name|sslConf
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpsAddr
operator|.
name|getPort
argument_list|()
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|setFindPort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"https://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|httpsAddr
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Web-server for "
operator|+
name|name
operator|+
literal|" at: "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|/**    * Assert that all objects in the collection are equal. Returns silently if    * so, throws an AssertionError if any object is not equal. All null values    * are considered equal.    *     * @param objects the collection of objects to check for equality.    */
DECL|method|assertAllResultsEqual (Collection<?> objects)
specifier|public
specifier|static
name|void
name|assertAllResultsEqual
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|objects
parameter_list|)
throws|throws
name|AssertionError
block|{
if|if
condition|(
name|objects
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|objects
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return;
name|Object
index|[]
name|resultsArray
init|=
name|objects
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|resultsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|currElement
init|=
name|resultsArray
index|[
name|i
index|]
decl_stmt|;
name|Object
name|lastElement
init|=
name|resultsArray
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|currElement
operator|==
literal|null
operator|&&
name|currElement
operator|!=
name|lastElement
operator|)
operator|||
operator|(
name|currElement
operator|!=
literal|null
operator|&&
operator|!
name|currElement
operator|.
name|equals
argument_list|(
name|lastElement
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not all elements match in results: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|resultsArray
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Creates a new KeyProviderCryptoExtension by wrapping the    * KeyProvider specified in the given Configuration.    *    * @param conf Configuration    * @return new KeyProviderCryptoExtension, or null if no provider was found.    * @throws IOException if the KeyProvider is improperly specified in    *                             the Configuration    */
DECL|method|createKeyProviderCryptoExtension ( final Configuration conf)
specifier|public
specifier|static
name|KeyProviderCryptoExtension
name|createKeyProviderCryptoExtension
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyProvider
name|keyProvider
init|=
name|DFSUtilClient
operator|.
name|createKeyProvider
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyProvider
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|KeyProviderCryptoExtension
name|cryptoProvider
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|keyProvider
argument_list|)
decl_stmt|;
return|return
name|cryptoProvider
return|;
block|}
block|}
end_class

end_unit

