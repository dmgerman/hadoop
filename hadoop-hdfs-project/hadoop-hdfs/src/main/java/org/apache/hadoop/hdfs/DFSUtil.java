begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DFSUtil
specifier|public
class|class
name|DFSUtil
block|{
DECL|method|DFSUtil ()
specifier|private
name|DFSUtil
parameter_list|()
block|{
comment|/* Hidden constructor */
block|}
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Random
argument_list|>
name|RANDOM
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Random
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Random
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Random
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/** @return a pseudorandom number generator. */
DECL|method|getRandom ()
specifier|public
specifier|static
name|Random
name|getRandom
parameter_list|()
block|{
return|return
name|RANDOM
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Compartor for sorting DataNodeInfo[] based on decommissioned states.    * Decommissioned nodes are moved to the end of the array on sorting with    * this compartor.    */
DECL|field|DECOM_COMPARATOR
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|DatanodeInfo
argument_list|>
name|DECOM_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|DatanodeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DatanodeInfo
name|a
parameter_list|,
name|DatanodeInfo
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|isDecommissioned
argument_list|()
operator|==
name|b
operator|.
name|isDecommissioned
argument_list|()
condition|?
literal|0
else|:
name|a
operator|.
name|isDecommissioned
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Address matcher for matching an address to local address    */
DECL|field|LOCAL_ADDRESS_MATCHER
specifier|static
specifier|final
name|AddressMatcher
name|LOCAL_ADDRESS_MATCHER
init|=
operator|new
name|AddressMatcher
argument_list|()
block|{
specifier|public
name|boolean
name|match
parameter_list|(
name|InetSocketAddress
name|s
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|isLocalAddress
argument_list|(
name|s
operator|.
name|getAddress
argument_list|()
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
comment|/**    * Whether the pathname is valid.  Currently prohibits relative paths,     * and names which contain a ":" or "/"     */
DECL|method|isValidName (String src)
specifier|public
specifier|static
name|boolean
name|isValidName
parameter_list|(
name|String
name|src
parameter_list|)
block|{
comment|// Path must be absolute.
if|if
condition|(
operator|!
name|src
operator|.
name|startsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check for ".." "." ":" "/"
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|src
argument_list|,
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|element
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
operator|||
name|element
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
operator|(
name|element
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|>=
literal|0
operator|)
operator|||
operator|(
name|element
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Utility class to facilitate junit test error simulation.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ErrorSimulator
specifier|public
specifier|static
class|class
name|ErrorSimulator
block|{
DECL|field|simulation
specifier|private
specifier|static
name|boolean
index|[]
name|simulation
init|=
literal|null
decl_stmt|;
comment|// error simulation events
DECL|method|initializeErrorSimulationEvent (int numberOfEvents)
specifier|public
specifier|static
name|void
name|initializeErrorSimulationEvent
parameter_list|(
name|int
name|numberOfEvents
parameter_list|)
block|{
name|simulation
operator|=
operator|new
name|boolean
index|[
name|numberOfEvents
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfEvents
condition|;
name|i
operator|++
control|)
block|{
name|simulation
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|getErrorSimulation (int index)
specifier|public
specifier|static
name|boolean
name|getErrorSimulation
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|simulation
operator|==
literal|null
condition|)
return|return
literal|false
return|;
assert|assert
operator|(
name|index
operator|<
name|simulation
operator|.
name|length
operator|)
assert|;
return|return
name|simulation
index|[
name|index
index|]
return|;
block|}
DECL|method|setErrorSimulation (int index)
specifier|public
specifier|static
name|void
name|setErrorSimulation
parameter_list|(
name|int
name|index
parameter_list|)
block|{
assert|assert
operator|(
name|index
operator|<
name|simulation
operator|.
name|length
operator|)
assert|;
name|simulation
index|[
name|index
index|]
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|clearErrorSimulation (int index)
specifier|public
specifier|static
name|void
name|clearErrorSimulation
parameter_list|(
name|int
name|index
parameter_list|)
block|{
assert|assert
operator|(
name|index
operator|<
name|simulation
operator|.
name|length
operator|)
assert|;
name|simulation
index|[
name|index
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Converts a byte array to a string using UTF8 encoding.    */
DECL|method|bytes2String (byte[] bytes)
specifier|public
specifier|static
name|String
name|bytes2String
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
literal|"UTF8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
assert|assert
literal|false
operator|:
literal|"UTF8 encoding is not supported "
assert|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Converts a string to a byte array using UTF8 encoding.    */
DECL|method|string2Bytes (String str)
specifier|public
specifier|static
name|byte
index|[]
name|string2Bytes
parameter_list|(
name|String
name|str
parameter_list|)
block|{
try|try
block|{
return|return
name|str
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
assert|assert
literal|false
operator|:
literal|"UTF8 encoding is not supported "
assert|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Given a list of path components returns a path as a UTF8 String    */
DECL|method|byteArray2String (byte[][] pathComponents)
specifier|public
specifier|static
name|String
name|byteArray2String
parameter_list|(
name|byte
index|[]
index|[]
name|pathComponents
parameter_list|)
block|{
if|if
condition|(
name|pathComponents
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|pathComponents
operator|.
name|length
operator|==
literal|1
operator|&&
name|pathComponents
index|[
literal|0
index|]
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Path
operator|.
name|SEPARATOR
return|;
block|}
try|try
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathComponents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|pathComponents
index|[
name|i
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|pathComponents
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR_CHAR
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
assert|assert
literal|false
operator|:
literal|"UTF8 encoding is not supported "
assert|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Splits the array of bytes into array of arrays of bytes    * on byte separator    * @param bytes the array of bytes to split    * @param separator the delimiting byte    */
DECL|method|bytes2byteArray (byte[] bytes, byte separator)
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|bytes2byteArray
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
name|separator
parameter_list|)
block|{
return|return
name|bytes2byteArray
argument_list|(
name|bytes
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|separator
argument_list|)
return|;
block|}
comment|/**    * Splits first len bytes in bytes to array of arrays of bytes    * on byte separator    * @param bytes the byte array to split    * @param len the number of bytes to split    * @param separator the delimiting byte    */
DECL|method|bytes2byteArray (byte[] bytes, int len, byte separator)
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|bytes2byteArray
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|len
parameter_list|,
name|byte
name|separator
parameter_list|)
block|{
assert|assert
name|len
operator|<=
name|bytes
operator|.
name|length
assert|;
name|int
name|splits
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|byte
index|[]
index|[]
block|{
literal|null
block|}
return|;
block|}
comment|// Count the splits. Omit multiple separators and the last one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bytes
index|[
name|i
index|]
operator|==
name|separator
condition|)
block|{
name|splits
operator|++
expr_stmt|;
block|}
block|}
name|int
name|last
init|=
name|len
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|last
operator|>
operator|-
literal|1
operator|&&
name|bytes
index|[
name|last
operator|--
index|]
operator|==
name|separator
condition|)
block|{
name|splits
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|splits
operator|==
literal|0
operator|&&
name|bytes
index|[
literal|0
index|]
operator|==
name|separator
condition|)
block|{
return|return
operator|new
name|byte
index|[]
index|[]
block|{
literal|null
block|}
return|;
block|}
name|splits
operator|++
expr_stmt|;
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|splits
index|]
index|[]
decl_stmt|;
name|int
name|startIndex
init|=
literal|0
decl_stmt|;
name|int
name|nextIndex
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
comment|// Build the splits
while|while
condition|(
name|index
operator|<
name|splits
condition|)
block|{
while|while
condition|(
name|nextIndex
operator|<
name|len
operator|&&
name|bytes
index|[
name|nextIndex
index|]
operator|!=
name|separator
condition|)
block|{
name|nextIndex
operator|++
expr_stmt|;
block|}
name|result
index|[
name|index
index|]
operator|=
operator|new
name|byte
index|[
name|nextIndex
operator|-
name|startIndex
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|startIndex
argument_list|,
name|result
index|[
name|index
index|]
argument_list|,
literal|0
argument_list|,
name|nextIndex
operator|-
name|startIndex
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
name|startIndex
operator|=
name|nextIndex
operator|+
literal|1
expr_stmt|;
name|nextIndex
operator|=
name|startIndex
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Convert a LocatedBlocks to BlockLocations[]    * @param blocks a LocatedBlocks    * @return an array of BlockLocations    */
DECL|method|locatedBlocks2Locations (LocatedBlocks blocks)
specifier|public
specifier|static
name|BlockLocation
index|[]
name|locatedBlocks2Locations
parameter_list|(
name|LocatedBlocks
name|blocks
parameter_list|)
block|{
if|if
condition|(
name|blocks
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
name|int
name|nrBlocks
init|=
name|blocks
operator|.
name|locatedBlockCount
argument_list|()
decl_stmt|;
name|BlockLocation
index|[]
name|blkLocations
init|=
operator|new
name|BlockLocation
index|[
name|nrBlocks
index|]
decl_stmt|;
if|if
condition|(
name|nrBlocks
operator|==
literal|0
condition|)
block|{
return|return
name|blkLocations
return|;
block|}
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|blk
range|:
name|blocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
assert|assert
name|idx
operator|<
name|nrBlocks
operator|:
literal|"Incorrect index"
assert|;
name|DatanodeInfo
index|[]
name|locations
init|=
name|blk
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|racks
init|=
operator|new
name|String
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|hCnt
init|=
literal|0
init|;
name|hCnt
operator|<
name|locations
operator|.
name|length
condition|;
name|hCnt
operator|++
control|)
block|{
name|hosts
index|[
name|hCnt
index|]
operator|=
name|locations
index|[
name|hCnt
index|]
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|names
index|[
name|hCnt
index|]
operator|=
name|locations
index|[
name|hCnt
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
name|NodeBase
name|node
init|=
operator|new
name|NodeBase
argument_list|(
name|names
index|[
name|hCnt
index|]
argument_list|,
name|locations
index|[
name|hCnt
index|]
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
decl_stmt|;
name|racks
index|[
name|hCnt
index|]
operator|=
name|node
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|blkLocations
index|[
name|idx
index|]
operator|=
operator|new
name|BlockLocation
argument_list|(
name|names
argument_list|,
name|hosts
argument_list|,
name|racks
argument_list|,
name|blk
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|blk
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|blk
operator|.
name|isCorrupt
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
return|return
name|blkLocations
return|;
block|}
comment|/**    * Returns collection of nameservice Ids from the configuration.    * @param conf configuration    * @return collection of nameservice Ids    */
DECL|method|getNameServiceIds (Configuration conf)
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getNameServiceIds
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getStringCollection
argument_list|(
name|DFS_FEDERATION_NAMESERVICES
argument_list|)
return|;
block|}
comment|/**    * Namenode HighAvailability related configuration.    * Returns collection of namenode Ids from the configuration. One logical id    * for each namenode in the in the HA setup.    *     * @param conf configuration    * @return collection of namenode Ids    */
DECL|method|getNameNodeIds (Configuration conf)
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getNameNodeIds
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getStringCollection
argument_list|(
name|DFS_HA_NAMENODES_KEY
argument_list|)
return|;
block|}
comment|/**    * Given a list of keys in the order of preference, returns a value    * for the key in the given order from the configuration.    * @param defaultValue default value to return, when key was not found    * @param keySuffix suffix to add to the key, if it is not null    * @param conf Configuration    * @param keys list of keys in the order of preference    * @return value of the key or default if a key was not found in configuration    */
DECL|method|getConfValue (String defaultValue, String keySuffix, Configuration conf, String... keys)
specifier|private
specifier|static
name|String
name|getConfValue
parameter_list|(
name|String
name|defaultValue
parameter_list|,
name|String
name|keySuffix
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|key
operator|=
name|addSuffix
argument_list|(
name|key
argument_list|,
name|keySuffix
argument_list|)
expr_stmt|;
name|value
operator|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/** Add non empty and non null suffix to a key */
DECL|method|addSuffix (String key, String suffix)
specifier|private
specifier|static
name|String
name|addSuffix
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|suffix
operator|==
literal|null
operator|||
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|key
return|;
block|}
if|if
condition|(
operator|!
name|suffix
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|key
operator|+=
literal|"."
expr_stmt|;
block|}
return|return
name|key
operator|+=
name|suffix
return|;
block|}
comment|/** Concatenate list of suffix strings '.' separated */
DECL|method|concatSuffixes (String... suffixes)
specifier|private
specifier|static
name|String
name|concatSuffixes
parameter_list|(
name|String
modifier|...
name|suffixes
parameter_list|)
block|{
if|if
condition|(
name|suffixes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|suffixes
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|=
name|addSuffix
argument_list|(
name|ret
argument_list|,
name|suffixes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|addSuffix
argument_list|(
name|ret
argument_list|,
name|suffixes
index|[
name|suffixes
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
return|;
block|}
comment|/**    * Return configuration key of format key.suffix1.suffix2...suffixN    */
DECL|method|addKeySuffixes (String key, String... suffixes)
specifier|public
specifier|static
name|String
name|addKeySuffixes
parameter_list|(
name|String
name|key
parameter_list|,
name|String
modifier|...
name|suffixes
parameter_list|)
block|{
name|String
name|keySuffix
init|=
name|concatSuffixes
argument_list|(
name|suffixes
argument_list|)
decl_stmt|;
return|return
name|addSuffix
argument_list|(
name|key
argument_list|,
name|keySuffix
argument_list|)
return|;
block|}
comment|/**    * Returns list of InetSocketAddress for a given set of keys.    * @param conf configuration    * @param defaultAddress default address to return in case key is not found    * @param keys Set of keys to look for in the order of preference    * @return list of InetSocketAddress corresponding to the key    */
DECL|method|getAddresses (Configuration conf, String defaultAddress, String... keys)
specifier|private
specifier|static
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|getAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|defaultAddress
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|nameserviceIds
init|=
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|namenodeIds
init|=
name|getNameNodeIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|isas
init|=
operator|new
name|ArrayList
argument_list|<
name|InetSocketAddress
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|federationEnabled
init|=
name|nameserviceIds
operator|!=
literal|null
operator|&&
operator|!
name|nameserviceIds
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|haEnabled
init|=
name|namenodeIds
operator|!=
literal|null
operator|&&
operator|!
name|namenodeIds
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|// Configuration with no federation and ha, return default address
if|if
condition|(
operator|!
name|federationEnabled
operator|&&
operator|!
name|haEnabled
condition|)
block|{
name|String
name|address
init|=
name|getConfValue
argument_list|(
name|defaultAddress
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|keys
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|isas
operator|.
name|add
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|isas
return|;
block|}
if|if
condition|(
operator|!
name|federationEnabled
condition|)
block|{
name|nameserviceIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|nameserviceIds
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|haEnabled
condition|)
block|{
name|namenodeIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|namenodeIds
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Get configuration suffixed with nameserviceId and/or namenodeId
if|if
condition|(
name|federationEnabled
operator|&&
name|haEnabled
condition|)
block|{
for|for
control|(
name|String
name|nameserviceId
range|:
name|nameserviceIds
control|)
block|{
for|for
control|(
name|String
name|nnId
range|:
name|namenodeIds
control|)
block|{
name|String
name|keySuffix
init|=
name|concatSuffixes
argument_list|(
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|getConfValue
argument_list|(
literal|null
argument_list|,
name|keySuffix
argument_list|,
name|conf
argument_list|,
name|keys
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|isas
operator|.
name|add
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|federationEnabled
operator|&&
name|haEnabled
condition|)
block|{
for|for
control|(
name|String
name|nnId
range|:
name|namenodeIds
control|)
block|{
name|String
name|address
init|=
name|getConfValue
argument_list|(
literal|null
argument_list|,
name|nnId
argument_list|,
name|conf
argument_list|,
name|keys
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|isas
operator|.
name|add
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|federationEnabled
operator|&&
operator|!
name|haEnabled
condition|)
block|{
for|for
control|(
name|String
name|nameserviceId
range|:
name|nameserviceIds
control|)
block|{
name|String
name|address
init|=
name|getConfValue
argument_list|(
literal|null
argument_list|,
name|nameserviceId
argument_list|,
name|conf
argument_list|,
name|keys
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|isas
operator|.
name|add
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|isas
return|;
block|}
comment|/**    * Returns list of InetSocketAddress corresponding to HA NN RPC addresses from    * the configuration.    *     * @param conf configuration    * @return list of InetSocketAddresses    * @throws IOException if no addresses are configured    */
DECL|method|getHaNnRpcAddresses ( Configuration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|getHaNnRpcAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|addressList
init|=
name|getAddresses
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressList
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect configuration: HA name node addresses "
operator|+
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|" is not configured."
argument_list|)
throw|;
block|}
return|return
name|addressList
return|;
block|}
comment|/**    * Returns list of InetSocketAddress corresponding to  backup node rpc     * addresses from the configuration.    *     * @param conf configuration    * @return list of InetSocketAddresses    * @throws IOException on error    */
DECL|method|getBackupNodeAddresses ( Configuration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|getBackupNodeAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|addressList
init|=
name|getAddresses
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressList
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect configuration: backup node address "
operator|+
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
operator|+
literal|" is not configured."
argument_list|)
throw|;
block|}
return|return
name|addressList
return|;
block|}
comment|/**    * Returns list of InetSocketAddresses of corresponding to secondary namenode    * http addresses from the configuration.    *     * @param conf configuration    * @return list of InetSocketAddresses    * @throws IOException on error    */
DECL|method|getSecondaryNameNodeAddresses ( Configuration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|getSecondaryNameNodeAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|addressList
init|=
name|getAddresses
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressList
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect configuration: secondary namenode address "
operator|+
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
operator|+
literal|" is not configured."
argument_list|)
throw|;
block|}
return|return
name|addressList
return|;
block|}
comment|/**    * Returns list of InetSocketAddresses corresponding to namenodes from the    * configuration. Note this is to be used by datanodes to get the list of    * namenode addresses to talk to.    *     * Returns namenode address specifically configured for datanodes (using    * service ports), if found. If not, regular RPC address configured for other    * clients is returned.    *     * @param conf configuration    * @return list of InetSocketAddress    * @throws IOException on error    */
DECL|method|getNNServiceRpcAddresses ( Configuration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|getNNServiceRpcAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Use default address as fall back
name|String
name|defaultAddress
decl_stmt|;
try|try
block|{
name|defaultAddress
operator|=
name|NameNode
operator|.
name|getHostPortString
argument_list|(
name|NameNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|defaultAddress
operator|=
literal|null
expr_stmt|;
block|}
name|List
argument_list|<
name|InetSocketAddress
argument_list|>
name|addressList
init|=
name|getAddresses
argument_list|(
name|conf
argument_list|,
name|defaultAddress
argument_list|,
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressList
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrect configuration: namenode address "
operator|+
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
operator|+
literal|" or "
operator|+
name|DFS_NAMENODE_RPC_ADDRESS_KEY
operator|+
literal|" is not configured."
argument_list|)
throw|;
block|}
return|return
name|addressList
return|;
block|}
comment|/**    * Given the InetSocketAddress this method returns the nameservice Id    * corresponding to the key with matching address, by doing a reverse     * lookup on the list of nameservices until it finds a match.    *     * If null is returned, client should try {@link #isDefaultNamenodeAddress}    * to check pre-Federation, non-HA configurations.    * Since the process of resolving URIs to Addresses is slightly expensive,    * this utility method should not be used in performance-critical routines.    *     * @param conf - configuration    * @param address - InetSocketAddress for configured communication with NN.    *     Configured addresses are typically given as URIs, but we may have to    *     compare against a URI typed in by a human, or the server name may be    *     aliased, so we compare unambiguous InetSocketAddresses instead of just    *     comparing URI substrings.    * @param keys - list of configured communication parameters that should    *     be checked for matches.  For example, to compare against RPC addresses,    *     provide the list DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,    *     DFS_NAMENODE_RPC_ADDRESS_KEY.  Use the generic parameter keys,    *     not the NameServiceId-suffixed keys.    * @return nameserviceId, or null if no match found    */
DECL|method|getNameServiceIdFromAddress (final Configuration conf, final InetSocketAddress address, String... keys)
specifier|public
specifier|static
name|String
name|getNameServiceIdFromAddress
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|InetSocketAddress
name|address
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
comment|// Configuration with a single namenode and no nameserviceId
if|if
condition|(
operator|!
name|isFederationEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|ids
init|=
name|getSuffixIDs
argument_list|(
name|conf
argument_list|,
name|address
argument_list|,
name|keys
argument_list|)
decl_stmt|;
return|return
operator|(
name|ids
operator|!=
literal|null
operator|&&
name|ids
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|ids
index|[
literal|0
index|]
else|:
literal|null
return|;
block|}
comment|/**    * return server http or https address from the configuration for a    * given namenode rpc address.    * @param conf    * @param namenodeAddr - namenode RPC address    * @param httpsAddress -If true, and if security is enabled, returns server     *                      https address. If false, returns server http address.    * @return server http or https address    */
DECL|method|getInfoServer ( InetSocketAddress namenodeAddr, Configuration conf, boolean httpsAddress)
specifier|public
specifier|static
name|String
name|getInfoServer
parameter_list|(
name|InetSocketAddress
name|namenodeAddr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|httpsAddress
parameter_list|)
block|{
name|String
name|httpAddress
init|=
literal|null
decl_stmt|;
name|boolean
name|securityOn
init|=
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
decl_stmt|;
name|String
name|httpAddressKey
init|=
operator|(
name|securityOn
operator|&&
name|httpsAddress
operator|)
condition|?
name|DFS_NAMENODE_HTTPS_ADDRESS_KEY
else|:
name|DFS_NAMENODE_HTTP_ADDRESS_KEY
decl_stmt|;
name|String
name|httpAddressDefault
init|=
operator|(
name|securityOn
operator|&&
name|httpsAddress
operator|)
condition|?
name|DFS_NAMENODE_HTTPS_ADDRESS_DEFAULT
else|:
name|DFS_NAMENODE_HTTP_ADDRESS_DEFAULT
decl_stmt|;
if|if
condition|(
name|namenodeAddr
operator|!=
literal|null
condition|)
block|{
comment|// if non-default namenode, try reverse look up
comment|// the nameServiceID if it is available
name|String
name|nameServiceId
init|=
name|DFSUtil
operator|.
name|getNameServiceIdFromAddress
argument_list|(
name|conf
argument_list|,
name|namenodeAddr
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameServiceId
operator|!=
literal|null
condition|)
block|{
name|httpAddress
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|httpAddressKey
argument_list|,
name|nameServiceId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// else - Use non-federation style configuration
if|if
condition|(
name|httpAddress
operator|==
literal|null
condition|)
block|{
name|httpAddress
operator|=
name|conf
operator|.
name|get
argument_list|(
name|httpAddressKey
argument_list|,
name|httpAddressDefault
argument_list|)
expr_stmt|;
block|}
return|return
name|httpAddress
return|;
block|}
comment|/**    * Given the InetSocketAddress for any configured communication with a     * namenode, this method determines whether it is the configured    * communication channel for the "default" namenode.    * It does a reverse lookup on the list of default communication parameters    * to see if the given address matches any of them.    * Since the process of resolving URIs to Addresses is slightly expensive,    * this utility method should not be used in performance-critical routines.    *     * @param conf - configuration    * @param address - InetSocketAddress for configured communication with NN.    *     Configured addresses are typically given as URIs, but we may have to    *     compare against a URI typed in by a human, or the server name may be    *     aliased, so we compare unambiguous InetSocketAddresses instead of just    *     comparing URI substrings.    * @param keys - list of configured communication parameters that should    *     be checked for matches.  For example, to compare against RPC addresses,    *     provide the list DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,    *     DFS_NAMENODE_RPC_ADDRESS_KEY    * @return - boolean confirmation if matched generic parameter    */
DECL|method|isDefaultNamenodeAddress (Configuration conf, InetSocketAddress address, String... keys)
specifier|public
specifier|static
name|boolean
name|isDefaultNamenodeAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
name|candidateAddress
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidateAddress
operator|!=
literal|null
operator|&&
name|address
operator|.
name|equals
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|candidateAddress
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Sets the node specific setting into generic configuration key. Looks up    * value of "key.nameserviceId.namenodeId" and if found sets that value into     * generic key in the conf. Note that this only modifies the runtime conf.    *     * @param conf    *          Configuration object to lookup specific key and to set the value    *          to the key passed. Note the conf object is modified.    * @param nameserviceId    *          nameservice Id to construct the node specific key. Pass null if    *          federation is not configuration.    * @param nnId    *          namenode Id to construct the node specific key. Pass null if    *          HA is not configured.    * @param keys    *          The key for which node specific value is looked up    */
DECL|method|setGenericConf (Configuration conf, String nameserviceId, String nnId, String... keys)
specifier|public
specifier|static
name|void
name|setGenericConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nameserviceId
parameter_list|,
name|String
name|nnId
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
name|value
init|=
name|conf
operator|.
name|get
argument_list|(
name|addKeySuffixes
argument_list|(
name|key
argument_list|,
name|nameserviceId
argument_list|,
name|nnId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Return used as percentage of capacity */
DECL|method|getPercentUsed (long used, long capacity)
specifier|public
specifier|static
name|float
name|getPercentUsed
parameter_list|(
name|long
name|used
parameter_list|,
name|long
name|capacity
parameter_list|)
block|{
return|return
name|capacity
operator|<=
literal|0
condition|?
literal|100
else|:
operator|(
name|used
operator|*
literal|100.0f
operator|)
operator|/
name|capacity
return|;
block|}
comment|/** Return remaining as percentage of capacity */
DECL|method|getPercentRemaining (long remaining, long capacity)
specifier|public
specifier|static
name|float
name|getPercentRemaining
parameter_list|(
name|long
name|remaining
parameter_list|,
name|long
name|capacity
parameter_list|)
block|{
return|return
name|capacity
operator|<=
literal|0
condition|?
literal|0
else|:
operator|(
name|remaining
operator|*
literal|100.0f
operator|)
operator|/
name|capacity
return|;
block|}
comment|/**    * @param address address of format host:port    * @return InetSocketAddress for the address    */
DECL|method|getSocketAddress (String address)
specifier|public
specifier|static
name|InetSocketAddress
name|getSocketAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|int
name|colon
init|=
name|address
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|address
argument_list|,
literal|0
argument_list|)
return|;
block|}
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|address
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colon
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|address
operator|.
name|substring
argument_list|(
name|colon
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Round bytes to GiB (gibibyte)    * @param bytes number of bytes    * @return number of GiB    */
DECL|method|roundBytesToGB (long bytes)
specifier|public
specifier|static
name|int
name|roundBytesToGB
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
operator|(
name|float
operator|)
name|bytes
operator|/
literal|1024
operator|/
literal|1024
operator|/
literal|1024
argument_list|)
return|;
block|}
comment|/** Create a {@link NameNode} proxy */
DECL|method|createNamenode (Configuration conf)
specifier|public
specifier|static
name|ClientProtocol
name|createNamenode
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createNamenode
argument_list|(
name|NameNode
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Create a {@link NameNode} proxy */
DECL|method|createNamenode (InetSocketAddress nameNodeAddr, Configuration conf)
specifier|public
specifier|static
name|ClientProtocol
name|createNamenode
parameter_list|(
name|InetSocketAddress
name|nameNodeAddr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createNamenode
argument_list|(
name|nameNodeAddr
argument_list|,
name|conf
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
return|;
block|}
comment|/** Create a {@link NameNode} proxy */
DECL|method|createNamenode ( InetSocketAddress nameNodeAddr, Configuration conf, UserGroupInformation ugi)
specifier|public
specifier|static
name|ClientProtocol
name|createNamenode
parameter_list|(
name|InetSocketAddress
name|nameNodeAddr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**       * Currently we have simply burnt-in support for a SINGLE      * protocol - protocolR23Compatible. This will be replaced      * by a way to pick the right protocol based on the       * version of the target server.        */
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ClientNamenodeProtocolTranslatorR23
argument_list|(
name|nameNodeAddr
argument_list|,
name|conf
argument_list|,
name|ugi
argument_list|)
return|;
block|}
comment|/** Create a {@link ClientDatanodeProtocol} proxy */
DECL|method|createClientDatanodeProtocolProxy ( DatanodeID datanodeid, Configuration conf, int socketTimeout, LocatedBlock locatedBlock)
specifier|public
specifier|static
name|ClientDatanodeProtocol
name|createClientDatanodeProtocolProxy
parameter_list|(
name|DatanodeID
name|datanodeid
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|socketTimeout
parameter_list|,
name|LocatedBlock
name|locatedBlock
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ClientDatanodeProtocolTranslatorR23
argument_list|(
name|datanodeid
argument_list|,
name|conf
argument_list|,
name|socketTimeout
argument_list|,
name|locatedBlock
argument_list|)
return|;
block|}
comment|/**    * Returns true if federation configuration is enabled    */
DECL|method|isFederationEnabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isFederationEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|collection
init|=
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|collection
operator|!=
literal|null
operator|&&
name|collection
operator|.
name|size
argument_list|()
operator|!=
literal|0
return|;
block|}
comment|/** Create {@link ClientDatanodeProtocol} proxy using kerberos ticket */
DECL|method|createClientDatanodeProtocolProxy ( DatanodeID datanodeid, Configuration conf, int socketTimeout)
specifier|static
name|ClientDatanodeProtocol
name|createClientDatanodeProtocolProxy
parameter_list|(
name|DatanodeID
name|datanodeid
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|socketTimeout
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ClientDatanodeProtocolTranslatorR23
argument_list|(
name|datanodeid
argument_list|,
name|conf
argument_list|,
name|socketTimeout
argument_list|)
return|;
block|}
comment|/** Create a {@link ClientDatanodeProtocol} proxy */
DECL|method|createClientDatanodeProtocolProxy ( InetSocketAddress addr, UserGroupInformation ticket, Configuration conf, SocketFactory factory)
specifier|public
specifier|static
name|ClientDatanodeProtocol
name|createClientDatanodeProtocolProxy
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|UserGroupInformation
name|ticket
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
operator|.
name|ClientDatanodeProtocolTranslatorR23
argument_list|(
name|addr
argument_list|,
name|ticket
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|)
return|;
block|}
comment|/**    * Get nameservice Id for the {@link NameNode} based on namenode RPC address    * matching the local node address.    */
DECL|method|getNamenodeNameServiceId (Configuration conf)
specifier|public
specifier|static
name|String
name|getNamenodeNameServiceId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getNameServiceId
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_RPC_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * Get nameservice Id for the BackupNode based on backup node RPC address    * matching the local node address.    */
DECL|method|getBackupNameServiceId (Configuration conf)
specifier|public
specifier|static
name|String
name|getBackupNameServiceId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getNameServiceId
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_BACKUP_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * Get nameservice Id for the secondary node based on secondary http address    * matching the local node address.    */
DECL|method|getSecondaryNameServiceId (Configuration conf)
specifier|public
specifier|static
name|String
name|getSecondaryNameServiceId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getNameServiceId
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY
argument_list|)
return|;
block|}
comment|/**    * Get the nameservice Id by matching the {@code addressKey} with the    * the address of the local node.     *     * If {@link DFSConfigKeys#DFS_FEDERATION_NAMESERVICE_ID} is not specifically    * configured, this method determines the nameservice Id by matching the local    * node's address with the configured addresses. When a match is found, it    * returns the nameservice Id from the corresponding configuration key.    *     * @param conf Configuration    * @param addressKey configuration key to get the address.    * @return nameservice Id on success, null if federation is not configured.    * @throws HadoopIllegalArgumentException on error    */
DECL|method|getNameServiceId (Configuration conf, String addressKey)
specifier|private
specifier|static
name|String
name|getNameServiceId
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|addressKey
parameter_list|)
block|{
name|String
name|nameserviceId
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_FEDERATION_NAMESERVICE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameserviceId
operator|!=
literal|null
condition|)
block|{
return|return
name|nameserviceId
return|;
block|}
if|if
condition|(
operator|!
name|isFederationEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|nameserviceId
operator|=
name|getSuffixIDs
argument_list|(
name|conf
argument_list|,
name|addressKey
argument_list|,
name|LOCAL_ADDRESS_MATCHER
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|nameserviceId
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Configuration "
operator|+
name|addressKey
operator|+
literal|" must be suffixed with"
operator|+
literal|" nameserviceId for federation configuration."
decl_stmt|;
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|nameserviceId
return|;
block|}
comment|/**    * Returns nameservice Id and namenode Id when the local host matches the    * configuration parameter {@code addressKey}.<nameservice Id>.<namenode Id>    *     * @param conf Configuration    * @param addressKey configuration key corresponding to the address.    * @param matcher matching criteria for matching the address    * @return Array with nameservice Id and namenode Id on success. First element    *         in the array is nameservice Id and second element is namenode Id.    *         Null value indicates that the configuration does not have the the    *         Id.    * @throws HadoopIllegalArgumentException on error    */
DECL|method|getSuffixIDs (final Configuration conf, final String addressKey, final AddressMatcher matcher)
specifier|static
name|String
index|[]
name|getSuffixIDs
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|addressKey
parameter_list|,
specifier|final
name|AddressMatcher
name|matcher
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|nsIds
init|=
name|getNameServiceIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|federationEnabled
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|nsIds
operator|==
literal|null
operator|||
name|nsIds
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|federationEnabled
operator|=
literal|false
expr_stmt|;
comment|// federation not configured
name|nsIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|nsIds
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|haEnabled
init|=
literal|true
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|nnIds
init|=
name|getNameNodeIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|nnIds
operator|==
literal|null
operator|||
name|nnIds
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|haEnabled
operator|=
literal|false
expr_stmt|;
comment|// HA not configured
name|nnIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|nnIds
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Match the address from addressKey.nsId.nnId based on the given matcher
name|String
name|nameserviceId
init|=
literal|null
decl_stmt|;
name|String
name|namenodeId
init|=
literal|null
decl_stmt|;
name|int
name|found
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|nsId
range|:
name|nsIds
control|)
block|{
for|for
control|(
name|String
name|nnId
range|:
name|nnIds
control|)
block|{
name|String
name|key
init|=
name|addKeySuffixes
argument_list|(
name|addressKey
argument_list|,
name|nsId
argument_list|,
name|nnId
argument_list|)
decl_stmt|;
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
continue|continue;
block|}
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|nameserviceId
operator|=
name|nsId
expr_stmt|;
name|namenodeId
operator|=
name|nnId
expr_stmt|;
name|found
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|found
operator|>
literal|1
condition|)
block|{
comment|// Only one address must match the local address
name|String
name|msg
init|=
literal|"Configuration has multiple addresses that match "
operator|+
literal|"local node's address. Please configure the system with "
operator|+
operator|(
name|federationEnabled
condition|?
name|DFS_FEDERATION_NAMESERVICE_ID
else|:
literal|""
operator|)
operator|+
operator|(
name|haEnabled
condition|?
operator|(
literal|" and "
operator|+
name|DFS_HA_NAMENODE_ID_KEY
operator|)
else|:
literal|""
operator|)
decl_stmt|;
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
operator|new
name|String
index|[]
block|{
name|nameserviceId
block|,
name|namenodeId
block|}
return|;
block|}
comment|/**    * For given set of {@code keys} adds nameservice Id and or namenode Id    * and returns {nameserviceId, namenodeId} when address match is found.    * @see #getSuffixIDs(Configuration, String, AddressMatcher)    */
DECL|method|getSuffixIDs (final Configuration conf, final InetSocketAddress address, final String... keys)
specifier|static
name|String
index|[]
name|getSuffixIDs
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|InetSocketAddress
name|address
parameter_list|,
specifier|final
name|String
modifier|...
name|keys
parameter_list|)
block|{
name|AddressMatcher
name|matcher
init|=
operator|new
name|AddressMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|InetSocketAddress
name|s
parameter_list|)
block|{
return|return
name|address
operator|.
name|equals
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|String
index|[]
name|ids
init|=
name|getSuffixIDs
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
operator|(
name|ids
index|[
literal|0
index|]
operator|!=
literal|null
operator|||
name|ids
index|[
literal|1
index|]
operator|!=
literal|null
operator|)
condition|)
block|{
return|return
name|ids
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|interface|AddressMatcher
specifier|private
interface|interface
name|AddressMatcher
block|{
DECL|method|match (InetSocketAddress s)
specifier|public
name|boolean
name|match
parameter_list|(
name|InetSocketAddress
name|s
parameter_list|)
function_decl|;
block|}
comment|/** Create a URI from the scheme and address */
DECL|method|createUri (String scheme, InetSocketAddress address)
specifier|public
specifier|static
name|URI
name|createUri
parameter_list|(
name|String
name|scheme
parameter_list|,
name|InetSocketAddress
name|address
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
literal|null
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ue
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ue
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

