begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|RatisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|client
operator|.
name|RaftClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|RpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|SupportedRpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|CheckedRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|CheckedSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|LifeCycle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link RatisManager}.  */
end_comment

begin_class
DECL|class|RatisManagerImpl
specifier|public
class|class
name|RatisManagerImpl
implements|implements
name|RatisManager
block|{
DECL|field|EMPTY_RARTPEER_ARRAY
specifier|static
specifier|final
name|RaftPeer
index|[]
name|EMPTY_RARTPEER_ARRAY
init|=
block|{}
decl_stmt|;
DECL|class|RatisCluster
specifier|static
specifier|final
class|class
name|RatisCluster
block|{
DECL|field|clusterId
specifier|private
specifier|final
name|String
name|clusterId
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|LifeCycle
name|state
decl_stmt|;
DECL|field|datanodes
specifier|private
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|datanodes
decl_stmt|;
DECL|method|RatisCluster (String clusterId, List<DatanodeID> datanodes)
specifier|private
name|RatisCluster
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|datanodes
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
name|this
operator|.
name|state
operator|=
operator|new
name|LifeCycle
argument_list|(
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|datanodes
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|datanodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getDatanodes ()
specifier|synchronized
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|getDatanodes
parameter_list|()
block|{
return|return
name|datanodes
return|;
block|}
DECL|method|setDatanodes ( CheckedSupplier<List<DatanodeID>, IOException> update)
specifier|synchronized
name|void
name|setDatanodes
parameter_list|(
name|CheckedSupplier
argument_list|<
name|List
argument_list|<
name|DatanodeID
argument_list|>
argument_list|,
name|IOException
argument_list|>
name|update
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|.
name|assertCurrentState
argument_list|(
name|LifeCycle
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|datanodes
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|update
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|init (CheckedRunnable<IOException> init)
specifier|synchronized
name|void
name|init
parameter_list|(
name|CheckedRunnable
argument_list|<
name|IOException
argument_list|>
name|init
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|.
name|startAndTransition
argument_list|(
parameter_list|()
lambda|->
name|init
operator|.
name|run
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|close (CheckedRunnable<IOException> close)
specifier|synchronized
name|void
name|close
parameter_list|(
name|CheckedRunnable
argument_list|<
name|IOException
argument_list|>
name|close
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|.
name|checkStateAndClose
argument_list|(
parameter_list|()
lambda|->
name|close
operator|.
name|run
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|":"
operator|+
name|clusterId
return|;
block|}
block|}
DECL|class|RatisInfo
specifier|static
specifier|final
class|class
name|RatisInfo
block|{
DECL|field|peer
specifier|private
specifier|final
name|RaftPeer
name|peer
decl_stmt|;
DECL|method|RatisInfo (DatanodeID datanode)
specifier|private
name|RatisInfo
parameter_list|(
name|DatanodeID
name|datanode
parameter_list|)
block|{
name|this
operator|.
name|peer
operator|=
name|RatisHelper
operator|.
name|toRaftPeer
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
block|}
DECL|method|getPeer ()
name|RaftPeer
name|getPeer
parameter_list|()
block|{
return|return
name|peer
return|;
block|}
block|}
DECL|field|rpcType
specifier|private
specifier|final
name|RpcType
name|rpcType
decl_stmt|;
DECL|field|clusters
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RatisCluster
argument_list|>
name|clusters
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|infos
specifier|private
specifier|final
name|Map
argument_list|<
name|DatanodeID
argument_list|,
name|RatisInfo
argument_list|>
name|infos
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|RatisManagerImpl (String rpc)
name|RatisManagerImpl
parameter_list|(
name|String
name|rpc
parameter_list|)
block|{
name|rpcType
operator|=
name|SupportedRpcType
operator|.
name|valueOfIgnoreCase
argument_list|(
name|rpc
argument_list|)
expr_stmt|;
block|}
DECL|method|getRaftPeer (DatanodeID datanode)
specifier|private
name|RaftPeer
name|getRaftPeer
parameter_list|(
name|DatanodeID
name|datanode
parameter_list|)
block|{
return|return
name|infos
operator|.
name|computeIfAbsent
argument_list|(
name|datanode
argument_list|,
name|RatisInfo
operator|::
operator|new
argument_list|)
operator|.
name|getPeer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createRatisCluster (String clusterId, List<DatanodeID> datanodes)
specifier|public
name|void
name|createRatisCluster
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|datanodes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RatisCluster
name|cluster
init|=
operator|new
name|RatisCluster
argument_list|(
name|clusterId
argument_list|,
name|datanodes
argument_list|)
decl_stmt|;
specifier|final
name|RatisCluster
name|returned
init|=
name|clusters
operator|.
name|putIfAbsent
argument_list|(
name|clusterId
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
if|if
condition|(
name|returned
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cluster "
operator|+
name|clusterId
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
specifier|final
name|RaftPeer
index|[]
name|newPeers
init|=
name|datanodes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|getRaftPeer
argument_list|)
operator|.
name|toArray
argument_list|(
name|RaftPeer
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|init
argument_list|(
parameter_list|()
lambda|->
name|reinitialize
argument_list|(
name|datanodes
argument_list|,
name|newPeers
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|reinitialize (List<DatanodeID> datanodes, RaftPeer[] newPeers)
specifier|private
name|void
name|reinitialize
parameter_list|(
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|datanodes
parameter_list|,
name|RaftPeer
index|[]
name|newPeers
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|datanodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DatanodeID
name|d
range|:
name|datanodes
control|)
block|{
try|try
block|{
name|reinitialize
argument_list|(
name|d
argument_list|,
name|newPeers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
operator|new
name|IOException
argument_list|(
literal|"Failed to reinitialize some of the RaftPeer(s)"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exception
operator|.
name|addSuppressed
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
DECL|method|reinitialize (DatanodeID datanode, RaftPeer[] newPeers)
specifier|private
name|void
name|reinitialize
parameter_list|(
name|DatanodeID
name|datanode
parameter_list|,
name|RaftPeer
index|[]
name|newPeers
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RaftPeer
name|p
init|=
name|getRaftPeer
argument_list|(
name|datanode
argument_list|)
decl_stmt|;
try|try
init|(
name|RaftClient
name|client
init|=
name|RatisHelper
operator|.
name|newRaftClient
argument_list|(
name|rpcType
argument_list|,
name|p
argument_list|)
init|)
block|{
name|client
operator|.
name|reinitialize
argument_list|(
name|newPeers
argument_list|,
name|p
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to reinitialize RaftPeer "
operator|+
name|p
operator|+
literal|"(datanode="
operator|+
name|datanode
operator|+
literal|")"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|closeRatisCluster (String clusterId)
specifier|public
name|void
name|closeRatisCluster
parameter_list|(
name|String
name|clusterId
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RatisCluster
name|c
init|=
name|clusters
operator|.
name|get
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cluster "
operator|+
name|clusterId
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
name|c
operator|.
name|close
argument_list|(
parameter_list|()
lambda|->
name|reinitialize
argument_list|(
name|c
operator|.
name|getDatanodes
argument_list|()
argument_list|,
name|EMPTY_RARTPEER_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDatanodes (String clusterId)
specifier|public
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|getDatanodes
parameter_list|(
name|String
name|clusterId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|clusters
operator|.
name|get
argument_list|(
name|clusterId
argument_list|)
operator|.
name|getDatanodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|updateDatanodes (String clusterId, List<DatanodeID> newDNs)
specifier|public
name|void
name|updateDatanodes
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|newDNs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RatisCluster
name|c
init|=
name|clusters
operator|.
name|get
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
name|c
operator|.
name|setDatanodes
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|oldDNs
init|=
name|c
operator|.
name|getDatanodes
argument_list|()
decl_stmt|;
specifier|final
name|RaftPeer
index|[]
name|newPeers
init|=
name|newDNs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|getRaftPeer
argument_list|)
operator|.
name|toArray
argument_list|(
name|RaftPeer
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
try|try
init|(
name|RaftClient
name|client
init|=
name|newRaftClient
argument_list|(
name|oldDNs
argument_list|)
init|)
block|{
name|client
operator|.
name|setConfiguration
argument_list|(
name|newPeers
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|notInOld
init|=
name|newDNs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|oldDNs
operator|::
name|contains
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|reinitialize
argument_list|(
name|notInOld
argument_list|,
name|newPeers
argument_list|)
expr_stmt|;
return|return
name|newDNs
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|newRaftClient (List<DatanodeID> datanodes)
specifier|private
name|RaftClient
name|newRaftClient
parameter_list|(
name|List
argument_list|<
name|DatanodeID
argument_list|>
name|datanodes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|RaftPeer
argument_list|>
name|peers
init|=
name|datanodes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|getRaftPeer
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|RatisHelper
operator|.
name|newRaftClient
argument_list|(
name|rpcType
argument_list|,
name|peers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|peers
argument_list|)
return|;
block|}
block|}
end_class

end_unit

