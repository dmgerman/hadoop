begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskOutOfSpaceException
import|;
end_import

begin_comment
comment|/**  * Choose volumes with the same storage type in round-robin order.  * Use fine-grained locks to synchronize volume choosing.  */
end_comment

begin_class
DECL|class|RoundRobinVolumeChoosingPolicy
specifier|public
class|class
name|RoundRobinVolumeChoosingPolicy
parameter_list|<
name|V
extends|extends
name|FsVolumeSpi
parameter_list|>
implements|implements
name|VolumeChoosingPolicy
argument_list|<
name|V
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RoundRobinVolumeChoosingPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// curVolumes stores the RR counters of each storage type.
comment|// The ordinal of storage type in org.apache.hadoop.fs.StorageType
comment|// is used as the index to get data from the array.
DECL|field|curVolumes
specifier|private
name|int
index|[]
name|curVolumes
decl_stmt|;
comment|// syncLocks stores the locks for each storage type.
DECL|field|syncLocks
specifier|private
name|Object
index|[]
name|syncLocks
decl_stmt|;
DECL|method|RoundRobinVolumeChoosingPolicy ()
specifier|public
name|RoundRobinVolumeChoosingPolicy
parameter_list|()
block|{
name|int
name|numStorageTypes
init|=
name|StorageType
operator|.
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
name|curVolumes
operator|=
operator|new
name|int
index|[
name|numStorageTypes
index|]
expr_stmt|;
name|syncLocks
operator|=
operator|new
name|Object
index|[
name|numStorageTypes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStorageTypes
condition|;
name|i
operator|++
control|)
block|{
name|syncLocks
index|[
name|i
index|]
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|chooseVolume (final List<V> volumes, long blockSize, String storageId)
specifier|public
name|V
name|chooseVolume
parameter_list|(
specifier|final
name|List
argument_list|<
name|V
argument_list|>
name|volumes
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|String
name|storageId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|volumes
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|DiskOutOfSpaceException
argument_list|(
literal|"No more available volumes"
argument_list|)
throw|;
block|}
comment|// As all the items in volumes are with the same storage type,
comment|// so only need to get the storage type index of the first item in volumes
name|StorageType
name|storageType
init|=
name|volumes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStorageType
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|storageType
operator|!=
literal|null
condition|?
name|storageType
operator|.
name|ordinal
argument_list|()
else|:
name|StorageType
operator|.
name|DEFAULT
operator|.
name|ordinal
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|syncLocks
index|[
name|index
index|]
init|)
block|{
return|return
name|chooseVolume
argument_list|(
name|index
argument_list|,
name|volumes
argument_list|,
name|blockSize
argument_list|)
return|;
block|}
block|}
DECL|method|chooseVolume (final int curVolumeIndex, final List<V> volumes, long blockSize)
specifier|private
name|V
name|chooseVolume
parameter_list|(
specifier|final
name|int
name|curVolumeIndex
parameter_list|,
specifier|final
name|List
argument_list|<
name|V
argument_list|>
name|volumes
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// since volumes could've been removed because of the failure
comment|// make sure we are not out of bounds
name|int
name|curVolume
init|=
name|curVolumes
index|[
name|curVolumeIndex
index|]
operator|<
name|volumes
operator|.
name|size
argument_list|()
condition|?
name|curVolumes
index|[
name|curVolumeIndex
index|]
else|:
literal|0
decl_stmt|;
name|int
name|startVolume
init|=
name|curVolume
decl_stmt|;
name|long
name|maxAvailable
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|V
name|volume
init|=
name|volumes
operator|.
name|get
argument_list|(
name|curVolume
argument_list|)
decl_stmt|;
name|curVolume
operator|=
operator|(
name|curVolume
operator|+
literal|1
operator|)
operator|%
name|volumes
operator|.
name|size
argument_list|()
expr_stmt|;
name|long
name|availableVolumeSize
init|=
name|volume
operator|.
name|getAvailable
argument_list|()
decl_stmt|;
if|if
condition|(
name|availableVolumeSize
operator|>
name|blockSize
condition|)
block|{
name|curVolumes
index|[
name|curVolumeIndex
index|]
operator|=
name|curVolume
expr_stmt|;
return|return
name|volume
return|;
block|}
if|if
condition|(
name|availableVolumeSize
operator|>
name|maxAvailable
condition|)
block|{
name|maxAvailable
operator|=
name|availableVolumeSize
expr_stmt|;
block|}
if|if
condition|(
name|curVolume
operator|==
name|startVolume
condition|)
block|{
throw|throw
operator|new
name|DiskOutOfSpaceException
argument_list|(
literal|"Out of space: "
operator|+
literal|"The volume with the most available space (="
operator|+
name|maxAvailable
operator|+
literal|" B) is less than the block size (="
operator|+
name|blockSize
operator|+
literal|" B)."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

