begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.transport.server.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|XceiverServerSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|RaftConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|conf
operator|.
name|RaftProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|grpc
operator|.
name|GrpcConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|netty
operator|.
name|NettyConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftPeerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|RpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|SupportedRpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|RaftServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|RaftServerConfigKeys
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Creates a ratis server endpoint that acts as the communication layer for  * Ozone containers.  */
end_comment

begin_class
DECL|class|XceiverServerRatis
specifier|public
specifier|final
class|class
name|XceiverServerRatis
implements|implements
name|XceiverServerSpi
block|{
DECL|method|newRaftProperties ( RpcType rpc, int port, String storageDir)
specifier|static
name|RaftProperties
name|newRaftProperties
parameter_list|(
name|RpcType
name|rpc
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|storageDir
parameter_list|)
block|{
specifier|final
name|RaftProperties
name|properties
init|=
operator|new
name|RaftProperties
argument_list|()
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|setStorageDir
argument_list|(
name|properties
argument_list|,
name|storageDir
argument_list|)
expr_stmt|;
name|RaftConfigKeys
operator|.
name|Rpc
operator|.
name|setType
argument_list|(
name|properties
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
if|if
condition|(
name|rpc
operator|==
name|SupportedRpcType
operator|.
name|GRPC
condition|)
block|{
name|GrpcConfigKeys
operator|.
name|Server
operator|.
name|setPort
argument_list|(
name|properties
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rpc
operator|==
name|SupportedRpcType
operator|.
name|NETTY
condition|)
block|{
name|NettyConfigKeys
operator|.
name|Server
operator|.
name|setPort
argument_list|(
name|properties
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
DECL|method|newXceiverServerRatis ( Configuration ozoneConf, ContainerDispatcher dispatcher)
specifier|public
specifier|static
name|XceiverServerRatis
name|newXceiverServerRatis
parameter_list|(
name|Configuration
name|ozoneConf
parameter_list|,
name|ContainerDispatcher
name|dispatcher
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|id
init|=
name|ozoneConf
operator|.
name|get
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_DATANODE_ADDRESS
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|ozoneConf
operator|.
name|getStringCollection
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_CONF
argument_list|)
decl_stmt|;
specifier|final
name|String
name|storageDir
init|=
name|ozoneConf
operator|.
name|get
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_DATANODE_STORAGE_DIR
argument_list|)
decl_stmt|;
specifier|final
name|String
name|rpcType
init|=
name|ozoneConf
operator|.
name|get
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_RPC_TYPE_KEY
argument_list|,
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_RPC_TYPE_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RpcType
name|rpc
init|=
name|SupportedRpcType
operator|.
name|valueOfIgnoreCase
argument_list|(
name|rpcType
argument_list|)
decl_stmt|;
return|return
operator|new
name|XceiverServerRatis
argument_list|(
name|id
argument_list|,
name|servers
argument_list|,
name|storageDir
argument_list|,
name|dispatcher
argument_list|,
name|rpc
argument_list|)
return|;
block|}
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|RaftServer
name|server
decl_stmt|;
DECL|method|XceiverServerRatis ( String id, Collection<String> servers, String storageDir, ContainerDispatcher dispatcher, RpcType rpcType)
specifier|private
name|XceiverServerRatis
parameter_list|(
name|String
name|id
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|servers
parameter_list|,
name|String
name|storageDir
parameter_list|,
name|ContainerDispatcher
name|dispatcher
parameter_list|,
name|RpcType
name|rpcType
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|servers
operator|.
name|contains
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"%s is not one of %s specified in %s"
argument_list|,
name|id
argument_list|,
name|servers
argument_list|,
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_CONF
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RaftPeer
argument_list|>
name|peers
init|=
name|servers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|addr
lambda|->
operator|new
name|RaftPeer
argument_list|(
operator|new
name|RaftPeerId
argument_list|(
name|addr
argument_list|)
argument_list|,
name|addr
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|port
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|id
argument_list|)
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|RaftServer
operator|.
name|newBuilder
argument_list|()
operator|.
name|setServerId
argument_list|(
operator|new
name|RaftPeerId
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setPeers
argument_list|(
name|peers
argument_list|)
operator|.
name|setProperties
argument_list|(
name|newRaftProperties
argument_list|(
name|rpcType
argument_list|,
name|port
argument_list|,
name|storageDir
argument_list|)
argument_list|)
operator|.
name|setStateMachine
argument_list|(
operator|new
name|ContainerStateMachine
argument_list|(
name|dispatcher
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getIPCPort ()
specifier|public
name|int
name|getIPCPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
block|}
end_class

end_unit

