begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|random
operator|.
name|RandomData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math
operator|.
name|random
operator|.
name|RandomDataImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_comment
comment|/**  * Helper class used by the CacheReplicationManager and CacheReplicationMonitor  * to select datanodes where blocks should be cached or uncached.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|}
argument_list|)
DECL|class|CacheReplicationPolicy
specifier|public
class|class
name|CacheReplicationPolicy
block|{
comment|/**    * @return List of datanodes with sufficient capacity to cache the block    */
DECL|method|selectSufficientCapacity (Block block, List<DatanodeDescriptor> targets)
specifier|private
specifier|static
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|selectSufficientCapacity
parameter_list|(
name|Block
name|block
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|targets
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|sufficient
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|(
name|targets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|targets
control|)
block|{
name|long
name|remaining
init|=
name|dn
operator|.
name|getCacheRemaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|>=
name|block
operator|.
name|getNumBytes
argument_list|()
condition|)
block|{
name|sufficient
operator|.
name|add
argument_list|(
name|dn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sufficient
return|;
block|}
comment|/**    * Returns a random datanode from targets, weighted by the amount of free    * cache capacity on the datanode. Prunes unsuitable datanodes from the    * targets list.    *     * @param block Block to be cached    * @param targets List of potential cache targets    * @return a random DN, or null if no datanodes are available or have enough    *         cache capacity.    */
DECL|method|randomDatanodeByRemainingCache (Block block, List<DatanodeDescriptor> targets)
specifier|private
specifier|static
name|DatanodeDescriptor
name|randomDatanodeByRemainingCache
parameter_list|(
name|Block
name|block
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|targets
parameter_list|)
block|{
comment|// Hold a lottery biased by the amount of free space to decide
comment|// who gets the block
name|Collections
operator|.
name|shuffle
argument_list|(
name|targets
argument_list|)
expr_stmt|;
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|DatanodeDescriptor
argument_list|>
name|lottery
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|totalCacheAvailable
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|targets
control|)
block|{
name|long
name|remaining
init|=
name|dn
operator|.
name|getCacheRemaining
argument_list|()
decl_stmt|;
name|totalCacheAvailable
operator|+=
name|remaining
expr_stmt|;
name|lottery
operator|.
name|put
argument_list|(
name|totalCacheAvailable
argument_list|,
name|dn
argument_list|)
expr_stmt|;
block|}
comment|// Pick our lottery winner
name|RandomData
name|r
init|=
operator|new
name|RandomDataImpl
argument_list|()
decl_stmt|;
name|long
name|winningTicket
init|=
name|r
operator|.
name|nextLong
argument_list|(
literal|0
argument_list|,
name|totalCacheAvailable
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Entry
argument_list|<
name|Long
argument_list|,
name|DatanodeDescriptor
argument_list|>
name|winner
init|=
name|lottery
operator|.
name|higherEntry
argument_list|(
name|winningTicket
argument_list|)
decl_stmt|;
return|return
name|winner
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**    * Chooses numTargets new cache replicas for a block from a list of targets.    * Will return fewer targets than requested if not enough nodes are available.    *     * @return List of target datanodes    */
DECL|method|chooseTargetsToCache (Block block, List<DatanodeDescriptor> targets, int numTargets)
specifier|static
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chooseTargetsToCache
parameter_list|(
name|Block
name|block
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|targets
parameter_list|,
name|int
name|numTargets
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|sufficient
init|=
name|selectSufficientCapacity
argument_list|(
name|block
argument_list|,
name|targets
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chosen
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|(
name|numTargets
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTargets
operator|&&
operator|!
name|sufficient
operator|.
name|isEmpty
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|chosen
operator|.
name|add
argument_list|(
name|randomDatanodeByRemainingCache
argument_list|(
name|block
argument_list|,
name|sufficient
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|chosen
return|;
block|}
comment|/**    * Given a list cache replicas where a block is cached, choose replicas to    * uncache to drop the cache replication factor down to replication.    *     * @param nodes list of datanodes where the block is currently cached    * @param replication desired replication factor    * @return List of datanodes to uncache    */
DECL|method|chooseTargetsToUncache ( List<DatanodeDescriptor> nodes, short replication)
specifier|public
specifier|static
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chooseTargetsToUncache
parameter_list|(
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|nodes
parameter_list|,
name|short
name|replication
parameter_list|)
block|{
specifier|final
name|int
name|effectiveReplication
init|=
name|nodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|targets
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|(
name|effectiveReplication
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
specifier|final
name|int
name|additionalTargetsNeeded
init|=
name|effectiveReplication
operator|-
name|replication
decl_stmt|;
name|int
name|chosen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|chosen
operator|<
name|additionalTargetsNeeded
operator|&&
operator|!
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|targets
operator|.
name|add
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|chosen
argument_list|)
argument_list|)
expr_stmt|;
name|chosen
operator|++
expr_stmt|;
block|}
return|return
name|targets
return|;
block|}
block|}
end_class

end_unit

