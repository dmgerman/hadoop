begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * A simple class for pooling direct ByteBuffers. This is necessary  * because Direct Byte Buffers do not take up much space on the heap,  * and hence will not trigger GCs on their own. However, they do take  * native memory, and thus can cause high memory usage if not pooled.  * The pooled instances are referred to only via weak references, allowing  * them to be collected when a GC does run.  *  * This class only does effective pooling when many buffers will be  * allocated at the same size. There is no attempt to reuse larger  * buffers to satisfy smaller allocations.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DirectBufferPool
specifier|public
class|class
name|DirectBufferPool
block|{
comment|// Essentially implement a multimap with weak values.
DECL|field|buffersBySize
name|ConcurrentMap
argument_list|<
name|Integer
argument_list|,
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
argument_list|>
name|buffersBySize
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Allocate a direct buffer of the specified size, in bytes.    * If a pooled buffer is available, returns that. Otherwise    * allocates a new one.    */
DECL|method|getBuffer (int size)
specifier|public
name|ByteBuffer
name|getBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
name|list
init|=
name|buffersBySize
operator|.
name|get
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
comment|// no available buffers for this size
return|return
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|size
argument_list|)
return|;
block|}
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
name|ref
decl_stmt|;
while|while
condition|(
operator|(
name|ref
operator|=
name|list
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|ByteBuffer
name|b
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
return|return
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|size
argument_list|)
return|;
block|}
comment|/**    * Return a buffer into the pool. After being returned,    * the buffer may be recycled, so the user must not    * continue to use it in any way.    * @param buf the buffer to return    */
DECL|method|returnBuffer (ByteBuffer buf)
specifier|public
name|void
name|returnBuffer
parameter_list|(
name|ByteBuffer
name|buf
parameter_list|)
block|{
name|buf
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// reset mark, limit, etc
name|int
name|size
init|=
name|buf
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
name|list
init|=
name|buffersBySize
operator|.
name|get
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
name|prev
init|=
name|buffersBySize
operator|.
name|putIfAbsent
argument_list|(
name|size
argument_list|,
name|list
argument_list|)
decl_stmt|;
comment|// someone else put a queue in the map before we did
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|list
operator|=
name|prev
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
operator|new
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the number of available buffers of a given size.    * This is used only for tests.    */
annotation|@
name|VisibleForTesting
DECL|method|countBuffersOfSize (int size)
name|int
name|countBuffersOfSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Queue
argument_list|<
name|WeakReference
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|>
name|list
init|=
name|buffersBySize
operator|.
name|get
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

