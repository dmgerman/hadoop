begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineEditsViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSEditLogOpCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * StatisticsEditsVisitor implements text version of EditsVisitor  * that aggregates counts of op codes processed  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|StatisticsEditsVisitor
specifier|public
class|class
name|StatisticsEditsVisitor
implements|implements
name|OfflineEditsVisitor
block|{
DECL|field|out
specifier|final
specifier|private
name|PrintWriter
name|out
decl_stmt|;
DECL|field|version
specifier|private
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|opCodeCount
specifier|private
specifier|final
name|Map
argument_list|<
name|FSEditLogOpCodes
argument_list|,
name|Long
argument_list|>
name|opCodeCount
init|=
operator|new
name|HashMap
argument_list|<
name|FSEditLogOpCodes
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Create a processor that writes to the file named and may or may not    * also output to the screen, as specified.    *    * @param filename Name of file to write output to    * @param tokenizer Input tokenizer    * @param printToScreen Mirror output to screen?    */
DECL|method|StatisticsEditsVisitor (OutputStream out)
specifier|public
name|StatisticsEditsVisitor
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Start the visitor */
annotation|@
name|Override
DECL|method|start (int version)
specifier|public
name|void
name|start
parameter_list|(
name|int
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/** Close the visitor */
annotation|@
name|Override
DECL|method|close (Throwable error)
specifier|public
name|void
name|close
parameter_list|(
name|Throwable
name|error
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
name|getStatisticsString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"EXITING ON ERROR: "
operator|+
name|error
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|visitOp (FSEditLogOp op)
specifier|public
name|void
name|visitOp
parameter_list|(
name|FSEditLogOp
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|incrementOpCodeCount
argument_list|(
name|op
operator|.
name|opCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increment the op code counter    *    * @param opCode opCode for which to increment count    */
DECL|method|incrementOpCodeCount (FSEditLogOpCodes opCode)
specifier|private
name|void
name|incrementOpCodeCount
parameter_list|(
name|FSEditLogOpCodes
name|opCode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|opCodeCount
operator|.
name|containsKey
argument_list|(
name|opCode
argument_list|)
condition|)
block|{
name|opCodeCount
operator|.
name|put
argument_list|(
name|opCode
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
name|Long
name|newValue
init|=
name|opCodeCount
operator|.
name|get
argument_list|(
name|opCode
argument_list|)
operator|+
literal|1
decl_stmt|;
name|opCodeCount
operator|.
name|put
argument_list|(
name|opCode
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get statistics    *    * @return statistics, map of counts per opCode    */
DECL|method|getStatistics ()
specifier|public
name|Map
argument_list|<
name|FSEditLogOpCodes
argument_list|,
name|Long
argument_list|>
name|getStatistics
parameter_list|()
block|{
return|return
name|opCodeCount
return|;
block|}
comment|/**    * Get the statistics in string format, suitable for printing    *    * @return statistics in in string format, suitable for printing    */
DECL|method|getStatisticsString ()
specifier|public
name|String
name|getStatisticsString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"    %-30.30s      : %d%n"
argument_list|,
literal|"VERSION"
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FSEditLogOpCodes
name|opCode
range|:
name|FSEditLogOpCodes
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"    %-30.30s (%3d): %d%n"
argument_list|,
name|opCode
operator|.
name|toString
argument_list|()
argument_list|,
name|opCode
operator|.
name|getOpCode
argument_list|()
argument_list|,
name|opCodeCount
operator|.
name|get
argument_list|(
name|opCode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

