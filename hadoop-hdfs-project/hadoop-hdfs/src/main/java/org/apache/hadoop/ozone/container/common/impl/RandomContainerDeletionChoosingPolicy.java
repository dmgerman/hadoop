begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDeletionChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Randomly choosing containers for block deletion.  */
end_comment

begin_class
DECL|class|RandomContainerDeletionChoosingPolicy
specifier|public
class|class
name|RandomContainerDeletionChoosingPolicy
implements|implements
name|ContainerDeletionChoosingPolicy
block|{
annotation|@
name|Override
DECL|method|chooseContainerForBlockDeletion (int count, Map<String, ContainerStatus> candidateContainers)
specifier|public
name|List
argument_list|<
name|ContainerData
argument_list|>
name|chooseContainerForBlockDeletion
parameter_list|(
name|int
name|count
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ContainerStatus
argument_list|>
name|candidateContainers
parameter_list|)
throws|throws
name|StorageContainerException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|candidateContainers
argument_list|,
literal|"Internal assertion: candidate containers cannot be null"
argument_list|)
expr_stmt|;
name|int
name|currentCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ContainerData
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerStatus
index|[]
name|values
init|=
operator|new
name|ContainerStatus
index|[
name|candidateContainers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|// to get a shuffle list
for|for
control|(
name|ContainerStatus
name|entry
range|:
name|DFSUtil
operator|.
name|shuffle
argument_list|(
name|candidateContainers
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|values
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|currentCount
operator|<
name|count
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

