begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ZeroCopyCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|ClientMmap
import|;
end_import

begin_class
DECL|class|HdfsZeroCopyCursor
specifier|public
class|class
name|HdfsZeroCopyCursor
implements|implements
name|ZeroCopyCursor
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HdfsZeroCopyCursor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|stream
specifier|private
name|DFSInputStream
name|stream
decl_stmt|;
DECL|field|skipChecksums
specifier|private
name|boolean
name|skipChecksums
decl_stmt|;
DECL|field|allowShortReads
specifier|private
name|boolean
name|allowShortReads
decl_stmt|;
DECL|field|mmap
specifier|private
name|ClientMmap
name|mmap
decl_stmt|;
DECL|field|fallbackBuffer
specifier|private
name|ByteBuffer
name|fallbackBuffer
decl_stmt|;
DECL|field|readBuffer
specifier|private
name|ByteBuffer
name|readBuffer
decl_stmt|;
DECL|method|HdfsZeroCopyCursor (DFSInputStream stream, boolean skipChecksums)
name|HdfsZeroCopyCursor
parameter_list|(
name|DFSInputStream
name|stream
parameter_list|,
name|boolean
name|skipChecksums
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|skipChecksums
operator|=
name|skipChecksums
expr_stmt|;
name|this
operator|.
name|allowShortReads
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|mmap
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|fallbackBuffer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|readBuffer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|mmap
operator|!=
literal|null
condition|)
block|{
name|mmap
operator|.
name|unref
argument_list|()
expr_stmt|;
name|mmap
operator|=
literal|null
expr_stmt|;
block|}
name|fallbackBuffer
operator|=
literal|null
expr_stmt|;
name|readBuffer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setFallbackBuffer (ByteBuffer fallbackBuffer)
specifier|public
name|void
name|setFallbackBuffer
parameter_list|(
name|ByteBuffer
name|fallbackBuffer
parameter_list|)
block|{
name|this
operator|.
name|fallbackBuffer
operator|=
name|fallbackBuffer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFallbackBuffer ()
specifier|public
name|ByteBuffer
name|getFallbackBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|fallbackBuffer
return|;
block|}
annotation|@
name|Override
DECL|method|setSkipChecksums (boolean skipChecksums)
specifier|public
name|void
name|setSkipChecksums
parameter_list|(
name|boolean
name|skipChecksums
parameter_list|)
block|{
name|this
operator|.
name|skipChecksums
operator|=
name|skipChecksums
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSkipChecksums ()
specifier|public
name|boolean
name|getSkipChecksums
parameter_list|()
block|{
return|return
name|this
operator|.
name|skipChecksums
return|;
block|}
annotation|@
name|Override
DECL|method|setAllowShortReads (boolean allowShortReads)
specifier|public
name|void
name|setAllowShortReads
parameter_list|(
name|boolean
name|allowShortReads
parameter_list|)
block|{
name|this
operator|.
name|allowShortReads
operator|=
name|allowShortReads
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAllowShortReads ()
specifier|public
name|boolean
name|getAllowShortReads
parameter_list|()
block|{
return|return
name|this
operator|.
name|allowShortReads
return|;
block|}
annotation|@
name|Override
DECL|method|read (int toRead)
specifier|public
name|void
name|read
parameter_list|(
name|int
name|toRead
parameter_list|)
throws|throws
name|UnsupportedOperationException
throws|,
name|EOFException
throws|,
name|IOException
block|{
if|if
condition|(
name|toRead
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't read "
operator|+
name|toRead
operator|+
literal|" bytes."
argument_list|)
throw|;
block|}
name|stream
operator|.
name|readZeroCopy
argument_list|(
name|this
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getData ()
specifier|public
name|ByteBuffer
name|getData
parameter_list|()
block|{
return|return
name|readBuffer
return|;
block|}
DECL|method|readViaSlowPath (int toRead)
name|int
name|readViaSlowPath
parameter_list|(
name|int
name|toRead
parameter_list|)
throws|throws
name|EOFException
throws|,
name|IOException
block|{
if|if
condition|(
name|fallbackBuffer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unable to read via "
operator|+
literal|"the fastpath, and there was no fallback buffer provided."
argument_list|)
throw|;
block|}
name|fallbackBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fallbackBuffer
operator|.
name|limit
argument_list|(
name|toRead
argument_list|)
expr_stmt|;
comment|// will throw if toRead is too large
name|int
name|totalRead
init|=
literal|0
decl_stmt|;
name|readBuffer
operator|=
name|fallbackBuffer
expr_stmt|;
try|try
block|{
while|while
condition|(
name|toRead
operator|>
literal|0
condition|)
block|{
name|int
name|nread
init|=
name|stream
operator|.
name|read
argument_list|(
name|fallbackBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|nread
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|toRead
operator|-=
name|nread
expr_stmt|;
name|totalRead
operator|+=
name|nread
expr_stmt|;
if|if
condition|(
name|allowShortReads
condition|)
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|fallbackBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|toRead
operator|>
literal|0
operator|)
operator|&&
operator|(
operator|!
name|allowShortReads
operator|)
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"only read "
operator|+
name|totalRead
operator|+
literal|" bytes out of "
operator|+
literal|"a requested "
operator|+
name|toRead
operator|+
literal|" before hitting EOF"
argument_list|)
throw|;
block|}
return|return
name|totalRead
return|;
block|}
DECL|method|setMmap (ClientMmap mmap, ByteBuffer readBuffer)
name|void
name|setMmap
parameter_list|(
name|ClientMmap
name|mmap
parameter_list|,
name|ByteBuffer
name|readBuffer
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|mmap
operator|!=
name|mmap
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|mmap
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|mmap
operator|.
name|unref
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|mmap
operator|=
name|mmap
expr_stmt|;
name|mmap
operator|.
name|ref
argument_list|()
expr_stmt|;
name|this
operator|.
name|readBuffer
operator|=
name|readBuffer
expr_stmt|;
block|}
DECL|method|getMmap ()
name|ClientMmap
name|getMmap
parameter_list|()
block|{
return|return
name|mmap
return|;
block|}
block|}
end_class

end_unit

