begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|EnumCounters
import|;
end_import

begin_comment
comment|/**  * Counters for namespace, space and storage type quota and usage.  */
end_comment

begin_class
DECL|class|QuotaCounts
specifier|public
class|class
name|QuotaCounts
block|{
DECL|field|nsSpCounts
specifier|private
name|EnumCounters
argument_list|<
name|Quota
argument_list|>
name|nsSpCounts
decl_stmt|;
DECL|field|typeCounts
specifier|private
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|typeCounts
decl_stmt|;
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|nsSpCounts
specifier|private
name|EnumCounters
argument_list|<
name|Quota
argument_list|>
name|nsSpCounts
decl_stmt|;
DECL|field|typeCounts
specifier|private
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|typeCounts
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
name|this
operator|.
name|nsSpCounts
operator|=
operator|new
name|EnumCounters
argument_list|<
name|Quota
argument_list|>
argument_list|(
name|Quota
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeCounts
operator|=
operator|new
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|nameCount (long val)
specifier|public
name|Builder
name|nameCount
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|nsSpCounts
operator|.
name|set
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|spaceCount (long val)
specifier|public
name|Builder
name|spaceCount
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|nsSpCounts
operator|.
name|set
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|typeCounts (EnumCounters<StorageType> val)
specifier|public
name|Builder
name|typeCounts
parameter_list|(
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|typeCounts
operator|.
name|set
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|typeCounts (long val)
specifier|public
name|Builder
name|typeCounts
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|this
operator|.
name|typeCounts
operator|.
name|reset
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|quotaCount (QuotaCounts that)
specifier|public
name|Builder
name|quotaCount
parameter_list|(
name|QuotaCounts
name|that
parameter_list|)
block|{
name|this
operator|.
name|nsSpCounts
operator|.
name|set
argument_list|(
name|that
operator|.
name|nsSpCounts
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeCounts
operator|.
name|set
argument_list|(
name|that
operator|.
name|typeCounts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|QuotaCounts
name|build
parameter_list|()
block|{
return|return
operator|new
name|QuotaCounts
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
DECL|method|QuotaCounts (Builder builder)
specifier|private
name|QuotaCounts
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|nsSpCounts
operator|=
name|builder
operator|.
name|nsSpCounts
expr_stmt|;
name|this
operator|.
name|typeCounts
operator|=
name|builder
operator|.
name|typeCounts
expr_stmt|;
block|}
DECL|method|add (QuotaCounts that)
specifier|public
name|void
name|add
parameter_list|(
name|QuotaCounts
name|that
parameter_list|)
block|{
name|this
operator|.
name|nsSpCounts
operator|.
name|add
argument_list|(
name|that
operator|.
name|nsSpCounts
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeCounts
operator|.
name|add
argument_list|(
name|that
operator|.
name|typeCounts
argument_list|)
expr_stmt|;
block|}
DECL|method|subtract (QuotaCounts that)
specifier|public
name|void
name|subtract
parameter_list|(
name|QuotaCounts
name|that
parameter_list|)
block|{
name|this
operator|.
name|nsSpCounts
operator|.
name|subtract
argument_list|(
name|that
operator|.
name|nsSpCounts
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeCounts
operator|.
name|subtract
argument_list|(
name|that
operator|.
name|typeCounts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a QuotaCounts whose value is {@code (-this)}.    *    * @return {@code -this}    */
DECL|method|negation ()
specifier|public
name|QuotaCounts
name|negation
parameter_list|()
block|{
name|QuotaCounts
name|ret
init|=
operator|new
name|QuotaCounts
operator|.
name|Builder
argument_list|()
operator|.
name|quotaCount
argument_list|(
name|this
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ret
operator|.
name|nsSpCounts
operator|.
name|negation
argument_list|()
expr_stmt|;
name|ret
operator|.
name|typeCounts
operator|.
name|negation
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|getNameSpace ()
specifier|public
name|long
name|getNameSpace
parameter_list|()
block|{
return|return
name|nsSpCounts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
return|;
block|}
DECL|method|setNameSpace (long nameSpaceCount)
specifier|public
name|void
name|setNameSpace
parameter_list|(
name|long
name|nameSpaceCount
parameter_list|)
block|{
name|this
operator|.
name|nsSpCounts
operator|.
name|set
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|,
name|nameSpaceCount
argument_list|)
expr_stmt|;
block|}
DECL|method|addNameSpace (long nsDelta)
specifier|public
name|void
name|addNameSpace
parameter_list|(
name|long
name|nsDelta
parameter_list|)
block|{
name|this
operator|.
name|nsSpCounts
operator|.
name|add
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|,
name|nsDelta
argument_list|)
expr_stmt|;
block|}
DECL|method|getDiskSpace ()
specifier|public
name|long
name|getDiskSpace
parameter_list|()
block|{
return|return
name|nsSpCounts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
return|;
block|}
DECL|method|setDiskSpace (long spaceCount)
specifier|public
name|void
name|setDiskSpace
parameter_list|(
name|long
name|spaceCount
parameter_list|)
block|{
name|this
operator|.
name|nsSpCounts
operator|.
name|set
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|,
name|spaceCount
argument_list|)
expr_stmt|;
block|}
DECL|method|addDiskSpace (long dsDelta)
specifier|public
name|void
name|addDiskSpace
parameter_list|(
name|long
name|dsDelta
parameter_list|)
block|{
name|this
operator|.
name|nsSpCounts
operator|.
name|add
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|,
name|dsDelta
argument_list|)
expr_stmt|;
block|}
DECL|method|getTypeSpaces ()
specifier|public
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|getTypeSpaces
parameter_list|()
block|{
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|ret
init|=
operator|new
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|)
decl_stmt|;
name|ret
operator|.
name|set
argument_list|(
name|typeCounts
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|setTypeSpaces (EnumCounters<StorageType> that)
name|void
name|setTypeSpaces
parameter_list|(
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|typeCounts
operator|.
name|set
argument_list|(
name|that
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTypeSpace (StorageType type)
name|long
name|getTypeSpace
parameter_list|(
name|StorageType
name|type
parameter_list|)
block|{
return|return
name|this
operator|.
name|typeCounts
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|setTypeSpace (StorageType type, long spaceCount)
name|void
name|setTypeSpace
parameter_list|(
name|StorageType
name|type
parameter_list|,
name|long
name|spaceCount
parameter_list|)
block|{
name|this
operator|.
name|typeCounts
operator|.
name|set
argument_list|(
name|type
argument_list|,
name|spaceCount
argument_list|)
expr_stmt|;
block|}
DECL|method|addTypeSpace (StorageType type, long delta)
specifier|public
name|void
name|addTypeSpace
parameter_list|(
name|StorageType
name|type
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
name|this
operator|.
name|typeCounts
operator|.
name|add
argument_list|(
name|type
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
DECL|method|addTypeSpaces (EnumCounters<StorageType> deltas)
specifier|public
name|void
name|addTypeSpaces
parameter_list|(
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|deltas
parameter_list|)
block|{
name|this
operator|.
name|typeCounts
operator|.
name|add
argument_list|(
name|deltas
argument_list|)
expr_stmt|;
block|}
DECL|method|anyNsSpCountGreaterOrEqual (long val)
specifier|public
name|boolean
name|anyNsSpCountGreaterOrEqual
parameter_list|(
name|long
name|val
parameter_list|)
block|{
return|return
name|nsSpCounts
operator|.
name|anyGreaterOrEqual
argument_list|(
name|val
argument_list|)
return|;
block|}
DECL|method|anyTypeCountGreaterOrEqual (long val)
specifier|public
name|boolean
name|anyTypeCountGreaterOrEqual
parameter_list|(
name|long
name|val
parameter_list|)
block|{
return|return
name|typeCounts
operator|.
name|anyGreaterOrEqual
argument_list|(
name|val
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|QuotaCounts
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|QuotaCounts
name|that
init|=
operator|(
name|QuotaCounts
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|nsSpCounts
operator|.
name|equals
argument_list|(
name|that
operator|.
name|nsSpCounts
argument_list|)
operator|&&
name|this
operator|.
name|typeCounts
operator|.
name|equals
argument_list|(
name|that
operator|.
name|typeCounts
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
assert|assert
literal|false
operator|:
literal|"hashCode not designed"
assert|;
return|return
literal|42
return|;
comment|// any arbitrary constant will do
block|}
block|}
end_class

end_unit

