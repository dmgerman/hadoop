begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineEditsViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|ByteToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|ShortToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|IntToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|VIntToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|LongToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|VLongToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|StringUTF8Token
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|StringTextToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|BlobToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|BytesWritableToken
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
operator|.
name|Tokenizer
operator|.
name|EmptyToken
import|;
end_import

begin_comment
comment|/**  * An implementation of EditsVisitor can traverse the structure of an  * Hadoop edits log and respond to each of the structures within the file.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|EditsVisitor
specifier|abstract
specifier|public
class|class
name|EditsVisitor
block|{
DECL|field|tokenizer
specifier|private
name|Tokenizer
name|tokenizer
decl_stmt|;
DECL|method|EditsVisitor (Tokenizer tokenizer)
specifier|public
name|EditsVisitor
parameter_list|(
name|Tokenizer
name|tokenizer
parameter_list|)
block|{
name|this
operator|.
name|tokenizer
operator|=
name|tokenizer
expr_stmt|;
block|}
comment|/**    * Begin visiting the edits log structure.  Opportunity to perform    * any initialization necessary for the implementing visitor.    */
DECL|method|start ()
specifier|abstract
name|void
name|start
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Finish visiting the edits log structure.  Opportunity to perform any    * clean up necessary for the implementing visitor.    */
DECL|method|finish ()
specifier|abstract
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Finish visiting the edits log structure after an error has occurred    * during the processing.  Opportunity to perform any clean up necessary    * for the implementing visitor.    */
DECL|method|finishAbnormally ()
specifier|abstract
name|void
name|finishAbnormally
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Visit non enclosing element of edits log with specified value.    *    * @param value a token to visit    */
DECL|method|visit (Tokenizer.Token value)
specifier|abstract
name|Tokenizer
operator|.
name|Token
name|visit
parameter_list|(
name|Tokenizer
operator|.
name|Token
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitByte (EditsElement e)
specifier|public
name|ByteToken
name|visitByte
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|ByteToken
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|ByteToken
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitShort (EditsElement e)
specifier|public
name|ShortToken
name|visitShort
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|ShortToken
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|ShortToken
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitInt (EditsElement e)
specifier|public
name|IntToken
name|visitInt
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|IntToken
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|IntToken
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitVInt (EditsElement e)
specifier|public
name|VIntToken
name|visitVInt
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|VIntToken
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|VIntToken
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitLong (EditsElement e)
specifier|public
name|LongToken
name|visitLong
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|LongToken
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|LongToken
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitVLong (EditsElement e)
specifier|public
name|VLongToken
name|visitVLong
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|VLongToken
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|VLongToken
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitStringUTF8 (EditsElement e)
specifier|public
name|StringUTF8Token
name|visitStringUTF8
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|StringUTF8Token
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|StringUTF8Token
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitStringText (EditsElement e)
specifier|public
name|StringTextToken
name|visitStringText
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|StringTextToken
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|StringTextToken
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitBlob (EditsElement e, int length)
specifier|public
name|BlobToken
name|visitBlob
parameter_list|(
name|EditsElement
name|e
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|BlobToken
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|BlobToken
argument_list|(
name|e
argument_list|,
name|length
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitBytesWritable (EditsElement e)
specifier|public
name|BytesWritableToken
name|visitBytesWritable
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|BytesWritableToken
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|BytesWritableToken
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Convenience shortcut method to parse a specific token type    */
DECL|method|visitEmpty (EditsElement e)
specifier|public
name|EmptyToken
name|visitEmpty
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|EmptyToken
operator|)
name|visit
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|EmptyToken
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Begin visiting an element that encloses another element, such as    * the beginning of the list of blocks that comprise a file.    *    * @param value Token being visited    */
DECL|method|visitEnclosingElement (Tokenizer.Token value)
specifier|abstract
name|void
name|visitEnclosingElement
parameter_list|(
name|Tokenizer
operator|.
name|Token
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Convenience shortcut method (it virutally always uses EmptyToken)    */
DECL|method|visitEnclosingElement (EditsElement e)
name|void
name|visitEnclosingElement
parameter_list|(
name|EditsElement
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|visitEnclosingElement
argument_list|(
name|tokenizer
operator|.
name|read
argument_list|(
operator|new
name|EmptyToken
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Leave current enclosing element.  Called, for instance, at the end of    * processing the blocks that compromise a file.    */
DECL|method|leaveEnclosingElement ()
specifier|abstract
name|void
name|leaveEnclosingElement
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

