begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_comment
comment|/**  * A BlockStorageMovementCommand is an instruction to a DataNode to move the  * given set of blocks to specified target DataNodes to fulfill the block  * storage policy.  *  * Upon receiving this command, this DataNode coordinates all the block movement  * by passing the details to  * {@link org.apache.hadoop.hdfs.server.datanode.StoragePolicySatisfyWorker}  * service. After the block movement this DataNode sends response back to the  * NameNode about the movement status.  *  * The coordinator datanode will use 'trackId' identifier to coordinate the block  * movement of the given set of blocks. TrackId is a unique identifier that  * represents a group of blocks. Namenode will generate this unique value and  * send it to the coordinator datanode along with the  * BlockStorageMovementCommand. Datanode will monitor the completion of the  * block movements that grouped under this trackId and notifies Namenode about  * the completion status.  */
end_comment

begin_class
DECL|class|BlockStorageMovementCommand
specifier|public
class|class
name|BlockStorageMovementCommand
extends|extends
name|DatanodeCommand
block|{
DECL|field|trackID
specifier|private
specifier|final
name|long
name|trackID
decl_stmt|;
DECL|field|blockPoolId
specifier|private
specifier|final
name|String
name|blockPoolId
decl_stmt|;
DECL|field|blockMovingTasks
specifier|private
specifier|final
name|Collection
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingTasks
decl_stmt|;
comment|/**    * Block storage movement command constructor.    *    * @param action    *          protocol specific action    * @param trackID    *          unique identifier to monitor the given set of block movements    * @param blockPoolId    *          block pool ID    * @param blockMovingInfos    *          block to storage info that will be used for movement    */
DECL|method|BlockStorageMovementCommand (int action, long trackID, String blockPoolId, Collection<BlockMovingInfo> blockMovingInfos)
specifier|public
name|BlockStorageMovementCommand
parameter_list|(
name|int
name|action
parameter_list|,
name|long
name|trackID
parameter_list|,
name|String
name|blockPoolId
parameter_list|,
name|Collection
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|this
operator|.
name|trackID
operator|=
name|trackID
expr_stmt|;
name|this
operator|.
name|blockPoolId
operator|=
name|blockPoolId
expr_stmt|;
name|this
operator|.
name|blockMovingTasks
operator|=
name|blockMovingInfos
expr_stmt|;
block|}
comment|/**    * Returns trackID, which will be used to monitor the block movement assigned    * to this coordinator datanode.    */
DECL|method|getTrackID ()
specifier|public
name|long
name|getTrackID
parameter_list|()
block|{
return|return
name|trackID
return|;
block|}
comment|/**    * Returns block pool ID.    */
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|blockPoolId
return|;
block|}
comment|/**    * Returns the list of blocks to be moved.    */
DECL|method|getBlockMovingTasks ()
specifier|public
name|Collection
argument_list|<
name|BlockMovingInfo
argument_list|>
name|getBlockMovingTasks
parameter_list|()
block|{
return|return
name|blockMovingTasks
return|;
block|}
comment|/**    * Stores block to storage info that can be used for block movement.    */
DECL|class|BlockMovingInfo
specifier|public
specifier|static
class|class
name|BlockMovingInfo
block|{
DECL|field|blk
specifier|private
name|Block
name|blk
decl_stmt|;
DECL|field|sourceNodes
specifier|private
name|DatanodeInfo
index|[]
name|sourceNodes
decl_stmt|;
DECL|field|targetNodes
specifier|private
name|DatanodeInfo
index|[]
name|targetNodes
decl_stmt|;
DECL|field|sourceStorageTypes
specifier|private
name|StorageType
index|[]
name|sourceStorageTypes
decl_stmt|;
DECL|field|targetStorageTypes
specifier|private
name|StorageType
index|[]
name|targetStorageTypes
decl_stmt|;
comment|/**      * Block to storage info constructor.      *      * @param block      *          block      * @param sourceDnInfos      *          node that can be the sources of a block move      * @param targetDnInfos      *          target datanode info      * @param srcStorageTypes      *          type of source storage media      * @param targetStorageTypes      *          type of destin storage media      */
DECL|method|BlockMovingInfo (Block block, DatanodeInfo[] sourceDnInfos, DatanodeInfo[] targetDnInfos, StorageType[] srcStorageTypes, StorageType[] targetStorageTypes)
specifier|public
name|BlockMovingInfo
parameter_list|(
name|Block
name|block
parameter_list|,
name|DatanodeInfo
index|[]
name|sourceDnInfos
parameter_list|,
name|DatanodeInfo
index|[]
name|targetDnInfos
parameter_list|,
name|StorageType
index|[]
name|srcStorageTypes
parameter_list|,
name|StorageType
index|[]
name|targetStorageTypes
parameter_list|)
block|{
name|this
operator|.
name|blk
operator|=
name|block
expr_stmt|;
name|this
operator|.
name|sourceNodes
operator|=
name|sourceDnInfos
expr_stmt|;
name|this
operator|.
name|targetNodes
operator|=
name|targetDnInfos
expr_stmt|;
name|this
operator|.
name|sourceStorageTypes
operator|=
name|srcStorageTypes
expr_stmt|;
name|this
operator|.
name|targetStorageTypes
operator|=
name|targetStorageTypes
expr_stmt|;
block|}
DECL|method|addBlock (Block block)
specifier|public
name|void
name|addBlock
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
name|this
operator|.
name|blk
operator|=
name|block
expr_stmt|;
block|}
DECL|method|getBlock ()
specifier|public
name|Block
name|getBlock
parameter_list|()
block|{
return|return
name|this
operator|.
name|blk
return|;
block|}
DECL|method|getSources ()
specifier|public
name|DatanodeInfo
index|[]
name|getSources
parameter_list|()
block|{
return|return
name|sourceNodes
return|;
block|}
DECL|method|getTargets ()
specifier|public
name|DatanodeInfo
index|[]
name|getTargets
parameter_list|()
block|{
return|return
name|targetNodes
return|;
block|}
DECL|method|getTargetStorageTypes ()
specifier|public
name|StorageType
index|[]
name|getTargetStorageTypes
parameter_list|()
block|{
return|return
name|targetStorageTypes
return|;
block|}
DECL|method|getSourceStorageTypes ()
specifier|public
name|StorageType
index|[]
name|getSourceStorageTypes
parameter_list|()
block|{
return|return
name|sourceStorageTypes
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"BlockMovingInfo(\n  "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Moving block: "
argument_list|)
operator|.
name|append
argument_list|(
name|blk
argument_list|)
operator|.
name|append
argument_list|(
literal|" From: "
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sourceNodes
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" To: ["
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|targetNodes
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|")\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|" sourceStorageTypes: "
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|sourceStorageTypes
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" targetStorageTypes: "
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|targetStorageTypes
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

