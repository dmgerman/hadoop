begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_comment
comment|/**  * A BlockStorageMovementCommand is an instruction to a DataNode to move the  * given set of blocks to specified target DataNodes to fulfill the block  * storage policy.  *  * Upon receiving this command, this DataNode pass the array of block movement  * details to  * {@link org.apache.hadoop.hdfs.server.sps.ExternalSPSBlockMoveTaskHandler}  * service. Later, ExternalSPSBlockMoveTaskHandler will schedule block movement  * tasks for these blocks and monitors the completion of each task. After the  * block movement attempt is finished(with success or failure) this DataNode  * will send response back to NameNode about the block movement attempt  * finished details.  */
end_comment

begin_class
DECL|class|BlockStorageMovementCommand
specifier|public
class|class
name|BlockStorageMovementCommand
extends|extends
name|DatanodeCommand
block|{
DECL|field|blockPoolId
specifier|private
specifier|final
name|String
name|blockPoolId
decl_stmt|;
DECL|field|blockMovingTasks
specifier|private
specifier|final
name|Collection
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingTasks
decl_stmt|;
comment|/**    * Block storage movement command constructor.    *    * @param action    *          protocol specific action    * @param blockMovingInfos    *          block to storage info that will be used for movement    */
DECL|method|BlockStorageMovementCommand (int action, String blockPoolId, Collection<BlockMovingInfo> blockMovingInfos)
specifier|public
name|BlockStorageMovementCommand
parameter_list|(
name|int
name|action
parameter_list|,
name|String
name|blockPoolId
parameter_list|,
name|Collection
argument_list|<
name|BlockMovingInfo
argument_list|>
name|blockMovingInfos
parameter_list|)
block|{
name|super
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockPoolId
operator|=
name|blockPoolId
expr_stmt|;
name|this
operator|.
name|blockMovingTasks
operator|=
name|blockMovingInfos
expr_stmt|;
block|}
comment|/**    * Returns block pool ID.    */
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|blockPoolId
return|;
block|}
comment|/**    * Returns the list of blocks to be moved.    */
DECL|method|getBlockMovingTasks ()
specifier|public
name|Collection
argument_list|<
name|BlockMovingInfo
argument_list|>
name|getBlockMovingTasks
parameter_list|()
block|{
return|return
name|blockMovingTasks
return|;
block|}
comment|/**    * Stores block to storage info that can be used for block movement.    */
DECL|class|BlockMovingInfo
specifier|public
specifier|static
class|class
name|BlockMovingInfo
block|{
DECL|field|blk
specifier|private
name|Block
name|blk
decl_stmt|;
DECL|field|sourceNode
specifier|private
name|DatanodeInfo
name|sourceNode
decl_stmt|;
DECL|field|targetNode
specifier|private
name|DatanodeInfo
name|targetNode
decl_stmt|;
DECL|field|sourceStorageType
specifier|private
name|StorageType
name|sourceStorageType
decl_stmt|;
DECL|field|targetStorageType
specifier|private
name|StorageType
name|targetStorageType
decl_stmt|;
comment|/**      * Block to storage info constructor.      *      * @param block      *          block info      * @param sourceDnInfo      *          node that can be the source of a block move      * @param srcStorageType      *          type of source storage media      */
DECL|method|BlockMovingInfo (Block block, DatanodeInfo sourceDnInfo, DatanodeInfo targetDnInfo, StorageType srcStorageType, StorageType targetStorageType)
specifier|public
name|BlockMovingInfo
parameter_list|(
name|Block
name|block
parameter_list|,
name|DatanodeInfo
name|sourceDnInfo
parameter_list|,
name|DatanodeInfo
name|targetDnInfo
parameter_list|,
name|StorageType
name|srcStorageType
parameter_list|,
name|StorageType
name|targetStorageType
parameter_list|)
block|{
name|this
operator|.
name|blk
operator|=
name|block
expr_stmt|;
name|this
operator|.
name|sourceNode
operator|=
name|sourceDnInfo
expr_stmt|;
name|this
operator|.
name|targetNode
operator|=
name|targetDnInfo
expr_stmt|;
name|this
operator|.
name|sourceStorageType
operator|=
name|srcStorageType
expr_stmt|;
name|this
operator|.
name|targetStorageType
operator|=
name|targetStorageType
expr_stmt|;
block|}
DECL|method|addBlock (Block block)
specifier|public
name|void
name|addBlock
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
name|this
operator|.
name|blk
operator|=
name|block
expr_stmt|;
block|}
DECL|method|getBlock ()
specifier|public
name|Block
name|getBlock
parameter_list|()
block|{
return|return
name|blk
return|;
block|}
DECL|method|getSource ()
specifier|public
name|DatanodeInfo
name|getSource
parameter_list|()
block|{
return|return
name|sourceNode
return|;
block|}
DECL|method|getTarget ()
specifier|public
name|DatanodeInfo
name|getTarget
parameter_list|()
block|{
return|return
name|targetNode
return|;
block|}
DECL|method|getTargetStorageType ()
specifier|public
name|StorageType
name|getTargetStorageType
parameter_list|()
block|{
return|return
name|targetStorageType
return|;
block|}
DECL|method|getSourceStorageType ()
specifier|public
name|StorageType
name|getSourceStorageType
parameter_list|()
block|{
return|return
name|sourceStorageType
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"BlockMovingInfo(\n  "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Moving block: "
argument_list|)
operator|.
name|append
argument_list|(
name|blk
argument_list|)
operator|.
name|append
argument_list|(
literal|" From: "
argument_list|)
operator|.
name|append
argument_list|(
name|sourceNode
argument_list|)
operator|.
name|append
argument_list|(
literal|" To: ["
argument_list|)
operator|.
name|append
argument_list|(
name|targetNode
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n  "
argument_list|)
operator|.
name|append
argument_list|(
literal|" sourceStorageType: "
argument_list|)
operator|.
name|append
argument_list|(
name|sourceStorageType
argument_list|)
operator|.
name|append
argument_list|(
literal|" targetStorageType: "
argument_list|)
operator|.
name|append
argument_list|(
name|targetStorageType
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

