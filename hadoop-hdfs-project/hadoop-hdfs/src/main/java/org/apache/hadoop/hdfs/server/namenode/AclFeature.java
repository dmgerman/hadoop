begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReferenceCountMap
operator|.
name|ReferenceCounter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Feature that represents the ACLs of the inode.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|AclFeature
specifier|public
class|class
name|AclFeature
implements|implements
name|INode
operator|.
name|Feature
implements|,
name|ReferenceCounter
block|{
DECL|field|EMPTY_ENTRY_LIST
specifier|public
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|AclEntry
argument_list|>
name|EMPTY_ENTRY_LIST
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|refCount
specifier|private
name|int
name|refCount
init|=
literal|0
decl_stmt|;
DECL|field|entries
specifier|private
specifier|final
name|int
index|[]
name|entries
decl_stmt|;
DECL|method|AclFeature (int[] entries)
specifier|public
name|AclFeature
parameter_list|(
name|int
index|[]
name|entries
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
block|}
comment|/**    * Get the number of entries present    */
DECL|method|getEntriesSize ()
name|int
name|getEntriesSize
parameter_list|()
block|{
return|return
name|entries
operator|.
name|length
return|;
block|}
comment|/**    * Get the entry at the specified position    * @param pos Position of the entry to be obtained    * @return integer representation of AclEntry    * @throws IndexOutOfBoundsException if pos out of bound    */
DECL|method|getEntryAt (int pos)
name|int
name|getEntryAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkPositionIndex
argument_list|(
name|pos
argument_list|,
name|entries
operator|.
name|length
argument_list|,
literal|"Invalid position for AclEntry"
argument_list|)
expr_stmt|;
return|return
name|entries
index|[
name|pos
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|entries
argument_list|,
operator|(
operator|(
name|AclFeature
operator|)
name|o
operator|)
operator|.
name|entries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|entries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRefCount ()
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
annotation|@
name|Override
DECL|method|incrementAndGetRefCount ()
specifier|public
name|int
name|incrementAndGetRefCount
parameter_list|()
block|{
return|return
operator|++
name|refCount
return|;
block|}
annotation|@
name|Override
DECL|method|decrementAndGetRefCount ()
specifier|public
name|int
name|decrementAndGetRefCount
parameter_list|()
block|{
return|return
operator|(
name|refCount
operator|>
literal|0
operator|)
condition|?
operator|--
name|refCount
else|:
literal|0
return|;
block|}
block|}
end_class

end_unit

