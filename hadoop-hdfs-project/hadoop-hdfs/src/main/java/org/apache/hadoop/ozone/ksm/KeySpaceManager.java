begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ksm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|jmx
operator|.
name|ServiceRuntimeInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmBucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|protocol
operator|.
name|KeySpaceManagerProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|protocolPB
operator|.
name|KeySpaceManagerProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|OzoneAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|KeySpaceManagerProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocol
operator|.
name|ScmBlockLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|ScmBlockLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|ScmBlockLocationProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_HANDLER_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KSMConfigKeys
operator|.
name|OZONE_KSM_HANDLER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|KeySpaceManagerService
operator|.
name|newReflectiveBlockingService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
operator|.
name|terminate
import|;
end_import

begin_comment
comment|/**  * Ozone Keyspace manager is the metadata manager of ozone.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"CBLOCK"
block|,
literal|"OZONE"
block|,
literal|"HBASE"
block|}
argument_list|)
DECL|class|KeySpaceManager
specifier|public
class|class
name|KeySpaceManager
extends|extends
name|ServiceRuntimeInfoImpl
implements|implements
name|KeySpaceManagerProtocol
implements|,
name|KSMMXBean
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeySpaceManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ksmRpcServer
specifier|private
specifier|final
name|RPC
operator|.
name|Server
name|ksmRpcServer
decl_stmt|;
DECL|field|ksmRpcAddress
specifier|private
specifier|final
name|InetSocketAddress
name|ksmRpcAddress
decl_stmt|;
DECL|field|metadataManager
specifier|private
specifier|final
name|KSMMetadataManager
name|metadataManager
decl_stmt|;
DECL|field|volumeManager
specifier|private
specifier|final
name|VolumeManager
name|volumeManager
decl_stmt|;
DECL|field|bucketManager
specifier|private
specifier|final
name|BucketManager
name|bucketManager
decl_stmt|;
DECL|field|keyManager
specifier|private
specifier|final
name|KeyManager
name|keyManager
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|KSMMetrics
name|metrics
decl_stmt|;
DECL|field|httpServer
specifier|private
specifier|final
name|KeySpaceManagerHttpServer
name|httpServer
decl_stmt|;
DECL|field|ksmInfoBeanName
specifier|private
name|ObjectName
name|ksmInfoBeanName
decl_stmt|;
DECL|method|KeySpaceManager (OzoneConfiguration conf)
specifier|public
name|KeySpaceManager
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|handlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_KSM_HANDLER_COUNT_KEY
argument_list|,
name|OZONE_KSM_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|KeySpaceManagerProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|BlockingService
name|ksmService
init|=
name|newReflectiveBlockingService
argument_list|(
operator|new
name|KeySpaceManagerProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|ksmNodeRpcAddr
init|=
name|OzoneClientUtils
operator|.
name|getKsmAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ksmRpcServer
operator|=
name|startRpcServer
argument_list|(
name|conf
argument_list|,
name|ksmNodeRpcAddr
argument_list|,
name|KeySpaceManagerProtocolPB
operator|.
name|class
argument_list|,
name|ksmService
argument_list|,
name|handlerCount
argument_list|)
expr_stmt|;
name|ksmRpcAddress
operator|=
name|OzoneClientUtils
operator|.
name|updateRPCListenAddress
argument_list|(
name|conf
argument_list|,
name|OZONE_KSM_ADDRESS_KEY
argument_list|,
name|ksmNodeRpcAddr
argument_list|,
name|ksmRpcServer
argument_list|)
expr_stmt|;
name|metadataManager
operator|=
operator|new
name|KSMMetadataManagerImpl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|volumeManager
operator|=
operator|new
name|VolumeManagerImpl
argument_list|(
name|metadataManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|bucketManager
operator|=
operator|new
name|BucketManagerImpl
argument_list|(
name|metadataManager
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|KSMMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
name|keyManager
operator|=
operator|new
name|KeyManagerImpl
argument_list|(
name|getScmBlockClient
argument_list|(
name|conf
argument_list|)
argument_list|,
name|metadataManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|httpServer
operator|=
operator|new
name|KeySpaceManagerHttpServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a scm block client, used by putKey() and getKey().    *    * @param conf    * @return    * @throws IOException    */
DECL|method|getScmBlockClient (OzoneConfiguration conf)
specifier|private
name|ScmBlockLocationProtocol
name|getScmBlockClient
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|ScmBlockLocationProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|long
name|scmVersion
init|=
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|ScmBlockLocationProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|scmBlockAddress
init|=
name|OzoneClientUtils
operator|.
name|getScmAddressForBlockClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ScmBlockLocationProtocolClientSideTranslatorPB
name|scmBlockLocationClient
init|=
operator|new
name|ScmBlockLocationProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|ScmBlockLocationProtocolPB
operator|.
name|class
argument_list|,
name|scmVersion
argument_list|,
name|scmBlockAddress
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|Client
operator|.
name|getRpcTimeout
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|scmBlockLocationClient
return|;
block|}
comment|/**    * Starts an RPC server, if configured.    *    * @param conf configuration    * @param addr configured address of RPC server    * @param protocol RPC protocol provided by RPC server    * @param instance RPC protocol implementation instance    * @param handlerCount RPC server handler count    *    * @return RPC server    * @throws IOException if there is an I/O error while creating RPC server    */
DECL|method|startRpcServer (OzoneConfiguration conf, InetSocketAddress addr, Class<?> protocol, BlockingService instance, int handlerCount)
specifier|private
specifier|static
name|RPC
operator|.
name|Server
name|startRpcServer
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|BlockingService
name|instance
parameter_list|,
name|int
name|handlerCount
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|Server
name|rpcServer
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
operator|.
name|setInstance
argument_list|(
name|instance
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|handlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|instance
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
return|return
name|rpcServer
return|;
block|}
comment|/**    * Get metadata manager.    * @return metadata manager.    */
DECL|method|getMetadataManager ()
specifier|public
name|KSMMetadataManager
name|getMetadataManager
parameter_list|()
block|{
return|return
name|metadataManager
return|;
block|}
DECL|method|getMetrics ()
specifier|public
name|KSMMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
comment|/**    * Main entry point for starting KeySpaceManager.    *    * @param argv arguments    * @throws IOException if startup fails due to I/O error    */
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|IOException
block|{
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|KeySpaceManager
operator|.
name|class
argument_list|,
name|argv
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
try|try
block|{
name|KeySpaceManager
name|ksm
init|=
operator|new
name|KeySpaceManager
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|ksm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ksm
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start the KeyspaceManager."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
literal|1
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Builds a message for logging startup information about an RPC server.    *    * @param description RPC server description    * @param addr RPC server listening address    * @return server startup message    */
DECL|method|buildRpcServerStartMessage (String description, InetSocketAddress addr)
specifier|private
specifier|static
name|String
name|buildRpcServerStartMessage
parameter_list|(
name|String
name|description
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|!=
literal|null
condition|?
name|String
operator|.
name|format
argument_list|(
literal|"%s is listening at %s"
argument_list|,
name|description
argument_list|,
name|addr
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|String
operator|.
name|format
argument_list|(
literal|"%s not started"
argument_list|,
name|description
argument_list|)
return|;
block|}
comment|/**    * Start service.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"KeyspaceManager RPC server"
argument_list|,
name|ksmRpcAddress
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"KeySpaceManager"
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|keyManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ksmRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|registerMXBean
argument_list|()
expr_stmt|;
name|setStartTime
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop service.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|metadataManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ksmRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|keyManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|unRegister
argument_list|()
expr_stmt|;
name|unregisterMXBean
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Key Space Manager stop failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait until service has completed shutdown.    */
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
try|try
block|{
name|ksmRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted during KeyspaceManager join."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a volume.    *    * @param args - Arguments to create Volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createVolume (KsmVolumeArgs args)
specifier|public
name|void
name|createVolume
parameter_list|(
name|KsmVolumeArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumVolumeCreates
argument_list|()
expr_stmt|;
name|volumeManager
operator|.
name|createVolume
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeCreateFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Changes the owner of a volume.    *    * @param volume - Name of the volume.    * @param owner - Name of the owner.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setOwner (String volume, String owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumVolumeUpdates
argument_list|()
expr_stmt|;
name|volumeManager
operator|.
name|setOwner
argument_list|(
name|volume
argument_list|,
name|owner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeUpdateFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Changes the Quota on a volume.    *    * @param volume - Name of the volume.    * @param quota - Quota in bytes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setQuota (String volume, long quota)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|volume
parameter_list|,
name|long
name|quota
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumVolumeUpdates
argument_list|()
expr_stmt|;
name|volumeManager
operator|.
name|setQuota
argument_list|(
name|volume
argument_list|,
name|quota
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeUpdateFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Checks if the specified user can access this volume.    *    * @param volume - volume    * @param userAcl - user acls which needs to be checked for access    * @return true if the user has required access for the volume,    *         false otherwise    * @throws IOException    */
annotation|@
name|Override
DECL|method|checkVolumeAccess (String volume, OzoneAclInfo userAcl)
specifier|public
name|boolean
name|checkVolumeAccess
parameter_list|(
name|String
name|volume
parameter_list|,
name|OzoneAclInfo
name|userAcl
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumVolumeCheckAccesses
argument_list|()
expr_stmt|;
return|return
name|volumeManager
operator|.
name|checkVolumeAccess
argument_list|(
name|volume
argument_list|,
name|userAcl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeCheckAccessFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Gets the volume information.    *    * @param volume - Volume name.    * @return VolumeArgs or exception is thrown.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getVolumeInfo (String volume)
specifier|public
name|KsmVolumeArgs
name|getVolumeInfo
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumVolumeInfos
argument_list|()
expr_stmt|;
return|return
name|volumeManager
operator|.
name|getVolumeInfo
argument_list|(
name|volume
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeInfoFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Deletes an existing empty volume.    *    * @param volume - Name of the volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteVolume (String volume)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumVolumeDeletes
argument_list|()
expr_stmt|;
name|volumeManager
operator|.
name|deleteVolume
argument_list|(
name|volume
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeDeleteFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Lists volume owned by a specific user.    *    * @param userName - user name    * @param prefix - Filter prefix -- Return only entries that match this.    * @param prevKey - Previous key -- List starts from the next from the    * prevkey    * @param maxKeys - Max number of keys to return.    * @return List of Volumes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|listVolumeByUser (String userName, String prefix, String prevKey, int maxKeys)
specifier|public
name|List
argument_list|<
name|KsmVolumeArgs
argument_list|>
name|listVolumeByUser
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumVolumeLists
argument_list|()
expr_stmt|;
return|return
name|volumeManager
operator|.
name|listVolumes
argument_list|(
name|userName
argument_list|,
name|prefix
argument_list|,
name|prevKey
argument_list|,
name|maxKeys
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeListFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Lists volume all volumes in the cluster.    *    * @param prefix - Filter prefix -- Return only entries that match this.    * @param prevKey - Previous key -- List starts from the next from the    * prevkey    * @param maxKeys - Max number of keys to return.    * @return List of Volumes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|listAllVolumes (String prefix, String prevKey, int maxKeys)
specifier|public
name|List
argument_list|<
name|KsmVolumeArgs
argument_list|>
name|listAllVolumes
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumVolumeLists
argument_list|()
expr_stmt|;
return|return
name|volumeManager
operator|.
name|listVolumes
argument_list|(
literal|null
argument_list|,
name|prefix
argument_list|,
name|prevKey
argument_list|,
name|maxKeys
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeListFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Creates a bucket.    *    * @param bucketInfo - BucketInfo to create bucket.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createBucket (KsmBucketInfo bucketInfo)
specifier|public
name|void
name|createBucket
parameter_list|(
name|KsmBucketInfo
name|bucketInfo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumBucketCreates
argument_list|()
expr_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketCreateFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|listBuckets (String volumeName, String startKey, String prefix, int maxNumOfBuckets)
specifier|public
name|List
argument_list|<
name|KsmBucketInfo
argument_list|>
name|listBuckets
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|prefix
parameter_list|,
name|int
name|maxNumOfBuckets
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumBucketLists
argument_list|()
expr_stmt|;
return|return
name|bucketManager
operator|.
name|listBuckets
argument_list|(
name|volumeName
argument_list|,
name|startKey
argument_list|,
name|prefix
argument_list|,
name|maxNumOfBuckets
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketListFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Gets the bucket information.    *    * @param volume - Volume name.    * @param bucket - Bucket name.    * @return KsmBucketInfo or exception is thrown.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getBucketInfo (String volume, String bucket)
specifier|public
name|KsmBucketInfo
name|getBucketInfo
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumBucketInfos
argument_list|()
expr_stmt|;
return|return
name|bucketManager
operator|.
name|getBucketInfo
argument_list|(
name|volume
argument_list|,
name|bucket
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketInfoFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Allocate a key.    *    * @param args - attributes of the key.    * @return KsmKeyInfo - the info about the allocated key.    * @throws IOException    */
annotation|@
name|Override
DECL|method|allocateKey (KsmKeyArgs args)
specifier|public
name|KsmKeyInfo
name|allocateKey
parameter_list|(
name|KsmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumKeyAllocates
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|allocateKey
argument_list|(
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumKeyAllocateFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Lookup a key.    *    * @param args - attributes of the key.    * @return KsmKeyInfo - the info about the requested key.    * @throws IOException    */
annotation|@
name|Override
DECL|method|lookupKey (KsmKeyArgs args)
specifier|public
name|KsmKeyInfo
name|lookupKey
parameter_list|(
name|KsmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumKeyLookups
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|lookupKey
argument_list|(
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumKeyLookupFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Deletes an existing key.    *    * @param args - attributes of the key.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteKey (KsmKeyArgs args)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|KsmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumKeyDeletes
argument_list|()
expr_stmt|;
name|keyManager
operator|.
name|deleteKey
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumKeyDeleteFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|listKeys (String volumeName, String bucketName, String startKey, String keyPrefix, int maxKeys)
specifier|public
name|List
argument_list|<
name|KsmKeyInfo
argument_list|>
name|listKeys
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|keyPrefix
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumKeyLists
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|listKeys
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|startKey
argument_list|,
name|keyPrefix
argument_list|,
name|maxKeys
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumKeyListFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Sets bucket property from args.    * @param args - BucketArgs.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setBucketProperty (KsmBucketArgs args)
specifier|public
name|void
name|setBucketProperty
parameter_list|(
name|KsmBucketArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumBucketUpdates
argument_list|()
expr_stmt|;
name|bucketManager
operator|.
name|setBucketProperty
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketUpdateFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Deletes an existing empty bucket from volume.    * @param volume - Name of the volume.    * @param bucket - Name of the bucket.    * @throws IOException    */
DECL|method|deleteBucket (String volume, String bucket)
specifier|public
name|void
name|deleteBucket
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|metrics
operator|.
name|incNumBucketDeletes
argument_list|()
expr_stmt|;
name|bucketManager
operator|.
name|deleteBucket
argument_list|(
name|volume
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketDeleteFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|registerMXBean ()
specifier|private
name|void
name|registerMXBean
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jmxProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|jmxProperties
operator|.
name|put
argument_list|(
literal|"component"
argument_list|,
literal|"ServerRuntime"
argument_list|)
expr_stmt|;
name|this
operator|.
name|ksmInfoBeanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"KeySpaceManager"
argument_list|,
literal|"KeySpaceManagerInfo"
argument_list|,
name|jmxProperties
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterMXBean ()
specifier|private
name|void
name|unregisterMXBean
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|ksmInfoBeanName
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|this
operator|.
name|ksmInfoBeanName
argument_list|)
expr_stmt|;
name|this
operator|.
name|ksmInfoBeanName
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRpcPort ()
specifier|public
name|String
name|getRpcPort
parameter_list|()
block|{
return|return
literal|""
operator|+
name|ksmRpcAddress
operator|.
name|getPort
argument_list|()
return|;
block|}
block|}
end_class

end_unit

