begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|Loader
operator|.
name|loadINodeDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|Loader
operator|.
name|loadPermission
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|Loader
operator|.
name|updateBlocksMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|Saver
operator|.
name|buildINodeDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
operator|.
name|Saver
operator|.
name|buildINodeFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
operator|.
name|PBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfoContiguous
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclEntryStatusFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|AclFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatPBINode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatProtobuf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatProtobuf
operator|.
name|LoaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatProtobuf
operator|.
name|SectionName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|FileSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeReferenceSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SnapshotDiffSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SnapshotDiffSection
operator|.
name|CreatedListEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SnapshotDiffSection
operator|.
name|DiffEntry
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SnapshotSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeDirectoryAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeFileAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
operator|.
name|DstReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
operator|.
name|WithCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
operator|.
name|WithName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeWithAdditionalFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|QuotaByStorageTypeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|SaveNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectoryWithSnapshotFeature
operator|.
name|DirectoryDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectoryWithSnapshotFeature
operator|.
name|DirectoryDiffList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|XAttrFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|Diff
operator|.
name|ListType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|EnumCounters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FSImageFormatPBSnapshot
specifier|public
class|class
name|FSImageFormatPBSnapshot
block|{
comment|/**    * Loading snapshot related information from protobuf based FSImage    */
DECL|class|Loader
specifier|public
specifier|final
specifier|static
class|class
name|Loader
block|{
DECL|field|fsn
specifier|private
specifier|final
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|fsDir
specifier|private
specifier|final
name|FSDirectory
name|fsDir
decl_stmt|;
DECL|field|parent
specifier|private
specifier|final
name|FSImageFormatProtobuf
operator|.
name|Loader
name|parent
decl_stmt|;
DECL|field|snapshotMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Snapshot
argument_list|>
name|snapshotMap
decl_stmt|;
DECL|method|Loader (FSNamesystem fsn, FSImageFormatProtobuf.Loader parent)
specifier|public
name|Loader
parameter_list|(
name|FSNamesystem
name|fsn
parameter_list|,
name|FSImageFormatProtobuf
operator|.
name|Loader
name|parent
parameter_list|)
block|{
name|this
operator|.
name|fsn
operator|=
name|fsn
expr_stmt|;
name|this
operator|.
name|fsDir
operator|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
expr_stmt|;
name|this
operator|.
name|snapshotMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Snapshot
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/**      * The sequence of the ref node in refList must be strictly the same with      * the sequence in fsimage      */
DECL|method|loadINodeReferenceSection (InputStream in)
specifier|public
name|void
name|loadINodeReferenceSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INodeReference
argument_list|>
name|refList
init|=
name|parent
operator|.
name|getLoaderContext
argument_list|()
operator|.
name|getRefList
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|INodeReferenceSection
operator|.
name|INodeReference
name|e
init|=
name|INodeReferenceSection
operator|.
name|INodeReference
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|INodeReference
name|ref
init|=
name|loadINodeReference
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|refList
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadINodeReference ( INodeReferenceSection.INodeReference r)
specifier|private
name|INodeReference
name|loadINodeReference
parameter_list|(
name|INodeReferenceSection
operator|.
name|INodeReference
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|referredId
init|=
name|r
operator|.
name|getReferredId
argument_list|()
decl_stmt|;
name|INode
name|referred
init|=
name|fsDir
operator|.
name|getInode
argument_list|(
name|referredId
argument_list|)
decl_stmt|;
name|WithCount
name|withCount
init|=
operator|(
name|WithCount
operator|)
name|referred
operator|.
name|getParentReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|withCount
operator|==
literal|null
condition|)
block|{
name|withCount
operator|=
operator|new
name|INodeReference
operator|.
name|WithCount
argument_list|(
literal|null
argument_list|,
name|referred
argument_list|)
expr_stmt|;
block|}
specifier|final
name|INodeReference
name|ref
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasDstSnapshotId
argument_list|()
condition|)
block|{
comment|// DstReference
name|ref
operator|=
operator|new
name|INodeReference
operator|.
name|DstReference
argument_list|(
literal|null
argument_list|,
name|withCount
argument_list|,
name|r
operator|.
name|getDstSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
operator|new
name|INodeReference
operator|.
name|WithName
argument_list|(
literal|null
argument_list|,
name|withCount
argument_list|,
name|r
operator|.
name|getName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|r
operator|.
name|getLastSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ref
return|;
block|}
comment|/**      * Load the snapshots section from fsimage. Also add snapshottable feature      * to snapshottable directories.      */
DECL|method|loadSnapshotSection (InputStream in)
specifier|public
name|void
name|loadSnapshotSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotManager
name|sm
init|=
name|fsn
operator|.
name|getSnapshotManager
argument_list|()
decl_stmt|;
name|SnapshotSection
name|section
init|=
name|SnapshotSection
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|snum
init|=
name|section
operator|.
name|getNumSnapshots
argument_list|()
decl_stmt|;
name|sm
operator|.
name|setNumSnapshots
argument_list|(
name|snum
argument_list|)
expr_stmt|;
name|sm
operator|.
name|setSnapshotCounter
argument_list|(
name|section
operator|.
name|getSnapshotCounter
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|sdirId
range|:
name|section
operator|.
name|getSnapshottableDirList
argument_list|()
control|)
block|{
name|INodeDirectory
name|dir
init|=
name|fsDir
operator|.
name|getInode
argument_list|(
name|sdirId
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isSnapshottable
argument_list|()
condition|)
block|{
name|dir
operator|.
name|addSnapshottableFeature
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// dir is root, and admin set root to snapshottable before
name|dir
operator|.
name|setSnapshotQuota
argument_list|(
name|DirectorySnapshottableFeature
operator|.
name|SNAPSHOT_LIMIT
argument_list|)
expr_stmt|;
block|}
name|sm
operator|.
name|addSnapshottable
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|loadSnapshots
argument_list|(
name|in
argument_list|,
name|snum
argument_list|)
expr_stmt|;
block|}
DECL|method|loadSnapshots (InputStream in, int size)
specifier|private
name|void
name|loadSnapshots
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|SnapshotSection
operator|.
name|Snapshot
name|pbs
init|=
name|SnapshotSection
operator|.
name|Snapshot
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|INodeDirectory
name|root
init|=
name|loadINodeDirectory
argument_list|(
name|pbs
operator|.
name|getRoot
argument_list|()
argument_list|,
name|parent
operator|.
name|getLoaderContext
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sid
init|=
name|pbs
operator|.
name|getSnapshotId
argument_list|()
decl_stmt|;
name|INodeDirectory
name|parent
init|=
name|fsDir
operator|.
name|getInode
argument_list|(
name|root
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|asDirectory
argument_list|()
decl_stmt|;
name|Snapshot
name|snapshot
init|=
operator|new
name|Snapshot
argument_list|(
name|sid
argument_list|,
name|root
argument_list|,
name|parent
argument_list|)
decl_stmt|;
comment|// add the snapshot to parent, since we follow the sequence of
comment|// snapshotsByNames when saving, we do not need to sort when loading
name|parent
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|addSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|snapshotMap
operator|.
name|put
argument_list|(
name|sid
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Load the snapshot diff section from fsimage.      */
DECL|method|loadSnapshotDiffSection (InputStream in)
specifier|public
name|void
name|loadSnapshotDiffSection
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INodeReference
argument_list|>
name|refList
init|=
name|parent
operator|.
name|getLoaderContext
argument_list|()
operator|.
name|getRefList
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|SnapshotDiffSection
operator|.
name|DiffEntry
name|entry
init|=
name|SnapshotDiffSection
operator|.
name|DiffEntry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|long
name|inodeId
init|=
name|entry
operator|.
name|getInodeId
argument_list|()
decl_stmt|;
name|INode
name|inode
init|=
name|fsDir
operator|.
name|getInode
argument_list|(
name|inodeId
argument_list|)
decl_stmt|;
name|SnapshotDiffSection
operator|.
name|DiffEntry
operator|.
name|Type
name|type
init|=
name|entry
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FILEDIFF
case|:
name|loadFileDiffList
argument_list|(
name|in
argument_list|,
name|inode
operator|.
name|asFile
argument_list|()
argument_list|,
name|entry
operator|.
name|getNumOfDiff
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRECTORYDIFF
case|:
name|loadDirectoryDiffList
argument_list|(
name|in
argument_list|,
name|inode
operator|.
name|asDirectory
argument_list|()
argument_list|,
name|entry
operator|.
name|getNumOfDiff
argument_list|()
argument_list|,
name|refList
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/** Load FileDiff list for a file with snapshot feature */
DECL|method|loadFileDiffList (InputStream in, INodeFile file, int size)
specifier|private
name|void
name|loadFileDiffList
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|INodeFile
name|file
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileDiffList
name|diffs
init|=
operator|new
name|FileDiffList
argument_list|()
decl_stmt|;
specifier|final
name|LoaderContext
name|state
init|=
name|parent
operator|.
name|getLoaderContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|SnapshotDiffSection
operator|.
name|FileDiff
name|pbf
init|=
name|SnapshotDiffSection
operator|.
name|FileDiff
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|INodeFileAttributes
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pbf
operator|.
name|hasSnapshotCopy
argument_list|()
condition|)
block|{
name|INodeSection
operator|.
name|INodeFile
name|fileInPb
init|=
name|pbf
operator|.
name|getSnapshotCopy
argument_list|()
decl_stmt|;
name|PermissionStatus
name|permission
init|=
name|loadPermission
argument_list|(
name|fileInPb
operator|.
name|getPermission
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
decl_stmt|;
name|AclFeature
name|acl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fileInPb
operator|.
name|hasAcl
argument_list|()
condition|)
block|{
name|int
index|[]
name|entries
init|=
name|AclEntryStatusFormat
operator|.
name|toInt
argument_list|(
name|FSImageFormatPBINode
operator|.
name|Loader
operator|.
name|loadAclEntries
argument_list|(
name|fileInPb
operator|.
name|getAcl
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|acl
operator|=
operator|new
name|AclFeature
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
name|XAttrFeature
name|xAttrs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fileInPb
operator|.
name|hasXAttrs
argument_list|()
condition|)
block|{
name|xAttrs
operator|=
operator|new
name|XAttrFeature
argument_list|(
name|FSImageFormatPBINode
operator|.
name|Loader
operator|.
name|loadXAttrs
argument_list|(
name|fileInPb
operator|.
name|getXAttrs
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|copy
operator|=
operator|new
name|INodeFileAttributes
operator|.
name|SnapshotCopy
argument_list|(
name|pbf
operator|.
name|getName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|permission
argument_list|,
name|acl
argument_list|,
name|fileInPb
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|fileInPb
operator|.
name|getAccessTime
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|fileInPb
operator|.
name|getReplication
argument_list|()
argument_list|,
name|fileInPb
operator|.
name|getPreferredBlockSize
argument_list|()
argument_list|,
operator|(
name|byte
operator|)
name|fileInPb
operator|.
name|getStoragePolicyID
argument_list|()
argument_list|,
name|xAttrs
argument_list|,
name|fileInPb
operator|.
name|getIsStriped
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FileDiff
name|diff
init|=
operator|new
name|FileDiff
argument_list|(
name|pbf
operator|.
name|getSnapshotId
argument_list|()
argument_list|,
name|copy
argument_list|,
literal|null
argument_list|,
name|pbf
operator|.
name|getFileSize
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlockProto
argument_list|>
name|bpl
init|=
name|pbf
operator|.
name|getBlocksList
argument_list|()
decl_stmt|;
comment|// in file diff there can only be contiguous blocks
name|BlockInfo
index|[]
name|blocks
init|=
operator|new
name|BlockInfo
index|[
name|bpl
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|e
init|=
name|bpl
operator|.
name|size
argument_list|()
init|;
name|j
operator|<
name|e
condition|;
operator|++
name|j
control|)
block|{
name|Block
name|blk
init|=
name|PBHelper
operator|.
name|convert
argument_list|(
name|bpl
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|BlockInfo
name|storedBlock
init|=
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getStoredBlock
argument_list|(
name|blk
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedBlock
operator|==
literal|null
condition|)
block|{
name|storedBlock
operator|=
operator|(
name|BlockInfoContiguous
operator|)
name|fsn
operator|.
name|getBlockManager
argument_list|()
operator|.
name|addBlockCollectionWithCheck
argument_list|(
operator|new
name|BlockInfoContiguous
argument_list|(
name|blk
argument_list|,
name|copy
operator|.
name|getFileReplication
argument_list|()
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
name|blocks
index|[
name|j
index|]
operator|=
name|storedBlock
expr_stmt|;
block|}
if|if
condition|(
name|blocks
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|diff
operator|.
name|setBlocks
argument_list|(
name|blocks
argument_list|)
expr_stmt|;
block|}
name|diffs
operator|.
name|addFirst
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|addSnapshotFeature
argument_list|(
name|diffs
argument_list|)
expr_stmt|;
block|}
comment|/** Load the created list in a DirectoryDiff */
DECL|method|loadCreatedList (InputStream in, INodeDirectory dir, int size)
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|loadCreatedList
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|INode
argument_list|>
name|clist
init|=
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|c
init|=
literal|0
init|;
name|c
operator|<
name|size
condition|;
name|c
operator|++
control|)
block|{
name|CreatedListEntry
name|entry
init|=
name|CreatedListEntry
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|INode
name|created
init|=
name|SnapshotFSImageFormat
operator|.
name|loadCreated
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|clist
operator|.
name|add
argument_list|(
name|created
argument_list|)
expr_stmt|;
block|}
return|return
name|clist
return|;
block|}
DECL|method|addToDeletedList (INode dnode, INodeDirectory parent)
specifier|private
name|void
name|addToDeletedList
parameter_list|(
name|INode
name|dnode
parameter_list|,
name|INodeDirectory
name|parent
parameter_list|)
block|{
name|dnode
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|dnode
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|updateBlocksMap
argument_list|(
name|dnode
operator|.
name|asFile
argument_list|()
argument_list|,
name|fsn
operator|.
name|getBlockManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Load the deleted list in a DirectoryDiff      */
DECL|method|loadDeletedList (final List<INodeReference> refList, InputStream in, INodeDirectory dir, List<Long> deletedNodes, List<Integer> deletedRefNodes)
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|loadDeletedList
parameter_list|(
specifier|final
name|List
argument_list|<
name|INodeReference
argument_list|>
name|refList
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|deletedNodes
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|deletedRefNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|INode
argument_list|>
name|dlist
init|=
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|(
name|deletedRefNodes
operator|.
name|size
argument_list|()
operator|+
name|deletedNodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// load non-reference inodes
for|for
control|(
name|long
name|deletedId
range|:
name|deletedNodes
control|)
block|{
name|INode
name|deleted
init|=
name|fsDir
operator|.
name|getInode
argument_list|(
name|deletedId
argument_list|)
decl_stmt|;
name|dlist
operator|.
name|add
argument_list|(
name|deleted
argument_list|)
expr_stmt|;
name|addToDeletedList
argument_list|(
name|deleted
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|// load reference nodes in the deleted list
for|for
control|(
name|int
name|refId
range|:
name|deletedRefNodes
control|)
block|{
name|INodeReference
name|deletedRef
init|=
name|refList
operator|.
name|get
argument_list|(
name|refId
argument_list|)
decl_stmt|;
name|dlist
operator|.
name|add
argument_list|(
name|deletedRef
argument_list|)
expr_stmt|;
name|addToDeletedList
argument_list|(
name|deletedRef
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|dlist
argument_list|,
operator|new
name|Comparator
argument_list|<
name|INode
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|INode
name|n1
parameter_list|,
name|INode
name|n2
parameter_list|)
block|{
return|return
name|n1
operator|.
name|compareTo
argument_list|(
name|n2
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|dlist
return|;
block|}
comment|/** Load DirectoryDiff list for a directory with snapshot feature */
DECL|method|loadDirectoryDiffList (InputStream in, INodeDirectory dir, int size, final List<INodeReference> refList)
specifier|private
name|void
name|loadDirectoryDiffList
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|INodeDirectory
name|dir
parameter_list|,
name|int
name|size
parameter_list|,
specifier|final
name|List
argument_list|<
name|INodeReference
argument_list|>
name|refList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|isWithSnapshot
argument_list|()
condition|)
block|{
name|dir
operator|.
name|addSnapshotFeature
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|DirectoryDiffList
name|diffs
init|=
name|dir
operator|.
name|getDiffs
argument_list|()
decl_stmt|;
specifier|final
name|LoaderContext
name|state
init|=
name|parent
operator|.
name|getLoaderContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
comment|// load a directory diff
name|SnapshotDiffSection
operator|.
name|DirectoryDiff
name|diffInPb
init|=
name|SnapshotDiffSection
operator|.
name|DirectoryDiff
operator|.
name|parseDelimitedFrom
argument_list|(
name|in
argument_list|)
decl_stmt|;
specifier|final
name|int
name|snapshotId
init|=
name|diffInPb
operator|.
name|getSnapshotId
argument_list|()
decl_stmt|;
specifier|final
name|Snapshot
name|snapshot
init|=
name|snapshotMap
operator|.
name|get
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
name|int
name|childrenSize
init|=
name|diffInPb
operator|.
name|getChildrenSize
argument_list|()
decl_stmt|;
name|boolean
name|useRoot
init|=
name|diffInPb
operator|.
name|getIsSnapshotRoot
argument_list|()
decl_stmt|;
name|INodeDirectoryAttributes
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useRoot
condition|)
block|{
name|copy
operator|=
name|snapshot
operator|.
name|getRoot
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|diffInPb
operator|.
name|hasSnapshotCopy
argument_list|()
condition|)
block|{
name|INodeSection
operator|.
name|INodeDirectory
name|dirCopyInPb
init|=
name|diffInPb
operator|.
name|getSnapshotCopy
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|name
init|=
name|diffInPb
operator|.
name|getName
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|PermissionStatus
name|permission
init|=
name|loadPermission
argument_list|(
name|dirCopyInPb
operator|.
name|getPermission
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
decl_stmt|;
name|AclFeature
name|acl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dirCopyInPb
operator|.
name|hasAcl
argument_list|()
condition|)
block|{
name|int
index|[]
name|entries
init|=
name|AclEntryStatusFormat
operator|.
name|toInt
argument_list|(
name|FSImageFormatPBINode
operator|.
name|Loader
operator|.
name|loadAclEntries
argument_list|(
name|dirCopyInPb
operator|.
name|getAcl
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|acl
operator|=
operator|new
name|AclFeature
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
name|XAttrFeature
name|xAttrs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dirCopyInPb
operator|.
name|hasXAttrs
argument_list|()
condition|)
block|{
name|xAttrs
operator|=
operator|new
name|XAttrFeature
argument_list|(
name|FSImageFormatPBINode
operator|.
name|Loader
operator|.
name|loadXAttrs
argument_list|(
name|dirCopyInPb
operator|.
name|getXAttrs
argument_list|()
argument_list|,
name|state
operator|.
name|getStringTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|modTime
init|=
name|dirCopyInPb
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
name|boolean
name|noQuota
init|=
name|dirCopyInPb
operator|.
name|getNsQuota
argument_list|()
operator|==
operator|-
literal|1
operator|&&
name|dirCopyInPb
operator|.
name|getDsQuota
argument_list|()
operator|==
operator|-
literal|1
operator|&&
operator|(
operator|!
name|dirCopyInPb
operator|.
name|hasTypeQuotas
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|noQuota
condition|)
block|{
name|copy
operator|=
operator|new
name|INodeDirectoryAttributes
operator|.
name|SnapshotCopy
argument_list|(
name|name
argument_list|,
name|permission
argument_list|,
name|acl
argument_list|,
name|modTime
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
name|typeQuotas
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dirCopyInPb
operator|.
name|hasTypeQuotas
argument_list|()
condition|)
block|{
name|ImmutableList
argument_list|<
name|QuotaByStorageTypeEntry
argument_list|>
name|qes
init|=
name|FSImageFormatPBINode
operator|.
name|Loader
operator|.
name|loadQuotaByStorageTypeEntries
argument_list|(
name|dirCopyInPb
operator|.
name|getTypeQuotas
argument_list|()
argument_list|)
decl_stmt|;
name|typeQuotas
operator|=
operator|new
name|EnumCounters
argument_list|<
name|StorageType
argument_list|>
argument_list|(
name|StorageType
operator|.
name|class
argument_list|,
name|HdfsConstants
operator|.
name|QUOTA_RESET
argument_list|)
expr_stmt|;
for|for
control|(
name|QuotaByStorageTypeEntry
name|qe
range|:
name|qes
control|)
block|{
if|if
condition|(
name|qe
operator|.
name|getQuota
argument_list|()
operator|>=
literal|0
operator|&&
name|qe
operator|.
name|getStorageType
argument_list|()
operator|!=
literal|null
operator|&&
name|qe
operator|.
name|getStorageType
argument_list|()
operator|.
name|supportTypeQuota
argument_list|()
condition|)
block|{
name|typeQuotas
operator|.
name|set
argument_list|(
name|qe
operator|.
name|getStorageType
argument_list|()
argument_list|,
name|qe
operator|.
name|getQuota
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|copy
operator|=
operator|new
name|INodeDirectoryAttributes
operator|.
name|CopyWithQuota
argument_list|(
name|name
argument_list|,
name|permission
argument_list|,
name|acl
argument_list|,
name|modTime
argument_list|,
name|dirCopyInPb
operator|.
name|getNsQuota
argument_list|()
argument_list|,
name|dirCopyInPb
operator|.
name|getDsQuota
argument_list|()
argument_list|,
name|typeQuotas
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
block|}
block|}
comment|// load created list
name|List
argument_list|<
name|INode
argument_list|>
name|clist
init|=
name|loadCreatedList
argument_list|(
name|in
argument_list|,
name|dir
argument_list|,
name|diffInPb
operator|.
name|getCreatedListSize
argument_list|()
argument_list|)
decl_stmt|;
comment|// load deleted list
name|List
argument_list|<
name|INode
argument_list|>
name|dlist
init|=
name|loadDeletedList
argument_list|(
name|refList
argument_list|,
name|in
argument_list|,
name|dir
argument_list|,
name|diffInPb
operator|.
name|getDeletedINodeList
argument_list|()
argument_list|,
name|diffInPb
operator|.
name|getDeletedINodeRefList
argument_list|()
argument_list|)
decl_stmt|;
comment|// create the directory diff
name|DirectoryDiff
name|diff
init|=
operator|new
name|DirectoryDiff
argument_list|(
name|snapshotId
argument_list|,
name|copy
argument_list|,
literal|null
argument_list|,
name|childrenSize
argument_list|,
name|clist
argument_list|,
name|dlist
argument_list|,
name|useRoot
argument_list|)
decl_stmt|;
name|diffs
operator|.
name|addFirst
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Saving snapshot related information to protobuf based FSImage    */
DECL|class|Saver
specifier|public
specifier|final
specifier|static
class|class
name|Saver
block|{
DECL|field|fsn
specifier|private
specifier|final
name|FSNamesystem
name|fsn
decl_stmt|;
DECL|field|headers
specifier|private
specifier|final
name|FileSummary
operator|.
name|Builder
name|headers
decl_stmt|;
DECL|field|parent
specifier|private
specifier|final
name|FSImageFormatProtobuf
operator|.
name|Saver
name|parent
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|SaveNamespaceContext
name|context
decl_stmt|;
DECL|method|Saver (FSImageFormatProtobuf.Saver parent, FileSummary.Builder headers, SaveNamespaceContext context, FSNamesystem fsn)
specifier|public
name|Saver
parameter_list|(
name|FSImageFormatProtobuf
operator|.
name|Saver
name|parent
parameter_list|,
name|FileSummary
operator|.
name|Builder
name|headers
parameter_list|,
name|SaveNamespaceContext
name|context
parameter_list|,
name|FSNamesystem
name|fsn
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|fsn
operator|=
name|fsn
expr_stmt|;
block|}
comment|/**      * save all the snapshottable directories and snapshots to fsimage      */
DECL|method|serializeSnapshotSection (OutputStream out)
specifier|public
name|void
name|serializeSnapshotSection
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotManager
name|sm
init|=
name|fsn
operator|.
name|getSnapshotManager
argument_list|()
decl_stmt|;
name|SnapshotSection
operator|.
name|Builder
name|b
init|=
name|SnapshotSection
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshotCounter
argument_list|(
name|sm
operator|.
name|getSnapshotCounter
argument_list|()
argument_list|)
operator|.
name|setNumSnapshots
argument_list|(
name|sm
operator|.
name|getNumSnapshots
argument_list|()
argument_list|)
decl_stmt|;
name|INodeDirectory
index|[]
name|snapshottables
init|=
name|sm
operator|.
name|getSnapshottableDirs
argument_list|()
decl_stmt|;
for|for
control|(
name|INodeDirectory
name|sdir
range|:
name|snapshottables
control|)
block|{
name|b
operator|.
name|addSnapshottableDir
argument_list|(
name|sdir
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|INodeDirectory
name|sdir
range|:
name|snapshottables
control|)
block|{
for|for
control|(
name|Snapshot
name|s
range|:
name|sdir
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
operator|.
name|getSnapshotList
argument_list|()
control|)
block|{
name|Root
name|sroot
init|=
name|s
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|SnapshotSection
operator|.
name|Snapshot
operator|.
name|Builder
name|sb
init|=
name|SnapshotSection
operator|.
name|Snapshot
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshotId
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|INodeSection
operator|.
name|INodeDirectory
operator|.
name|Builder
name|db
init|=
name|buildINodeDirectory
argument_list|(
name|sroot
argument_list|,
name|parent
operator|.
name|getSaverContext
argument_list|()
argument_list|)
decl_stmt|;
name|INodeSection
operator|.
name|INode
name|r
init|=
name|INodeSection
operator|.
name|INode
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|sroot
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|INodeSection
operator|.
name|INode
operator|.
name|Type
operator|.
name|DIRECTORY
argument_list|)
operator|.
name|setName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|sroot
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setDirectory
argument_list|(
name|db
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|sb
operator|.
name|setRoot
argument_list|(
name|r
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|%
name|FSImageFormatProtobuf
operator|.
name|Saver
operator|.
name|CHECK_CANCEL_INTERVAL
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|i
operator|==
name|sm
operator|.
name|getNumSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|commitSection
argument_list|(
name|headers
argument_list|,
name|FSImageFormatProtobuf
operator|.
name|SectionName
operator|.
name|SNAPSHOT
argument_list|)
expr_stmt|;
block|}
comment|/**      * This can only be called after serializing both INode_Dir and SnapshotDiff      */
DECL|method|serializeINodeReferenceSection (OutputStream out)
specifier|public
name|void
name|serializeINodeReferenceSection
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|INodeReference
argument_list|>
name|refList
init|=
name|parent
operator|.
name|getSaverContext
argument_list|()
operator|.
name|getRefList
argument_list|()
decl_stmt|;
for|for
control|(
name|INodeReference
name|ref
range|:
name|refList
control|)
block|{
name|INodeReferenceSection
operator|.
name|INodeReference
operator|.
name|Builder
name|rb
init|=
name|buildINodeReference
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|rb
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|commitSection
argument_list|(
name|headers
argument_list|,
name|SectionName
operator|.
name|INODE_REFERENCE
argument_list|)
expr_stmt|;
block|}
DECL|method|buildINodeReference ( INodeReference ref)
specifier|private
name|INodeReferenceSection
operator|.
name|INodeReference
operator|.
name|Builder
name|buildINodeReference
parameter_list|(
name|INodeReference
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeReferenceSection
operator|.
name|INodeReference
operator|.
name|Builder
name|rb
init|=
name|INodeReferenceSection
operator|.
name|INodeReference
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReferredId
argument_list|(
name|ref
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|WithName
condition|)
block|{
name|rb
operator|.
name|setLastSnapshotId
argument_list|(
operator|(
operator|(
name|WithName
operator|)
name|ref
operator|)
operator|.
name|getLastSnapshotId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|ref
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ref
operator|instanceof
name|DstReference
condition|)
block|{
name|rb
operator|.
name|setDstSnapshotId
argument_list|(
name|ref
operator|.
name|getDstSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rb
return|;
block|}
comment|/**      * save all the snapshot diff to fsimage      */
DECL|method|serializeSnapshotDiffSection (OutputStream out)
specifier|public
name|void
name|serializeSnapshotDiffSection
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeMap
name|inodesMap
init|=
name|fsn
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|getINodeMap
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|INodeReference
argument_list|>
name|refList
init|=
name|parent
operator|.
name|getSaverContext
argument_list|()
operator|.
name|getRefList
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|INodeWithAdditionalFields
argument_list|>
name|iter
init|=
name|inodesMap
operator|.
name|getMapIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|INodeWithAdditionalFields
name|inode
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|serializeFileDiffList
argument_list|(
name|inode
operator|.
name|asFile
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|serializeDirDiffList
argument_list|(
name|inode
operator|.
name|asDirectory
argument_list|()
argument_list|,
name|refList
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|%
name|FSImageFormatProtobuf
operator|.
name|Saver
operator|.
name|CHECK_CANCEL_INTERVAL
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
block|}
name|parent
operator|.
name|commitSection
argument_list|(
name|headers
argument_list|,
name|FSImageFormatProtobuf
operator|.
name|SectionName
operator|.
name|SNAPSHOT_DIFF
argument_list|)
expr_stmt|;
block|}
DECL|method|serializeFileDiffList (INodeFile file, OutputStream out)
specifier|private
name|void
name|serializeFileDiffList
parameter_list|(
name|INodeFile
name|file
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|FileWithSnapshotFeature
name|sf
init|=
name|file
operator|.
name|getFileWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|FileDiff
argument_list|>
name|diffList
init|=
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|SnapshotDiffSection
operator|.
name|DiffEntry
name|entry
init|=
name|SnapshotDiffSection
operator|.
name|DiffEntry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setInodeId
argument_list|(
name|file
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|FILEDIFF
argument_list|)
operator|.
name|setNumOfDiff
argument_list|(
name|diffList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|entry
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|diffList
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|FileDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SnapshotDiffSection
operator|.
name|FileDiff
operator|.
name|Builder
name|fb
init|=
name|SnapshotDiffSection
operator|.
name|FileDiff
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshotId
argument_list|(
name|diff
operator|.
name|getSnapshotId
argument_list|()
argument_list|)
operator|.
name|setFileSize
argument_list|(
name|diff
operator|.
name|getFileSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|getBlocks
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Block
name|block
range|:
name|diff
operator|.
name|getBlocks
argument_list|()
control|)
block|{
name|fb
operator|.
name|addBlocks
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|block
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|INodeFileAttributes
name|copy
init|=
name|diff
operator|.
name|snapshotINode
decl_stmt|;
if|if
condition|(
name|copy
operator|!=
literal|null
condition|)
block|{
name|fb
operator|.
name|setName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|copy
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSnapshotCopy
argument_list|(
name|buildINodeFile
argument_list|(
name|copy
argument_list|,
name|parent
operator|.
name|getSaverContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fb
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|saveCreatedList (List<INode> created, OutputStream out)
specifier|private
name|void
name|saveCreatedList
parameter_list|(
name|List
argument_list|<
name|INode
argument_list|>
name|created
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// local names of the created list member
for|for
control|(
name|INode
name|c
range|:
name|created
control|)
block|{
name|SnapshotDiffSection
operator|.
name|CreatedListEntry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|c
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|serializeDirDiffList (INodeDirectory dir, final List<INodeReference> refList, OutputStream out)
specifier|private
name|void
name|serializeDirDiffList
parameter_list|(
name|INodeDirectory
name|dir
parameter_list|,
specifier|final
name|List
argument_list|<
name|INodeReference
argument_list|>
name|refList
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|DirectoryWithSnapshotFeature
name|sf
init|=
name|dir
operator|.
name|getDirectoryWithSnapshotFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|DirectoryDiff
argument_list|>
name|diffList
init|=
name|sf
operator|.
name|getDiffs
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|SnapshotDiffSection
operator|.
name|DiffEntry
name|entry
init|=
name|SnapshotDiffSection
operator|.
name|DiffEntry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setInodeId
argument_list|(
name|dir
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|DIRECTORYDIFF
argument_list|)
operator|.
name|setNumOfDiff
argument_list|(
name|diffList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|entry
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|diffList
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// reverse order!
name|DirectoryDiff
name|diff
init|=
name|diffList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SnapshotDiffSection
operator|.
name|DirectoryDiff
operator|.
name|Builder
name|db
init|=
name|SnapshotDiffSection
operator|.
name|DirectoryDiff
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshotId
argument_list|(
name|diff
operator|.
name|getSnapshotId
argument_list|()
argument_list|)
operator|.
name|setChildrenSize
argument_list|(
name|diff
operator|.
name|getChildrenSize
argument_list|()
argument_list|)
operator|.
name|setIsSnapshotRoot
argument_list|(
name|diff
operator|.
name|isSnapshotRoot
argument_list|()
argument_list|)
decl_stmt|;
name|INodeDirectoryAttributes
name|copy
init|=
name|diff
operator|.
name|snapshotINode
decl_stmt|;
if|if
condition|(
operator|!
name|diff
operator|.
name|isSnapshotRoot
argument_list|()
operator|&&
name|copy
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|setName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|copy
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setSnapshotCopy
argument_list|(
name|buildINodeDirectory
argument_list|(
name|copy
argument_list|,
name|parent
operator|.
name|getSaverContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// process created list and deleted list
name|List
argument_list|<
name|INode
argument_list|>
name|created
init|=
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|CREATED
argument_list|)
decl_stmt|;
name|db
operator|.
name|setCreatedListSize
argument_list|(
name|created
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|INode
argument_list|>
name|deleted
init|=
name|diff
operator|.
name|getChildrenDiff
argument_list|()
operator|.
name|getList
argument_list|(
name|ListType
operator|.
name|DELETED
argument_list|)
decl_stmt|;
for|for
control|(
name|INode
name|d
range|:
name|deleted
control|)
block|{
if|if
condition|(
name|d
operator|.
name|isReference
argument_list|()
condition|)
block|{
name|refList
operator|.
name|add
argument_list|(
name|d
operator|.
name|asReference
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|addDeletedINodeRef
argument_list|(
name|refList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db
operator|.
name|addDeletedINode
argument_list|(
name|d
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|db
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|saveCreatedList
argument_list|(
name|created
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|FSImageFormatPBSnapshot ()
specifier|private
name|FSImageFormatPBSnapshot
parameter_list|()
block|{}
block|}
end_class

end_unit

