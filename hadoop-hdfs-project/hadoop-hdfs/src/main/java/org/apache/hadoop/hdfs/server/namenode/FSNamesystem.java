begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
operator|.
name|escapeJava
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_TRASH_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_TRASH_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_CALLER_CONTEXT_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_CALLER_CONTEXT_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_CALLER_CONTEXT_MAX_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_CALLER_CONTEXT_MAX_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_CALLER_CONTEXT_SIGNATURE_MAX_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_CALLER_CONTEXT_SIGNATURE_MAX_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_CHECKSUM_TYPE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|client
operator|.
name|HdfsClientConfigKeys
operator|.
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_ENCRYPT_DATA_TRANSFER_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_STANDBY_CHECKPOINTS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_HA_STANDBY_CHECKPOINTS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AUDIT_LOGGERS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AUDIT_LOG_ASYNC_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AUDIT_LOG_ASYNC_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AUDIT_LOG_TOKEN_TRACKING_ID_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AUDIT_LOG_TOKEN_TRACKING_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_TXNS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKPOINT_TXNS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_KEY_UPDATE_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_MAX_LIFETIME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_RENEW_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_REQUIRED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDIT_LOG_AUTOROLL_CHECK_INTERVAL_MS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDIT_LOG_AUTOROLL_CHECK_INTERVAL_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDIT_LOG_AUTOROLL_MULTIPLIER_THRESHOLD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDIT_LOG_AUTOROLL_MULTIPLIER_THRESHOLD_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ENABLE_RETRY_CACHE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_ENABLE_RETRY_CACHE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_INODE_ATTRIBUTES_PROVIDER_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_OBJECTS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_OBJECTS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RESOURCE_CHECK_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RESOURCE_CHECK_INTERVAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RETRY_CACHE_EXPIRYTIME_MILLIS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RETRY_CACHE_EXPIRYTIME_MILLIS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RETRY_CACHE_HEAP_PERCENT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RETRY_CACHE_HEAP_PERCENT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LEASE_RECHECK_INTERVAL_MS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LEASE_RECHECK_INTERVAL_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_LOCK_HOLD_TO_RELEASE_LEASE_MS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_LOCK_HOLD_TO_RELEASE_LEASE_MS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_SUPERUSERGROUP_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PERMISSIONS_SUPERUSERGROUP_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SNAPSHOT_DIFF_LISTING_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SNAPSHOT_DIFF_LISTING_LIMIT_DEFAULT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirStatAndListingOp
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|OpenFilesIterator
operator|.
name|OpenFilesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ReplicatedBlockStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ECBlockGroupStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|OpenFileEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ZoneReencryptionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReportListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotDiffReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|ReplicatedBlocksMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowDiskReports
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|now
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
operator|.
name|monotonicNow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|metrics
operator|.
name|TopMetrics
operator|.
name|TOPMETRICS_METRICS_SOURCE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|AddBlockFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BatchedRemoteIterator
operator|.
name|BatchedListEntries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CacheFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsServerDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|XAttrSetFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|QuotaUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|UnknownCryptoProtocolVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AddErasureCodingPolicyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|AlreadyBeingCreatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|BlockStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CacheDirectiveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CachePoolInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
operator|.
name|DatanodeInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DirectoryListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ErasureCodingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|EncryptionZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|DatanodeReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|ReencryptAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
operator|.
name|SafeModeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LastBlockWithStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RecoveryInProgressException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RollingUpgradeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|RollingUpgradeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshottableDirectoryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|datatransfer
operator|.
name|ReplaceDatanodeOnFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
operator|.
name|BlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenSecretManager
operator|.
name|SecretManagerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockUnderConstructionFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|BlockUCState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|NamenodeRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|RollingUpgradeStartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
operator|.
name|StartupOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirEncryptionZoneOp
operator|.
name|EncryptionKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSDirectory
operator|.
name|DirOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SecretManagerSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INode
operator|.
name|BlocksMapUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|JournalSet
operator|.
name|JournalAndStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
operator|.
name|Lease
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNode
operator|.
name|OperationCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeLayoutVersion
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|EditLogTailer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|HAContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|ha
operator|.
name|StandbyCheckpointer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|ECBlockGroupsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|FSNamesystemMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|metrics
operator|.
name|NameNodeMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectorySnapshottableFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StartupProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|Step
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|startupprogress
operator|.
name|StepType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|TopAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|TopConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|metrics
operator|.
name|TopMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|top
operator|.
name|window
operator|.
name|RollingWindowManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|BlocksWithLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeStorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|HeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NNHAStatusHeartbeat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamenodeRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|SlowPeerReports
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReceivedDeletedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|VolumeFailureSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|LightWeightHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|web
operator|.
name|JsonUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|CallerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|StandbyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableRatesWithAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DataChecksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AsyncAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * FSNamesystem is a container of both transient  * and persisted name-space state, and does all the book-keeping  * work on a NameNode.  *  * Its roles are briefly described below:  *  * 1) Is the container for BlockManager, DatanodeManager,  *    DelegationTokens, LeaseManager, etc. services.  * 2) RPC calls that modify or inspect the name-space  *    should get delegated here.  * 3) Anything that touches only blocks (eg. block reports),  *    it delegates to BlockManager.  * 4) Anything that touches only file information (eg. permissions, mkdirs),  *    it delegates to FSDirectory.  * 5) Anything that crosses two of the above components should be  *    coordinated here.  * 6) Logs mutations to FSEditLog.  *  * This class and its contents keep:  *  * 1)  Valid fsname --> blocklist  (kept on disk, logged)  * 2)  Set of all valid blocks (inverted #1)  * 3)  block --> machinelist (kept in memory, rebuilt dynamically from reports)  * 4)  machine --> blocklist (inverted #2)  * 5)  LRU cache of updated-heartbeat machines  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Metrics
argument_list|(
name|context
operator|=
literal|"dfs"
argument_list|)
DECL|class|FSNamesystem
specifier|public
class|class
name|FSNamesystem
implements|implements
name|Namesystem
implements|,
name|FSNamesystemMBean
implements|,
name|NameNodeMXBean
implements|,
name|ReplicatedBlocksMBean
implements|,
name|ECBlockGroupsMBean
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSNamesystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|registry
specifier|private
specifier|final
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|(
literal|"FSNamesystem"
argument_list|)
decl_stmt|;
DECL|field|detailedLockHoldTimeMetrics
annotation|@
name|Metric
specifier|final
name|MutableRatesWithAggregation
name|detailedLockHoldTimeMetrics
init|=
name|registry
operator|.
name|newRatesWithAggregation
argument_list|(
literal|"detailedLockHoldTimeMetrics"
argument_list|)
decl_stmt|;
DECL|method|isAuditEnabled ()
name|boolean
name|isAuditEnabled
parameter_list|()
block|{
return|return
operator|(
operator|!
name|isDefaultAuditLogger
operator|||
name|auditLog
operator|.
name|isInfoEnabled
argument_list|()
operator|)
operator|&&
operator|!
name|auditLoggers
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|logAuditEvent (boolean succeeded, String cmd, String src)
name|void
name|logAuditEvent
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|logAuditEvent
argument_list|(
name|succeeded
argument_list|,
name|cmd
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|logAuditEvent (boolean succeeded, String cmd, String src, String dst, FileStatus stat)
specifier|private
name|void
name|logAuditEvent
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|FileStatus
name|stat
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAuditEnabled
argument_list|()
operator|&&
name|isExternalInvocation
argument_list|()
condition|)
block|{
name|logAuditEvent
argument_list|(
name|succeeded
argument_list|,
name|Server
operator|.
name|getRemoteUser
argument_list|()
argument_list|,
name|Server
operator|.
name|getRemoteIp
argument_list|()
argument_list|,
name|cmd
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logAuditEvent (boolean succeeded, String cmd, String src, HdfsFileStatus stat)
specifier|private
name|void
name|logAuditEvent
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|src
parameter_list|,
name|HdfsFileStatus
name|stat
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isAuditEnabled
argument_list|()
operator|||
operator|!
name|isExternalInvocation
argument_list|()
condition|)
block|{
return|return;
block|}
name|FileStatus
name|status
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
name|Path
name|symlink
init|=
name|stat
operator|.
name|isSymlink
argument_list|()
condition|?
operator|new
name|Path
argument_list|(
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|stat
operator|.
name|getSymlinkInBytes
argument_list|()
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|status
operator|=
operator|new
name|FileStatus
argument_list|(
name|stat
operator|.
name|getLen
argument_list|()
argument_list|,
name|stat
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|stat
operator|.
name|getReplication
argument_list|()
argument_list|,
name|stat
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|stat
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|stat
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|stat
operator|.
name|getPermission
argument_list|()
argument_list|,
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|,
name|stat
operator|.
name|getGroup
argument_list|()
argument_list|,
name|symlink
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|succeeded
argument_list|,
name|cmd
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|logAuditEvent (boolean succeeded, UserGroupInformation ugi, InetAddress addr, String cmd, String src, String dst, FileStatus status)
specifier|private
name|void
name|logAuditEvent
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|InetAddress
name|addr
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|FileStatus
name|status
parameter_list|)
block|{
specifier|final
name|String
name|ugiStr
init|=
name|ugi
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|AuditLogger
name|logger
range|:
name|auditLoggers
control|)
block|{
if|if
condition|(
name|logger
operator|instanceof
name|HdfsAuditLogger
condition|)
block|{
name|HdfsAuditLogger
name|hdfsLogger
init|=
operator|(
name|HdfsAuditLogger
operator|)
name|logger
decl_stmt|;
name|hdfsLogger
operator|.
name|logAuditEvent
argument_list|(
name|succeeded
argument_list|,
name|ugiStr
argument_list|,
name|addr
argument_list|,
name|cmd
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|status
argument_list|,
name|CallerContext
operator|.
name|getCurrent
argument_list|()
argument_list|,
name|ugi
argument_list|,
name|dtSecretManager
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|logAuditEvent
argument_list|(
name|succeeded
argument_list|,
name|ugiStr
argument_list|,
name|addr
argument_list|,
name|cmd
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Logger for audit events, noting successful FSNamesystem operations. Emits    * to FSNamesystem.audit at INFO. Each event causes a set of tab-separated    *<code>key=value</code> pairs to be written for the following properties:    *<code>    * ugi=&lt;ugi in RPC&gt;    * ip=&lt;remote IP&gt;    * cmd=&lt;command&gt;    * src=&lt;src path&gt;    * dst=&lt;dst path (optional)&gt;    * perm=&lt;permissions (optional)&gt;    *</code>    */
DECL|field|auditLog
specifier|public
specifier|static
specifier|final
name|Log
name|auditLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSNamesystem
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".audit"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_MAX_CORRUPT_FILEBLOCKS_RETURNED
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_CORRUPT_FILEBLOCKS_RETURNED
init|=
literal|100
decl_stmt|;
DECL|field|BLOCK_DELETION_INCREMENT
specifier|static
name|int
name|BLOCK_DELETION_INCREMENT
init|=
literal|1000
decl_stmt|;
DECL|field|isPermissionEnabled
specifier|private
specifier|final
name|boolean
name|isPermissionEnabled
decl_stmt|;
DECL|field|fsOwner
specifier|private
specifier|final
name|UserGroupInformation
name|fsOwner
decl_stmt|;
DECL|field|supergroup
specifier|private
specifier|final
name|String
name|supergroup
decl_stmt|;
DECL|field|standbyShouldCheckpoint
specifier|private
specifier|final
name|boolean
name|standbyShouldCheckpoint
decl_stmt|;
DECL|field|snapshotDiffReportLimit
specifier|private
specifier|final
name|int
name|snapshotDiffReportLimit
decl_stmt|;
comment|/** Interval between each check of lease to release. */
DECL|field|leaseRecheckIntervalMs
specifier|private
specifier|final
name|long
name|leaseRecheckIntervalMs
decl_stmt|;
comment|/** Maximum time the lock is hold to release lease. */
DECL|field|maxLockHoldToReleaseLeaseMs
specifier|private
specifier|final
name|long
name|maxLockHoldToReleaseLeaseMs
decl_stmt|;
comment|// Batch size for open files response
DECL|field|maxListOpenFilesResponses
specifier|private
specifier|final
name|int
name|maxListOpenFilesResponses
decl_stmt|;
comment|// Scan interval is not configurable.
DECL|field|DELEGATION_TOKEN_REMOVER_SCAN_INTERVAL
specifier|private
specifier|static
specifier|final
name|long
name|DELEGATION_TOKEN_REMOVER_SCAN_INTERVAL
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
DECL|field|dtSecretManager
specifier|final
name|DelegationTokenSecretManager
name|dtSecretManager
decl_stmt|;
DECL|field|alwaysUseDelegationTokensForTests
specifier|private
specifier|final
name|boolean
name|alwaysUseDelegationTokensForTests
decl_stmt|;
DECL|field|STEP_AWAITING_REPORTED_BLOCKS
specifier|private
specifier|static
specifier|final
name|Step
name|STEP_AWAITING_REPORTED_BLOCKS
init|=
operator|new
name|Step
argument_list|(
name|StepType
operator|.
name|AWAITING_REPORTED_BLOCKS
argument_list|)
decl_stmt|;
comment|// Tracks whether the default audit logger is the only configured audit
comment|// logger; this allows isAuditEnabled() to return false in case the
comment|// underlying logger is disabled, and avoid some unnecessary work.
DECL|field|isDefaultAuditLogger
specifier|private
specifier|final
name|boolean
name|isDefaultAuditLogger
decl_stmt|;
DECL|field|auditLoggers
specifier|private
specifier|final
name|List
argument_list|<
name|AuditLogger
argument_list|>
name|auditLoggers
decl_stmt|;
comment|/** The namespace tree. */
DECL|field|dir
name|FSDirectory
name|dir
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|final
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|snapshotManager
specifier|private
specifier|final
name|SnapshotManager
name|snapshotManager
decl_stmt|;
DECL|field|cacheManager
specifier|private
specifier|final
name|CacheManager
name|cacheManager
decl_stmt|;
DECL|field|datanodeStatistics
specifier|private
specifier|final
name|DatanodeStatistics
name|datanodeStatistics
decl_stmt|;
DECL|field|nameserviceId
specifier|private
name|String
name|nameserviceId
decl_stmt|;
DECL|field|rollingUpgradeInfo
specifier|private
specifier|volatile
name|RollingUpgradeInfo
name|rollingUpgradeInfo
init|=
literal|null
decl_stmt|;
comment|/**    * A flag that indicates whether the checkpointer should checkpoint a rollback    * fsimage. The edit log tailer sets this flag. The checkpoint will create a    * rollback fsimage if the flag is true, and then change the flag to false.    */
DECL|field|needRollbackFsImage
specifier|private
specifier|volatile
name|boolean
name|needRollbackFsImage
decl_stmt|;
DECL|field|leaseManager
specifier|final
name|LeaseManager
name|leaseManager
init|=
operator|new
name|LeaseManager
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|nnrmthread
name|Daemon
name|nnrmthread
init|=
literal|null
decl_stmt|;
comment|// NamenodeResourceMonitor thread
DECL|field|nnEditLogRoller
name|Daemon
name|nnEditLogRoller
init|=
literal|null
decl_stmt|;
comment|// NameNodeEditLogRoller thread
comment|// A daemon to periodically clean up corrupt lazyPersist files
comment|// from the name space.
DECL|field|lazyPersistFileScrubber
name|Daemon
name|lazyPersistFileScrubber
init|=
literal|null
decl_stmt|;
comment|// Executor to warm up EDEK cache
DECL|field|edekCacheLoader
specifier|private
name|ExecutorService
name|edekCacheLoader
init|=
literal|null
decl_stmt|;
DECL|field|edekCacheLoaderDelay
specifier|private
specifier|final
name|int
name|edekCacheLoaderDelay
decl_stmt|;
DECL|field|edekCacheLoaderInterval
specifier|private
specifier|final
name|int
name|edekCacheLoaderInterval
decl_stmt|;
comment|/**    * When an active namenode will roll its own edit log, in # edits    */
DECL|field|editLogRollerThreshold
specifier|private
specifier|final
name|long
name|editLogRollerThreshold
decl_stmt|;
comment|/**    * Check interval of an active namenode's edit log roller thread     */
DECL|field|editLogRollerInterval
specifier|private
specifier|final
name|int
name|editLogRollerInterval
decl_stmt|;
comment|/**    * How frequently we scan and unlink corrupt lazyPersist files.    * (In seconds)    */
DECL|field|lazyPersistFileScrubIntervalSec
specifier|private
specifier|final
name|int
name|lazyPersistFileScrubIntervalSec
decl_stmt|;
DECL|field|hasResourcesAvailable
specifier|private
specifier|volatile
name|boolean
name|hasResourcesAvailable
init|=
literal|false
decl_stmt|;
DECL|field|fsRunning
specifier|private
specifier|volatile
name|boolean
name|fsRunning
init|=
literal|true
decl_stmt|;
comment|/** The start time of the namesystem. */
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
init|=
name|now
argument_list|()
decl_stmt|;
comment|/** The interval of namenode checking for the disk space availability */
DECL|field|resourceRecheckInterval
specifier|private
specifier|final
name|long
name|resourceRecheckInterval
decl_stmt|;
comment|// The actual resource checker instance.
DECL|field|nnResourceChecker
name|NameNodeResourceChecker
name|nnResourceChecker
decl_stmt|;
DECL|field|serverDefaults
specifier|private
specifier|final
name|FsServerDefaults
name|serverDefaults
decl_stmt|;
DECL|field|dtpReplaceDatanodeOnFailure
specifier|private
specifier|final
name|ReplaceDatanodeOnFailure
name|dtpReplaceDatanodeOnFailure
decl_stmt|;
DECL|field|maxFsObjects
specifier|private
specifier|final
name|long
name|maxFsObjects
decl_stmt|;
comment|// maximum number of fs objects
DECL|field|minBlockSize
specifier|private
specifier|final
name|long
name|minBlockSize
decl_stmt|;
comment|// minimum block size
DECL|field|maxBlocksPerFile
specifier|final
name|long
name|maxBlocksPerFile
decl_stmt|;
comment|// maximum # of blocks per file
DECL|field|numCommittedAllowed
specifier|private
specifier|final
name|int
name|numCommittedAllowed
decl_stmt|;
comment|/** Lock to protect FSNamesystem. */
DECL|field|fsLock
specifier|private
specifier|final
name|FSNamesystemLock
name|fsLock
decl_stmt|;
comment|/**     * Checkpoint lock to protect FSNamesystem modification on standby NNs.    * Unlike fsLock, it does not affect block updates. On active NNs, this lock    * does not provide proper protection, because there are operations that    * modify both block and name system state.  Even on standby, fsLock is     * used when block state changes need to be blocked.    */
DECL|field|cpLock
specifier|private
specifier|final
name|ReentrantLock
name|cpLock
decl_stmt|;
comment|/**    * Used when this NN is in standby state to read from the shared edit log.    */
DECL|field|editLogTailer
specifier|private
name|EditLogTailer
name|editLogTailer
init|=
literal|null
decl_stmt|;
comment|/**    * Used when this NN is in standby state to perform checkpoints.    */
DECL|field|standbyCheckpointer
specifier|private
name|StandbyCheckpointer
name|standbyCheckpointer
decl_stmt|;
comment|/**    * Reference to the NN's HAContext object. This is only set once    * {@link #startCommonServices(Configuration, HAContext)} is called.     */
DECL|field|haContext
specifier|private
name|HAContext
name|haContext
decl_stmt|;
DECL|field|haEnabled
specifier|private
specifier|final
name|boolean
name|haEnabled
decl_stmt|;
comment|/**    * Whether the namenode is in the middle of starting the active service    */
DECL|field|startingActiveService
specifier|private
specifier|volatile
name|boolean
name|startingActiveService
init|=
literal|false
decl_stmt|;
DECL|field|retryCache
specifier|private
specifier|final
name|RetryCache
name|retryCache
decl_stmt|;
DECL|field|provider
specifier|private
name|KeyProviderCryptoExtension
name|provider
init|=
literal|null
decl_stmt|;
DECL|field|imageLoaded
specifier|private
specifier|volatile
name|boolean
name|imageLoaded
init|=
literal|false
decl_stmt|;
DECL|field|cond
specifier|private
specifier|final
name|Condition
name|cond
decl_stmt|;
DECL|field|fsImage
specifier|private
specifier|final
name|FSImage
name|fsImage
decl_stmt|;
DECL|field|topConf
specifier|private
specifier|final
name|TopConf
name|topConf
decl_stmt|;
DECL|field|topMetrics
specifier|private
name|TopMetrics
name|topMetrics
decl_stmt|;
DECL|field|inodeAttributeProvider
specifier|private
name|INodeAttributeProvider
name|inodeAttributeProvider
decl_stmt|;
comment|/**    * If the NN is in safemode, and not due to manual / low resources, we    * assume it must be because of startup. If the NN had low resources during    * startup, we assume it came out of startup safemode and it is now in low    * resources safemode.    */
DECL|field|manualSafeMode
specifier|private
name|boolean
name|manualSafeMode
init|=
literal|false
decl_stmt|;
DECL|field|resourceLowSafeMode
specifier|private
name|boolean
name|resourceLowSafeMode
init|=
literal|false
decl_stmt|;
DECL|field|nameNodeHostName
specifier|private
name|String
name|nameNodeHostName
init|=
literal|null
decl_stmt|;
comment|/**    * Notify that loading of this FSDirectory is complete, and    * it is imageLoaded for use    */
DECL|method|imageLoadComplete ()
name|void
name|imageLoadComplete
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|imageLoaded
argument_list|,
literal|"FSDirectory already loaded"
argument_list|)
expr_stmt|;
name|setImageLoaded
argument_list|()
expr_stmt|;
block|}
DECL|method|setImageLoaded ()
name|void
name|setImageLoaded
parameter_list|()
block|{
if|if
condition|(
name|imageLoaded
condition|)
return|return;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|setImageLoaded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dir
operator|.
name|markNameCacheInitialized
argument_list|()
expr_stmt|;
name|cond
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"setImageLoaded"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//This is for testing purposes only
annotation|@
name|VisibleForTesting
DECL|method|isImageLoaded ()
name|boolean
name|isImageLoaded
parameter_list|()
block|{
return|return
name|imageLoaded
return|;
block|}
comment|// exposed for unit tests
DECL|method|setImageLoaded (boolean flag)
specifier|protected
name|void
name|setImageLoaded
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|imageLoaded
operator|=
name|flag
expr_stmt|;
block|}
comment|/**    * Clear all loaded data    */
DECL|method|clear ()
name|void
name|clear
parameter_list|()
block|{
name|dir
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dtSecretManager
operator|.
name|reset
argument_list|()
expr_stmt|;
name|leaseManager
operator|.
name|removeAllLeases
argument_list|()
expr_stmt|;
name|snapshotManager
operator|.
name|clearSnapshottableDirs
argument_list|()
expr_stmt|;
name|cacheManager
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setImageLoaded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ErasureCodingPolicyManager
operator|.
name|getInstance
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLeaseManager ()
name|LeaseManager
name|getLeaseManager
parameter_list|()
block|{
return|return
name|leaseManager
return|;
block|}
DECL|method|isHaEnabled ()
specifier|public
name|boolean
name|isHaEnabled
parameter_list|()
block|{
return|return
name|haEnabled
return|;
block|}
comment|/**    * Check the supplied configuration for correctness.    * @param conf Supplies the configuration to validate.    * @throws IOException if the configuration could not be queried.    * @throws IllegalArgumentException if the configuration is invalid.    */
DECL|method|checkConfiguration (Configuration conf)
specifier|private
specifier|static
name|void
name|checkConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Collection
argument_list|<
name|URI
argument_list|>
name|namespaceDirs
init|=
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|URI
argument_list|>
name|editsDirs
init|=
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|URI
argument_list|>
name|requiredEditsDirs
init|=
name|FSNamesystem
operator|.
name|getRequiredNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|URI
argument_list|>
name|sharedEditsDirs
init|=
name|FSNamesystem
operator|.
name|getSharedEditsDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|u
range|:
name|requiredEditsDirs
control|)
block|{
if|if
condition|(
name|u
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_DEFAULT
argument_list|)
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
comment|// Each required directory must also be in editsDirs or in
comment|// sharedEditsDirs.
if|if
condition|(
operator|!
name|editsDirs
operator|.
name|contains
argument_list|(
name|u
argument_list|)
operator|&&
operator|!
name|sharedEditsDirs
operator|.
name|contains
argument_list|(
name|u
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Required edits directory "
operator|+
name|u
operator|+
literal|" not found: "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_KEY
operator|+
literal|"="
operator|+
name|editsDirs
operator|+
literal|"; "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_REQUIRED_KEY
operator|+
literal|"="
operator|+
name|requiredEditsDirs
operator|+
literal|"; "
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
operator|+
literal|"="
operator|+
name|sharedEditsDirs
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|namespaceDirs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Only one image storage directory ("
operator|+
name|DFS_NAMENODE_NAME_DIR_KEY
operator|+
literal|") configured. Beware of data loss"
operator|+
literal|" due to lack of redundant storage directories!"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|editsDirs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Only one namespace edits storage directory ("
operator|+
name|DFS_NAMENODE_EDITS_DIR_KEY
operator|+
literal|") configured. Beware of data loss"
operator|+
literal|" due to lack of redundant storage directories!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Instantiates an FSNamesystem loaded from the image and edits    * directories specified in the passed Configuration.    *    * @param conf the Configuration which specifies the storage directories    *             from which to load    * @return an FSNamesystem which contains the loaded namespace    * @throws IOException if loading fails    */
DECL|method|loadFromDisk (Configuration conf)
specifier|static
name|FSNamesystem
name|loadFromDisk
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|checkConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FSImage
name|fsImage
init|=
operator|new
name|FSImage
argument_list|(
name|conf
argument_list|,
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|,
name|FSNamesystem
operator|.
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|FSNamesystem
name|namesystem
init|=
operator|new
name|FSNamesystem
argument_list|(
name|conf
argument_list|,
name|fsImage
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|StartupOption
name|startOpt
init|=
name|NameNode
operator|.
name|getStartupOption
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|startOpt
operator|==
name|StartupOption
operator|.
name|RECOVER
condition|)
block|{
name|namesystem
operator|.
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
block|}
name|long
name|loadStart
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
try|try
block|{
name|namesystem
operator|.
name|loadFSImage
argument_list|(
name|startOpt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception loading fsimage"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|fsImage
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
name|long
name|timeTakenToLoadFSImage
init|=
name|monotonicNow
argument_list|()
operator|-
name|loadStart
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished loading FSImage in "
operator|+
name|timeTakenToLoadFSImage
operator|+
literal|" msecs"
argument_list|)
expr_stmt|;
name|NameNodeMetrics
name|nnMetrics
init|=
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|nnMetrics
operator|!=
literal|null
condition|)
block|{
name|nnMetrics
operator|.
name|setFsImageLoadTime
argument_list|(
operator|(
name|int
operator|)
name|timeTakenToLoadFSImage
argument_list|)
expr_stmt|;
block|}
name|namesystem
operator|.
name|getFSDirectory
argument_list|()
operator|.
name|createReservedStatuses
argument_list|(
name|namesystem
operator|.
name|getCTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|namesystem
return|;
block|}
DECL|method|FSNamesystem (Configuration conf, FSImage fsImage)
name|FSNamesystem
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSImage
name|fsImage
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|fsImage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an FSNamesystem associated with the specified image.    *     * Note that this does not load any data off of disk -- if you would    * like that behavior, use {@link #loadFromDisk(Configuration)}    *    * @param conf configuration    * @param fsImage The FSImage to associate with    * @param ignoreRetryCache Whether or not should ignore the retry cache setup    *                         step. For Secondary NN this should be set to true.    * @throws IOException on bad configuration    */
DECL|method|FSNamesystem (Configuration conf, FSImage fsImage, boolean ignoreRetryCache)
name|FSNamesystem
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSImage
name|fsImage
parameter_list|,
name|boolean
name|ignoreRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|provider
operator|=
name|DFSUtil
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"KeyProvider: "
operator|+
name|provider
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_NAMENODE_AUDIT_LOG_ASYNC_KEY
argument_list|,
name|DFS_NAMENODE_AUDIT_LOG_ASYNC_DEFAULT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Enabling async auditlog"
argument_list|)
expr_stmt|;
name|enableAsyncAuditLog
argument_list|()
expr_stmt|;
block|}
name|fsLock
operator|=
operator|new
name|FSNamesystemLock
argument_list|(
name|conf
argument_list|,
name|detailedLockHoldTimeMetrics
argument_list|)
expr_stmt|;
name|cond
operator|=
name|fsLock
operator|.
name|newWriteLockCondition
argument_list|()
expr_stmt|;
name|cpLock
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|fsImage
operator|=
name|fsImage
expr_stmt|;
try|try
block|{
name|resourceRecheckInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_RESOURCE_CHECK_INTERVAL_KEY
argument_list|,
name|DFS_NAMENODE_RESOURCE_CHECK_INTERVAL_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsOwner
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|supergroup
operator|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_PERMISSIONS_SUPERUSERGROUP_KEY
argument_list|,
name|DFS_PERMISSIONS_SUPERUSERGROUP_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|isPermissionEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_PERMISSIONS_ENABLED_KEY
argument_list|,
name|DFS_PERMISSIONS_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotDiffReportLimit
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_SNAPSHOT_DIFF_LISTING_LIMIT
argument_list|,
name|DFS_NAMENODE_SNAPSHOT_DIFF_LISTING_LIMIT_DEFAULT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fsOwner             = "
operator|+
name|fsOwner
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"supergroup          = "
operator|+
name|supergroup
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"isPermissionEnabled = "
operator|+
name|isPermissionEnabled
argument_list|)
expr_stmt|;
comment|// block allocation has to be persisted in HA using a shared edits directory
comment|// so that the standby has up-to-date namespace information
name|nameserviceId
operator|=
name|DFSUtil
operator|.
name|getNamenodeNameServiceId
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|haEnabled
operator|=
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|,
name|nameserviceId
argument_list|)
expr_stmt|;
comment|// Sanity check the HA-related config.
if|if
condition|(
name|nameserviceId
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Determined nameservice ID: "
operator|+
name|nameserviceId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"HA Enabled: "
operator|+
name|haEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|haEnabled
operator|&&
name|HAUtil
operator|.
name|usesSharedEditsDir
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configured NNs:\n"
operator|+
name|DFSUtil
operator|.
name|nnAddressesAsString
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid configuration: a shared edits dir "
operator|+
literal|"must not be specified if HA is not enabled."
argument_list|)
throw|;
block|}
comment|// block manager needs the haEnabled initialized
name|this
operator|.
name|blockManager
operator|=
operator|new
name|BlockManager
argument_list|(
name|this
argument_list|,
name|haEnabled
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|datanodeStatistics
operator|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeStatistics
argument_list|()
expr_stmt|;
comment|// Get the checksum type from config
name|String
name|checksumTypeStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_CHECKSUM_TYPE_KEY
argument_list|,
name|DFS_CHECKSUM_TYPE_DEFAULT
argument_list|)
decl_stmt|;
name|DataChecksum
operator|.
name|Type
name|checksumType
decl_stmt|;
try|try
block|{
name|checksumType
operator|=
name|DataChecksum
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|checksumTypeStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid checksum type in "
operator|+
name|DFS_CHECKSUM_TYPE_KEY
operator|+
literal|": "
operator|+
name|checksumTypeStr
argument_list|)
throw|;
block|}
name|this
operator|.
name|serverDefaults
operator|=
operator|new
name|FsServerDefaults
argument_list|(
name|conf
operator|.
name|getLongBytes
argument_list|(
name|DFS_BLOCK_SIZE_KEY
argument_list|,
name|DFS_BLOCK_SIZE_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
name|DFS_BYTES_PER_CHECKSUM_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_CLIENT_WRITE_PACKET_SIZE_KEY
argument_list|,
name|DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_REPLICATION_KEY
argument_list|,
name|DFS_REPLICATION_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_ENCRYPT_DATA_TRANSFER_KEY
argument_list|,
name|DFS_ENCRYPT_DATA_TRANSFER_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|FS_TRASH_INTERVAL_KEY
argument_list|,
name|FS_TRASH_INTERVAL_DEFAULT
argument_list|)
argument_list|,
name|checksumType
argument_list|,
name|conf
operator|.
name|getTrimmed
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
literal|""
argument_list|)
argument_list|,
name|blockManager
operator|.
name|getStoragePolicySuite
argument_list|()
operator|.
name|getDefaultPolicy
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxFsObjects
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_MAX_OBJECTS_KEY
argument_list|,
name|DFS_NAMENODE_MAX_OBJECTS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|minBlockSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_BLOCK_SIZE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_BLOCK_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxBlocksPerFile
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_BLOCKS_PER_FILE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MAX_BLOCKS_PER_FILE_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|numCommittedAllowed
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_FILE_CLOSE_NUM_COMMITTED_ALLOWED_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_FILE_CLOSE_NUM_COMMITTED_ALLOWED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|dtpReplaceDatanodeOnFailure
operator|=
name|ReplaceDatanodeOnFailure
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|standbyShouldCheckpoint
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_HA_STANDBY_CHECKPOINTS_KEY
argument_list|,
name|DFS_HA_STANDBY_CHECKPOINTS_DEFAULT
argument_list|)
expr_stmt|;
comment|// # edit autoroll threshold is a multiple of the checkpoint threshold
name|this
operator|.
name|editLogRollerThreshold
operator|=
call|(
name|long
call|)
argument_list|(
name|conf
operator|.
name|getFloat
argument_list|(
name|DFS_NAMENODE_EDIT_LOG_AUTOROLL_MULTIPLIER_THRESHOLD
argument_list|,
name|DFS_NAMENODE_EDIT_LOG_AUTOROLL_MULTIPLIER_THRESHOLD_DEFAULT
argument_list|)
operator|*
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_CHECKPOINT_TXNS_KEY
argument_list|,
name|DFS_NAMENODE_CHECKPOINT_TXNS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|editLogRollerInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_EDIT_LOG_AUTOROLL_CHECK_INTERVAL_MS
argument_list|,
name|DFS_NAMENODE_EDIT_LOG_AUTOROLL_CHECK_INTERVAL_MS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|lazyPersistFileScrubIntervalSec
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC
argument_list|,
name|DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|lazyPersistFileScrubIntervalSec
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC
operator|+
literal|" must be zero (for disable) or greater than zero."
argument_list|)
throw|;
block|}
name|this
operator|.
name|edekCacheLoaderDelay
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDEKCACHELOADER_INITIAL_DELAY_MS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDEKCACHELOADER_INITIAL_DELAY_MS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|edekCacheLoaderInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDEKCACHELOADER_INTERVAL_MS_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDEKCACHELOADER_INTERVAL_MS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|leaseRecheckIntervalMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_LEASE_RECHECK_INTERVAL_MS_KEY
argument_list|,
name|DFS_NAMENODE_LEASE_RECHECK_INTERVAL_MS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxLockHoldToReleaseLeaseMs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_MAX_LOCK_HOLD_TO_RELEASE_LEASE_MS_KEY
argument_list|,
name|DFS_NAMENODE_MAX_LOCK_HOLD_TO_RELEASE_LEASE_MS_DEFAULT
argument_list|)
expr_stmt|;
comment|// For testing purposes, allow the DT secret manager to be started regardless
comment|// of whether security is enabled.
name|alwaysUseDelegationTokensForTests
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY
argument_list|,
name|DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|dtSecretManager
operator|=
name|createDelegationTokenSecretManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|dir
operator|=
operator|new
name|FSDirectory
argument_list|(
name|this
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotManager
operator|=
operator|new
name|SnapshotManager
argument_list|(
name|conf
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheManager
operator|=
operator|new
name|CacheManager
argument_list|(
name|this
argument_list|,
name|conf
argument_list|,
name|blockManager
argument_list|)
expr_stmt|;
comment|// Init ErasureCodingPolicyManager instance.
name|ErasureCodingPolicyManager
operator|.
name|getInstance
argument_list|()
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|topConf
operator|=
operator|new
name|TopConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|auditLoggers
operator|=
name|initAuditLoggers
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|isDefaultAuditLogger
operator|=
name|auditLoggers
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|auditLoggers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|DefaultAuditLogger
expr_stmt|;
name|this
operator|.
name|retryCache
operator|=
name|ignoreRetryCache
condition|?
literal|null
else|:
name|initRetryCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|INodeAttributeProvider
argument_list|>
name|klass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFS_NAMENODE_INODE_ATTRIBUTES_PROVIDER_KEY
argument_list|,
literal|null
argument_list|,
name|INodeAttributeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|klass
operator|!=
literal|null
condition|)
block|{
name|inodeAttributeProvider
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|klass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using INode attribute provider: "
operator|+
name|klass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|maxListOpenFilesResponses
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_OPENFILES_NUM_RESPONSES
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_OPENFILES_NUM_RESPONSES_DEFAULT
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|maxListOpenFilesResponses
operator|>
literal|0
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_LIST_OPENFILES_NUM_RESPONSES
operator|+
literal|" must be a positive integer."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" initialization failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" initialization failed."
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
throw|throw
name|re
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAuditLoggers ()
specifier|public
name|List
argument_list|<
name|AuditLogger
argument_list|>
name|getAuditLoggers
parameter_list|()
block|{
return|return
name|auditLoggers
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRetryCache ()
specifier|public
name|RetryCache
name|getRetryCache
parameter_list|()
block|{
return|return
name|retryCache
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getLeaseRecheckIntervalMs ()
specifier|public
name|long
name|getLeaseRecheckIntervalMs
parameter_list|()
block|{
return|return
name|leaseRecheckIntervalMs
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getMaxLockHoldToReleaseLeaseMs ()
specifier|public
name|long
name|getMaxLockHoldToReleaseLeaseMs
parameter_list|()
block|{
return|return
name|maxLockHoldToReleaseLeaseMs
return|;
block|}
DECL|method|getMaxListOpenFilesResponses ()
specifier|public
name|int
name|getMaxListOpenFilesResponses
parameter_list|()
block|{
return|return
name|maxListOpenFilesResponses
return|;
block|}
DECL|method|lockRetryCache ()
name|void
name|lockRetryCache
parameter_list|()
block|{
if|if
condition|(
name|retryCache
operator|!=
literal|null
condition|)
block|{
name|retryCache
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|unlockRetryCache ()
name|void
name|unlockRetryCache
parameter_list|()
block|{
if|if
condition|(
name|retryCache
operator|!=
literal|null
condition|)
block|{
name|retryCache
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Whether or not retry cache is enabled */
DECL|method|hasRetryCache ()
name|boolean
name|hasRetryCache
parameter_list|()
block|{
return|return
name|retryCache
operator|!=
literal|null
return|;
block|}
DECL|method|addCacheEntryWithPayload (byte[] clientId, int callId, Object payload)
name|void
name|addCacheEntryWithPayload
parameter_list|(
name|byte
index|[]
name|clientId
parameter_list|,
name|int
name|callId
parameter_list|,
name|Object
name|payload
parameter_list|)
block|{
if|if
condition|(
name|retryCache
operator|!=
literal|null
condition|)
block|{
name|retryCache
operator|.
name|addCacheEntryWithPayload
argument_list|(
name|clientId
argument_list|,
name|callId
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addCacheEntry (byte[] clientId, int callId)
name|void
name|addCacheEntry
parameter_list|(
name|byte
index|[]
name|clientId
parameter_list|,
name|int
name|callId
parameter_list|)
block|{
if|if
condition|(
name|retryCache
operator|!=
literal|null
condition|)
block|{
name|retryCache
operator|.
name|addCacheEntry
argument_list|(
name|clientId
argument_list|,
name|callId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getProvider ()
specifier|public
name|KeyProviderCryptoExtension
name|getProvider
parameter_list|()
block|{
return|return
name|provider
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|initRetryCache (Configuration conf)
specifier|static
name|RetryCache
name|initRetryCache
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|enable
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_NAMENODE_ENABLE_RETRY_CACHE_KEY
argument_list|,
name|DFS_NAMENODE_ENABLE_RETRY_CACHE_DEFAULT
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Retry cache on namenode is "
operator|+
operator|(
name|enable
condition|?
literal|"enabled"
else|:
literal|"disabled"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|enable
condition|)
block|{
name|float
name|heapPercent
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|DFS_NAMENODE_RETRY_CACHE_HEAP_PERCENT_KEY
argument_list|,
name|DFS_NAMENODE_RETRY_CACHE_HEAP_PERCENT_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|entryExpiryMillis
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_RETRY_CACHE_EXPIRYTIME_MILLIS_KEY
argument_list|,
name|DFS_NAMENODE_RETRY_CACHE_EXPIRYTIME_MILLIS_DEFAULT
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Retry cache will use "
operator|+
name|heapPercent
operator|+
literal|" of total heap and retry cache entry expiry time is "
operator|+
name|entryExpiryMillis
operator|+
literal|" millis"
argument_list|)
expr_stmt|;
name|long
name|entryExpiryNanos
init|=
name|entryExpiryMillis
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
return|return
operator|new
name|RetryCache
argument_list|(
literal|"NameNodeRetryCache"
argument_list|,
name|heapPercent
argument_list|,
name|entryExpiryNanos
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Locate DefaultAuditLogger, if any, to enable/disable CallerContext.    *    * @param value    *          true, enable CallerContext, otherwise false to disable it.    */
DECL|method|setCallerContextEnabled (final boolean value)
name|void
name|setCallerContextEnabled
parameter_list|(
specifier|final
name|boolean
name|value
parameter_list|)
block|{
for|for
control|(
name|AuditLogger
name|logger
range|:
name|auditLoggers
control|)
block|{
if|if
condition|(
name|logger
operator|instanceof
name|DefaultAuditLogger
condition|)
block|{
operator|(
operator|(
name|DefaultAuditLogger
operator|)
name|logger
operator|)
operator|.
name|setCallerContextEnabled
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Get the value indicating if CallerContext is enabled.    *    * @return true, if CallerContext is enabled, otherwise false, if it's    *         disabled.    */
DECL|method|getCallerContextEnabled ()
name|boolean
name|getCallerContextEnabled
parameter_list|()
block|{
for|for
control|(
name|AuditLogger
name|logger
range|:
name|auditLoggers
control|)
block|{
if|if
condition|(
name|logger
operator|instanceof
name|DefaultAuditLogger
condition|)
block|{
return|return
operator|(
operator|(
name|DefaultAuditLogger
operator|)
name|logger
operator|)
operator|.
name|getCallerContextEnabled
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|initAuditLoggers (Configuration conf)
specifier|private
name|List
argument_list|<
name|AuditLogger
argument_list|>
name|initAuditLoggers
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Initialize the custom access loggers if configured.
name|Collection
argument_list|<
name|String
argument_list|>
name|alClasses
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFS_NAMENODE_AUDIT_LOGGERS_KEY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AuditLogger
argument_list|>
name|auditLoggers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|alClasses
operator|!=
literal|null
operator|&&
operator|!
name|alClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|className
range|:
name|alClasses
control|)
block|{
try|try
block|{
name|AuditLogger
name|logger
decl_stmt|;
if|if
condition|(
name|DFS_NAMENODE_DEFAULT_AUDIT_LOGGER_NAME
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|logger
operator|=
operator|new
name|DefaultAuditLogger
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|=
operator|(
name|AuditLogger
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|auditLoggers
operator|.
name|add
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
throw|throw
name|re
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Make sure there is at least one logger installed.
if|if
condition|(
name|auditLoggers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|auditLoggers
operator|.
name|add
argument_list|(
operator|new
name|DefaultAuditLogger
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add audit logger to calculate top users
if|if
condition|(
name|topConf
operator|.
name|isEnabled
condition|)
block|{
name|topMetrics
operator|=
operator|new
name|TopMetrics
argument_list|(
name|conf
argument_list|,
name|topConf
operator|.
name|nntopReportingPeriodsMs
argument_list|)
expr_stmt|;
if|if
condition|(
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|getSource
argument_list|(
name|TOPMETRICS_METRICS_SOURCE_NAME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|register
argument_list|(
name|TOPMETRICS_METRICS_SOURCE_NAME
argument_list|,
literal|"Top N operations by user"
argument_list|,
name|topMetrics
argument_list|)
expr_stmt|;
block|}
name|auditLoggers
operator|.
name|add
argument_list|(
operator|new
name|TopAuditLogger
argument_list|(
name|topMetrics
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|auditLoggers
argument_list|)
return|;
block|}
DECL|method|loadFSImage (StartupOption startOpt)
specifier|private
name|void
name|loadFSImage
parameter_list|(
name|StartupOption
name|startOpt
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FSImage
name|fsImage
init|=
name|getFSImage
argument_list|()
decl_stmt|;
comment|// format before starting up if requested
if|if
condition|(
name|startOpt
operator|==
name|StartupOption
operator|.
name|FORMAT
condition|)
block|{
name|fsImage
operator|.
name|format
argument_list|(
name|this
argument_list|,
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|determineClusterId
argument_list|()
argument_list|)
expr_stmt|;
comment|// reuse current id
name|startOpt
operator|=
name|StartupOption
operator|.
name|REGULAR
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// We shouldn't be calling saveNamespace if we've come up in standby state.
name|MetaRecoveryContext
name|recovery
init|=
name|startOpt
operator|.
name|createRecoveryContext
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|staleImage
init|=
name|fsImage
operator|.
name|recoverTransitionRead
argument_list|(
name|startOpt
argument_list|,
name|this
argument_list|,
name|recovery
argument_list|)
decl_stmt|;
if|if
condition|(
name|RollingUpgradeStartupOption
operator|.
name|ROLLBACK
operator|.
name|matches
argument_list|(
name|startOpt
argument_list|)
condition|)
block|{
name|rollingUpgradeInfo
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|boolean
name|needToSave
init|=
name|staleImage
operator|&&
operator|!
name|haEnabled
operator|&&
operator|!
name|isRollingUpgrade
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Need to save fs image? "
operator|+
name|needToSave
operator|+
literal|" (staleImage="
operator|+
name|staleImage
operator|+
literal|", haEnabled="
operator|+
name|haEnabled
operator|+
literal|", isRollingUpgrade="
operator|+
name|isRollingUpgrade
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|needToSave
condition|)
block|{
name|fsImage
operator|.
name|saveNamespace
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No need to save, so mark the phase done.
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|prog
operator|.
name|beginPhase
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|)
expr_stmt|;
name|prog
operator|.
name|endPhase
argument_list|(
name|Phase
operator|.
name|SAVING_CHECKPOINT
argument_list|)
expr_stmt|;
block|}
comment|// This will start a new log segment and write to the seen_txid file, so
comment|// we shouldn't do it when coming up in standby state
if|if
condition|(
operator|!
name|haEnabled
operator|||
operator|(
name|haEnabled
operator|&&
name|startOpt
operator|==
name|StartupOption
operator|.
name|UPGRADE
operator|)
operator|||
operator|(
name|haEnabled
operator|&&
name|startOpt
operator|==
name|StartupOption
operator|.
name|UPGRADEONLY
operator|)
condition|)
block|{
name|fsImage
operator|.
name|openEditLogForWrite
argument_list|(
name|getEffectiveLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|fsImage
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|writeUnlock
argument_list|(
literal|"loadFSImage"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|imageLoadComplete
argument_list|()
expr_stmt|;
block|}
DECL|method|startSecretManager ()
specifier|private
name|void
name|startSecretManager
parameter_list|()
block|{
if|if
condition|(
name|dtSecretManager
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dtSecretManager
operator|.
name|startThreads
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Inability to start secret manager
comment|// can't be recovered from.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|startSecretManagerIfNecessary ()
specifier|public
name|void
name|startSecretManagerIfNecessary
parameter_list|()
block|{
assert|assert
name|hasWriteLock
argument_list|()
operator|:
literal|"Starting secret manager needs write lock"
assert|;
name|boolean
name|shouldRun
init|=
name|shouldUseDelegationTokens
argument_list|()
operator|&&
operator|!
name|isInSafeMode
argument_list|()
operator|&&
name|getEditLog
argument_list|()
operator|.
name|isOpenForWrite
argument_list|()
decl_stmt|;
name|boolean
name|running
init|=
name|dtSecretManager
operator|.
name|isRunning
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldRun
operator|&&
operator|!
name|running
condition|)
block|{
name|startSecretManager
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopSecretManager ()
specifier|private
name|void
name|stopSecretManager
parameter_list|()
block|{
if|if
condition|(
name|dtSecretManager
operator|!=
literal|null
condition|)
block|{
name|dtSecretManager
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * Start services common to both active and standby states    */
DECL|method|startCommonServices (Configuration conf, HAContext haContext)
name|void
name|startCommonServices
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HAContext
name|haContext
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|registerMBean
argument_list|()
expr_stmt|;
comment|// register the MBean for the FSNamesystemState
name|writeLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|haContext
operator|=
name|haContext
expr_stmt|;
try|try
block|{
name|nnResourceChecker
operator|=
operator|new
name|NameNodeResourceChecker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|checkAvailableResources
argument_list|()
expr_stmt|;
assert|assert
operator|!
name|blockManager
operator|.
name|isPopulatingReplQueues
argument_list|()
assert|;
name|StartupProgress
name|prog
init|=
name|NameNode
operator|.
name|getStartupProgress
argument_list|()
decl_stmt|;
name|prog
operator|.
name|beginPhase
argument_list|(
name|Phase
operator|.
name|SAFEMODE
argument_list|)
expr_stmt|;
name|long
name|completeBlocksTotal
init|=
name|getCompleteBlocksTotal
argument_list|()
decl_stmt|;
name|prog
operator|.
name|setTotal
argument_list|(
name|Phase
operator|.
name|SAFEMODE
argument_list|,
name|STEP_AWAITING_REPORTED_BLOCKS
argument_list|,
name|completeBlocksTotal
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|activate
argument_list|(
name|conf
argument_list|,
name|completeBlocksTotal
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"startCommonServices"
argument_list|)
expr_stmt|;
block|}
name|registerMXBean
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|inodeAttributeProvider
operator|!=
literal|null
condition|)
block|{
name|inodeAttributeProvider
operator|.
name|start
argument_list|()
expr_stmt|;
name|dir
operator|.
name|setINodeAttributeProvider
argument_list|(
name|inodeAttributeProvider
argument_list|)
expr_stmt|;
block|}
name|snapshotManager
operator|.
name|registerMXBean
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|serviceAddress
init|=
name|NameNode
operator|.
name|getServiceAddress
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|this
operator|.
name|nameNodeHostName
operator|=
operator|(
name|serviceAddress
operator|!=
literal|null
operator|)
condition|?
name|serviceAddress
operator|.
name|getHostName
argument_list|()
else|:
literal|""
expr_stmt|;
block|}
comment|/**     * Stop services common to both active and standby states    */
DECL|method|stopCommonServices ()
name|void
name|stopCommonServices
parameter_list|()
block|{
name|writeLock
argument_list|()
expr_stmt|;
if|if
condition|(
name|inodeAttributeProvider
operator|!=
literal|null
condition|)
block|{
name|dir
operator|.
name|setINodeAttributeProvider
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|inodeAttributeProvider
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|blockManager
operator|!=
literal|null
condition|)
name|blockManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"stopCommonServices"
argument_list|)
expr_stmt|;
block|}
name|RetryCache
operator|.
name|clear
argument_list|(
name|retryCache
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start services required in active state    * @throws IOException    */
DECL|method|startActiveServices ()
name|void
name|startActiveServices
parameter_list|()
throws|throws
name|IOException
block|{
name|startingActiveService
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting services required for active state"
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|FSEditLog
name|editLog
init|=
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|editLog
operator|.
name|isOpenForWrite
argument_list|()
condition|)
block|{
comment|// During startup, we're already open for write during initialization.
name|editLog
operator|.
name|initJournalsForWrite
argument_list|()
expr_stmt|;
comment|// May need to recover
name|editLog
operator|.
name|recoverUnclosedStreams
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Catching up to latest edits from old active before "
operator|+
literal|"taking over writer role in edits logs"
argument_list|)
expr_stmt|;
name|editLogTailer
operator|.
name|catchupDuringFailover
argument_list|()
expr_stmt|;
name|blockManager
operator|.
name|setPostponeBlocksFromFuture
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|markAllDatanodesStale
argument_list|()
expr_stmt|;
name|blockManager
operator|.
name|clearQueues
argument_list|()
expr_stmt|;
name|blockManager
operator|.
name|processAllPendingDNMessages
argument_list|()
expr_stmt|;
comment|// Only need to re-process the queue, If not in SafeMode.
if|if
condition|(
operator|!
name|isInSafeMode
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reprocessing replication and invalidation queues"
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|initializeReplQueues
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"NameNode metadata after re-processing "
operator|+
literal|"replication and invalidation queues during failover:\n"
operator|+
name|metaSaveAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|nextTxId
init|=
name|getFSImage
argument_list|()
operator|.
name|getLastAppliedTxId
argument_list|()
operator|+
literal|1
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Will take over writing edit logs at txnid "
operator|+
name|nextTxId
argument_list|)
expr_stmt|;
name|editLog
operator|.
name|setNextTxId
argument_list|(
name|nextTxId
argument_list|)
expr_stmt|;
name|getFSImage
argument_list|()
operator|.
name|editLog
operator|.
name|openForWrite
argument_list|(
name|getEffectiveLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Initialize the quota.
name|dir
operator|.
name|updateCountForQuota
argument_list|()
expr_stmt|;
comment|// Enable quota checks.
name|dir
operator|.
name|enableQuotaChecks
argument_list|()
expr_stmt|;
name|dir
operator|.
name|ezManager
operator|.
name|startReencryptThreads
argument_list|()
expr_stmt|;
if|if
condition|(
name|haEnabled
condition|)
block|{
comment|// Renew all of the leases before becoming active.
comment|// This is because, while we were in standby mode,
comment|// the leases weren't getting renewed on this NN.
comment|// Give them all a fresh start here.
name|leaseManager
operator|.
name|renewAllLeases
argument_list|()
expr_stmt|;
block|}
name|leaseManager
operator|.
name|startMonitor
argument_list|()
expr_stmt|;
name|startSecretManagerIfNecessary
argument_list|()
expr_stmt|;
comment|//ResourceMonitor required only at ActiveNN. See HDFS-2914
name|this
operator|.
name|nnrmthread
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|NameNodeResourceMonitor
argument_list|()
argument_list|)
expr_stmt|;
name|nnrmthread
operator|.
name|start
argument_list|()
expr_stmt|;
name|nnEditLogRoller
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|NameNodeEditLogRoller
argument_list|(
name|editLogRollerThreshold
argument_list|,
name|editLogRollerInterval
argument_list|)
argument_list|)
expr_stmt|;
name|nnEditLogRoller
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|lazyPersistFileScrubIntervalSec
operator|>
literal|0
condition|)
block|{
name|lazyPersistFileScrubber
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|LazyPersistFileScrubber
argument_list|(
name|lazyPersistFileScrubIntervalSec
argument_list|)
argument_list|)
expr_stmt|;
name|lazyPersistFileScrubber
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Lazy persist file scrubber is disabled,"
operator|+
literal|" configured scrub interval is zero."
argument_list|)
expr_stmt|;
block|}
name|cacheManager
operator|.
name|startMonitorThread
argument_list|()
expr_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|setShouldSendCachingCommands
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
name|edekCacheLoader
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"Warm Up EDEK Cache Thread #%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|FSDirEncryptionZoneOp
operator|.
name|warmUpEdekCache
argument_list|(
name|edekCacheLoader
argument_list|,
name|dir
argument_list|,
name|edekCacheLoaderDelay
argument_list|,
name|edekCacheLoaderInterval
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|startingActiveService
operator|=
literal|false
expr_stmt|;
name|blockManager
operator|.
name|checkSafeMode
argument_list|()
expr_stmt|;
name|writeUnlock
argument_list|(
literal|"startActiveServices"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|inActiveState ()
specifier|private
name|boolean
name|inActiveState
parameter_list|()
block|{
return|return
name|haContext
operator|!=
literal|null
operator|&&
name|haContext
operator|.
name|getState
argument_list|()
operator|.
name|getServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|ACTIVE
return|;
block|}
annotation|@
name|Override
DECL|method|inTransitionToActive ()
specifier|public
name|boolean
name|inTransitionToActive
parameter_list|()
block|{
return|return
name|haEnabled
operator|&&
name|inActiveState
argument_list|()
operator|&&
name|startingActiveService
return|;
block|}
DECL|method|shouldUseDelegationTokens ()
specifier|private
name|boolean
name|shouldUseDelegationTokens
parameter_list|()
block|{
return|return
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|||
name|alwaysUseDelegationTokensForTests
return|;
block|}
comment|/**     * Stop services required in active state    */
DECL|method|stopActiveServices ()
name|void
name|stopActiveServices
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping services started for active state"
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|stopSecretManager
argument_list|()
expr_stmt|;
name|leaseManager
operator|.
name|stopMonitor
argument_list|()
expr_stmt|;
if|if
condition|(
name|nnrmthread
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|NameNodeResourceMonitor
operator|)
name|nnrmthread
operator|.
name|getRunnable
argument_list|()
operator|)
operator|.
name|stopMonitor
argument_list|()
expr_stmt|;
name|nnrmthread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|edekCacheLoader
operator|!=
literal|null
condition|)
block|{
name|edekCacheLoader
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nnEditLogRoller
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|NameNodeEditLogRoller
operator|)
name|nnEditLogRoller
operator|.
name|getRunnable
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nnEditLogRoller
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lazyPersistFileScrubber
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|LazyPersistFileScrubber
operator|)
name|lazyPersistFileScrubber
operator|.
name|getRunnable
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|lazyPersistFileScrubber
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
name|getFSImage
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getFSImage
argument_list|()
operator|.
name|editLog
operator|!=
literal|null
condition|)
block|{
name|getFSImage
argument_list|()
operator|.
name|editLog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Update the fsimage with the last txid that we wrote
comment|// so that the tailer starts from the right spot.
name|getFSImage
argument_list|()
operator|.
name|updateLastAppliedTxIdFromWritten
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|dir
operator|.
name|ezManager
operator|.
name|stopReencryptThread
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cacheManager
operator|!=
literal|null
condition|)
block|{
name|cacheManager
operator|.
name|stopMonitorThread
argument_list|()
expr_stmt|;
name|cacheManager
operator|.
name|clearDirectiveStats
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blockManager
operator|!=
literal|null
condition|)
block|{
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|clearPendingCachingCommands
argument_list|()
expr_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|setShouldSendCachingCommands
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Don't want to keep replication queues when not in Active.
name|blockManager
operator|.
name|clearQueues
argument_list|()
expr_stmt|;
name|blockManager
operator|.
name|setInitializedReplQueues
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"stopActiveServices"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Start services required in standby state     *     * @throws IOException    */
DECL|method|startStandbyServices (final Configuration conf)
name|void
name|startStandbyServices
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting services required for standby state"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getFSImage
argument_list|()
operator|.
name|editLog
operator|.
name|isOpenForRead
argument_list|()
condition|)
block|{
comment|// During startup, we're already open for read.
name|getFSImage
argument_list|()
operator|.
name|editLog
operator|.
name|initSharedJournalsForRead
argument_list|()
expr_stmt|;
block|}
name|blockManager
operator|.
name|setPostponeBlocksFromFuture
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Disable quota checks while in standby.
name|dir
operator|.
name|disableQuotaChecks
argument_list|()
expr_stmt|;
name|editLogTailer
operator|=
operator|new
name|EditLogTailer
argument_list|(
name|this
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|editLogTailer
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|standbyShouldCheckpoint
condition|)
block|{
name|standbyCheckpointer
operator|=
operator|new
name|StandbyCheckpointer
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|standbyCheckpointer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Called when the NN is in Standby state and the editlog tailer tails the    * OP_ROLLING_UPGRADE_START.    */
DECL|method|triggerRollbackCheckpoint ()
name|void
name|triggerRollbackCheckpoint
parameter_list|()
block|{
name|setNeedRollbackFsImage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|standbyCheckpointer
operator|!=
literal|null
condition|)
block|{
name|standbyCheckpointer
operator|.
name|triggerRollbackCheckpoint
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Called while the NN is in Standby state, but just about to be    * asked to enter Active state. This cancels any checkpoints    * currently being taken.    */
DECL|method|prepareToStopStandbyServices ()
name|void
name|prepareToStopStandbyServices
parameter_list|()
throws|throws
name|ServiceFailedException
block|{
if|if
condition|(
name|standbyCheckpointer
operator|!=
literal|null
condition|)
block|{
name|standbyCheckpointer
operator|.
name|cancelAndPreventCheckpoints
argument_list|(
literal|"About to leave standby state"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Stop services required in standby state */
DECL|method|stopStandbyServices ()
name|void
name|stopStandbyServices
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping services started for standby state"
argument_list|)
expr_stmt|;
if|if
condition|(
name|standbyCheckpointer
operator|!=
literal|null
condition|)
block|{
name|standbyCheckpointer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|editLogTailer
operator|!=
literal|null
condition|)
block|{
name|editLogTailer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
name|getFSImage
argument_list|()
operator|!=
literal|null
operator|&&
name|getFSImage
argument_list|()
operator|.
name|editLog
operator|!=
literal|null
condition|)
block|{
name|getFSImage
argument_list|()
operator|.
name|editLog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkOperation (OperationCategory op)
specifier|public
name|void
name|checkOperation
parameter_list|(
name|OperationCategory
name|op
parameter_list|)
throws|throws
name|StandbyException
block|{
if|if
condition|(
name|haContext
operator|!=
literal|null
condition|)
block|{
comment|// null in some unit tests
name|haContext
operator|.
name|checkOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @throws RetriableException    *           If 1) The NameNode is in SafeMode, 2) HA is enabled, and 3)    *           NameNode is in active state    * @throws SafeModeException    *           Otherwise if NameNode is in SafeMode.    */
DECL|method|checkNameNodeSafeMode (String errorMsg)
name|void
name|checkNameNodeSafeMode
parameter_list|(
name|String
name|errorMsg
parameter_list|)
throws|throws
name|RetriableException
throws|,
name|SafeModeException
block|{
if|if
condition|(
name|isInSafeMode
argument_list|()
condition|)
block|{
name|SafeModeException
name|se
init|=
name|newSafemodeException
argument_list|(
name|errorMsg
argument_list|)
decl_stmt|;
if|if
condition|(
name|haEnabled
operator|&&
name|haContext
operator|!=
literal|null
operator|&&
name|haContext
operator|.
name|getState
argument_list|()
operator|.
name|getServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|ACTIVE
operator|&&
name|isInStartupSafeMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RetriableException
argument_list|(
name|se
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|se
throw|;
block|}
block|}
block|}
DECL|method|newSafemodeException (String errorMsg)
specifier|private
name|SafeModeException
name|newSafemodeException
parameter_list|(
name|String
name|errorMsg
parameter_list|)
block|{
return|return
operator|new
name|SafeModeException
argument_list|(
name|errorMsg
operator|+
literal|". Name node is in safe "
operator|+
literal|"mode.\n"
operator|+
name|getSafeModeTip
argument_list|()
operator|+
literal|" NamenodeHostName:"
operator|+
name|nameNodeHostName
argument_list|)
return|;
block|}
DECL|method|isPermissionEnabled ()
name|boolean
name|isPermissionEnabled
parameter_list|()
block|{
return|return
name|isPermissionEnabled
return|;
block|}
DECL|method|getNamespaceDirs (Configuration conf)
specifier|public
specifier|static
name|Collection
argument_list|<
name|URI
argument_list|>
name|getNamespaceDirs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getStorageDirs
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|)
return|;
block|}
comment|/**    * Get all edits dirs which are required. If any shared edits dirs are    * configured, these are also included in the set of required dirs.    *     * @param conf the HDFS configuration.    * @return all required dirs.    */
DECL|method|getRequiredNamespaceEditsDirs (Configuration conf)
specifier|public
specifier|static
name|Collection
argument_list|<
name|URI
argument_list|>
name|getRequiredNamespaceEditsDirs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Set
argument_list|<
name|URI
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|getStorageDirs
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_EDITS_DIR_REQUIRED_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|getSharedEditsDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|getStorageDirs (Configuration conf, String propertyName)
specifier|private
specifier|static
name|Collection
argument_list|<
name|URI
argument_list|>
name|getStorageDirs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|dirNames
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|StartupOption
name|startOpt
init|=
name|NameNode
operator|.
name|getStartupOption
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|startOpt
operator|==
name|StartupOption
operator|.
name|IMPORT
condition|)
block|{
comment|// In case of IMPORT this will get rid of default directories
comment|// but will retain directories specified in hdfs-site.xml
comment|// When importing image from a checkpoint, the name-node can
comment|// start with empty set of storage directories.
name|Configuration
name|cE
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|cE
operator|.
name|addResource
argument_list|(
literal|"core-default.xml"
argument_list|)
expr_stmt|;
name|cE
operator|.
name|addResource
argument_list|(
literal|"core-site.xml"
argument_list|)
expr_stmt|;
name|cE
operator|.
name|addResource
argument_list|(
literal|"hdfs-default.xml"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|dirNames2
init|=
name|cE
operator|.
name|getTrimmedStringCollection
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|dirNames
operator|.
name|removeAll
argument_list|(
name|dirNames2
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirNames
operator|.
name|isEmpty
argument_list|()
condition|)
name|LOG
operator|.
name|warn
argument_list|(
literal|"!!! WARNING !!!"
operator|+
literal|"\n\tThe NameNode currently runs without persistent storage."
operator|+
literal|"\n\tAny changes to the file system meta-data may be lost."
operator|+
literal|"\n\tRecommended actions:"
operator|+
literal|"\n\t\t- shutdown and restart NameNode with configured \""
operator|+
name|propertyName
operator|+
literal|"\" in hdfs-site.xml;"
operator|+
literal|"\n\t\t- use Backup Node as a persistent and up-to-date storage "
operator|+
literal|"of the file system meta-data."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dirNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dirNames
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_EDITS_DIR_DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
name|Util
operator|.
name|stringCollectionAsURIs
argument_list|(
name|dirNames
argument_list|)
return|;
block|}
comment|/**    * Return an ordered list of edits directories to write to.    * The list is ordered such that all shared edits directories    * are ordered before non-shared directories, and any duplicates    * are removed. The order they are specified in the configuration    * is retained.    * @return Collection of shared edits directories.    * @throws IOException if multiple shared edits directories are configured    */
DECL|method|getNamespaceEditsDirs (Configuration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|URI
argument_list|>
name|getNamespaceEditsDirs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getNamespaceEditsDirs
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getNamespaceEditsDirs (Configuration conf, boolean includeShared)
specifier|public
specifier|static
name|List
argument_list|<
name|URI
argument_list|>
name|getNamespaceEditsDirs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|includeShared
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Use a LinkedHashSet so that order is maintained while we de-dup
comment|// the entries.
name|LinkedHashSet
argument_list|<
name|URI
argument_list|>
name|editsDirs
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeShared
condition|)
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|sharedDirs
init|=
name|getSharedEditsDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Fail until multiple shared edits directories are supported (HDFS-2782)
if|if
condition|(
name|sharedDirs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Multiple shared edits directories are not yet supported"
argument_list|)
throw|;
block|}
comment|// First add the shared edits dirs. It's critical that the shared dirs
comment|// are added first, since JournalSet syncs them in the order they are listed,
comment|// and we need to make sure all edits are in place in the shared storage
comment|// before they are replicated locally. See HDFS-2874.
for|for
control|(
name|URI
name|dir
range|:
name|sharedDirs
control|)
block|{
if|if
condition|(
operator|!
name|editsDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Edits URI "
operator|+
name|dir
operator|+
literal|" listed multiple times in "
operator|+
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
operator|+
literal|". Ignoring duplicates."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now add the non-shared dirs.
for|for
control|(
name|URI
name|dir
range|:
name|getStorageDirs
argument_list|(
name|conf
argument_list|,
name|DFS_NAMENODE_EDITS_DIR_KEY
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|editsDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Edits URI "
operator|+
name|dir
operator|+
literal|" listed multiple times in "
operator|+
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
operator|+
literal|" and "
operator|+
name|DFS_NAMENODE_EDITS_DIR_KEY
operator|+
literal|". Ignoring duplicates."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|editsDirs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If this is the case, no edit dirs have been explicitly configured.
comment|// Image dirs are to be used for edits too.
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|editsDirs
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns edit directories that are shared between primary and secondary.    * @param conf configuration    * @return collection of edit directories from {@code conf}    */
DECL|method|getSharedEditsDirs (Configuration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|URI
argument_list|>
name|getSharedEditsDirs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// don't use getStorageDirs here, because we want an empty default
comment|// rather than the dir in /tmp
name|Collection
argument_list|<
name|String
argument_list|>
name|dirNames
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFS_NAMENODE_SHARED_EDITS_DIR_KEY
argument_list|)
decl_stmt|;
return|return
name|Util
operator|.
name|stringCollectionAsURIs
argument_list|(
name|dirNames
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readLock ()
specifier|public
name|void
name|readLock
parameter_list|()
block|{
name|this
operator|.
name|fsLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readLockInterruptibly ()
specifier|public
name|void
name|readLockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|fsLock
operator|.
name|readLockInterruptibly
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readUnlock ()
specifier|public
name|void
name|readUnlock
parameter_list|()
block|{
name|this
operator|.
name|fsLock
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
DECL|method|readUnlock (String opName)
specifier|public
name|void
name|readUnlock
parameter_list|(
name|String
name|opName
parameter_list|)
block|{
name|this
operator|.
name|fsLock
operator|.
name|readUnlock
argument_list|(
name|opName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeLock ()
specifier|public
name|void
name|writeLock
parameter_list|()
block|{
name|this
operator|.
name|fsLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeLockInterruptibly ()
specifier|public
name|void
name|writeLockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|fsLock
operator|.
name|writeLockInterruptibly
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeUnlock ()
specifier|public
name|void
name|writeUnlock
parameter_list|()
block|{
name|this
operator|.
name|fsLock
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
DECL|method|writeUnlock (String opName)
specifier|public
name|void
name|writeUnlock
parameter_list|(
name|String
name|opName
parameter_list|)
block|{
name|this
operator|.
name|fsLock
operator|.
name|writeUnlock
argument_list|(
name|opName
argument_list|)
expr_stmt|;
block|}
DECL|method|writeUnlock (String opName, boolean suppressWriteLockReport)
specifier|public
name|void
name|writeUnlock
parameter_list|(
name|String
name|opName
parameter_list|,
name|boolean
name|suppressWriteLockReport
parameter_list|)
block|{
name|this
operator|.
name|fsLock
operator|.
name|writeUnlock
argument_list|(
name|opName
argument_list|,
name|suppressWriteLockReport
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasWriteLock ()
specifier|public
name|boolean
name|hasWriteLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|fsLock
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasReadLock ()
specifier|public
name|boolean
name|hasReadLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|fsLock
operator|.
name|getReadHoldCount
argument_list|()
operator|>
literal|0
operator|||
name|hasWriteLock
argument_list|()
return|;
block|}
DECL|method|getReadHoldCount ()
specifier|public
name|int
name|getReadHoldCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|fsLock
operator|.
name|getReadHoldCount
argument_list|()
return|;
block|}
DECL|method|getWriteHoldCount ()
specifier|public
name|int
name|getWriteHoldCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|fsLock
operator|.
name|getWriteHoldCount
argument_list|()
return|;
block|}
comment|/** Lock the checkpoint lock */
DECL|method|cpLock ()
specifier|public
name|void
name|cpLock
parameter_list|()
block|{
name|this
operator|.
name|cpLock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|/** Lock the checkpoint lock interrupibly */
DECL|method|cpLockInterruptibly ()
specifier|public
name|void
name|cpLockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|this
operator|.
name|cpLock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
block|}
comment|/** Unlock the checkpoint lock */
DECL|method|cpUnlock ()
specifier|public
name|void
name|cpUnlock
parameter_list|()
block|{
name|this
operator|.
name|cpLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|method|getNamespaceInfo ()
name|NamespaceInfo
name|getNamespaceInfo
parameter_list|()
block|{
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|unprotectedGetNamespaceInfo
argument_list|()
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"getNamespaceInfo"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the creation time of the file system.    * Notice that this time is initialized to NameNode format time, and updated    * to upgrade time during upgrades.    * @return time in milliseconds.    * See {@link org.apache.hadoop.util.Time#now()}.    */
annotation|@
name|VisibleForTesting
DECL|method|getCTime ()
name|long
name|getCTime
parameter_list|()
block|{
return|return
name|fsImage
operator|==
literal|null
condition|?
literal|0
else|:
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getCTime
argument_list|()
return|;
block|}
comment|/**    * Version of @see #getNamespaceInfo() that is not protected by a lock.    */
DECL|method|unprotectedGetNamespaceInfo ()
name|NamespaceInfo
name|unprotectedGetNamespaceInfo
parameter_list|()
block|{
return|return
operator|new
name|NamespaceInfo
argument_list|(
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getNamespaceID
argument_list|()
argument_list|,
name|getClusterId
argument_list|()
argument_list|,
name|getBlockPoolId
argument_list|()
argument_list|,
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getCTime
argument_list|()
argument_list|,
name|getState
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Close down this file system manager.    * Causes heartbeat and lease daemons to stop; waits briefly for    * them to finish, but a short timeout returns control back to caller.    */
DECL|method|close ()
name|void
name|close
parameter_list|()
block|{
name|fsRunning
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|stopCommonServices
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// using finally to ensure we also wait for lease daemon
try|try
block|{
name|stopActiveServices
argument_list|()
expr_stmt|;
name|stopStandbyServices
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{       }
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|fsImage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|fsRunning
return|;
block|}
DECL|method|isInStandbyState ()
specifier|public
name|boolean
name|isInStandbyState
parameter_list|()
block|{
if|if
condition|(
name|haContext
operator|==
literal|null
operator|||
name|haContext
operator|.
name|getState
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// We're still starting up. In this case, if HA is
comment|// on for the cluster, we always start in standby. Otherwise
comment|// start in active.
return|return
name|haEnabled
return|;
block|}
return|return
name|HAServiceState
operator|.
name|STANDBY
operator|==
name|haContext
operator|.
name|getState
argument_list|()
operator|.
name|getServiceState
argument_list|()
return|;
block|}
comment|/**    * return a list of blocks& their locations on<code>datanode</code> whose    * total size is<code>size</code>    *    * @param datanode on which blocks are located    * @param size total size of blocks    */
DECL|method|getBlocks (DatanodeID datanode, long size, long minimumBlockSize)
specifier|public
name|BlocksWithLocations
name|getBlocks
parameter_list|(
name|DatanodeID
name|datanode
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|minimumBlockSize
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|getBlockManager
argument_list|()
operator|.
name|getBlocksWithLocations
argument_list|(
name|datanode
argument_list|,
name|size
argument_list|,
name|minimumBlockSize
argument_list|)
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"getBlocks"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Dump all metadata into specified file    */
DECL|method|metaSave (String filename)
name|void
name|metaSave
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operationName
init|=
literal|"metaSave"
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
argument_list|,
name|filename
argument_list|)
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|metaSave
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|metaSave (PrintWriter out)
specifier|private
name|void
name|metaSave
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
name|long
name|totalInodes
init|=
name|this
operator|.
name|dir
operator|.
name|totalInodes
argument_list|()
decl_stmt|;
name|long
name|totalBlocks
init|=
name|this
operator|.
name|getBlocksTotal
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|totalInodes
operator|+
literal|" files and directories, "
operator|+
name|totalBlocks
operator|+
literal|" blocks = "
operator|+
operator|(
name|totalInodes
operator|+
name|totalBlocks
operator|)
operator|+
literal|" total filesystem objects"
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|metaSave
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**    * List open files in the system in batches. prevId is the cursor INode id and    * the open files returned in a batch will have their INode ids greater than    * this cursor. Open files can only be requested by super user and the the    * list across batches does not represent a consistent view of all open files.    * TODO: HDFS-12969 - to report open files by type.    *    * @param prevId the cursor INode id.    * @param openFilesTypes types to filter the open files.    * @param path path to filter the open files.    * @throws IOException    */
DECL|method|listOpenFiles (long prevId, EnumSet<OpenFilesType> openFilesTypes, String path)
name|BatchedListEntries
argument_list|<
name|OpenFileEntry
argument_list|>
name|listOpenFiles
parameter_list|(
name|long
name|prevId
parameter_list|,
name|EnumSet
argument_list|<
name|OpenFilesType
argument_list|>
name|openFilesTypes
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"listOpenFiles"
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
name|BatchedListEntries
argument_list|<
name|OpenFileEntry
argument_list|>
name|batchedListEntries
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
if|if
condition|(
name|openFilesTypes
operator|.
name|contains
argument_list|(
name|OpenFilesType
operator|.
name|ALL_OPEN_FILES
argument_list|)
condition|)
block|{
name|batchedListEntries
operator|=
name|leaseManager
operator|.
name|getUnderConstructionFiles
argument_list|(
name|prevId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|openFilesTypes
operator|.
name|contains
argument_list|(
name|OpenFilesType
operator|.
name|BLOCKING_DECOMMISSION
argument_list|)
condition|)
block|{
name|batchedListEntries
operator|=
name|getFilesBlockingDecom
argument_list|(
name|prevId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown OpenFileType: "
operator|+
name|openFilesTypes
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|batchedListEntries
return|;
block|}
DECL|method|getFilesBlockingDecom (long prevId, String path)
specifier|public
name|BatchedListEntries
argument_list|<
name|OpenFileEntry
argument_list|>
name|getFilesBlockingDecom
parameter_list|(
name|long
name|prevId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
assert|assert
name|hasReadLock
argument_list|()
assert|;
specifier|final
name|List
argument_list|<
name|OpenFileEntry
argument_list|>
name|openFileEntries
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|LightWeightHashSet
argument_list|<
name|Long
argument_list|>
name|openFileIds
init|=
operator|new
name|LightWeightHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dataNode
range|:
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodes
argument_list|()
control|)
block|{
for|for
control|(
name|long
name|ucFileId
range|:
name|dataNode
operator|.
name|getLeavingServiceStatus
argument_list|()
operator|.
name|getOpenFiles
argument_list|()
control|)
block|{
name|INode
name|ucFile
init|=
name|getFSDirectory
argument_list|()
operator|.
name|getInode
argument_list|(
name|ucFileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ucFile
operator|==
literal|null
operator|||
name|ucFileId
operator|<=
name|prevId
operator|||
name|openFileIds
operator|.
name|contains
argument_list|(
name|ucFileId
argument_list|)
condition|)
block|{
comment|// probably got deleted or
comment|// part of previous batch or
comment|// already part of the current batch
continue|continue;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|ucFile
operator|instanceof
name|INodeFile
argument_list|)
expr_stmt|;
name|openFileIds
operator|.
name|add
argument_list|(
name|ucFileId
argument_list|)
expr_stmt|;
name|INodeFile
name|inodeFile
init|=
name|ucFile
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|String
name|fullPathName
init|=
name|inodeFile
operator|.
name|getFullPathName
argument_list|()
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|path
argument_list|)
operator|||
name|fullPathName
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|openFileEntries
operator|.
name|add
argument_list|(
operator|new
name|OpenFileEntry
argument_list|(
name|inodeFile
operator|.
name|getId
argument_list|()
argument_list|,
name|inodeFile
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|inodeFile
operator|.
name|getFileUnderConstructionFeature
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|,
name|inodeFile
operator|.
name|getFileUnderConstructionFeature
argument_list|()
operator|.
name|getClientMachine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|openFileIds
operator|.
name|size
argument_list|()
operator|>=
name|this
operator|.
name|maxListOpenFilesResponses
condition|)
block|{
return|return
operator|new
name|BatchedListEntries
argument_list|<>
argument_list|(
name|openFileEntries
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|}
return|return
operator|new
name|BatchedListEntries
argument_list|<>
argument_list|(
name|openFileEntries
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|metaSaveAsString ()
specifier|private
name|String
name|metaSaveAsString
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|metaSave
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|StandbyException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|serverDefaults
return|;
block|}
comment|/////////////////////////////////////////////////////////
comment|//
comment|// These methods are called by HadoopFS clients
comment|//
comment|/////////////////////////////////////////////////////////
comment|/**    * Set permissions for an existing file.    * @throws IOException    */
DECL|method|setPermission (String src, FsPermission permission)
name|void
name|setPermission
parameter_list|(
name|String
name|src
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"setPermission"
decl_stmt|;
name|FileStatus
name|auditStat
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot set permission for "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirAttrOp
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|permission
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set owner for an existing file.    * @throws IOException    */
DECL|method|setOwner (String src, String username, String group)
name|void
name|setOwner
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|group
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"setOwner"
decl_stmt|;
name|FileStatus
name|auditStat
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot set owner for "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirAttrOp
operator|.
name|setOwner
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|username
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get block locations within the specified range.    * @see ClientProtocol#getBlockLocations(String, long, long)    */
DECL|method|getBlockLocations (String clientMachine, String srcArg, long offset, long length)
name|LocatedBlocks
name|getBlockLocations
parameter_list|(
name|String
name|clientMachine
parameter_list|,
name|String
name|srcArg
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"open"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|GetBlockLocationsResult
name|res
init|=
literal|null
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|res
operator|=
name|FSDirStatAndListingOp
operator|.
name|getBlockLocations
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|srcArg
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isInSafeMode
argument_list|()
condition|)
block|{
for|for
control|(
name|LocatedBlock
name|b
range|:
name|res
operator|.
name|blocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
comment|// if safemode& no block locations yet then throw safemodeException
if|if
condition|(
operator|(
name|b
operator|.
name|getLocations
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|b
operator|.
name|getLocations
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|SafeModeException
name|se
init|=
name|newSafemodeException
argument_list|(
literal|"Zero blocklocations for "
operator|+
name|srcArg
argument_list|)
decl_stmt|;
if|if
condition|(
name|haEnabled
operator|&&
name|haContext
operator|!=
literal|null
operator|&&
name|haContext
operator|.
name|getState
argument_list|()
operator|.
name|getServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|ACTIVE
condition|)
block|{
throw|throw
operator|new
name|RetriableException
argument_list|(
name|se
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|se
throw|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|srcArg
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|srcArg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isInSafeMode
argument_list|()
operator|&&
name|res
operator|.
name|updateAccessTime
argument_list|()
condition|)
block|{
name|String
name|src
init|=
name|srcArg
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
specifier|final
name|long
name|now
init|=
name|now
argument_list|()
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|/**          * Resolve the path again and update the atime only when the file          * exists.          *          * XXX: Races can still occur even after resolving the path again.          * For example:          *          *<ul>          *<li>Get the block location for "/a/b"</li>          *<li>Rename "/a/b" to "/c/b"</li>          *<li>The second resolution still points to "/a/b", which is          *   wrong.</li>          *</ul>          *          * The behavior is incorrect but consistent with the one before          * HDFS-7463. A better fix is to change the edit log of SetTime to          * use inode id instead of a path.          */
specifier|final
name|INodesInPath
name|iip
init|=
name|dir
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|srcArg
argument_list|,
name|DirOp
operator|.
name|READ
argument_list|)
decl_stmt|;
name|src
operator|=
name|iip
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
name|boolean
name|updateAccessTime
init|=
name|inode
operator|!=
literal|null
operator|&&
name|now
operator|>
name|inode
operator|.
name|getAccessTime
argument_list|()
operator|+
name|dir
operator|.
name|getAccessTimePrecision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isInSafeMode
argument_list|()
operator|&&
name|updateAccessTime
condition|)
block|{
name|boolean
name|changed
init|=
name|FSDirAttrOp
operator|.
name|setTimes
argument_list|(
name|dir
argument_list|,
name|iip
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logTimes
argument_list|(
name|src
argument_list|,
operator|-
literal|1
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to update the access time of "
operator|+
name|src
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
block|}
name|LocatedBlocks
name|blocks
init|=
name|res
operator|.
name|blocks
decl_stmt|;
name|sortLocatedBlocks
argument_list|(
name|clientMachine
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
return|return
name|blocks
return|;
block|}
DECL|method|sortLocatedBlocks (String clientMachine, LocatedBlocks blocks)
specifier|private
name|void
name|sortLocatedBlocks
parameter_list|(
name|String
name|clientMachine
parameter_list|,
name|LocatedBlocks
name|blocks
parameter_list|)
block|{
if|if
condition|(
name|blocks
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|blkList
init|=
name|blocks
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
if|if
condition|(
name|blkList
operator|==
literal|null
operator|||
name|blkList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// simply return, block list is empty
return|return;
block|}
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|sortLocatedBlocks
argument_list|(
name|clientMachine
argument_list|,
name|blkList
argument_list|)
expr_stmt|;
comment|// lastBlock is not part of getLocatedBlocks(), might need to sort it too
name|LocatedBlock
name|lastBlock
init|=
name|blocks
operator|.
name|getLastLocatedBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastBlock
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|LocatedBlock
argument_list|>
name|lastBlockList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|lastBlock
argument_list|)
decl_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|sortLocatedBlocks
argument_list|(
name|clientMachine
argument_list|,
name|lastBlockList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Moves all the blocks from {@code srcs} and appends them to {@code target}    * To avoid rollbacks we will verify validity of ALL of the args    * before we start actual move.    *     * This does not support ".inodes" relative path    * @param target target to concat into    * @param srcs file that will be concatenated    * @throws IOException on error    */
DECL|method|concat (String target, String [] srcs, boolean logRetryCache)
name|void
name|concat
parameter_list|(
name|String
name|target
parameter_list|,
name|String
index|[]
name|srcs
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"concat"
decl_stmt|;
name|FileStatus
name|stat
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot concat "
operator|+
name|target
argument_list|)
expr_stmt|;
name|stat
operator|=
name|FSDirConcatOp
operator|.
name|concat
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|target
argument_list|,
name|srcs
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|srcs
argument_list|)
argument_list|,
name|target
argument_list|,
name|stat
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|srcs
argument_list|)
argument_list|,
name|target
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
comment|/**    * stores the modification and access time for this inode.     * The access time is precise up to an hour. The transaction, if needed, is    * written to the edits log but is not flushed.    */
DECL|method|setTimes (String src, long mtime, long atime)
name|void
name|setTimes
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"setTimes"
decl_stmt|;
name|FileStatus
name|auditStat
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot set times "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirAttrOp
operator|.
name|setTimes
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|mtime
argument_list|,
name|atime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
comment|/**    * Truncate file to a lower length.    * Truncate cannot be reverted / recovered from as it causes data loss.    * Truncation at block boundary is atomic, otherwise it requires    * block recovery to truncate the last block of the file.    *    * @return true if client does not need to wait for block recovery,    *         false if client needs to wait for block recovery.    */
DECL|method|truncate (String src, long newLength, String clientName, String clientMachine, long mtime)
name|boolean
name|truncate
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|newLength
parameter_list|,
name|String
name|clientName
parameter_list|,
name|String
name|clientMachine
parameter_list|,
name|long
name|mtime
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"truncate"
decl_stmt|;
name|requireEffectiveLayoutVersionForFeature
argument_list|(
name|Feature
operator|.
name|TRUNCATE
argument_list|)
expr_stmt|;
specifier|final
name|FSDirTruncateOp
operator|.
name|TruncateResult
name|r
decl_stmt|;
try|try
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* NameSystem.truncate: src={} newLength={}"
argument_list|,
name|src
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|newLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Cannot truncate to a negative file size: "
operator|+
name|newLength
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
name|BlocksMapUpdateInfo
name|toRemoveBlocks
init|=
operator|new
name|BlocksMapUpdateInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot truncate for "
operator|+
name|src
argument_list|)
expr_stmt|;
name|r
operator|=
name|FSDirTruncateOp
operator|.
name|truncate
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|newLength
argument_list|,
name|clientName
argument_list|,
name|clientMachine
argument_list|,
name|mtime
argument_list|,
name|toRemoveBlocks
argument_list|,
name|pc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|toRemoveBlocks
operator|.
name|getToDeleteList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|removeBlocks
argument_list|(
name|toRemoveBlocks
argument_list|)
expr_stmt|;
name|toRemoveBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|r
operator|.
name|getFileStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|r
operator|.
name|getResult
argument_list|()
return|;
block|}
comment|/**    * Create a symbolic link.    */
DECL|method|createSymlink (String target, String link, PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)
name|void
name|createSymlink
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|link
parameter_list|,
name|PermissionStatus
name|dirPerms
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"createSymlink"
decl_stmt|;
if|if
condition|(
operator|!
name|FileSystem
operator|.
name|areSymlinksEnabled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Symlinks not supported"
argument_list|)
throw|;
block|}
name|FileStatus
name|auditStat
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot create symlink "
operator|+
name|link
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirSymlinkOp
operator|.
name|createSymlinkInt
argument_list|(
name|this
argument_list|,
name|target
argument_list|,
name|link
argument_list|,
name|dirPerms
argument_list|,
name|createParent
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|link
argument_list|,
name|target
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|link
argument_list|,
name|target
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set replication for an existing file.    *     * The NameNode sets new replication and schedules either replication of     * under-replicated data blocks or removal of the excessive block copies     * if the blocks are over-replicated.    *     * @see ClientProtocol#setReplication(String, short)    * @param src file name    * @param replication new replication    * @return true if successful;     *         false if file does not exist or is a directory    */
DECL|method|setReplication (final String src, final short replication)
name|boolean
name|setReplication
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"setReplication"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot set replication for "
operator|+
name|src
argument_list|)
expr_stmt|;
name|success
operator|=
name|FSDirAttrOp
operator|.
name|setReplication
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|blockManager
argument_list|,
name|src
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
comment|/**    * Set the storage policy for a file or a directory.    *    * @param src file/directory path    * @param policyName storage policy name    */
DECL|method|setStoragePolicy (String src, String policyName)
name|void
name|setStoragePolicy
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|policyName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"setStoragePolicy"
decl_stmt|;
name|FileStatus
name|auditStat
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot set storage policy for "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirAttrOp
operator|.
name|setStoragePolicy
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|blockManager
argument_list|,
name|src
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
comment|/**    * unset storage policy set for a given file or a directory.    *    * @param src file/directory path    */
DECL|method|unsetStoragePolicy (String src)
name|void
name|unsetStoragePolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"unsetStoragePolicy"
decl_stmt|;
name|FileStatus
name|auditStat
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot unset storage policy for "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirAttrOp
operator|.
name|unsetStoragePolicy
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|blockManager
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the storage policy for a file or a directory.    *    * @param src    *          file/directory path    * @return storage policy object    */
DECL|method|getStoragePolicy (String src)
name|BlockStoragePolicy
name|getStoragePolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|FSDirAttrOp
operator|.
name|getStoragePolicy
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|blockManager
argument_list|,
name|src
argument_list|)
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"getStoragePolicy"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return All the existing block storage policies    */
DECL|method|getStoragePolicies ()
name|BlockStoragePolicy
index|[]
name|getStoragePolicies
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|FSDirAttrOp
operator|.
name|getStoragePolicies
argument_list|(
name|blockManager
argument_list|)
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"getStoragePolicies"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPreferredBlockSize (String src)
name|long
name|getPreferredBlockSize
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|FSDirAttrOp
operator|.
name|getPreferredBlockSize
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|)
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"getPreferredBlockSize"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If the file is within an encryption zone, select the appropriate     * CryptoProtocolVersion from the list provided by the client. Since the    * client may be newer, we need to handle unknown versions.    *    * @param zone EncryptionZone of the file    * @param supportedVersions List of supported protocol versions    * @return chosen protocol version    * @throws IOException    */
DECL|method|chooseProtocolVersion ( EncryptionZone zone, CryptoProtocolVersion[] supportedVersions)
name|CryptoProtocolVersion
name|chooseProtocolVersion
parameter_list|(
name|EncryptionZone
name|zone
parameter_list|,
name|CryptoProtocolVersion
index|[]
name|supportedVersions
parameter_list|)
throws|throws
name|UnknownCryptoProtocolVersionException
throws|,
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|zone
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|supportedVersions
argument_list|)
expr_stmt|;
comment|// Right now, we only support a single protocol version,
comment|// so simply look for it in the list of provided options
specifier|final
name|CryptoProtocolVersion
name|required
init|=
name|zone
operator|.
name|getVersion
argument_list|()
decl_stmt|;
for|for
control|(
name|CryptoProtocolVersion
name|c
range|:
name|supportedVersions
control|)
block|{
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|CryptoProtocolVersion
operator|.
name|UNKNOWN
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring unknown CryptoProtocolVersion provided by "
operator|+
literal|"client: "
operator|+
name|c
operator|.
name|getUnknownValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
name|required
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
throw|throw
operator|new
name|UnknownCryptoProtocolVersionException
argument_list|(
literal|"No crypto protocol versions provided by the client are supported."
operator|+
literal|" Client provided: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|supportedVersions
argument_list|)
operator|+
literal|" NameNode supports: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|CryptoProtocolVersion
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|/**    * Create a new file entry in the namespace.    *     * For description of parameters and exceptions thrown see    * {@link ClientProtocol#create}, except it returns valid file status upon    * success    */
DECL|method|startFile (String src, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, CryptoProtocolVersion[] supportedVersions, String ecPolicyName, boolean logRetryCache)
name|HdfsFileStatus
name|startFile
parameter_list|(
name|String
name|src
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|String
name|holder
parameter_list|,
name|String
name|clientMachine
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|CryptoProtocolVersion
index|[]
name|supportedVersions
parameter_list|,
name|String
name|ecPolicyName
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|HdfsFileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|startFileInt
argument_list|(
name|src
argument_list|,
name|permissions
argument_list|,
name|holder
argument_list|,
name|clientMachine
argument_list|,
name|flag
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|supportedVersions
argument_list|,
name|ecPolicyName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
literal|"create"
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
literal|"create"
argument_list|,
name|src
argument_list|,
name|status
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
DECL|method|startFileInt (String src, PermissionStatus permissions, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean createParent, short replication, long blockSize, CryptoProtocolVersion[] supportedVersions, String ecPolicyName, boolean logRetryCache)
specifier|private
name|HdfsFileStatus
name|startFileInt
parameter_list|(
name|String
name|src
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|String
name|holder
parameter_list|,
name|String
name|clientMachine
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|createParent
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|CryptoProtocolVersion
index|[]
name|supportedVersions
parameter_list|,
name|String
name|ecPolicyName
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"DIR* NameSystem.startFile: src="
argument_list|)
operator|.
name|append
argument_list|(
name|src
argument_list|)
operator|.
name|append
argument_list|(
literal|", holder="
argument_list|)
operator|.
name|append
argument_list|(
name|holder
argument_list|)
operator|.
name|append
argument_list|(
literal|", clientMachine="
argument_list|)
operator|.
name|append
argument_list|(
name|clientMachine
argument_list|)
operator|.
name|append
argument_list|(
literal|", createParent="
argument_list|)
operator|.
name|append
argument_list|(
name|createParent
argument_list|)
operator|.
name|append
argument_list|(
literal|", replication="
argument_list|)
operator|.
name|append
argument_list|(
name|replication
argument_list|)
operator|.
name|append
argument_list|(
literal|", createFlag="
argument_list|)
operator|.
name|append
argument_list|(
name|flag
argument_list|)
operator|.
name|append
argument_list|(
literal|", blockSize="
argument_list|)
operator|.
name|append
argument_list|(
name|blockSize
argument_list|)
operator|.
name|append
argument_list|(
literal|", supportedVersions="
argument_list|)
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|supportedVersions
argument_list|)
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|DFSUtil
operator|.
name|isValidName
argument_list|(
name|src
argument_list|)
operator|||
name|FSDirectory
operator|.
name|isExactReservedName
argument_list|(
name|src
argument_list|)
operator|||
operator|(
name|FSDirectory
operator|.
name|isReservedName
argument_list|(
name|src
argument_list|)
operator|&&
operator|!
name|FSDirectory
operator|.
name|isReservedRawName
argument_list|(
name|src
argument_list|)
operator|&&
operator|!
name|FSDirectory
operator|.
name|isReservedInodesName
argument_list|(
name|src
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|InvalidPathException
argument_list|(
name|src
argument_list|)
throw|;
block|}
name|boolean
name|shouldReplicate
init|=
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|SHOULD_REPLICATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldReplicate
operator|&&
operator|(
operator|!
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|ecPolicyName
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"SHOULD_REPLICATE flag and "
operator|+
literal|"ecPolicyName are exclusive parameters. Set both is not allowed!"
argument_list|)
throw|;
block|}
name|INodesInPath
name|iip
init|=
literal|null
decl_stmt|;
name|boolean
name|skipSync
init|=
literal|true
decl_stmt|;
comment|// until we do something that might create edits
name|HdfsFileStatus
name|stat
init|=
literal|null
decl_stmt|;
name|BlocksMapUpdateInfo
name|toRemoveBlocks
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot create file"
operator|+
name|src
argument_list|)
expr_stmt|;
name|iip
operator|=
name|FSDirWriteFileOp
operator|.
name|resolvePathForStartFile
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|flag
argument_list|,
name|createParent
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldReplicate
operator|||
operator|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|ecPolicyName
argument_list|)
operator|&&
operator|!
name|FSDirErasureCodingOp
operator|.
name|hasErasureCodingPolicy
argument_list|(
name|this
argument_list|,
name|iip
argument_list|)
operator|)
condition|)
block|{
name|blockManager
operator|.
name|verifyReplication
argument_list|(
name|src
argument_list|,
name|replication
argument_list|,
name|clientMachine
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockSize
operator|<
name|minBlockSize
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Specified block size is less than configured"
operator|+
literal|" minimum value ("
operator|+
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_MIN_BLOCK_SIZE_KEY
operator|+
literal|"): "
operator|+
name|blockSize
operator|+
literal|"< "
operator|+
name|minBlockSize
argument_list|)
throw|;
block|}
name|FileEncryptionInfo
name|feInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|iip
operator|.
name|isRaw
argument_list|()
operator|&&
name|provider
operator|!=
literal|null
condition|)
block|{
name|EncryptionKeyInfo
name|ezInfo
init|=
name|FSDirEncryptionZoneOp
operator|.
name|getEncryptionKeyInfo
argument_list|(
name|this
argument_list|,
name|iip
argument_list|,
name|supportedVersions
argument_list|)
decl_stmt|;
comment|// if the path has an encryption zone, the lock was released while
comment|// generating the EDEK.  re-resolve the path to ensure the namesystem
comment|// and/or EZ has not mutated
if|if
condition|(
name|ezInfo
operator|!=
literal|null
condition|)
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|iip
operator|=
name|FSDirWriteFileOp
operator|.
name|resolvePathForStartFile
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|iip
operator|.
name|getPath
argument_list|()
argument_list|,
name|flag
argument_list|,
name|createParent
argument_list|)
expr_stmt|;
name|feInfo
operator|=
name|FSDirEncryptionZoneOp
operator|.
name|getFileEncryptionInfo
argument_list|(
name|dir
argument_list|,
name|iip
argument_list|,
name|ezInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|skipSync
operator|=
literal|false
expr_stmt|;
comment|// following might generate edits
name|toRemoveBlocks
operator|=
operator|new
name|BlocksMapUpdateInfo
argument_list|()
expr_stmt|;
name|dir
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|stat
operator|=
name|FSDirWriteFileOp
operator|.
name|startFile
argument_list|(
name|this
argument_list|,
name|iip
argument_list|,
name|permissions
argument_list|,
name|holder
argument_list|,
name|clientMachine
argument_list|,
name|flag
argument_list|,
name|createParent
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|feInfo
argument_list|,
name|toRemoveBlocks
argument_list|,
name|shouldReplicate
argument_list|,
name|ecPolicyName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|skipSync
operator|=
name|e
operator|instanceof
name|StandbyException
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|dir
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
comment|// There might be transactions logged while trying to recover the lease.
comment|// They need to be sync'ed even when an exception was thrown.
if|if
condition|(
operator|!
name|skipSync
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
if|if
condition|(
name|toRemoveBlocks
operator|!=
literal|null
condition|)
block|{
name|removeBlocks
argument_list|(
name|toRemoveBlocks
argument_list|)
expr_stmt|;
name|toRemoveBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|stat
return|;
block|}
comment|/**    * Recover lease;    * Immediately revoke the lease of the current lease holder and start lease    * recovery so that the file can be forced to be closed.    *     * @param src the path of the file to start lease recovery    * @param holder the lease holder's name    * @param clientMachine the client machine's name    * @return true if the file is already closed or    *         if the lease can be released and the file can be closed.    * @throws IOException    */
DECL|method|recoverLease (String src, String holder, String clientMachine)
name|boolean
name|recoverLease
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|holder
parameter_list|,
name|String
name|clientMachine
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|skipSync
init|=
literal|false
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot recover the lease of "
operator|+
name|src
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|dir
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|src
operator|=
name|iip
operator|.
name|getPath
argument_list|()
expr_stmt|;
specifier|final
name|INodeFile
name|inode
init|=
name|INodeFile
operator|.
name|valueOf
argument_list|(
name|iip
operator|.
name|getLastINode
argument_list|()
argument_list|,
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inode
operator|.
name|isUnderConstruction
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|isPermissionEnabled
condition|)
block|{
name|dir
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
return|return
name|recoverLeaseInternal
argument_list|(
name|RecoverLeaseOp
operator|.
name|RECOVER_LEASE
argument_list|,
name|iip
argument_list|,
name|src
argument_list|,
name|holder
argument_list|,
name|clientMachine
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|StandbyException
name|se
parameter_list|)
block|{
name|skipSync
operator|=
literal|true
expr_stmt|;
throw|throw
name|se
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"recoverLease"
argument_list|)
expr_stmt|;
comment|// There might be transactions logged while trying to recover the lease.
comment|// They need to be sync'ed even when an exception was thrown.
if|if
condition|(
operator|!
name|skipSync
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|enum|RecoverLeaseOp
enum|enum
name|RecoverLeaseOp
block|{
DECL|enumConstant|CREATE_FILE
name|CREATE_FILE
block|,
DECL|enumConstant|APPEND_FILE
name|APPEND_FILE
block|,
DECL|enumConstant|TRUNCATE_FILE
name|TRUNCATE_FILE
block|,
DECL|enumConstant|RECOVER_LEASE
name|RECOVER_LEASE
block|;
DECL|method|getExceptionMessage (String src, String holder, String clientMachine, String reason)
specifier|private
name|String
name|getExceptionMessage
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|holder
parameter_list|,
name|String
name|clientMachine
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
literal|"Failed to "
operator|+
name|this
operator|+
literal|" "
operator|+
name|src
operator|+
literal|" for "
operator|+
name|holder
operator|+
literal|" on "
operator|+
name|clientMachine
operator|+
literal|" because "
operator|+
name|reason
return|;
block|}
block|}
DECL|method|recoverLeaseInternal (RecoverLeaseOp op, INodesInPath iip, String src, String holder, String clientMachine, boolean force)
name|boolean
name|recoverLeaseInternal
parameter_list|(
name|RecoverLeaseOp
name|op
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|holder
parameter_list|,
name|String
name|clientMachine
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
name|INodeFile
name|file
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
operator|.
name|asFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isUnderConstruction
argument_list|()
condition|)
block|{
comment|//
comment|// If the file is under construction , then it must be in our
comment|// leases. Find the appropriate lease record.
comment|//
name|Lease
name|lease
init|=
name|leaseManager
operator|.
name|getLease
argument_list|(
name|holder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|force
operator|&&
name|lease
operator|!=
literal|null
condition|)
block|{
name|Lease
name|leaseFile
init|=
name|leaseManager
operator|.
name|getLease
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaseFile
operator|!=
literal|null
operator|&&
name|leaseFile
operator|.
name|equals
argument_list|(
name|lease
argument_list|)
condition|)
block|{
comment|// We found the lease for this file but the original
comment|// holder is trying to obtain it again.
throw|throw
operator|new
name|AlreadyBeingCreatedException
argument_list|(
name|op
operator|.
name|getExceptionMessage
argument_list|(
name|src
argument_list|,
name|holder
argument_list|,
name|clientMachine
argument_list|,
name|holder
operator|+
literal|" is already the current lease holder."
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|//
comment|// Find the original holder.
comment|//
name|FileUnderConstructionFeature
name|uc
init|=
name|file
operator|.
name|getFileUnderConstructionFeature
argument_list|()
decl_stmt|;
name|String
name|clientName
init|=
name|uc
operator|.
name|getClientName
argument_list|()
decl_stmt|;
name|lease
operator|=
name|leaseManager
operator|.
name|getLease
argument_list|(
name|clientName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lease
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyBeingCreatedException
argument_list|(
name|op
operator|.
name|getExceptionMessage
argument_list|(
name|src
argument_list|,
name|holder
argument_list|,
name|clientMachine
argument_list|,
literal|"the file is under construction but no leases found."
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|force
condition|)
block|{
comment|// close now: no need to wait for soft lease expiration and
comment|// close only the file src
name|LOG
operator|.
name|info
argument_list|(
literal|"recoverLease: "
operator|+
name|lease
operator|+
literal|", src="
operator|+
name|src
operator|+
literal|" from client "
operator|+
name|clientName
argument_list|)
expr_stmt|;
return|return
name|internalReleaseLease
argument_list|(
name|lease
argument_list|,
name|src
argument_list|,
name|iip
argument_list|,
name|holder
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
name|lease
operator|.
name|getHolder
argument_list|()
operator|.
name|equals
argument_list|(
name|clientName
argument_list|)
operator|:
literal|"Current lease holder "
operator|+
name|lease
operator|.
name|getHolder
argument_list|()
operator|+
literal|" does not match file creator "
operator|+
name|clientName
assert|;
comment|//
comment|// If the original holder has not renewed in the last SOFTLIMIT
comment|// period, then start lease recovery.
comment|//
if|if
condition|(
name|lease
operator|.
name|expiredSoftLimit
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"startFile: recover "
operator|+
name|lease
operator|+
literal|", src="
operator|+
name|src
operator|+
literal|" client "
operator|+
name|clientName
argument_list|)
expr_stmt|;
if|if
condition|(
name|internalReleaseLease
argument_list|(
name|lease
argument_list|,
name|src
argument_list|,
name|iip
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RecoveryInProgressException
argument_list|(
name|op
operator|.
name|getExceptionMessage
argument_list|(
name|src
argument_list|,
name|holder
argument_list|,
name|clientMachine
argument_list|,
literal|"lease recovery is in progress. Try again later."
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
specifier|final
name|BlockInfo
name|lastBlock
init|=
name|file
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastBlock
operator|!=
literal|null
operator|&&
name|lastBlock
operator|.
name|getBlockUCState
argument_list|()
operator|==
name|BlockUCState
operator|.
name|UNDER_RECOVERY
condition|)
block|{
throw|throw
operator|new
name|RecoveryInProgressException
argument_list|(
name|op
operator|.
name|getExceptionMessage
argument_list|(
name|src
argument_list|,
name|holder
argument_list|,
name|clientMachine
argument_list|,
literal|"another recovery is in progress by "
operator|+
name|clientName
operator|+
literal|" on "
operator|+
name|uc
operator|.
name|getClientMachine
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|AlreadyBeingCreatedException
argument_list|(
name|op
operator|.
name|getExceptionMessage
argument_list|(
name|src
argument_list|,
name|holder
argument_list|,
name|clientMachine
argument_list|,
literal|"this file lease is currently owned by "
operator|+
name|clientName
operator|+
literal|" on "
operator|+
name|uc
operator|.
name|getClientMachine
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Append to an existing file in the namespace.    */
DECL|method|appendFile (String srcArg, String holder, String clientMachine, EnumSet<CreateFlag> flag, boolean logRetryCache)
name|LastBlockWithStatus
name|appendFile
parameter_list|(
name|String
name|srcArg
parameter_list|,
name|String
name|holder
parameter_list|,
name|String
name|clientMachine
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"append"
decl_stmt|;
name|boolean
name|newBlock
init|=
name|flag
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|NEW_BLOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|newBlock
condition|)
block|{
name|requireEffectiveLayoutVersionForFeature
argument_list|(
name|Feature
operator|.
name|APPEND_NEW_BLOCK
argument_list|)
expr_stmt|;
block|}
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"DIR* NameSystem.appendFile: src={}, holder={}, clientMachine={}"
argument_list|,
name|srcArg
argument_list|,
name|holder
argument_list|,
name|clientMachine
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|skipSync
init|=
literal|false
decl_stmt|;
name|LastBlockWithStatus
name|lbs
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot append to file"
operator|+
name|srcArg
argument_list|)
expr_stmt|;
name|lbs
operator|=
name|FSDirAppendOp
operator|.
name|appendFile
argument_list|(
name|this
argument_list|,
name|srcArg
argument_list|,
name|pc
argument_list|,
name|holder
argument_list|,
name|clientMachine
argument_list|,
name|newBlock
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StandbyException
name|se
parameter_list|)
block|{
name|skipSync
operator|=
literal|true
expr_stmt|;
throw|throw
name|se
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
comment|// There might be transactions logged while trying to recover the lease
comment|// They need to be sync'ed even when an exception was thrown.
if|if
condition|(
operator|!
name|skipSync
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|srcArg
argument_list|)
expr_stmt|;
return|return
name|lbs
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|srcArg
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|getExtendedBlock (Block blk)
name|ExtendedBlock
name|getExtendedBlock
parameter_list|(
name|Block
name|blk
parameter_list|)
block|{
return|return
operator|new
name|ExtendedBlock
argument_list|(
name|getBlockPoolId
argument_list|()
argument_list|,
name|blk
argument_list|)
return|;
block|}
DECL|method|setBlockPoolId (String bpid)
name|void
name|setBlockPoolId
parameter_list|(
name|String
name|bpid
parameter_list|)
block|{
name|blockManager
operator|.
name|setBlockPoolId
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
block|}
comment|/**    * The client would like to obtain an additional block for the indicated    * filename (which is being written-to).  Return an array that consists    * of the block, plus a set of machines.  The first on this list should    * be where the client writes data.  Subsequent items in the list must    * be provided in the connection to the first datanode.    *    * Make sure the previous blocks have been reported by datanodes and    * are replicated.  Will return an empty 2-elt array if we want the    * client to "try again later".    */
DECL|method|getAdditionalBlock ( String src, long fileId, String clientName, ExtendedBlock previous, DatanodeInfo[] excludedNodes, String[] favoredNodes, EnumSet<AddBlockFlag> flags)
name|LocatedBlock
name|getAdditionalBlock
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|fileId
parameter_list|,
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|previous
parameter_list|,
name|DatanodeInfo
index|[]
name|excludedNodes
parameter_list|,
name|String
index|[]
name|favoredNodes
parameter_list|,
name|EnumSet
argument_list|<
name|AddBlockFlag
argument_list|>
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"getAdditionalBlock"
decl_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"BLOCK* getAdditionalBlock: {}  inodeId {}"
operator|+
literal|" for {}"
argument_list|,
name|src
argument_list|,
name|fileId
argument_list|,
name|clientName
argument_list|)
expr_stmt|;
name|LocatedBlock
index|[]
name|onRetryBlock
init|=
operator|new
name|LocatedBlock
index|[
literal|1
index|]
decl_stmt|;
name|FSDirWriteFileOp
operator|.
name|ValidateAddBlockResult
name|r
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|r
operator|=
name|FSDirWriteFileOp
operator|.
name|validateAddBlock
argument_list|(
name|this
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|fileId
argument_list|,
name|clientName
argument_list|,
name|previous
argument_list|,
name|onRetryBlock
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
assert|assert
name|onRetryBlock
index|[
literal|0
index|]
operator|!=
literal|null
operator|:
literal|"Retry block is null"
assert|;
comment|// This is a retry. Just return the last block.
return|return
name|onRetryBlock
index|[
literal|0
index|]
return|;
block|}
name|DatanodeStorageInfo
index|[]
name|targets
init|=
name|FSDirWriteFileOp
operator|.
name|chooseTargetForNewBlock
argument_list|(
name|blockManager
argument_list|,
name|src
argument_list|,
name|excludedNodes
argument_list|,
name|favoredNodes
argument_list|,
name|flags
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
name|LocatedBlock
name|lb
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|lb
operator|=
name|FSDirWriteFileOp
operator|.
name|storeAllocatedBlock
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|fileId
argument_list|,
name|clientName
argument_list|,
name|previous
argument_list|,
name|targets
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
return|return
name|lb
return|;
block|}
comment|/** @see ClientProtocol#getAdditionalDatanode */
DECL|method|getAdditionalDatanode (String src, long fileId, final ExtendedBlock blk, final DatanodeInfo[] existings, final String[] storageIDs, final Set<Node> excludes, final int numAdditionalNodes, final String clientName )
name|LocatedBlock
name|getAdditionalDatanode
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|fileId
parameter_list|,
specifier|final
name|ExtendedBlock
name|blk
parameter_list|,
specifier|final
name|DatanodeInfo
index|[]
name|existings
parameter_list|,
specifier|final
name|String
index|[]
name|storageIDs
parameter_list|,
specifier|final
name|Set
argument_list|<
name|Node
argument_list|>
name|excludes
parameter_list|,
specifier|final
name|int
name|numAdditionalNodes
parameter_list|,
specifier|final
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
comment|//check if the feature is enabled
name|dtpReplaceDatanodeOnFailure
operator|.
name|checkEnabled
argument_list|()
expr_stmt|;
name|Node
name|clientnode
init|=
literal|null
decl_stmt|;
name|String
name|clientMachine
decl_stmt|;
specifier|final
name|long
name|preferredblocksize
decl_stmt|;
specifier|final
name|byte
name|storagePolicyID
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|chosen
decl_stmt|;
specifier|final
name|BlockType
name|blockType
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|//check safe mode
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot add datanode; src="
operator|+
name|src
operator|+
literal|", blk="
operator|+
name|blk
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|dir
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|src
operator|=
name|iip
operator|.
name|getPath
argument_list|()
expr_stmt|;
comment|//check lease
specifier|final
name|INodeFile
name|file
init|=
name|checkLease
argument_list|(
name|iip
argument_list|,
name|clientName
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|clientMachine
operator|=
name|file
operator|.
name|getFileUnderConstructionFeature
argument_list|()
operator|.
name|getClientMachine
argument_list|()
expr_stmt|;
name|clientnode
operator|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeByHost
argument_list|(
name|clientMachine
argument_list|)
expr_stmt|;
name|preferredblocksize
operator|=
name|file
operator|.
name|getPreferredBlockSize
argument_list|()
expr_stmt|;
name|storagePolicyID
operator|=
name|file
operator|.
name|getStoragePolicyID
argument_list|()
expr_stmt|;
name|blockType
operator|=
name|file
operator|.
name|getBlockType
argument_list|()
expr_stmt|;
comment|//find datanode storages
specifier|final
name|DatanodeManager
name|dm
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
name|chosen
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dm
operator|.
name|getDatanodeStorageInfos
argument_list|(
name|existings
argument_list|,
name|storageIDs
argument_list|,
literal|"src=%s, fileId=%d, blk=%s, clientName=%s, clientMachine=%s"
argument_list|,
name|src
argument_list|,
name|fileId
argument_list|,
name|blk
argument_list|,
name|clientName
argument_list|,
name|clientMachine
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"getAdditionalDatanode"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientnode
operator|==
literal|null
condition|)
block|{
name|clientnode
operator|=
name|FSDirWriteFileOp
operator|.
name|getClientNode
argument_list|(
name|blockManager
argument_list|,
name|clientMachine
argument_list|)
expr_stmt|;
block|}
comment|// choose new datanodes.
specifier|final
name|DatanodeStorageInfo
index|[]
name|targets
init|=
name|blockManager
operator|.
name|chooseTarget4AdditionalDatanode
argument_list|(
name|src
argument_list|,
name|numAdditionalNodes
argument_list|,
name|clientnode
argument_list|,
name|chosen
argument_list|,
name|excludes
argument_list|,
name|preferredblocksize
argument_list|,
name|storagePolicyID
argument_list|,
name|blockType
argument_list|)
decl_stmt|;
specifier|final
name|LocatedBlock
name|lb
init|=
name|BlockManager
operator|.
name|newLocatedBlock
argument_list|(
name|blk
argument_list|,
name|targets
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|blockManager
operator|.
name|setBlockToken
argument_list|(
name|lb
argument_list|,
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|COPY
argument_list|)
expr_stmt|;
return|return
name|lb
return|;
block|}
comment|/**    * The client would like to let go of the given block    */
DECL|method|abandonBlock (ExtendedBlock b, long fileId, String src, String holder)
name|void
name|abandonBlock
parameter_list|(
name|ExtendedBlock
name|b
parameter_list|,
name|long
name|fileId
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|holder
parameter_list|)
throws|throws
name|IOException
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"BLOCK* NameSystem.abandonBlock: {} of file {}"
argument_list|,
name|b
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot abandon block "
operator|+
name|b
operator|+
literal|" for file"
operator|+
name|src
argument_list|)
expr_stmt|;
name|FSDirWriteFileOp
operator|.
name|abandonBlock
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|b
argument_list|,
name|fileId
argument_list|,
name|src
argument_list|,
name|holder
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"BLOCK* NameSystem.abandonBlock: {} is "
operator|+
literal|"removed from pendingCreates"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"abandonBlock"
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
DECL|method|leaseExceptionString (String src, long fileId, String holder)
specifier|private
name|String
name|leaseExceptionString
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|fileId
parameter_list|,
name|String
name|holder
parameter_list|)
block|{
specifier|final
name|Lease
name|lease
init|=
name|leaseManager
operator|.
name|getLease
argument_list|(
name|holder
argument_list|)
decl_stmt|;
return|return
name|src
operator|+
literal|" (inode "
operator|+
name|fileId
operator|+
literal|") "
operator|+
operator|(
name|lease
operator|!=
literal|null
condition|?
name|lease
operator|.
name|toString
argument_list|()
else|:
literal|"Holder "
operator|+
name|holder
operator|+
literal|" does not have any open files."
operator|)
return|;
block|}
DECL|method|checkLease (INodesInPath iip, String holder, long fileId)
name|INodeFile
name|checkLease
parameter_list|(
name|INodesInPath
name|iip
parameter_list|,
name|String
name|holder
parameter_list|,
name|long
name|fileId
parameter_list|)
throws|throws
name|LeaseExpiredException
throws|,
name|FileNotFoundException
block|{
name|String
name|src
init|=
name|iip
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
assert|assert
name|hasReadLock
argument_list|()
assert|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|leaseExceptionString
argument_list|(
name|src
argument_list|,
name|fileId
argument_list|,
name|holder
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|inode
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LeaseExpiredException
argument_list|(
literal|"INode is not a regular file: "
operator|+
name|leaseExceptionString
argument_list|(
name|src
argument_list|,
name|fileId
argument_list|,
name|holder
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|INodeFile
name|file
init|=
name|inode
operator|.
name|asFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isUnderConstruction
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LeaseExpiredException
argument_list|(
literal|"File is not open for writing: "
operator|+
name|leaseExceptionString
argument_list|(
name|src
argument_list|,
name|fileId
argument_list|,
name|holder
argument_list|)
argument_list|)
throw|;
block|}
comment|// No further modification is allowed on a deleted file.
comment|// A file is considered deleted, if it is not in the inodeMap or is marked
comment|// as deleted in the snapshot feature.
if|if
condition|(
name|isFileDeleted
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File is deleted: "
operator|+
name|leaseExceptionString
argument_list|(
name|src
argument_list|,
name|fileId
argument_list|,
name|holder
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|String
name|owner
init|=
name|file
operator|.
name|getFileUnderConstructionFeature
argument_list|()
operator|.
name|getClientName
argument_list|()
decl_stmt|;
if|if
condition|(
name|holder
operator|!=
literal|null
operator|&&
operator|!
name|owner
operator|.
name|equals
argument_list|(
name|holder
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LeaseExpiredException
argument_list|(
literal|"Client (="
operator|+
name|holder
operator|+
literal|") is not the lease owner (="
operator|+
name|owner
operator|+
literal|": "
operator|+
name|leaseExceptionString
argument_list|(
name|src
argument_list|,
name|fileId
argument_list|,
name|holder
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
comment|/**    * Complete in-progress write to the given file.    * @return true if successful, false if the client should continue to retry    *         (e.g if not all blocks have reached minimum replication yet)    * @throws IOException on error (eg lease mismatch, file not open, file deleted)    */
DECL|method|completeFile (final String src, String holder, ExtendedBlock last, long fileId)
name|boolean
name|completeFile
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
name|String
name|holder
parameter_list|,
name|ExtendedBlock
name|last
parameter_list|,
name|long
name|fileId
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot complete file "
operator|+
name|src
argument_list|)
expr_stmt|;
name|success
operator|=
name|FSDirWriteFileOp
operator|.
name|completeFile
argument_list|(
name|this
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|holder
argument_list|,
name|last
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"completeFile"
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|info
argument_list|(
literal|"DIR* completeFile: "
operator|+
name|src
operator|+
literal|" is closed by "
operator|+
name|holder
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
comment|/**    * Create new block with a unique block id and a new generation stamp.    * @param blockType is the file under striping or contiguous layout?    */
DECL|method|createNewBlock (BlockType blockType)
name|Block
name|createNewBlock
parameter_list|(
name|BlockType
name|blockType
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
name|Block
name|b
init|=
operator|new
name|Block
argument_list|(
name|nextBlockId
argument_list|(
name|blockType
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Increment the generation stamp for every new block.
name|b
operator|.
name|setGenerationStamp
argument_list|(
name|nextGenerationStamp
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * Check that the indicated file's blocks are present and    * replicated.  If not, return false. If checkall is true, then check    * all blocks, otherwise check only penultimate block.    */
DECL|method|checkFileProgress (String src, INodeFile v, boolean checkall)
name|boolean
name|checkFileProgress
parameter_list|(
name|String
name|src
parameter_list|,
name|INodeFile
name|v
parameter_list|,
name|boolean
name|checkall
parameter_list|)
block|{
assert|assert
name|hasReadLock
argument_list|()
assert|;
if|if
condition|(
name|checkall
condition|)
block|{
return|return
name|checkBlocksComplete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|,
name|v
operator|.
name|getBlocks
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|BlockInfo
index|[]
name|blocks
init|=
name|v
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|blocks
operator|.
name|length
operator|-
name|numCommittedAllowed
operator|-
literal|2
decl_stmt|;
return|return
name|i
operator|<
literal|0
operator|||
name|blocks
index|[
name|i
index|]
operator|==
literal|null
operator|||
name|checkBlocksComplete
argument_list|(
name|src
argument_list|,
literal|false
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
return|;
block|}
block|}
comment|/**    * Check if the blocks are COMPLETE;    * it may allow the last block to be COMMITTED.    */
DECL|method|checkBlocksComplete (String src, boolean allowCommittedBlock, BlockInfo... blocks)
specifier|private
name|boolean
name|checkBlocksComplete
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|allowCommittedBlock
parameter_list|,
name|BlockInfo
modifier|...
name|blocks
parameter_list|)
block|{
specifier|final
name|int
name|n
init|=
name|allowCommittedBlock
condition|?
name|numCommittedAllowed
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|short
name|min
init|=
name|blockManager
operator|.
name|getMinStorageNum
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|err
init|=
name|INodeFile
operator|.
name|checkBlockComplete
argument_list|(
name|blocks
argument_list|,
name|i
argument_list|,
name|n
argument_list|,
name|min
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|numNodes
init|=
name|blocks
index|[
name|i
index|]
operator|.
name|numNodes
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"BLOCK* "
operator|+
name|err
operator|+
literal|"(numNodes= "
operator|+
name|numNodes
operator|+
operator|(
name|numNodes
operator|<
name|min
condition|?
literal|"< "
else|:
literal|">= "
operator|)
operator|+
literal|" minimum = "
operator|+
name|min
operator|+
literal|") in file "
operator|+
name|src
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Change the indicated filename.     * @deprecated Use {@link #renameTo(String, String, boolean,    * Options.Rename...)} instead.    */
annotation|@
name|Deprecated
DECL|method|renameTo (String src, String dst, boolean logRetryCache)
name|boolean
name|renameTo
parameter_list|(
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"rename"
decl_stmt|;
name|FSDirRenameOp
operator|.
name|RenameResult
name|ret
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot rename "
operator|+
name|src
argument_list|)
expr_stmt|;
name|ret
operator|=
name|FSDirRenameOp
operator|.
name|renameToInt
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
name|ret
operator|.
name|success
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|ret
operator|.
name|auditStat
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
DECL|method|renameTo (final String src, final String dst, boolean logRetryCache, Options.Rename... options)
name|void
name|renameTo
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|String
name|dst
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|,
name|Options
operator|.
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"rename"
decl_stmt|;
name|FSDirRenameOp
operator|.
name|RenameResult
name|res
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot rename "
operator|+
name|src
argument_list|)
expr_stmt|;
name|res
operator|=
name|FSDirRenameOp
operator|.
name|renameToInt
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|logRetryCache
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
operator|+
literal|" (options="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|options
argument_list|)
operator|+
literal|")"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|BlocksMapUpdateInfo
name|collectedBlocks
init|=
name|res
operator|.
name|collectedBlocks
decl_stmt|;
if|if
condition|(
operator|!
name|collectedBlocks
operator|.
name|getToDeleteList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|removeBlocks
argument_list|(
name|collectedBlocks
argument_list|)
expr_stmt|;
name|collectedBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
operator|+
literal|" (options="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|options
argument_list|)
operator|+
literal|")"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|res
operator|.
name|auditStat
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove the indicated file from namespace.    *     * @see ClientProtocol#delete(String, boolean) for detailed description and     * description of exceptions    */
DECL|method|delete (String src, boolean recursive, boolean logRetryCache)
name|boolean
name|delete
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"delete"
decl_stmt|;
name|BlocksMapUpdateInfo
name|toRemovedBlocks
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot delete "
operator|+
name|src
argument_list|)
expr_stmt|;
name|toRemovedBlocks
operator|=
name|FSDirDeleteOp
operator|.
name|delete
argument_list|(
name|this
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|recursive
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|ret
operator|=
name|toRemovedBlocks
operator|!=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
if|if
condition|(
name|toRemovedBlocks
operator|!=
literal|null
condition|)
block|{
name|removeBlocks
argument_list|(
name|toRemovedBlocks
argument_list|)
expr_stmt|;
comment|// Incremental deletion of blocks
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|getPermissionChecker ()
name|FSPermissionChecker
name|getPermissionChecker
parameter_list|()
throws|throws
name|AccessControlException
block|{
return|return
name|dir
operator|.
name|getPermissionChecker
argument_list|()
return|;
block|}
comment|/**    * From the given list, incrementally remove the blocks from blockManager    * Writelock is dropped and reacquired every BLOCK_DELETION_INCREMENT to    * ensure that other waiters on the lock can get in. See HDFS-2938    *     * @param blocks    *          An instance of {@link BlocksMapUpdateInfo} which contains a list    *          of blocks that need to be removed from blocksMap    */
DECL|method|removeBlocks (BlocksMapUpdateInfo blocks)
name|void
name|removeBlocks
parameter_list|(
name|BlocksMapUpdateInfo
name|blocks
parameter_list|)
block|{
name|List
argument_list|<
name|BlockInfo
argument_list|>
name|toDeleteList
init|=
name|blocks
operator|.
name|getToDeleteList
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|BlockInfo
argument_list|>
name|iter
init|=
name|toDeleteList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BLOCK_DELETION_INCREMENT
operator|&&
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|blockManager
operator|.
name|removeBlock
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"removeBlocks"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Remove leases and inodes related to a given path    * @param removedUCFiles INodes whose leases need to be released    * @param removedINodes Containing the list of inodes to be removed from    *                      inodesMap    * @param acquireINodeMapLock Whether to acquire the lock for inode removal    */
DECL|method|removeLeasesAndINodes (List<Long> removedUCFiles, List<INode> removedINodes, final boolean acquireINodeMapLock)
name|void
name|removeLeasesAndINodes
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|removedUCFiles
parameter_list|,
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|,
specifier|final
name|boolean
name|acquireINodeMapLock
parameter_list|)
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
for|for
control|(
name|long
name|i
range|:
name|removedUCFiles
control|)
block|{
name|leaseManager
operator|.
name|removeLease
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// remove inodes from inodesMap
if|if
condition|(
name|removedINodes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|acquireINodeMapLock
condition|)
block|{
name|dir
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|dir
operator|.
name|removeFromInodeMap
argument_list|(
name|removedINodes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|acquireINodeMapLock
condition|)
block|{
name|dir
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
name|removedINodes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the file info for a specific file.    *    * @param src The string representation of the path to the file    * @param resolveLink whether to throw UnresolvedLinkException    *        if src refers to a symlink    *    * @param needLocation Include {@link LocatedBlocks} in result.    * @param needBlockToken Include block tokens in {@link LocatedBlocks}    * @throws AccessControlException if access is denied    * @throws UnresolvedLinkException if a symlink is encountered.    *    * @return object containing information regarding the file    *         or null if file not found    * @throws StandbyException    */
DECL|method|getFileInfo (final String src, boolean resolveLink, boolean needLocation, boolean needBlockToken)
name|HdfsFileStatus
name|getFileInfo
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
name|boolean
name|resolveLink
parameter_list|,
name|boolean
name|needLocation
parameter_list|,
name|boolean
name|needBlockToken
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if the client requests block tokens, then it can read data blocks
comment|// and should appear in the audit log as if getBlockLocations had been
comment|// called
specifier|final
name|String
name|operationName
init|=
name|needBlockToken
condition|?
literal|"open"
else|:
literal|"getfileinfo"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|HdfsFileStatus
name|stat
init|=
literal|null
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|stat
operator|=
name|FSDirStatAndListingOp
operator|.
name|getFileInfo
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|resolveLink
argument_list|,
name|needLocation
argument_list|,
name|needBlockToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
name|stat
return|;
block|}
comment|/**    * Returns true if the file is closed    */
DECL|method|isFileClosed (final String src)
name|boolean
name|isFileClosed
parameter_list|(
specifier|final
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"isFileClosed"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
name|FSDirStatAndListingOp
operator|.
name|isFileClosed
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create all the necessary directories    */
DECL|method|mkdirs (String src, PermissionStatus permissions, boolean createParent)
name|boolean
name|mkdirs
parameter_list|(
name|String
name|src
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"mkdirs"
decl_stmt|;
name|FileStatus
name|auditStat
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot create directory "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirMkdirOp
operator|.
name|mkdirs
argument_list|(
name|this
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|permissions
argument_list|,
name|createParent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Get the content summary for a specific file/dir.    *    * @param src The string representation of the path to the file    *    * @throws AccessControlException if access is denied    * @throws UnresolvedLinkException if a symlink is encountered.    * @throws FileNotFoundException if no file exists    * @throws StandbyException    * @throws IOException for issues with writing to the audit log    *    * @return object containing information regarding the file    *         or null if file not found    */
DECL|method|getContentSummary (final String src)
name|ContentSummary
name|getContentSummary
parameter_list|(
specifier|final
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
literal|"contentSummary"
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|ContentSummary
name|cs
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|cs
operator|=
name|FSDirStatAndListingOp
operator|.
name|getContentSummary
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
name|cs
return|;
block|}
comment|/**    * Get the quota usage for a specific file/dir.    *    * @param src The string representation of the path to the file    *    * @throws AccessControlException if access is denied    * @throws UnresolvedLinkException if a symlink is encountered.    * @throws FileNotFoundException if no file exists    * @throws StandbyException    * @throws IOException for issues with writing to the audit log    *    * @return object containing information regarding the file    *         or null if file not found    */
DECL|method|getQuotaUsage (final String src)
name|QuotaUsage
name|getQuotaUsage
parameter_list|(
specifier|final
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
literal|"quotaUsage"
decl_stmt|;
name|QuotaUsage
name|quotaUsage
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|quotaUsage
operator|=
name|FSDirStatAndListingOp
operator|.
name|getQuotaUsage
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
name|quotaUsage
return|;
block|}
comment|/**    * Set the namespace quota and storage space quota for a directory.    * See {@link ClientProtocol#setQuota(String, long, long, StorageType)} for the    * contract.    *     * Note: This does not support ".inodes" relative path.    */
DECL|method|setQuota (String src, long nsQuota, long ssQuota, StorageType type)
name|void
name|setQuota
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|nsQuota
parameter_list|,
name|long
name|ssQuota
parameter_list|,
name|StorageType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|requireEffectiveLayoutVersionForFeature
argument_list|(
name|Feature
operator|.
name|QUOTA_BY_STORAGE_TYPE
argument_list|)
expr_stmt|;
block|}
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
name|getQuotaCommand
argument_list|(
name|nsQuota
argument_list|,
name|ssQuota
argument_list|)
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot set quota on "
operator|+
name|src
argument_list|)
expr_stmt|;
name|FSDirAttrOp
operator|.
name|setQuota
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|nsQuota
argument_list|,
name|ssQuota
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
comment|/** Persist all metadata about this file.    * @param src The string representation of the path    * @param fileId The inode ID that we're fsyncing.  Older clients will pass    *               INodeId.GRANDFATHER_INODE_ID here.    * @param clientName The string representation of the client    * @param lastBlockLength The length of the last block     *                        under construction reported from client.    * @throws IOException if path does not exist    */
DECL|method|fsync (String src, long fileId, String clientName, long lastBlockLength)
name|void
name|fsync
parameter_list|(
name|String
name|src
parameter_list|,
name|long
name|fileId
parameter_list|,
name|String
name|clientName
parameter_list|,
name|long
name|lastBlockLength
parameter_list|)
throws|throws
name|IOException
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|info
argument_list|(
literal|"BLOCK* fsync: "
operator|+
name|src
operator|+
literal|" for "
operator|+
name|clientName
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot fsync file "
operator|+
name|src
argument_list|)
expr_stmt|;
name|INodesInPath
name|iip
init|=
name|dir
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
name|src
operator|=
name|iip
operator|.
name|getPath
argument_list|()
expr_stmt|;
specifier|final
name|INodeFile
name|pendingFile
init|=
name|checkLease
argument_list|(
name|iip
argument_list|,
name|clientName
argument_list|,
name|fileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastBlockLength
operator|>
literal|0
condition|)
block|{
name|pendingFile
operator|.
name|getFileUnderConstructionFeature
argument_list|()
operator|.
name|updateLengthOfLastBlock
argument_list|(
name|pendingFile
argument_list|,
name|lastBlockLength
argument_list|)
expr_stmt|;
block|}
name|FSDirWriteFileOp
operator|.
name|persistBlocks
argument_list|(
name|dir
argument_list|,
name|src
argument_list|,
name|pendingFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"fsync"
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
comment|/**    * Move a file that is being written to be immutable.    * @param src The filename    * @param lease The lease for the client creating the file    * @param recoveryLeaseHolder reassign lease to this holder if the last block    *        needs recovery; keep current holder if null.    * @throws AlreadyBeingCreatedException if file is waiting to achieve minimal    *         replication;<br>    *         RecoveryInProgressException if lease recovery is in progress.<br>    *         IOException in case of an error.    * @return true  if file has been successfully finalized and closed or     *         false if block recovery has been initiated. Since the lease owner    *         has been changed and logged, caller should call logSync().    */
DECL|method|internalReleaseLease (Lease lease, String src, INodesInPath iip, String recoveryLeaseHolder)
name|boolean
name|internalReleaseLease
parameter_list|(
name|Lease
name|lease
parameter_list|,
name|String
name|src
parameter_list|,
name|INodesInPath
name|iip
parameter_list|,
name|String
name|recoveryLeaseHolder
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering "
operator|+
name|lease
operator|+
literal|", src="
operator|+
name|src
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|isInSafeMode
argument_list|()
assert|;
assert|assert
name|hasWriteLock
argument_list|()
assert|;
specifier|final
name|INodeFile
name|pendingFile
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
operator|.
name|asFile
argument_list|()
decl_stmt|;
name|int
name|nrBlocks
init|=
name|pendingFile
operator|.
name|numBlocks
argument_list|()
decl_stmt|;
name|BlockInfo
index|[]
name|blocks
init|=
name|pendingFile
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|int
name|nrCompleteBlocks
decl_stmt|;
name|BlockInfo
name|curBlock
init|=
literal|null
decl_stmt|;
for|for
control|(
name|nrCompleteBlocks
operator|=
literal|0
init|;
name|nrCompleteBlocks
operator|<
name|nrBlocks
condition|;
name|nrCompleteBlocks
operator|++
control|)
block|{
name|curBlock
operator|=
name|blocks
index|[
name|nrCompleteBlocks
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|curBlock
operator|.
name|isComplete
argument_list|()
condition|)
break|break;
assert|assert
name|blockManager
operator|.
name|hasMinStorage
argument_list|(
name|curBlock
argument_list|)
operator|:
literal|"A COMPLETE block is not minimally replicated in "
operator|+
name|src
assert|;
block|}
comment|// If there are no incomplete blocks associated with this file,
comment|// then reap lease immediately and close the file.
if|if
condition|(
name|nrCompleteBlocks
operator|==
name|nrBlocks
condition|)
block|{
name|finalizeINodeFileUnderConstruction
argument_list|(
name|src
argument_list|,
name|pendingFile
argument_list|,
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"BLOCK*"
operator|+
literal|" internalReleaseLease: All existing blocks are COMPLETE,"
operator|+
literal|" lease removed, file "
operator|+
name|src
operator|+
literal|" closed."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// closed!
block|}
comment|// Only the last and the penultimate blocks may be in non COMPLETE state.
comment|// If the penultimate block is not COMPLETE, then it must be COMMITTED.
if|if
condition|(
name|nrCompleteBlocks
operator|<
name|nrBlocks
operator|-
literal|2
operator|||
name|nrCompleteBlocks
operator|==
name|nrBlocks
operator|-
literal|2
operator|&&
name|curBlock
operator|!=
literal|null
operator|&&
name|curBlock
operator|.
name|getBlockUCState
argument_list|()
operator|!=
name|BlockUCState
operator|.
name|COMMITTED
condition|)
block|{
specifier|final
name|String
name|message
init|=
literal|"DIR* NameSystem.internalReleaseLease: "
operator|+
literal|"attempt to release a create lock on "
operator|+
name|src
operator|+
literal|" but file is already closed."
decl_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// The last block is not COMPLETE, and
comment|// that the penultimate block if exists is either COMPLETE or COMMITTED
specifier|final
name|BlockInfo
name|lastBlock
init|=
name|pendingFile
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
name|BlockUCState
name|lastBlockState
init|=
name|lastBlock
operator|.
name|getBlockUCState
argument_list|()
decl_stmt|;
name|BlockInfo
name|penultimateBlock
init|=
name|pendingFile
operator|.
name|getPenultimateBlock
argument_list|()
decl_stmt|;
comment|// If penultimate block doesn't exist then its minReplication is met
name|boolean
name|penultimateBlockMinStorage
init|=
name|penultimateBlock
operator|==
literal|null
operator|||
name|blockManager
operator|.
name|hasMinStorage
argument_list|(
name|penultimateBlock
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|lastBlockState
condition|)
block|{
case|case
name|COMPLETE
case|:
assert|assert
literal|false
operator|:
literal|"Already checked that the last block is incomplete"
assert|;
break|break;
case|case
name|COMMITTED
case|:
comment|// Close file if committed blocks are minimally replicated
if|if
condition|(
name|penultimateBlockMinStorage
operator|&&
name|blockManager
operator|.
name|hasMinStorage
argument_list|(
name|lastBlock
argument_list|)
condition|)
block|{
name|finalizeINodeFileUnderConstruction
argument_list|(
name|src
argument_list|,
name|pendingFile
argument_list|,
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"BLOCK*"
operator|+
literal|" internalReleaseLease: Committed blocks are minimally"
operator|+
literal|" replicated, lease removed, file"
operator|+
name|src
operator|+
literal|" closed."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
comment|// closed!
block|}
comment|// Cannot close file right now, since some blocks
comment|// are not yet minimally replicated.
comment|// This may potentially cause infinite loop in lease recovery
comment|// if there are no valid replicas on data-nodes.
name|String
name|message
init|=
literal|"DIR* NameSystem.internalReleaseLease: "
operator|+
literal|"Failed to release lease for file "
operator|+
name|src
operator|+
literal|". Committed blocks are waiting to be minimally replicated."
operator|+
literal|" Try again later."
decl_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AlreadyBeingCreatedException
argument_list|(
name|message
argument_list|)
throw|;
case|case
name|UNDER_CONSTRUCTION
case|:
case|case
name|UNDER_RECOVERY
case|:
name|BlockUnderConstructionFeature
name|uc
init|=
name|lastBlock
operator|.
name|getUnderConstructionFeature
argument_list|()
decl_stmt|;
comment|// determine if last block was intended to be truncated
name|BlockInfo
name|recoveryBlock
init|=
name|uc
operator|.
name|getTruncateBlock
argument_list|()
decl_stmt|;
name|boolean
name|truncateRecovery
init|=
name|recoveryBlock
operator|!=
literal|null
decl_stmt|;
name|boolean
name|copyOnTruncate
init|=
name|truncateRecovery
operator|&&
name|recoveryBlock
operator|.
name|getBlockId
argument_list|()
operator|!=
name|lastBlock
operator|.
name|getBlockId
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|copyOnTruncate
operator|||
name|recoveryBlock
operator|.
name|getBlockId
argument_list|()
operator|<
name|lastBlock
operator|.
name|getBlockId
argument_list|()
operator|&&
name|recoveryBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|<
name|lastBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|&&
name|recoveryBlock
operator|.
name|getNumBytes
argument_list|()
operator|>
name|lastBlock
operator|.
name|getNumBytes
argument_list|()
operator|:
literal|"wrong recoveryBlock"
assert|;
comment|// setup the last block locations from the blockManager if not known
if|if
condition|(
name|uc
operator|.
name|getNumExpectedLocations
argument_list|()
operator|==
literal|0
condition|)
block|{
name|uc
operator|.
name|setExpectedLocations
argument_list|(
name|lastBlock
argument_list|,
name|blockManager
operator|.
name|getStorages
argument_list|(
name|lastBlock
argument_list|)
argument_list|,
name|lastBlock
operator|.
name|getBlockType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uc
operator|.
name|getNumExpectedLocations
argument_list|()
operator|==
literal|0
operator|&&
name|lastBlock
operator|.
name|getNumBytes
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// There is no datanode reported to this block.
comment|// may be client have crashed before writing data to pipeline.
comment|// This blocks doesn't need any recovery.
comment|// We can remove this block and close the file.
name|pendingFile
operator|.
name|removeLastBlock
argument_list|(
name|lastBlock
argument_list|)
expr_stmt|;
name|finalizeINodeFileUnderConstruction
argument_list|(
name|src
argument_list|,
name|pendingFile
argument_list|,
name|iip
operator|.
name|getLatestSnapshotId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"BLOCK* internalReleaseLease: "
operator|+
literal|"Removed empty last block and closed file "
operator|+
name|src
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Start recovery of the last block for this file
comment|// Only do so if there is no ongoing recovery for this block,
comment|// or the previous recovery for this block timed out.
if|if
condition|(
name|blockManager
operator|.
name|addBlockRecoveryAttempt
argument_list|(
name|lastBlock
argument_list|)
condition|)
block|{
name|long
name|blockRecoveryId
init|=
name|nextGenerationStamp
argument_list|(
name|blockManager
operator|.
name|isLegacyBlock
argument_list|(
name|lastBlock
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyOnTruncate
condition|)
block|{
name|lastBlock
operator|.
name|setGenerationStamp
argument_list|(
name|blockRecoveryId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|truncateRecovery
condition|)
block|{
name|recoveryBlock
operator|.
name|setGenerationStamp
argument_list|(
name|blockRecoveryId
argument_list|)
expr_stmt|;
block|}
name|uc
operator|.
name|initializeBlockRecovery
argument_list|(
name|lastBlock
argument_list|,
name|blockRecoveryId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Cannot close file right now, since the last block requires recovery.
comment|// This may potentially cause infinite loop in lease recovery
comment|// if there are no valid replicas on data-nodes.
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|warn
argument_list|(
literal|"DIR* NameSystem.internalReleaseLease: "
operator|+
literal|"File "
operator|+
name|src
operator|+
literal|" has not been closed."
operator|+
literal|" Lease recovery is in progress. "
operator|+
literal|"RecoveryId = "
operator|+
name|blockRecoveryId
operator|+
literal|" for block "
operator|+
name|lastBlock
argument_list|)
expr_stmt|;
block|}
name|lease
operator|=
name|reassignLease
argument_list|(
name|lease
argument_list|,
name|src
argument_list|,
name|recoveryLeaseHolder
argument_list|,
name|pendingFile
argument_list|)
expr_stmt|;
name|leaseManager
operator|.
name|renewLease
argument_list|(
name|lease
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|false
return|;
block|}
DECL|method|reassignLease (Lease lease, String src, String newHolder, INodeFile pendingFile)
specifier|private
name|Lease
name|reassignLease
parameter_list|(
name|Lease
name|lease
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|newHolder
parameter_list|,
name|INodeFile
name|pendingFile
parameter_list|)
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
if|if
condition|(
name|newHolder
operator|==
literal|null
condition|)
return|return
name|lease
return|;
comment|// The following transaction is not synced. Make sure it's sync'ed later.
name|logReassignLease
argument_list|(
name|lease
operator|.
name|getHolder
argument_list|()
argument_list|,
name|src
argument_list|,
name|newHolder
argument_list|)
expr_stmt|;
return|return
name|reassignLeaseInternal
argument_list|(
name|lease
argument_list|,
name|newHolder
argument_list|,
name|pendingFile
argument_list|)
return|;
block|}
DECL|method|reassignLeaseInternal (Lease lease, String newHolder, INodeFile pendingFile)
name|Lease
name|reassignLeaseInternal
parameter_list|(
name|Lease
name|lease
parameter_list|,
name|String
name|newHolder
parameter_list|,
name|INodeFile
name|pendingFile
parameter_list|)
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
name|pendingFile
operator|.
name|getFileUnderConstructionFeature
argument_list|()
operator|.
name|setClientName
argument_list|(
name|newHolder
argument_list|)
expr_stmt|;
return|return
name|leaseManager
operator|.
name|reassignLease
argument_list|(
name|lease
argument_list|,
name|pendingFile
argument_list|,
name|newHolder
argument_list|)
return|;
block|}
DECL|method|commitOrCompleteLastBlock ( final INodeFile fileINode, final INodesInPath iip, final Block commitBlock)
name|void
name|commitOrCompleteLastBlock
parameter_list|(
specifier|final
name|INodeFile
name|fileINode
parameter_list|,
specifier|final
name|INodesInPath
name|iip
parameter_list|,
specifier|final
name|Block
name|commitBlock
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|fileINode
operator|.
name|isUnderConstruction
argument_list|()
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|commitOrCompleteLastBlock
argument_list|(
name|fileINode
argument_list|,
name|commitBlock
argument_list|,
name|iip
argument_list|)
expr_stmt|;
block|}
DECL|method|addCommittedBlocksToPending (final INodeFile pendingFile)
name|void
name|addCommittedBlocksToPending
parameter_list|(
specifier|final
name|INodeFile
name|pendingFile
parameter_list|)
block|{
specifier|final
name|BlockInfo
index|[]
name|blocks
init|=
name|pendingFile
operator|.
name|getBlocks
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|blocks
operator|.
name|length
operator|-
name|numCommittedAllowed
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|i
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BlockInfo
name|b
init|=
name|blocks
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
operator|&&
name|b
operator|.
name|getBlockUCState
argument_list|()
operator|==
name|BlockUCState
operator|.
name|COMMITTED
condition|)
block|{
comment|// b is COMMITTED but not yet COMPLETE, add it to pending replication.
name|blockManager
operator|.
name|addExpectedReplicasToPending
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|finalizeINodeFileUnderConstruction (String src, INodeFile pendingFile, int latestSnapshot, boolean allowCommittedBlock)
name|void
name|finalizeINodeFileUnderConstruction
parameter_list|(
name|String
name|src
parameter_list|,
name|INodeFile
name|pendingFile
parameter_list|,
name|int
name|latestSnapshot
parameter_list|,
name|boolean
name|allowCommittedBlock
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
name|FileUnderConstructionFeature
name|uc
init|=
name|pendingFile
operator|.
name|getFileUnderConstructionFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|uc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot finalize file "
operator|+
name|src
operator|+
literal|" because it is not under construction"
argument_list|)
throw|;
block|}
name|pendingFile
operator|.
name|recordModification
argument_list|(
name|latestSnapshot
argument_list|)
expr_stmt|;
comment|// The file is no longer pending.
comment|// Create permanent INode, update blocks. No need to replace the inode here
comment|// since we just remove the uc feature from pendingFile
name|pendingFile
operator|.
name|toCompleteFile
argument_list|(
name|now
argument_list|()
argument_list|,
name|allowCommittedBlock
condition|?
name|numCommittedAllowed
else|:
literal|0
argument_list|,
name|blockManager
operator|.
name|getMinReplication
argument_list|()
argument_list|)
expr_stmt|;
name|leaseManager
operator|.
name|removeLease
argument_list|(
name|uc
operator|.
name|getClientName
argument_list|()
argument_list|,
name|pendingFile
argument_list|)
expr_stmt|;
comment|// close file and persist block allocations for this file
name|closeFile
argument_list|(
name|src
argument_list|,
name|pendingFile
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|checkRedundancy
argument_list|(
name|pendingFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getStoredBlock (Block block)
name|BlockInfo
name|getStoredBlock
parameter_list|(
name|Block
name|block
parameter_list|)
block|{
return|return
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
name|block
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isInSnapshot (long blockCollectionID)
specifier|public
name|boolean
name|isInSnapshot
parameter_list|(
name|long
name|blockCollectionID
parameter_list|)
block|{
assert|assert
name|hasReadLock
argument_list|()
assert|;
specifier|final
name|INodeFile
name|bc
init|=
name|getBlockCollection
argument_list|(
name|blockCollectionID
argument_list|)
decl_stmt|;
if|if
condition|(
name|bc
operator|==
literal|null
operator|||
operator|!
name|bc
operator|.
name|isUnderConstruction
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|fullName
init|=
name|bc
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fullName
operator|!=
literal|null
operator|&&
name|fullName
operator|.
name|startsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|&&
name|dir
operator|.
name|getINode
argument_list|(
name|fullName
argument_list|,
name|DirOp
operator|.
name|READ
argument_list|)
operator|==
name|bc
condition|)
block|{
comment|// If file exists in normal path then no need to look in snapshot
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// the snapshot path and current path may contain symlinks, ancestor
comment|// dirs replaced by files, etc.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while resolving the path : "
operator|+
name|fullName
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/*      * 1. if bc is under construction and also with snapshot, and      * bc is not in the current fsdirectory tree, bc must represent a snapshot      * file.       * 2. if fullName is not an absolute path, bc cannot be existent in the       * current fsdirectory tree.       * 3. if bc is not the current node associated with fullName, bc must be a      * snapshot inode.      */
return|return
literal|true
return|;
block|}
DECL|method|getBlockCollection (BlockInfo b)
name|INodeFile
name|getBlockCollection
parameter_list|(
name|BlockInfo
name|b
parameter_list|)
block|{
return|return
name|getBlockCollection
argument_list|(
name|b
operator|.
name|getBlockCollectionId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockCollection (long id)
specifier|public
name|INodeFile
name|getBlockCollection
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|INode
name|inode
init|=
name|getFSDirectory
argument_list|()
operator|.
name|getInode
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|inode
operator|==
literal|null
condition|?
literal|null
else|:
name|inode
operator|.
name|asFile
argument_list|()
return|;
block|}
DECL|method|commitBlockSynchronization (ExtendedBlock oldBlock, long newgenerationstamp, long newlength, boolean closeFile, boolean deleteblock, DatanodeID[] newtargets, String[] newtargetstorages)
name|void
name|commitBlockSynchronization
parameter_list|(
name|ExtendedBlock
name|oldBlock
parameter_list|,
name|long
name|newgenerationstamp
parameter_list|,
name|long
name|newlength
parameter_list|,
name|boolean
name|closeFile
parameter_list|,
name|boolean
name|deleteblock
parameter_list|,
name|DatanodeID
index|[]
name|newtargets
parameter_list|,
name|String
index|[]
name|newtargetstorages
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"commitBlockSynchronization(oldBlock="
operator|+
name|oldBlock
operator|+
literal|", newgenerationstamp="
operator|+
name|newgenerationstamp
operator|+
literal|", newlength="
operator|+
name|newlength
operator|+
literal|", newtargets="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|newtargets
argument_list|)
operator|+
literal|", closeFile="
operator|+
name|closeFile
operator|+
literal|", deleteBlock="
operator|+
name|deleteblock
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|String
name|src
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
name|boolean
name|copyTruncate
init|=
literal|false
decl_stmt|;
name|BlockInfo
name|truncatedBlock
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// If a DN tries to commit to the standby, the recovery will
comment|// fail, and the next retry will succeed on the new NN.
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot commitBlockSynchronization while in safe mode"
argument_list|)
expr_stmt|;
specifier|final
name|BlockInfo
name|storedBlock
init|=
name|getStoredBlock
argument_list|(
name|ExtendedBlock
operator|.
name|getLocalBlock
argument_list|(
name|oldBlock
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedBlock
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|deleteblock
condition|)
block|{
comment|// This may be a retry attempt so ignore the failure
comment|// to locate the block.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Block (="
operator|+
name|oldBlock
operator|+
literal|") not found"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Block (="
operator|+
name|oldBlock
operator|+
literal|") not found"
argument_list|)
throw|;
block|}
block|}
specifier|final
name|long
name|oldGenerationStamp
init|=
name|storedBlock
operator|.
name|getGenerationStamp
argument_list|()
decl_stmt|;
specifier|final
name|long
name|oldNumBytes
init|=
name|storedBlock
operator|.
name|getNumBytes
argument_list|()
decl_stmt|;
comment|//
comment|// The implementation of delete operation (see @deleteInternal method)
comment|// first removes the file paths from namespace, and delays the removal
comment|// of blocks to later time for better performance. When
comment|// commitBlockSynchronization (this method) is called in between, the
comment|// blockCollection of storedBlock could have been assigned to null by
comment|// the delete operation, throw IOException here instead of NPE; if the
comment|// file path is already removed from namespace by the delete operation,
comment|// throw FileNotFoundException here, so not to proceed to the end of
comment|// this method to add a CloseOp to the edit log for an already deleted
comment|// file (See HDFS-6825).
comment|//
if|if
condition|(
name|storedBlock
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The blockCollection of "
operator|+
name|storedBlock
operator|+
literal|" is null, likely because the file owning this block was"
operator|+
literal|" deleted and the block removal is delayed"
argument_list|)
throw|;
block|}
specifier|final
name|INodeFile
name|iFile
init|=
name|getBlockCollection
argument_list|(
name|storedBlock
argument_list|)
decl_stmt|;
name|src
operator|=
name|iFile
operator|.
name|getFullPathName
argument_list|()
expr_stmt|;
if|if
condition|(
name|isFileDeleted
argument_list|(
name|iFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File not found: "
operator|+
name|src
operator|+
literal|", likely due to delayed block removal"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
operator|!
name|iFile
operator|.
name|isUnderConstruction
argument_list|()
operator|||
name|storedBlock
operator|.
name|isComplete
argument_list|()
operator|)
operator|&&
name|iFile
operator|.
name|getLastBlock
argument_list|()
operator|.
name|isComplete
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpected block (="
operator|+
name|oldBlock
operator|+
literal|") since the file (="
operator|+
name|iFile
operator|.
name|getLocalName
argument_list|()
operator|+
literal|") is not under construction"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|truncatedBlock
operator|=
name|iFile
operator|.
name|getLastBlock
argument_list|()
expr_stmt|;
specifier|final
name|long
name|recoveryId
init|=
name|truncatedBlock
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|getBlockRecoveryId
argument_list|()
decl_stmt|;
name|copyTruncate
operator|=
name|truncatedBlock
operator|.
name|getBlockId
argument_list|()
operator|!=
name|storedBlock
operator|.
name|getBlockId
argument_list|()
expr_stmt|;
if|if
condition|(
name|recoveryId
operator|!=
name|newgenerationstamp
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The recovery id "
operator|+
name|newgenerationstamp
operator|+
literal|" does not match current recovery id "
operator|+
name|recoveryId
operator|+
literal|" for block "
operator|+
name|oldBlock
argument_list|)
throw|;
block|}
if|if
condition|(
name|deleteblock
condition|)
block|{
name|Block
name|blockToDel
init|=
name|ExtendedBlock
operator|.
name|getLocalBlock
argument_list|(
name|oldBlock
argument_list|)
decl_stmt|;
name|boolean
name|remove
init|=
name|iFile
operator|.
name|removeLastBlock
argument_list|(
name|blockToDel
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|remove
condition|)
block|{
name|blockManager
operator|.
name|removeBlock
argument_list|(
name|storedBlock
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// update last block
if|if
condition|(
operator|!
name|copyTruncate
condition|)
block|{
name|storedBlock
operator|.
name|setGenerationStamp
argument_list|(
name|newgenerationstamp
argument_list|)
expr_stmt|;
name|storedBlock
operator|.
name|setNumBytes
argument_list|(
name|newlength
argument_list|)
expr_stmt|;
block|}
comment|// Find the target DatanodeStorageInfos. If not found because of invalid
comment|// or empty DatanodeID/StorageID, the slot of same offset in dsInfos is
comment|// null
specifier|final
name|DatanodeStorageInfo
index|[]
name|dsInfos
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeStorageInfos
argument_list|(
name|newtargets
argument_list|,
name|newtargetstorages
argument_list|,
literal|"src=%s, oldBlock=%s, newgenerationstamp=%d, newlength=%d"
argument_list|,
name|src
argument_list|,
name|oldBlock
argument_list|,
name|newgenerationstamp
argument_list|,
name|newlength
argument_list|)
decl_stmt|;
if|if
condition|(
name|closeFile
operator|&&
name|dsInfos
operator|!=
literal|null
condition|)
block|{
comment|// the file is getting closed. Insert block locations into blockManager.
comment|// Otherwise fsck will report these blocks as MISSING, especially if the
comment|// blocksReceived from Datanodes take a long time to arrive.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dsInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dsInfos
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|copyTruncate
condition|)
block|{
name|dsInfos
index|[
name|i
index|]
operator|.
name|addBlock
argument_list|(
name|truncatedBlock
argument_list|,
name|truncatedBlock
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Block
name|bi
init|=
operator|new
name|Block
argument_list|(
name|storedBlock
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedBlock
operator|.
name|isStriped
argument_list|()
condition|)
block|{
name|bi
operator|.
name|setBlockId
argument_list|(
name|bi
operator|.
name|getBlockId
argument_list|()
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|dsInfos
index|[
name|i
index|]
operator|.
name|addBlock
argument_list|(
name|storedBlock
argument_list|,
name|bi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// add pipeline locations into the INodeUnderConstruction
if|if
condition|(
name|copyTruncate
condition|)
block|{
name|iFile
operator|.
name|convertLastBlockToUC
argument_list|(
name|truncatedBlock
argument_list|,
name|dsInfos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iFile
operator|.
name|convertLastBlockToUC
argument_list|(
name|storedBlock
argument_list|,
name|dsInfos
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeFile
condition|)
block|{
name|blockManager
operator|.
name|markBlockReplicasAsCorrupt
argument_list|(
name|oldBlock
operator|.
name|getLocalBlock
argument_list|()
argument_list|,
name|storedBlock
argument_list|,
name|oldGenerationStamp
argument_list|,
name|oldNumBytes
argument_list|,
name|dsInfos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|closeFile
condition|)
block|{
if|if
condition|(
name|copyTruncate
condition|)
block|{
name|closeFileCommitBlocks
argument_list|(
name|src
argument_list|,
name|iFile
argument_list|,
name|truncatedBlock
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iFile
operator|.
name|isBlockInLatestSnapshot
argument_list|(
name|storedBlock
argument_list|)
condition|)
block|{
name|blockManager
operator|.
name|removeBlock
argument_list|(
name|storedBlock
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|closeFileCommitBlocks
argument_list|(
name|src
argument_list|,
name|iFile
argument_list|,
name|storedBlock
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If this commit does not want to close the file, persist blocks
name|FSDirWriteFileOp
operator|.
name|persistBlocks
argument_list|(
name|dir
argument_list|,
name|src
argument_list|,
name|iFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|blockManager
operator|.
name|successfulBlockRecovery
argument_list|(
name|storedBlock
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"commitBlockSynchronization"
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
if|if
condition|(
name|closeFile
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"commitBlockSynchronization(oldBlock="
operator|+
name|oldBlock
operator|+
literal|", file="
operator|+
name|src
operator|+
operator|(
name|copyTruncate
condition|?
literal|", newBlock="
operator|+
name|truncatedBlock
else|:
literal|", newgenerationstamp="
operator|+
name|newgenerationstamp
operator|)
operator|+
literal|", newlength="
operator|+
name|newlength
operator|+
literal|", newtargets="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|newtargets
argument_list|)
operator|+
literal|") successful"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"commitBlockSynchronization("
operator|+
name|oldBlock
operator|+
literal|") successful"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param pendingFile open file that needs to be closed    * @param storedBlock last block    * @throws IOException on error    */
annotation|@
name|VisibleForTesting
DECL|method|closeFileCommitBlocks (String src, INodeFile pendingFile, BlockInfo storedBlock)
name|void
name|closeFileCommitBlocks
parameter_list|(
name|String
name|src
parameter_list|,
name|INodeFile
name|pendingFile
parameter_list|,
name|BlockInfo
name|storedBlock
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|INodesInPath
name|iip
init|=
name|INodesInPath
operator|.
name|fromINode
argument_list|(
name|pendingFile
argument_list|)
decl_stmt|;
comment|// commit the last block and complete it if it has minimum replicas
name|commitOrCompleteLastBlock
argument_list|(
name|pendingFile
argument_list|,
name|iip
argument_list|,
name|storedBlock
argument_list|)
expr_stmt|;
comment|//remove lease, close file
name|int
name|s
init|=
name|Snapshot
operator|.
name|findLatestSnapshot
argument_list|(
name|pendingFile
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
name|finalizeINodeFileUnderConstruction
argument_list|(
name|src
argument_list|,
name|pendingFile
argument_list|,
name|s
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Renew the lease(s) held by the given client    */
DECL|method|renewLease (String holder)
name|void
name|renewLease
parameter_list|(
name|String
name|holder
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot renew lease for "
operator|+
name|holder
argument_list|)
expr_stmt|;
name|leaseManager
operator|.
name|renewLease
argument_list|(
name|holder
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"renewLease"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a partial listing of the indicated directory    *    * @param src the directory name    * @param startAfter the name to start after    * @param needLocation if blockLocations need to be returned    * @return a partial listing starting after startAfter    *     * @throws AccessControlException if access is denied    * @throws UnresolvedLinkException if symbolic link is encountered    * @throws IOException if other I/O error occurred    */
DECL|method|getListing (String src, byte[] startAfter, boolean needLocation)
name|DirectoryListing
name|getListing
parameter_list|(
name|String
name|src
parameter_list|,
name|byte
index|[]
name|startAfter
parameter_list|,
name|boolean
name|needLocation
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
literal|"listStatus"
decl_stmt|;
name|DirectoryListing
name|dl
init|=
literal|null
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|NameNode
operator|.
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|dl
operator|=
name|getListingInt
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|startAfter
argument_list|,
name|needLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
name|dl
return|;
block|}
comment|/////////////////////////////////////////////////////////
comment|//
comment|// These methods are called by datanodes
comment|//
comment|/////////////////////////////////////////////////////////
comment|/**    * Register Datanode.    *<p>    * The purpose of registration is to identify whether the new datanode    * serves a new data storage, and will report new data block copies,    * which the namenode was not aware of; or the datanode is a replacement    * node for the data storage that was previously served by a different    * or the same (in terms of host:port) datanode.    * The data storages are distinguished by their storageIDs. When a new    * data storage is reported the namenode issues a new unique storageID.    *<p>    * Finally, the namenode returns its namespaceID as the registrationID    * for the datanodes.     * namespaceID is a persistent attribute of the name space.    * The registrationID is checked every time the datanode is communicating    * with the namenode.     * Datanodes with inappropriate registrationID are rejected.    * If the namenode stops, and then restarts it can restore its     * namespaceID and will continue serving the datanodes that has previously    * registered with the namenode without restarting the whole cluster.    *     * @see org.apache.hadoop.hdfs.server.datanode.DataNode    */
DECL|method|registerDatanode (DatanodeRegistration nodeReg)
name|void
name|registerDatanode
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|blockManager
operator|.
name|registerDatanode
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"registerDatanode"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get registrationID for datanodes based on the namespaceID.    *     * @see #registerDatanode(DatanodeRegistration)    * @return registration ID    */
DECL|method|getRegistrationID ()
name|String
name|getRegistrationID
parameter_list|()
block|{
return|return
name|Storage
operator|.
name|getRegistrationID
argument_list|(
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * The given node has reported in.  This method should:    * 1) Record the heartbeat, so the datanode isn't timed out    * 2) Adjust usage stats for future block allocation    *    * If a substantial amount of time passed since the last datanode    * heartbeat then request an immediate block report.    *    * @return an array of datanode commands    * @throws IOException    */
DECL|method|handleHeartbeat (DatanodeRegistration nodeReg, StorageReport[] reports, long cacheCapacity, long cacheUsed, int xceiverCount, int xmitsInProgress, int failedVolumes, VolumeFailureSummary volumeFailureSummary, boolean requestFullBlockReportLease, @Nonnull SlowPeerReports slowPeers, @Nonnull SlowDiskReports slowDisks)
name|HeartbeatResponse
name|handleHeartbeat
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|StorageReport
index|[]
name|reports
parameter_list|,
name|long
name|cacheCapacity
parameter_list|,
name|long
name|cacheUsed
parameter_list|,
name|int
name|xceiverCount
parameter_list|,
name|int
name|xmitsInProgress
parameter_list|,
name|int
name|failedVolumes
parameter_list|,
name|VolumeFailureSummary
name|volumeFailureSummary
parameter_list|,
name|boolean
name|requestFullBlockReportLease
parameter_list|,
annotation|@
name|Nonnull
name|SlowPeerReports
name|slowPeers
parameter_list|,
annotation|@
name|Nonnull
name|SlowDiskReports
name|slowDisks
parameter_list|)
throws|throws
name|IOException
block|{
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
comment|//get datanode commands
specifier|final
name|int
name|maxTransfer
init|=
name|blockManager
operator|.
name|getMaxReplicationStreams
argument_list|()
operator|-
name|xmitsInProgress
decl_stmt|;
name|DatanodeCommand
index|[]
name|cmds
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|handleHeartbeat
argument_list|(
name|nodeReg
argument_list|,
name|reports
argument_list|,
name|getBlockPoolId
argument_list|()
argument_list|,
name|cacheCapacity
argument_list|,
name|cacheUsed
argument_list|,
name|xceiverCount
argument_list|,
name|maxTransfer
argument_list|,
name|failedVolumes
argument_list|,
name|volumeFailureSummary
argument_list|,
name|slowPeers
argument_list|,
name|slowDisks
argument_list|)
decl_stmt|;
name|long
name|blockReportLeaseId
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|requestFullBlockReportLease
condition|)
block|{
name|blockReportLeaseId
operator|=
name|blockManager
operator|.
name|requestBlockReportLeaseId
argument_list|(
name|nodeReg
argument_list|)
expr_stmt|;
block|}
comment|//create ha status
specifier|final
name|NNHAStatusHeartbeat
name|haState
init|=
operator|new
name|NNHAStatusHeartbeat
argument_list|(
name|haContext
operator|.
name|getState
argument_list|()
operator|.
name|getServiceState
argument_list|()
argument_list|,
name|getFSImage
argument_list|()
operator|.
name|getCorrectLastAppliedOrWrittenTxId
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|HeartbeatResponse
argument_list|(
name|cmds
argument_list|,
name|haState
argument_list|,
name|rollingUpgradeInfo
argument_list|,
name|blockReportLeaseId
argument_list|)
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"handleHeartbeat"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handles a lifeline message sent by a DataNode.  This method updates contact    * information and statistics for the DataNode, so that it doesn't time out.    * Unlike a heartbeat, this method does not dispatch any commands back to the    * DataNode for local execution.  This method also cannot request a lease for    * sending a full block report.  Lifeline messages are used only as a fallback    * in case something prevents successful delivery of heartbeat messages.    * Therefore, the implementation of this method must remain lightweight    * compared to heartbeat handling.  It should avoid lock contention and    * expensive computation.    *    * @param nodeReg registration info for DataNode sending the lifeline    * @param reports storage reports from DataNode    * @param cacheCapacity cache capacity at DataNode    * @param cacheUsed cache used at DataNode    * @param xceiverCount estimated count of transfer threads running at DataNode    * @param xmitsInProgress count of transfers running at DataNode    * @param failedVolumes count of failed volumes at DataNode    * @param volumeFailureSummary info on failed volumes at DataNode    * @throws IOException if there is an error    */
DECL|method|handleLifeline (DatanodeRegistration nodeReg, StorageReport[] reports, long cacheCapacity, long cacheUsed, int xceiverCount, int xmitsInProgress, int failedVolumes, VolumeFailureSummary volumeFailureSummary)
name|void
name|handleLifeline
parameter_list|(
name|DatanodeRegistration
name|nodeReg
parameter_list|,
name|StorageReport
index|[]
name|reports
parameter_list|,
name|long
name|cacheCapacity
parameter_list|,
name|long
name|cacheUsed
parameter_list|,
name|int
name|xceiverCount
parameter_list|,
name|int
name|xmitsInProgress
parameter_list|,
name|int
name|failedVolumes
parameter_list|,
name|VolumeFailureSummary
name|volumeFailureSummary
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|maxTransfer
init|=
name|blockManager
operator|.
name|getMaxReplicationStreams
argument_list|()
operator|-
name|xmitsInProgress
decl_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|handleLifeline
argument_list|(
name|nodeReg
argument_list|,
name|reports
argument_list|,
name|getBlockPoolId
argument_list|()
argument_list|,
name|cacheCapacity
argument_list|,
name|cacheUsed
argument_list|,
name|xceiverCount
argument_list|,
name|maxTransfer
argument_list|,
name|failedVolumes
argument_list|,
name|volumeFailureSummary
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns whether or not there were available resources at the last check of    * resources.    *    * @return true if there were sufficient resources available, false otherwise.    */
DECL|method|nameNodeHasResourcesAvailable ()
name|boolean
name|nameNodeHasResourcesAvailable
parameter_list|()
block|{
return|return
name|hasResourcesAvailable
return|;
block|}
comment|/**    * Perform resource checks and cache the results.    */
DECL|method|checkAvailableResources ()
name|void
name|checkAvailableResources
parameter_list|()
block|{
name|long
name|resourceCheckTime
init|=
name|monotonicNow
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|nnResourceChecker
operator|!=
literal|null
argument_list|,
literal|"nnResourceChecker not initialized"
argument_list|)
expr_stmt|;
name|hasResourcesAvailable
operator|=
name|nnResourceChecker
operator|.
name|hasAvailableDiskSpace
argument_list|()
expr_stmt|;
name|resourceCheckTime
operator|=
name|monotonicNow
argument_list|()
operator|-
name|resourceCheckTime
expr_stmt|;
name|NameNode
operator|.
name|getNameNodeMetrics
argument_list|()
operator|.
name|addResourceCheckTime
argument_list|(
name|resourceCheckTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close file.    * @param path    * @param file    */
DECL|method|closeFile (String path, INodeFile file)
specifier|private
name|void
name|closeFile
parameter_list|(
name|String
name|path
parameter_list|,
name|INodeFile
name|file
parameter_list|)
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
comment|// file is closed
name|getEditLog
argument_list|()
operator|.
name|logCloseFile
argument_list|(
name|path
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|debug
argument_list|(
literal|"closeFile: {} with {} blocks is persisted"
operator|+
literal|" to the file system"
argument_list|,
name|path
argument_list|,
name|file
operator|.
name|getBlocks
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Periodically calls hasAvailableResources of NameNodeResourceChecker, and if    * there are found to be insufficient resources available, causes the NN to    * enter safe mode. If resources are later found to have returned to    * acceptable levels, this daemon will cause the NN to exit safe mode.    */
DECL|class|NameNodeResourceMonitor
class|class
name|NameNodeResourceMonitor
implements|implements
name|Runnable
block|{
DECL|field|shouldNNRmRun
name|boolean
name|shouldNNRmRun
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|fsRunning
operator|&&
name|shouldNNRmRun
condition|)
block|{
name|checkAvailableResources
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|nameNodeHasResourcesAvailable
argument_list|()
condition|)
block|{
name|String
name|lowResourcesMsg
init|=
literal|"NameNode low on available disk space. "
decl_stmt|;
if|if
condition|(
operator|!
name|isInSafeMode
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|lowResourcesMsg
operator|+
literal|"Entering safe mode."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|lowResourcesMsg
operator|+
literal|"Already in safe mode."
argument_list|)
expr_stmt|;
block|}
name|enterSafeMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|resourceRecheckInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Deliberately ignore
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|FSNamesystem
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in NameNodeResourceMonitor: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopMonitor ()
specifier|public
name|void
name|stopMonitor
parameter_list|()
block|{
name|shouldNNRmRun
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|class|NameNodeEditLogRoller
class|class
name|NameNodeEditLogRoller
implements|implements
name|Runnable
block|{
DECL|field|shouldRun
specifier|private
name|boolean
name|shouldRun
init|=
literal|true
decl_stmt|;
DECL|field|rollThreshold
specifier|private
specifier|final
name|long
name|rollThreshold
decl_stmt|;
DECL|field|sleepIntervalMs
specifier|private
specifier|final
name|long
name|sleepIntervalMs
decl_stmt|;
DECL|method|NameNodeEditLogRoller (long rollThreshold, int sleepIntervalMs)
specifier|public
name|NameNodeEditLogRoller
parameter_list|(
name|long
name|rollThreshold
parameter_list|,
name|int
name|sleepIntervalMs
parameter_list|)
block|{
name|this
operator|.
name|rollThreshold
operator|=
name|rollThreshold
expr_stmt|;
name|this
operator|.
name|sleepIntervalMs
operator|=
name|sleepIntervalMs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|fsRunning
operator|&&
name|shouldRun
condition|)
block|{
try|try
block|{
name|long
name|numEdits
init|=
name|getCorrectTransactionsSinceLastLogRoll
argument_list|()
decl_stmt|;
if|if
condition|(
name|numEdits
operator|>
name|rollThreshold
condition|)
block|{
name|FSNamesystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"NameNode rolling its own edit log because"
operator|+
literal|" number of edits in open segment exceeds threshold of "
operator|+
name|rollThreshold
argument_list|)
expr_stmt|;
name|rollEditLog
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|FSNamesystem
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Swallowing exception in "
operator|+
name|NameNodeEditLogRoller
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|":"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepIntervalMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|FSNamesystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|NameNodeEditLogRoller
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" was interrupted, exiting"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Daemon to periodically scan the namespace for lazyPersist files    * with missing blocks and unlink them.    */
DECL|class|LazyPersistFileScrubber
class|class
name|LazyPersistFileScrubber
implements|implements
name|Runnable
block|{
DECL|field|shouldRun
specifier|private
specifier|volatile
name|boolean
name|shouldRun
init|=
literal|true
decl_stmt|;
DECL|field|scrubIntervalSec
specifier|final
name|int
name|scrubIntervalSec
decl_stmt|;
DECL|method|LazyPersistFileScrubber (final int scrubIntervalSec)
specifier|public
name|LazyPersistFileScrubber
parameter_list|(
specifier|final
name|int
name|scrubIntervalSec
parameter_list|)
block|{
name|this
operator|.
name|scrubIntervalSec
operator|=
name|scrubIntervalSec
expr_stmt|;
block|}
comment|/**      * Periodically go over the list of lazyPersist files with missing      * blocks and unlink them from the namespace.      */
DECL|method|clearCorruptLazyPersistFiles ()
specifier|private
name|void
name|clearCorruptLazyPersistFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|BlockStoragePolicy
name|lpPolicy
init|=
name|blockManager
operator|.
name|getStoragePolicy
argument_list|(
literal|"LAZY_PERSIST"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlockCollection
argument_list|>
name|filesToDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|Iterator
argument_list|<
name|BlockInfo
argument_list|>
name|it
init|=
name|blockManager
operator|.
name|getCorruptReplicaBlockIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Block
name|b
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockInfo
name|blockInfo
init|=
name|blockManager
operator|.
name|getStoredBlock
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cannot find block info for block "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BlockCollection
name|bc
init|=
name|getBlockCollection
argument_list|(
name|blockInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|bc
operator|.
name|getStoragePolicyID
argument_list|()
operator|==
name|lpPolicy
operator|.
name|getId
argument_list|()
condition|)
block|{
name|filesToDelete
operator|.
name|add
argument_list|(
name|bc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|BlockCollection
name|bc
range|:
name|filesToDelete
control|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Removing lazyPersist file "
operator|+
name|bc
operator|.
name|getName
argument_list|()
operator|+
literal|" with no replicas."
argument_list|)
expr_stmt|;
name|BlocksMapUpdateInfo
name|toRemoveBlocks
init|=
name|FSDirDeleteOp
operator|.
name|deleteInternal
argument_list|(
name|FSNamesystem
operator|.
name|this
argument_list|,
name|INodesInPath
operator|.
name|fromINode
argument_list|(
operator|(
name|INodeFile
operator|)
name|bc
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|changed
operator||=
name|toRemoveBlocks
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|toRemoveBlocks
operator|!=
literal|null
condition|)
block|{
name|removeBlocks
argument_list|(
name|toRemoveBlocks
argument_list|)
expr_stmt|;
comment|// Incremental deletion of blocks
block|}
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"clearCorruptLazyPersistFiles"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|fsRunning
operator|&&
name|shouldRun
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isInSafeMode
argument_list|()
condition|)
block|{
name|clearCorruptLazyPersistFiles
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|FSNamesystem
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|FSNamesystem
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Namenode is in safemode, skipping scrubbing of corrupted lazy-persist files."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|FSNamesystem
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Ignoring exception in LazyPersistFileScrubber:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|scrubIntervalSec
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|FSNamesystem
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"LazyPersistFileScrubber was interrupted, exiting"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|shouldRun
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|getFSImage ()
specifier|public
name|FSImage
name|getFSImage
parameter_list|()
block|{
return|return
name|fsImage
return|;
block|}
DECL|method|getEditLog ()
specifier|public
name|FSEditLog
name|getEditLog
parameter_list|()
block|{
return|return
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"MissingBlocks"
block|,
literal|"Number of missing blocks"
block|}
argument_list|)
DECL|method|getMissingBlocksCount ()
specifier|public
name|long
name|getMissingBlocksCount
parameter_list|()
block|{
comment|// not locking
return|return
name|blockManager
operator|.
name|getMissingBlocksCount
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"MissingReplOneBlocks"
block|,
literal|"Number of missing blocks "
operator|+
literal|"with replication factor 1"
block|}
argument_list|)
DECL|method|getMissingReplOneBlocksCount ()
specifier|public
name|long
name|getMissingReplOneBlocksCount
parameter_list|()
block|{
comment|// not locking
return|return
name|blockManager
operator|.
name|getMissingReplOneBlocksCount
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"ExpiredHeartbeats"
block|,
literal|"Number of expired heartbeats"
block|}
argument_list|)
DECL|method|getExpiredHeartbeats ()
specifier|public
name|int
name|getExpiredHeartbeats
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getExpiredHeartbeats
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"TransactionsSinceLastCheckpoint"
block|,
literal|"Number of transactions since last checkpoint"
block|}
argument_list|)
DECL|method|getTransactionsSinceLastCheckpoint ()
specifier|public
name|long
name|getTransactionsSinceLastCheckpoint
parameter_list|()
block|{
return|return
name|getFSImage
argument_list|()
operator|.
name|getLastAppliedOrWrittenTxId
argument_list|()
operator|-
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"TransactionsSinceLastLogRoll"
block|,
literal|"Number of transactions since last edit log roll"
block|}
argument_list|)
DECL|method|getTransactionsSinceLastLogRoll ()
specifier|public
name|long
name|getTransactionsSinceLastLogRoll
parameter_list|()
block|{
if|if
condition|(
name|isInStandbyState
argument_list|()
operator|||
operator|!
name|getEditLog
argument_list|()
operator|.
name|isSegmentOpenWithoutLock
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxIdWithoutLock
argument_list|()
operator|-
name|getEditLog
argument_list|()
operator|.
name|getCurSegmentTxIdWithoutLock
argument_list|()
operator|+
literal|1
return|;
block|}
block|}
comment|/**    * Get the correct number of transactions since last edit log roll.    * This method holds a lock of FSEditLog and must not be used for metrics.    */
DECL|method|getCorrectTransactionsSinceLastLogRoll ()
specifier|private
name|long
name|getCorrectTransactionsSinceLastLogRoll
parameter_list|()
block|{
if|if
condition|(
name|isInStandbyState
argument_list|()
operator|||
operator|!
name|getEditLog
argument_list|()
operator|.
name|isSegmentOpen
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxId
argument_list|()
operator|-
name|getEditLog
argument_list|()
operator|.
name|getCurSegmentTxId
argument_list|()
operator|+
literal|1
return|;
block|}
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"LastWrittenTransactionId"
block|,
literal|"Transaction ID written to the edit log"
block|}
argument_list|)
DECL|method|getLastWrittenTransactionId ()
specifier|public
name|long
name|getLastWrittenTransactionId
parameter_list|()
block|{
return|return
name|getEditLog
argument_list|()
operator|.
name|getLastWrittenTxIdWithoutLock
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"LastCheckpointTime"
block|,
literal|"Time in milliseconds since the epoch of the last checkpoint"
block|}
argument_list|)
DECL|method|getLastCheckpointTime ()
specifier|public
name|long
name|getLastCheckpointTime
parameter_list|()
block|{
return|return
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getMostRecentCheckpointTime
argument_list|()
return|;
block|}
comment|/** @see ClientProtocol#getStats() */
DECL|method|getStats ()
name|long
index|[]
name|getStats
parameter_list|()
block|{
specifier|final
name|long
index|[]
name|stats
init|=
name|datanodeStatistics
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|stats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_LOW_REDUNDANCY_IDX
index|]
operator|=
name|getLowRedundancyBlocks
argument_list|()
expr_stmt|;
name|stats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_CORRUPT_BLOCKS_IDX
index|]
operator|=
name|getCorruptReplicaBlocks
argument_list|()
expr_stmt|;
name|stats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_BLOCKS_IDX
index|]
operator|=
name|getMissingBlocksCount
argument_list|()
expr_stmt|;
name|stats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_MISSING_REPL_ONE_BLOCKS_IDX
index|]
operator|=
name|getMissingReplOneBlocksCount
argument_list|()
expr_stmt|;
name|stats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_BYTES_IN_FUTURE_BLOCKS_IDX
index|]
operator|=
name|blockManager
operator|.
name|getBytesInFuture
argument_list|()
expr_stmt|;
name|stats
index|[
name|ClientProtocol
operator|.
name|GET_STATS_PENDING_DELETION_BLOCKS_IDX
index|]
operator|=
name|blockManager
operator|.
name|getPendingDeletionBlocksCount
argument_list|()
expr_stmt|;
return|return
name|stats
return|;
block|}
comment|/**    * Get statistics pertaining to blocks of type {@link BlockType#CONTIGUOUS}    * in the filesystem.    *<p>    * @see ClientProtocol#getReplicatedBlockStats()    */
DECL|method|getReplicatedBlockStats ()
name|ReplicatedBlockStats
name|getReplicatedBlockStats
parameter_list|()
block|{
return|return
operator|new
name|ReplicatedBlockStats
argument_list|(
name|getLowRedundancyReplicatedBlocks
argument_list|()
argument_list|,
name|getCorruptReplicatedBlocks
argument_list|()
argument_list|,
name|getMissingReplicatedBlocks
argument_list|()
argument_list|,
name|getMissingReplicationOneBlocks
argument_list|()
argument_list|,
name|getBytesInFutureReplicatedBlocks
argument_list|()
argument_list|,
name|getPendingDeletionReplicatedBlocks
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get statistics pertaining to blocks of type {@link BlockType#STRIPED}    * in the filesystem.    *<p>    * @see ClientProtocol#getECBlockGroupStats()    */
DECL|method|getECBlockGroupStats ()
name|ECBlockGroupStats
name|getECBlockGroupStats
parameter_list|()
block|{
return|return
operator|new
name|ECBlockGroupStats
argument_list|(
name|getLowRedundancyECBlockGroups
argument_list|()
argument_list|,
name|getCorruptECBlockGroups
argument_list|()
argument_list|,
name|getMissingECBlockGroups
argument_list|()
argument_list|,
name|getBytesInFutureECBlockGroups
argument_list|()
argument_list|,
name|getPendingDeletionECBlocks
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"CapacityTotal"
block|,
literal|"Total raw capacity of data nodes in bytes"
block|}
argument_list|)
DECL|method|getCapacityTotal ()
specifier|public
name|long
name|getCapacityTotal
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getCapacityTotal
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"CapacityTotalGB"
block|,
literal|"Total raw capacity of data nodes in GB"
block|}
argument_list|)
DECL|method|getCapacityTotalGB ()
specifier|public
name|float
name|getCapacityTotalGB
parameter_list|()
block|{
return|return
name|DFSUtil
operator|.
name|roundBytesToGB
argument_list|(
name|getCapacityTotal
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"CapacityUsed"
block|,
literal|"Total used capacity across all data nodes in bytes"
block|}
argument_list|)
DECL|method|getCapacityUsed ()
specifier|public
name|long
name|getCapacityUsed
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getCapacityUsed
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"CapacityUsedGB"
block|,
literal|"Total used capacity across all data nodes in GB"
block|}
argument_list|)
DECL|method|getCapacityUsedGB ()
specifier|public
name|float
name|getCapacityUsedGB
parameter_list|()
block|{
return|return
name|DFSUtil
operator|.
name|roundBytesToGB
argument_list|(
name|getCapacityUsed
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"CapacityRemaining"
block|,
literal|"Remaining capacity in bytes"
block|}
argument_list|)
DECL|method|getCapacityRemaining ()
specifier|public
name|long
name|getCapacityRemaining
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getCapacityRemaining
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"ProvidedCapacityTotal"
block|,
literal|"Total space used in PROVIDED storage in bytes"
block|}
argument_list|)
DECL|method|getProvidedCapacityTotal ()
specifier|public
name|long
name|getProvidedCapacityTotal
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getProvidedCapacity
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"CapacityRemainingGB"
block|,
literal|"Remaining capacity in GB"
block|}
argument_list|)
DECL|method|getCapacityRemainingGB ()
specifier|public
name|float
name|getCapacityRemainingGB
parameter_list|()
block|{
return|return
name|DFSUtil
operator|.
name|roundBytesToGB
argument_list|(
name|getCapacityRemaining
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"CapacityUsedNonDFS"
block|,
literal|"Total space used by data nodes for non DFS purposes in bytes"
block|}
argument_list|)
DECL|method|getCapacityUsedNonDFS ()
specifier|public
name|long
name|getCapacityUsedNonDFS
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getCapacityUsedNonDFS
argument_list|()
return|;
block|}
comment|/**    * Total number of connections.    */
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
DECL|method|getTotalLoad ()
specifier|public
name|int
name|getTotalLoad
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getXceiverCount
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"SnapshottableDirectories"
block|,
literal|"Number of snapshottable directories"
block|}
argument_list|)
DECL|method|getNumSnapshottableDirs ()
specifier|public
name|int
name|getNumSnapshottableDirs
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshotManager
operator|.
name|getNumSnapshottableDirs
argument_list|()
return|;
block|}
annotation|@
name|Metric
argument_list|(
block|{
literal|"Snapshots"
block|,
literal|"The number of snapshots"
block|}
argument_list|)
DECL|method|getNumSnapshots ()
specifier|public
name|int
name|getNumSnapshots
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshotManager
operator|.
name|getNumSnapshots
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSnapshotStats ()
specifier|public
name|String
name|getSnapshotStats
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|info
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"SnapshottableDirectories"
argument_list|,
name|this
operator|.
name|getNumSnapshottableDirs
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"Snapshots"
argument_list|,
name|this
operator|.
name|getNumSnapshots
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumEncryptionZones"
block|,
literal|"The number of encryption zones"
block|}
argument_list|)
DECL|method|getNumEncryptionZones ()
specifier|public
name|int
name|getNumEncryptionZones
parameter_list|()
block|{
return|return
name|dir
operator|.
name|ezManager
operator|.
name|getNumEncryptionZones
argument_list|()
return|;
block|}
comment|/**    * Returns the length of the wait Queue for the FSNameSystemLock.    *    * A larger number here indicates lots of threads are waiting for    * FSNameSystemLock.    *    * @return int - Number of Threads waiting to acquire FSNameSystemLock    */
annotation|@
name|Override
annotation|@
name|Metric
argument_list|(
block|{
literal|"LockQueueLength"
block|,
literal|"Number of threads waiting to "
operator|+
literal|"acquire FSNameSystemLock"
block|}
argument_list|)
DECL|method|getFsLockQueueLength ()
specifier|public
name|int
name|getFsLockQueueLength
parameter_list|()
block|{
return|return
name|fsLock
operator|.
name|getQueueLength
argument_list|()
return|;
block|}
DECL|method|getNumberOfDatanodes (DatanodeReportType type)
name|int
name|getNumberOfDatanodes
parameter_list|(
name|DatanodeReportType
name|type
parameter_list|)
block|{
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeListForReport
argument_list|(
name|type
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"getNumberOfDatanodes"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|datanodeReport (final DatanodeReportType type)
name|DatanodeInfo
index|[]
name|datanodeReport
parameter_list|(
specifier|final
name|DatanodeReportType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operationName
init|=
literal|"datanodeReport"
decl_stmt|;
name|DatanodeInfo
index|[]
name|arr
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
init|=
name|dm
operator|.
name|getDatanodeListForReport
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|arr
operator|=
operator|new
name|DatanodeInfo
index|[
name|results
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setFrom
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|arr
index|[
name|i
index|]
operator|.
name|setNumBlocks
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|numBlocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
DECL|method|getDatanodeStorageReport (final DatanodeReportType type )
name|DatanodeStorageReport
index|[]
name|getDatanodeStorageReport
parameter_list|(
specifier|final
name|DatanodeReportType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operationName
init|=
literal|"getDatanodeStorageReport"
decl_stmt|;
name|DatanodeStorageReport
index|[]
name|reports
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeManager
name|dm
init|=
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|datanodes
init|=
name|dm
operator|.
name|getDatanodeListForReport
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|reports
operator|=
operator|new
name|DatanodeStorageReport
index|[
name|datanodes
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reports
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|DatanodeDescriptor
name|d
init|=
name|datanodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|reports
index|[
name|i
index|]
operator|=
operator|new
name|DatanodeStorageReport
argument_list|(
operator|new
name|DatanodeInfoBuilder
argument_list|()
operator|.
name|setFrom
argument_list|(
name|d
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|d
operator|.
name|getStorageReports
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"getDatanodeStorageReport"
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|reports
return|;
block|}
comment|/**    * Save namespace image.    * This will save current namespace into fsimage file and empty edits file.    * Requires superuser privilege and safe mode.    */
DECL|method|saveNamespace (final long timeWindow, final long txGap)
name|boolean
name|saveNamespace
parameter_list|(
specifier|final
name|long
name|timeWindow
parameter_list|,
specifier|final
name|long
name|txGap
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operationName
init|=
literal|"saveNamespace"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|boolean
name|saved
init|=
literal|false
decl_stmt|;
name|cpLock
argument_list|()
expr_stmt|;
comment|// Block if a checkpointing is in progress on standby.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isInSafeMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Safe mode should be turned ON "
operator|+
literal|"in order to create namespace image."
argument_list|)
throw|;
block|}
name|saved
operator|=
name|getFSImage
argument_list|()
operator|.
name|saveNamespace
argument_list|(
name|timeWindow
argument_list|,
name|txGap
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|cpUnlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|saved
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New namespace image has been created"
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|saved
return|;
block|}
comment|/**    * Enables/Disables/Checks restoring failed storage replicas if the storage becomes available again.    * Requires superuser privilege.    *     * @throws AccessControlException if superuser privilege is violated.    */
DECL|method|restoreFailedStorage (String arg)
name|boolean
name|restoreFailedStorage
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operationName
init|=
name|getFailedStorageCommand
argument_list|(
name|arg
argument_list|)
decl_stmt|;
name|boolean
name|val
init|=
literal|false
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|cpLock
argument_list|()
expr_stmt|;
comment|// Block if a checkpointing is in progress on standby.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
comment|// if it is disabled - enable it and vice versa.
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"check"
argument_list|)
condition|)
block|{
name|val
operator|=
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getRestoreFailedStorage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
name|arg
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
comment|// false if not
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|setRestoreFailedStorage
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|cpUnlock
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
DECL|method|getStartTime ()
name|Date
name|getStartTime
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|(
name|startTime
argument_list|)
return|;
block|}
DECL|method|finalizeUpgrade ()
name|void
name|finalizeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|operationName
init|=
literal|"finalizeUpgrade"
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|cpLock
argument_list|()
expr_stmt|;
comment|// Block if a checkpointing is in progress on standby.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|getFSImage
argument_list|()
operator|.
name|finalizeUpgrade
argument_list|(
name|this
operator|.
name|isHaEnabled
argument_list|()
operator|&&
name|inActiveState
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|cpUnlock
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshNodes ()
name|void
name|refreshNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|operationName
init|=
literal|"refreshNodes"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|UNCHECKED
argument_list|)
expr_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
operator|new
name|HdfsConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|setBalancerBandwidth (long bandwidth)
name|void
name|setBalancerBandwidth
parameter_list|(
name|long
name|bandwidth
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operationName
init|=
literal|"setBalancerBandwidth"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|setBalancerBandwidth
argument_list|(
name|bandwidth
argument_list|)
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|setSafeMode (SafeModeAction action)
name|boolean
name|setSafeMode
parameter_list|(
name|SafeModeAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|operationName
init|=
name|action
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|boolean
name|error
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|action
operator|!=
name|SafeModeAction
operator|.
name|SAFEMODE_GET
condition|)
block|{
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|SAFEMODE_LEAVE
case|:
comment|// leave safe mode
name|leaveSafeMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAFEMODE_ENTER
case|:
comment|// enter safe mode
name|enterSafeMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAFEMODE_FORCE_EXIT
case|:
name|leaveSafeMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected safe mode action"
argument_list|)
expr_stmt|;
name|error
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|error
condition|)
block|{
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|isInSafeMode
argument_list|()
return|;
block|}
comment|/**    * Get the total number of blocks in the system.     */
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
DECL|method|getBlocksTotal ()
specifier|public
name|long
name|getBlocksTotal
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getTotalBlocks
argument_list|()
return|;
block|}
comment|/**    * Get the number of files under construction in the system.    */
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumFilesUnderConstruction"
block|,
literal|"Number of files under construction"
block|}
argument_list|)
DECL|method|getNumFilesUnderConstruction ()
specifier|public
name|long
name|getNumFilesUnderConstruction
parameter_list|()
block|{
return|return
name|leaseManager
operator|.
name|countPath
argument_list|()
return|;
block|}
comment|/**    * Get the total number of active clients holding lease in the system.    */
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumActiveClients"
block|,
literal|"Number of active clients holding lease"
block|}
argument_list|)
DECL|method|getNumActiveClients ()
specifier|public
name|long
name|getNumActiveClients
parameter_list|()
block|{
return|return
name|leaseManager
operator|.
name|countLease
argument_list|()
return|;
block|}
comment|/**    * Get the total number of COMPLETE blocks in the system.    * For safe mode only complete blocks are counted.    * This is invoked only during NN startup and checkpointing.    */
DECL|method|getCompleteBlocksTotal ()
specifier|public
name|long
name|getCompleteBlocksTotal
parameter_list|()
block|{
comment|// Calculate number of blocks under construction
name|long
name|numUCBlocks
init|=
literal|0
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|numUCBlocks
operator|=
name|leaseManager
operator|.
name|getNumUnderConstructionBlocks
argument_list|()
expr_stmt|;
return|return
name|getBlocksTotal
argument_list|()
operator|-
name|numUCBlocks
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"getCompleteBlocksTotal"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isInSafeMode ()
specifier|public
name|boolean
name|isInSafeMode
parameter_list|()
block|{
return|return
name|isInManualOrResourceLowSafeMode
argument_list|()
operator|||
name|blockManager
operator|.
name|isInSafeMode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isInStartupSafeMode ()
specifier|public
name|boolean
name|isInStartupSafeMode
parameter_list|()
block|{
return|return
operator|!
name|isInManualOrResourceLowSafeMode
argument_list|()
operator|&&
name|blockManager
operator|.
name|isInSafeMode
argument_list|()
return|;
block|}
comment|/**    * Enter safe mode. If resourcesLow is false, then we assume it is manual    * @throws IOException    */
DECL|method|enterSafeMode (boolean resourcesLow)
name|void
name|enterSafeMode
parameter_list|(
name|boolean
name|resourcesLow
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Stop the secret manager, since rolling the master key would
comment|// try to write to the edit log
name|stopSecretManager
argument_list|()
expr_stmt|;
comment|// Ensure that any concurrent operations have been fully synced
comment|// before entering safe mode. This ensures that the FSImage
comment|// is entirely stable on disk as soon as we're in safe mode.
name|boolean
name|isEditlogOpenForWrite
init|=
name|getEditLog
argument_list|()
operator|.
name|isOpenForWrite
argument_list|()
decl_stmt|;
comment|// Before Editlog is in OpenForWrite mode, editLogStream will be null. So,
comment|// logSyncAll call can be called only when Edlitlog is in OpenForWrite mode
if|if
condition|(
name|isEditlogOpenForWrite
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSyncAll
argument_list|()
expr_stmt|;
block|}
name|setManualAndResourceLowSafeMode
argument_list|(
operator|!
name|resourcesLow
argument_list|,
name|resourcesLow
argument_list|)
expr_stmt|;
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|info
argument_list|(
literal|"STATE* Safe mode is ON.\n"
operator|+
name|getSafeModeTip
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"enterSafeMode"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Leave safe mode.    * @param force true if to leave safe mode forcefully with -forceExit option    */
DECL|method|leaveSafeMode (boolean force)
name|void
name|leaveSafeMode
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isInSafeMode
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|info
argument_list|(
literal|"STATE* Safe mode is already OFF"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|blockManager
operator|.
name|leaveSafeMode
argument_list|(
name|force
argument_list|)
condition|)
block|{
name|setManualAndResourceLowSafeMode
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|startSecretManagerIfNecessary
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"leaveSafeMode"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSafeModeTip ()
name|String
name|getSafeModeTip
parameter_list|()
block|{
name|String
name|cmd
init|=
literal|"Use \"hdfs dfsadmin -safemode leave\" to turn safe mode off."
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|resourceLowSafeMode
condition|)
block|{
return|return
literal|"Resources are low on NN. Please add or free up more resources"
operator|+
literal|"then turn off safe mode manually. NOTE:  If you turn off safe "
operator|+
literal|"mode before adding resources, the NN will immediately return to "
operator|+
literal|"safe mode. "
operator|+
name|cmd
return|;
block|}
elseif|else
if|if
condition|(
name|manualSafeMode
condition|)
block|{
return|return
literal|"It was turned on manually. "
operator|+
name|cmd
return|;
block|}
block|}
return|return
name|blockManager
operator|.
name|getSafeModeTip
argument_list|()
return|;
block|}
comment|/**    * @return true iff it is in manual safe mode or resource low safe mode.    */
DECL|method|isInManualOrResourceLowSafeMode ()
specifier|private
specifier|synchronized
name|boolean
name|isInManualOrResourceLowSafeMode
parameter_list|()
block|{
return|return
name|manualSafeMode
operator|||
name|resourceLowSafeMode
return|;
block|}
DECL|method|setManualAndResourceLowSafeMode (boolean manual, boolean resourceLow)
specifier|private
specifier|synchronized
name|void
name|setManualAndResourceLowSafeMode
parameter_list|(
name|boolean
name|manual
parameter_list|,
name|boolean
name|resourceLow
parameter_list|)
block|{
name|this
operator|.
name|manualSafeMode
operator|=
name|manual
expr_stmt|;
name|this
operator|.
name|resourceLowSafeMode
operator|=
name|resourceLow
expr_stmt|;
block|}
DECL|method|rollEditLog ()
name|CheckpointSignature
name|rollEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|operationName
init|=
literal|"rollEditLog"
decl_stmt|;
name|CheckpointSignature
name|result
init|=
literal|null
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|JOURNAL
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|JOURNAL
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Log not rolled"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Server
operator|.
name|isRpcInvocation
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Roll Edit Log from "
operator|+
name|Server
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|getFSImage
argument_list|()
operator|.
name|rollEditLog
argument_list|(
name|getEffectiveLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|startCheckpoint (NamenodeRegistration backupNode, NamenodeRegistration activeNamenode)
name|NamenodeCommand
name|startCheckpoint
parameter_list|(
name|NamenodeRegistration
name|backupNode
parameter_list|,
name|NamenodeRegistration
name|activeNamenode
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|CHECKPOINT
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|CHECKPOINT
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Checkpoint not started"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Start checkpoint for "
operator|+
name|backupNode
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|NamenodeCommand
name|cmd
init|=
name|getFSImage
argument_list|()
operator|.
name|startCheckpoint
argument_list|(
name|backupNode
argument_list|,
name|activeNamenode
argument_list|,
name|getEffectiveLayoutVersion
argument_list|()
argument_list|)
decl_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
return|return
name|cmd
return|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"startCheckpoint"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processIncrementalBlockReport (final DatanodeID nodeID, final StorageReceivedDeletedBlocks srdb)
specifier|public
name|void
name|processIncrementalBlockReport
parameter_list|(
specifier|final
name|DatanodeID
name|nodeID
parameter_list|,
specifier|final
name|StorageReceivedDeletedBlocks
name|srdb
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|blockManager
operator|.
name|processIncrementalBlockReport
argument_list|(
name|nodeID
argument_list|,
name|srdb
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"processIncrementalBlockReport"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|endCheckpoint (NamenodeRegistration registration, CheckpointSignature sig)
name|void
name|endCheckpoint
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|,
name|CheckpointSignature
name|sig
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|CHECKPOINT
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|CHECKPOINT
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Checkpoint not ended"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"End checkpoint for "
operator|+
name|registration
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|getFSImage
argument_list|()
operator|.
name|endCheckpoint
argument_list|(
name|sig
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"endCheckpoint"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createFsOwnerPermissions (FsPermission permission)
name|PermissionStatus
name|createFsOwnerPermissions
parameter_list|(
name|FsPermission
name|permission
parameter_list|)
block|{
return|return
operator|new
name|PermissionStatus
argument_list|(
name|fsOwner
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|supergroup
argument_list|,
name|permission
argument_list|)
return|;
block|}
DECL|method|checkSuperuserPrivilege ()
name|void
name|checkSuperuserPrivilege
parameter_list|()
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|isPermissionEnabled
condition|)
block|{
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|pc
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkSuperuserPrivilege (FSPermissionChecker pc)
name|void
name|checkSuperuserPrivilege
parameter_list|(
name|FSPermissionChecker
name|pc
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
name|isPermissionEnabled
condition|)
block|{
name|pc
operator|.
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Check to see if we have exceeded the limit on the number    * of inodes.    */
DECL|method|checkFsObjectLimit ()
name|void
name|checkFsObjectLimit
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|maxFsObjects
operator|!=
literal|0
operator|&&
name|maxFsObjects
operator|<=
name|dir
operator|.
name|totalInodes
argument_list|()
operator|+
name|getBlocksTotal
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exceeded the configured number of objects "
operator|+
name|maxFsObjects
operator|+
literal|" in the filesystem."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
DECL|method|getMaxObjects ()
specifier|public
name|long
name|getMaxObjects
parameter_list|()
block|{
return|return
name|maxFsObjects
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
DECL|method|getFilesTotal ()
specifier|public
name|long
name|getFilesTotal
parameter_list|()
block|{
comment|// There is no need to take fSNamesystem's lock as
comment|// FSDirectory has its own lock.
return|return
name|this
operator|.
name|dir
operator|.
name|totalInodes
argument_list|()
return|;
block|}
comment|/**    * Get aggregated count of all blocks pending to be reconstructed.    */
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
annotation|@
name|Deprecated
DECL|method|getPendingReplicationBlocks ()
specifier|public
name|long
name|getPendingReplicationBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getPendingReconstructionBlocksCount
argument_list|()
return|;
block|}
comment|/**    * Get aggregated count of all blocks pending to be reconstructed.    */
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
DECL|method|getPendingReconstructionBlocks ()
specifier|public
name|long
name|getPendingReconstructionBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getPendingReconstructionBlocksCount
argument_list|()
return|;
block|}
comment|/**    * Get aggregated count of all blocks with low redundancy.    * @deprecated - Use {@link #getLowRedundancyBlocks()} instead.    */
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
annotation|@
name|Deprecated
DECL|method|getUnderReplicatedBlocks ()
specifier|public
name|long
name|getUnderReplicatedBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getLowRedundancyBlocksCount
argument_list|()
return|;
block|}
comment|/**    * Get aggregated count of all blocks with low redundancy.    */
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
DECL|method|getLowRedundancyBlocks ()
specifier|public
name|long
name|getLowRedundancyBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getLowRedundancyBlocksCount
argument_list|()
return|;
block|}
comment|/** Returns number of blocks with corrupt replicas */
annotation|@
name|Metric
argument_list|(
block|{
literal|"CorruptBlocks"
block|,
literal|"Number of blocks with corrupt replicas"
block|}
argument_list|)
DECL|method|getCorruptReplicaBlocks ()
specifier|public
name|long
name|getCorruptReplicaBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getCorruptReplicaBlocksCount
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
DECL|method|getScheduledReplicationBlocks ()
specifier|public
name|long
name|getScheduledReplicationBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getScheduledReplicationBlocksCount
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Metric
DECL|method|getPendingDeletionBlocks ()
specifier|public
name|long
name|getPendingDeletionBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getPendingDeletionBlocksCount
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ReplicatedBlocksMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"LowRedundancyReplicatedBlocks"
block|,
literal|"Number of low redundancy replicated blocks"
block|}
argument_list|)
DECL|method|getLowRedundancyReplicatedBlocks ()
specifier|public
name|long
name|getLowRedundancyReplicatedBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getLowRedundancyBlocks
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ReplicatedBlocksMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"CorruptReplicatedBlocks"
block|,
literal|"Number of corrupted replicated blocks"
block|}
argument_list|)
DECL|method|getCorruptReplicatedBlocks ()
specifier|public
name|long
name|getCorruptReplicatedBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getCorruptBlocks
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ReplicatedBlocksMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"MissingReplicatedBlocks"
block|,
literal|"Number of missing replicated blocks"
block|}
argument_list|)
DECL|method|getMissingReplicatedBlocks ()
specifier|public
name|long
name|getMissingReplicatedBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getMissingBlocks
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ReplicatedBlocksMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"MissingReplicationOneBlocks"
block|,
literal|"Number of missing replicated "
operator|+
literal|"blocks with replication factor 1"
block|}
argument_list|)
DECL|method|getMissingReplicationOneBlocks ()
specifier|public
name|long
name|getMissingReplicationOneBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getMissingReplicationOneBlocks
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ReplicatedBlocksMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"BytesInFutureReplicatedBlocks"
block|,
literal|"Total bytes in replicated "
operator|+
literal|"blocks with future generation stamp"
block|}
argument_list|)
DECL|method|getBytesInFutureReplicatedBlocks ()
specifier|public
name|long
name|getBytesInFutureReplicatedBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getBytesInFutureReplicatedBlocks
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ReplicatedBlocksMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"PendingDeletionReplicatedBlocks"
block|,
literal|"Number of replicated blocks "
operator|+
literal|"that are pending deletion"
block|}
argument_list|)
DECL|method|getPendingDeletionReplicatedBlocks ()
specifier|public
name|long
name|getPendingDeletionReplicatedBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getPendingDeletionReplicatedBlocks
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ReplicatedBlocksMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"TotalReplicatedBlocks"
block|,
literal|"Total number of replicated blocks"
block|}
argument_list|)
DECL|method|getTotalReplicatedBlocks ()
specifier|public
name|long
name|getTotalReplicatedBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getTotalReplicatedBlocks
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ECBlockGroupsMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"LowRedundancyECBlockGroups"
block|,
literal|"Number of erasure coded block "
operator|+
literal|"groups with low redundancy"
block|}
argument_list|)
DECL|method|getLowRedundancyECBlockGroups ()
specifier|public
name|long
name|getLowRedundancyECBlockGroups
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getLowRedundancyECBlockGroups
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ECBlockGroupsMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"CorruptECBlockGroups"
block|,
literal|"Number of erasure coded block groups that"
operator|+
literal|" are corrupt"
block|}
argument_list|)
DECL|method|getCorruptECBlockGroups ()
specifier|public
name|long
name|getCorruptECBlockGroups
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getCorruptECBlockGroups
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ECBlockGroupsMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"MissingECBlockGroups"
block|,
literal|"Number of erasure coded block groups that"
operator|+
literal|" are missing"
block|}
argument_list|)
DECL|method|getMissingECBlockGroups ()
specifier|public
name|long
name|getMissingECBlockGroups
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getMissingECBlockGroups
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ECBlockGroupsMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"BytesInFutureECBlockGroups"
block|,
literal|"Total bytes in erasure coded block "
operator|+
literal|"groups with future generation stamp"
block|}
argument_list|)
DECL|method|getBytesInFutureECBlockGroups ()
specifier|public
name|long
name|getBytesInFutureECBlockGroups
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getBytesInFutureECBlockGroups
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ECBlockGroupsMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"PendingDeletionECBlocks"
block|,
literal|"Number of erasure coded blocks "
operator|+
literal|"that are pending deletion"
block|}
argument_list|)
DECL|method|getPendingDeletionECBlocks ()
specifier|public
name|long
name|getPendingDeletionECBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getPendingDeletionECBlocks
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// ECBlockGroupsMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"TotalECBlockGroups"
block|,
literal|"Total number of erasure coded block groups"
block|}
argument_list|)
DECL|method|getTotalECBlockGroups ()
specifier|public
name|long
name|getTotalECBlockGroups
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getTotalECBlockGroups
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getBlockDeletionStartTime ()
specifier|public
name|long
name|getBlockDeletionStartTime
parameter_list|()
block|{
return|return
name|startTime
operator|+
name|blockManager
operator|.
name|getStartupDelayBlockDeletionInMs
argument_list|()
return|;
block|}
annotation|@
name|Metric
DECL|method|getExcessBlocks ()
specifier|public
name|long
name|getExcessBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getExcessBlocksCount
argument_list|()
return|;
block|}
annotation|@
name|Metric
DECL|method|getNumTimedOutPendingReconstructions ()
specifier|public
name|long
name|getNumTimedOutPendingReconstructions
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getNumTimedOutPendingReconstructions
argument_list|()
return|;
block|}
comment|// HA-only metric
annotation|@
name|Metric
DECL|method|getPostponedMisreplicatedBlocks ()
specifier|public
name|long
name|getPostponedMisreplicatedBlocks
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getPostponedMisreplicatedBlocksCount
argument_list|()
return|;
block|}
comment|// HA-only metric
annotation|@
name|Metric
DECL|method|getPendingDataNodeMessageCount ()
specifier|public
name|int
name|getPendingDataNodeMessageCount
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getPendingDataNodeMessageCount
argument_list|()
return|;
block|}
comment|// HA-only metric
annotation|@
name|Metric
DECL|method|getHAState ()
specifier|public
name|String
name|getHAState
parameter_list|()
block|{
return|return
name|haContext
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// HA-only metric
annotation|@
name|Metric
DECL|method|getMillisSinceLastLoadedEdits ()
specifier|public
name|long
name|getMillisSinceLastLoadedEdits
parameter_list|()
block|{
if|if
condition|(
name|isInStandbyState
argument_list|()
operator|&&
name|editLogTailer
operator|!=
literal|null
condition|)
block|{
return|return
name|monotonicNow
argument_list|()
operator|-
name|editLogTailer
operator|.
name|getLastLoadTimeMs
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Metric
DECL|method|getBlockCapacity ()
specifier|public
name|int
name|getBlockCapacity
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getCapacity
argument_list|()
return|;
block|}
DECL|method|getState ()
specifier|public
name|HAServiceState
name|getState
parameter_list|()
block|{
return|return
name|haContext
operator|==
literal|null
condition|?
literal|null
else|:
name|haContext
operator|.
name|getState
argument_list|()
operator|.
name|getServiceState
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
DECL|method|getFSState ()
specifier|public
name|String
name|getFSState
parameter_list|()
block|{
return|return
name|isInSafeMode
argument_list|()
condition|?
literal|"safeMode"
else|:
literal|"Operational"
return|;
block|}
DECL|field|namesystemMBeanName
DECL|field|replicatedBlocksMBeanName
specifier|private
name|ObjectName
name|namesystemMBeanName
decl_stmt|,
name|replicatedBlocksMBeanName
decl_stmt|,
DECL|field|ecBlockGroupsMBeanName
DECL|field|namenodeMXBeanName
name|ecBlockGroupsMBeanName
decl_stmt|,
name|namenodeMXBeanName
decl_stmt|;
comment|/**    * Register following MBeans with their respective names.    * FSNamesystemMBean:    *        "hadoop:service=NameNode,name=FSNamesystemState"    * ReplicatedBlocksMBean:    *        "hadoop:service=NameNode,name=ReplicatedBlocksState"    * ECBlockGroupsMBean:    *        "hadoop:service=NameNode,name=ECBlockGroupsState"    */
DECL|method|registerMBean ()
specifier|private
name|void
name|registerMBean
parameter_list|()
block|{
comment|// We can only implement one MXBean interface, so we keep the old one.
try|try
block|{
name|StandardMBean
name|namesystemBean
init|=
operator|new
name|StandardMBean
argument_list|(
name|this
argument_list|,
name|FSNamesystemMBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|StandardMBean
name|replicaBean
init|=
operator|new
name|StandardMBean
argument_list|(
name|this
argument_list|,
name|ReplicatedBlocksMBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|StandardMBean
name|ecBean
init|=
operator|new
name|StandardMBean
argument_list|(
name|this
argument_list|,
name|ECBlockGroupsMBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|namesystemMBeanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"NameNode"
argument_list|,
literal|"FSNamesystemState"
argument_list|,
name|namesystemBean
argument_list|)
expr_stmt|;
name|replicatedBlocksMBeanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"NameNode"
argument_list|,
literal|"ReplicatedBlocksState"
argument_list|,
name|replicaBean
argument_list|)
expr_stmt|;
name|ecBlockGroupsMBeanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"NameNode"
argument_list|,
literal|"ECBlockGroupsState"
argument_list|,
name|ecBean
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotCompliantMBeanException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad MBean setup"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered FSNamesystemState, ReplicatedBlocksState and "
operator|+
literal|"ECBlockGroupsState MBeans."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shutdown FSNamesystem.    */
DECL|method|shutdown ()
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|snapshotManager
operator|!=
literal|null
condition|)
block|{
name|snapshotManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|namesystemMBeanName
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|namesystemMBeanName
argument_list|)
expr_stmt|;
name|namesystemMBeanName
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|replicatedBlocksMBeanName
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|replicatedBlocksMBeanName
argument_list|)
expr_stmt|;
name|replicatedBlocksMBeanName
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|ecBlockGroupsMBeanName
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|ecBlockGroupsMBeanName
argument_list|)
expr_stmt|;
name|ecBlockGroupsMBeanName
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|namenodeMXBeanName
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|namenodeMXBeanName
argument_list|)
expr_stmt|;
name|namenodeMXBeanName
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|dir
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|blockManager
operator|!=
literal|null
condition|)
block|{
name|blockManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|provider
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close provider."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumLiveDataNodes"
block|,
literal|"Number of datanodes which are currently live"
block|}
argument_list|)
DECL|method|getNumLiveDataNodes ()
specifier|public
name|int
name|getNumLiveDataNodes
parameter_list|()
block|{
return|return
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumLiveDataNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumDeadDataNodes"
block|,
literal|"Number of datanodes which are currently dead"
block|}
argument_list|)
DECL|method|getNumDeadDataNodes ()
specifier|public
name|int
name|getNumDeadDataNodes
parameter_list|()
block|{
return|return
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumDeadDataNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumDecomLiveDataNodes"
block|,
literal|"Number of datanodes which have been decommissioned and are now live"
block|}
argument_list|)
DECL|method|getNumDecomLiveDataNodes ()
specifier|public
name|int
name|getNumDecomLiveDataNodes
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|liveDecommissioned
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|live
control|)
block|{
name|liveDecommissioned
operator|+=
name|node
operator|.
name|isDecommissioned
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
return|return
name|liveDecommissioned
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumDecomDeadDataNodes"
block|,
literal|"Number of datanodes which have been decommissioned and are now dead"
block|}
argument_list|)
DECL|method|getNumDecomDeadDataNodes ()
specifier|public
name|int
name|getNumDecomDeadDataNodes
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|dead
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
literal|null
argument_list|,
name|dead
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|deadDecommissioned
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|dead
control|)
block|{
name|deadDecommissioned
operator|+=
name|node
operator|.
name|isDecommissioned
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
return|return
name|deadDecommissioned
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"VolumeFailuresTotal"
block|,
literal|"Total number of volume failures across all Datanodes"
block|}
argument_list|)
DECL|method|getVolumeFailuresTotal ()
specifier|public
name|int
name|getVolumeFailuresTotal
parameter_list|()
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|volumeFailuresTotal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|live
control|)
block|{
name|volumeFailuresTotal
operator|+=
name|node
operator|.
name|getVolumeFailures
argument_list|()
expr_stmt|;
block|}
return|return
name|volumeFailuresTotal
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"EstimatedCapacityLostTotal"
block|,
literal|"An estimate of the total capacity lost due to volume failures"
block|}
argument_list|)
DECL|method|getEstimatedCapacityLostTotal ()
specifier|public
name|long
name|getEstimatedCapacityLostTotal
parameter_list|()
block|{
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|estimatedCapacityLostTotal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|live
control|)
block|{
name|VolumeFailureSummary
name|volumeFailureSummary
init|=
name|node
operator|.
name|getVolumeFailureSummary
argument_list|()
decl_stmt|;
if|if
condition|(
name|volumeFailureSummary
operator|!=
literal|null
condition|)
block|{
name|estimatedCapacityLostTotal
operator|+=
name|volumeFailureSummary
operator|.
name|getEstimatedCapacityLostTotal
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|estimatedCapacityLostTotal
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumDecommissioningDataNodes"
block|,
literal|"Number of datanodes in decommissioning state"
block|}
argument_list|)
DECL|method|getNumDecommissioningDataNodes ()
specifier|public
name|int
name|getNumDecommissioningDataNodes
parameter_list|()
block|{
return|return
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDecommissioningNodes
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"StaleDataNodes"
block|,
literal|"Number of datanodes marked stale due to delayed heartbeat"
block|}
argument_list|)
DECL|method|getNumStaleDataNodes ()
specifier|public
name|int
name|getNumStaleDataNodes
parameter_list|()
block|{
return|return
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumStaleNodes
argument_list|()
return|;
block|}
comment|/**    * Storages are marked as "content stale" after NN restart or fails over and    * before NN receives the first Heartbeat followed by the first Blockreport.    */
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumStaleStorages"
block|,
literal|"Number of storages marked as content stale"
block|}
argument_list|)
DECL|method|getNumStaleStorages ()
specifier|public
name|int
name|getNumStaleStorages
parameter_list|()
block|{
return|return
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getNumStaleStorages
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
DECL|method|getTopUserOpCounts ()
specifier|public
name|String
name|getTopUserOpCounts
parameter_list|()
block|{
if|if
condition|(
operator|!
name|topConf
operator|.
name|isEnabled
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RollingWindowManager
operator|.
name|TopWindow
argument_list|>
name|topWindows
init|=
name|topMetrics
operator|.
name|getTopWindows
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|topMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|topMap
operator|.
name|put
argument_list|(
literal|"windows"
argument_list|,
name|topWindows
argument_list|)
expr_stmt|;
name|topMap
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|DFSUtil
operator|.
name|dateToIso8601String
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|JsonUtil
operator|.
name|toJsonString
argument_list|(
name|topMap
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to fetch TopUser metrics"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Increments, logs and then returns the stamp    */
DECL|method|nextGenerationStamp (boolean legacyBlock)
name|long
name|nextGenerationStamp
parameter_list|(
name|boolean
name|legacyBlock
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot get next generation stamp"
argument_list|)
expr_stmt|;
name|long
name|gs
init|=
name|blockManager
operator|.
name|nextGenerationStamp
argument_list|(
name|legacyBlock
argument_list|)
decl_stmt|;
if|if
condition|(
name|legacyBlock
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logLegacyGenerationStamp
argument_list|(
name|gs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getEditLog
argument_list|()
operator|.
name|logGenerationStamp
argument_list|(
name|gs
argument_list|)
expr_stmt|;
block|}
comment|// NB: callers sync the log
return|return
name|gs
return|;
block|}
comment|/**    * Increments, logs and then returns the block ID    * @param blockType is the file under striping or contiguous layout?    */
DECL|method|nextBlockId (BlockType blockType)
specifier|private
name|long
name|nextBlockId
parameter_list|(
name|BlockType
name|blockType
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot get next block ID"
argument_list|)
expr_stmt|;
specifier|final
name|long
name|blockId
init|=
name|blockManager
operator|.
name|nextBlockId
argument_list|(
name|blockType
argument_list|)
decl_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logAllocateBlockId
argument_list|(
name|blockId
argument_list|)
expr_stmt|;
comment|// NB: callers sync the log
return|return
name|blockId
return|;
block|}
DECL|method|isFileDeleted (INodeFile file)
name|boolean
name|isFileDeleted
parameter_list|(
name|INodeFile
name|file
parameter_list|)
block|{
assert|assert
name|hasReadLock
argument_list|()
assert|;
comment|// Not in the inodeMap or in the snapshot but marked deleted.
if|if
condition|(
name|dir
operator|.
name|getInode
argument_list|(
name|file
operator|.
name|getId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// look at the path hierarchy to see if one parent is deleted by recursive
comment|// deletion
name|INode
name|tmpChild
init|=
name|file
decl_stmt|;
name|INodeDirectory
name|tmpParent
init|=
name|file
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|tmpParent
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|INode
name|childINode
init|=
name|tmpParent
operator|.
name|getChild
argument_list|(
name|tmpChild
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
name|Snapshot
operator|.
name|CURRENT_STATE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|childINode
operator|==
literal|null
operator|||
operator|!
name|childINode
operator|.
name|equals
argument_list|(
name|tmpChild
argument_list|)
condition|)
block|{
comment|// a newly created INode with the same name as an already deleted one
comment|// would be a different INode than the deleted one
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tmpParent
operator|.
name|isRoot
argument_list|()
condition|)
block|{
break|break;
block|}
name|tmpChild
operator|=
name|tmpParent
expr_stmt|;
name|tmpParent
operator|=
name|tmpParent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|isWithSnapshot
argument_list|()
operator|&&
name|file
operator|.
name|getFileWithSnapshotFeature
argument_list|()
operator|.
name|isCurrentFileDeleted
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|checkUCBlock (ExtendedBlock block, String clientName)
specifier|private
name|INodeFile
name|checkUCBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot get a new generation stamp and an "
operator|+
literal|"access token for block "
operator|+
name|block
argument_list|)
expr_stmt|;
comment|// check stored block state
name|BlockInfo
name|storedBlock
init|=
name|getStoredBlock
argument_list|(
name|ExtendedBlock
operator|.
name|getLocalBlock
argument_list|(
name|block
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|storedBlock
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|block
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
name|storedBlock
operator|.
name|getBlockUCState
argument_list|()
operator|!=
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected BlockUCState: "
operator|+
name|block
operator|+
literal|" is "
operator|+
name|storedBlock
operator|.
name|getBlockUCState
argument_list|()
operator|+
literal|" but not "
operator|+
name|BlockUCState
operator|.
name|UNDER_CONSTRUCTION
argument_list|)
throw|;
block|}
comment|// check file inode
specifier|final
name|INodeFile
name|file
init|=
name|getBlockCollection
argument_list|(
name|storedBlock
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
operator|||
operator|!
name|file
operator|.
name|isUnderConstruction
argument_list|()
operator|||
name|isFileDeleted
argument_list|(
name|file
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The file "
operator|+
name|storedBlock
operator|+
literal|" belonged to does not exist or it is not under construction."
argument_list|)
throw|;
block|}
comment|// check lease
if|if
condition|(
name|clientName
operator|==
literal|null
operator|||
operator|!
name|clientName
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getFileUnderConstructionFeature
argument_list|()
operator|.
name|getClientName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LeaseExpiredException
argument_list|(
literal|"Lease mismatch: "
operator|+
name|block
operator|+
literal|" is accessed by a non lease holder "
operator|+
name|clientName
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
comment|/**    * Client is reporting some bad block locations.    */
DECL|method|reportBadBlocks (LocatedBlock[] blocks)
name|void
name|reportBadBlocks
parameter_list|(
name|LocatedBlock
index|[]
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ExtendedBlock
name|blk
init|=
name|blocks
index|[
name|i
index|]
operator|.
name|getBlock
argument_list|()
decl_stmt|;
name|DatanodeInfo
index|[]
name|nodes
init|=
name|blocks
index|[
name|i
index|]
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|String
index|[]
name|storageIDs
init|=
name|blocks
index|[
name|i
index|]
operator|.
name|getStorageIDs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|nodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|NameNode
operator|.
name|stateChangeLog
operator|.
name|info
argument_list|(
literal|"*DIR* reportBadBlocks for block: {} on"
operator|+
literal|" datanode: {}"
argument_list|,
name|blk
argument_list|,
name|nodes
index|[
name|j
index|]
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|findAndMarkBlockAsCorrupt
argument_list|(
name|blk
argument_list|,
name|nodes
index|[
name|j
index|]
argument_list|,
name|storageIDs
operator|==
literal|null
condition|?
literal|null
else|:
name|storageIDs
index|[
name|j
index|]
argument_list|,
literal|"client machine reported it"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"reportBadBlocks"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get a new generation stamp together with an access token for     * a block under construction    *     * This method is called for recovering a failed write or setting up    * a block for appended.    *     * @param block a block    * @param clientName the name of a client    * @return a located block with a new generation stamp and an access token    * @throws IOException if any error occurs    */
DECL|method|bumpBlockGenerationStamp (ExtendedBlock block, String clientName)
name|LocatedBlock
name|bumpBlockGenerationStamp
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|,
name|String
name|clientName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LocatedBlock
name|locatedBlock
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// check vadility of parameters
specifier|final
name|INodeFile
name|file
init|=
name|checkUCBlock
argument_list|(
name|block
argument_list|,
name|clientName
argument_list|)
decl_stmt|;
comment|// get a new generation stamp and an access token
name|block
operator|.
name|setGenerationStamp
argument_list|(
name|nextGenerationStamp
argument_list|(
name|blockManager
operator|.
name|isLegacyBlock
argument_list|(
name|block
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|locatedBlock
operator|=
name|BlockManager
operator|.
name|newLocatedBlock
argument_list|(
name|block
argument_list|,
name|file
operator|.
name|getLastBlock
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|setBlockToken
argument_list|(
name|locatedBlock
argument_list|,
name|BlockTokenIdentifier
operator|.
name|AccessMode
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"bumpBlockGenerationStamp"
argument_list|)
expr_stmt|;
block|}
comment|// Ensure we record the new generation stamp
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
return|return
name|locatedBlock
return|;
block|}
comment|/**    * Update a pipeline for a block under construction    *     * @param clientName the name of the client    * @param oldBlock and old block    * @param newBlock a new block with a new generation stamp and length    * @param newNodes datanodes in the pipeline    * @throws IOException if any error occurs    */
DECL|method|updatePipeline ( String clientName, ExtendedBlock oldBlock, ExtendedBlock newBlock, DatanodeID[] newNodes, String[] newStorageIDs, boolean logRetryCache)
name|void
name|updatePipeline
parameter_list|(
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|oldBlock
parameter_list|,
name|ExtendedBlock
name|newBlock
parameter_list|,
name|DatanodeID
index|[]
name|newNodes
parameter_list|,
name|String
index|[]
name|newStorageIDs
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"updatePipeline("
operator|+
name|oldBlock
operator|.
name|getLocalBlock
argument_list|()
operator|+
literal|", newGS="
operator|+
name|newBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|+
literal|", newLength="
operator|+
name|newBlock
operator|.
name|getNumBytes
argument_list|()
operator|+
literal|", newNodes="
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|newNodes
argument_list|)
operator|+
literal|", client="
operator|+
name|clientName
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Pipeline not updated"
argument_list|)
expr_stmt|;
assert|assert
name|newBlock
operator|.
name|getBlockId
argument_list|()
operator|==
name|oldBlock
operator|.
name|getBlockId
argument_list|()
operator|:
name|newBlock
operator|+
literal|" and "
operator|+
name|oldBlock
operator|+
literal|" has different block identifier"
assert|;
name|updatePipelineInternal
argument_list|(
name|clientName
argument_list|,
name|oldBlock
argument_list|,
name|newBlock
argument_list|,
name|newNodes
argument_list|,
name|newStorageIDs
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"updatePipeline"
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"updatePipeline("
operator|+
name|oldBlock
operator|.
name|getLocalBlock
argument_list|()
operator|+
literal|" => "
operator|+
name|newBlock
operator|.
name|getLocalBlock
argument_list|()
operator|+
literal|") success"
argument_list|)
expr_stmt|;
block|}
DECL|method|updatePipelineInternal (String clientName, ExtendedBlock oldBlock, ExtendedBlock newBlock, DatanodeID[] newNodes, String[] newStorageIDs, boolean logRetryCache)
specifier|private
name|void
name|updatePipelineInternal
parameter_list|(
name|String
name|clientName
parameter_list|,
name|ExtendedBlock
name|oldBlock
parameter_list|,
name|ExtendedBlock
name|newBlock
parameter_list|,
name|DatanodeID
index|[]
name|newNodes
parameter_list|,
name|String
index|[]
name|newStorageIDs
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
comment|// check the vadility of the block and lease holder name
specifier|final
name|INodeFile
name|pendingFile
init|=
name|checkUCBlock
argument_list|(
name|oldBlock
argument_list|,
name|clientName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|src
init|=
name|pendingFile
operator|.
name|getFullPathName
argument_list|()
decl_stmt|;
specifier|final
name|BlockInfo
name|lastBlock
init|=
name|pendingFile
operator|.
name|getLastBlock
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|lastBlock
operator|.
name|isComplete
argument_list|()
assert|;
comment|// check new GS& length: this is not expected
if|if
condition|(
name|newBlock
operator|.
name|getGenerationStamp
argument_list|()
operator|<=
name|lastBlock
operator|.
name|getGenerationStamp
argument_list|()
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Update "
operator|+
name|oldBlock
operator|+
literal|" but the new block "
operator|+
name|newBlock
operator|+
literal|" does not have a larger generation stamp than the last block "
operator|+
name|lastBlock
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|newBlock
operator|.
name|getNumBytes
argument_list|()
operator|<
name|lastBlock
operator|.
name|getNumBytes
argument_list|()
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Update "
operator|+
name|oldBlock
operator|+
literal|" (size="
operator|+
name|oldBlock
operator|.
name|getNumBytes
argument_list|()
operator|+
literal|") to a smaller size block "
operator|+
name|newBlock
operator|+
literal|" (size="
operator|+
name|newBlock
operator|.
name|getNumBytes
argument_list|()
operator|+
literal|")"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// Update old block with the new generation stamp and new length
name|blockManager
operator|.
name|updateLastBlock
argument_list|(
name|lastBlock
argument_list|,
name|newBlock
argument_list|)
expr_stmt|;
comment|// find the DatanodeDescriptor objects
specifier|final
name|DatanodeStorageInfo
index|[]
name|storages
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeStorageInfos
argument_list|(
name|newNodes
argument_list|,
name|newStorageIDs
argument_list|,
literal|"src=%s, oldBlock=%s, newBlock=%s, clientName=%s"
argument_list|,
name|src
argument_list|,
name|oldBlock
argument_list|,
name|newBlock
argument_list|,
name|clientName
argument_list|)
decl_stmt|;
name|lastBlock
operator|.
name|getUnderConstructionFeature
argument_list|()
operator|.
name|setExpectedLocations
argument_list|(
name|lastBlock
argument_list|,
name|storages
argument_list|,
name|lastBlock
operator|.
name|getBlockType
argument_list|()
argument_list|)
expr_stmt|;
name|FSDirWriteFileOp
operator|.
name|persistBlocks
argument_list|(
name|dir
argument_list|,
name|src
argument_list|,
name|pendingFile
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
comment|/**    * Register a Backup name-node, verifying that it belongs    * to the correct namespace, and adding it to the set of    * active journals if necessary.    *     * @param bnReg registration of the new BackupNode    * @param nnReg registration of this NameNode    * @throws IOException if the namespace IDs do not match    */
DECL|method|registerBackupNode (NamenodeRegistration bnReg, NamenodeRegistration nnReg)
name|void
name|registerBackupNode
parameter_list|(
name|NamenodeRegistration
name|bnReg
parameter_list|,
name|NamenodeRegistration
name|nnReg
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getNamespaceID
argument_list|()
operator|!=
name|bnReg
operator|.
name|getNamespaceID
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incompatible namespaceIDs: "
operator|+
literal|" Namenode namespaceID = "
operator|+
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getNamespaceID
argument_list|()
operator|+
literal|"; "
operator|+
name|bnReg
operator|.
name|getRole
argument_list|()
operator|+
literal|" node namespaceID = "
operator|+
name|bnReg
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|bnReg
operator|.
name|getRole
argument_list|()
operator|==
name|NamenodeRole
operator|.
name|BACKUP
condition|)
block|{
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
operator|.
name|registerBackupNode
argument_list|(
name|bnReg
argument_list|,
name|nnReg
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"registerBackupNode"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Release (unregister) backup node.    *<p>    * Find and remove the backup stream corresponding to the node.    * @throws IOException    */
DECL|method|releaseBackupNode (NamenodeRegistration registration)
name|void
name|releaseBackupNode
parameter_list|(
name|NamenodeRegistration
name|registration
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getNamespaceID
argument_list|()
operator|!=
name|registration
operator|.
name|getNamespaceID
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incompatible namespaceIDs: "
operator|+
literal|" Namenode namespaceID = "
operator|+
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getNamespaceID
argument_list|()
operator|+
literal|"; "
operator|+
name|registration
operator|.
name|getRole
argument_list|()
operator|+
literal|" node namespaceID = "
operator|+
name|registration
operator|.
name|getNamespaceID
argument_list|()
argument_list|)
throw|;
name|getEditLog
argument_list|()
operator|.
name|releaseBackupStream
argument_list|(
name|registration
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"releaseBackupNode"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CorruptFileBlockInfo
specifier|static
class|class
name|CorruptFileBlockInfo
block|{
DECL|field|path
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|block
specifier|final
name|Block
name|block
decl_stmt|;
DECL|method|CorruptFileBlockInfo (String p, Block b)
specifier|public
name|CorruptFileBlockInfo
parameter_list|(
name|String
name|p
parameter_list|,
name|Block
name|b
parameter_list|)
block|{
name|path
operator|=
name|p
expr_stmt|;
name|block
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|block
operator|.
name|getBlockName
argument_list|()
operator|+
literal|"\t"
operator|+
name|path
return|;
block|}
block|}
comment|/**    * @param path Restrict corrupt files to this portion of namespace.    * @param cookieTab Support for continuation; cookieTab  tells where    *                  to start from    * @return a list in which each entry describes a corrupt file/block    * @throws IOException    */
DECL|method|listCorruptFileBlocks (String path, String[] cookieTab)
name|Collection
argument_list|<
name|CorruptFileBlockInfo
argument_list|>
name|listCorruptFileBlocks
parameter_list|(
name|String
name|path
parameter_list|,
name|String
index|[]
name|cookieTab
parameter_list|)
throws|throws
name|IOException
block|{
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|CorruptFileBlockInfo
argument_list|>
name|corruptFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|CorruptFileBlockInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|cookieTab
operator|==
literal|null
condition|)
block|{
name|cookieTab
operator|=
operator|new
name|String
index|[]
block|{
literal|null
block|}
expr_stmt|;
block|}
comment|// Do a quick check if there are any corrupt files without taking the lock
if|if
condition|(
name|blockManager
operator|.
name|getMissingBlocksCount
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|cookieTab
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|cookieTab
index|[
literal|0
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|getIntCookie
argument_list|(
name|cookieTab
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"there are no corrupt file blocks."
argument_list|)
expr_stmt|;
block|}
return|return
name|corruptFiles
return|;
block|}
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|blockManager
operator|.
name|isPopulatingReplQueues
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot run listCorruptFileBlocks because "
operator|+
literal|"replication queues have not been initialized."
argument_list|)
throw|;
block|}
comment|// print a limited # of corrupt files per call
specifier|final
name|Iterator
argument_list|<
name|BlockInfo
argument_list|>
name|blkIterator
init|=
name|blockManager
operator|.
name|getCorruptReplicaBlockIterator
argument_list|()
decl_stmt|;
name|int
name|skip
init|=
name|getIntCookie
argument_list|(
name|cookieTab
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|skip
operator|&&
name|blkIterator
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|blkIterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|blkIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BlockInfo
name|blk
init|=
name|blkIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|INodeFile
name|inode
init|=
name|getBlockCollection
argument_list|(
name|blk
argument_list|)
decl_stmt|;
name|skip
operator|++
expr_stmt|;
if|if
condition|(
name|inode
operator|!=
literal|null
condition|)
block|{
name|String
name|src
init|=
name|inode
operator|.
name|getFullPathName
argument_list|()
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|corruptFiles
operator|.
name|add
argument_list|(
operator|new
name|CorruptFileBlockInfo
argument_list|(
name|src
argument_list|,
name|blk
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|>=
name|DEFAULT_MAX_CORRUPT_FILEBLOCKS_RETURNED
condition|)
break|break;
block|}
block|}
block|}
name|cookieTab
index|[
literal|0
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|skip
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"list corrupt file blocks returned: "
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
return|return
name|corruptFiles
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"listCorruptFileBlocks"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Convert string cookie to integer.    */
DECL|method|getIntCookie (String cookie)
specifier|private
specifier|static
name|int
name|getIntCookie
parameter_list|(
name|String
name|cookie
parameter_list|)
block|{
name|int
name|c
decl_stmt|;
if|if
condition|(
name|cookie
operator|==
literal|null
condition|)
block|{
name|c
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|c
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|c
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|c
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
comment|/**    * Create delegation token secret manager    */
DECL|method|createDelegationTokenSecretManager ( Configuration conf)
specifier|private
name|DelegationTokenSecretManager
name|createDelegationTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|DelegationTokenSecretManager
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_DELEGATION_KEY_UPDATE_INTERVAL_KEY
argument_list|,
name|DFS_NAMENODE_DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_DELEGATION_TOKEN_MAX_LIFETIME_KEY
argument_list|,
name|DFS_NAMENODE_DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|DFS_NAMENODE_DELEGATION_TOKEN_RENEW_INTERVAL_KEY
argument_list|,
name|DFS_NAMENODE_DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
argument_list|)
argument_list|,
name|DELEGATION_TOKEN_REMOVER_SCAN_INTERVAL
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_NAMENODE_AUDIT_LOG_TOKEN_TRACKING_ID_KEY
argument_list|,
name|DFS_NAMENODE_AUDIT_LOG_TOKEN_TRACKING_ID_DEFAULT
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/**    * Returns the DelegationTokenSecretManager instance in the namesystem.    * @return delegation token secret manager object    */
DECL|method|getDelegationTokenSecretManager ()
name|DelegationTokenSecretManager
name|getDelegationTokenSecretManager
parameter_list|()
block|{
return|return
name|dtSecretManager
return|;
block|}
comment|/**    * @param renewer Renewer information    * @return delegation toek    * @throws IOException on error    */
DECL|method|getDelegationToken (Text renewer)
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"getDelegationToken"
decl_stmt|;
specifier|final
name|boolean
name|success
decl_stmt|;
specifier|final
name|String
name|tokenId
decl_stmt|;
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot issue delegation token"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delegation Token can be issued only with kerberos or web authentication"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dtSecretManager
operator|==
literal|null
operator|||
operator|!
name|dtSecretManager
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"trying to get DT with no secret manager running"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|getRemoteUser
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|Text
name|owner
init|=
operator|new
name|Text
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Text
name|realUser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|realUser
operator|=
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DelegationTokenIdentifier
name|dtId
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|owner
argument_list|,
name|renewer
argument_list|,
name|realUser
argument_list|)
decl_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId
argument_list|,
name|dtSecretManager
argument_list|)
expr_stmt|;
name|long
name|expiryTime
init|=
name|dtSecretManager
operator|.
name|getTokenExpiryTime
argument_list|(
name|dtId
argument_list|)
decl_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logGetDelegationToken
argument_list|(
name|dtId
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
name|tokenId
operator|=
name|dtId
operator|.
name|toStringStable
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"getDelegationToken"
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/**    *     * @param token token to renew    * @return new expiryTime of the token    * @throws InvalidToken if {@code token} is invalid    * @throws IOException on other errors    */
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> token)
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"renewDelegationToken"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|tokenId
decl_stmt|;
name|long
name|expiryTime
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot renew delegation token"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delegation Token can be renewed only with kerberos or web authentication"
argument_list|)
throw|;
block|}
name|String
name|renewer
init|=
name|getRemoteUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|expiryTime
operator|=
name|dtSecretManager
operator|.
name|renewToken
argument_list|(
name|token
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
specifier|final
name|DelegationTokenIdentifier
name|id
init|=
name|DFSUtil
operator|.
name|decodeDelegationToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logRenewDelegationToken
argument_list|(
name|id
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
name|tokenId
operator|=
name|id
operator|.
name|toStringStable
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
specifier|final
name|DelegationTokenIdentifier
name|id
init|=
name|DFSUtil
operator|.
name|decodeDelegationToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|tokenId
operator|=
name|id
operator|.
name|toStringStable
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"renewDelegationToken"
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
return|return
name|expiryTime
return|;
block|}
comment|/**    *     * @param token token to cancel    * @throws IOException on error    */
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> token)
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"cancelDelegationToken"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|tokenId
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot cancel delegation token"
argument_list|)
expr_stmt|;
name|String
name|canceller
init|=
name|getRemoteUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|DelegationTokenIdentifier
name|id
init|=
name|dtSecretManager
operator|.
name|cancelToken
argument_list|(
name|token
argument_list|,
name|canceller
argument_list|)
decl_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logCancelDelegationToken
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|tokenId
operator|=
name|id
operator|.
name|toStringStable
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
specifier|final
name|DelegationTokenIdentifier
name|id
init|=
name|DFSUtil
operator|.
name|decodeDelegationToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|tokenId
operator|=
name|id
operator|.
name|toStringStable
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
literal|"cancelDelegationToken"
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param out save state of the secret manager    * @param sdPath String storage directory path    */
DECL|method|saveSecretManagerStateCompat (DataOutputStream out, String sdPath)
name|void
name|saveSecretManagerStateCompat
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|String
name|sdPath
parameter_list|)
throws|throws
name|IOException
block|{
name|dtSecretManager
operator|.
name|saveSecretManagerStateCompat
argument_list|(
name|out
argument_list|,
name|sdPath
argument_list|)
expr_stmt|;
block|}
DECL|method|saveSecretManagerState ()
name|SecretManagerState
name|saveSecretManagerState
parameter_list|()
block|{
return|return
name|dtSecretManager
operator|.
name|saveSecretManagerState
argument_list|()
return|;
block|}
comment|/**    * @param in load the state of secret manager from input stream    */
DECL|method|loadSecretManagerStateCompat (DataInput in)
name|void
name|loadSecretManagerStateCompat
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|dtSecretManager
operator|.
name|loadSecretManagerStateCompat
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|loadSecretManagerState (SecretManagerSection s, List<SecretManagerSection.DelegationKey> keys, List<SecretManagerSection.PersistToken> tokens)
name|void
name|loadSecretManagerState
parameter_list|(
name|SecretManagerSection
name|s
parameter_list|,
name|List
argument_list|<
name|SecretManagerSection
operator|.
name|DelegationKey
argument_list|>
name|keys
parameter_list|,
name|List
argument_list|<
name|SecretManagerSection
operator|.
name|PersistToken
argument_list|>
name|tokens
parameter_list|)
throws|throws
name|IOException
block|{
name|dtSecretManager
operator|.
name|loadSecretManagerState
argument_list|(
operator|new
name|SecretManagerState
argument_list|(
name|s
argument_list|,
name|keys
argument_list|,
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Log the updateMasterKey operation to edit logs    *     * @param key new delegation key.    */
DECL|method|logUpdateMasterKey (DelegationKey key)
specifier|public
name|void
name|logUpdateMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
block|{
assert|assert
operator|!
name|isInSafeMode
argument_list|()
operator|:
literal|"this should never be called while in safemode, since we stop "
operator|+
literal|"the DT manager before entering safemode!"
assert|;
comment|// edit log rolling is not thread-safe and must be protected by the
comment|// fsn lock.  not updating namespace so read lock is sufficient.
assert|assert
name|hasReadLock
argument_list|()
assert|;
name|getEditLog
argument_list|()
operator|.
name|logUpdateMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
comment|/**    * Log the cancellation of expired tokens to edit logs    *     * @param id token identifier to cancel    */
DECL|method|logExpireDelegationToken (DelegationTokenIdentifier id)
specifier|public
name|void
name|logExpireDelegationToken
parameter_list|(
name|DelegationTokenIdentifier
name|id
parameter_list|)
block|{
assert|assert
operator|!
name|isInSafeMode
argument_list|()
operator|:
literal|"this should never be called while in safemode, since we stop "
operator|+
literal|"the DT manager before entering safemode!"
assert|;
comment|// edit log rolling is not thread-safe and must be protected by the
comment|// fsn lock.  not updating namespace so read lock is sufficient.
assert|assert
name|hasReadLock
argument_list|()
assert|;
comment|// do not logSync so expiration edits are batched
name|getEditLog
argument_list|()
operator|.
name|logCancelDelegationToken
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|logReassignLease (String leaseHolder, String src, String newHolder)
specifier|private
name|void
name|logReassignLease
parameter_list|(
name|String
name|leaseHolder
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|newHolder
parameter_list|)
block|{
assert|assert
name|hasWriteLock
argument_list|()
assert|;
name|getEditLog
argument_list|()
operator|.
name|logReassignLease
argument_list|(
name|leaseHolder
argument_list|,
name|src
argument_list|,
name|newHolder
argument_list|)
expr_stmt|;
block|}
comment|/**    *     * @return true if delegation token operation is allowed    */
DECL|method|isAllowedDelegationTokenOp ()
specifier|private
name|boolean
name|isAllowedDelegationTokenOp
parameter_list|()
throws|throws
name|IOException
block|{
name|AuthenticationMethod
name|authMethod
init|=
name|getConnectionAuthenticationMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthenticationMethod
operator|.
name|KERBEROS
operator|)
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthenticationMethod
operator|.
name|KERBEROS_SSL
operator|)
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthenticationMethod
operator|.
name|CERTIFICATE
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns authentication method used to establish the connection    * @return AuthenticationMethod used to establish connection    * @throws IOException    */
DECL|method|getConnectionAuthenticationMethod ()
specifier|private
name|AuthenticationMethod
name|getConnectionAuthenticationMethod
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|getRemoteUser
argument_list|()
decl_stmt|;
name|AuthenticationMethod
name|authMethod
init|=
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthenticationMethod
operator|.
name|PROXY
condition|)
block|{
name|authMethod
operator|=
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getAuthenticationMethod
argument_list|()
expr_stmt|;
block|}
return|return
name|authMethod
return|;
block|}
comment|/**    * Client invoked methods are invoked over RPC and will be in     * RPC call context even if the client exits.    */
DECL|method|isExternalInvocation ()
name|boolean
name|isExternalInvocation
parameter_list|()
block|{
return|return
name|Server
operator|.
name|isRpcInvocation
argument_list|()
return|;
block|}
comment|// optimize ugi lookup for RPC operations to avoid a trip through
comment|// UGI.getCurrentUser which is synch'ed
DECL|method|getRemoteUser ()
specifier|private
specifier|static
name|UserGroupInformation
name|getRemoteUser
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|NameNode
operator|.
name|getRemoteUser
argument_list|()
return|;
block|}
comment|/**    * Log fsck event in the audit log     */
DECL|method|logFsckEvent (String src, InetAddress remoteAddress)
name|void
name|logFsckEvent
parameter_list|(
name|String
name|src
parameter_list|,
name|InetAddress
name|remoteAddress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAuditEnabled
argument_list|()
condition|)
block|{
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|getRemoteUser
argument_list|()
argument_list|,
name|remoteAddress
argument_list|,
literal|"fsck"
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Register NameNodeMXBean.    */
DECL|method|registerMXBean ()
specifier|private
name|void
name|registerMXBean
parameter_list|()
block|{
name|namenodeMXBeanName
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"NameNode"
argument_list|,
literal|"NameNodeInfo"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Class representing Namenode information for JMX interfaces    */
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|+
literal|", r"
operator|+
name|VersionInfo
operator|.
name|getRevision
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getUsed ()
specifier|public
name|long
name|getUsed
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCapacityUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getFree ()
specifier|public
name|long
name|getFree
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCapacityRemaining
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getTotal ()
specifier|public
name|long
name|getTotal
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCapacityTotal
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getProvidedCapacity ()
specifier|public
name|long
name|getProvidedCapacity
parameter_list|()
block|{
return|return
name|this
operator|.
name|getProvidedCapacityTotal
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getSafemode ()
specifier|public
name|String
name|getSafemode
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isInSafeMode
argument_list|()
condition|)
return|return
literal|""
return|;
return|return
literal|"Safe mode is ON. "
operator|+
name|this
operator|.
name|getSafeModeTip
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|isUpgradeFinalized ()
specifier|public
name|boolean
name|isUpgradeFinalized
parameter_list|()
block|{
return|return
name|this
operator|.
name|getFSImage
argument_list|()
operator|.
name|isUpgradeFinalized
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getNonDfsUsedSpace ()
specifier|public
name|long
name|getNonDfsUsedSpace
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getCapacityUsedNonDFS
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getPercentUsed ()
specifier|public
name|float
name|getPercentUsed
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getCapacityUsedPercent
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getBlockPoolUsedSpace ()
specifier|public
name|long
name|getBlockPoolUsedSpace
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getBlockPoolUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getPercentBlockPoolUsed ()
specifier|public
name|float
name|getPercentBlockPoolUsed
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getPercentBlockPoolUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getPercentRemaining ()
specifier|public
name|float
name|getPercentRemaining
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getCapacityRemainingPercent
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getCacheCapacity ()
specifier|public
name|long
name|getCacheCapacity
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getCacheCapacity
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getCacheUsed ()
specifier|public
name|long
name|getCacheUsed
parameter_list|()
block|{
return|return
name|datanodeStatistics
operator|.
name|getCacheUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getTotalBlocks ()
specifier|public
name|long
name|getTotalBlocks
parameter_list|()
block|{
return|return
name|getBlocksTotal
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getNumberOfMissingBlocks ()
specifier|public
name|long
name|getNumberOfMissingBlocks
parameter_list|()
block|{
return|return
name|getMissingBlocksCount
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getNumberOfMissingBlocksWithReplicationFactorOne ()
specifier|public
name|long
name|getNumberOfMissingBlocksWithReplicationFactorOne
parameter_list|()
block|{
return|return
name|getMissingReplOneBlocksCount
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getThreads ()
specifier|public
name|int
name|getThreads
parameter_list|()
block|{
return|return
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
operator|.
name|getThreadCount
argument_list|()
return|;
block|}
comment|/**    * Returned information is a JSON representation of map with host name as the    * key and value is a map of live node attribute keys to its values    */
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getLiveNodes ()
specifier|public
name|String
name|getLiveNodes
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|info
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|live
control|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerinfo
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|builder
argument_list|()
decl_stmt|;
name|innerinfo
operator|.
name|put
argument_list|(
literal|"infoAddr"
argument_list|,
name|node
operator|.
name|getInfoAddr
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"infoSecureAddr"
argument_list|,
name|node
operator|.
name|getInfoSecureAddr
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"xferaddr"
argument_list|,
name|node
operator|.
name|getXferAddr
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"lastContact"
argument_list|,
name|getLastContact
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"usedSpace"
argument_list|,
name|getDfsUsed
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"adminState"
argument_list|,
name|node
operator|.
name|getAdminState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"nonDfsUsedSpace"
argument_list|,
name|node
operator|.
name|getNonDfsUsed
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"capacity"
argument_list|,
name|node
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"numBlocks"
argument_list|,
name|node
operator|.
name|numBlocks
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|node
operator|.
name|getSoftwareVersion
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"used"
argument_list|,
name|node
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"remaining"
argument_list|,
name|node
operator|.
name|getRemaining
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"blockScheduled"
argument_list|,
name|node
operator|.
name|getBlocksScheduled
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"blockPoolUsed"
argument_list|,
name|node
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"blockPoolUsedPercent"
argument_list|,
name|node
operator|.
name|getBlockPoolUsedPercent
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"volfails"
argument_list|,
name|node
operator|.
name|getVolumeFailures
argument_list|()
argument_list|)
comment|// Block report time in minutes
operator|.
name|put
argument_list|(
literal|"lastBlockReport"
argument_list|,
name|getLastBlockReport
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|VolumeFailureSummary
name|volumeFailureSummary
init|=
name|node
operator|.
name|getVolumeFailureSummary
argument_list|()
decl_stmt|;
if|if
condition|(
name|volumeFailureSummary
operator|!=
literal|null
condition|)
block|{
name|innerinfo
operator|.
name|put
argument_list|(
literal|"failedStorageIDs"
argument_list|,
name|volumeFailureSummary
operator|.
name|getFailedStorageLocations
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"lastVolumeFailureDate"
argument_list|,
name|volumeFailureSummary
operator|.
name|getLastVolumeFailureDate
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"estimatedCapacityLostTotal"
argument_list|,
name|volumeFailureSummary
operator|.
name|getEstimatedCapacityLostTotal
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getUpgradeDomain
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|innerinfo
operator|.
name|put
argument_list|(
literal|"upgradeDomain"
argument_list|,
name|node
operator|.
name|getUpgradeDomain
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|put
argument_list|(
name|node
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|node
operator|.
name|getXferPort
argument_list|()
argument_list|,
name|innerinfo
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
comment|/**    * Returned information is a JSON representation of map with host name as the    * key and value is a map of dead node attribute keys to its values    */
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getDeadNodes ()
specifier|public
name|String
name|getDeadNodes
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|info
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|dead
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
literal|null
argument_list|,
name|dead
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|dead
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerinfo
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"lastContact"
argument_list|,
name|getLastContact
argument_list|(
name|node
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"decommissioned"
argument_list|,
name|node
operator|.
name|isDecommissioned
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"adminState"
argument_list|,
name|node
operator|.
name|getAdminState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"xferaddr"
argument_list|,
name|node
operator|.
name|getXferAddr
argument_list|()
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
name|node
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|node
operator|.
name|getXferPort
argument_list|()
argument_list|,
name|innerinfo
argument_list|)
expr_stmt|;
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
comment|/**    * Returned information is a JSON representation of map with host name as the    * key and value is a map of decommissioning node attribute keys to its    * values    */
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getDecomNodes ()
specifier|public
name|String
name|getDecomNodes
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|info
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|decomNodeList
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|(         )
operator|.
name|getDecommissioningNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|decomNodeList
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerinfo
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"xferaddr"
argument_list|,
name|node
operator|.
name|getXferAddr
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"underReplicatedBlocks"
argument_list|,
name|node
operator|.
name|getLeavingServiceStatus
argument_list|()
operator|.
name|getUnderReplicatedBlocks
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"decommissionOnlyReplicas"
argument_list|,
name|node
operator|.
name|getLeavingServiceStatus
argument_list|()
operator|.
name|getOutOfServiceOnlyReplicas
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"underReplicateInOpenFiles"
argument_list|,
name|node
operator|.
name|getLeavingServiceStatus
argument_list|()
operator|.
name|getUnderReplicatedInOpenFiles
argument_list|()
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
name|node
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|node
operator|.
name|getXferPort
argument_list|()
argument_list|,
name|innerinfo
argument_list|)
expr_stmt|;
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
comment|/**    * Returned information is a JSON representation of map with host name of    * nodes entering maintenance as the key and value as a map of various node    * attributes to its values.    */
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getEnteringMaintenanceNodes ()
specifier|public
name|String
name|getEnteringMaintenanceNodes
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|nodesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|enteringMaintenanceNodeList
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getEnteringMaintenanceNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|enteringMaintenanceNodeList
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrMap
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"xferaddr"
argument_list|,
name|node
operator|.
name|getXferAddr
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"underReplicatedBlocks"
argument_list|,
name|node
operator|.
name|getLeavingServiceStatus
argument_list|()
operator|.
name|getUnderReplicatedBlocks
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"maintenanceOnlyReplicas"
argument_list|,
name|node
operator|.
name|getLeavingServiceStatus
argument_list|()
operator|.
name|getOutOfServiceOnlyReplicas
argument_list|()
argument_list|)
decl|.
name|put
argument_list|(
literal|"underReplicateInOpenFiles"
argument_list|,
name|node
operator|.
name|getLeavingServiceStatus
argument_list|()
operator|.
name|getUnderReplicatedInOpenFiles
argument_list|()
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|nodesMap
operator|.
name|put
argument_list|(
name|node
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|node
operator|.
name|getXferPort
argument_list|()
argument_list|,
name|attrMap
argument_list|)
expr_stmt|;
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|nodesMap
argument_list|)
return|;
block|}
DECL|method|getLastContact (DatanodeDescriptor alivenode)
specifier|private
name|long
name|getLastContact
parameter_list|(
name|DatanodeDescriptor
name|alivenode
parameter_list|)
block|{
return|return
operator|(
name|monotonicNow
argument_list|()
operator|-
name|alivenode
operator|.
name|getLastUpdateMonotonic
argument_list|()
operator|)
operator|/
literal|1000
return|;
block|}
DECL|method|getLastBlockReport (DatanodeDescriptor node)
specifier|private
name|Object
name|getLastBlockReport
parameter_list|(
name|DatanodeDescriptor
name|node
parameter_list|)
block|{
return|return
operator|(
name|monotonicNow
argument_list|()
operator|-
name|node
operator|.
name|getLastBlockReportMonotonic
argument_list|()
operator|)
operator|/
literal|60000
return|;
block|}
DECL|method|getDfsUsed (DatanodeDescriptor alivenode)
specifier|private
name|long
name|getDfsUsed
parameter_list|(
name|DatanodeDescriptor
name|alivenode
parameter_list|)
block|{
return|return
name|alivenode
operator|.
name|getDfsUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getClusterId ()
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getClusterID
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getBlockPoolId ()
specifier|public
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|getBlockManager
argument_list|()
operator|.
name|getBlockPoolId
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getNameDirStatuses ()
specifier|public
name|String
name|getNameDirStatuses
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|File
argument_list|,
name|StorageDirType
argument_list|>
argument_list|>
name|statusMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|File
argument_list|,
name|StorageDirType
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|File
argument_list|,
name|StorageDirType
argument_list|>
name|activeDirs
init|=
operator|new
name|HashMap
argument_list|<
name|File
argument_list|,
name|StorageDirType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StorageDirectory
argument_list|>
name|it
init|=
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|dirIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StorageDirectory
name|st
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|activeDirs
operator|.
name|put
argument_list|(
name|st
operator|.
name|getRoot
argument_list|()
argument_list|,
name|st
operator|.
name|getStorageDirType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|statusMap
operator|.
name|put
argument_list|(
literal|"active"
argument_list|,
name|activeDirs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Storage
operator|.
name|StorageDirectory
argument_list|>
name|removedStorageDirs
init|=
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getRemovedStorageDirs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|File
argument_list|,
name|StorageDirType
argument_list|>
name|failedDirs
init|=
operator|new
name|HashMap
argument_list|<
name|File
argument_list|,
name|StorageDirType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StorageDirectory
name|st
range|:
name|removedStorageDirs
control|)
block|{
name|failedDirs
operator|.
name|put
argument_list|(
name|st
operator|.
name|getRoot
argument_list|()
argument_list|,
name|st
operator|.
name|getStorageDirType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|statusMap
operator|.
name|put
argument_list|(
literal|"failed"
argument_list|,
name|failedDirs
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|statusMap
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getNodeUsage ()
specifier|public
name|String
name|getNodeUsage
parameter_list|()
block|{
name|float
name|median
init|=
literal|0
decl_stmt|;
name|float
name|max
init|=
literal|0
decl_stmt|;
name|float
name|min
init|=
literal|0
decl_stmt|;
name|float
name|dev
init|=
literal|0
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|info
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|it
init|=
name|live
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatanodeDescriptor
name|node
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isInService
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|live
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|float
name|totalDfsUsed
init|=
literal|0
decl_stmt|;
name|float
index|[]
name|usages
init|=
operator|new
name|float
index|[
name|live
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|dn
range|:
name|live
control|)
block|{
name|usages
index|[
name|i
operator|++
index|]
operator|=
name|dn
operator|.
name|getDfsUsedPercent
argument_list|()
expr_stmt|;
name|totalDfsUsed
operator|+=
name|dn
operator|.
name|getDfsUsedPercent
argument_list|()
expr_stmt|;
block|}
name|totalDfsUsed
operator|/=
name|live
operator|.
name|size
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|usages
argument_list|)
expr_stmt|;
name|median
operator|=
name|usages
index|[
name|usages
operator|.
name|length
operator|/
literal|2
index|]
expr_stmt|;
name|max
operator|=
name|usages
index|[
name|usages
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
name|min
operator|=
name|usages
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|usages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dev
operator|+=
operator|(
name|usages
index|[
name|i
index|]
operator|-
name|totalDfsUsed
operator|)
operator|*
operator|(
name|usages
index|[
name|i
index|]
operator|-
name|totalDfsUsed
operator|)
expr_stmt|;
block|}
name|dev
operator|=
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|dev
operator|/
name|usages
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"min"
argument_list|,
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|min
argument_list|)
argument_list|)
expr_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"median"
argument_list|,
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|median
argument_list|)
argument_list|)
expr_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"max"
argument_list|,
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
name|innerInfo
operator|.
name|put
argument_list|(
literal|"stdDev"
argument_list|,
name|StringUtils
operator|.
name|format
argument_list|(
literal|"%.2f%%"
argument_list|,
name|dev
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|"nodeUsage"
argument_list|,
name|innerInfo
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getNameJournalStatus ()
specifier|public
name|String
name|getNameJournalStatus
parameter_list|()
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|jasList
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|FSEditLog
name|log
init|=
name|getFSImage
argument_list|()
operator|.
name|getEditLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
comment|// This flag can be false because we cannot hold a lock of FSEditLog
comment|// for metrics.
name|boolean
name|openForWrite
init|=
name|log
operator|.
name|isOpenForWriteWithoutLock
argument_list|()
decl_stmt|;
for|for
control|(
name|JournalAndStream
name|jas
range|:
name|log
operator|.
name|getJournals
argument_list|()
control|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jasMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|manager
init|=
name|jas
operator|.
name|getManager
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|jasMap
operator|.
name|put
argument_list|(
literal|"required"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jas
operator|.
name|isRequired
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jasMap
operator|.
name|put
argument_list|(
literal|"disabled"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jas
operator|.
name|isDisabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jasMap
operator|.
name|put
argument_list|(
literal|"manager"
argument_list|,
name|manager
argument_list|)
expr_stmt|;
if|if
condition|(
name|jas
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
name|jasMap
operator|.
name|put
argument_list|(
literal|"stream"
argument_list|,
literal|"Failed"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|openForWrite
condition|)
block|{
name|EditLogOutputStream
name|elos
init|=
name|jas
operator|.
name|getCurrentStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|elos
operator|!=
literal|null
condition|)
block|{
name|jasMap
operator|.
name|put
argument_list|(
literal|"stream"
argument_list|,
name|elos
operator|.
name|generateReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jasMap
operator|.
name|put
argument_list|(
literal|"stream"
argument_list|,
literal|"not currently writing"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|jasMap
operator|.
name|put
argument_list|(
literal|"stream"
argument_list|,
literal|"open for read"
argument_list|)
expr_stmt|;
block|}
name|jasList
operator|.
name|add
argument_list|(
name|jasMap
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|jasList
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMxBean
DECL|method|getJournalTransactionInfo ()
specifier|public
name|String
name|getJournalTransactionInfo
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|txnIdMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|txnIdMap
operator|.
name|put
argument_list|(
literal|"LastAppliedOrWrittenTxId"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|this
operator|.
name|getFSImage
argument_list|()
operator|.
name|getLastAppliedOrWrittenTxId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|txnIdMap
operator|.
name|put
argument_list|(
literal|"MostRecentCheckpointTxId"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|this
operator|.
name|getFSImage
argument_list|()
operator|.
name|getMostRecentCheckpointTxId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|txnIdMap
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getNNStartedTimeInMillis ()
specifier|public
name|long
name|getNNStartedTimeInMillis
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getCompileInfo ()
specifier|public
name|String
name|getCompileInfo
parameter_list|()
block|{
return|return
name|VersionInfo
operator|.
name|getDate
argument_list|()
operator|+
literal|" by "
operator|+
name|VersionInfo
operator|.
name|getUser
argument_list|()
operator|+
literal|" from "
operator|+
name|VersionInfo
operator|.
name|getBranch
argument_list|()
return|;
block|}
comment|/** @return the block manager. */
DECL|method|getBlockManager ()
specifier|public
name|BlockManager
name|getBlockManager
parameter_list|()
block|{
return|return
name|blockManager
return|;
block|}
comment|/** @return the FSDirectory. */
annotation|@
name|Override
DECL|method|getFSDirectory ()
specifier|public
name|FSDirectory
name|getFSDirectory
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
comment|/** Set the FSDirectory. */
annotation|@
name|VisibleForTesting
DECL|method|setFSDirectory (FSDirectory dir)
specifier|public
name|void
name|setFSDirectory
parameter_list|(
name|FSDirectory
name|dir
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
block|}
comment|/** @return the cache manager. */
annotation|@
name|Override
DECL|method|getCacheManager ()
specifier|public
name|CacheManager
name|getCacheManager
parameter_list|()
block|{
return|return
name|cacheManager
return|;
block|}
comment|/** @return the ErasureCodingPolicyManager. */
DECL|method|getErasureCodingPolicyManager ()
specifier|public
name|ErasureCodingPolicyManager
name|getErasureCodingPolicyManager
parameter_list|()
block|{
return|return
name|ErasureCodingPolicyManager
operator|.
name|getInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHAContext ()
specifier|public
name|HAContext
name|getHAContext
parameter_list|()
block|{
return|return
name|haContext
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getCorruptFiles ()
specifier|public
name|String
name|getCorruptFiles
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
argument_list|>
name|corruptFileBlocks
decl_stmt|;
try|try
block|{
name|corruptFileBlocks
operator|=
name|listCorruptFileBlocks
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|corruptFileCount
init|=
name|corruptFileBlocks
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|corruptFileCount
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|FSNamesystem
operator|.
name|CorruptFileBlockInfo
name|c
range|:
name|corruptFileBlocks
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|StandbyException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get corrupt file blocks returned error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Get corrupt file blocks returned error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|list
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getNumberOfSnapshottableDirs ()
specifier|public
name|long
name|getNumberOfSnapshottableDirs
parameter_list|()
block|{
return|return
name|snapshotManager
operator|.
name|getNumSnapshottableDirs
argument_list|()
return|;
block|}
comment|/**    * Get the list of corrupt blocks and corresponding full file path    * including snapshots in given snapshottable directories.    * @param path Restrict corrupt files to this portion of namespace.    * @param snapshottableDirs Snapshottable directories. Passing in null    *                          will only return corrupt blocks in non-snapshots.    * @param cookieTab Support for continuation; cookieTab tells where    *                  to start from.    * @return a list in which each entry describes a corrupt file/block    * @throws IOException    */
DECL|method|listCorruptFileBlocksWithSnapshot (String path, List<String> snapshottableDirs, String[] cookieTab)
name|List
argument_list|<
name|String
argument_list|>
name|listCorruptFileBlocksWithSnapshot
parameter_list|(
name|String
name|path
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|snapshottableDirs
parameter_list|,
name|String
index|[]
name|cookieTab
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Collection
argument_list|<
name|CorruptFileBlockInfo
argument_list|>
name|corruptFileBlocks
init|=
name|listCorruptFileBlocks
argument_list|(
name|path
argument_list|,
name|cookieTab
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Precalculate snapshottableFeature list
name|List
argument_list|<
name|DirectorySnapshottableFeature
argument_list|>
name|lsf
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshottableDirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|snap
range|:
name|snapshottableDirs
control|)
block|{
specifier|final
name|INode
name|isnap
init|=
name|getFSDirectory
argument_list|()
operator|.
name|getINode
argument_list|(
name|snap
argument_list|,
name|DirOp
operator|.
name|READ_LINK
argument_list|)
decl_stmt|;
specifier|final
name|DirectorySnapshottableFeature
name|sf
init|=
name|isnap
operator|.
name|asDirectory
argument_list|()
operator|.
name|getDirectorySnapshottableFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
literal|"Directory is not a snapshottable directory: "
operator|+
name|snap
argument_list|)
throw|;
block|}
name|lsf
operator|.
name|add
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CorruptFileBlockInfo
name|c
range|:
name|corruptFileBlocks
control|)
block|{
if|if
condition|(
name|getFileInfo
argument_list|(
name|c
operator|.
name|path
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|c
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|snaps
init|=
name|FSDirSnapshotOp
operator|.
name|getSnapshotFiles
argument_list|(
name|getFSDirectory
argument_list|()
argument_list|,
name|lsf
argument_list|,
name|c
operator|.
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|snaps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|snap
range|:
name|snaps
control|)
block|{
comment|// follow the syntax of CorruptFileBlockInfo#toString()
name|list
operator|.
name|add
argument_list|(
name|c
operator|.
name|block
operator|.
name|getBlockName
argument_list|()
operator|+
literal|"\t"
operator|+
name|snap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
comment|//NameNodeMXBean
DECL|method|getDistinctVersionCount ()
specifier|public
name|int
name|getDistinctVersionCount
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodesSoftwareVersions
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|//NameNodeMXBean
DECL|method|getDistinctVersions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getDistinctVersions
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodesSoftwareVersions
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|//NameNodeMXBean
DECL|method|getSoftwareVersion ()
specifier|public
name|String
name|getSoftwareVersion
parameter_list|()
block|{
return|return
name|VersionInfo
operator|.
name|getVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// NameNodeStatusMXBean
DECL|method|getNameDirSize ()
specifier|public
name|String
name|getNameDirSize
parameter_list|()
block|{
return|return
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|getNNDirectorySize
argument_list|()
return|;
block|}
comment|/**    * Verifies that the given identifier and password are valid and match.    * @param identifier Token identifier.    * @param password Password in the token.    */
DECL|method|verifyToken (DelegationTokenIdentifier identifier, byte[] password)
specifier|public
specifier|synchronized
name|void
name|verifyToken
parameter_list|(
name|DelegationTokenIdentifier
name|identifier
parameter_list|,
name|byte
index|[]
name|password
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|RetriableException
block|{
try|try
block|{
name|getDelegationTokenSecretManager
argument_list|()
operator|.
name|verifyToken
argument_list|(
name|identifier
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|it
parameter_list|)
block|{
if|if
condition|(
name|inTransitionToActive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RetriableException
argument_list|(
name|it
argument_list|)
throw|;
block|}
throw|throw
name|it
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getEditLogTailer ()
specifier|public
name|EditLogTailer
name|getEditLogTailer
parameter_list|()
block|{
return|return
name|editLogTailer
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setEditLogTailerForTests (EditLogTailer tailer)
specifier|public
name|void
name|setEditLogTailerForTests
parameter_list|(
name|EditLogTailer
name|tailer
parameter_list|)
block|{
name|this
operator|.
name|editLogTailer
operator|=
name|tailer
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setFsLockForTests (ReentrantReadWriteLock lock)
name|void
name|setFsLockForTests
parameter_list|(
name|ReentrantReadWriteLock
name|lock
parameter_list|)
block|{
name|this
operator|.
name|fsLock
operator|.
name|coarseLock
operator|=
name|lock
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getFsLockForTests ()
specifier|public
name|ReentrantReadWriteLock
name|getFsLockForTests
parameter_list|()
block|{
return|return
name|fsLock
operator|.
name|coarseLock
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCpLockForTests ()
specifier|public
name|ReentrantLock
name|getCpLockForTests
parameter_list|()
block|{
return|return
name|cpLock
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setNNResourceChecker (NameNodeResourceChecker nnResourceChecker)
specifier|public
name|void
name|setNNResourceChecker
parameter_list|(
name|NameNodeResourceChecker
name|nnResourceChecker
parameter_list|)
block|{
name|this
operator|.
name|nnResourceChecker
operator|=
name|nnResourceChecker
expr_stmt|;
block|}
DECL|method|getSnapshotManager ()
specifier|public
name|SnapshotManager
name|getSnapshotManager
parameter_list|()
block|{
return|return
name|snapshotManager
return|;
block|}
comment|/** Allow snapshot on a directory. */
DECL|method|allowSnapshot (String path)
name|void
name|allowSnapshot
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
literal|"allowSnapshot"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot allow snapshot for "
operator|+
name|path
argument_list|)
expr_stmt|;
name|FSDirSnapshotOp
operator|.
name|allowSnapshot
argument_list|(
name|dir
argument_list|,
name|snapshotManager
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Disallow snapshot on a directory. */
DECL|method|disallowSnapshot (String path)
name|void
name|disallowSnapshot
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
literal|"disallowSnapshot"
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot disallow snapshot for "
operator|+
name|path
argument_list|)
expr_stmt|;
name|FSDirSnapshotOp
operator|.
name|disallowSnapshot
argument_list|(
name|dir
argument_list|,
name|snapshotManager
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a snapshot    * @param snapshotRoot The directory path where the snapshot is taken    * @param snapshotName The name of the snapshot    */
DECL|method|createSnapshot (String snapshotRoot, String snapshotName, boolean logRetryCache)
name|String
name|createSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
literal|"createSnapshot"
decl_stmt|;
name|String
name|snapshotPath
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot create snapshot for "
operator|+
name|snapshotRoot
argument_list|)
expr_stmt|;
name|snapshotPath
operator|=
name|FSDirSnapshotOp
operator|.
name|createSnapshot
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|snapshotManager
argument_list|,
name|snapshotRoot
argument_list|,
name|snapshotName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|snapshotRoot
argument_list|,
name|snapshotPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|snapshotRoot
argument_list|,
name|snapshotPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|snapshotPath
return|;
block|}
comment|/**    * Rename a snapshot    * @param path The directory path where the snapshot was taken    * @param snapshotOldName Old snapshot name    * @param snapshotNewName New snapshot name    * @throws SafeModeException    * @throws IOException     */
DECL|method|renameSnapshot ( String path, String snapshotOldName, String snapshotNewName, boolean logRetryCache)
name|void
name|renameSnapshot
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|snapshotOldName
parameter_list|,
name|String
name|snapshotNewName
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|String
name|operationName
init|=
literal|"renameSnapshot"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|oldSnapshotRoot
init|=
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|path
argument_list|,
name|snapshotOldName
argument_list|)
decl_stmt|;
name|String
name|newSnapshotRoot
init|=
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|path
argument_list|,
name|snapshotNewName
argument_list|)
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot rename snapshot for "
operator|+
name|path
argument_list|)
expr_stmt|;
name|FSDirSnapshotOp
operator|.
name|renameSnapshot
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|snapshotManager
argument_list|,
name|path
argument_list|,
name|snapshotOldName
argument_list|,
name|snapshotNewName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|oldSnapshotRoot
argument_list|,
name|newSnapshotRoot
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|oldSnapshotRoot
argument_list|,
name|newSnapshotRoot
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the list of snapshottable directories that are owned     * by the current user. Return all the snapshottable directories if the     * current user is a super user.    * @return The list of all the current snapshottable directories    * @throws IOException    */
DECL|method|getSnapshottableDirListing ()
specifier|public
name|SnapshottableDirectoryStatus
index|[]
name|getSnapshottableDirListing
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"listSnapshottableDirectory"
decl_stmt|;
name|SnapshottableDirectoryStatus
index|[]
name|status
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|status
operator|=
name|FSDirSnapshotOp
operator|.
name|getSnapshottableDirListing
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|snapshotManager
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
comment|/**    * Get the difference between two snapshots (or between a snapshot and the    * current status) of a snapshottable directory.    *    * @param path The full path of the snapshottable directory.    * @param fromSnapshot Name of the snapshot to calculate the diff from. Null    *          or empty string indicates the current tree.    * @param toSnapshot Name of the snapshot to calculated the diff to. Null or    *          empty string indicates the current tree.    * @return A report about the difference between {@code fromSnapshot} and    *         {@code toSnapshot}. Modified/deleted/created/renamed files and    *         directories belonging to the snapshottable directories are listed    *         and labeled as M/-/+/R respectively.    * @throws IOException    */
DECL|method|getSnapshotDiffReport (String path, String fromSnapshot, String toSnapshot)
name|SnapshotDiffReport
name|getSnapshotDiffReport
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|fromSnapshot
parameter_list|,
name|String
name|toSnapshot
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"computeSnapshotDiff"
decl_stmt|;
name|SnapshotDiffReport
name|diffs
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|fromSnapshotRoot
init|=
operator|(
name|fromSnapshot
operator|==
literal|null
operator|||
name|fromSnapshot
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|path
else|:
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|path
argument_list|,
name|fromSnapshot
argument_list|)
decl_stmt|;
name|String
name|toSnapshotRoot
init|=
operator|(
name|toSnapshot
operator|==
literal|null
operator|||
name|toSnapshot
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|path
else|:
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|path
argument_list|,
name|toSnapshot
argument_list|)
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|diffs
operator|=
name|FSDirSnapshotOp
operator|.
name|getSnapshotDiffReport
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|snapshotManager
argument_list|,
name|path
argument_list|,
name|fromSnapshot
argument_list|,
name|toSnapshot
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|fromSnapshotRoot
argument_list|,
name|toSnapshotRoot
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|fromSnapshotRoot
argument_list|,
name|toSnapshotRoot
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|diffs
return|;
block|}
comment|/**    * Get the difference between two snapshots (or between a snapshot and the    * current status) of a snapshottable directory.    *    * @param path The full path of the snapshottable directory.    * @param fromSnapshot Name of the snapshot to calculate the diff from. Null    *          or empty string indicates the current tree.    * @param toSnapshot Name of the snapshot to calculated the diff to. Null or    *          empty string indicates the current tree.    * @param startPath    *          path relative to the snapshottable root directory from where the    *          snapshotdiff computation needs to start across multiple rpc calls    * @param index    *           index in the created or deleted list of the directory at which    *           the snapshotdiff computation stopped during the last rpc call    *           as the no of entries exceeded the snapshotdiffentry limit. -1    *           indicates, the snapshotdiff compuatation needs to start right    *           from the startPath provided.    * @return A partial report about the difference between {@code fromSnapshot}    *         and {@code toSnapshot}. Modified/deleted/created/renamed files and    *         directories belonging to the snapshottable directories are listed    *         and labeled as M/-/+/R respectively.    * @throws IOException    */
DECL|method|getSnapshotDiffReportListing (String path, String fromSnapshot, String toSnapshot, byte[] startPath, int index)
name|SnapshotDiffReportListing
name|getSnapshotDiffReportListing
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|fromSnapshot
parameter_list|,
name|String
name|toSnapshot
parameter_list|,
name|byte
index|[]
name|startPath
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"computeSnapshotDiff"
decl_stmt|;
name|SnapshotDiffReportListing
name|diffs
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|fromSnapshotRoot
init|=
operator|(
name|fromSnapshot
operator|==
literal|null
operator|||
name|fromSnapshot
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|path
else|:
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|path
argument_list|,
name|fromSnapshot
argument_list|)
decl_stmt|;
name|String
name|toSnapshotRoot
init|=
operator|(
name|toSnapshot
operator|==
literal|null
operator|||
name|toSnapshot
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|path
else|:
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|path
argument_list|,
name|toSnapshot
argument_list|)
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|diffs
operator|=
name|FSDirSnapshotOp
operator|.
name|getSnapshotDiffReportListing
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|snapshotManager
argument_list|,
name|path
argument_list|,
name|fromSnapshot
argument_list|,
name|toSnapshot
argument_list|,
name|startPath
argument_list|,
name|index
argument_list|,
name|snapshotDiffReportLimit
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|fromSnapshotRoot
argument_list|,
name|toSnapshotRoot
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|fromSnapshotRoot
argument_list|,
name|toSnapshotRoot
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|diffs
return|;
block|}
comment|/**    * Delete a snapshot of a snapshottable directory    * @param snapshotRoot The snapshottable directory    * @param snapshotName The name of the to-be-deleted snapshot    * @throws SafeModeException    * @throws IOException    */
DECL|method|deleteSnapshot (String snapshotRoot, String snapshotName, boolean logRetryCache)
name|void
name|deleteSnapshot
parameter_list|(
name|String
name|snapshotRoot
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"deleteSnapshot"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|rootPath
init|=
literal|null
decl_stmt|;
name|BlocksMapUpdateInfo
name|blocksToBeDeleted
init|=
literal|null
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot delete snapshot for "
operator|+
name|snapshotRoot
argument_list|)
expr_stmt|;
name|rootPath
operator|=
name|Snapshot
operator|.
name|getSnapshotPath
argument_list|(
name|snapshotRoot
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
name|blocksToBeDeleted
operator|=
name|FSDirSnapshotOp
operator|.
name|deleteSnapshot
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|snapshotManager
argument_list|,
name|snapshotRoot
argument_list|,
name|snapshotName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|rootPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
comment|// Breaking the pattern as removing blocks have to happen outside of the
comment|// global lock
if|if
condition|(
name|blocksToBeDeleted
operator|!=
literal|null
condition|)
block|{
name|removeBlocks
argument_list|(
name|blocksToBeDeleted
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|rootPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a list of INodeDirectorySnapshottable from the SnapshotManager    * @param toRemove the list of INodeDirectorySnapshottable to be removed    */
DECL|method|removeSnapshottableDirs (List<INodeDirectory> toRemove)
name|void
name|removeSnapshottableDirs
parameter_list|(
name|List
argument_list|<
name|INodeDirectory
argument_list|>
name|toRemove
parameter_list|)
block|{
if|if
condition|(
name|snapshotManager
operator|!=
literal|null
condition|)
block|{
name|snapshotManager
operator|.
name|removeSnapshottable
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|queryRollingUpgrade ()
name|RollingUpgradeInfo
name|queryRollingUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"queryRollingUpgrade"
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isRollingUpgrade
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|rollingUpgradeInfo
argument_list|)
expr_stmt|;
name|boolean
name|hasRollbackImage
init|=
name|this
operator|.
name|getFSImage
argument_list|()
operator|.
name|hasRollbackFSImage
argument_list|()
decl_stmt|;
name|rollingUpgradeInfo
operator|.
name|setCreatedRollbackImages
argument_list|(
name|hasRollbackImage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|rollingUpgradeInfo
return|;
block|}
DECL|method|startRollingUpgrade ()
name|RollingUpgradeInfo
name|startRollingUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"startRollingUpgrade"
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRollingUpgrade
argument_list|()
condition|)
block|{
return|return
name|rollingUpgradeInfo
return|;
block|}
name|long
name|startTime
init|=
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|haEnabled
condition|)
block|{
comment|// for non-HA, we require NN to be in safemode
name|startRollingUpgradeInternalForNonHA
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for HA, NN cannot be in safemode
name|checkNameNodeSafeMode
argument_list|(
literal|"Failed to start rolling upgrade"
argument_list|)
expr_stmt|;
name|startRollingUpgradeInternal
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logStartRollingUpgrade
argument_list|(
name|rollingUpgradeInfo
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|haEnabled
condition|)
block|{
comment|// roll the edit log to make sure the standby NameNode can tail
name|getFSImage
argument_list|()
operator|.
name|rollEditLog
argument_list|(
name|getEffectiveLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|rollingUpgradeInfo
return|;
block|}
comment|/**    * Update internal state to indicate that a rolling upgrade is in progress.    * @param startTime rolling upgrade start time    */
DECL|method|startRollingUpgradeInternal (long startTime)
name|void
name|startRollingUpgradeInternal
parameter_list|(
name|long
name|startTime
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRollingUpgrade
argument_list|(
literal|"start rolling upgrade"
argument_list|)
expr_stmt|;
name|getFSImage
argument_list|()
operator|.
name|checkUpgrade
argument_list|()
expr_stmt|;
name|setRollingUpgradeInfo
argument_list|(
literal|false
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update internal state to indicate that a rolling upgrade is in progress for    * non-HA setup. This requires the namesystem is in SafeMode and after doing a    * checkpoint for rollback the namesystem will quit the safemode automatically     */
DECL|method|startRollingUpgradeInternalForNonHA (long startTime)
specifier|private
name|void
name|startRollingUpgradeInternalForNonHA
parameter_list|(
name|long
name|startTime
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|haEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isInSafeMode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Safe mode should be turned ON "
operator|+
literal|"in order to create namespace image."
argument_list|)
throw|;
block|}
name|checkRollingUpgrade
argument_list|(
literal|"start rolling upgrade"
argument_list|)
expr_stmt|;
name|getFSImage
argument_list|()
operator|.
name|checkUpgrade
argument_list|()
expr_stmt|;
comment|// in non-HA setup, we do an extra checkpoint to generate a rollback image
name|getFSImage
argument_list|()
operator|.
name|saveNamespace
argument_list|(
name|this
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE_ROLLBACK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully saved namespace for preparing rolling upgrade."
argument_list|)
expr_stmt|;
comment|// leave SafeMode automatically
name|setSafeMode
argument_list|(
name|SafeModeAction
operator|.
name|SAFEMODE_LEAVE
argument_list|)
expr_stmt|;
name|setRollingUpgradeInfo
argument_list|(
literal|true
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
DECL|method|setRollingUpgradeInfo (boolean createdRollbackImages, long startTime)
name|void
name|setRollingUpgradeInfo
parameter_list|(
name|boolean
name|createdRollbackImages
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|rollingUpgradeInfo
operator|=
operator|new
name|RollingUpgradeInfo
argument_list|(
name|getBlockPoolId
argument_list|()
argument_list|,
name|createdRollbackImages
argument_list|,
name|startTime
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|setCreatedRollbackImages (boolean created)
specifier|public
name|void
name|setCreatedRollbackImages
parameter_list|(
name|boolean
name|created
parameter_list|)
block|{
if|if
condition|(
name|rollingUpgradeInfo
operator|!=
literal|null
condition|)
block|{
name|rollingUpgradeInfo
operator|.
name|setCreatedRollbackImages
argument_list|(
name|created
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRollingUpgradeInfo ()
specifier|public
name|RollingUpgradeInfo
name|getRollingUpgradeInfo
parameter_list|()
block|{
return|return
name|rollingUpgradeInfo
return|;
block|}
DECL|method|isNeedRollbackFsImage ()
specifier|public
name|boolean
name|isNeedRollbackFsImage
parameter_list|()
block|{
return|return
name|needRollbackFsImage
return|;
block|}
DECL|method|setNeedRollbackFsImage (boolean needRollbackFsImage)
specifier|public
name|void
name|setNeedRollbackFsImage
parameter_list|(
name|boolean
name|needRollbackFsImage
parameter_list|)
block|{
name|this
operator|.
name|needRollbackFsImage
operator|=
name|needRollbackFsImage
expr_stmt|;
block|}
annotation|@
name|Override
comment|// NameNodeMXBean
DECL|method|getRollingUpgradeStatus ()
specifier|public
name|RollingUpgradeInfo
operator|.
name|Bean
name|getRollingUpgradeStatus
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isRollingUpgrade
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|RollingUpgradeInfo
name|upgradeInfo
init|=
name|getRollingUpgradeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|upgradeInfo
operator|.
name|createdRollbackImages
argument_list|()
condition|)
block|{
return|return
operator|new
name|RollingUpgradeInfo
operator|.
name|Bean
argument_list|(
name|upgradeInfo
argument_list|)
return|;
block|}
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// check again after acquiring the read lock.
name|upgradeInfo
operator|=
name|getRollingUpgradeInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|upgradeInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|upgradeInfo
operator|.
name|createdRollbackImages
argument_list|()
condition|)
block|{
name|boolean
name|hasRollbackImage
init|=
name|this
operator|.
name|getFSImage
argument_list|()
operator|.
name|hasRollbackFSImage
argument_list|()
decl_stmt|;
name|upgradeInfo
operator|.
name|setCreatedRollbackImages
argument_list|(
name|hasRollbackImage
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Encountered exception setting Rollback Image"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
literal|"getRollingUpgradeStatus"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RollingUpgradeInfo
operator|.
name|Bean
argument_list|(
name|upgradeInfo
argument_list|)
return|;
block|}
comment|/** Is rolling upgrade in progress? */
DECL|method|isRollingUpgrade ()
specifier|public
name|boolean
name|isRollingUpgrade
parameter_list|()
block|{
return|return
name|rollingUpgradeInfo
operator|!=
literal|null
operator|&&
operator|!
name|rollingUpgradeInfo
operator|.
name|isFinalized
argument_list|()
return|;
block|}
comment|/**    * Returns the layout version in effect.  Under normal operation, this is the    * same as the software's current layout version, defined in    * {@link NameNodeLayoutVersion#CURRENT_LAYOUT_VERSION}.  During a rolling    * upgrade, this can retain the layout version that was persisted to metadata    * prior to starting the rolling upgrade, back to a lower bound defined in    * {@link NameNodeLayoutVersion#MINIMUM_COMPATIBLE_LAYOUT_VERSION}.  New    * fsimage files and edit log segments will continue to be written with this    * older layout version, so that the files are still readable by the old    * software version if the admin chooses to downgrade.    *    * @return layout version in effect    */
DECL|method|getEffectiveLayoutVersion ()
specifier|public
name|int
name|getEffectiveLayoutVersion
parameter_list|()
block|{
return|return
name|getEffectiveLayoutVersion
argument_list|(
name|isRollingUpgrade
argument_list|()
argument_list|,
name|fsImage
operator|.
name|getStorage
argument_list|()
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
name|NameNodeLayoutVersion
operator|.
name|MINIMUM_COMPATIBLE_LAYOUT_VERSION
argument_list|,
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getEffectiveLayoutVersion (boolean isRollingUpgrade, int storageLV, int minCompatLV, int currentLV)
specifier|static
name|int
name|getEffectiveLayoutVersion
parameter_list|(
name|boolean
name|isRollingUpgrade
parameter_list|,
name|int
name|storageLV
parameter_list|,
name|int
name|minCompatLV
parameter_list|,
name|int
name|currentLV
parameter_list|)
block|{
if|if
condition|(
name|isRollingUpgrade
condition|)
block|{
if|if
condition|(
name|storageLV
operator|<=
name|minCompatLV
condition|)
block|{
comment|// The prior layout version satisfies the minimum compatible layout
comment|// version of the current software.  Keep reporting the prior layout
comment|// as the effective one.  Downgrade is possible.
return|return
name|storageLV
return|;
block|}
block|}
comment|// The current software cannot satisfy the layout version of the prior
comment|// software.  Proceed with using the current layout version.
return|return
name|currentLV
return|;
block|}
comment|/**    * Performs a pre-condition check that the layout version in effect is    * sufficient to support the requested {@link Feature}.  If not, then the    * method throws {@link HadoopIllegalArgumentException} to deny the operation.    * This exception class is registered as a terse exception, so it prevents    * verbose stack traces in the NameNode log.  During a rolling upgrade, this    * method is used to restrict usage of new features.  This prevents writing    * new edit log operations that would be unreadable by the old software    * version if the admin chooses to downgrade.    *    * @param f feature to check    * @throws HadoopIllegalArgumentException if the current layout version in    *     effect is insufficient to support the feature    */
DECL|method|requireEffectiveLayoutVersionForFeature (Feature f)
specifier|private
name|void
name|requireEffectiveLayoutVersionForFeature
parameter_list|(
name|Feature
name|f
parameter_list|)
throws|throws
name|HadoopIllegalArgumentException
block|{
name|int
name|lv
init|=
name|getEffectiveLayoutVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|NameNodeLayoutVersion
operator|.
name|supports
argument_list|(
name|f
argument_list|,
name|lv
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Feature %s unsupported at NameNode layout version %d.  If a "
operator|+
literal|"rolling upgrade is in progress, then it must be finalized before "
operator|+
literal|"using this feature."
argument_list|,
name|f
argument_list|,
name|lv
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|checkRollingUpgrade (String action)
name|void
name|checkRollingUpgrade
parameter_list|(
name|String
name|action
parameter_list|)
throws|throws
name|RollingUpgradeException
block|{
if|if
condition|(
name|isRollingUpgrade
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RollingUpgradeException
argument_list|(
literal|"Failed to "
operator|+
name|action
operator|+
literal|" since a rolling upgrade is already in progress."
operator|+
literal|" Existing rolling upgrade info:\n"
operator|+
name|rollingUpgradeInfo
argument_list|)
throw|;
block|}
block|}
DECL|method|finalizeRollingUpgrade ()
name|RollingUpgradeInfo
name|finalizeRollingUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"finalizeRollingUpgrade"
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isRollingUpgrade
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|checkNameNodeSafeMode
argument_list|(
literal|"Failed to finalize rolling upgrade"
argument_list|)
expr_stmt|;
name|finalizeRollingUpgradeInternal
argument_list|(
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logFinalizeRollingUpgrade
argument_list|(
name|rollingUpgradeInfo
operator|.
name|getFinalizeTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|haEnabled
condition|)
block|{
comment|// roll the edit log to make sure the standby NameNode can tail
name|getFSImage
argument_list|()
operator|.
name|rollEditLog
argument_list|(
name|getEffectiveLayoutVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getFSImage
argument_list|()
operator|.
name|updateStorageVersion
argument_list|()
expr_stmt|;
name|getFSImage
argument_list|()
operator|.
name|renameCheckpoint
argument_list|(
name|NameNodeFile
operator|.
name|IMAGE_ROLLBACK
argument_list|,
name|NameNodeFile
operator|.
name|IMAGE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|haEnabled
condition|)
block|{
comment|// Sync not needed for ha since the edit was rolled after logging.
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|rollingUpgradeInfo
return|;
block|}
DECL|method|finalizeRollingUpgradeInternal (long finalizeTime)
name|void
name|finalizeRollingUpgradeInternal
parameter_list|(
name|long
name|finalizeTime
parameter_list|)
block|{
comment|// Set the finalize time
name|rollingUpgradeInfo
operator|.
name|finalize
argument_list|(
name|finalizeTime
argument_list|)
expr_stmt|;
block|}
DECL|method|addCacheDirective (CacheDirectiveInfo directive, EnumSet<CacheFlag> flags, boolean logRetryCache)
name|long
name|addCacheDirective
parameter_list|(
name|CacheDirectiveInfo
name|directive
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"addCacheDirective"
decl_stmt|;
name|CacheDirectiveInfo
name|effectiveDirective
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|effectiveDirectiveStr
decl_stmt|;
if|if
condition|(
operator|!
name|flags
operator|.
name|contains
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
condition|)
block|{
name|cacheManager
operator|.
name|waitForRescanIfNeeded
argument_list|()
expr_stmt|;
block|}
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot add cache directive"
argument_list|)
expr_stmt|;
name|effectiveDirective
operator|=
name|FSNDNCacheOp
operator|.
name|addCacheDirective
argument_list|(
name|this
argument_list|,
name|cacheManager
argument_list|,
name|directive
argument_list|,
name|flags
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
block|}
name|effectiveDirectiveStr
operator|=
name|effectiveDirective
operator|.
name|toString
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|effectiveDirectiveStr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|effectiveDirective
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|modifyCacheDirective (CacheDirectiveInfo directive, EnumSet<CacheFlag> flags, boolean logRetryCache)
name|void
name|modifyCacheDirective
parameter_list|(
name|CacheDirectiveInfo
name|directive
parameter_list|,
name|EnumSet
argument_list|<
name|CacheFlag
argument_list|>
name|flags
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"modifyCacheDirective"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|final
name|String
name|idStr
init|=
literal|"{id: "
operator|+
name|directive
operator|.
name|getId
argument_list|()
operator|+
literal|"}"
decl_stmt|;
if|if
condition|(
operator|!
name|flags
operator|.
name|contains
argument_list|(
name|CacheFlag
operator|.
name|FORCE
argument_list|)
condition|)
block|{
name|cacheManager
operator|.
name|waitForRescanIfNeeded
argument_list|()
expr_stmt|;
block|}
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot add cache directive"
argument_list|)
expr_stmt|;
name|FSNDNCacheOp
operator|.
name|modifyCacheDirective
argument_list|(
name|this
argument_list|,
name|cacheManager
argument_list|,
name|directive
argument_list|,
name|flags
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|idStr
argument_list|,
name|directive
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|idStr
argument_list|,
name|directive
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|removeCacheDirective (long id, boolean logRetryCache)
name|void
name|removeCacheDirective
parameter_list|(
name|long
name|id
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"removeCacheDirective"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|idStr
init|=
literal|"{id: "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
operator|+
literal|"}"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot remove cache directives"
argument_list|)
expr_stmt|;
name|FSNDNCacheOp
operator|.
name|removeCacheDirective
argument_list|(
name|this
argument_list|,
name|cacheManager
argument_list|,
name|id
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|idStr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|idStr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
DECL|method|listCacheDirectives ( long startId, CacheDirectiveInfo filter)
name|BatchedListEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|listCacheDirectives
parameter_list|(
name|long
name|startId
parameter_list|,
name|CacheDirectiveInfo
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"listCacheDirectives"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|BatchedListEntries
argument_list|<
name|CacheDirectiveEntry
argument_list|>
name|results
decl_stmt|;
name|cacheManager
operator|.
name|waitForRescanIfNeeded
argument_list|()
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|results
operator|=
name|FSNDNCacheOp
operator|.
name|listCacheDirectives
argument_list|(
name|this
argument_list|,
name|cacheManager
argument_list|,
name|startId
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|filter
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
DECL|method|addCachePool (CachePoolInfo req, boolean logRetryCache)
name|void
name|addCachePool
parameter_list|(
name|CachePoolInfo
name|req
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"addCachePool"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|poolInfoStr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot add cache pool"
operator|+
operator|(
name|req
operator|==
literal|null
condition|?
literal|null
else|:
name|req
operator|.
name|getPoolName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|CachePoolInfo
name|info
init|=
name|FSNDNCacheOp
operator|.
name|addCachePool
argument_list|(
name|this
argument_list|,
name|cacheManager
argument_list|,
name|req
argument_list|,
name|logRetryCache
argument_list|)
decl_stmt|;
name|poolInfoStr
operator|=
name|info
operator|.
name|toString
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|poolInfoStr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|poolInfoStr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
DECL|method|modifyCachePool (CachePoolInfo req, boolean logRetryCache)
name|void
name|modifyCachePool
parameter_list|(
name|CachePoolInfo
name|req
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"modifyCachePool"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|poolNameStr
init|=
literal|"{poolName: "
operator|+
operator|(
name|req
operator|==
literal|null
condition|?
literal|null
else|:
name|req
operator|.
name|getPoolName
argument_list|()
operator|)
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot modify cache pool"
operator|+
operator|(
name|req
operator|==
literal|null
condition|?
literal|null
else|:
name|req
operator|.
name|getPoolName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|FSNDNCacheOp
operator|.
name|modifyCachePool
argument_list|(
name|this
argument_list|,
name|cacheManager
argument_list|,
name|req
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|poolNameStr
argument_list|,
name|req
operator|==
literal|null
condition|?
literal|null
else|:
name|req
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|poolNameStr
argument_list|,
name|req
operator|==
literal|null
condition|?
literal|null
else|:
name|req
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
DECL|method|removeCachePool (String cachePoolName, boolean logRetryCache)
name|void
name|removeCachePool
parameter_list|(
name|String
name|cachePoolName
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"removeCachePool"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|poolNameStr
init|=
literal|"{poolName: "
operator|+
name|cachePoolName
operator|+
literal|"}"
decl_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot modify cache pool"
operator|+
name|cachePoolName
argument_list|)
expr_stmt|;
name|FSNDNCacheOp
operator|.
name|removeCachePool
argument_list|(
name|this
argument_list|,
name|cacheManager
argument_list|,
name|cachePoolName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|poolNameStr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|poolNameStr
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
DECL|method|listCachePools (String prevKey)
name|BatchedListEntries
argument_list|<
name|CachePoolEntry
argument_list|>
name|listCachePools
parameter_list|(
name|String
name|prevKey
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"listCachePools"
decl_stmt|;
name|BatchedListEntries
argument_list|<
name|CachePoolEntry
argument_list|>
name|results
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|cacheManager
operator|.
name|waitForRescanIfNeeded
argument_list|()
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|results
operator|=
name|FSNDNCacheOp
operator|.
name|listCachePools
argument_list|(
name|this
argument_list|,
name|cacheManager
argument_list|,
name|prevKey
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
DECL|method|modifyAclEntries (final String src, List<AclEntry> aclSpec)
name|void
name|modifyAclEntries
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"modifyAclEntries"
decl_stmt|;
name|FileStatus
name|auditStat
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot modify ACL entries on "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirAclOp
operator|.
name|modifyAclEntries
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
DECL|method|removeAclEntries (final String src, List<AclEntry> aclSpec)
name|void
name|removeAclEntries
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"removeAclEntries"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|FileStatus
name|auditStat
init|=
literal|null
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot remove ACL entries on "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirAclOp
operator|.
name|removeAclEntries
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
DECL|method|removeDefaultAcl (final String src)
name|void
name|removeDefaultAcl
parameter_list|(
specifier|final
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"removeDefaultAcl"
decl_stmt|;
name|FileStatus
name|auditStat
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot remove default ACL entries on "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirAclOp
operator|.
name|removeDefaultAcl
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
DECL|method|removeAcl (final String src)
name|void
name|removeAcl
parameter_list|(
specifier|final
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"removeAcl"
decl_stmt|;
name|FileStatus
name|auditStat
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot remove ACL on "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirAclOp
operator|.
name|removeAcl
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
DECL|method|setAcl (final String src, List<AclEntry> aclSpec)
name|void
name|setAcl
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|AclEntry
argument_list|>
name|aclSpec
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"setAcl"
decl_stmt|;
name|FileStatus
name|auditStat
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot set ACL on "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirAclOp
operator|.
name|setAcl
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|aclSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
DECL|method|getAclStatus (String src)
name|AclStatus
name|getAclStatus
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"getAclStatus"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|AclStatus
name|ret
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|ret
operator|=
name|FSDirAclOp
operator|.
name|getAclStatus
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Create an encryption zone on directory src using the specified key.    *    * @param src     the path of a directory which will be the root of the    *                encryption zone. The directory must be empty.    * @param keyName name of a key which must be present in the configured    *                KeyProvider.    * @throws AccessControlException  if the caller is not the superuser.    * @throws UnresolvedLinkException if the path can't be resolved.    * @throws SafeModeException       if the Namenode is in safe mode.    */
DECL|method|createEncryptionZone (final String src, final String keyName, boolean logRetryCache)
name|void
name|createEncryptionZone
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|String
name|keyName
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
throws|,
name|SafeModeException
throws|,
name|AccessControlException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"createEncryptionZone"
decl_stmt|;
try|try
block|{
name|Metadata
name|metadata
init|=
name|FSDirEncryptionZoneOp
operator|.
name|ensureKeyIsInitialized
argument_list|(
name|dir
argument_list|,
name|keyName
argument_list|,
name|src
argument_list|)
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|resultingStat
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkSuperuserPrivilege
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot create encryption zone on "
operator|+
name|src
argument_list|)
expr_stmt|;
name|resultingStat
operator|=
name|FSDirEncryptionZoneOp
operator|.
name|createEncryptionZone
argument_list|(
name|dir
argument_list|,
name|src
argument_list|,
name|pc
argument_list|,
name|metadata
operator|.
name|getCipher
argument_list|()
argument_list|,
name|keyName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|resultingStat
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Get the encryption zone for the specified path.    *    * @param srcArg the path of a file or directory to get the EZ for.    * @return the EZ of the of the path or null if none.    * @throws AccessControlException  if the caller is not the superuser.    * @throws UnresolvedLinkException if the path can't be resolved.    */
DECL|method|getEZForPath (final String srcArg)
name|EncryptionZone
name|getEZForPath
parameter_list|(
specifier|final
name|String
name|srcArg
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"getEZForPath"
decl_stmt|;
name|FileStatus
name|resultingStat
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|EncryptionZone
name|encryptionZone
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|EncryptionZone
argument_list|,
name|FileStatus
argument_list|>
name|ezForPath
init|=
name|FSDirEncryptionZoneOp
operator|.
name|getEZForPath
argument_list|(
name|dir
argument_list|,
name|srcArg
argument_list|,
name|pc
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
name|resultingStat
operator|=
name|ezForPath
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|encryptionZone
operator|=
name|ezForPath
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|srcArg
argument_list|,
literal|null
argument_list|,
name|resultingStat
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|srcArg
argument_list|,
literal|null
argument_list|,
name|resultingStat
argument_list|)
expr_stmt|;
return|return
name|encryptionZone
return|;
block|}
DECL|method|listEncryptionZones (long prevId)
name|BatchedListEntries
argument_list|<
name|EncryptionZone
argument_list|>
name|listEncryptionZones
parameter_list|(
name|long
name|prevId
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"listEncryptionZones"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|pc
argument_list|)
expr_stmt|;
specifier|final
name|BatchedListEntries
argument_list|<
name|EncryptionZone
argument_list|>
name|ret
init|=
name|FSDirEncryptionZoneOp
operator|.
name|listEncryptionZones
argument_list|(
name|dir
argument_list|,
name|prevId
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reencryptEncryptionZone (final String zone, final ReencryptAction action, final boolean logRetryCache)
name|void
name|reencryptEncryptionZone
parameter_list|(
specifier|final
name|String
name|zone
parameter_list|,
specifier|final
name|ReencryptAction
name|action
parameter_list|,
specifier|final
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|zone
argument_list|,
literal|"zone is null."
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|dir
operator|.
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"NameNode in safemode, cannot "
operator|+
name|action
operator|+
literal|" re-encryption on zone "
operator|+
name|zone
argument_list|)
expr_stmt|;
name|reencryptEncryptionZoneInt
argument_list|(
name|pc
argument_list|,
name|zone
argument_list|,
name|action
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|action
operator|+
literal|"reencryption"
argument_list|,
name|zone
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|listReencryptionStatus ( final long prevId)
name|BatchedListEntries
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|listReencryptionStatus
parameter_list|(
specifier|final
name|long
name|prevId
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"listReencryptionStatus"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|checkSuperuserPrivilege
argument_list|(
name|pc
argument_list|)
expr_stmt|;
specifier|final
name|BatchedListEntries
argument_list|<
name|ZoneReencryptionStatus
argument_list|>
name|ret
init|=
name|FSDirEncryptionZoneOp
operator|.
name|listReencryptionStatus
argument_list|(
name|dir
argument_list|,
name|prevId
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reencryptEncryptionZoneInt (final FSPermissionChecker pc, final String zone, final ReencryptAction action, final boolean logRetryCache)
specifier|private
name|void
name|reencryptEncryptionZoneInt
parameter_list|(
specifier|final
name|FSPermissionChecker
name|pc
parameter_list|,
specifier|final
name|String
name|zone
parameter_list|,
specifier|final
name|ReencryptAction
name|action
parameter_list|,
specifier|final
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getProvider
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No key provider configured, re-encryption "
operator|+
literal|"operation is rejected"
argument_list|)
throw|;
block|}
name|String
name|keyVersionName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|ReencryptAction
operator|.
name|START
condition|)
block|{
comment|// get zone's latest key version name out of the lock.
name|keyVersionName
operator|=
name|FSDirEncryptionZoneOp
operator|.
name|getCurrentKeyVersion
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|zone
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyVersionName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to get key version name for "
operator|+
name|zone
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-encryption using key version "
operator|+
name|keyVersionName
operator|+
literal|" for zone "
operator|+
name|zone
argument_list|)
expr_stmt|;
block|}
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkSuperuserPrivilege
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"NameNode in safemode, cannot "
operator|+
name|action
operator|+
literal|" re-encryption on zone "
operator|+
name|zone
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|xattrs
decl_stmt|;
name|dir
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|INodesInPath
name|iip
init|=
name|dir
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|zone
argument_list|,
name|DirOp
operator|.
name|WRITE
argument_list|)
decl_stmt|;
if|if
condition|(
name|iip
operator|.
name|getLastINode
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|zone
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|START
case|:
name|xattrs
operator|=
name|FSDirEncryptionZoneOp
operator|.
name|reencryptEncryptionZone
argument_list|(
name|dir
argument_list|,
name|iip
argument_list|,
name|keyVersionName
argument_list|)
expr_stmt|;
break|break;
case|case
name|CANCEL
case|:
name|xattrs
operator|=
name|FSDirEncryptionZoneOp
operator|.
name|cancelReencryptEncryptionZone
argument_list|(
name|dir
argument_list|,
name|iip
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Re-encryption action "
operator|+
name|action
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|dir
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xattrs
operator|!=
literal|null
operator|&&
operator|!
name|xattrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSetXAttrs
argument_list|(
name|zone
argument_list|,
name|xattrs
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set an erasure coding policy on the given path.    * @param srcArg  The path of the target directory.    * @param ecPolicyName The erasure coding policy to set on the target    *                    directory.    * @throws AccessControlException  if the caller is not the superuser.    * @throws UnresolvedLinkException if the path can't be resolved.    * @throws SafeModeException       if the Namenode is in safe mode.    */
DECL|method|setErasureCodingPolicy (final String srcArg, final String ecPolicyName, final boolean logRetryCache)
name|void
name|setErasureCodingPolicy
parameter_list|(
specifier|final
name|String
name|srcArg
parameter_list|,
specifier|final
name|String
name|ecPolicyName
parameter_list|,
specifier|final
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
throws|,
name|SafeModeException
throws|,
name|AccessControlException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"setErasureCodingPolicy"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|FileStatus
name|resultingStat
init|=
literal|null
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot set erasure coding policy on "
operator|+
name|srcArg
argument_list|)
expr_stmt|;
name|resultingStat
operator|=
name|FSDirErasureCodingOp
operator|.
name|setErasureCodingPolicy
argument_list|(
name|this
argument_list|,
name|srcArg
argument_list|,
name|ecPolicyName
argument_list|,
name|pc
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|srcArg
argument_list|,
literal|null
argument_list|,
name|resultingStat
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add multiple erasure coding policies to the ErasureCodingPolicyManager.    * @param policies The policies to add.    * @param logRetryCache whether to record RPC ids in editlog for retry cache    *                      rebuilding    * @return The according result of add operation.    */
DECL|method|addErasureCodingPolicies ( ErasureCodingPolicy[] policies, final boolean logRetryCache)
name|AddErasureCodingPolicyResponse
index|[]
name|addErasureCodingPolicies
parameter_list|(
name|ErasureCodingPolicy
index|[]
name|policies
parameter_list|,
specifier|final
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"addErasureCodingPolicies"
decl_stmt|;
name|String
name|addECPolicyName
init|=
literal|""
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AddErasureCodingPolicyResponse
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot add erasure coding policy"
argument_list|)
expr_stmt|;
for|for
control|(
name|ErasureCodingPolicy
name|policy
range|:
name|policies
control|)
block|{
try|try
block|{
name|ErasureCodingPolicy
name|newPolicy
init|=
name|FSDirErasureCodingOp
operator|.
name|addErasureCodingPolicy
argument_list|(
name|this
argument_list|,
name|policy
argument_list|,
name|logRetryCache
argument_list|)
decl_stmt|;
name|addECPolicyName
operator|=
name|newPolicy
operator|.
name|getName
argument_list|()
expr_stmt|;
name|responses
operator|.
name|add
argument_list|(
operator|new
name|AddErasureCodingPolicyResponse
argument_list|(
name|newPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HadoopIllegalArgumentException
name|e
parameter_list|)
block|{
name|responses
operator|.
name|add
argument_list|(
operator|new
name|AddErasureCodingPolicyResponse
argument_list|(
name|policy
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|responses
operator|.
name|toArray
argument_list|(
operator|new
name|AddErasureCodingPolicyResponse
index|[
literal|0
index|]
argument_list|)
return|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|addECPolicyName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove an erasure coding policy.    * @param ecPolicyName the name of the policy to be removed    * @param logRetryCache whether to record RPC ids in editlog for retry cache    *                      rebuilding    * @throws IOException    */
DECL|method|removeErasureCodingPolicy (String ecPolicyName, final boolean logRetryCache)
name|void
name|removeErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|,
specifier|final
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"removeErasureCodingPolicy"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot remove erasure coding policy "
operator|+
name|ecPolicyName
argument_list|)
expr_stmt|;
name|FSDirErasureCodingOp
operator|.
name|removeErasureCodingPolicy
argument_list|(
name|this
argument_list|,
name|ecPolicyName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|ecPolicyName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Enable an erasure coding policy.    * @param ecPolicyName the name of the policy to be enabled    * @param logRetryCache whether to record RPC ids in editlog for retry cache    *                      rebuilding    * @throws IOException    */
DECL|method|enableErasureCodingPolicy (String ecPolicyName, final boolean logRetryCache)
name|void
name|enableErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|,
specifier|final
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"enableErasureCodingPolicy"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Enable the erasure coding policy "
operator|+
name|ecPolicyName
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot enable erasure coding policy "
operator|+
name|ecPolicyName
argument_list|)
expr_stmt|;
name|FSDirErasureCodingOp
operator|.
name|enableErasureCodingPolicy
argument_list|(
name|this
argument_list|,
name|ecPolicyName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|ecPolicyName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Disable an erasure coding policy.    * @param ecPolicyName the name of the policy to be disabled    * @param logRetryCache whether to record RPC ids in editlog for retry cache    *                      rebuilding    * @throws IOException    */
DECL|method|disableErasureCodingPolicy (String ecPolicyName, final boolean logRetryCache)
name|void
name|disableErasureCodingPolicy
parameter_list|(
name|String
name|ecPolicyName
parameter_list|,
specifier|final
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"disableErasureCodingPolicy"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Disable the erasure coding policy "
operator|+
name|ecPolicyName
argument_list|)
expr_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot disable erasure coding policy "
operator|+
name|ecPolicyName
argument_list|)
expr_stmt|;
name|FSDirErasureCodingOp
operator|.
name|disableErasureCodingPolicy
argument_list|(
name|this
argument_list|,
name|ecPolicyName
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|ecPolicyName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Unset an erasure coding policy from the given path.    * @param srcArg  The path of the target directory.    * @throws AccessControlException  if the caller is not the superuser.    * @throws UnresolvedLinkException if the path can't be resolved.    * @throws SafeModeException       if the Namenode is in safe mode.    */
DECL|method|unsetErasureCodingPolicy (final String srcArg, final boolean logRetryCache)
name|void
name|unsetErasureCodingPolicy
parameter_list|(
specifier|final
name|String
name|srcArg
parameter_list|,
specifier|final
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnresolvedLinkException
throws|,
name|SafeModeException
throws|,
name|AccessControlException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"unsetErasureCodingPolicy"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|FileStatus
name|resultingStat
init|=
literal|null
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot unset erasure coding policy on "
operator|+
name|srcArg
argument_list|)
expr_stmt|;
name|resultingStat
operator|=
name|FSDirErasureCodingOp
operator|.
name|unsetErasureCodingPolicy
argument_list|(
name|this
argument_list|,
name|srcArg
argument_list|,
name|pc
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
name|srcArg
argument_list|,
literal|null
argument_list|,
name|resultingStat
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the erasure coding policy information for specified path    */
DECL|method|getErasureCodingPolicy (String src)
name|ErasureCodingPolicy
name|getErasureCodingPolicy
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|UnresolvedLinkException
throws|,
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"getErasureCodingPolicy"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|ErasureCodingPolicy
name|ret
init|=
name|FSDirErasureCodingOp
operator|.
name|getErasureCodingPolicy
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|pc
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get all erasure coding polices.    */
DECL|method|getErasureCodingPolicies ()
name|ErasureCodingPolicyInfo
index|[]
name|getErasureCodingPolicies
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"getErasureCodingPolicies"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|ErasureCodingPolicyInfo
index|[]
name|ret
init|=
name|FSDirErasureCodingOp
operator|.
name|getErasureCodingPolicies
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get available erasure coding codecs and corresponding coders.    */
DECL|method|getErasureCodingCodecs ()
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getErasureCodingCodecs
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"getErasureCodingCodecs"
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
name|FSDirErasureCodingOp
operator|.
name|getErasureCodingCodecs
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
name|logAuditEvent
argument_list|(
name|success
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setXAttr (String src, XAttr xAttr, EnumSet<XAttrSetFlag> flag, boolean logRetryCache)
name|void
name|setXAttr
parameter_list|(
name|String
name|src
parameter_list|,
name|XAttr
name|xAttr
parameter_list|,
name|EnumSet
argument_list|<
name|XAttrSetFlag
argument_list|>
name|flag
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"setXAttr"
decl_stmt|;
name|FileStatus
name|auditStat
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot set XAttr on "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirXAttrOp
operator|.
name|setXAttr
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|xAttr
argument_list|,
name|flag
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
DECL|method|getXAttrs (final String src, List<XAttr> xAttrs)
name|List
argument_list|<
name|XAttr
argument_list|>
name|getXAttrs
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
name|List
argument_list|<
name|XAttr
argument_list|>
name|xAttrs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"getXAttrs"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|fsXattrs
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|fsXattrs
operator|=
name|FSDirXAttrOp
operator|.
name|getXAttrs
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|xAttrs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
name|fsXattrs
return|;
block|}
DECL|method|listXAttrs (String src)
name|List
argument_list|<
name|XAttr
argument_list|>
name|listXAttrs
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"listXAttrs"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XAttr
argument_list|>
name|fsXattrs
decl_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
name|fsXattrs
operator|=
name|FSDirXAttrOp
operator|.
name|listXAttrs
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
return|return
name|fsXattrs
return|;
block|}
DECL|method|removeXAttr (String src, XAttr xAttr, boolean logRetryCache)
name|void
name|removeXAttr
parameter_list|(
name|String
name|src
parameter_list|,
name|XAttr
name|xAttr
parameter_list|,
name|boolean
name|logRetryCache
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"removeXAttr"
decl_stmt|;
name|FileStatus
name|auditStat
init|=
literal|null
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|checkNameNodeSafeMode
argument_list|(
literal|"Cannot remove XAttr entry on "
operator|+
name|src
argument_list|)
expr_stmt|;
name|auditStat
operator|=
name|FSDirXAttrOp
operator|.
name|removeXAttr
argument_list|(
name|dir
argument_list|,
name|pc
argument_list|,
name|src
argument_list|,
name|xAttr
argument_list|,
name|logRetryCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|writeUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
name|getEditLog
argument_list|()
operator|.
name|logSync
argument_list|()
expr_stmt|;
name|logAuditEvent
argument_list|(
literal|true
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|,
literal|null
argument_list|,
name|auditStat
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAccess (String src, FsAction mode)
name|void
name|checkAccess
parameter_list|(
name|String
name|src
parameter_list|,
name|FsAction
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|operationName
init|=
literal|"checkAccess"
decl_stmt|;
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|FSPermissionChecker
name|pc
init|=
name|getPermissionChecker
argument_list|()
decl_stmt|;
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|checkOperation
argument_list|(
name|OperationCategory
operator|.
name|READ
argument_list|)
expr_stmt|;
specifier|final
name|INodesInPath
name|iip
init|=
name|dir
operator|.
name|resolvePath
argument_list|(
name|pc
argument_list|,
name|src
argument_list|,
name|DirOp
operator|.
name|READ
argument_list|)
decl_stmt|;
name|src
operator|=
name|iip
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|INode
name|inode
init|=
name|iip
operator|.
name|getLastINode
argument_list|()
decl_stmt|;
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Path not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isPermissionEnabled
condition|)
block|{
name|dir
operator|.
name|checkPathAccess
argument_list|(
name|pc
argument_list|,
name|iip
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
name|src
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|readUnlock
argument_list|(
name|operationName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Default AuditLogger implementation; used when no access logger is    * defined in the config file. It can also be explicitly listed in the    * config file.    */
annotation|@
name|VisibleForTesting
DECL|class|DefaultAuditLogger
specifier|static
class|class
name|DefaultAuditLogger
extends|extends
name|HdfsAuditLogger
block|{
DECL|field|STRING_BUILDER
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|StringBuilder
argument_list|>
name|STRING_BUILDER
init|=
operator|new
name|ThreadLocal
argument_list|<
name|StringBuilder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|StringBuilder
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|isCallerContextEnabled
specifier|private
specifier|volatile
name|boolean
name|isCallerContextEnabled
decl_stmt|;
DECL|field|callerContextMaxLen
specifier|private
name|int
name|callerContextMaxLen
decl_stmt|;
DECL|field|callerSignatureMaxLen
specifier|private
name|int
name|callerSignatureMaxLen
decl_stmt|;
DECL|field|logTokenTrackingId
specifier|private
name|boolean
name|logTokenTrackingId
decl_stmt|;
DECL|field|debugCmdSet
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|debugCmdSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Enable or disable CallerContext.      *      * @param value      *          true, enable CallerContext, otherwise false to disable it.      */
DECL|method|setCallerContextEnabled (final boolean value)
name|void
name|setCallerContextEnabled
parameter_list|(
specifier|final
name|boolean
name|value
parameter_list|)
block|{
name|isCallerContextEnabled
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Get the value indicating if CallerContext is enabled.      *      * @return true, if CallerContext is enabled, otherwise false, if it's      *         disabled.      */
DECL|method|getCallerContextEnabled ()
name|boolean
name|getCallerContextEnabled
parameter_list|()
block|{
return|return
name|isCallerContextEnabled
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|isCallerContextEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HADOOP_CALLER_CONTEXT_ENABLED_KEY
argument_list|,
name|HADOOP_CALLER_CONTEXT_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|callerContextMaxLen
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HADOOP_CALLER_CONTEXT_MAX_SIZE_KEY
argument_list|,
name|HADOOP_CALLER_CONTEXT_MAX_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|callerSignatureMaxLen
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|HADOOP_CALLER_CONTEXT_SIGNATURE_MAX_SIZE_KEY
argument_list|,
name|HADOOP_CALLER_CONTEXT_SIGNATURE_MAX_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|logTokenTrackingId
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AUDIT_LOG_TOKEN_TRACKING_ID_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AUDIT_LOG_TOKEN_TRACKING_ID_DEFAULT
argument_list|)
expr_stmt|;
name|debugCmdSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_AUDIT_LOG_DEBUG_CMDLIST
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|logAuditEvent (boolean succeeded, String userName, InetAddress addr, String cmd, String src, String dst, FileStatus status, CallerContext callerContext, UserGroupInformation ugi, DelegationTokenSecretManager dtSecretManager)
specifier|public
name|void
name|logAuditEvent
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|String
name|userName
parameter_list|,
name|InetAddress
name|addr
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|FileStatus
name|status
parameter_list|,
name|CallerContext
name|callerContext
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|DelegationTokenSecretManager
name|dtSecretManager
parameter_list|)
block|{
if|if
condition|(
name|auditLog
operator|.
name|isDebugEnabled
argument_list|()
operator|||
operator|(
name|auditLog
operator|.
name|isInfoEnabled
argument_list|()
operator|&&
operator|!
name|debugCmdSet
operator|.
name|contains
argument_list|(
name|cmd
argument_list|)
operator|)
condition|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
name|STRING_BUILDER
operator|.
name|get
argument_list|()
decl_stmt|;
name|src
operator|=
name|escapeJava
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dst
operator|=
name|escapeJava
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"allowed="
argument_list|)
operator|.
name|append
argument_list|(
name|succeeded
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ugi="
argument_list|)
operator|.
name|append
argument_list|(
name|userName
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ip="
argument_list|)
operator|.
name|append
argument_list|(
name|addr
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"cmd="
argument_list|)
operator|.
name|append
argument_list|(
name|cmd
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"src="
argument_list|)
operator|.
name|append
argument_list|(
name|src
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dst="
argument_list|)
operator|.
name|append
argument_list|(
name|dst
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|status
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"perm=null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"perm="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|status
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|status
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|status
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logTokenTrackingId
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
literal|"trackingId="
argument_list|)
expr_stmt|;
name|String
name|trackingId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ugi
operator|!=
literal|null
operator|&&
name|dtSecretManager
operator|!=
literal|null
operator|&&
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
operator|==
name|AuthenticationMethod
operator|.
name|TOKEN
condition|)
block|{
for|for
control|(
name|TokenIdentifier
name|tid
range|:
name|ugi
operator|.
name|getTokenIdentifiers
argument_list|()
control|)
block|{
if|if
condition|(
name|tid
operator|instanceof
name|DelegationTokenIdentifier
condition|)
block|{
name|DelegationTokenIdentifier
name|dtid
init|=
operator|(
name|DelegationTokenIdentifier
operator|)
name|tid
decl_stmt|;
name|trackingId
operator|=
name|dtSecretManager
operator|.
name|getTokenTrackingId
argument_list|(
name|dtid
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|trackingId
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
literal|"proto="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Server
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCallerContextEnabled
operator|&&
name|callerContext
operator|!=
literal|null
operator|&&
name|callerContext
operator|.
name|isContextValid
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
literal|"callerContext="
argument_list|)
expr_stmt|;
if|if
condition|(
name|callerContext
operator|.
name|getContext
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|callerContextMaxLen
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|callerContext
operator|.
name|getContext
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|callerContextMaxLen
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|callerContext
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callerContext
operator|.
name|getSignature
argument_list|()
operator|!=
literal|null
operator|&&
name|callerContext
operator|.
name|getSignature
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|&&
name|callerContext
operator|.
name|getSignature
argument_list|()
operator|.
name|length
operator|<=
name|callerSignatureMaxLen
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|callerContext
operator|.
name|getSignature
argument_list|()
argument_list|,
name|CallerContext
operator|.
name|SIGNATURE_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|logAuditMessage
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|logAuditEvent (boolean succeeded, String userName, InetAddress addr, String cmd, String src, String dst, FileStatus status, UserGroupInformation ugi, DelegationTokenSecretManager dtSecretManager)
specifier|public
name|void
name|logAuditEvent
parameter_list|(
name|boolean
name|succeeded
parameter_list|,
name|String
name|userName
parameter_list|,
name|InetAddress
name|addr
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dst
parameter_list|,
name|FileStatus
name|status
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|DelegationTokenSecretManager
name|dtSecretManager
parameter_list|)
block|{
name|this
operator|.
name|logAuditEvent
argument_list|(
name|succeeded
argument_list|,
name|userName
argument_list|,
name|addr
argument_list|,
name|cmd
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|status
argument_list|,
literal|null
comment|/*CallerContext*/
argument_list|,
name|ugi
argument_list|,
name|dtSecretManager
argument_list|)
expr_stmt|;
block|}
DECL|method|logAuditMessage (String message)
specifier|public
name|void
name|logAuditMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|auditLog
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|enableAsyncAuditLog ()
specifier|private
specifier|static
name|void
name|enableAsyncAuditLog
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|auditLog
operator|instanceof
name|Log4JLogger
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Log4j is required to enable async auditlog"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Logger
name|logger
init|=
operator|(
operator|(
name|Log4JLogger
operator|)
name|auditLog
operator|)
operator|.
name|getLogger
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Appender
argument_list|>
name|appenders
init|=
name|Collections
operator|.
name|list
argument_list|(
name|logger
operator|.
name|getAllAppenders
argument_list|()
argument_list|)
decl_stmt|;
comment|// failsafe against trying to async it more than once
if|if
condition|(
operator|!
name|appenders
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|appenders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|AsyncAppender
operator|)
condition|)
block|{
name|AsyncAppender
name|asyncAppender
init|=
operator|new
name|AsyncAppender
argument_list|()
decl_stmt|;
comment|// change logger to have an async appender containing all the
comment|// previously configured appenders
for|for
control|(
name|Appender
name|appender
range|:
name|appenders
control|)
block|{
name|logger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|asyncAppender
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|addAppender
argument_list|(
name|asyncAppender
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return total number of Sync Operations on FSEditLog.    */
annotation|@
name|Override
annotation|@
name|Metric
argument_list|(
block|{
literal|"TotalSyncCount"
block|,
literal|"Total number of sync operations performed on edit logs"
block|}
argument_list|)
DECL|method|getTotalSyncCount ()
specifier|public
name|long
name|getTotalSyncCount
parameter_list|()
block|{
return|return
name|fsImage
operator|.
name|editLog
operator|.
name|getTotalSyncCount
argument_list|()
return|;
block|}
comment|/**    * Return total time spent doing sync operations on FSEditLog.    */
annotation|@
name|Override
annotation|@
name|Metric
argument_list|(
block|{
literal|"TotalSyncTimes"
block|,
literal|"Total time spend in sync operation on various edit logs"
block|}
argument_list|)
DECL|method|getTotalSyncTimes ()
specifier|public
name|String
name|getTotalSyncTimes
parameter_list|()
block|{
name|JournalSet
name|journalSet
init|=
name|fsImage
operator|.
name|editLog
operator|.
name|getJournalSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|journalSet
operator|!=
literal|null
condition|)
block|{
return|return
name|journalSet
operator|.
name|getSyncTimes
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
comment|/**    * Gets number of bytes in the blocks in future generation stamps.    *    * @return number of bytes that can be deleted if exited from safe mode.    */
DECL|method|getBytesInFuture ()
specifier|public
name|long
name|getBytesInFuture
parameter_list|()
block|{
return|return
name|blockManager
operator|.
name|getBytesInFuture
argument_list|()
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumInMaintenanceLiveDataNodes"
block|,
literal|"Number of live Datanodes which are in maintenance state"
block|}
argument_list|)
DECL|method|getNumInMaintenanceLiveDataNodes ()
specifier|public
name|int
name|getNumInMaintenanceLiveDataNodes
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|live
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
name|live
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|liveInMaintenance
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|live
control|)
block|{
name|liveInMaintenance
operator|+=
name|node
operator|.
name|isInMaintenance
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
return|return
name|liveInMaintenance
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumInMaintenanceDeadDataNodes"
block|,
literal|"Number of dead Datanodes which are in maintenance state"
block|}
argument_list|)
DECL|method|getNumInMaintenanceDeadDataNodes ()
specifier|public
name|int
name|getNumInMaintenanceDeadDataNodes
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|dead
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|()
decl_stmt|;
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|fetchDatanodes
argument_list|(
literal|null
argument_list|,
name|dead
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|deadInMaintenance
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|node
range|:
name|dead
control|)
block|{
name|deadInMaintenance
operator|+=
name|node
operator|.
name|isInMaintenance
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
return|return
name|deadInMaintenance
return|;
block|}
annotation|@
name|Override
comment|// FSNamesystemMBean
annotation|@
name|Metric
argument_list|(
block|{
literal|"NumEnteringMaintenanceDataNodes"
block|,
literal|"Number of Datanodes that are entering the maintenance state"
block|}
argument_list|)
DECL|method|getNumEnteringMaintenanceDataNodes ()
specifier|public
name|int
name|getNumEnteringMaintenanceDataNodes
parameter_list|()
block|{
return|return
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getEnteringMaintenanceNodes
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
comment|// This method logs operatoinName without super user privilege.
comment|// It should be called without holding FSN lock.
DECL|method|checkSuperuserPrivilege (String operationName)
name|void
name|checkSuperuserPrivilege
parameter_list|(
name|String
name|operationName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|checkSuperuserPrivilege
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|logAuditEvent
argument_list|(
literal|false
argument_list|,
name|operationName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ace
throw|;
block|}
block|}
DECL|method|getQuotaCommand (long nsQuota, long dsQuota)
name|String
name|getQuotaCommand
parameter_list|(
name|long
name|nsQuota
parameter_list|,
name|long
name|dsQuota
parameter_list|)
block|{
if|if
condition|(
name|nsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_RESET
operator|&&
name|dsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
condition|)
block|{
return|return
literal|"clearQuota"
return|;
block|}
elseif|else
if|if
condition|(
name|nsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
operator|&&
name|dsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_RESET
condition|)
block|{
return|return
literal|"clearSpaceQuota"
return|;
block|}
elseif|else
if|if
condition|(
name|dsQuota
operator|==
name|HdfsConstants
operator|.
name|QUOTA_DONT_SET
condition|)
block|{
return|return
literal|"setQuota"
return|;
block|}
else|else
block|{
return|return
literal|"setSpaceQuota"
return|;
block|}
block|}
DECL|method|getFailedStorageCommand (String mode)
name|String
name|getFailedStorageCommand
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|.
name|equals
argument_list|(
literal|"check"
argument_list|)
condition|)
block|{
return|return
literal|"checkRestoreFailedStorage"
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
return|return
literal|"enableRestoreFailedStorage"
return|;
block|}
else|else
block|{
return|return
literal|"disableRestoreFailedStorage"
return|;
block|}
block|}
block|}
end_class

end_unit

