begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeProtocolProtos
operator|.
name|HeartbeatRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|DatanodeLifelineProtocolProtos
operator|.
name|LifelineResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|DatanodeLifelineProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|VolumeFailureSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Implementation for protobuf service that forwards requests  * received on {@link DatanodeLifelineProtocolPB} to the  * {@link DatanodeLifelineProtocol} server implementation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DatanodeLifelineProtocolServerSideTranslatorPB
specifier|public
class|class
name|DatanodeLifelineProtocolServerSideTranslatorPB
implements|implements
name|DatanodeLifelineProtocolPB
block|{
DECL|field|VOID_LIFELINE_RESPONSE_PROTO
specifier|private
specifier|static
specifier|final
name|LifelineResponseProto
name|VOID_LIFELINE_RESPONSE_PROTO
init|=
name|LifelineResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|impl
specifier|private
specifier|final
name|DatanodeLifelineProtocol
name|impl
decl_stmt|;
DECL|method|DatanodeLifelineProtocolServerSideTranslatorPB ( DatanodeLifelineProtocol impl)
specifier|public
name|DatanodeLifelineProtocolServerSideTranslatorPB
parameter_list|(
name|DatanodeLifelineProtocol
name|impl
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendLifeline (RpcController controller, HeartbeatRequestProto request)
specifier|public
name|LifelineResponseProto
name|sendLifeline
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|HeartbeatRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
specifier|final
name|StorageReport
index|[]
name|report
init|=
name|PBHelperClient
operator|.
name|convertStorageReports
argument_list|(
name|request
operator|.
name|getReportsList
argument_list|()
argument_list|)
decl_stmt|;
name|VolumeFailureSummary
name|volumeFailureSummary
init|=
name|request
operator|.
name|hasVolumeFailureSummary
argument_list|()
condition|?
name|PBHelper
operator|.
name|convertVolumeFailureSummary
argument_list|(
name|request
operator|.
name|getVolumeFailureSummary
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|impl
operator|.
name|sendLifeline
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getRegistration
argument_list|()
argument_list|)
argument_list|,
name|report
argument_list|,
name|request
operator|.
name|getCacheCapacity
argument_list|()
argument_list|,
name|request
operator|.
name|getCacheUsed
argument_list|()
argument_list|,
name|request
operator|.
name|getXmitsInProgress
argument_list|()
argument_list|,
name|request
operator|.
name|getXceiverCount
argument_list|()
argument_list|,
name|request
operator|.
name|getFailedVolumes
argument_list|()
argument_list|,
name|volumeFailureSummary
argument_list|)
expr_stmt|;
return|return
name|VOID_LIFELINE_RESPONSE_PROTO
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

