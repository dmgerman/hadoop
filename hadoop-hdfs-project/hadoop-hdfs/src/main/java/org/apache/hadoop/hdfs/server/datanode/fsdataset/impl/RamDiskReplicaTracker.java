begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode.fsdataset.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|RamDiskReplicaTracker
specifier|public
specifier|abstract
class|class
name|RamDiskReplicaTracker
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RamDiskReplicaTracker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fsDataset
name|FsDatasetImpl
name|fsDataset
decl_stmt|;
DECL|class|RamDiskReplica
specifier|static
class|class
name|RamDiskReplica
implements|implements
name|Comparable
argument_list|<
name|RamDiskReplica
argument_list|>
block|{
DECL|field|bpid
specifier|private
specifier|final
name|String
name|bpid
decl_stmt|;
DECL|field|blockId
specifier|private
specifier|final
name|long
name|blockId
decl_stmt|;
DECL|field|savedBlockFile
specifier|private
name|File
name|savedBlockFile
decl_stmt|;
DECL|field|savedMetaFile
specifier|private
name|File
name|savedMetaFile
decl_stmt|;
DECL|field|lockedBytesReserved
specifier|private
name|long
name|lockedBytesReserved
decl_stmt|;
DECL|field|creationTime
specifier|private
name|long
name|creationTime
decl_stmt|;
DECL|field|numReads
specifier|protected
name|AtomicLong
name|numReads
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|isPersisted
specifier|protected
name|boolean
name|isPersisted
decl_stmt|;
comment|/**      * RAM_DISK volume that holds the original replica.      */
DECL|field|ramDiskVolume
specifier|final
name|FsVolumeSpi
name|ramDiskVolume
decl_stmt|;
comment|/**      * Persistent volume that holds or will hold the saved replica.      */
DECL|field|lazyPersistVolume
name|FsVolumeImpl
name|lazyPersistVolume
decl_stmt|;
DECL|method|RamDiskReplica (final String bpid, final long blockId, final FsVolumeImpl ramDiskVolume, long lockedBytesReserved)
name|RamDiskReplica
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|,
specifier|final
name|long
name|blockId
parameter_list|,
specifier|final
name|FsVolumeImpl
name|ramDiskVolume
parameter_list|,
name|long
name|lockedBytesReserved
parameter_list|)
block|{
name|this
operator|.
name|bpid
operator|=
name|bpid
expr_stmt|;
name|this
operator|.
name|blockId
operator|=
name|blockId
expr_stmt|;
name|this
operator|.
name|ramDiskVolume
operator|=
name|ramDiskVolume
expr_stmt|;
name|this
operator|.
name|lockedBytesReserved
operator|=
name|lockedBytesReserved
expr_stmt|;
name|lazyPersistVolume
operator|=
literal|null
expr_stmt|;
name|savedMetaFile
operator|=
literal|null
expr_stmt|;
name|savedBlockFile
operator|=
literal|null
expr_stmt|;
name|creationTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
name|isPersisted
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getBlockId ()
name|long
name|getBlockId
parameter_list|()
block|{
return|return
name|blockId
return|;
block|}
DECL|method|getBlockPoolId ()
name|String
name|getBlockPoolId
parameter_list|()
block|{
return|return
name|bpid
return|;
block|}
DECL|method|getLazyPersistVolume ()
name|FsVolumeImpl
name|getLazyPersistVolume
parameter_list|()
block|{
return|return
name|lazyPersistVolume
return|;
block|}
DECL|method|setLazyPersistVolume (FsVolumeImpl volume)
name|void
name|setLazyPersistVolume
parameter_list|(
name|FsVolumeImpl
name|volume
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|volume
operator|.
name|isTransientStorage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|lazyPersistVolume
operator|=
name|volume
expr_stmt|;
block|}
DECL|method|getSavedBlockFile ()
name|File
name|getSavedBlockFile
parameter_list|()
block|{
return|return
name|savedBlockFile
return|;
block|}
DECL|method|getSavedMetaFile ()
name|File
name|getSavedMetaFile
parameter_list|()
block|{
return|return
name|savedMetaFile
return|;
block|}
DECL|method|getNumReads ()
name|long
name|getNumReads
parameter_list|()
block|{
return|return
name|numReads
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getCreationTime ()
name|long
name|getCreationTime
parameter_list|()
block|{
return|return
name|creationTime
return|;
block|}
DECL|method|getIsPersisted ()
name|boolean
name|getIsPersisted
parameter_list|()
block|{
return|return
name|isPersisted
return|;
block|}
comment|/**      * Record the saved meta and block files on the given volume.      *      * @param files Meta and block files, in that order.      */
DECL|method|recordSavedBlockFiles (File[] files)
name|void
name|recordSavedBlockFiles
parameter_list|(
name|File
index|[]
name|files
parameter_list|)
block|{
name|this
operator|.
name|savedMetaFile
operator|=
name|files
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|savedBlockFile
operator|=
name|files
index|[
literal|1
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|bpid
operator|.
name|hashCode
argument_list|()
operator|^
operator|(
name|int
operator|)
name|blockId
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|other
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RamDiskReplica
name|otherState
init|=
operator|(
name|RamDiskReplica
operator|)
name|other
decl_stmt|;
return|return
operator|(
name|otherState
operator|.
name|bpid
operator|.
name|equals
argument_list|(
name|bpid
argument_list|)
operator|&&
name|otherState
operator|.
name|blockId
operator|==
name|blockId
operator|)
return|;
block|}
comment|// Delete the saved meta and block files. Failure to delete can be
comment|// ignored, the directory scanner will retry the deletion later.
DECL|method|deleteSavedFiles ()
name|void
name|deleteSavedFiles
parameter_list|()
block|{
if|if
condition|(
name|savedBlockFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|savedBlockFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete block file "
operator|+
name|savedBlockFile
argument_list|)
expr_stmt|;
block|}
name|savedBlockFile
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|savedMetaFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|savedMetaFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete meta file "
operator|+
name|savedMetaFile
argument_list|)
expr_stmt|;
block|}
name|savedMetaFile
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareTo (RamDiskReplica other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|RamDiskReplica
name|other
parameter_list|)
block|{
name|int
name|bpidResult
init|=
name|bpid
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|bpid
argument_list|)
decl_stmt|;
if|if
condition|(
name|bpidResult
operator|==
literal|0
condition|)
if|if
condition|(
name|blockId
operator|==
name|other
operator|.
name|blockId
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|blockId
operator|<
name|other
operator|.
name|blockId
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
return|return
name|bpidResult
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[BlockPoolID="
operator|+
name|bpid
operator|+
literal|"; BlockId="
operator|+
name|blockId
operator|+
literal|"]"
return|;
block|}
DECL|method|getLockedBytesReserved ()
specifier|public
name|long
name|getLockedBytesReserved
parameter_list|()
block|{
return|return
name|lockedBytesReserved
return|;
block|}
block|}
comment|/**    * Get an instance of the configured RamDiskReplicaTracker based on the    * the configuration property    * {@link org.apache.hadoop.hdfs.DFSConfigKeys#DFS_DATANODE_RAM_DISK_REPLICA_TRACKER_KEY}.    *    * @param conf the configuration to be used    * @param dataset the FsDataset object.    * @return an instance of RamDiskReplicaTracker    */
DECL|method|getInstance (final Configuration conf, final FsDatasetImpl fsDataset)
specifier|static
name|RamDiskReplicaTracker
name|getInstance
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FsDatasetImpl
name|fsDataset
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|RamDiskReplicaTracker
argument_list|>
name|trackerClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_RAM_DISK_REPLICA_TRACKER_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_RAM_DISK_REPLICA_TRACKER_DEFAULT
argument_list|,
name|RamDiskReplicaTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RamDiskReplicaTracker
name|tracker
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|trackerClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|initialize
argument_list|(
name|fsDataset
argument_list|)
expr_stmt|;
return|return
name|tracker
return|;
block|}
DECL|method|initialize (final FsDatasetImpl fsDataset)
name|void
name|initialize
parameter_list|(
specifier|final
name|FsDatasetImpl
name|fsDataset
parameter_list|)
block|{
name|this
operator|.
name|fsDataset
operator|=
name|fsDataset
expr_stmt|;
block|}
comment|/**    * Start tracking a new finalized replica on RAM disk.    *    * @param transientVolume RAM disk volume that stores the replica.    */
DECL|method|addReplica (final String bpid, final long blockId, final FsVolumeImpl transientVolume, long lockedBytesReserved)
specifier|abstract
name|void
name|addReplica
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|,
specifier|final
name|long
name|blockId
parameter_list|,
specifier|final
name|FsVolumeImpl
name|transientVolume
parameter_list|,
name|long
name|lockedBytesReserved
parameter_list|)
function_decl|;
comment|/**    * Invoked when a replica is opened by a client. This may be used as    * a heuristic by the eviction scheme.    */
DECL|method|touch (final String bpid, final long blockId)
specifier|abstract
name|void
name|touch
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|,
specifier|final
name|long
name|blockId
parameter_list|)
function_decl|;
comment|/**    * Get the next replica to write to persistent storage.    */
DECL|method|dequeueNextReplicaToPersist ()
specifier|abstract
name|RamDiskReplica
name|dequeueNextReplicaToPersist
parameter_list|()
function_decl|;
comment|/**    * Invoked if a replica that was previously dequeued for persistence    * could not be successfully persisted. Add it back so it can be retried    * later.    */
DECL|method|reenqueueReplicaNotPersisted ( final RamDiskReplica ramDiskReplica)
specifier|abstract
name|void
name|reenqueueReplicaNotPersisted
parameter_list|(
specifier|final
name|RamDiskReplica
name|ramDiskReplica
parameter_list|)
function_decl|;
comment|/**    * Invoked when the Lazy persist operation is started by the DataNode.    * @param checkpointVolume    */
DECL|method|recordStartLazyPersist ( final String bpid, final long blockId, FsVolumeImpl checkpointVolume)
specifier|abstract
name|void
name|recordStartLazyPersist
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|,
specifier|final
name|long
name|blockId
parameter_list|,
name|FsVolumeImpl
name|checkpointVolume
parameter_list|)
function_decl|;
comment|/**    * Invoked when the Lazy persist operation is complete.    *    * @param savedFiles The saved meta and block files, in that order.    */
DECL|method|recordEndLazyPersist ( final String bpid, final long blockId, final File[] savedFiles)
specifier|abstract
name|void
name|recordEndLazyPersist
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|,
specifier|final
name|long
name|blockId
parameter_list|,
specifier|final
name|File
index|[]
name|savedFiles
parameter_list|)
function_decl|;
comment|/**    * Return a candidate replica to remove from RAM Disk. The exact replica    * to be returned may depend on the eviction scheme utilized.    *    * @return    */
DECL|method|getNextCandidateForEviction ()
specifier|abstract
name|RamDiskReplica
name|getNextCandidateForEviction
parameter_list|()
function_decl|;
comment|/**    * Return the number of replicas pending persistence to disk.    */
DECL|method|numReplicasNotPersisted ()
specifier|abstract
name|int
name|numReplicasNotPersisted
parameter_list|()
function_decl|;
comment|/**    * Discard all state we are tracking for the given replica.    */
DECL|method|discardReplica ( final String bpid, final long blockId, boolean deleteSavedCopies)
specifier|abstract
name|void
name|discardReplica
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|,
specifier|final
name|long
name|blockId
parameter_list|,
name|boolean
name|deleteSavedCopies
parameter_list|)
function_decl|;
comment|/**    * Return RamDiskReplica info given block pool id and block id    * Return null if it does not exist in RamDisk    */
DECL|method|getReplica ( final String bpid, final long blockId)
specifier|abstract
name|RamDiskReplica
name|getReplica
parameter_list|(
specifier|final
name|String
name|bpid
parameter_list|,
specifier|final
name|long
name|blockId
parameter_list|)
function_decl|;
block|}
end_class

end_unit

