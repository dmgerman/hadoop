begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.blockmanagement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSClusterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSInodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/** The class is responsible for choosing the desired number of targets  * for placing block replicas.  * The replica placement strategy is that if the writer is on a datanode,  * the 1st replica is placed on the local machine,   * otherwise a random datanode. The 2nd replica is placed on a datanode  * that is on a different rack. The 3rd replica is placed on a datanode  * which is on a different node of the rack as the second replica.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|BlockPlacementPolicyDefault
specifier|public
class|class
name|BlockPlacementPolicyDefault
extends|extends
name|BlockPlacementPolicy
block|{
DECL|field|considerLoad
specifier|private
name|boolean
name|considerLoad
decl_stmt|;
DECL|field|preferLocalNode
specifier|private
name|boolean
name|preferLocalNode
init|=
literal|true
decl_stmt|;
DECL|field|clusterMap
specifier|private
name|NetworkTopology
name|clusterMap
decl_stmt|;
DECL|field|stats
specifier|private
name|FSClusterStats
name|stats
decl_stmt|;
DECL|field|enableDebugLogging
specifier|static
specifier|final
name|String
name|enableDebugLogging
init|=
literal|"For more information, please enable"
operator|+
literal|" DEBUG level logging on the "
operator|+
literal|"org.apache.hadoop.hdfs.server.namenode.FSNamesystem logger."
decl_stmt|;
DECL|method|BlockPlacementPolicyDefault (Configuration conf, FSClusterStats stats, NetworkTopology clusterMap)
name|BlockPlacementPolicyDefault
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSClusterStats
name|stats
parameter_list|,
name|NetworkTopology
name|clusterMap
parameter_list|)
block|{
name|initialize
argument_list|(
name|conf
argument_list|,
name|stats
argument_list|,
name|clusterMap
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockPlacementPolicyDefault ()
name|BlockPlacementPolicyDefault
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|initialize (Configuration conf, FSClusterStats stats, NetworkTopology clusterMap)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FSClusterStats
name|stats
parameter_list|,
name|NetworkTopology
name|clusterMap
parameter_list|)
block|{
name|this
operator|.
name|considerLoad
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_REPLICATION_CONSIDERLOAD_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|clusterMap
operator|=
name|clusterMap
expr_stmt|;
block|}
DECL|field|threadLocalBuilder
specifier|private
name|ThreadLocal
argument_list|<
name|StringBuilder
argument_list|>
name|threadLocalBuilder
init|=
operator|new
name|ThreadLocal
argument_list|<
name|StringBuilder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|StringBuilder
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|chooseTarget (String srcPath, int numOfReplicas, DatanodeDescriptor writer, List<DatanodeDescriptor> chosenNodes, long blocksize)
specifier|public
name|DatanodeDescriptor
index|[]
name|chooseTarget
parameter_list|(
name|String
name|srcPath
parameter_list|,
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chosenNodes
parameter_list|,
name|long
name|blocksize
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
name|chosenNodes
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|blocksize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|chooseTarget (String srcPath, int numOfReplicas, DatanodeDescriptor writer, List<DatanodeDescriptor> chosenNodes, boolean returnChosenNodes, HashMap<Node, Node> excludedNodes, long blocksize)
specifier|public
name|DatanodeDescriptor
index|[]
name|chooseTarget
parameter_list|(
name|String
name|srcPath
parameter_list|,
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chosenNodes
parameter_list|,
name|boolean
name|returnChosenNodes
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|)
block|{
return|return
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
name|chosenNodes
argument_list|,
name|returnChosenNodes
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|)
return|;
block|}
comment|/** This is the implementation. */
DECL|method|chooseTarget (int numOfReplicas, DatanodeDescriptor writer, List<DatanodeDescriptor> chosenNodes, boolean returnChosenNodes, HashMap<Node, Node> excludedNodes, long blocksize)
name|DatanodeDescriptor
index|[]
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|chosenNodes
parameter_list|,
name|boolean
name|returnChosenNodes
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|)
block|{
if|if
condition|(
name|numOfReplicas
operator|==
literal|0
operator|||
name|clusterMap
operator|.
name|getNumOfLeaves
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|DatanodeDescriptor
index|[
literal|0
index|]
return|;
block|}
if|if
condition|(
name|excludedNodes
operator|==
literal|null
condition|)
block|{
name|excludedNodes
operator|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|int
name|clusterSize
init|=
name|clusterMap
operator|.
name|getNumOfLeaves
argument_list|()
decl_stmt|;
name|int
name|totalNumOfReplicas
init|=
name|chosenNodes
operator|.
name|size
argument_list|()
operator|+
name|numOfReplicas
decl_stmt|;
if|if
condition|(
name|totalNumOfReplicas
operator|>
name|clusterSize
condition|)
block|{
name|numOfReplicas
operator|-=
operator|(
name|totalNumOfReplicas
operator|-
name|clusterSize
operator|)
expr_stmt|;
name|totalNumOfReplicas
operator|=
name|clusterSize
expr_stmt|;
block|}
name|int
name|maxNodesPerRack
init|=
operator|(
name|totalNumOfReplicas
operator|-
literal|1
operator|)
operator|/
name|clusterMap
operator|.
name|getNumOfRacks
argument_list|()
operator|+
literal|2
decl_stmt|;
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|DatanodeDescriptor
argument_list|>
argument_list|(
name|chosenNodes
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|chosenNodes
control|)
block|{
name|excludedNodes
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|clusterMap
operator|.
name|contains
argument_list|(
name|writer
argument_list|)
condition|)
block|{
name|writer
operator|=
literal|null
expr_stmt|;
block|}
name|DatanodeDescriptor
name|localNode
init|=
name|chooseTarget
argument_list|(
name|numOfReplicas
argument_list|,
name|writer
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|returnChosenNodes
condition|)
block|{
name|results
operator|.
name|removeAll
argument_list|(
name|chosenNodes
argument_list|)
expr_stmt|;
block|}
comment|// sorting nodes to form a pipeline
return|return
name|getPipeline
argument_list|(
operator|(
name|writer
operator|==
literal|null
operator|)
condition|?
name|localNode
else|:
name|writer
argument_list|,
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|DatanodeDescriptor
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
comment|/* choose<i>numOfReplicas</i> from all data nodes */
DECL|method|chooseTarget (int numOfReplicas, DatanodeDescriptor writer, HashMap<Node, Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeDescriptor> results)
specifier|private
name|DatanodeDescriptor
name|chooseTarget
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|writer
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|int
name|maxNodesPerRack
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|)
block|{
if|if
condition|(
name|numOfReplicas
operator|==
literal|0
operator|||
name|clusterMap
operator|.
name|getNumOfLeaves
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|writer
return|;
block|}
name|int
name|totalReplicasExpected
init|=
name|numOfReplicas
decl_stmt|;
name|int
name|numOfResults
init|=
name|results
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|newBlock
init|=
operator|(
name|numOfResults
operator|==
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
operator|&&
operator|!
name|newBlock
condition|)
block|{
name|writer
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|numOfResults
operator|==
literal|0
condition|)
block|{
name|writer
operator|=
name|chooseLocalNode
argument_list|(
name|writer
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|numOfReplicas
operator|==
literal|0
condition|)
block|{
return|return
name|writer
return|;
block|}
block|}
if|if
condition|(
name|numOfResults
operator|<=
literal|1
condition|)
block|{
name|chooseRemoteRack
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
name|numOfReplicas
operator|==
literal|0
condition|)
block|{
return|return
name|writer
return|;
block|}
block|}
if|if
condition|(
name|numOfResults
operator|<=
literal|2
condition|)
block|{
if|if
condition|(
name|clusterMap
operator|.
name|isOnSameRack
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|chooseRemoteRack
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newBlock
condition|)
block|{
name|chooseLocalRack
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chooseLocalRack
argument_list|(
name|writer
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|--
name|numOfReplicas
operator|==
literal|0
condition|)
block|{
return|return
name|writer
return|;
block|}
block|}
name|chooseRandom
argument_list|(
name|numOfReplicas
argument_list|,
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotEnoughReplicasException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to place enough replicas, still in need of "
operator|+
name|numOfReplicas
operator|+
literal|" to reach "
operator|+
name|totalReplicasExpected
operator|+
literal|"\n"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|writer
return|;
block|}
comment|/* choose<i>localMachine</i> as the target.    * if<i>localMachine</i> is not available,     * choose a node on the same rack    * @return the chosen node    */
DECL|method|chooseLocalNode ( DatanodeDescriptor localMachine, HashMap<Node, Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeDescriptor> results)
specifier|private
name|DatanodeDescriptor
name|chooseLocalNode
parameter_list|(
name|DatanodeDescriptor
name|localMachine
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|int
name|maxNodesPerRack
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|)
throws|throws
name|NotEnoughReplicasException
block|{
comment|// if no local machine, randomly choose one node
if|if
condition|(
name|localMachine
operator|==
literal|null
condition|)
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
return|;
if|if
condition|(
name|preferLocalNode
condition|)
block|{
comment|// otherwise try local machine first
name|Node
name|oldNode
init|=
name|excludedNodes
operator|.
name|put
argument_list|(
name|localMachine
argument_list|,
name|localMachine
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldNode
operator|==
literal|null
condition|)
block|{
comment|// was not in the excluded list
if|if
condition|(
name|isGoodTarget
argument_list|(
name|localMachine
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
literal|false
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|localMachine
argument_list|)
expr_stmt|;
return|return
name|localMachine
return|;
block|}
block|}
block|}
comment|// try a node on local rack
return|return
name|chooseLocalRack
argument_list|(
name|localMachine
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
return|;
block|}
comment|/* choose one node from the rack that<i>localMachine</i> is on.    * if no such node is available, choose one node from the rack where    * a second replica is on.    * if still no such node is available, choose a random node     * in the cluster.    * @return the chosen node    */
DECL|method|chooseLocalRack ( DatanodeDescriptor localMachine, HashMap<Node, Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeDescriptor> results)
specifier|private
name|DatanodeDescriptor
name|chooseLocalRack
parameter_list|(
name|DatanodeDescriptor
name|localMachine
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|int
name|maxNodesPerRack
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|)
throws|throws
name|NotEnoughReplicasException
block|{
comment|// no local machine, so choose a random machine
if|if
condition|(
name|localMachine
operator|==
literal|null
condition|)
block|{
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
return|;
block|}
comment|// choose one from the local rack
try|try
block|{
return|return
name|chooseRandom
argument_list|(
name|localMachine
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NotEnoughReplicasException
name|e1
parameter_list|)
block|{
comment|// find the second replica
name|DatanodeDescriptor
name|newLocal
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|results
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatanodeDescriptor
name|nextNode
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextNode
operator|!=
name|localMachine
condition|)
block|{
name|newLocal
operator|=
name|nextNode
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|newLocal
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|chooseRandom
argument_list|(
name|newLocal
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NotEnoughReplicasException
name|e2
parameter_list|)
block|{
comment|//otherwise randomly choose one from the network
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|//otherwise randomly choose one from the network
return|return
name|chooseRandom
argument_list|(
name|NodeBase
operator|.
name|ROOT
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
return|;
block|}
block|}
block|}
comment|/* choose<i>numOfReplicas</i> nodes from the racks     * that<i>localMachine</i> is NOT on.    * if not enough nodes are available, choose the remaining ones     * from the local rack    */
DECL|method|chooseRemoteRack (int numOfReplicas, DatanodeDescriptor localMachine, HashMap<Node, Node> excludedNodes, long blocksize, int maxReplicasPerRack, List<DatanodeDescriptor> results)
specifier|private
name|void
name|chooseRemoteRack
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|DatanodeDescriptor
name|localMachine
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|int
name|maxReplicasPerRack
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|)
throws|throws
name|NotEnoughReplicasException
block|{
name|int
name|oldNumOfReplicas
init|=
name|results
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// randomly choose one node from remote racks
try|try
block|{
name|chooseRandom
argument_list|(
name|numOfReplicas
argument_list|,
literal|"~"
operator|+
name|localMachine
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxReplicasPerRack
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotEnoughReplicasException
name|e
parameter_list|)
block|{
name|chooseRandom
argument_list|(
name|numOfReplicas
operator|-
operator|(
name|results
operator|.
name|size
argument_list|()
operator|-
name|oldNumOfReplicas
operator|)
argument_list|,
name|localMachine
operator|.
name|getNetworkLocation
argument_list|()
argument_list|,
name|excludedNodes
argument_list|,
name|blocksize
argument_list|,
name|maxReplicasPerRack
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Randomly choose one target from<i>nodes</i>.    * @return the chosen node    */
DECL|method|chooseRandom ( String nodes, HashMap<Node, Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeDescriptor> results)
specifier|private
name|DatanodeDescriptor
name|chooseRandom
parameter_list|(
name|String
name|nodes
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|int
name|maxNodesPerRack
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|)
throws|throws
name|NotEnoughReplicasException
block|{
name|int
name|numOfAvailableNodes
init|=
name|clusterMap
operator|.
name|countNumOfAvailableNodes
argument_list|(
name|nodes
argument_list|,
name|excludedNodes
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|builder
operator|=
name|threadLocalBuilder
operator|.
name|get
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
block|}
name|boolean
name|badTarget
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|numOfAvailableNodes
operator|>
literal|0
condition|)
block|{
name|DatanodeDescriptor
name|chosenNode
init|=
call|(
name|DatanodeDescriptor
call|)
argument_list|(
name|clusterMap
operator|.
name|chooseRandom
argument_list|(
name|nodes
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|oldNode
init|=
name|excludedNodes
operator|.
name|put
argument_list|(
name|chosenNode
argument_list|,
name|chosenNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldNode
operator|==
literal|null
condition|)
block|{
comment|// choosendNode was not in the excluded list
name|numOfAvailableNodes
operator|--
expr_stmt|;
if|if
condition|(
name|isGoodTarget
argument_list|(
name|chosenNode
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|chosenNode
argument_list|)
expr_stmt|;
return|return
name|chosenNode
return|;
block|}
else|else
block|{
name|badTarget
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|String
name|detail
init|=
name|enableDebugLogging
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|badTarget
operator|&&
name|builder
operator|!=
literal|null
condition|)
block|{
name|detail
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
name|detail
operator|=
literal|""
expr_stmt|;
block|}
throw|throw
operator|new
name|NotEnoughReplicasException
argument_list|(
name|detail
argument_list|)
throw|;
block|}
comment|/* Randomly choose<i>numOfReplicas</i> targets from<i>nodes</i>.    */
DECL|method|chooseRandom (int numOfReplicas, String nodes, HashMap<Node, Node> excludedNodes, long blocksize, int maxNodesPerRack, List<DatanodeDescriptor> results)
specifier|private
name|void
name|chooseRandom
parameter_list|(
name|int
name|numOfReplicas
parameter_list|,
name|String
name|nodes
parameter_list|,
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Node
argument_list|>
name|excludedNodes
parameter_list|,
name|long
name|blocksize
parameter_list|,
name|int
name|maxNodesPerRack
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|)
throws|throws
name|NotEnoughReplicasException
block|{
name|int
name|numOfAvailableNodes
init|=
name|clusterMap
operator|.
name|countNumOfAvailableNodes
argument_list|(
name|nodes
argument_list|,
name|excludedNodes
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|builder
operator|=
name|threadLocalBuilder
operator|.
name|get
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
block|}
name|boolean
name|badTarget
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|numOfReplicas
operator|>
literal|0
operator|&&
name|numOfAvailableNodes
operator|>
literal|0
condition|)
block|{
name|DatanodeDescriptor
name|chosenNode
init|=
call|(
name|DatanodeDescriptor
call|)
argument_list|(
name|clusterMap
operator|.
name|chooseRandom
argument_list|(
name|nodes
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|oldNode
init|=
name|excludedNodes
operator|.
name|put
argument_list|(
name|chosenNode
argument_list|,
name|chosenNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldNode
operator|==
literal|null
condition|)
block|{
name|numOfAvailableNodes
operator|--
expr_stmt|;
if|if
condition|(
name|isGoodTarget
argument_list|(
name|chosenNode
argument_list|,
name|blocksize
argument_list|,
name|maxNodesPerRack
argument_list|,
name|results
argument_list|)
condition|)
block|{
name|numOfReplicas
operator|--
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|chosenNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|badTarget
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|numOfReplicas
operator|>
literal|0
condition|)
block|{
name|String
name|detail
init|=
name|enableDebugLogging
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|badTarget
operator|&&
name|builder
operator|!=
literal|null
condition|)
block|{
name|detail
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
name|detail
operator|=
literal|""
expr_stmt|;
block|}
throw|throw
operator|new
name|NotEnoughReplicasException
argument_list|(
name|detail
argument_list|)
throw|;
block|}
block|}
comment|/* judge if a node is a good target.    * return true if<i>node</i> has enough space,     * does not have too much load, and the rack does not have too many nodes    */
DECL|method|isGoodTarget (DatanodeDescriptor node, long blockSize, int maxTargetPerLoc, List<DatanodeDescriptor> results)
specifier|private
name|boolean
name|isGoodTarget
parameter_list|(
name|DatanodeDescriptor
name|node
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|int
name|maxTargetPerLoc
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|)
block|{
return|return
name|isGoodTarget
argument_list|(
name|node
argument_list|,
name|blockSize
argument_list|,
name|maxTargetPerLoc
argument_list|,
name|this
operator|.
name|considerLoad
argument_list|,
name|results
argument_list|)
return|;
block|}
DECL|method|isGoodTarget (DatanodeDescriptor node, long blockSize, int maxTargetPerLoc, boolean considerLoad, List<DatanodeDescriptor> results)
specifier|private
name|boolean
name|isGoodTarget
parameter_list|(
name|DatanodeDescriptor
name|node
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|int
name|maxTargetPerLoc
parameter_list|,
name|boolean
name|considerLoad
parameter_list|,
name|List
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|results
parameter_list|)
block|{
comment|// check if the node is (being) decommissed
if|if
condition|(
name|node
operator|.
name|isDecommissionInProgress
argument_list|()
operator|||
name|node
operator|.
name|isDecommissioned
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|threadLocalBuilder
operator|.
name|get
argument_list|()
operator|.
name|append
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Node "
argument_list|)
operator|.
name|append
argument_list|(
name|NodeBase
operator|.
name|getPath
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" is not chosen because the node is (being) decommissioned "
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|long
name|remaining
init|=
name|node
operator|.
name|getRemaining
argument_list|()
operator|-
operator|(
name|node
operator|.
name|getBlocksScheduled
argument_list|()
operator|*
name|blockSize
operator|)
decl_stmt|;
comment|// check the remaining capacity of the target machine
if|if
condition|(
name|blockSize
operator|*
name|HdfsConstants
operator|.
name|MIN_BLOCKS_FOR_WRITE
operator|>
name|remaining
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|threadLocalBuilder
operator|.
name|get
argument_list|()
operator|.
name|append
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Node "
argument_list|)
operator|.
name|append
argument_list|(
name|NodeBase
operator|.
name|getPath
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" is not chosen because the node does not have enough space "
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// check the communication traffic of the target machine
if|if
condition|(
name|considerLoad
condition|)
block|{
name|double
name|avgLoad
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
name|clusterMap
operator|.
name|getNumOfLeaves
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|!=
literal|0
operator|&&
name|stats
operator|!=
literal|null
condition|)
block|{
name|avgLoad
operator|=
operator|(
name|double
operator|)
name|stats
operator|.
name|getTotalLoad
argument_list|()
operator|/
name|size
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getXceiverCount
argument_list|()
operator|>
operator|(
literal|2.0
operator|*
name|avgLoad
operator|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|threadLocalBuilder
operator|.
name|get
argument_list|()
operator|.
name|append
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Node "
argument_list|)
operator|.
name|append
argument_list|(
name|NodeBase
operator|.
name|getPath
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" is not chosen because the node is too busy "
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|// check if the target rack has chosen too many nodes
name|String
name|rackname
init|=
name|node
operator|.
name|getNetworkLocation
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|results
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|result
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rackname
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|counter
operator|>
name|maxTargetPerLoc
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|threadLocalBuilder
operator|.
name|get
argument_list|()
operator|.
name|append
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Node "
argument_list|)
operator|.
name|append
argument_list|(
name|NodeBase
operator|.
name|getPath
argument_list|(
name|node
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" is not chosen because the rack has too many chosen nodes "
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/* Return a pipeline of nodes.    * The pipeline is formed finding a shortest path that     * starts from the writer and traverses all<i>nodes</i>    * This is basically a traveling salesman problem.    */
DECL|method|getPipeline ( DatanodeDescriptor writer, DatanodeDescriptor[] nodes)
specifier|private
name|DatanodeDescriptor
index|[]
name|getPipeline
parameter_list|(
name|DatanodeDescriptor
name|writer
parameter_list|,
name|DatanodeDescriptor
index|[]
name|nodes
parameter_list|)
block|{
if|if
condition|(
name|nodes
operator|.
name|length
operator|==
literal|0
condition|)
return|return
name|nodes
return|;
synchronized|synchronized
init|(
name|clusterMap
init|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
operator|||
operator|!
name|clusterMap
operator|.
name|contains
argument_list|(
name|writer
argument_list|)
condition|)
block|{
name|writer
operator|=
name|nodes
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
init|;
name|index
operator|<
name|nodes
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|DatanodeDescriptor
name|shortestNode
init|=
name|nodes
index|[
name|index
index|]
decl_stmt|;
name|int
name|shortestDistance
init|=
name|clusterMap
operator|.
name|getDistance
argument_list|(
name|writer
argument_list|,
name|shortestNode
argument_list|)
decl_stmt|;
name|int
name|shortestIndex
init|=
name|index
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|index
operator|+
literal|1
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DatanodeDescriptor
name|currentNode
init|=
name|nodes
index|[
name|i
index|]
decl_stmt|;
name|int
name|currentDistance
init|=
name|clusterMap
operator|.
name|getDistance
argument_list|(
name|writer
argument_list|,
name|currentNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|shortestDistance
operator|>
name|currentDistance
condition|)
block|{
name|shortestDistance
operator|=
name|currentDistance
expr_stmt|;
name|shortestNode
operator|=
name|currentNode
expr_stmt|;
name|shortestIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|//switch position index& shortestIndex
if|if
condition|(
name|index
operator|!=
name|shortestIndex
condition|)
block|{
name|nodes
index|[
name|shortestIndex
index|]
operator|=
name|nodes
index|[
name|index
index|]
expr_stmt|;
name|nodes
index|[
name|index
index|]
operator|=
name|shortestNode
expr_stmt|;
block|}
name|writer
operator|=
name|shortestNode
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
DECL|method|verifyBlockPlacement (String srcPath, LocatedBlock lBlk, int minRacks)
specifier|public
name|int
name|verifyBlockPlacement
parameter_list|(
name|String
name|srcPath
parameter_list|,
name|LocatedBlock
name|lBlk
parameter_list|,
name|int
name|minRacks
parameter_list|)
block|{
name|DatanodeInfo
index|[]
name|locs
init|=
name|lBlk
operator|.
name|getLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|locs
operator|==
literal|null
condition|)
name|locs
operator|=
operator|new
name|DatanodeInfo
index|[
literal|0
index|]
expr_stmt|;
name|int
name|numRacks
init|=
name|clusterMap
operator|.
name|getNumOfRacks
argument_list|()
decl_stmt|;
if|if
condition|(
name|numRacks
operator|<=
literal|1
condition|)
comment|// only one rack
return|return
literal|0
return|;
name|minRacks
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minRacks
argument_list|,
name|numRacks
argument_list|)
expr_stmt|;
comment|// 1. Check that all locations are different.
comment|// 2. Count locations on different racks.
name|Set
argument_list|<
name|String
argument_list|>
name|racks
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|dn
range|:
name|locs
control|)
name|racks
operator|.
name|add
argument_list|(
name|dn
operator|.
name|getNetworkLocation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|minRacks
operator|-
name|racks
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|chooseReplicaToDelete (FSInodeInfo inode, Block block, short replicationFactor, Collection<DatanodeDescriptor> first, Collection<DatanodeDescriptor> second)
specifier|public
name|DatanodeDescriptor
name|chooseReplicaToDelete
parameter_list|(
name|FSInodeInfo
name|inode
parameter_list|,
name|Block
name|block
parameter_list|,
name|short
name|replicationFactor
parameter_list|,
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|first
parameter_list|,
name|Collection
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|second
parameter_list|)
block|{
name|long
name|minSpace
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|DatanodeDescriptor
name|cur
init|=
literal|null
decl_stmt|;
comment|// pick replica from the first Set. If first is empty, then pick replicas
comment|// from second set.
name|Iterator
argument_list|<
name|DatanodeDescriptor
argument_list|>
name|iter
init|=
name|first
operator|.
name|isEmpty
argument_list|()
condition|?
name|second
operator|.
name|iterator
argument_list|()
else|:
name|first
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// pick node with least free space
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DatanodeDescriptor
name|node
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|free
init|=
name|node
operator|.
name|getRemaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|minSpace
operator|>
name|free
condition|)
block|{
name|minSpace
operator|=
name|free
expr_stmt|;
name|cur
operator|=
name|node
expr_stmt|;
block|}
block|}
return|return
name|cur
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setPreferLocalNode (boolean prefer)
name|void
name|setPreferLocalNode
parameter_list|(
name|boolean
name|prefer
parameter_list|)
block|{
name|this
operator|.
name|preferLocalNode
operator|=
name|prefer
expr_stmt|;
block|}
block|}
end_class

end_unit

