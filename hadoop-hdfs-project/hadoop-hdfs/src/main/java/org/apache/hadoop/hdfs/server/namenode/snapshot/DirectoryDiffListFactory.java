begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|DirectoryWithSnapshotFeature
operator|.
name|DirectoryDiff
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntFunction
import|;
end_import

begin_comment
comment|/** For creating {@link DiffList} for {@link DirectoryDiff}. */
end_comment

begin_class
DECL|class|DirectoryDiffListFactory
specifier|public
specifier|abstract
class|class
name|DirectoryDiffListFactory
block|{
DECL|method|createDiffList (int capacity)
specifier|public
specifier|static
name|DiffList
argument_list|<
name|DirectoryDiff
argument_list|>
name|createDiffList
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
return|return
name|constructor
operator|.
name|apply
argument_list|(
name|capacity
argument_list|)
return|;
block|}
DECL|method|init (int skipInterval, int maxLevels, Log log)
specifier|public
specifier|static
name|void
name|init
parameter_list|(
name|int
name|skipInterval
parameter_list|,
name|int
name|maxLevels
parameter_list|,
name|Log
name|log
parameter_list|)
block|{
if|if
condition|(
name|maxLevels
operator|>
literal|0
condition|)
block|{
name|constructor
operator|=
name|c
lambda|->
operator|new
name|DiffListBySkipList
argument_list|(
name|c
argument_list|,
name|skipInterval
argument_list|,
name|maxLevels
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"SkipList is enabled with skipInterval="
operator|+
name|skipInterval
operator|+
literal|", maxLevels="
operator|+
name|maxLevels
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constructor
operator|=
name|c
lambda|->
operator|new
name|DiffListByArrayList
argument_list|<>
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"SkipList is disabled"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|constructor
specifier|private
specifier|static
specifier|volatile
name|IntFunction
argument_list|<
name|DiffList
argument_list|<
name|DirectoryDiff
argument_list|>
argument_list|>
name|constructor
init|=
name|c
lambda|->
operator|new
name|DiffListByArrayList
argument_list|<>
argument_list|(
name|c
argument_list|)
decl_stmt|;
DECL|method|DirectoryDiffListFactory ()
specifier|private
name|DirectoryDiffListFactory
parameter_list|()
block|{}
block|}
end_class

end_unit

