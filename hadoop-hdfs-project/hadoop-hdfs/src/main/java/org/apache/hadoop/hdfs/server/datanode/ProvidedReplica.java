begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|BoundedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
operator|.
name|ScanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|LengthInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsDatasetUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|ReplicaRecoveryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This abstract class is used as a base class for provided replicas.  */
end_comment

begin_class
DECL|class|ProvidedReplica
specifier|public
specifier|abstract
class|class
name|ProvidedReplica
extends|extends
name|ReplicaInfo
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProvidedReplica
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Null checksum information for provided replicas.
comment|// Shared across all replicas.
DECL|field|NULL_CHECKSUM_ARRAY
specifier|static
specifier|final
name|byte
index|[]
name|NULL_CHECKSUM_ARRAY
init|=
name|FsDatasetUtil
operator|.
name|createNullChecksumByteArray
argument_list|()
decl_stmt|;
DECL|field|fileURI
specifier|private
name|URI
name|fileURI
decl_stmt|;
DECL|field|fileOffset
specifier|private
name|long
name|fileOffset
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|remoteFS
specifier|private
name|FileSystem
name|remoteFS
decl_stmt|;
comment|/**    * Constructor.    * @param blockId block id    * @param fileURI remote URI this block is to be read from    * @param fileOffset the offset in the remote URI    * @param blockLen the length of the block    * @param genStamp the generation stamp of the block    * @param volume the volume this block belongs to    */
DECL|method|ProvidedReplica (long blockId, URI fileURI, long fileOffset, long blockLen, long genStamp, FsVolumeSpi volume, Configuration conf)
specifier|public
name|ProvidedReplica
parameter_list|(
name|long
name|blockId
parameter_list|,
name|URI
name|fileURI
parameter_list|,
name|long
name|fileOffset
parameter_list|,
name|long
name|blockLen
parameter_list|,
name|long
name|genStamp
parameter_list|,
name|FsVolumeSpi
name|volume
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|volume
argument_list|,
name|blockId
argument_list|,
name|blockLen
argument_list|,
name|genStamp
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileURI
operator|=
name|fileURI
expr_stmt|;
name|this
operator|.
name|fileOffset
operator|=
name|fileOffset
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
try|try
block|{
name|this
operator|.
name|remoteFS
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|fileURI
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to obtain filesystem for "
operator|+
name|fileURI
argument_list|)
expr_stmt|;
name|this
operator|.
name|remoteFS
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|ProvidedReplica (ProvidedReplica r)
specifier|public
name|ProvidedReplica
parameter_list|(
name|ProvidedReplica
name|r
parameter_list|)
block|{
name|super
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileURI
operator|=
name|r
operator|.
name|fileURI
expr_stmt|;
name|this
operator|.
name|fileOffset
operator|=
name|r
operator|.
name|fileOffset
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|r
operator|.
name|conf
expr_stmt|;
try|try
block|{
name|this
operator|.
name|remoteFS
operator|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|fileURI
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|remoteFS
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBlockURI ()
specifier|public
name|URI
name|getBlockURI
parameter_list|()
block|{
return|return
name|this
operator|.
name|fileURI
return|;
block|}
annotation|@
name|Override
DECL|method|getDataInputStream (long seekOffset)
specifier|public
name|InputStream
name|getDataInputStream
parameter_list|(
name|long
name|seekOffset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|remoteFS
operator|!=
literal|null
condition|)
block|{
name|FSDataInputStream
name|ins
init|=
name|remoteFS
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|fileURI
argument_list|)
argument_list|)
decl_stmt|;
name|ins
operator|.
name|seek
argument_list|(
name|fileOffset
operator|+
name|seekOffset
argument_list|)
expr_stmt|;
return|return
operator|new
name|BoundedInputStream
argument_list|(
operator|new
name|FSDataInputStream
argument_list|(
name|ins
argument_list|)
argument_list|,
name|getBlockDataLength
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Remote filesystem for provided replica "
operator|+
name|this
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDataOutputStream (boolean append)
specifier|public
name|OutputStream
name|getDataOutputStream
parameter_list|(
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"OutputDataStream is not implemented for ProvidedReplica"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getMetadataURI ()
specifier|public
name|URI
name|getMetadataURI
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadataOutputStream (boolean append)
specifier|public
name|OutputStream
name|getMetadataOutputStream
parameter_list|(
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|blockDataExists ()
specifier|public
name|boolean
name|blockDataExists
parameter_list|()
block|{
if|if
condition|(
name|remoteFS
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|remoteFS
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|fileURI
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteBlockData ()
specifier|public
name|boolean
name|deleteBlockData
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not support deleting block data"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getBlockDataLength ()
specifier|public
name|long
name|getBlockDataLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|getNumBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMetadataInputStream (long offset)
specifier|public
name|LengthInputStream
name|getMetadataInputStream
parameter_list|(
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LengthInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|NULL_CHECKSUM_ARRAY
argument_list|)
argument_list|,
name|NULL_CHECKSUM_ARRAY
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|metadataExists ()
specifier|public
name|boolean
name|metadataExists
parameter_list|()
block|{
return|return
name|NULL_CHECKSUM_ARRAY
operator|==
literal|null
condition|?
literal|false
else|:
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|deleteMetadata ()
specifier|public
name|boolean
name|deleteMetadata
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not support deleting metadata"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getMetadataLength ()
specifier|public
name|long
name|getMetadataLength
parameter_list|()
block|{
return|return
name|NULL_CHECKSUM_ARRAY
operator|==
literal|null
condition|?
literal|0
else|:
name|NULL_CHECKSUM_ARRAY
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|renameMeta (URI destURI)
specifier|public
name|boolean
name|renameMeta
parameter_list|(
name|URI
name|destURI
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not support renaming metadata"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|renameData (URI destURI)
specifier|public
name|boolean
name|renameData
parameter_list|(
name|URI
name|destURI
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not support renaming data"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getPinning (LocalFileSystem localFS)
specifier|public
name|boolean
name|getPinning
parameter_list|(
name|LocalFileSystem
name|localFS
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setPinning (LocalFileSystem localFS)
specifier|public
name|void
name|setPinning
parameter_list|(
name|LocalFileSystem
name|localFS
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not support pinning"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|bumpReplicaGS (long newGS)
specifier|public
name|void
name|bumpReplicaGS
parameter_list|(
name|long
name|newGS
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|breakHardLinksIfNeeded ()
specifier|public
name|boolean
name|breakHardLinksIfNeeded
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|createInfo ()
specifier|public
name|ReplicaRecoveryInfo
name|createInfo
parameter_list|()
throws|throws
name|UnsupportedOperationException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not yet support writes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|compareWith (ScanInfo info)
specifier|public
name|int
name|compareWith
parameter_list|(
name|ScanInfo
name|info
parameter_list|)
block|{
comment|//local scanning cannot find any provided blocks.
if|if
condition|(
name|info
operator|.
name|getFileRegion
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|FileRegion
argument_list|(
name|this
operator|.
name|getBlockId
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|fileURI
argument_list|)
argument_list|,
name|fileOffset
argument_list|,
name|this
operator|.
name|getNumBytes
argument_list|()
argument_list|,
name|this
operator|.
name|getGenerationStamp
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|info
operator|.
name|getBlockLength
argument_list|()
operator|-
name|getNumBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|truncateBlock (long newLength)
specifier|public
name|void
name|truncateBlock
parameter_list|(
name|long
name|newLength
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not yet support truncate"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|updateWithReplica (StorageLocation replicaLocation)
specifier|public
name|void
name|updateWithReplica
parameter_list|(
name|StorageLocation
name|replicaLocation
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not yet support update"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|copyMetadata (URI destination)
specifier|public
name|void
name|copyMetadata
parameter_list|(
name|URI
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not yet support copy metadata"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|copyBlockdata (URI destination)
specifier|public
name|void
name|copyBlockdata
parameter_list|(
name|URI
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"ProvidedReplica does not yet support copy data"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

