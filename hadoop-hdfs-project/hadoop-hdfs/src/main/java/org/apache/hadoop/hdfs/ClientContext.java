begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
operator|.
name|Conf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|DomainSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|shortcircuit
operator|.
name|ShortCircuitCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ByteArrayManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * ClientContext contains context information for a client.  *   * This allows us to share caches such as the socket cache across  * DFSClient instances.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ClientContext
specifier|public
class|class
name|ClientContext
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Global map of context names to caches contexts.    */
DECL|field|CACHES
specifier|private
specifier|final
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|ClientContext
argument_list|>
name|CACHES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ClientContext
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Name of context.    */
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**    * String representation of the configuration.    */
DECL|field|confString
specifier|private
specifier|final
name|String
name|confString
decl_stmt|;
comment|/**    * Caches short-circuit file descriptors, mmap regions.    */
DECL|field|shortCircuitCache
specifier|private
specifier|final
name|ShortCircuitCache
name|shortCircuitCache
decl_stmt|;
comment|/**    * Caches TCP and UNIX domain sockets for reuse.    */
DECL|field|peerCache
specifier|private
specifier|final
name|PeerCache
name|peerCache
decl_stmt|;
comment|/**    * Stores information about socket paths.    */
DECL|field|domainSocketFactory
specifier|private
specifier|final
name|DomainSocketFactory
name|domainSocketFactory
decl_stmt|;
comment|/**    * True if we should use the legacy BlockReaderLocal.    */
DECL|field|useLegacyBlockReaderLocal
specifier|private
specifier|final
name|boolean
name|useLegacyBlockReaderLocal
decl_stmt|;
comment|/**    * True if the legacy BlockReaderLocal is disabled.    *    * The legacy block reader local gets disabled completely whenever there is an    * error or miscommunication.  The new block reader local code handles this    * case more gracefully inside DomainSocketFactory.    */
DECL|field|disableLegacyBlockReaderLocal
specifier|private
specifier|volatile
name|boolean
name|disableLegacyBlockReaderLocal
init|=
literal|false
decl_stmt|;
comment|/** Creating byte[] for {@link DFSOutputStream}. */
DECL|field|byteArrayManager
specifier|private
specifier|final
name|ByteArrayManager
name|byteArrayManager
decl_stmt|;
comment|/**    * Whether or not we complained about a DFSClient fetching a CacheContext that    * didn't match its config values yet.    */
DECL|field|printedConfWarning
specifier|private
name|boolean
name|printedConfWarning
init|=
literal|false
decl_stmt|;
DECL|method|ClientContext (String name, Conf conf)
specifier|private
name|ClientContext
parameter_list|(
name|String
name|name
parameter_list|,
name|Conf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|confString
operator|=
name|confAsString
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|shortCircuitCache
operator|=
operator|new
name|ShortCircuitCache
argument_list|(
name|conf
operator|.
name|shortCircuitStreamsCacheSize
argument_list|,
name|conf
operator|.
name|shortCircuitStreamsCacheExpiryMs
argument_list|,
name|conf
operator|.
name|shortCircuitMmapCacheSize
argument_list|,
name|conf
operator|.
name|shortCircuitMmapCacheExpiryMs
argument_list|,
name|conf
operator|.
name|shortCircuitMmapCacheRetryTimeout
argument_list|,
name|conf
operator|.
name|shortCircuitCacheStaleThresholdMs
argument_list|,
name|conf
operator|.
name|shortCircuitSharedMemoryWatcherInterruptCheckMs
argument_list|)
expr_stmt|;
name|this
operator|.
name|peerCache
operator|=
operator|new
name|PeerCache
argument_list|(
name|conf
operator|.
name|socketCacheCapacity
argument_list|,
name|conf
operator|.
name|socketCacheExpiry
argument_list|)
expr_stmt|;
name|this
operator|.
name|useLegacyBlockReaderLocal
operator|=
name|conf
operator|.
name|useLegacyBlockReaderLocal
expr_stmt|;
name|this
operator|.
name|domainSocketFactory
operator|=
operator|new
name|DomainSocketFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|byteArrayManager
operator|=
name|ByteArrayManager
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|writeByteArrayManagerConf
argument_list|)
expr_stmt|;
block|}
DECL|method|confAsString (Conf conf)
specifier|public
specifier|static
name|String
name|confAsString
parameter_list|(
name|Conf
name|conf
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"shortCircuitStreamsCacheSize = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|shortCircuitStreamsCacheSize
argument_list|)
operator|.
name|append
argument_list|(
literal|", shortCircuitStreamsCacheExpiryMs = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|shortCircuitStreamsCacheExpiryMs
argument_list|)
operator|.
name|append
argument_list|(
literal|", shortCircuitMmapCacheSize = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|shortCircuitMmapCacheSize
argument_list|)
operator|.
name|append
argument_list|(
literal|", shortCircuitMmapCacheExpiryMs = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|shortCircuitMmapCacheExpiryMs
argument_list|)
operator|.
name|append
argument_list|(
literal|", shortCircuitMmapCacheRetryTimeout = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|shortCircuitMmapCacheRetryTimeout
argument_list|)
operator|.
name|append
argument_list|(
literal|", shortCircuitCacheStaleThresholdMs = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|shortCircuitCacheStaleThresholdMs
argument_list|)
operator|.
name|append
argument_list|(
literal|", socketCacheCapacity = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|socketCacheCapacity
argument_list|)
operator|.
name|append
argument_list|(
literal|", socketCacheExpiry = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|socketCacheExpiry
argument_list|)
operator|.
name|append
argument_list|(
literal|", shortCircuitLocalReads = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|shortCircuitLocalReads
argument_list|)
operator|.
name|append
argument_list|(
literal|", useLegacyBlockReaderLocal = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|useLegacyBlockReaderLocal
argument_list|)
operator|.
name|append
argument_list|(
literal|", domainSocketDataTraffic = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|domainSocketDataTraffic
argument_list|)
operator|.
name|append
argument_list|(
literal|", shortCircuitSharedMemoryWatcherInterruptCheckMs = "
argument_list|)
operator|.
name|append
argument_list|(
name|conf
operator|.
name|shortCircuitSharedMemoryWatcherInterruptCheckMs
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|get (String name, Conf conf)
specifier|public
specifier|static
name|ClientContext
name|get
parameter_list|(
name|String
name|name
parameter_list|,
name|Conf
name|conf
parameter_list|)
block|{
name|ClientContext
name|context
decl_stmt|;
synchronized|synchronized
init|(
name|ClientContext
operator|.
name|class
init|)
block|{
name|context
operator|=
name|CACHES
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|ClientContext
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|CACHES
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|printConfWarningIfNeeded
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|context
return|;
block|}
comment|/**    * Get a client context, from a Configuration object.    *    * This method is less efficient than the version which takes a DFSClient#Conf    * object, and should be mostly used by tests.    */
annotation|@
name|VisibleForTesting
DECL|method|getFromConf (Configuration conf)
specifier|public
specifier|static
name|ClientContext
name|getFromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_CONTEXT_DEFAULT
argument_list|)
argument_list|,
operator|new
name|DFSClient
operator|.
name|Conf
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
DECL|method|printConfWarningIfNeeded (Conf conf)
specifier|private
name|void
name|printConfWarningIfNeeded
parameter_list|(
name|Conf
name|conf
parameter_list|)
block|{
name|String
name|existing
init|=
name|this
operator|.
name|getConfString
argument_list|()
decl_stmt|;
name|String
name|requested
init|=
name|confAsString
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|existing
operator|.
name|equals
argument_list|(
name|requested
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|printedConfWarning
condition|)
block|{
name|printedConfWarning
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Existing client context '"
operator|+
name|name
operator|+
literal|"' does not match "
operator|+
literal|"requested configuration.  Existing: "
operator|+
name|existing
operator|+
literal|", Requested: "
operator|+
name|requested
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getConfString ()
specifier|public
name|String
name|getConfString
parameter_list|()
block|{
return|return
name|confString
return|;
block|}
DECL|method|getShortCircuitCache ()
specifier|public
name|ShortCircuitCache
name|getShortCircuitCache
parameter_list|()
block|{
return|return
name|shortCircuitCache
return|;
block|}
DECL|method|getPeerCache ()
specifier|public
name|PeerCache
name|getPeerCache
parameter_list|()
block|{
return|return
name|peerCache
return|;
block|}
DECL|method|getUseLegacyBlockReaderLocal ()
specifier|public
name|boolean
name|getUseLegacyBlockReaderLocal
parameter_list|()
block|{
return|return
name|useLegacyBlockReaderLocal
return|;
block|}
DECL|method|getDisableLegacyBlockReaderLocal ()
specifier|public
name|boolean
name|getDisableLegacyBlockReaderLocal
parameter_list|()
block|{
return|return
name|disableLegacyBlockReaderLocal
return|;
block|}
DECL|method|setDisableLegacyBlockReaderLocal ()
specifier|public
name|void
name|setDisableLegacyBlockReaderLocal
parameter_list|()
block|{
name|disableLegacyBlockReaderLocal
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getDomainSocketFactory ()
specifier|public
name|DomainSocketFactory
name|getDomainSocketFactory
parameter_list|()
block|{
return|return
name|domainSocketFactory
return|;
block|}
DECL|method|getByteArrayManager ()
specifier|public
name|ByteArrayManager
name|getByteArrayManager
parameter_list|()
block|{
return|return
name|byteArrayManager
return|;
block|}
block|}
end_class

end_unit

