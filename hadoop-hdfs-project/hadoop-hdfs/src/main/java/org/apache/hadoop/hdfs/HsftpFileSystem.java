begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * An implementation of a protocol for accessing filesystems over HTTPS. The  * following implementation provides a limited, read-only interface to a  * filesystem over HTTPS.  *   * @see org.apache.hadoop.hdfs.server.namenode.ListPathsServlet  * @see org.apache.hadoop.hdfs.server.namenode.FileDataServlet  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|HsftpFileSystem
specifier|public
class|class
name|HsftpFileSystem
extends|extends
name|HftpFileSystem
block|{
DECL|field|MM_SECONDS_PER_DAY
specifier|private
specifier|static
specifier|final
name|long
name|MM_SECONDS_PER_DAY
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
decl_stmt|;
DECL|field|ExpWarnDays
specifier|private
specifier|volatile
name|int
name|ExpWarnDays
init|=
literal|0
decl_stmt|;
comment|/**    * Return the protocol scheme for the FileSystem.    *<p/>    *    * @return<code>hsftp</code>    */
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"hsftp"
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setupSsl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ExpWarnDays
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"ssl.expiration.warn.days"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set up SSL resources    *     * @throws IOException    */
DECL|method|setupSsl (Configuration conf)
specifier|private
specifier|static
name|void
name|setupSsl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|sslConf
init|=
operator|new
name|HdfsConfiguration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|sslConf
operator|.
name|addResource
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SSLContext
name|sc
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"SSL"
argument_list|)
decl_stmt|;
name|KeyManager
index|[]
name|kms
init|=
literal|null
decl_stmt|;
name|TrustManager
index|[]
name|tms
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.client.keystore.location"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// initialize default key manager with keystore file and pass
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
literal|"SunX509"
argument_list|)
decl_stmt|;
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.client.keystore.type"
argument_list|,
literal|"JKS"
argument_list|)
argument_list|)
decl_stmt|;
name|char
index|[]
name|ksPass
init|=
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.client.keystore.password"
argument_list|,
literal|"changeit"
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.client.keystore.location"
argument_list|,
literal|"keystore.jks"
argument_list|)
argument_list|)
expr_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|fis
argument_list|,
name|ksPass
argument_list|)
expr_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.client.keystore.keypassword"
argument_list|,
literal|"changeit"
argument_list|)
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|kms
operator|=
name|kmf
operator|.
name|getKeyManagers
argument_list|()
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fis
operator|=
literal|null
expr_stmt|;
block|}
comment|// initialize default trust manager with truststore file and pass
if|if
condition|(
name|sslConf
operator|.
name|getBoolean
argument_list|(
literal|"ssl.client.do.not.authenticate.server"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// by pass trustmanager validation
name|tms
operator|=
operator|new
name|DummyTrustManager
index|[]
block|{
operator|new
name|DummyTrustManager
argument_list|()
block|}
expr_stmt|;
block|}
else|else
block|{
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
literal|"PKIX"
argument_list|)
decl_stmt|;
name|KeyStore
name|ts
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.client.truststore.type"
argument_list|,
literal|"JKS"
argument_list|)
argument_list|)
decl_stmt|;
name|char
index|[]
name|tsPass
init|=
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.client.truststore.password"
argument_list|,
literal|"changeit"
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.client.truststore.location"
argument_list|,
literal|"truststore.jks"
argument_list|)
argument_list|)
expr_stmt|;
name|ts
operator|.
name|load
argument_list|(
name|fis
argument_list|,
name|tsPass
argument_list|)
expr_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|tms
operator|=
name|tmf
operator|.
name|getTrustManagers
argument_list|()
expr_stmt|;
block|}
name|sc
operator|.
name|init
argument_list|(
name|kms
argument_list|,
name|tms
argument_list|,
operator|new
name|java
operator|.
name|security
operator|.
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|HttpsURLConnection
operator|.
name|setDefaultSSLSocketFactory
argument_list|(
name|sc
operator|.
name|getSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not initialize SSLContext"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getDefaultPort ()
specifier|protected
name|int
name|getDefaultPort
parameter_list|()
block|{
return|return
name|getDefaultSecurePort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNamenodeSecureAddr (URI uri)
specifier|protected
name|InetSocketAddress
name|getNamenodeSecureAddr
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
return|return
name|getNamenodeAddr
argument_list|(
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNamenodeUri (URI uri)
specifier|protected
name|URI
name|getNamenodeUri
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
return|return
name|getNamenodeSecureUri
argument_list|(
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|openConnection (String path, String query)
specifier|protected
name|HttpURLConnection
name|openConnection
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|query
operator|=
name|addDelegationTokenParam
argument_list|(
name|query
argument_list|)
expr_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"https"
argument_list|,
name|nnUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|nnUri
operator|.
name|getPort
argument_list|()
argument_list|,
name|path
operator|+
literal|'?'
operator|+
name|query
argument_list|)
decl_stmt|;
name|HttpsURLConnection
name|conn
decl_stmt|;
name|conn
operator|=
operator|(
name|HttpsURLConnection
operator|)
name|connectionFactory
operator|.
name|openConnection
argument_list|(
name|url
argument_list|)
expr_stmt|;
comment|// bypass hostname verification
name|conn
operator|.
name|setHostnameVerifier
argument_list|(
operator|new
name|DummyHostnameVerifier
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// check cert expiration date
specifier|final
name|int
name|warnDays
init|=
name|ExpWarnDays
decl_stmt|;
if|if
condition|(
name|warnDays
operator|>
literal|0
condition|)
block|{
comment|// make sure only check once
name|ExpWarnDays
operator|=
literal|0
expr_stmt|;
name|long
name|expTimeThreshold
init|=
name|warnDays
operator|*
name|MM_SECONDS_PER_DAY
operator|+
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|X509Certificate
index|[]
name|clientCerts
init|=
operator|(
name|X509Certificate
index|[]
operator|)
name|conn
operator|.
name|getLocalCertificates
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientCerts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|X509Certificate
name|cert
range|:
name|clientCerts
control|)
block|{
name|long
name|expTime
init|=
name|cert
operator|.
name|getNotAfter
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|expTime
operator|<
name|expTimeThreshold
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n Client certificate "
operator|+
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dayOffSet
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|expTime
operator|-
name|Time
operator|.
name|now
argument_list|()
operator|)
operator|/
name|MM_SECONDS_PER_DAY
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" have "
operator|+
name|dayOffSet
operator|+
literal|" days to expire"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|HttpURLConnection
operator|)
name|conn
return|;
block|}
comment|/**    * Dummy hostname verifier that is used to bypass hostname checking    */
DECL|class|DummyHostnameVerifier
specifier|protected
specifier|static
class|class
name|DummyHostnameVerifier
implements|implements
name|HostnameVerifier
block|{
annotation|@
name|Override
DECL|method|verify (String hostname, SSLSession session)
specifier|public
name|boolean
name|verify
parameter_list|(
name|String
name|hostname
parameter_list|,
name|SSLSession
name|session
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Dummy trustmanager that is used to trust all server certificates    */
DECL|class|DummyTrustManager
specifier|protected
specifier|static
class|class
name|DummyTrustManager
implements|implements
name|X509TrustManager
block|{
annotation|@
name|Override
DECL|method|checkClientTrusted (X509Certificate[] chain, String authType)
specifier|public
name|void
name|checkClientTrusted
parameter_list|(
name|X509Certificate
index|[]
name|chain
parameter_list|,
name|String
name|authType
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|checkServerTrusted (X509Certificate[] chain, String authType)
specifier|public
name|void
name|checkServerTrusted
parameter_list|(
name|X509Certificate
index|[]
name|chain
parameter_list|,
name|String
name|authType
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getAcceptedIssuers ()
specifier|public
name|X509Certificate
index|[]
name|getAcceptedIssuers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

