begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.protocolR23Compatible
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocolR23Compatible
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Contains a list of paths corresponding to corrupt files and a cookie  * used for iterative calls to NameNode.listCorruptFileBlocks.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|CorruptFileBlocksWritable
specifier|public
class|class
name|CorruptFileBlocksWritable
implements|implements
name|Writable
block|{
DECL|field|files
specifier|private
name|String
index|[]
name|files
decl_stmt|;
DECL|field|cookie
specifier|private
name|String
name|cookie
decl_stmt|;
specifier|static
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
DECL|method|convertCorruptFileBlocks (CorruptFileBlocksWritable c)
name|convertCorruptFileBlocks
parameter_list|(
name|CorruptFileBlocksWritable
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
argument_list|(
name|c
operator|.
name|getFiles
argument_list|()
argument_list|,
name|c
operator|.
name|getCookie
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertCorruptFilesBlocks ( org.apache.hadoop.hdfs.protocol.CorruptFileBlocks c)
specifier|public
specifier|static
name|CorruptFileBlocksWritable
name|convertCorruptFilesBlocks
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|CorruptFileBlocks
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|CorruptFileBlocksWritable
argument_list|(
name|c
operator|.
name|getFiles
argument_list|()
argument_list|,
name|c
operator|.
name|getCookie
argument_list|()
argument_list|)
return|;
block|}
DECL|method|CorruptFileBlocksWritable ()
specifier|public
name|CorruptFileBlocksWritable
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|CorruptFileBlocksWritable (String[] files, String cookie)
specifier|public
name|CorruptFileBlocksWritable
parameter_list|(
name|String
index|[]
name|files
parameter_list|,
name|String
name|cookie
parameter_list|)
block|{
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
name|this
operator|.
name|cookie
operator|=
name|cookie
expr_stmt|;
block|}
DECL|method|getFiles ()
specifier|public
name|String
index|[]
name|getFiles
parameter_list|()
block|{
return|return
name|files
return|;
block|}
DECL|method|getCookie ()
specifier|public
name|String
name|getCookie
parameter_list|()
block|{
return|return
name|cookie
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|fileCount
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|files
operator|=
operator|new
name|String
index|[
name|fileCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileCount
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|cookie
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|cookie
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

