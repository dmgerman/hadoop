begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnresolvedLinkException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|PermissionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|QuotaExceededException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|SnapshotAccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|INodeReference
operator|.
name|WithCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeDirectorySnapshottable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeDirectoryWithSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeFileUnderConstructionWithSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|INodeFileWithSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|snapshot
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|ReadOnlyList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Directory INode class.  */
end_comment

begin_class
DECL|class|INodeDirectory
specifier|public
class|class
name|INodeDirectory
extends|extends
name|INodeWithAdditionalFields
implements|implements
name|INodeDirectoryAttributes
block|{
comment|/** Cast INode to INodeDirectory. */
DECL|method|valueOf (INode inode, Object path )
specifier|public
specifier|static
name|INodeDirectory
name|valueOf
parameter_list|(
name|INode
name|inode
parameter_list|,
name|Object
name|path
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|PathIsNotDirectoryException
block|{
if|if
condition|(
name|inode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Directory does not exist: "
operator|+
name|DFSUtil
operator|.
name|path2String
argument_list|(
name|path
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|inode
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsNotDirectoryException
argument_list|(
name|DFSUtil
operator|.
name|path2String
argument_list|(
name|path
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|inode
operator|.
name|asDirectory
argument_list|()
return|;
block|}
DECL|field|DEFAULT_FILES_PER_DIRECTORY
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_FILES_PER_DIRECTORY
init|=
literal|5
decl_stmt|;
DECL|field|ROOT_NAME
specifier|final
specifier|static
name|byte
index|[]
name|ROOT_NAME
init|=
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|children
specifier|private
name|List
argument_list|<
name|INode
argument_list|>
name|children
init|=
literal|null
decl_stmt|;
comment|/** constructor */
DECL|method|INodeDirectory (long id, byte[] name, PermissionStatus permissions, long mtime)
specifier|public
name|INodeDirectory
parameter_list|(
name|long
name|id
parameter_list|,
name|byte
index|[]
name|name
parameter_list|,
name|PermissionStatus
name|permissions
parameter_list|,
name|long
name|mtime
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|permissions
argument_list|,
name|mtime
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy constructor    * @param other The INodeDirectory to be copied    * @param adopt Indicate whether or not need to set the parent field of child    *              INodes to the new node    */
DECL|method|INodeDirectory (INodeDirectory other, boolean adopt)
specifier|public
name|INodeDirectory
parameter_list|(
name|INodeDirectory
name|other
parameter_list|,
name|boolean
name|adopt
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|other
operator|.
name|children
expr_stmt|;
if|if
condition|(
name|adopt
operator|&&
name|this
operator|.
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** @return true unconditionally. */
annotation|@
name|Override
DECL|method|isDirectory ()
specifier|public
specifier|final
name|boolean
name|isDirectory
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/** @return this object. */
annotation|@
name|Override
DECL|method|asDirectory ()
specifier|public
specifier|final
name|INodeDirectory
name|asDirectory
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/** Is this a snapshottable directory? */
DECL|method|isSnapshottable ()
specifier|public
name|boolean
name|isSnapshottable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|searchChildren (byte[] name)
specifier|private
name|int
name|searchChildren
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
return|return
name|children
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|Collections
operator|.
name|binarySearch
argument_list|(
name|children
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Remove the specified child from this directory.    *     * @param child the child inode to be removed    * @param latest See {@link INode#recordModification(Snapshot, INodeMap)}.    */
DECL|method|removeChild (INode child, Snapshot latest, final INodeMap inodeMap)
specifier|public
name|boolean
name|removeChild
parameter_list|(
name|INode
name|child
parameter_list|,
name|Snapshot
name|latest
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
if|if
condition|(
name|isInLatestSnapshot
argument_list|(
name|latest
argument_list|)
condition|)
block|{
return|return
name|replaceSelf4INodeDirectoryWithSnapshot
argument_list|(
name|inodeMap
argument_list|)
operator|.
name|removeChild
argument_list|(
name|child
argument_list|,
name|latest
argument_list|,
name|inodeMap
argument_list|)
return|;
block|}
return|return
name|removeChild
argument_list|(
name|child
argument_list|)
return|;
block|}
comment|/**     * Remove the specified child from this directory.    * The basic remove method which actually calls children.remove(..).    *    * @param child the child inode to be removed    *     * @return true if the child is removed; false if the child is not found.    */
DECL|method|removeChild (final INode child)
specifier|protected
specifier|final
name|boolean
name|removeChild
parameter_list|(
specifier|final
name|INode
name|child
parameter_list|)
block|{
specifier|final
name|int
name|i
init|=
name|searchChildren
argument_list|(
name|child
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|INode
name|removed
init|=
name|children
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|removed
operator|==
name|child
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Replace itself with {@link INodeDirectoryWithQuota} or    * {@link INodeDirectoryWithSnapshot} depending on the latest snapshot.    */
DECL|method|replaceSelf4Quota (final Snapshot latest, final long nsQuota, final long dsQuota, final INodeMap inodeMap)
name|INodeDirectoryWithQuota
name|replaceSelf4Quota
parameter_list|(
specifier|final
name|Snapshot
name|latest
parameter_list|,
specifier|final
name|long
name|nsQuota
parameter_list|,
specifier|final
name|long
name|dsQuota
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
operator|(
name|this
operator|instanceof
name|INodeDirectoryWithQuota
operator|)
argument_list|,
literal|"this is already an INodeDirectoryWithQuota, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isInLatestSnapshot
argument_list|(
name|latest
argument_list|)
condition|)
block|{
specifier|final
name|INodeDirectoryWithQuota
name|q
init|=
operator|new
name|INodeDirectoryWithQuota
argument_list|(
name|this
argument_list|,
literal|true
argument_list|,
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
decl_stmt|;
name|replaceSelf
argument_list|(
name|q
argument_list|,
name|inodeMap
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
else|else
block|{
specifier|final
name|INodeDirectoryWithSnapshot
name|s
init|=
operator|new
name|INodeDirectoryWithSnapshot
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|s
operator|.
name|setQuota
argument_list|(
name|nsQuota
argument_list|,
name|dsQuota
argument_list|)
expr_stmt|;
return|return
name|replaceSelf
argument_list|(
name|s
argument_list|,
name|inodeMap
argument_list|)
operator|.
name|saveSelf2Snapshot
argument_list|(
name|latest
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/** Replace itself with an {@link INodeDirectorySnapshottable}. */
DECL|method|replaceSelf4INodeDirectorySnapshottable ( Snapshot latest, final INodeMap inodeMap)
specifier|public
name|INodeDirectorySnapshottable
name|replaceSelf4INodeDirectorySnapshottable
parameter_list|(
name|Snapshot
name|latest
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
operator|(
name|this
operator|instanceof
name|INodeDirectorySnapshottable
operator|)
argument_list|,
literal|"this is already an INodeDirectorySnapshottable, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
specifier|final
name|INodeDirectorySnapshottable
name|s
init|=
operator|new
name|INodeDirectorySnapshottable
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|replaceSelf
argument_list|(
name|s
argument_list|,
name|inodeMap
argument_list|)
operator|.
name|saveSelf2Snapshot
argument_list|(
name|latest
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/** Replace itself with an {@link INodeDirectoryWithSnapshot}. */
DECL|method|replaceSelf4INodeDirectoryWithSnapshot ( final INodeMap inodeMap)
specifier|public
name|INodeDirectoryWithSnapshot
name|replaceSelf4INodeDirectoryWithSnapshot
parameter_list|(
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
block|{
return|return
name|replaceSelf
argument_list|(
operator|new
name|INodeDirectoryWithSnapshot
argument_list|(
name|this
argument_list|)
argument_list|,
name|inodeMap
argument_list|)
return|;
block|}
comment|/** Replace itself with {@link INodeDirectory}. */
DECL|method|replaceSelf4INodeDirectory (final INodeMap inodeMap)
specifier|public
name|INodeDirectory
name|replaceSelf4INodeDirectory
parameter_list|(
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|getClass
argument_list|()
operator|!=
name|INodeDirectory
operator|.
name|class
argument_list|,
literal|"the class is already INodeDirectory, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|replaceSelf
argument_list|(
operator|new
name|INodeDirectory
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
argument_list|,
name|inodeMap
argument_list|)
return|;
block|}
comment|/** Replace itself with the given directory. */
DECL|method|replaceSelf (final N newDir, final INodeMap inodeMap)
specifier|private
specifier|final
parameter_list|<
name|N
extends|extends
name|INodeDirectory
parameter_list|>
name|N
name|replaceSelf
parameter_list|(
specifier|final
name|N
name|newDir
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
block|{
specifier|final
name|INodeReference
name|ref
init|=
name|getParentReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|ref
operator|.
name|setReferredINode
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|inodeMap
operator|!=
literal|null
condition|)
block|{
name|inodeMap
operator|.
name|put
argument_list|(
name|newDir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|INodeDirectory
name|parent
init|=
name|getParent
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|parent
operator|!=
literal|null
argument_list|,
literal|"parent is null, this=%s"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|parent
operator|.
name|replaceChild
argument_list|(
name|this
argument_list|,
name|newDir
argument_list|,
name|inodeMap
argument_list|)
expr_stmt|;
block|}
name|clear
argument_list|()
expr_stmt|;
return|return
name|newDir
return|;
block|}
comment|/** Replace the given child with a new child. */
DECL|method|replaceChild (INode oldChild, final INode newChild, final INodeMap inodeMap)
specifier|public
name|void
name|replaceChild
parameter_list|(
name|INode
name|oldChild
parameter_list|,
specifier|final
name|INode
name|newChild
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|children
argument_list|)
expr_stmt|;
specifier|final
name|int
name|i
init|=
name|searchChildren
argument_list|(
name|newChild
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|i
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|oldChild
operator|==
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|||
name|oldChild
operator|==
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
argument_list|)
expr_stmt|;
name|oldChild
operator|=
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldChild
operator|.
name|isReference
argument_list|()
operator|&&
operator|!
name|newChild
operator|.
name|isReference
argument_list|()
condition|)
block|{
comment|// replace the referred inode, e.g.,
comment|// INodeFileWithSnapshot -> INodeFileUnderConstructionWithSnapshot
specifier|final
name|INode
name|withCount
init|=
name|oldChild
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|withCount
operator|.
name|asReference
argument_list|()
operator|.
name|setReferredINode
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|oldChild
operator|.
name|isReference
argument_list|()
condition|)
block|{
comment|// both are reference nodes, e.g., DstReference -> WithName
specifier|final
name|INodeReference
operator|.
name|WithCount
name|withCount
init|=
operator|(
name|WithCount
operator|)
name|oldChild
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
decl_stmt|;
name|withCount
operator|.
name|removeReference
argument_list|(
name|oldChild
operator|.
name|asReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|children
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|newChild
argument_list|)
expr_stmt|;
block|}
comment|// update the inodeMap
if|if
condition|(
name|inodeMap
operator|!=
literal|null
condition|)
block|{
name|inodeMap
operator|.
name|put
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|replaceChild4ReferenceWithName (INode oldChild, Snapshot latest)
name|INodeReference
operator|.
name|WithName
name|replaceChild4ReferenceWithName
parameter_list|(
name|INode
name|oldChild
parameter_list|,
name|Snapshot
name|latest
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|latest
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldChild
operator|instanceof
name|INodeReference
operator|.
name|WithName
condition|)
block|{
return|return
operator|(
name|INodeReference
operator|.
name|WithName
operator|)
name|oldChild
return|;
block|}
specifier|final
name|INodeReference
operator|.
name|WithCount
name|withCount
decl_stmt|;
if|if
condition|(
name|oldChild
operator|.
name|isReference
argument_list|()
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|oldChild
operator|instanceof
name|INodeReference
operator|.
name|DstReference
argument_list|)
expr_stmt|;
name|withCount
operator|=
operator|(
name|INodeReference
operator|.
name|WithCount
operator|)
name|oldChild
operator|.
name|asReference
argument_list|()
operator|.
name|getReferredINode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|withCount
operator|=
operator|new
name|INodeReference
operator|.
name|WithCount
argument_list|(
literal|null
argument_list|,
name|oldChild
argument_list|)
expr_stmt|;
block|}
specifier|final
name|INodeReference
operator|.
name|WithName
name|ref
init|=
operator|new
name|INodeReference
operator|.
name|WithName
argument_list|(
name|this
argument_list|,
name|withCount
argument_list|,
name|oldChild
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|,
name|latest
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|replaceChild
argument_list|(
name|oldChild
argument_list|,
name|ref
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
DECL|method|replaceChildFile (final INodeFile oldChild, final INodeFile newChild, final INodeMap inodeMap)
specifier|private
name|void
name|replaceChildFile
parameter_list|(
specifier|final
name|INodeFile
name|oldChild
parameter_list|,
specifier|final
name|INodeFile
name|newChild
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
block|{
name|replaceChild
argument_list|(
name|oldChild
argument_list|,
name|newChild
argument_list|,
name|inodeMap
argument_list|)
expr_stmt|;
name|oldChild
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newChild
operator|.
name|updateBlockCollection
argument_list|()
expr_stmt|;
block|}
comment|/** Replace a child {@link INodeFile} with an {@link INodeFileWithSnapshot}. */
DECL|method|replaceChild4INodeFileWithSnapshot ( final INodeFile child, final INodeMap inodeMap)
name|INodeFileWithSnapshot
name|replaceChild4INodeFileWithSnapshot
parameter_list|(
specifier|final
name|INodeFile
name|child
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
operator|(
name|child
operator|instanceof
name|INodeFileWithSnapshot
operator|)
argument_list|,
literal|"Child file is already an INodeFileWithSnapshot, child="
operator|+
name|child
argument_list|)
expr_stmt|;
specifier|final
name|INodeFileWithSnapshot
name|newChild
init|=
operator|new
name|INodeFileWithSnapshot
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|replaceChildFile
argument_list|(
name|child
argument_list|,
name|newChild
argument_list|,
name|inodeMap
argument_list|)
expr_stmt|;
return|return
name|newChild
return|;
block|}
comment|/** Replace a child {@link INodeFile} with an {@link INodeFileUnderConstructionWithSnapshot}. */
DECL|method|replaceChild4INodeFileUcWithSnapshot ( final INodeFileUnderConstruction child, final INodeMap inodeMap)
name|INodeFileUnderConstructionWithSnapshot
name|replaceChild4INodeFileUcWithSnapshot
parameter_list|(
specifier|final
name|INodeFileUnderConstruction
name|child
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
operator|(
name|child
operator|instanceof
name|INodeFileUnderConstructionWithSnapshot
operator|)
argument_list|,
literal|"Child file is already an INodeFileUnderConstructionWithSnapshot, child="
operator|+
name|child
argument_list|)
expr_stmt|;
specifier|final
name|INodeFileUnderConstructionWithSnapshot
name|newChild
init|=
operator|new
name|INodeFileUnderConstructionWithSnapshot
argument_list|(
name|child
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|replaceChildFile
argument_list|(
name|child
argument_list|,
name|newChild
argument_list|,
name|inodeMap
argument_list|)
expr_stmt|;
return|return
name|newChild
return|;
block|}
annotation|@
name|Override
DECL|method|recordModification (Snapshot latest, final INodeMap inodeMap)
specifier|public
name|INodeDirectory
name|recordModification
parameter_list|(
name|Snapshot
name|latest
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
if|if
condition|(
name|isInLatestSnapshot
argument_list|(
name|latest
argument_list|)
condition|)
block|{
return|return
name|replaceSelf4INodeDirectoryWithSnapshot
argument_list|(
name|inodeMap
argument_list|)
operator|.
name|recordModification
argument_list|(
name|latest
argument_list|,
name|inodeMap
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
comment|/**    * Save the child to the latest snapshot.    *     * @return the child inode, which may be replaced.    */
DECL|method|saveChild2Snapshot (final INode child, final Snapshot latest, final INode snapshotCopy, final INodeMap inodeMap)
specifier|public
name|INode
name|saveChild2Snapshot
parameter_list|(
specifier|final
name|INode
name|child
parameter_list|,
specifier|final
name|Snapshot
name|latest
parameter_list|,
specifier|final
name|INode
name|snapshotCopy
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
if|if
condition|(
name|latest
operator|==
literal|null
condition|)
block|{
return|return
name|child
return|;
block|}
return|return
name|replaceSelf4INodeDirectoryWithSnapshot
argument_list|(
name|inodeMap
argument_list|)
operator|.
name|saveChild2Snapshot
argument_list|(
name|child
argument_list|,
name|latest
argument_list|,
name|snapshotCopy
argument_list|,
name|inodeMap
argument_list|)
return|;
block|}
comment|/**    * @param name the name of the child    * @param snapshot    *          if it is not null, get the result from the given snapshot;    *          otherwise, get the result from the current directory.    * @return the child inode.    */
DECL|method|getChild (byte[] name, Snapshot snapshot)
specifier|public
name|INode
name|getChild
parameter_list|(
name|byte
index|[]
name|name
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|)
block|{
specifier|final
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|c
init|=
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|binarySearch
argument_list|(
name|c
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|i
operator|<
literal|0
condition|?
literal|null
else|:
name|c
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/** @return the {@link INodesInPath} containing only the last inode. */
DECL|method|getLastINodeInPath (String path, boolean resolveLink )
name|INodesInPath
name|getLastINodeInPath
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
block|{
return|return
name|INodesInPath
operator|.
name|resolve
argument_list|(
name|this
argument_list|,
name|getPathComponents
argument_list|(
name|path
argument_list|)
argument_list|,
literal|1
argument_list|,
name|resolveLink
argument_list|)
return|;
block|}
comment|/** @return the {@link INodesInPath} containing all inodes in the path. */
DECL|method|getINodesInPath (String path, boolean resolveLink )
name|INodesInPath
name|getINodesInPath
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
block|{
specifier|final
name|byte
index|[]
index|[]
name|components
init|=
name|getPathComponents
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|INodesInPath
operator|.
name|resolve
argument_list|(
name|this
argument_list|,
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
name|resolveLink
argument_list|)
return|;
block|}
comment|/** @return the last inode in the path. */
DECL|method|getNode (String path, boolean resolveLink)
name|INode
name|getNode
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
block|{
return|return
name|getLastINodeInPath
argument_list|(
name|path
argument_list|,
name|resolveLink
argument_list|)
operator|.
name|getINode
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * @return the INode of the last component in src, or null if the last    * component does not exist.    * @throws UnresolvedLinkException if symlink can't be resolved    * @throws SnapshotAccessControlException if path is in RO snapshot    */
DECL|method|getINode4Write (String src, boolean resolveLink)
name|INode
name|getINode4Write
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
block|{
return|return
name|getINodesInPath4Write
argument_list|(
name|src
argument_list|,
name|resolveLink
argument_list|)
operator|.
name|getLastINode
argument_list|()
return|;
block|}
comment|/**    * @return the INodesInPath of the components in src    * @throws UnresolvedLinkException if symlink can't be resolved    * @throws SnapshotAccessControlException if path is in RO snapshot    */
DECL|method|getINodesInPath4Write (String src, boolean resolveLink)
name|INodesInPath
name|getINodesInPath4Write
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|resolveLink
parameter_list|)
throws|throws
name|UnresolvedLinkException
throws|,
name|SnapshotAccessControlException
block|{
specifier|final
name|byte
index|[]
index|[]
name|components
init|=
name|INode
operator|.
name|getPathComponents
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|INodesInPath
name|inodesInPath
init|=
name|INodesInPath
operator|.
name|resolve
argument_list|(
name|this
argument_list|,
name|components
argument_list|,
name|components
operator|.
name|length
argument_list|,
name|resolveLink
argument_list|)
decl_stmt|;
if|if
condition|(
name|inodesInPath
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotAccessControlException
argument_list|(
literal|"Modification on a read-only snapshot is disallowed"
argument_list|)
throw|;
block|}
return|return
name|inodesInPath
return|;
block|}
comment|/**    * Given a child's name, return the index of the next child    *    * @param name a child's name    * @return the index of the next child    */
DECL|method|nextChild (ReadOnlyList<INode> children, byte[] name)
specifier|static
name|int
name|nextChild
parameter_list|(
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|children
parameter_list|,
name|byte
index|[]
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// empty name
return|return
literal|0
return|;
block|}
name|int
name|nextPos
init|=
name|ReadOnlyList
operator|.
name|Util
operator|.
name|binarySearch
argument_list|(
name|children
argument_list|,
name|name
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|nextPos
operator|>=
literal|0
condition|)
block|{
return|return
name|nextPos
return|;
block|}
return|return
operator|-
name|nextPos
return|;
block|}
comment|/**    * Add a child inode to the directory.    *     * @param node INode to insert    * @param setModTime set modification time for the parent node    *                   not needed when replaying the addition and     *                   the parent already has the proper mod time    * @param inodeMap update the inodeMap if the directory node gets replaced    * @return false if the child with this name already exists;     *         otherwise, return true;    */
DECL|method|addChild (INode node, final boolean setModTime, final Snapshot latest, final INodeMap inodeMap)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|INode
name|node
parameter_list|,
specifier|final
name|boolean
name|setModTime
parameter_list|,
specifier|final
name|Snapshot
name|latest
parameter_list|,
specifier|final
name|INodeMap
name|inodeMap
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
specifier|final
name|int
name|low
init|=
name|searchChildren
argument_list|(
name|node
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|low
operator|>=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isInLatestSnapshot
argument_list|(
name|latest
argument_list|)
condition|)
block|{
name|INodeDirectoryWithSnapshot
name|sdir
init|=
name|replaceSelf4INodeDirectoryWithSnapshot
argument_list|(
name|inodeMap
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
name|sdir
operator|.
name|addChild
argument_list|(
name|node
argument_list|,
name|setModTime
argument_list|,
name|latest
argument_list|,
name|inodeMap
argument_list|)
decl_stmt|;
return|return
name|added
return|;
block|}
name|addChild
argument_list|(
name|node
argument_list|,
name|low
argument_list|)
expr_stmt|;
if|if
condition|(
name|setModTime
condition|)
block|{
comment|// update modification time of the parent directory
name|updateModificationTime
argument_list|(
name|node
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|latest
argument_list|,
name|inodeMap
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/** The same as addChild(node, false, null, false) */
DECL|method|addChild (INode node)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|INode
name|node
parameter_list|)
block|{
specifier|final
name|int
name|low
init|=
name|searchChildren
argument_list|(
name|node
operator|.
name|getLocalNameBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|low
operator|>=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|addChild
argument_list|(
name|node
argument_list|,
name|low
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Add the node to the children list at the given insertion point.    * The basic add method which actually calls children.add(..).    */
DECL|method|addChild (final INode node, final int insertionPoint)
specifier|private
name|void
name|addChild
parameter_list|(
specifier|final
name|INode
name|node
parameter_list|,
specifier|final
name|int
name|insertionPoint
parameter_list|)
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|INode
argument_list|>
argument_list|(
name|DEFAULT_FILES_PER_DIRECTORY
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|-
name|insertionPoint
operator|-
literal|1
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getGroupName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|node
operator|.
name|setGroup
argument_list|(
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|computeQuotaUsage (Quota.Counts counts, boolean useCache, int lastSnapshotId)
specifier|public
name|Quota
operator|.
name|Counts
name|computeQuotaUsage
parameter_list|(
name|Quota
operator|.
name|Counts
name|counts
parameter_list|,
name|boolean
name|useCache
parameter_list|,
name|int
name|lastSnapshotId
parameter_list|)
block|{
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|INode
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|computeQuotaUsage
argument_list|(
name|counts
argument_list|,
name|useCache
argument_list|,
name|lastSnapshotId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|computeQuotaUsage4CurrentDirectory
argument_list|(
name|counts
argument_list|)
return|;
block|}
comment|/** Add quota usage for this inode excluding children. */
DECL|method|computeQuotaUsage4CurrentDirectory (Quota.Counts counts)
specifier|public
name|Quota
operator|.
name|Counts
name|computeQuotaUsage4CurrentDirectory
parameter_list|(
name|Quota
operator|.
name|Counts
name|counts
parameter_list|)
block|{
name|counts
operator|.
name|add
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|counts
return|;
block|}
annotation|@
name|Override
DECL|method|computeContentSummary ( ContentSummaryComputationContext summary)
specifier|public
name|ContentSummaryComputationContext
name|computeContentSummary
parameter_list|(
name|ContentSummaryComputationContext
name|summary
parameter_list|)
block|{
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|childrenList
init|=
name|getChildrenList
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Explicit traversing is done to enable repositioning after relinquishing
comment|// and reacquiring locks.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|INode
name|child
init|=
name|childrenList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|childName
init|=
name|child
operator|.
name|getLocalNameBytes
argument_list|()
decl_stmt|;
name|long
name|lastYieldCount
init|=
name|summary
operator|.
name|getYieldCount
argument_list|()
decl_stmt|;
name|child
operator|.
name|computeContentSummary
argument_list|(
name|summary
argument_list|)
expr_stmt|;
comment|// Check whether the computation was paused in the subtree.
comment|// The counts may be off, but traversing the rest of children
comment|// should be made safe.
if|if
condition|(
name|lastYieldCount
operator|==
name|summary
operator|.
name|getYieldCount
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// The locks were released and reacquired. Check parent first.
if|if
condition|(
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Stop further counting and return whatever we have so far.
break|break;
block|}
comment|// Obtain the children list again since it may have been modified.
name|childrenList
operator|=
name|getChildrenList
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Reposition in case the children list is changed. Decrement by 1
comment|// since it will be incremented when loops.
name|i
operator|=
name|nextChild
argument_list|(
name|childrenList
argument_list|,
name|childName
argument_list|)
operator|-
literal|1
expr_stmt|;
block|}
comment|// Increment the directory count for this directory.
name|summary
operator|.
name|getCounts
argument_list|()
operator|.
name|add
argument_list|(
name|Content
operator|.
name|DIRECTORY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Relinquish and reacquire locks if necessary.
name|summary
operator|.
name|yield
argument_list|()
expr_stmt|;
return|return
name|summary
return|;
block|}
comment|/**    * @param snapshot    *          if it is not null, get the result from the given snapshot;    *          otherwise, get the result from the current directory.    * @return the current children list if the specified snapshot is null;    *         otherwise, return the children list corresponding to the snapshot.    *         Note that the returned list is never null.    */
DECL|method|getChildrenList (final Snapshot snapshot)
specifier|public
name|ReadOnlyList
argument_list|<
name|INode
argument_list|>
name|getChildrenList
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|children
operator|==
literal|null
condition|?
name|ReadOnlyList
operator|.
name|Util
operator|.
expr|<
name|INode
operator|>
name|emptyList
argument_list|()
else|:
name|ReadOnlyList
operator|.
name|Util
operator|.
name|asReadOnlyList
argument_list|(
name|children
argument_list|)
return|;
block|}
comment|/** Set the children list to null. */
DECL|method|clearChildren ()
specifier|public
name|void
name|clearChildren
parameter_list|()
block|{
name|this
operator|.
name|children
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearChildren
argument_list|()
expr_stmt|;
block|}
comment|/** Call cleanSubtree(..) recursively down the subtree. */
DECL|method|cleanSubtreeRecursively (final Snapshot snapshot, Snapshot prior, final BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes, final Map<INode, INode> excludedNodes, final boolean countDiffChange)
specifier|public
name|Quota
operator|.
name|Counts
name|cleanSubtreeRecursively
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
name|Snapshot
name|prior
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|,
specifier|final
name|Map
argument_list|<
name|INode
argument_list|,
name|INode
argument_list|>
name|excludedNodes
parameter_list|,
specifier|final
name|boolean
name|countDiffChange
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
name|Quota
operator|.
name|Counts
name|counts
init|=
name|Quota
operator|.
name|Counts
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// in case of deletion snapshot, since this call happens after we modify
comment|// the diff list, the snapshot to be deleted has been combined or renamed
comment|// to its latest previous snapshot. (besides, we also need to consider nodes
comment|// created after prior but before snapshot. this will be done in
comment|// INodeDirectoryWithSnapshot#cleanSubtree)
name|Snapshot
name|s
init|=
name|snapshot
operator|!=
literal|null
operator|&&
name|prior
operator|!=
literal|null
condition|?
name|prior
else|:
name|snapshot
decl_stmt|;
for|for
control|(
name|INode
name|child
range|:
name|getChildrenList
argument_list|(
name|s
argument_list|)
control|)
block|{
if|if
condition|(
name|snapshot
operator|!=
literal|null
operator|&&
name|excludedNodes
operator|!=
literal|null
operator|&&
name|excludedNodes
operator|.
name|containsKey
argument_list|(
name|child
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|Quota
operator|.
name|Counts
name|childCounts
init|=
name|child
operator|.
name|cleanSubtree
argument_list|(
name|snapshot
argument_list|,
name|prior
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|,
name|countDiffChange
argument_list|)
decl_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|childCounts
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counts
return|;
block|}
annotation|@
name|Override
DECL|method|destroyAndCollectBlocks (final BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes)
specifier|public
name|void
name|destroyAndCollectBlocks
parameter_list|(
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|)
block|{
for|for
control|(
name|INode
name|child
range|:
name|getChildrenList
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|child
operator|.
name|destroyAndCollectBlocks
argument_list|(
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
expr_stmt|;
block|}
name|clear
argument_list|()
expr_stmt|;
name|removedINodes
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cleanSubtree (final Snapshot snapshot, Snapshot prior, final BlocksMapUpdateInfo collectedBlocks, final List<INode> removedINodes, final boolean countDiffChange)
specifier|public
name|Quota
operator|.
name|Counts
name|cleanSubtree
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|,
name|Snapshot
name|prior
parameter_list|,
specifier|final
name|BlocksMapUpdateInfo
name|collectedBlocks
parameter_list|,
specifier|final
name|List
argument_list|<
name|INode
argument_list|>
name|removedINodes
parameter_list|,
specifier|final
name|boolean
name|countDiffChange
parameter_list|)
throws|throws
name|QuotaExceededException
block|{
if|if
condition|(
name|prior
operator|==
literal|null
operator|&&
name|snapshot
operator|==
literal|null
condition|)
block|{
comment|// destroy the whole subtree and collect blocks that should be deleted
name|Quota
operator|.
name|Counts
name|counts
init|=
name|Quota
operator|.
name|Counts
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|this
operator|.
name|computeQuotaUsage
argument_list|(
name|counts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|destroyAndCollectBlocks
argument_list|(
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|)
expr_stmt|;
return|return
name|counts
return|;
block|}
else|else
block|{
comment|// process recursively down the subtree
name|Quota
operator|.
name|Counts
name|counts
init|=
name|cleanSubtreeRecursively
argument_list|(
name|snapshot
argument_list|,
name|prior
argument_list|,
name|collectedBlocks
argument_list|,
name|removedINodes
argument_list|,
literal|null
argument_list|,
name|countDiffChange
argument_list|)
decl_stmt|;
if|if
condition|(
name|isQuotaSet
argument_list|()
condition|)
block|{
operator|(
operator|(
name|INodeDirectoryWithQuota
operator|)
name|this
operator|)
operator|.
name|addSpaceConsumed2Cache
argument_list|(
operator|-
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|NAMESPACE
argument_list|)
argument_list|,
operator|-
name|counts
operator|.
name|get
argument_list|(
name|Quota
operator|.
name|DISKSPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|counts
return|;
block|}
block|}
comment|/**    * Compare the metadata with another INodeDirectory    */
annotation|@
name|Override
DECL|method|metadataEquals (INodeDirectoryAttributes other)
specifier|public
name|boolean
name|metadataEquals
parameter_list|(
name|INodeDirectoryAttributes
name|other
parameter_list|)
block|{
return|return
name|other
operator|!=
literal|null
operator|&&
name|getNsQuota
argument_list|()
operator|==
name|other
operator|.
name|getNsQuota
argument_list|()
operator|&&
name|getDsQuota
argument_list|()
operator|==
name|other
operator|.
name|getDsQuota
argument_list|()
operator|&&
name|getPermissionLong
argument_list|()
operator|==
name|other
operator|.
name|getPermissionLong
argument_list|()
return|;
block|}
comment|/*    * The following code is to dump the tree recursively for testing.    *     *      \- foo   (INodeDirectory@33dd2717)    *        \- sub1   (INodeDirectory@442172)    *          +- file1   (INodeFile@78392d4)    *          +- file2   (INodeFile@78392d5)    *          +- sub11   (INodeDirectory@8400cff)    *            \- file3   (INodeFile@78392d6)    *          \- z_file4   (INodeFile@45848712)    */
DECL|field|DUMPTREE_EXCEPT_LAST_ITEM
specifier|static
specifier|final
name|String
name|DUMPTREE_EXCEPT_LAST_ITEM
init|=
literal|"+-"
decl_stmt|;
DECL|field|DUMPTREE_LAST_ITEM
specifier|static
specifier|final
name|String
name|DUMPTREE_LAST_ITEM
init|=
literal|"\\-"
decl_stmt|;
annotation|@
name|VisibleForTesting
annotation|@
name|Override
DECL|method|dumpTreeRecursively (PrintWriter out, StringBuilder prefix, final Snapshot snapshot)
specifier|public
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuilder
name|prefix
parameter_list|,
specifier|final
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|super
operator|.
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|", childrenSize="
operator|+
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|instanceof
name|INodeDirectoryWithQuota
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
operator|(
operator|(
name|INodeDirectoryWithQuota
operator|)
name|this
operator|)
operator|.
name|quotaString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|instanceof
name|Snapshot
operator|.
name|Root
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|", snapshotId="
operator|+
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|prefix
operator|.
name|setLength
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|prefix
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
operator|new
name|Iterable
argument_list|<
name|SnapshotAndINode
argument_list|>
argument_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|INode
argument_list|>
name|i
init|=
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|SnapshotAndINode
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|SnapshotAndINode
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SnapshotAndINode
name|next
parameter_list|()
block|{
return|return
operator|new
name|SnapshotAndINode
argument_list|(
name|snapshot
argument_list|,
name|i
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Dump the given subtrees.    * @param prefix The prefix string that each line should print.    * @param subs The subtrees.    */
annotation|@
name|VisibleForTesting
DECL|method|dumpTreeRecursively (PrintWriter out, StringBuilder prefix, Iterable<SnapshotAndINode> subs)
specifier|protected
specifier|static
name|void
name|dumpTreeRecursively
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|StringBuilder
name|prefix
parameter_list|,
name|Iterable
argument_list|<
name|SnapshotAndINode
argument_list|>
name|subs
parameter_list|)
block|{
if|if
condition|(
name|subs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|SnapshotAndINode
argument_list|>
name|i
init|=
name|subs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|SnapshotAndINode
name|pair
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|prefix
operator|.
name|append
argument_list|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
name|DUMPTREE_EXCEPT_LAST_ITEM
else|:
name|DUMPTREE_LAST_ITEM
argument_list|)
expr_stmt|;
name|pair
operator|.
name|inode
operator|.
name|dumpTreeRecursively
argument_list|(
name|out
argument_list|,
name|prefix
argument_list|,
name|pair
operator|.
name|snapshot
argument_list|)
expr_stmt|;
name|prefix
operator|.
name|setLength
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** A pair of Snapshot and INode objects. */
DECL|class|SnapshotAndINode
specifier|protected
specifier|static
class|class
name|SnapshotAndINode
block|{
DECL|field|snapshot
specifier|public
specifier|final
name|Snapshot
name|snapshot
decl_stmt|;
DECL|field|inode
specifier|public
specifier|final
name|INode
name|inode
decl_stmt|;
DECL|method|SnapshotAndINode (Snapshot snapshot, INode inode)
specifier|public
name|SnapshotAndINode
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|,
name|INode
name|inode
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|inode
operator|=
name|inode
expr_stmt|;
block|}
DECL|method|SnapshotAndINode (Snapshot snapshot)
specifier|public
name|SnapshotAndINode
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|this
argument_list|(
name|snapshot
argument_list|,
name|snapshot
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getChildrenNum (final Snapshot snapshot)
specifier|public
specifier|final
name|int
name|getChildrenNum
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|)
block|{
return|return
name|getChildrenList
argument_list|(
name|snapshot
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

